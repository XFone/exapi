// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/qpolicy_protocol.proto

#include "protos/qpolicy_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_protos_2fqpolicy_5fprotocol_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fqpolicy_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AccountParameters;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fqpolicy_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AlgoPolicyQueryResp_SubOrderInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fqpolicy_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PolicyParameters;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fqpolicy_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TraceParameters;
}  // namespace protobuf_protos_2fqpolicy_5fprotocol_2eproto
namespace autotrade {
class PolicyParametersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PolicyParameters>
      _instance;
} _PolicyParameters_default_instance_;
class AccountParametersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccountParameters>
      _instance;
} _AccountParameters_default_instance_;
class TraceParametersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TraceParameters>
      _instance;
} _TraceParameters_default_instance_;
class AlgoPolicyCreateReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AlgoPolicyCreateReqt>
      _instance;
} _AlgoPolicyCreateReqt_default_instance_;
class AlgoPolicyCreateRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AlgoPolicyCreateResp>
      _instance;
} _AlgoPolicyCreateResp_default_instance_;
class AlgoPolicyUpdateReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AlgoPolicyUpdateReqt>
      _instance;
} _AlgoPolicyUpdateReqt_default_instance_;
class AlgoPolicyUpdateRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AlgoPolicyUpdateResp>
      _instance;
} _AlgoPolicyUpdateResp_default_instance_;
class AlgoPolicyDeleteReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AlgoPolicyDeleteReqt>
      _instance;
} _AlgoPolicyDeleteReqt_default_instance_;
class AlgoPolicyDeleteRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AlgoPolicyDeleteResp>
      _instance;
} _AlgoPolicyDeleteResp_default_instance_;
class AlgoPolicyQueryReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AlgoPolicyQueryReqt>
      _instance;
} _AlgoPolicyQueryReqt_default_instance_;
class AlgoPolicyQueryResp_SubOrderInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AlgoPolicyQueryResp_SubOrderInfo>
      _instance;
} _AlgoPolicyQueryResp_SubOrderInfo_default_instance_;
class AlgoPolicyQueryRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AlgoPolicyQueryResp>
      _instance;
} _AlgoPolicyQueryResp_default_instance_;
}  // namespace autotrade
namespace protobuf_protos_2fqpolicy_5fprotocol_2eproto {
static void InitDefaultsPolicyParameters() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_PolicyParameters_default_instance_;
    new (ptr) ::autotrade::PolicyParameters();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::PolicyParameters::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PolicyParameters =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPolicyParameters}, {}};

static void InitDefaultsAccountParameters() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_AccountParameters_default_instance_;
    new (ptr) ::autotrade::AccountParameters();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::AccountParameters::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AccountParameters =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAccountParameters}, {}};

static void InitDefaultsTraceParameters() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_TraceParameters_default_instance_;
    new (ptr) ::autotrade::TraceParameters();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::TraceParameters::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TraceParameters =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTraceParameters}, {}};

static void InitDefaultsAlgoPolicyCreateReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_AlgoPolicyCreateReqt_default_instance_;
    new (ptr) ::autotrade::AlgoPolicyCreateReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::AlgoPolicyCreateReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_AlgoPolicyCreateReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsAlgoPolicyCreateReqt}, {
      &protobuf_protos_2fqpolicy_5fprotocol_2eproto::scc_info_PolicyParameters.base,
      &protobuf_protos_2fqpolicy_5fprotocol_2eproto::scc_info_TraceParameters.base,
      &protobuf_protos_2fqpolicy_5fprotocol_2eproto::scc_info_AccountParameters.base,}};

static void InitDefaultsAlgoPolicyCreateResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_AlgoPolicyCreateResp_default_instance_;
    new (ptr) ::autotrade::AlgoPolicyCreateResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::AlgoPolicyCreateResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AlgoPolicyCreateResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAlgoPolicyCreateResp}, {}};

static void InitDefaultsAlgoPolicyUpdateReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_AlgoPolicyUpdateReqt_default_instance_;
    new (ptr) ::autotrade::AlgoPolicyUpdateReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::AlgoPolicyUpdateReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AlgoPolicyUpdateReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAlgoPolicyUpdateReqt}, {
      &protobuf_protos_2fqpolicy_5fprotocol_2eproto::scc_info_PolicyParameters.base,
      &protobuf_protos_2fqpolicy_5fprotocol_2eproto::scc_info_TraceParameters.base,}};

static void InitDefaultsAlgoPolicyUpdateResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_AlgoPolicyUpdateResp_default_instance_;
    new (ptr) ::autotrade::AlgoPolicyUpdateResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::AlgoPolicyUpdateResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AlgoPolicyUpdateResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAlgoPolicyUpdateResp}, {}};

static void InitDefaultsAlgoPolicyDeleteReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_AlgoPolicyDeleteReqt_default_instance_;
    new (ptr) ::autotrade::AlgoPolicyDeleteReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::AlgoPolicyDeleteReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AlgoPolicyDeleteReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAlgoPolicyDeleteReqt}, {}};

static void InitDefaultsAlgoPolicyDeleteResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_AlgoPolicyDeleteResp_default_instance_;
    new (ptr) ::autotrade::AlgoPolicyDeleteResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::AlgoPolicyDeleteResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AlgoPolicyDeleteResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAlgoPolicyDeleteResp}, {}};

static void InitDefaultsAlgoPolicyQueryReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_AlgoPolicyQueryReqt_default_instance_;
    new (ptr) ::autotrade::AlgoPolicyQueryReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::AlgoPolicyQueryReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AlgoPolicyQueryReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAlgoPolicyQueryReqt}, {}};

static void InitDefaultsAlgoPolicyQueryResp_SubOrderInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_AlgoPolicyQueryResp_SubOrderInfo_default_instance_;
    new (ptr) ::autotrade::AlgoPolicyQueryResp_SubOrderInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::AlgoPolicyQueryResp_SubOrderInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AlgoPolicyQueryResp_SubOrderInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAlgoPolicyQueryResp_SubOrderInfo}, {}};

static void InitDefaultsAlgoPolicyQueryResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_AlgoPolicyQueryResp_default_instance_;
    new (ptr) ::autotrade::AlgoPolicyQueryResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::AlgoPolicyQueryResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AlgoPolicyQueryResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAlgoPolicyQueryResp}, {
      &protobuf_protos_2fqpolicy_5fprotocol_2eproto::scc_info_AlgoPolicyQueryResp_SubOrderInfo.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_PolicyParameters.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccountParameters.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TraceParameters.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AlgoPolicyCreateReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AlgoPolicyCreateResp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AlgoPolicyUpdateReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AlgoPolicyUpdateResp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AlgoPolicyDeleteReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AlgoPolicyDeleteResp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AlgoPolicyQueryReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AlgoPolicyQueryResp_SubOrderInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AlgoPolicyQueryResp.base);
}

::google::protobuf::Metadata file_level_metadata[12];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::PolicyParameters, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::PolicyParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::PolicyParameters, algono_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::PolicyParameters, sec_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::PolicyParameters, fund_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::PolicyParameters, market_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::PolicyParameters, stock_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::PolicyParameters, stock_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::PolicyParameters, hedge_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::PolicyParameters, bsflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::PolicyParameters, autotradesno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::PolicyParameters, total_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::PolicyParameters, total_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::PolicyParameters, total_amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::PolicyParameters, order_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::PolicyParameters, order_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::PolicyParameters, order_price_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::PolicyParameters, trade_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::PolicyParameters, credit_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::PolicyParameters, suborder_valid_period_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::PolicyParameters, radical_reorder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::PolicyParameters, radical_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::PolicyParameters, radical_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::PolicyParameters, order_frequency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::PolicyParameters, order_limit_price_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::PolicyParameters, max_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::PolicyParameters, min_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::PolicyParameters, price_float_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::PolicyParameters, min_trade_unit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::PolicyParameters, start_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::PolicyParameters, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::PolicyParameters, execute_time_),
  0,
  1,
  2,
  5,
  3,
  6,
  7,
  4,
  8,
  9,
  10,
  11,
  13,
  12,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AccountParameters, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AccountParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AccountParameters, cust_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AccountParameters, int_org_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AccountParameters, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AccountParameters, fund_sn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AccountParameters, acct_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AccountParameters, encrypt_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AccountParameters, auth_data_),
  0,
  5,
  1,
  6,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::TraceParameters, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::TraceParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::TraceParameters, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::TraceParameters, server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::TraceParameters, backtest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::TraceParameters, playback_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::TraceParameters, playback_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::TraceParameters, playback_time_),
  4,
  0,
  1,
  5,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyCreateReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyCreateReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyCreateReqt, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyCreateReqt, param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyCreateReqt, trace_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyCreateReqt, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyCreateReqt, request_id_),
  4,
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyCreateResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyCreateResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyCreateResp, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyCreateResp, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyCreateResp, error_msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyCreateResp, algo_instance_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyCreateResp, request_id_),
  4,
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyUpdateReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyUpdateReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyUpdateReqt, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyUpdateReqt, op_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyUpdateReqt, algo_instance_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyUpdateReqt, param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyUpdateReqt, trace_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyUpdateReqt, request_id_),
  5,
  4,
  0,
  2,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyUpdateResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyUpdateResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyUpdateResp, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyUpdateResp, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyUpdateResp, error_msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyUpdateResp, algo_instance_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyUpdateResp, request_id_),
  4,
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyDeleteReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyDeleteReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyDeleteReqt, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyDeleteReqt, algo_instance_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyDeleteReqt, request_id_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyDeleteResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyDeleteResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyDeleteResp, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyDeleteResp, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyDeleteResp, error_msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyDeleteResp, algo_instance_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyDeleteResp, request_id_),
  4,
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyQueryReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyQueryReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyQueryReqt, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyQueryReqt, algo_instance_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyQueryReqt, order_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyQueryReqt, request_id_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyQueryResp_SubOrderInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyQueryResp_SubOrderInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyQueryResp_SubOrderInfo, orderno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyQueryResp_SubOrderInfo, order_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyQueryResp_SubOrderInfo, order_status_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyQueryResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyQueryResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyQueryResp, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyQueryResp, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyQueryResp, error_msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyQueryResp, order_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyQueryResp, si_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyQueryResp, si_trace_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::AlgoPolicyQueryResp, request_id_),
  5,
  3,
  0,
  ~0u,
  4,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 35, sizeof(::autotrade::PolicyParameters)},
  { 65, 77, sizeof(::autotrade::AccountParameters)},
  { 84, 95, sizeof(::autotrade::TraceParameters)},
  { 101, 111, sizeof(::autotrade::AlgoPolicyCreateReqt)},
  { 116, 126, sizeof(::autotrade::AlgoPolicyCreateResp)},
  { 131, 142, sizeof(::autotrade::AlgoPolicyUpdateReqt)},
  { 148, 158, sizeof(::autotrade::AlgoPolicyUpdateResp)},
  { 163, 171, sizeof(::autotrade::AlgoPolicyDeleteReqt)},
  { 174, 184, sizeof(::autotrade::AlgoPolicyDeleteResp)},
  { 189, 198, sizeof(::autotrade::AlgoPolicyQueryReqt)},
  { 202, 210, sizeof(::autotrade::AlgoPolicyQueryResp_SubOrderInfo)},
  { 213, 225, sizeof(::autotrade::AlgoPolicyQueryResp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_PolicyParameters_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_AccountParameters_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_TraceParameters_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_AlgoPolicyCreateReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_AlgoPolicyCreateResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_AlgoPolicyUpdateReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_AlgoPolicyUpdateResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_AlgoPolicyDeleteReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_AlgoPolicyDeleteResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_AlgoPolicyQueryReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_AlgoPolicyQueryResp_SubOrderInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_AlgoPolicyQueryResp_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "protos/qpolicy_protocol.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 12);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\035protos/qpolicy_protocol.proto\022\tautotra"
      "de\"\226\005\n\020PolicyParameters\022\016\n\006algono\030\001 \002(\t\022"
      "\017\n\007sec_uid\030\002 \002(\t\022\017\n\007fund_id\030\003 \002(\t\022\016\n\006mar"
      "ket\030\004 \002(\r\022\022\n\nstock_code\030\005 \002(\t\022\022\n\nstock_t"
      "ype\030\006 \001(\005\022\022\n\nhedge_flag\030\007 \002(\r\022\016\n\006bsflag\030"
      "\010 \002(\t\022\024\n\014autotradesno\030\t \001(\005\022\022\n\ntotal_typ"
      "e\030\n \002(\005\022\021\n\ttotal_qty\030\013 \001(\005\022\024\n\014total_amou"
      "nt\030\014 \001(\003\022\022\n\norder_type\030\r \002(\005\022\023\n\013order_pr"
      "ice\030\016 \001(\003\022\031\n\021order_price_level\030\017 \001(\005\022\022\n\n"
      "trade_type\030\020 \002(\005\022\023\n\013credit_type\030\021 \001(\005\022\035\n"
      "\025suborder_valid_period\030\022 \001(\005\022\027\n\017radical_"
      "reorder\030\023 \001(\010\022\025\n\rradical_level\030\024 \001(\005\022\025\n\r"
      "radical_count\030\025 \001(\005\022\027\n\017order_frequency\030\026"
      " \001(\005\022\036\n\026order_limit_price_type\030\027 \001(\005\022\021\n\t"
      "max_price\030\030 \001(\003\022\021\n\tmin_price\030\031 \001(\003\022\031\n\021pr"
      "ice_float_point\030\032 \001(\005\022\026\n\016min_trade_unit\030"
      "\033 \001(\005\022\022\n\nstart_mode\030\034 \002(\005\022\022\n\nstart_time\030"
      "\035 \001(\005\022\024\n\014execute_time\030\036 \001(\005\"\224\001\n\021AccountP"
      "arameters\022\021\n\tcust_code\030\001 \002(\t\022\017\n\007int_org\030"
      "\002 \001(\005\022\017\n\007channel\030\003 \001(\t\022\017\n\007fund_sn\030\004 \001(\005\022"
      "\021\n\tacct_type\030\005 \001(\t\022\023\n\013encrypt_key\030\006 \001(\t\022"
      "\021\n\tauth_data\030\007 \001(\t\"\224\001\n\017TraceParameters\022\020"
      "\n\005level\030\001 \001(\005:\0015\022\016\n\006server\030\002 \001(\t\022\027\n\010back"
      "test\030\003 \001(\010:\005false\022\031\n\016playback_speed\030\004 \001("
      "\005:\0011\022\024\n\014playback_day\030\005 \001(\r\022\025\n\rplayback_t"
      "ime\030\006 \001(\r\"\312\001\n\024AlgoPolicyCreateReqt\022\030\n\006fu"
      "ncid\030\001 \001(\005:\01091000001\022*\n\005param\030\002 \002(\0132\033.au"
      "totrade.PolicyParameters\022)\n\005trace\030\003 \001(\0132"
      "\032.autotrade.TraceParameters\022-\n\007account\030\004"
      " \001(\0132\034.autotrade.AccountParameters\022\022\n\nre"
      "quest_id\030\005 \001(\t\"\205\001\n\024AlgoPolicyCreateResp\022"
      "\030\n\006funcid\030\001 \001(\005:\01091100001\022\022\n\nerror_code\030"
      "\002 \002(\005\022\021\n\terror_msg\030\003 \001(\t\022\030\n\020algo_instanc"
      "e_id\030\004 \001(\t\022\022\n\nrequest_id\030\005 \001(\t\"\306\001\n\024AlgoP"
      "olicyUpdateReqt\022\030\n\006funcid\030\001 \001(\005:\0109100000"
      "2\022\017\n\007op_code\030\002 \002(\005\022\030\n\020algo_instance_id\030\003"
      " \002(\t\022*\n\005param\030\004 \001(\0132\033.autotrade.PolicyPa"
      "rameters\022)\n\005trace\030\005 \001(\0132\032.autotrade.Trac"
      "eParameters\022\022\n\nrequest_id\030\006 \001(\t\"\205\001\n\024Algo"
      "PolicyUpdateResp\022\030\n\006funcid\030\001 \001(\005:\010911000"
      "02\022\022\n\nerror_code\030\002 \002(\005\022\021\n\terror_msg\030\003 \001("
      "\t\022\030\n\020algo_instance_id\030\004 \001(\t\022\022\n\nrequest_i"
      "d\030\005 \001(\t\"^\n\024AlgoPolicyDeleteReqt\022\030\n\006funci"
      "d\030\001 \001(\005:\01091000003\022\030\n\020algo_instance_id\030\002 "
      "\002(\t\022\022\n\nrequest_id\030\003 \001(\t\"\205\001\n\024AlgoPolicyDe"
      "leteResp\022\030\n\006funcid\030\001 \001(\005:\01091100003\022\022\n\ner"
      "ror_code\030\002 \002(\005\022\021\n\terror_msg\030\003 \001(\t\022\030\n\020alg"
      "o_instance_id\030\004 \001(\t\022\022\n\nrequest_id\030\005 \001(\t\""
      "o\n\023AlgoPolicyQueryReqt\022\030\n\006funcid\030\001 \001(\005:\010"
      "91000004\022\030\n\020algo_instance_id\030\002 \002(\t\022\020\n\010or"
      "der_id\030\003 \001(\t\022\022\n\nrequest_id\030\004 \001(\t\"\230\002\n\023Alg"
      "oPolicyQueryResp\022\030\n\006funcid\030\001 \001(\005:\010911000"
      "04\022\022\n\nerror_code\030\002 \002(\005\022\021\n\terror_msg\030\003 \001("
      "\t\022\?\n\norder_list\030\004 \003(\0132+.autotrade.AlgoPo"
      "licyQueryResp.SubOrderInfo\022\020\n\010si_state\030\005"
      " \001(\005\022\020\n\010si_trace\030\006 \001(\t\022\022\n\nrequest_id\030\007 \001"
      "(\t\032G\n\014SubOrderInfo\022\017\n\007orderno\030\001 \002(\t\022\020\n\010o"
      "rder_id\030\002 \001(\t\022\024\n\014order_status\030\003 \001(\tB\002H\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2319);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protos/qpolicy_protocol.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_protos_2fqpolicy_5fprotocol_2eproto
namespace autotrade {

// ===================================================================

void PolicyParameters::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PolicyParameters::kAlgonoFieldNumber;
const int PolicyParameters::kSecUidFieldNumber;
const int PolicyParameters::kFundIdFieldNumber;
const int PolicyParameters::kMarketFieldNumber;
const int PolicyParameters::kStockCodeFieldNumber;
const int PolicyParameters::kStockTypeFieldNumber;
const int PolicyParameters::kHedgeFlagFieldNumber;
const int PolicyParameters::kBsflagFieldNumber;
const int PolicyParameters::kAutotradesnoFieldNumber;
const int PolicyParameters::kTotalTypeFieldNumber;
const int PolicyParameters::kTotalQtyFieldNumber;
const int PolicyParameters::kTotalAmountFieldNumber;
const int PolicyParameters::kOrderTypeFieldNumber;
const int PolicyParameters::kOrderPriceFieldNumber;
const int PolicyParameters::kOrderPriceLevelFieldNumber;
const int PolicyParameters::kTradeTypeFieldNumber;
const int PolicyParameters::kCreditTypeFieldNumber;
const int PolicyParameters::kSuborderValidPeriodFieldNumber;
const int PolicyParameters::kRadicalReorderFieldNumber;
const int PolicyParameters::kRadicalLevelFieldNumber;
const int PolicyParameters::kRadicalCountFieldNumber;
const int PolicyParameters::kOrderFrequencyFieldNumber;
const int PolicyParameters::kOrderLimitPriceTypeFieldNumber;
const int PolicyParameters::kMaxPriceFieldNumber;
const int PolicyParameters::kMinPriceFieldNumber;
const int PolicyParameters::kPriceFloatPointFieldNumber;
const int PolicyParameters::kMinTradeUnitFieldNumber;
const int PolicyParameters::kStartModeFieldNumber;
const int PolicyParameters::kStartTimeFieldNumber;
const int PolicyParameters::kExecuteTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PolicyParameters::PolicyParameters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqpolicy_5fprotocol_2eproto::scc_info_PolicyParameters.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.PolicyParameters)
}
PolicyParameters::PolicyParameters(const PolicyParameters& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  algono_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_algono()) {
    algono_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.algono_);
  }
  sec_uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sec_uid()) {
    sec_uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sec_uid_);
  }
  fund_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fund_id()) {
    fund_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fund_id_);
  }
  stock_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_stock_code()) {
    stock_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stock_code_);
  }
  bsflag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bsflag()) {
    bsflag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bsflag_);
  }
  ::memcpy(&market_, &from.market_,
    static_cast<size_t>(reinterpret_cast<char*>(&execute_time_) -
    reinterpret_cast<char*>(&market_)) + sizeof(execute_time_));
  // @@protoc_insertion_point(copy_constructor:autotrade.PolicyParameters)
}

void PolicyParameters::SharedCtor() {
  algono_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sec_uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fund_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stock_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bsflag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&market_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&execute_time_) -
      reinterpret_cast<char*>(&market_)) + sizeof(execute_time_));
}

PolicyParameters::~PolicyParameters() {
  // @@protoc_insertion_point(destructor:autotrade.PolicyParameters)
  SharedDtor();
}

void PolicyParameters::SharedDtor() {
  algono_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sec_uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fund_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stock_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bsflag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PolicyParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PolicyParameters::descriptor() {
  ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PolicyParameters& PolicyParameters::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqpolicy_5fprotocol_2eproto::scc_info_PolicyParameters.base);
  return *internal_default_instance();
}


void PolicyParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.PolicyParameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      algono_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      sec_uid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      fund_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      stock_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      bsflag_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&market_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hedge_flag_) -
        reinterpret_cast<char*>(&market_)) + sizeof(hedge_flag_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&autotradesno_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trade_type_) -
        reinterpret_cast<char*>(&autotradesno_)) + sizeof(trade_type_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&credit_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_price_) -
        reinterpret_cast<char*>(&credit_type_)) + sizeof(max_price_));
  }
  if (cached_has_bits & 1056964608u) {
    ::memset(&min_price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&execute_time_) -
        reinterpret_cast<char*>(&min_price_)) + sizeof(execute_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PolicyParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.PolicyParameters)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string algono = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_algono()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->algono().data(), static_cast<int>(this->algono().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.PolicyParameters.algono");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string sec_uid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sec_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sec_uid().data(), static_cast<int>(this->sec_uid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.PolicyParameters.sec_uid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string fund_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fund_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fund_id().data(), static_cast<int>(this->fund_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.PolicyParameters.fund_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 market = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_market();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &market_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string stock_code = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stock_code().data(), static_cast<int>(this->stock_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.PolicyParameters.stock_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 stock_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_stock_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stock_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 hedge_flag = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_hedge_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hedge_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string bsflag = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bsflag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bsflag().data(), static_cast<int>(this->bsflag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.PolicyParameters.bsflag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 autotradesno = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_autotradesno();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &autotradesno_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 total_type = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_total_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_qty = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_total_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 total_amount = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_total_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 order_type = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_order_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 order_price = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_order_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &order_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 order_price_level = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_order_price_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_price_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 trade_type = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_trade_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trade_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 credit_type = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_credit_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &credit_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 suborder_valid_period = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_suborder_valid_period();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &suborder_valid_period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool radical_reorder = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_radical_reorder();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &radical_reorder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 radical_level = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_radical_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &radical_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 radical_count = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_radical_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &radical_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 order_frequency = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_order_frequency();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 order_limit_price_type = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_order_limit_price_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_limit_price_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 max_price = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_max_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 min_price = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_min_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 price_float_point = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_price_float_point();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_float_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 min_trade_unit = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          set_has_min_trade_unit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_trade_unit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 start_mode = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          set_has_start_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 start_time = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          set_has_start_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 execute_time = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_execute_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &execute_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.PolicyParameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.PolicyParameters)
  return false;
#undef DO_
}

void PolicyParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.PolicyParameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string algono = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->algono().data(), static_cast<int>(this->algono().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.PolicyParameters.algono");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->algono(), output);
  }

  // required string sec_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sec_uid().data(), static_cast<int>(this->sec_uid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.PolicyParameters.sec_uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sec_uid(), output);
  }

  // required string fund_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fund_id().data(), static_cast<int>(this->fund_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.PolicyParameters.fund_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fund_id(), output);
  }

  // required uint32 market = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->market(), output);
  }

  // required string stock_code = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stock_code().data(), static_cast<int>(this->stock_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.PolicyParameters.stock_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->stock_code(), output);
  }

  // optional int32 stock_type = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->stock_type(), output);
  }

  // required uint32 hedge_flag = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->hedge_flag(), output);
  }

  // required string bsflag = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bsflag().data(), static_cast<int>(this->bsflag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.PolicyParameters.bsflag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->bsflag(), output);
  }

  // optional int32 autotradesno = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->autotradesno(), output);
  }

  // required int32 total_type = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->total_type(), output);
  }

  // optional int32 total_qty = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->total_qty(), output);
  }

  // optional int64 total_amount = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->total_amount(), output);
  }

  // required int32 order_type = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->order_type(), output);
  }

  // optional int64 order_price = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->order_price(), output);
  }

  // optional int32 order_price_level = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->order_price_level(), output);
  }

  // required int32 trade_type = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->trade_type(), output);
  }

  // optional int32 credit_type = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->credit_type(), output);
  }

  // optional int32 suborder_valid_period = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->suborder_valid_period(), output);
  }

  // optional bool radical_reorder = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->radical_reorder(), output);
  }

  // optional int32 radical_level = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->radical_level(), output);
  }

  // optional int32 radical_count = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->radical_count(), output);
  }

  // optional int32 order_frequency = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->order_frequency(), output);
  }

  // optional int32 order_limit_price_type = 23;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->order_limit_price_type(), output);
  }

  // optional int64 max_price = 24;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->max_price(), output);
  }

  // optional int64 min_price = 25;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(25, this->min_price(), output);
  }

  // optional int32 price_float_point = 26;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->price_float_point(), output);
  }

  // optional int32 min_trade_unit = 27;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->min_trade_unit(), output);
  }

  // required int32 start_mode = 28;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->start_mode(), output);
  }

  // optional int32 start_time = 29;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->start_time(), output);
  }

  // optional int32 execute_time = 30;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->execute_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.PolicyParameters)
}

::google::protobuf::uint8* PolicyParameters::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.PolicyParameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string algono = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->algono().data(), static_cast<int>(this->algono().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.PolicyParameters.algono");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->algono(), target);
  }

  // required string sec_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sec_uid().data(), static_cast<int>(this->sec_uid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.PolicyParameters.sec_uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sec_uid(), target);
  }

  // required string fund_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fund_id().data(), static_cast<int>(this->fund_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.PolicyParameters.fund_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fund_id(), target);
  }

  // required uint32 market = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->market(), target);
  }

  // required string stock_code = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stock_code().data(), static_cast<int>(this->stock_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.PolicyParameters.stock_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->stock_code(), target);
  }

  // optional int32 stock_type = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->stock_type(), target);
  }

  // required uint32 hedge_flag = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->hedge_flag(), target);
  }

  // required string bsflag = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bsflag().data(), static_cast<int>(this->bsflag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.PolicyParameters.bsflag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->bsflag(), target);
  }

  // optional int32 autotradesno = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->autotradesno(), target);
  }

  // required int32 total_type = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->total_type(), target);
  }

  // optional int32 total_qty = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->total_qty(), target);
  }

  // optional int64 total_amount = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->total_amount(), target);
  }

  // required int32 order_type = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->order_type(), target);
  }

  // optional int64 order_price = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->order_price(), target);
  }

  // optional int32 order_price_level = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->order_price_level(), target);
  }

  // required int32 trade_type = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->trade_type(), target);
  }

  // optional int32 credit_type = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->credit_type(), target);
  }

  // optional int32 suborder_valid_period = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->suborder_valid_period(), target);
  }

  // optional bool radical_reorder = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->radical_reorder(), target);
  }

  // optional int32 radical_level = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->radical_level(), target);
  }

  // optional int32 radical_count = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->radical_count(), target);
  }

  // optional int32 order_frequency = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->order_frequency(), target);
  }

  // optional int32 order_limit_price_type = 23;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->order_limit_price_type(), target);
  }

  // optional int64 max_price = 24;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->max_price(), target);
  }

  // optional int64 min_price = 25;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(25, this->min_price(), target);
  }

  // optional int32 price_float_point = 26;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->price_float_point(), target);
  }

  // optional int32 min_trade_unit = 27;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->min_trade_unit(), target);
  }

  // required int32 start_mode = 28;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->start_mode(), target);
  }

  // optional int32 start_time = 29;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->start_time(), target);
  }

  // optional int32 execute_time = 30;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->execute_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.PolicyParameters)
  return target;
}

size_t PolicyParameters::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autotrade.PolicyParameters)
  size_t total_size = 0;

  if (has_algono()) {
    // required string algono = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->algono());
  }

  if (has_sec_uid()) {
    // required string sec_uid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sec_uid());
  }

  if (has_fund_id()) {
    // required string fund_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fund_id());
  }

  if (has_stock_code()) {
    // required string stock_code = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stock_code());
  }

  if (has_bsflag()) {
    // required string bsflag = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bsflag());
  }

  if (has_market()) {
    // required uint32 market = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->market());
  }

  if (has_hedge_flag()) {
    // required uint32 hedge_flag = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hedge_flag());
  }

  if (has_total_type()) {
    // required int32 total_type = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total_type());
  }

  if (has_order_type()) {
    // required int32 order_type = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->order_type());
  }

  if (has_trade_type()) {
    // required int32 trade_type = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trade_type());
  }

  if (has_start_mode()) {
    // required int32 start_mode = 28;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start_mode());
  }

  return total_size;
}
size_t PolicyParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.PolicyParameters)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0800a2bf) ^ 0x0800a2bf) == 0) {  // All required fields are present.
    // required string algono = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->algono());

    // required string sec_uid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sec_uid());

    // required string fund_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fund_id());

    // required string stock_code = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stock_code());

    // required string bsflag = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bsflag());

    // required uint32 market = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->market());

    // required uint32 hedge_flag = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hedge_flag());

    // required int32 total_type = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total_type());

    // required int32 order_type = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->order_type());

    // required int32 trade_type = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trade_type());

    // required int32 start_mode = 28;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start_mode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int32 stock_type = 6;
  if (has_stock_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stock_type());
  }

  // optional int32 autotradesno = 9;
  if (has_autotradesno()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->autotradesno());
  }

  if (_has_bits_[8 / 32] & 7168u) {
    // optional int32 total_qty = 11;
    if (has_total_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_qty());
    }

    // optional int64 total_amount = 12;
    if (has_total_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_amount());
    }

    // optional int64 order_price = 14;
    if (has_order_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->order_price());
    }

  }
  // optional int32 order_price_level = 15;
  if (has_order_price_level()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->order_price_level());
  }

  if (_has_bits_[16 / 32] & 16711680u) {
    // optional int32 credit_type = 17;
    if (has_credit_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->credit_type());
    }

    // optional int32 suborder_valid_period = 18;
    if (has_suborder_valid_period()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->suborder_valid_period());
    }

    // optional bool radical_reorder = 19;
    if (has_radical_reorder()) {
      total_size += 2 + 1;
    }

    // optional int32 radical_level = 20;
    if (has_radical_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->radical_level());
    }

    // optional int32 radical_count = 21;
    if (has_radical_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->radical_count());
    }

    // optional int32 order_frequency = 22;
    if (has_order_frequency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order_frequency());
    }

    // optional int32 order_limit_price_type = 23;
    if (has_order_limit_price_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order_limit_price_type());
    }

    // optional int64 max_price = 24;
    if (has_max_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_price());
    }

  }
  if (_has_bits_[24 / 32] & 117440512u) {
    // optional int64 min_price = 25;
    if (has_min_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->min_price());
    }

    // optional int32 price_float_point = 26;
    if (has_price_float_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_float_point());
    }

    // optional int32 min_trade_unit = 27;
    if (has_min_trade_unit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_trade_unit());
    }

  }
  if (_has_bits_[24 / 32] & 805306368u) {
    // optional int32 start_time = 29;
    if (has_start_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_time());
    }

    // optional int32 execute_time = 30;
    if (has_execute_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->execute_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PolicyParameters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.PolicyParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const PolicyParameters* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PolicyParameters>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.PolicyParameters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.PolicyParameters)
    MergeFrom(*source);
  }
}

void PolicyParameters::MergeFrom(const PolicyParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.PolicyParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_algono();
      algono_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.algono_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_sec_uid();
      sec_uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sec_uid_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_fund_id();
      fund_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fund_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_stock_code();
      stock_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stock_code_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_bsflag();
      bsflag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bsflag_);
    }
    if (cached_has_bits & 0x00000020u) {
      market_ = from.market_;
    }
    if (cached_has_bits & 0x00000040u) {
      stock_type_ = from.stock_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      hedge_flag_ = from.hedge_flag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      autotradesno_ = from.autotradesno_;
    }
    if (cached_has_bits & 0x00000200u) {
      total_type_ = from.total_type_;
    }
    if (cached_has_bits & 0x00000400u) {
      total_qty_ = from.total_qty_;
    }
    if (cached_has_bits & 0x00000800u) {
      total_amount_ = from.total_amount_;
    }
    if (cached_has_bits & 0x00001000u) {
      order_price_ = from.order_price_;
    }
    if (cached_has_bits & 0x00002000u) {
      order_type_ = from.order_type_;
    }
    if (cached_has_bits & 0x00004000u) {
      order_price_level_ = from.order_price_level_;
    }
    if (cached_has_bits & 0x00008000u) {
      trade_type_ = from.trade_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      credit_type_ = from.credit_type_;
    }
    if (cached_has_bits & 0x00020000u) {
      suborder_valid_period_ = from.suborder_valid_period_;
    }
    if (cached_has_bits & 0x00040000u) {
      radical_reorder_ = from.radical_reorder_;
    }
    if (cached_has_bits & 0x00080000u) {
      radical_level_ = from.radical_level_;
    }
    if (cached_has_bits & 0x00100000u) {
      radical_count_ = from.radical_count_;
    }
    if (cached_has_bits & 0x00200000u) {
      order_frequency_ = from.order_frequency_;
    }
    if (cached_has_bits & 0x00400000u) {
      order_limit_price_type_ = from.order_limit_price_type_;
    }
    if (cached_has_bits & 0x00800000u) {
      max_price_ = from.max_price_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1056964608u) {
    if (cached_has_bits & 0x01000000u) {
      min_price_ = from.min_price_;
    }
    if (cached_has_bits & 0x02000000u) {
      price_float_point_ = from.price_float_point_;
    }
    if (cached_has_bits & 0x04000000u) {
      min_trade_unit_ = from.min_trade_unit_;
    }
    if (cached_has_bits & 0x08000000u) {
      start_mode_ = from.start_mode_;
    }
    if (cached_has_bits & 0x10000000u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x20000000u) {
      execute_time_ = from.execute_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PolicyParameters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.PolicyParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PolicyParameters::CopyFrom(const PolicyParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.PolicyParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyParameters::IsInitialized() const {
  if ((_has_bits_[0] & 0x0800a2bf) != 0x0800a2bf) return false;
  return true;
}

void PolicyParameters::Swap(PolicyParameters* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PolicyParameters::InternalSwap(PolicyParameters* other) {
  using std::swap;
  algono_.Swap(&other->algono_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sec_uid_.Swap(&other->sec_uid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fund_id_.Swap(&other->fund_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  stock_code_.Swap(&other->stock_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bsflag_.Swap(&other->bsflag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(market_, other->market_);
  swap(stock_type_, other->stock_type_);
  swap(hedge_flag_, other->hedge_flag_);
  swap(autotradesno_, other->autotradesno_);
  swap(total_type_, other->total_type_);
  swap(total_qty_, other->total_qty_);
  swap(total_amount_, other->total_amount_);
  swap(order_price_, other->order_price_);
  swap(order_type_, other->order_type_);
  swap(order_price_level_, other->order_price_level_);
  swap(trade_type_, other->trade_type_);
  swap(credit_type_, other->credit_type_);
  swap(suborder_valid_period_, other->suborder_valid_period_);
  swap(radical_reorder_, other->radical_reorder_);
  swap(radical_level_, other->radical_level_);
  swap(radical_count_, other->radical_count_);
  swap(order_frequency_, other->order_frequency_);
  swap(order_limit_price_type_, other->order_limit_price_type_);
  swap(max_price_, other->max_price_);
  swap(min_price_, other->min_price_);
  swap(price_float_point_, other->price_float_point_);
  swap(min_trade_unit_, other->min_trade_unit_);
  swap(start_mode_, other->start_mode_);
  swap(start_time_, other->start_time_);
  swap(execute_time_, other->execute_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PolicyParameters::GetMetadata() const {
  protobuf_protos_2fqpolicy_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccountParameters::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountParameters::kCustCodeFieldNumber;
const int AccountParameters::kIntOrgFieldNumber;
const int AccountParameters::kChannelFieldNumber;
const int AccountParameters::kFundSnFieldNumber;
const int AccountParameters::kAcctTypeFieldNumber;
const int AccountParameters::kEncryptKeyFieldNumber;
const int AccountParameters::kAuthDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountParameters::AccountParameters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqpolicy_5fprotocol_2eproto::scc_info_AccountParameters.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.AccountParameters)
}
AccountParameters::AccountParameters(const AccountParameters& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cust_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cust_code()) {
    cust_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cust_code_);
  }
  channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_channel()) {
    channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  acct_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_acct_type()) {
    acct_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.acct_type_);
  }
  encrypt_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_encrypt_key()) {
    encrypt_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encrypt_key_);
  }
  auth_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_auth_data()) {
    auth_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_data_);
  }
  ::memcpy(&int_org_, &from.int_org_,
    static_cast<size_t>(reinterpret_cast<char*>(&fund_sn_) -
    reinterpret_cast<char*>(&int_org_)) + sizeof(fund_sn_));
  // @@protoc_insertion_point(copy_constructor:autotrade.AccountParameters)
}

void AccountParameters::SharedCtor() {
  cust_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  acct_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encrypt_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&int_org_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fund_sn_) -
      reinterpret_cast<char*>(&int_org_)) + sizeof(fund_sn_));
}

AccountParameters::~AccountParameters() {
  // @@protoc_insertion_point(destructor:autotrade.AccountParameters)
  SharedDtor();
}

void AccountParameters::SharedDtor() {
  cust_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  acct_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encrypt_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AccountParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccountParameters::descriptor() {
  ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccountParameters& AccountParameters::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqpolicy_5fprotocol_2eproto::scc_info_AccountParameters.base);
  return *internal_default_instance();
}


void AccountParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.AccountParameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      cust_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      channel_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      acct_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      encrypt_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      auth_data_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 96u) {
    ::memset(&int_org_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fund_sn_) -
        reinterpret_cast<char*>(&int_org_)) + sizeof(fund_sn_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AccountParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.AccountParameters)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string cust_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cust_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cust_code().data(), static_cast<int>(this->cust_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.AccountParameters.cust_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 int_org = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_int_org();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int_org_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string channel = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel().data(), static_cast<int>(this->channel().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.AccountParameters.channel");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fund_sn = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_fund_sn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fund_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string acct_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acct_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->acct_type().data(), static_cast<int>(this->acct_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.AccountParameters.acct_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string encrypt_key = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encrypt_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->encrypt_key().data(), static_cast<int>(this->encrypt_key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.AccountParameters.encrypt_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string auth_data = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->auth_data().data(), static_cast<int>(this->auth_data().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.AccountParameters.auth_data");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.AccountParameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.AccountParameters)
  return false;
#undef DO_
}

void AccountParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.AccountParameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string cust_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cust_code().data(), static_cast<int>(this->cust_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AccountParameters.cust_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cust_code(), output);
  }

  // optional int32 int_org = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->int_org(), output);
  }

  // optional string channel = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AccountParameters.channel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->channel(), output);
  }

  // optional int32 fund_sn = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fund_sn(), output);
  }

  // optional string acct_type = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->acct_type().data(), static_cast<int>(this->acct_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AccountParameters.acct_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->acct_type(), output);
  }

  // optional string encrypt_key = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encrypt_key().data(), static_cast<int>(this->encrypt_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AccountParameters.encrypt_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->encrypt_key(), output);
  }

  // optional string auth_data = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->auth_data().data(), static_cast<int>(this->auth_data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AccountParameters.auth_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->auth_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.AccountParameters)
}

::google::protobuf::uint8* AccountParameters::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.AccountParameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string cust_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cust_code().data(), static_cast<int>(this->cust_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AccountParameters.cust_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cust_code(), target);
  }

  // optional int32 int_org = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->int_org(), target);
  }

  // optional string channel = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AccountParameters.channel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->channel(), target);
  }

  // optional int32 fund_sn = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fund_sn(), target);
  }

  // optional string acct_type = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->acct_type().data(), static_cast<int>(this->acct_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AccountParameters.acct_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->acct_type(), target);
  }

  // optional string encrypt_key = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encrypt_key().data(), static_cast<int>(this->encrypt_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AccountParameters.encrypt_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->encrypt_key(), target);
  }

  // optional string auth_data = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->auth_data().data(), static_cast<int>(this->auth_data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AccountParameters.auth_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->auth_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.AccountParameters)
  return target;
}

size_t AccountParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.AccountParameters)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string cust_code = 1;
  if (has_cust_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cust_code());
  }
  if (_has_bits_[0 / 32] & 126u) {
    // optional string channel = 3;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

    // optional string acct_type = 5;
    if (has_acct_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acct_type());
    }

    // optional string encrypt_key = 6;
    if (has_encrypt_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->encrypt_key());
    }

    // optional string auth_data = 7;
    if (has_auth_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->auth_data());
    }

    // optional int32 int_org = 2;
    if (has_int_org()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int_org());
    }

    // optional int32 fund_sn = 4;
    if (has_fund_sn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fund_sn());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountParameters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.AccountParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountParameters* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccountParameters>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.AccountParameters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.AccountParameters)
    MergeFrom(*source);
  }
}

void AccountParameters::MergeFrom(const AccountParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.AccountParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_cust_code();
      cust_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cust_code_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_channel();
      channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_acct_type();
      acct_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.acct_type_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_encrypt_key();
      encrypt_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encrypt_key_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_auth_data();
      auth_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_data_);
    }
    if (cached_has_bits & 0x00000020u) {
      int_org_ = from.int_org_;
    }
    if (cached_has_bits & 0x00000040u) {
      fund_sn_ = from.fund_sn_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AccountParameters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.AccountParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountParameters::CopyFrom(const AccountParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.AccountParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountParameters::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void AccountParameters::Swap(AccountParameters* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccountParameters::InternalSwap(AccountParameters* other) {
  using std::swap;
  cust_code_.Swap(&other->cust_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  channel_.Swap(&other->channel_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  acct_type_.Swap(&other->acct_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  encrypt_key_.Swap(&other->encrypt_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  auth_data_.Swap(&other->auth_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(int_org_, other->int_org_);
  swap(fund_sn_, other->fund_sn_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccountParameters::GetMetadata() const {
  protobuf_protos_2fqpolicy_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TraceParameters::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TraceParameters::kLevelFieldNumber;
const int TraceParameters::kServerFieldNumber;
const int TraceParameters::kBacktestFieldNumber;
const int TraceParameters::kPlaybackSpeedFieldNumber;
const int TraceParameters::kPlaybackDayFieldNumber;
const int TraceParameters::kPlaybackTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TraceParameters::TraceParameters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqpolicy_5fprotocol_2eproto::scc_info_TraceParameters.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.TraceParameters)
}
TraceParameters::TraceParameters(const TraceParameters& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_server()) {
    server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_);
  }
  ::memcpy(&backtest_, &from.backtest_,
    static_cast<size_t>(reinterpret_cast<char*>(&playback_speed_) -
    reinterpret_cast<char*>(&backtest_)) + sizeof(playback_speed_));
  // @@protoc_insertion_point(copy_constructor:autotrade.TraceParameters)
}

void TraceParameters::SharedCtor() {
  server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&backtest_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playback_time_) -
      reinterpret_cast<char*>(&backtest_)) + sizeof(playback_time_));
  level_ = 5;
  playback_speed_ = 1;
}

TraceParameters::~TraceParameters() {
  // @@protoc_insertion_point(destructor:autotrade.TraceParameters)
  SharedDtor();
}

void TraceParameters::SharedDtor() {
  server_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TraceParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TraceParameters::descriptor() {
  ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TraceParameters& TraceParameters::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqpolicy_5fprotocol_2eproto::scc_info_TraceParameters.base);
  return *internal_default_instance();
}


void TraceParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.TraceParameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    server_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 62u) {
    ::memset(&backtest_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&playback_time_) -
        reinterpret_cast<char*>(&backtest_)) + sizeof(playback_time_));
    level_ = 5;
    playback_speed_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TraceParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.TraceParameters)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 level = 1 [default = 5];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string server = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server().data(), static_cast<int>(this->server().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.TraceParameters.server");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool backtest = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_backtest();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &backtest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 playback_speed = 4 [default = 1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_playback_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playback_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 playback_day = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_playback_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playback_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 playback_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_playback_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playback_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.TraceParameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.TraceParameters)
  return false;
#undef DO_
}

void TraceParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.TraceParameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 level = 1 [default = 5];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // optional string server = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server().data(), static_cast<int>(this->server().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.TraceParameters.server");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->server(), output);
  }

  // optional bool backtest = 3 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->backtest(), output);
  }

  // optional int32 playback_speed = 4 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->playback_speed(), output);
  }

  // optional uint32 playback_day = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->playback_day(), output);
  }

  // optional uint32 playback_time = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->playback_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.TraceParameters)
}

::google::protobuf::uint8* TraceParameters::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.TraceParameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 level = 1 [default = 5];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // optional string server = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server().data(), static_cast<int>(this->server().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.TraceParameters.server");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server(), target);
  }

  // optional bool backtest = 3 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->backtest(), target);
  }

  // optional int32 playback_speed = 4 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->playback_speed(), target);
  }

  // optional uint32 playback_day = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->playback_day(), target);
  }

  // optional uint32 playback_time = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->playback_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.TraceParameters)
  return target;
}

size_t TraceParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.TraceParameters)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string server = 2;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server());
    }

    // optional bool backtest = 3 [default = false];
    if (has_backtest()) {
      total_size += 1 + 1;
    }

    // optional uint32 playback_day = 5;
    if (has_playback_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playback_day());
    }

    // optional uint32 playback_time = 6;
    if (has_playback_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playback_time());
    }

    // optional int32 level = 1 [default = 5];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 playback_speed = 4 [default = 1];
    if (has_playback_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playback_speed());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceParameters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.TraceParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const TraceParameters* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TraceParameters>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.TraceParameters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.TraceParameters)
    MergeFrom(*source);
  }
}

void TraceParameters::MergeFrom(const TraceParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.TraceParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_server();
      server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_);
    }
    if (cached_has_bits & 0x00000002u) {
      backtest_ = from.backtest_;
    }
    if (cached_has_bits & 0x00000004u) {
      playback_day_ = from.playback_day_;
    }
    if (cached_has_bits & 0x00000008u) {
      playback_time_ = from.playback_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000020u) {
      playback_speed_ = from.playback_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TraceParameters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.TraceParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TraceParameters::CopyFrom(const TraceParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.TraceParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceParameters::IsInitialized() const {
  return true;
}

void TraceParameters::Swap(TraceParameters* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TraceParameters::InternalSwap(TraceParameters* other) {
  using std::swap;
  server_.Swap(&other->server_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(backtest_, other->backtest_);
  swap(playback_day_, other->playback_day_);
  swap(playback_time_, other->playback_time_);
  swap(level_, other->level_);
  swap(playback_speed_, other->playback_speed_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TraceParameters::GetMetadata() const {
  protobuf_protos_2fqpolicy_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AlgoPolicyCreateReqt::InitAsDefaultInstance() {
  ::autotrade::_AlgoPolicyCreateReqt_default_instance_._instance.get_mutable()->param_ = const_cast< ::autotrade::PolicyParameters*>(
      ::autotrade::PolicyParameters::internal_default_instance());
  ::autotrade::_AlgoPolicyCreateReqt_default_instance_._instance.get_mutable()->trace_ = const_cast< ::autotrade::TraceParameters*>(
      ::autotrade::TraceParameters::internal_default_instance());
  ::autotrade::_AlgoPolicyCreateReqt_default_instance_._instance.get_mutable()->account_ = const_cast< ::autotrade::AccountParameters*>(
      ::autotrade::AccountParameters::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AlgoPolicyCreateReqt::kFuncidFieldNumber;
const int AlgoPolicyCreateReqt::kParamFieldNumber;
const int AlgoPolicyCreateReqt::kTraceFieldNumber;
const int AlgoPolicyCreateReqt::kAccountFieldNumber;
const int AlgoPolicyCreateReqt::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AlgoPolicyCreateReqt::AlgoPolicyCreateReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqpolicy_5fprotocol_2eproto::scc_info_AlgoPolicyCreateReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.AlgoPolicyCreateReqt)
}
AlgoPolicyCreateReqt::AlgoPolicyCreateReqt(const AlgoPolicyCreateReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.has_param()) {
    param_ = new ::autotrade::PolicyParameters(*from.param_);
  } else {
    param_ = NULL;
  }
  if (from.has_trace()) {
    trace_ = new ::autotrade::TraceParameters(*from.trace_);
  } else {
    trace_ = NULL;
  }
  if (from.has_account()) {
    account_ = new ::autotrade::AccountParameters(*from.account_);
  } else {
    account_ = NULL;
  }
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:autotrade.AlgoPolicyCreateReqt)
}

void AlgoPolicyCreateReqt::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&account_) -
      reinterpret_cast<char*>(&param_)) + sizeof(account_));
  funcid_ = 91000001;
}

AlgoPolicyCreateReqt::~AlgoPolicyCreateReqt() {
  // @@protoc_insertion_point(destructor:autotrade.AlgoPolicyCreateReqt)
  SharedDtor();
}

void AlgoPolicyCreateReqt::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete param_;
  if (this != internal_default_instance()) delete trace_;
  if (this != internal_default_instance()) delete account_;
}

void AlgoPolicyCreateReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AlgoPolicyCreateReqt::descriptor() {
  ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AlgoPolicyCreateReqt& AlgoPolicyCreateReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqpolicy_5fprotocol_2eproto::scc_info_AlgoPolicyCreateReqt.base);
  return *internal_default_instance();
}


void AlgoPolicyCreateReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.AlgoPolicyCreateReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(param_ != NULL);
      param_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(trace_ != NULL);
      trace_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(account_ != NULL);
      account_->Clear();
    }
    funcid_ = 91000001;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AlgoPolicyCreateReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.AlgoPolicyCreateReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 91000001];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .autotrade.PolicyParameters param = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autotrade.TraceParameters trace = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trace()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autotrade.AccountParameters account = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.AlgoPolicyCreateReqt.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.AlgoPolicyCreateReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.AlgoPolicyCreateReqt)
  return false;
#undef DO_
}

void AlgoPolicyCreateReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.AlgoPolicyCreateReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 91000001];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // required .autotrade.PolicyParameters param = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_param(), output);
  }

  // optional .autotrade.TraceParameters trace = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_trace(), output);
  }

  // optional .autotrade.AccountParameters account = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_account(), output);
  }

  // optional string request_id = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyCreateReqt.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.AlgoPolicyCreateReqt)
}

::google::protobuf::uint8* AlgoPolicyCreateReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.AlgoPolicyCreateReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 91000001];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // required .autotrade.PolicyParameters param = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_param(), deterministic, target);
  }

  // optional .autotrade.TraceParameters trace = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_trace(), deterministic, target);
  }

  // optional .autotrade.AccountParameters account = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_account(), deterministic, target);
  }

  // optional string request_id = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyCreateReqt.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.AlgoPolicyCreateReqt)
  return target;
}

size_t AlgoPolicyCreateReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.AlgoPolicyCreateReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .autotrade.PolicyParameters param = 2;
  if (has_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *param_);
  }
  // optional string request_id = 5;
  if (has_request_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  if (_has_bits_[0 / 32] & 28u) {
    // optional .autotrade.TraceParameters trace = 3;
    if (has_trace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *trace_);
    }

    // optional .autotrade.AccountParameters account = 4;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *account_);
    }

    // optional int32 funcid = 1 [default = 91000001];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlgoPolicyCreateReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.AlgoPolicyCreateReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const AlgoPolicyCreateReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AlgoPolicyCreateReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.AlgoPolicyCreateReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.AlgoPolicyCreateReqt)
    MergeFrom(*source);
  }
}

void AlgoPolicyCreateReqt::MergeFrom(const AlgoPolicyCreateReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.AlgoPolicyCreateReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_param()->::autotrade::PolicyParameters::MergeFrom(from.param());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_trace()->::autotrade::TraceParameters::MergeFrom(from.trace());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_account()->::autotrade::AccountParameters::MergeFrom(from.account());
    }
    if (cached_has_bits & 0x00000010u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AlgoPolicyCreateReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.AlgoPolicyCreateReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlgoPolicyCreateReqt::CopyFrom(const AlgoPolicyCreateReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.AlgoPolicyCreateReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlgoPolicyCreateReqt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_param()) {
    if (!this->param_->IsInitialized()) return false;
  }
  if (has_account()) {
    if (!this->account_->IsInitialized()) return false;
  }
  return true;
}

void AlgoPolicyCreateReqt::Swap(AlgoPolicyCreateReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AlgoPolicyCreateReqt::InternalSwap(AlgoPolicyCreateReqt* other) {
  using std::swap;
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(param_, other->param_);
  swap(trace_, other->trace_);
  swap(account_, other->account_);
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AlgoPolicyCreateReqt::GetMetadata() const {
  protobuf_protos_2fqpolicy_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AlgoPolicyCreateResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AlgoPolicyCreateResp::kFuncidFieldNumber;
const int AlgoPolicyCreateResp::kErrorCodeFieldNumber;
const int AlgoPolicyCreateResp::kErrorMsgFieldNumber;
const int AlgoPolicyCreateResp::kAlgoInstanceIdFieldNumber;
const int AlgoPolicyCreateResp::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AlgoPolicyCreateResp::AlgoPolicyCreateResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqpolicy_5fprotocol_2eproto::scc_info_AlgoPolicyCreateResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.AlgoPolicyCreateResp)
}
AlgoPolicyCreateResp::AlgoPolicyCreateResp(const AlgoPolicyCreateResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_msg()) {
    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  algo_instance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_algo_instance_id()) {
    algo_instance_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.algo_instance_id_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  ::memcpy(&error_code_, &from.error_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&funcid_) -
    reinterpret_cast<char*>(&error_code_)) + sizeof(funcid_));
  // @@protoc_insertion_point(copy_constructor:autotrade.AlgoPolicyCreateResp)
}

void AlgoPolicyCreateResp::SharedCtor() {
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  algo_instance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_code_ = 0;
  funcid_ = 91100001;
}

AlgoPolicyCreateResp::~AlgoPolicyCreateResp() {
  // @@protoc_insertion_point(destructor:autotrade.AlgoPolicyCreateResp)
  SharedDtor();
}

void AlgoPolicyCreateResp::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  algo_instance_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AlgoPolicyCreateResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AlgoPolicyCreateResp::descriptor() {
  ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AlgoPolicyCreateResp& AlgoPolicyCreateResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqpolicy_5fprotocol_2eproto::scc_info_AlgoPolicyCreateResp.base);
  return *internal_default_instance();
}


void AlgoPolicyCreateResp::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.AlgoPolicyCreateResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      error_msg_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      algo_instance_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 24u) {
    error_code_ = 0;
    funcid_ = 91100001;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AlgoPolicyCreateResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.AlgoPolicyCreateResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 91100001];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 error_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_error_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_msg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_msg().data(), static_cast<int>(this->error_msg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.AlgoPolicyCreateResp.error_msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string algo_instance_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_algo_instance_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->algo_instance_id().data(), static_cast<int>(this->algo_instance_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.AlgoPolicyCreateResp.algo_instance_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.AlgoPolicyCreateResp.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.AlgoPolicyCreateResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.AlgoPolicyCreateResp)
  return false;
#undef DO_
}

void AlgoPolicyCreateResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.AlgoPolicyCreateResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 91100001];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // required int32 error_code = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->error_code(), output);
  }

  // optional string error_msg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyCreateResp.error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error_msg(), output);
  }

  // optional string algo_instance_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->algo_instance_id().data(), static_cast<int>(this->algo_instance_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyCreateResp.algo_instance_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->algo_instance_id(), output);
  }

  // optional string request_id = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyCreateResp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.AlgoPolicyCreateResp)
}

::google::protobuf::uint8* AlgoPolicyCreateResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.AlgoPolicyCreateResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 91100001];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // required int32 error_code = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->error_code(), target);
  }

  // optional string error_msg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyCreateResp.error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error_msg(), target);
  }

  // optional string algo_instance_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->algo_instance_id().data(), static_cast<int>(this->algo_instance_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyCreateResp.algo_instance_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->algo_instance_id(), target);
  }

  // optional string request_id = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyCreateResp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.AlgoPolicyCreateResp)
  return target;
}

size_t AlgoPolicyCreateResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.AlgoPolicyCreateResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 error_code = 2;
  if (has_error_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error_code());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string error_msg = 3;
    if (has_error_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_msg());
    }

    // optional string algo_instance_id = 4;
    if (has_algo_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->algo_instance_id());
    }

    // optional string request_id = 5;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

  }
  // optional int32 funcid = 1 [default = 91100001];
  if (has_funcid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->funcid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlgoPolicyCreateResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.AlgoPolicyCreateResp)
  GOOGLE_DCHECK_NE(&from, this);
  const AlgoPolicyCreateResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AlgoPolicyCreateResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.AlgoPolicyCreateResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.AlgoPolicyCreateResp)
    MergeFrom(*source);
  }
}

void AlgoPolicyCreateResp::MergeFrom(const AlgoPolicyCreateResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.AlgoPolicyCreateResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error_msg();
      error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_algo_instance_id();
      algo_instance_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.algo_instance_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      error_code_ = from.error_code_;
    }
    if (cached_has_bits & 0x00000010u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AlgoPolicyCreateResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.AlgoPolicyCreateResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlgoPolicyCreateResp::CopyFrom(const AlgoPolicyCreateResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.AlgoPolicyCreateResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlgoPolicyCreateResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  return true;
}

void AlgoPolicyCreateResp::Swap(AlgoPolicyCreateResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AlgoPolicyCreateResp::InternalSwap(AlgoPolicyCreateResp* other) {
  using std::swap;
  error_msg_.Swap(&other->error_msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  algo_instance_id_.Swap(&other->algo_instance_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_code_, other->error_code_);
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AlgoPolicyCreateResp::GetMetadata() const {
  protobuf_protos_2fqpolicy_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AlgoPolicyUpdateReqt::InitAsDefaultInstance() {
  ::autotrade::_AlgoPolicyUpdateReqt_default_instance_._instance.get_mutable()->param_ = const_cast< ::autotrade::PolicyParameters*>(
      ::autotrade::PolicyParameters::internal_default_instance());
  ::autotrade::_AlgoPolicyUpdateReqt_default_instance_._instance.get_mutable()->trace_ = const_cast< ::autotrade::TraceParameters*>(
      ::autotrade::TraceParameters::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AlgoPolicyUpdateReqt::kFuncidFieldNumber;
const int AlgoPolicyUpdateReqt::kOpCodeFieldNumber;
const int AlgoPolicyUpdateReqt::kAlgoInstanceIdFieldNumber;
const int AlgoPolicyUpdateReqt::kParamFieldNumber;
const int AlgoPolicyUpdateReqt::kTraceFieldNumber;
const int AlgoPolicyUpdateReqt::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AlgoPolicyUpdateReqt::AlgoPolicyUpdateReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqpolicy_5fprotocol_2eproto::scc_info_AlgoPolicyUpdateReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.AlgoPolicyUpdateReqt)
}
AlgoPolicyUpdateReqt::AlgoPolicyUpdateReqt(const AlgoPolicyUpdateReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  algo_instance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_algo_instance_id()) {
    algo_instance_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.algo_instance_id_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.has_param()) {
    param_ = new ::autotrade::PolicyParameters(*from.param_);
  } else {
    param_ = NULL;
  }
  if (from.has_trace()) {
    trace_ = new ::autotrade::TraceParameters(*from.trace_);
  } else {
    trace_ = NULL;
  }
  ::memcpy(&op_code_, &from.op_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&funcid_) -
    reinterpret_cast<char*>(&op_code_)) + sizeof(funcid_));
  // @@protoc_insertion_point(copy_constructor:autotrade.AlgoPolicyUpdateReqt)
}

void AlgoPolicyUpdateReqt::SharedCtor() {
  algo_instance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&op_code_) -
      reinterpret_cast<char*>(&param_)) + sizeof(op_code_));
  funcid_ = 91000002;
}

AlgoPolicyUpdateReqt::~AlgoPolicyUpdateReqt() {
  // @@protoc_insertion_point(destructor:autotrade.AlgoPolicyUpdateReqt)
  SharedDtor();
}

void AlgoPolicyUpdateReqt::SharedDtor() {
  algo_instance_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete param_;
  if (this != internal_default_instance()) delete trace_;
}

void AlgoPolicyUpdateReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AlgoPolicyUpdateReqt::descriptor() {
  ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AlgoPolicyUpdateReqt& AlgoPolicyUpdateReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqpolicy_5fprotocol_2eproto::scc_info_AlgoPolicyUpdateReqt.base);
  return *internal_default_instance();
}


void AlgoPolicyUpdateReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.AlgoPolicyUpdateReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      algo_instance_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(param_ != NULL);
      param_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(trace_ != NULL);
      trace_->Clear();
    }
  }
  if (cached_has_bits & 48u) {
    op_code_ = 0;
    funcid_ = 91000002;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AlgoPolicyUpdateReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.AlgoPolicyUpdateReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 91000002];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 op_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_op_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string algo_instance_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_algo_instance_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->algo_instance_id().data(), static_cast<int>(this->algo_instance_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.AlgoPolicyUpdateReqt.algo_instance_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autotrade.PolicyParameters param = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autotrade.TraceParameters trace = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trace()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.AlgoPolicyUpdateReqt.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.AlgoPolicyUpdateReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.AlgoPolicyUpdateReqt)
  return false;
#undef DO_
}

void AlgoPolicyUpdateReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.AlgoPolicyUpdateReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 91000002];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // required int32 op_code = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->op_code(), output);
  }

  // required string algo_instance_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->algo_instance_id().data(), static_cast<int>(this->algo_instance_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyUpdateReqt.algo_instance_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->algo_instance_id(), output);
  }

  // optional .autotrade.PolicyParameters param = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_param(), output);
  }

  // optional .autotrade.TraceParameters trace = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_trace(), output);
  }

  // optional string request_id = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyUpdateReqt.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.AlgoPolicyUpdateReqt)
}

::google::protobuf::uint8* AlgoPolicyUpdateReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.AlgoPolicyUpdateReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 91000002];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // required int32 op_code = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->op_code(), target);
  }

  // required string algo_instance_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->algo_instance_id().data(), static_cast<int>(this->algo_instance_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyUpdateReqt.algo_instance_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->algo_instance_id(), target);
  }

  // optional .autotrade.PolicyParameters param = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_param(), deterministic, target);
  }

  // optional .autotrade.TraceParameters trace = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_trace(), deterministic, target);
  }

  // optional string request_id = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyUpdateReqt.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.AlgoPolicyUpdateReqt)
  return target;
}

size_t AlgoPolicyUpdateReqt::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autotrade.AlgoPolicyUpdateReqt)
  size_t total_size = 0;

  if (has_algo_instance_id()) {
    // required string algo_instance_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->algo_instance_id());
  }

  if (has_op_code()) {
    // required int32 op_code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->op_code());
  }

  return total_size;
}
size_t AlgoPolicyUpdateReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.AlgoPolicyUpdateReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000011) ^ 0x00000011) == 0) {  // All required fields are present.
    // required string algo_instance_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->algo_instance_id());

    // required int32 op_code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->op_code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 14u) {
    // optional string request_id = 6;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional .autotrade.PolicyParameters param = 4;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *param_);
    }

    // optional .autotrade.TraceParameters trace = 5;
    if (has_trace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *trace_);
    }

  }
  // optional int32 funcid = 1 [default = 91000002];
  if (has_funcid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->funcid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlgoPolicyUpdateReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.AlgoPolicyUpdateReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const AlgoPolicyUpdateReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AlgoPolicyUpdateReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.AlgoPolicyUpdateReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.AlgoPolicyUpdateReqt)
    MergeFrom(*source);
  }
}

void AlgoPolicyUpdateReqt::MergeFrom(const AlgoPolicyUpdateReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.AlgoPolicyUpdateReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_algo_instance_id();
      algo_instance_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.algo_instance_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_param()->::autotrade::PolicyParameters::MergeFrom(from.param());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_trace()->::autotrade::TraceParameters::MergeFrom(from.trace());
    }
    if (cached_has_bits & 0x00000010u) {
      op_code_ = from.op_code_;
    }
    if (cached_has_bits & 0x00000020u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AlgoPolicyUpdateReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.AlgoPolicyUpdateReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlgoPolicyUpdateReqt::CopyFrom(const AlgoPolicyUpdateReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.AlgoPolicyUpdateReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlgoPolicyUpdateReqt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000011) != 0x00000011) return false;
  if (has_param()) {
    if (!this->param_->IsInitialized()) return false;
  }
  return true;
}

void AlgoPolicyUpdateReqt::Swap(AlgoPolicyUpdateReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AlgoPolicyUpdateReqt::InternalSwap(AlgoPolicyUpdateReqt* other) {
  using std::swap;
  algo_instance_id_.Swap(&other->algo_instance_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(param_, other->param_);
  swap(trace_, other->trace_);
  swap(op_code_, other->op_code_);
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AlgoPolicyUpdateReqt::GetMetadata() const {
  protobuf_protos_2fqpolicy_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AlgoPolicyUpdateResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AlgoPolicyUpdateResp::kFuncidFieldNumber;
const int AlgoPolicyUpdateResp::kErrorCodeFieldNumber;
const int AlgoPolicyUpdateResp::kErrorMsgFieldNumber;
const int AlgoPolicyUpdateResp::kAlgoInstanceIdFieldNumber;
const int AlgoPolicyUpdateResp::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AlgoPolicyUpdateResp::AlgoPolicyUpdateResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqpolicy_5fprotocol_2eproto::scc_info_AlgoPolicyUpdateResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.AlgoPolicyUpdateResp)
}
AlgoPolicyUpdateResp::AlgoPolicyUpdateResp(const AlgoPolicyUpdateResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_msg()) {
    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  algo_instance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_algo_instance_id()) {
    algo_instance_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.algo_instance_id_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  ::memcpy(&error_code_, &from.error_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&funcid_) -
    reinterpret_cast<char*>(&error_code_)) + sizeof(funcid_));
  // @@protoc_insertion_point(copy_constructor:autotrade.AlgoPolicyUpdateResp)
}

void AlgoPolicyUpdateResp::SharedCtor() {
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  algo_instance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_code_ = 0;
  funcid_ = 91100002;
}

AlgoPolicyUpdateResp::~AlgoPolicyUpdateResp() {
  // @@protoc_insertion_point(destructor:autotrade.AlgoPolicyUpdateResp)
  SharedDtor();
}

void AlgoPolicyUpdateResp::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  algo_instance_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AlgoPolicyUpdateResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AlgoPolicyUpdateResp::descriptor() {
  ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AlgoPolicyUpdateResp& AlgoPolicyUpdateResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqpolicy_5fprotocol_2eproto::scc_info_AlgoPolicyUpdateResp.base);
  return *internal_default_instance();
}


void AlgoPolicyUpdateResp::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.AlgoPolicyUpdateResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      error_msg_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      algo_instance_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 24u) {
    error_code_ = 0;
    funcid_ = 91100002;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AlgoPolicyUpdateResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.AlgoPolicyUpdateResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 91100002];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 error_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_error_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_msg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_msg().data(), static_cast<int>(this->error_msg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.AlgoPolicyUpdateResp.error_msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string algo_instance_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_algo_instance_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->algo_instance_id().data(), static_cast<int>(this->algo_instance_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.AlgoPolicyUpdateResp.algo_instance_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.AlgoPolicyUpdateResp.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.AlgoPolicyUpdateResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.AlgoPolicyUpdateResp)
  return false;
#undef DO_
}

void AlgoPolicyUpdateResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.AlgoPolicyUpdateResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 91100002];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // required int32 error_code = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->error_code(), output);
  }

  // optional string error_msg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyUpdateResp.error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error_msg(), output);
  }

  // optional string algo_instance_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->algo_instance_id().data(), static_cast<int>(this->algo_instance_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyUpdateResp.algo_instance_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->algo_instance_id(), output);
  }

  // optional string request_id = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyUpdateResp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.AlgoPolicyUpdateResp)
}

::google::protobuf::uint8* AlgoPolicyUpdateResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.AlgoPolicyUpdateResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 91100002];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // required int32 error_code = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->error_code(), target);
  }

  // optional string error_msg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyUpdateResp.error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error_msg(), target);
  }

  // optional string algo_instance_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->algo_instance_id().data(), static_cast<int>(this->algo_instance_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyUpdateResp.algo_instance_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->algo_instance_id(), target);
  }

  // optional string request_id = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyUpdateResp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.AlgoPolicyUpdateResp)
  return target;
}

size_t AlgoPolicyUpdateResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.AlgoPolicyUpdateResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 error_code = 2;
  if (has_error_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error_code());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string error_msg = 3;
    if (has_error_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_msg());
    }

    // optional string algo_instance_id = 4;
    if (has_algo_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->algo_instance_id());
    }

    // optional string request_id = 5;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

  }
  // optional int32 funcid = 1 [default = 91100002];
  if (has_funcid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->funcid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlgoPolicyUpdateResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.AlgoPolicyUpdateResp)
  GOOGLE_DCHECK_NE(&from, this);
  const AlgoPolicyUpdateResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AlgoPolicyUpdateResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.AlgoPolicyUpdateResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.AlgoPolicyUpdateResp)
    MergeFrom(*source);
  }
}

void AlgoPolicyUpdateResp::MergeFrom(const AlgoPolicyUpdateResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.AlgoPolicyUpdateResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error_msg();
      error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_algo_instance_id();
      algo_instance_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.algo_instance_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      error_code_ = from.error_code_;
    }
    if (cached_has_bits & 0x00000010u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AlgoPolicyUpdateResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.AlgoPolicyUpdateResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlgoPolicyUpdateResp::CopyFrom(const AlgoPolicyUpdateResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.AlgoPolicyUpdateResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlgoPolicyUpdateResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  return true;
}

void AlgoPolicyUpdateResp::Swap(AlgoPolicyUpdateResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AlgoPolicyUpdateResp::InternalSwap(AlgoPolicyUpdateResp* other) {
  using std::swap;
  error_msg_.Swap(&other->error_msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  algo_instance_id_.Swap(&other->algo_instance_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_code_, other->error_code_);
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AlgoPolicyUpdateResp::GetMetadata() const {
  protobuf_protos_2fqpolicy_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AlgoPolicyDeleteReqt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AlgoPolicyDeleteReqt::kFuncidFieldNumber;
const int AlgoPolicyDeleteReqt::kAlgoInstanceIdFieldNumber;
const int AlgoPolicyDeleteReqt::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AlgoPolicyDeleteReqt::AlgoPolicyDeleteReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqpolicy_5fprotocol_2eproto::scc_info_AlgoPolicyDeleteReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.AlgoPolicyDeleteReqt)
}
AlgoPolicyDeleteReqt::AlgoPolicyDeleteReqt(const AlgoPolicyDeleteReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  algo_instance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_algo_instance_id()) {
    algo_instance_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.algo_instance_id_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:autotrade.AlgoPolicyDeleteReqt)
}

void AlgoPolicyDeleteReqt::SharedCtor() {
  algo_instance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  funcid_ = 91000003;
}

AlgoPolicyDeleteReqt::~AlgoPolicyDeleteReqt() {
  // @@protoc_insertion_point(destructor:autotrade.AlgoPolicyDeleteReqt)
  SharedDtor();
}

void AlgoPolicyDeleteReqt::SharedDtor() {
  algo_instance_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AlgoPolicyDeleteReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AlgoPolicyDeleteReqt::descriptor() {
  ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AlgoPolicyDeleteReqt& AlgoPolicyDeleteReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqpolicy_5fprotocol_2eproto::scc_info_AlgoPolicyDeleteReqt.base);
  return *internal_default_instance();
}


void AlgoPolicyDeleteReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.AlgoPolicyDeleteReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      algo_instance_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    funcid_ = 91000003;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AlgoPolicyDeleteReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.AlgoPolicyDeleteReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 91000003];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string algo_instance_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_algo_instance_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->algo_instance_id().data(), static_cast<int>(this->algo_instance_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.AlgoPolicyDeleteReqt.algo_instance_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.AlgoPolicyDeleteReqt.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.AlgoPolicyDeleteReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.AlgoPolicyDeleteReqt)
  return false;
#undef DO_
}

void AlgoPolicyDeleteReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.AlgoPolicyDeleteReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 91000003];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // required string algo_instance_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->algo_instance_id().data(), static_cast<int>(this->algo_instance_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyDeleteReqt.algo_instance_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->algo_instance_id(), output);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyDeleteReqt.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.AlgoPolicyDeleteReqt)
}

::google::protobuf::uint8* AlgoPolicyDeleteReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.AlgoPolicyDeleteReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 91000003];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // required string algo_instance_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->algo_instance_id().data(), static_cast<int>(this->algo_instance_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyDeleteReqt.algo_instance_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->algo_instance_id(), target);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyDeleteReqt.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.AlgoPolicyDeleteReqt)
  return target;
}

size_t AlgoPolicyDeleteReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.AlgoPolicyDeleteReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string algo_instance_id = 2;
  if (has_algo_instance_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->algo_instance_id());
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional string request_id = 3;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional int32 funcid = 1 [default = 91000003];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlgoPolicyDeleteReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.AlgoPolicyDeleteReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const AlgoPolicyDeleteReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AlgoPolicyDeleteReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.AlgoPolicyDeleteReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.AlgoPolicyDeleteReqt)
    MergeFrom(*source);
  }
}

void AlgoPolicyDeleteReqt::MergeFrom(const AlgoPolicyDeleteReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.AlgoPolicyDeleteReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_algo_instance_id();
      algo_instance_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.algo_instance_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AlgoPolicyDeleteReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.AlgoPolicyDeleteReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlgoPolicyDeleteReqt::CopyFrom(const AlgoPolicyDeleteReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.AlgoPolicyDeleteReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlgoPolicyDeleteReqt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void AlgoPolicyDeleteReqt::Swap(AlgoPolicyDeleteReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AlgoPolicyDeleteReqt::InternalSwap(AlgoPolicyDeleteReqt* other) {
  using std::swap;
  algo_instance_id_.Swap(&other->algo_instance_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AlgoPolicyDeleteReqt::GetMetadata() const {
  protobuf_protos_2fqpolicy_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AlgoPolicyDeleteResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AlgoPolicyDeleteResp::kFuncidFieldNumber;
const int AlgoPolicyDeleteResp::kErrorCodeFieldNumber;
const int AlgoPolicyDeleteResp::kErrorMsgFieldNumber;
const int AlgoPolicyDeleteResp::kAlgoInstanceIdFieldNumber;
const int AlgoPolicyDeleteResp::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AlgoPolicyDeleteResp::AlgoPolicyDeleteResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqpolicy_5fprotocol_2eproto::scc_info_AlgoPolicyDeleteResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.AlgoPolicyDeleteResp)
}
AlgoPolicyDeleteResp::AlgoPolicyDeleteResp(const AlgoPolicyDeleteResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_msg()) {
    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  algo_instance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_algo_instance_id()) {
    algo_instance_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.algo_instance_id_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  ::memcpy(&error_code_, &from.error_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&funcid_) -
    reinterpret_cast<char*>(&error_code_)) + sizeof(funcid_));
  // @@protoc_insertion_point(copy_constructor:autotrade.AlgoPolicyDeleteResp)
}

void AlgoPolicyDeleteResp::SharedCtor() {
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  algo_instance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_code_ = 0;
  funcid_ = 91100003;
}

AlgoPolicyDeleteResp::~AlgoPolicyDeleteResp() {
  // @@protoc_insertion_point(destructor:autotrade.AlgoPolicyDeleteResp)
  SharedDtor();
}

void AlgoPolicyDeleteResp::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  algo_instance_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AlgoPolicyDeleteResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AlgoPolicyDeleteResp::descriptor() {
  ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AlgoPolicyDeleteResp& AlgoPolicyDeleteResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqpolicy_5fprotocol_2eproto::scc_info_AlgoPolicyDeleteResp.base);
  return *internal_default_instance();
}


void AlgoPolicyDeleteResp::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.AlgoPolicyDeleteResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      error_msg_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      algo_instance_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 24u) {
    error_code_ = 0;
    funcid_ = 91100003;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AlgoPolicyDeleteResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.AlgoPolicyDeleteResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 91100003];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 error_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_error_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_msg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_msg().data(), static_cast<int>(this->error_msg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.AlgoPolicyDeleteResp.error_msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string algo_instance_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_algo_instance_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->algo_instance_id().data(), static_cast<int>(this->algo_instance_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.AlgoPolicyDeleteResp.algo_instance_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.AlgoPolicyDeleteResp.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.AlgoPolicyDeleteResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.AlgoPolicyDeleteResp)
  return false;
#undef DO_
}

void AlgoPolicyDeleteResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.AlgoPolicyDeleteResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 91100003];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // required int32 error_code = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->error_code(), output);
  }

  // optional string error_msg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyDeleteResp.error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error_msg(), output);
  }

  // optional string algo_instance_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->algo_instance_id().data(), static_cast<int>(this->algo_instance_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyDeleteResp.algo_instance_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->algo_instance_id(), output);
  }

  // optional string request_id = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyDeleteResp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.AlgoPolicyDeleteResp)
}

::google::protobuf::uint8* AlgoPolicyDeleteResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.AlgoPolicyDeleteResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 91100003];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // required int32 error_code = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->error_code(), target);
  }

  // optional string error_msg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyDeleteResp.error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error_msg(), target);
  }

  // optional string algo_instance_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->algo_instance_id().data(), static_cast<int>(this->algo_instance_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyDeleteResp.algo_instance_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->algo_instance_id(), target);
  }

  // optional string request_id = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyDeleteResp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.AlgoPolicyDeleteResp)
  return target;
}

size_t AlgoPolicyDeleteResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.AlgoPolicyDeleteResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 error_code = 2;
  if (has_error_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error_code());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string error_msg = 3;
    if (has_error_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_msg());
    }

    // optional string algo_instance_id = 4;
    if (has_algo_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->algo_instance_id());
    }

    // optional string request_id = 5;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

  }
  // optional int32 funcid = 1 [default = 91100003];
  if (has_funcid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->funcid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlgoPolicyDeleteResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.AlgoPolicyDeleteResp)
  GOOGLE_DCHECK_NE(&from, this);
  const AlgoPolicyDeleteResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AlgoPolicyDeleteResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.AlgoPolicyDeleteResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.AlgoPolicyDeleteResp)
    MergeFrom(*source);
  }
}

void AlgoPolicyDeleteResp::MergeFrom(const AlgoPolicyDeleteResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.AlgoPolicyDeleteResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error_msg();
      error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_algo_instance_id();
      algo_instance_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.algo_instance_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      error_code_ = from.error_code_;
    }
    if (cached_has_bits & 0x00000010u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AlgoPolicyDeleteResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.AlgoPolicyDeleteResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlgoPolicyDeleteResp::CopyFrom(const AlgoPolicyDeleteResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.AlgoPolicyDeleteResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlgoPolicyDeleteResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  return true;
}

void AlgoPolicyDeleteResp::Swap(AlgoPolicyDeleteResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AlgoPolicyDeleteResp::InternalSwap(AlgoPolicyDeleteResp* other) {
  using std::swap;
  error_msg_.Swap(&other->error_msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  algo_instance_id_.Swap(&other->algo_instance_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_code_, other->error_code_);
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AlgoPolicyDeleteResp::GetMetadata() const {
  protobuf_protos_2fqpolicy_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AlgoPolicyQueryReqt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AlgoPolicyQueryReqt::kFuncidFieldNumber;
const int AlgoPolicyQueryReqt::kAlgoInstanceIdFieldNumber;
const int AlgoPolicyQueryReqt::kOrderIdFieldNumber;
const int AlgoPolicyQueryReqt::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AlgoPolicyQueryReqt::AlgoPolicyQueryReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqpolicy_5fprotocol_2eproto::scc_info_AlgoPolicyQueryReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.AlgoPolicyQueryReqt)
}
AlgoPolicyQueryReqt::AlgoPolicyQueryReqt(const AlgoPolicyQueryReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  algo_instance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_algo_instance_id()) {
    algo_instance_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.algo_instance_id_);
  }
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_id()) {
    order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:autotrade.AlgoPolicyQueryReqt)
}

void AlgoPolicyQueryReqt::SharedCtor() {
  algo_instance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  funcid_ = 91000004;
}

AlgoPolicyQueryReqt::~AlgoPolicyQueryReqt() {
  // @@protoc_insertion_point(destructor:autotrade.AlgoPolicyQueryReqt)
  SharedDtor();
}

void AlgoPolicyQueryReqt::SharedDtor() {
  algo_instance_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AlgoPolicyQueryReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AlgoPolicyQueryReqt::descriptor() {
  ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AlgoPolicyQueryReqt& AlgoPolicyQueryReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqpolicy_5fprotocol_2eproto::scc_info_AlgoPolicyQueryReqt.base);
  return *internal_default_instance();
}


void AlgoPolicyQueryReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.AlgoPolicyQueryReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      algo_instance_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      order_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    funcid_ = 91000004;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AlgoPolicyQueryReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.AlgoPolicyQueryReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 91000004];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string algo_instance_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_algo_instance_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->algo_instance_id().data(), static_cast<int>(this->algo_instance_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.AlgoPolicyQueryReqt.algo_instance_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_id().data(), static_cast<int>(this->order_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.AlgoPolicyQueryReqt.order_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.AlgoPolicyQueryReqt.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.AlgoPolicyQueryReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.AlgoPolicyQueryReqt)
  return false;
#undef DO_
}

void AlgoPolicyQueryReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.AlgoPolicyQueryReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 91000004];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // required string algo_instance_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->algo_instance_id().data(), static_cast<int>(this->algo_instance_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyQueryReqt.algo_instance_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->algo_instance_id(), output);
  }

  // optional string order_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyQueryReqt.order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->order_id(), output);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyQueryReqt.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.AlgoPolicyQueryReqt)
}

::google::protobuf::uint8* AlgoPolicyQueryReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.AlgoPolicyQueryReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 91000004];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // required string algo_instance_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->algo_instance_id().data(), static_cast<int>(this->algo_instance_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyQueryReqt.algo_instance_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->algo_instance_id(), target);
  }

  // optional string order_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyQueryReqt.order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->order_id(), target);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyQueryReqt.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.AlgoPolicyQueryReqt)
  return target;
}

size_t AlgoPolicyQueryReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.AlgoPolicyQueryReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string algo_instance_id = 2;
  if (has_algo_instance_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->algo_instance_id());
  }
  if (_has_bits_[0 / 32] & 14u) {
    // optional string order_id = 3;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_id());
    }

    // optional string request_id = 4;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional int32 funcid = 1 [default = 91000004];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlgoPolicyQueryReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.AlgoPolicyQueryReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const AlgoPolicyQueryReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AlgoPolicyQueryReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.AlgoPolicyQueryReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.AlgoPolicyQueryReqt)
    MergeFrom(*source);
  }
}

void AlgoPolicyQueryReqt::MergeFrom(const AlgoPolicyQueryReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.AlgoPolicyQueryReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_algo_instance_id();
      algo_instance_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.algo_instance_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_order_id();
      order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AlgoPolicyQueryReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.AlgoPolicyQueryReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlgoPolicyQueryReqt::CopyFrom(const AlgoPolicyQueryReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.AlgoPolicyQueryReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlgoPolicyQueryReqt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void AlgoPolicyQueryReqt::Swap(AlgoPolicyQueryReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AlgoPolicyQueryReqt::InternalSwap(AlgoPolicyQueryReqt* other) {
  using std::swap;
  algo_instance_id_.Swap(&other->algo_instance_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_id_.Swap(&other->order_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AlgoPolicyQueryReqt::GetMetadata() const {
  protobuf_protos_2fqpolicy_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AlgoPolicyQueryResp_SubOrderInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AlgoPolicyQueryResp_SubOrderInfo::kOrdernoFieldNumber;
const int AlgoPolicyQueryResp_SubOrderInfo::kOrderIdFieldNumber;
const int AlgoPolicyQueryResp_SubOrderInfo::kOrderStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AlgoPolicyQueryResp_SubOrderInfo::AlgoPolicyQueryResp_SubOrderInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqpolicy_5fprotocol_2eproto::scc_info_AlgoPolicyQueryResp_SubOrderInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.AlgoPolicyQueryResp.SubOrderInfo)
}
AlgoPolicyQueryResp_SubOrderInfo::AlgoPolicyQueryResp_SubOrderInfo(const AlgoPolicyQueryResp_SubOrderInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  orderno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_orderno()) {
    orderno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderno_);
  }
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_id()) {
    order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
  }
  order_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_status()) {
    order_status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_status_);
  }
  // @@protoc_insertion_point(copy_constructor:autotrade.AlgoPolicyQueryResp.SubOrderInfo)
}

void AlgoPolicyQueryResp_SubOrderInfo::SharedCtor() {
  orderno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AlgoPolicyQueryResp_SubOrderInfo::~AlgoPolicyQueryResp_SubOrderInfo() {
  // @@protoc_insertion_point(destructor:autotrade.AlgoPolicyQueryResp.SubOrderInfo)
  SharedDtor();
}

void AlgoPolicyQueryResp_SubOrderInfo::SharedDtor() {
  orderno_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AlgoPolicyQueryResp_SubOrderInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AlgoPolicyQueryResp_SubOrderInfo::descriptor() {
  ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AlgoPolicyQueryResp_SubOrderInfo& AlgoPolicyQueryResp_SubOrderInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqpolicy_5fprotocol_2eproto::scc_info_AlgoPolicyQueryResp_SubOrderInfo.base);
  return *internal_default_instance();
}


void AlgoPolicyQueryResp_SubOrderInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.AlgoPolicyQueryResp.SubOrderInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      orderno_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      order_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      order_status_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AlgoPolicyQueryResp_SubOrderInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.AlgoPolicyQueryResp.SubOrderInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string orderno = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orderno().data(), static_cast<int>(this->orderno().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.AlgoPolicyQueryResp.SubOrderInfo.orderno");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_id().data(), static_cast<int>(this->order_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.AlgoPolicyQueryResp.SubOrderInfo.order_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_status().data(), static_cast<int>(this->order_status().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.AlgoPolicyQueryResp.SubOrderInfo.order_status");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.AlgoPolicyQueryResp.SubOrderInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.AlgoPolicyQueryResp.SubOrderInfo)
  return false;
#undef DO_
}

void AlgoPolicyQueryResp_SubOrderInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.AlgoPolicyQueryResp.SubOrderInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string orderno = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderno().data(), static_cast<int>(this->orderno().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyQueryResp.SubOrderInfo.orderno");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->orderno(), output);
  }

  // optional string order_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyQueryResp.SubOrderInfo.order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->order_id(), output);
  }

  // optional string order_status = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_status().data(), static_cast<int>(this->order_status().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyQueryResp.SubOrderInfo.order_status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->order_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.AlgoPolicyQueryResp.SubOrderInfo)
}

::google::protobuf::uint8* AlgoPolicyQueryResp_SubOrderInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.AlgoPolicyQueryResp.SubOrderInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string orderno = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderno().data(), static_cast<int>(this->orderno().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyQueryResp.SubOrderInfo.orderno");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->orderno(), target);
  }

  // optional string order_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyQueryResp.SubOrderInfo.order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->order_id(), target);
  }

  // optional string order_status = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_status().data(), static_cast<int>(this->order_status().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyQueryResp.SubOrderInfo.order_status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->order_status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.AlgoPolicyQueryResp.SubOrderInfo)
  return target;
}

size_t AlgoPolicyQueryResp_SubOrderInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.AlgoPolicyQueryResp.SubOrderInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string orderno = 1;
  if (has_orderno()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderno());
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional string order_id = 2;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_id());
    }

    // optional string order_status = 3;
    if (has_order_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlgoPolicyQueryResp_SubOrderInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.AlgoPolicyQueryResp.SubOrderInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AlgoPolicyQueryResp_SubOrderInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AlgoPolicyQueryResp_SubOrderInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.AlgoPolicyQueryResp.SubOrderInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.AlgoPolicyQueryResp.SubOrderInfo)
    MergeFrom(*source);
  }
}

void AlgoPolicyQueryResp_SubOrderInfo::MergeFrom(const AlgoPolicyQueryResp_SubOrderInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.AlgoPolicyQueryResp.SubOrderInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_orderno();
      orderno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderno_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_order_id();
      order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_order_status();
      order_status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_status_);
    }
  }
}

void AlgoPolicyQueryResp_SubOrderInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.AlgoPolicyQueryResp.SubOrderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlgoPolicyQueryResp_SubOrderInfo::CopyFrom(const AlgoPolicyQueryResp_SubOrderInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.AlgoPolicyQueryResp.SubOrderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlgoPolicyQueryResp_SubOrderInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void AlgoPolicyQueryResp_SubOrderInfo::Swap(AlgoPolicyQueryResp_SubOrderInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AlgoPolicyQueryResp_SubOrderInfo::InternalSwap(AlgoPolicyQueryResp_SubOrderInfo* other) {
  using std::swap;
  orderno_.Swap(&other->orderno_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_id_.Swap(&other->order_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_status_.Swap(&other->order_status_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AlgoPolicyQueryResp_SubOrderInfo::GetMetadata() const {
  protobuf_protos_2fqpolicy_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AlgoPolicyQueryResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AlgoPolicyQueryResp::kFuncidFieldNumber;
const int AlgoPolicyQueryResp::kErrorCodeFieldNumber;
const int AlgoPolicyQueryResp::kErrorMsgFieldNumber;
const int AlgoPolicyQueryResp::kOrderListFieldNumber;
const int AlgoPolicyQueryResp::kSiStateFieldNumber;
const int AlgoPolicyQueryResp::kSiTraceFieldNumber;
const int AlgoPolicyQueryResp::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AlgoPolicyQueryResp::AlgoPolicyQueryResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqpolicy_5fprotocol_2eproto::scc_info_AlgoPolicyQueryResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.AlgoPolicyQueryResp)
}
AlgoPolicyQueryResp::AlgoPolicyQueryResp(const AlgoPolicyQueryResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      order_list_(from.order_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_msg()) {
    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  si_trace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_si_trace()) {
    si_trace_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.si_trace_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  ::memcpy(&error_code_, &from.error_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&funcid_) -
    reinterpret_cast<char*>(&error_code_)) + sizeof(funcid_));
  // @@protoc_insertion_point(copy_constructor:autotrade.AlgoPolicyQueryResp)
}

void AlgoPolicyQueryResp::SharedCtor() {
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  si_trace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&error_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&si_state_) -
      reinterpret_cast<char*>(&error_code_)) + sizeof(si_state_));
  funcid_ = 91100004;
}

AlgoPolicyQueryResp::~AlgoPolicyQueryResp() {
  // @@protoc_insertion_point(destructor:autotrade.AlgoPolicyQueryResp)
  SharedDtor();
}

void AlgoPolicyQueryResp::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  si_trace_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AlgoPolicyQueryResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AlgoPolicyQueryResp::descriptor() {
  ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AlgoPolicyQueryResp& AlgoPolicyQueryResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqpolicy_5fprotocol_2eproto::scc_info_AlgoPolicyQueryResp.base);
  return *internal_default_instance();
}


void AlgoPolicyQueryResp::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.AlgoPolicyQueryResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  order_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      error_msg_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      si_trace_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 56u) {
    ::memset(&error_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&si_state_) -
        reinterpret_cast<char*>(&error_code_)) + sizeof(si_state_));
    funcid_ = 91100004;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AlgoPolicyQueryResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.AlgoPolicyQueryResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 91100004];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 error_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_error_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_msg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_msg().data(), static_cast<int>(this->error_msg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.AlgoPolicyQueryResp.error_msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autotrade.AlgoPolicyQueryResp.SubOrderInfo order_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_order_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 si_state = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_si_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &si_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string si_trace = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_si_trace()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->si_trace().data(), static_cast<int>(this->si_trace().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.AlgoPolicyQueryResp.si_trace");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.AlgoPolicyQueryResp.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.AlgoPolicyQueryResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.AlgoPolicyQueryResp)
  return false;
#undef DO_
}

void AlgoPolicyQueryResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.AlgoPolicyQueryResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 91100004];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // required int32 error_code = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->error_code(), output);
  }

  // optional string error_msg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyQueryResp.error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error_msg(), output);
  }

  // repeated .autotrade.AlgoPolicyQueryResp.SubOrderInfo order_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->order_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->order_list(static_cast<int>(i)),
      output);
  }

  // optional int32 si_state = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->si_state(), output);
  }

  // optional string si_trace = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->si_trace().data(), static_cast<int>(this->si_trace().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyQueryResp.si_trace");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->si_trace(), output);
  }

  // optional string request_id = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyQueryResp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.AlgoPolicyQueryResp)
}

::google::protobuf::uint8* AlgoPolicyQueryResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.AlgoPolicyQueryResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 91100004];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // required int32 error_code = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->error_code(), target);
  }

  // optional string error_msg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyQueryResp.error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error_msg(), target);
  }

  // repeated .autotrade.AlgoPolicyQueryResp.SubOrderInfo order_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->order_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->order_list(static_cast<int>(i)), deterministic, target);
  }

  // optional int32 si_state = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->si_state(), target);
  }

  // optional string si_trace = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->si_trace().data(), static_cast<int>(this->si_trace().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyQueryResp.si_trace");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->si_trace(), target);
  }

  // optional string request_id = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.AlgoPolicyQueryResp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.AlgoPolicyQueryResp)
  return target;
}

size_t AlgoPolicyQueryResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.AlgoPolicyQueryResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 error_code = 2;
  if (has_error_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error_code());
  }
  // repeated .autotrade.AlgoPolicyQueryResp.SubOrderInfo order_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->order_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->order_list(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string error_msg = 3;
    if (has_error_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_msg());
    }

    // optional string si_trace = 6;
    if (has_si_trace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->si_trace());
    }

    // optional string request_id = 7;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

  }
  if (_has_bits_[0 / 32] & 48u) {
    // optional int32 si_state = 5;
    if (has_si_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->si_state());
    }

    // optional int32 funcid = 1 [default = 91100004];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlgoPolicyQueryResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.AlgoPolicyQueryResp)
  GOOGLE_DCHECK_NE(&from, this);
  const AlgoPolicyQueryResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AlgoPolicyQueryResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.AlgoPolicyQueryResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.AlgoPolicyQueryResp)
    MergeFrom(*source);
  }
}

void AlgoPolicyQueryResp::MergeFrom(const AlgoPolicyQueryResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.AlgoPolicyQueryResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  order_list_.MergeFrom(from.order_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error_msg();
      error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_si_trace();
      si_trace_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.si_trace_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      error_code_ = from.error_code_;
    }
    if (cached_has_bits & 0x00000010u) {
      si_state_ = from.si_state_;
    }
    if (cached_has_bits & 0x00000020u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AlgoPolicyQueryResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.AlgoPolicyQueryResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlgoPolicyQueryResp::CopyFrom(const AlgoPolicyQueryResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.AlgoPolicyQueryResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlgoPolicyQueryResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->order_list())) return false;
  return true;
}

void AlgoPolicyQueryResp::Swap(AlgoPolicyQueryResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AlgoPolicyQueryResp::InternalSwap(AlgoPolicyQueryResp* other) {
  using std::swap;
  CastToBase(&order_list_)->InternalSwap(CastToBase(&other->order_list_));
  error_msg_.Swap(&other->error_msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  si_trace_.Swap(&other->si_trace_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_code_, other->error_code_);
  swap(si_state_, other->si_state_);
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AlgoPolicyQueryResp::GetMetadata() const {
  protobuf_protos_2fqpolicy_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace autotrade
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::PolicyParameters* Arena::CreateMaybeMessage< ::autotrade::PolicyParameters >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::PolicyParameters >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::AccountParameters* Arena::CreateMaybeMessage< ::autotrade::AccountParameters >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::AccountParameters >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::TraceParameters* Arena::CreateMaybeMessage< ::autotrade::TraceParameters >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::TraceParameters >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::AlgoPolicyCreateReqt* Arena::CreateMaybeMessage< ::autotrade::AlgoPolicyCreateReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::AlgoPolicyCreateReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::AlgoPolicyCreateResp* Arena::CreateMaybeMessage< ::autotrade::AlgoPolicyCreateResp >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::AlgoPolicyCreateResp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::AlgoPolicyUpdateReqt* Arena::CreateMaybeMessage< ::autotrade::AlgoPolicyUpdateReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::AlgoPolicyUpdateReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::AlgoPolicyUpdateResp* Arena::CreateMaybeMessage< ::autotrade::AlgoPolicyUpdateResp >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::AlgoPolicyUpdateResp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::AlgoPolicyDeleteReqt* Arena::CreateMaybeMessage< ::autotrade::AlgoPolicyDeleteReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::AlgoPolicyDeleteReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::AlgoPolicyDeleteResp* Arena::CreateMaybeMessage< ::autotrade::AlgoPolicyDeleteResp >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::AlgoPolicyDeleteResp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::AlgoPolicyQueryReqt* Arena::CreateMaybeMessage< ::autotrade::AlgoPolicyQueryReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::AlgoPolicyQueryReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::AlgoPolicyQueryResp_SubOrderInfo* Arena::CreateMaybeMessage< ::autotrade::AlgoPolicyQueryResp_SubOrderInfo >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::AlgoPolicyQueryResp_SubOrderInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::AlgoPolicyQueryResp* Arena::CreateMaybeMessage< ::autotrade::AlgoPolicyQueryResp >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::AlgoPolicyQueryResp >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
