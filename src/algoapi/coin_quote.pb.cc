// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/coin_quote.proto

#include "protos/coin_quote.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_protos_2fcoin_5fquote_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fcoin_5fquote_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AskBid;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fcoin_5fquote_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_KlineData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fcoin_5fquote_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OrderData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fcoin_5fquote_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PriceData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fcoin_5fquote_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TIterm;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fcoin_5fquote_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TradeData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fcoin_5fquote_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DIterm;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fcoin_5fquote_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DepthData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fcoin_5fquote_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DepthItem;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fcoin_5fquote_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TickerItem;
}  // namespace protobuf_protos_2fcoin_5fquote_2eproto
namespace digitalcurrency {
class TItermDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TIterm>
      _instance;
} _TIterm_default_instance_;
class TickerItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TickerItem>
      _instance;
} _TickerItem_default_instance_;
class TickerDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TickerData>
      _instance;
} _TickerData_default_instance_;
class AskBidDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AskBid>
      _instance;
} _AskBid_default_instance_;
class DItermDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DIterm>
      _instance;
} _DIterm_default_instance_;
class DepthItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DepthItem>
      _instance;
} _DepthItem_default_instance_;
class DepthDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DepthData>
      _instance;
} _DepthData_default_instance_;
class TradeDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TradeData>
      _instance;
} _TradeData_default_instance_;
class KlineDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KlineData>
      _instance;
} _KlineData_default_instance_;
class PriceDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PriceData>
      _instance;
} _PriceData_default_instance_;
class OrderDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrderData>
      _instance;
} _OrderData_default_instance_;
class ReqDepthDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqDepth>
      _instance;
} _ReqDepth_default_instance_;
class RespDepthDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RespDepth>
      _instance;
} _RespDepth_default_instance_;
class ReqTradeListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqTradeList>
      _instance;
} _ReqTradeList_default_instance_;
class RespTradeListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RespTradeList>
      _instance;
} _RespTradeList_default_instance_;
class ReqKlineDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqKline>
      _instance;
} _ReqKline_default_instance_;
class RespKlineDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RespKline>
      _instance;
} _RespKline_default_instance_;
class ReqPriceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqPrice>
      _instance;
} _ReqPrice_default_instance_;
class RespPriceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RespPrice>
      _instance;
} _RespPrice_default_instance_;
class ReqNewTradeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqNewTrade>
      _instance;
} _ReqNewTrade_default_instance_;
class RespNewTradeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RespNewTrade>
      _instance;
} _RespNewTrade_default_instance_;
class ReqCancelTradeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqCancelTrade>
      _instance;
} _ReqCancelTrade_default_instance_;
class RespCancelTradeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RespCancelTrade>
      _instance;
} _RespCancelTrade_default_instance_;
class ReqOrderInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqOrderInfo>
      _instance;
} _ReqOrderInfo_default_instance_;
class RespOrderInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RespOrderInfo>
      _instance;
} _RespOrderInfo_default_instance_;
}  // namespace digitalcurrency
namespace protobuf_protos_2fcoin_5fquote_2eproto {
static void InitDefaultsTIterm() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::digitalcurrency::_TIterm_default_instance_;
    new (ptr) ::digitalcurrency::TIterm();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::digitalcurrency::TIterm::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TIterm =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTIterm}, {}};

static void InitDefaultsTickerItem() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::digitalcurrency::_TickerItem_default_instance_;
    new (ptr) ::digitalcurrency::TickerItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::digitalcurrency::TickerItem::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TickerItem =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTickerItem}, {
      &protobuf_protos_2fcoin_5fquote_2eproto::scc_info_TIterm.base,}};

static void InitDefaultsTickerData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::digitalcurrency::_TickerData_default_instance_;
    new (ptr) ::digitalcurrency::TickerData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::digitalcurrency::TickerData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TickerData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTickerData}, {
      &protobuf_protos_2fcoin_5fquote_2eproto::scc_info_TickerItem.base,}};

static void InitDefaultsAskBid() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::digitalcurrency::_AskBid_default_instance_;
    new (ptr) ::digitalcurrency::AskBid();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::digitalcurrency::AskBid::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AskBid =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAskBid}, {}};

static void InitDefaultsDIterm() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::digitalcurrency::_DIterm_default_instance_;
    new (ptr) ::digitalcurrency::DIterm();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::digitalcurrency::DIterm::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DIterm =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDIterm}, {
      &protobuf_protos_2fcoin_5fquote_2eproto::scc_info_AskBid.base,}};

static void InitDefaultsDepthItem() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::digitalcurrency::_DepthItem_default_instance_;
    new (ptr) ::digitalcurrency::DepthItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::digitalcurrency::DepthItem::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DepthItem =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDepthItem}, {
      &protobuf_protos_2fcoin_5fquote_2eproto::scc_info_DIterm.base,}};

static void InitDefaultsDepthData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::digitalcurrency::_DepthData_default_instance_;
    new (ptr) ::digitalcurrency::DepthData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::digitalcurrency::DepthData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DepthData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDepthData}, {
      &protobuf_protos_2fcoin_5fquote_2eproto::scc_info_DepthItem.base,}};

static void InitDefaultsTradeData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::digitalcurrency::_TradeData_default_instance_;
    new (ptr) ::digitalcurrency::TradeData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::digitalcurrency::TradeData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TradeData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTradeData}, {}};

static void InitDefaultsKlineData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::digitalcurrency::_KlineData_default_instance_;
    new (ptr) ::digitalcurrency::KlineData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::digitalcurrency::KlineData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_KlineData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsKlineData}, {}};

static void InitDefaultsPriceData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::digitalcurrency::_PriceData_default_instance_;
    new (ptr) ::digitalcurrency::PriceData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::digitalcurrency::PriceData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PriceData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPriceData}, {}};

static void InitDefaultsOrderData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::digitalcurrency::_OrderData_default_instance_;
    new (ptr) ::digitalcurrency::OrderData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::digitalcurrency::OrderData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OrderData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOrderData}, {}};

static void InitDefaultsReqDepth() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::digitalcurrency::_ReqDepth_default_instance_;
    new (ptr) ::digitalcurrency::ReqDepth();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::digitalcurrency::ReqDepth::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReqDepth =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReqDepth}, {}};

static void InitDefaultsRespDepth() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::digitalcurrency::_RespDepth_default_instance_;
    new (ptr) ::digitalcurrency::RespDepth();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::digitalcurrency::RespDepth::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RespDepth =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRespDepth}, {
      &protobuf_protos_2fcoin_5fquote_2eproto::scc_info_DepthData.base,}};

static void InitDefaultsReqTradeList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::digitalcurrency::_ReqTradeList_default_instance_;
    new (ptr) ::digitalcurrency::ReqTradeList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::digitalcurrency::ReqTradeList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReqTradeList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReqTradeList}, {}};

static void InitDefaultsRespTradeList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::digitalcurrency::_RespTradeList_default_instance_;
    new (ptr) ::digitalcurrency::RespTradeList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::digitalcurrency::RespTradeList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RespTradeList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRespTradeList}, {
      &protobuf_protos_2fcoin_5fquote_2eproto::scc_info_TradeData.base,}};

static void InitDefaultsReqKline() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::digitalcurrency::_ReqKline_default_instance_;
    new (ptr) ::digitalcurrency::ReqKline();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::digitalcurrency::ReqKline::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReqKline =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReqKline}, {}};

static void InitDefaultsRespKline() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::digitalcurrency::_RespKline_default_instance_;
    new (ptr) ::digitalcurrency::RespKline();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::digitalcurrency::RespKline::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RespKline =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRespKline}, {
      &protobuf_protos_2fcoin_5fquote_2eproto::scc_info_KlineData.base,}};

static void InitDefaultsReqPrice() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::digitalcurrency::_ReqPrice_default_instance_;
    new (ptr) ::digitalcurrency::ReqPrice();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::digitalcurrency::ReqPrice::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReqPrice =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReqPrice}, {}};

static void InitDefaultsRespPrice() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::digitalcurrency::_RespPrice_default_instance_;
    new (ptr) ::digitalcurrency::RespPrice();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::digitalcurrency::RespPrice::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RespPrice =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRespPrice}, {
      &protobuf_protos_2fcoin_5fquote_2eproto::scc_info_PriceData.base,}};

static void InitDefaultsReqNewTrade() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::digitalcurrency::_ReqNewTrade_default_instance_;
    new (ptr) ::digitalcurrency::ReqNewTrade();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::digitalcurrency::ReqNewTrade::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReqNewTrade =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReqNewTrade}, {}};

static void InitDefaultsRespNewTrade() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::digitalcurrency::_RespNewTrade_default_instance_;
    new (ptr) ::digitalcurrency::RespNewTrade();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::digitalcurrency::RespNewTrade::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RespNewTrade =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRespNewTrade}, {}};

static void InitDefaultsReqCancelTrade() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::digitalcurrency::_ReqCancelTrade_default_instance_;
    new (ptr) ::digitalcurrency::ReqCancelTrade();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::digitalcurrency::ReqCancelTrade::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReqCancelTrade =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReqCancelTrade}, {}};

static void InitDefaultsRespCancelTrade() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::digitalcurrency::_RespCancelTrade_default_instance_;
    new (ptr) ::digitalcurrency::RespCancelTrade();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::digitalcurrency::RespCancelTrade::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RespCancelTrade =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRespCancelTrade}, {}};

static void InitDefaultsReqOrderInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::digitalcurrency::_ReqOrderInfo_default_instance_;
    new (ptr) ::digitalcurrency::ReqOrderInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::digitalcurrency::ReqOrderInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReqOrderInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReqOrderInfo}, {}};

static void InitDefaultsRespOrderInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::digitalcurrency::_RespOrderInfo_default_instance_;
    new (ptr) ::digitalcurrency::RespOrderInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::digitalcurrency::RespOrderInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RespOrderInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRespOrderInfo}, {
      &protobuf_protos_2fcoin_5fquote_2eproto::scc_info_OrderData.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TIterm.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TickerItem.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TickerData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AskBid.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DIterm.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DepthItem.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DepthData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TradeData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_KlineData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PriceData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OrderData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqDepth.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RespDepth.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqTradeList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RespTradeList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqKline.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RespKline.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqPrice.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RespPrice.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqNewTrade.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RespNewTrade.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqCancelTrade.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RespCancelTrade.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqOrderInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RespOrderInfo.base);
}

::google::protobuf::Metadata file_level_metadata[25];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::TIterm, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::TIterm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::TIterm, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::TIterm, high_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::TIterm, low_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::TIterm, dayhigh_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::TIterm, daylow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::TIterm, vol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::TIterm, last_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::TIterm, buy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::TIterm, sell_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::TIterm, change_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::TickerItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::TickerItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::TickerItem, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::TickerItem, tpair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::TickerItem, titerm_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::TickerData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::TickerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::TickerData, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::TickerData, tickers_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::AskBid, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::AskBid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::AskBid, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::AskBid, amount_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::DIterm, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::DIterm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::DIterm, asks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::DIterm, bids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::DIterm, timestamp_),
  ~0u,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::DepthItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::DepthItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::DepthItem, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::DepthItem, tpair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::DepthItem, diterm_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::DepthData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::DepthData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::DepthData, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::DepthData, depths_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::TradeData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::TradeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::TradeData, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::TradeData, amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::TradeData, timestamp_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::KlineData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::KlineData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::KlineData, open_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::KlineData, open_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::KlineData, high_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::KlineData, low_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::KlineData, close_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::KlineData, close_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::KlineData, volumn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::KlineData, number_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::PriceData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::PriceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::PriceData, tpair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::PriceData, price_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::OrderData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::OrderData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::OrderData, order_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::OrderData, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::OrderData, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::OrderData, amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::OrderData, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::OrderData, deal_amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::OrderData, avg_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::OrderData, order_type_),
  0,
  6,
  5,
  1,
  2,
  3,
  4,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::ReqDepth, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::ReqDepth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::ReqDepth, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::ReqDepth, tpair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::ReqDepth, limit_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::RespDepth, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::RespDepth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::RespDepth, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::RespDepth, depth_data_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::ReqTradeList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::ReqTradeList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::ReqTradeList, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::ReqTradeList, tpair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::ReqTradeList, limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::ReqTradeList, begin_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::ReqTradeList, end_time_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::RespTradeList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::RespTradeList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::RespTradeList, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::RespTradeList, trade_data_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::ReqKline, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::ReqKline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::ReqKline, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::ReqKline, tpair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::ReqKline, kline_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::ReqKline, begin_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::ReqKline, end_time_),
  0,
  1,
  4,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::RespKline, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::RespKline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::RespKline, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::RespKline, kline_data_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::ReqPrice, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::ReqPrice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::ReqPrice, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::ReqPrice, tpair_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::RespPrice, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::RespPrice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::RespPrice, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::RespPrice, price_data_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::ReqNewTrade, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::ReqNewTrade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::ReqNewTrade, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::ReqNewTrade, tpair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::ReqNewTrade, ttype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::ReqNewTrade, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::ReqNewTrade, amount_),
  0,
  1,
  4,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::RespNewTrade, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::RespNewTrade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::RespNewTrade, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::RespNewTrade, order_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::ReqCancelTrade, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::ReqCancelTrade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::ReqCancelTrade, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::ReqCancelTrade, order_id_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::RespCancelTrade, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::RespCancelTrade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::RespCancelTrade, error_code_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::ReqOrderInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::ReqOrderInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::ReqOrderInfo, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::ReqOrderInfo, order_id_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::RespOrderInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::RespOrderInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::RespOrderInfo, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::digitalcurrency::RespOrderInfo, order_data_),
  0,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::digitalcurrency::TIterm)},
  { 25, 33, sizeof(::digitalcurrency::TickerItem)},
  { 36, 43, sizeof(::digitalcurrency::TickerData)},
  { 45, 52, sizeof(::digitalcurrency::AskBid)},
  { 54, 62, sizeof(::digitalcurrency::DIterm)},
  { 65, 73, sizeof(::digitalcurrency::DepthItem)},
  { 76, 83, sizeof(::digitalcurrency::DepthData)},
  { 85, 93, sizeof(::digitalcurrency::TradeData)},
  { 96, 109, sizeof(::digitalcurrency::KlineData)},
  { 117, 124, sizeof(::digitalcurrency::PriceData)},
  { 126, 139, sizeof(::digitalcurrency::OrderData)},
  { 147, 155, sizeof(::digitalcurrency::ReqDepth)},
  { 158, 165, sizeof(::digitalcurrency::RespDepth)},
  { 167, 177, sizeof(::digitalcurrency::ReqTradeList)},
  { 182, 189, sizeof(::digitalcurrency::RespTradeList)},
  { 191, 201, sizeof(::digitalcurrency::ReqKline)},
  { 206, 213, sizeof(::digitalcurrency::RespKline)},
  { 215, 222, sizeof(::digitalcurrency::ReqPrice)},
  { 224, 231, sizeof(::digitalcurrency::RespPrice)},
  { 233, 243, sizeof(::digitalcurrency::ReqNewTrade)},
  { 248, 255, sizeof(::digitalcurrency::RespNewTrade)},
  { 257, 264, sizeof(::digitalcurrency::ReqCancelTrade)},
  { 266, 272, sizeof(::digitalcurrency::RespCancelTrade)},
  { 273, 280, sizeof(::digitalcurrency::ReqOrderInfo)},
  { 282, 289, sizeof(::digitalcurrency::RespOrderInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::digitalcurrency::_TIterm_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::digitalcurrency::_TickerItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::digitalcurrency::_TickerData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::digitalcurrency::_AskBid_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::digitalcurrency::_DIterm_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::digitalcurrency::_DepthItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::digitalcurrency::_DepthData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::digitalcurrency::_TradeData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::digitalcurrency::_KlineData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::digitalcurrency::_PriceData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::digitalcurrency::_OrderData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::digitalcurrency::_ReqDepth_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::digitalcurrency::_RespDepth_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::digitalcurrency::_ReqTradeList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::digitalcurrency::_RespTradeList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::digitalcurrency::_ReqKline_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::digitalcurrency::_RespKline_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::digitalcurrency::_ReqPrice_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::digitalcurrency::_RespPrice_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::digitalcurrency::_ReqNewTrade_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::digitalcurrency::_RespNewTrade_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::digitalcurrency::_ReqCancelTrade_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::digitalcurrency::_RespCancelTrade_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::digitalcurrency::_ReqOrderInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::digitalcurrency::_RespOrderInfo_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "protos/coin_quote.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 25);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\027protos/coin_quote.proto\022\017digitalcurren"
      "cy\"\235\001\n\006TIterm\022\021\n\ttimestamp\030\001 \001(\003\022\014\n\004high"
      "\030\002 \001(\003\022\013\n\003low\030\003 \001(\003\022\017\n\007dayHigh\030\004 \001(\003\022\016\n\006"
      "dayLow\030\005 \001(\003\022\013\n\003vol\030\006 \001(\003\022\014\n\004last\030\007 \001(\003\022"
      "\013\n\003buy\030\010 \001(\003\022\014\n\004sell\030\t \001(\003\022\016\n\006change\030\n \001"
      "(\003\"s\n\nTickerItem\022\017\n\007channel\030\001 \001(\t\022+\n\005tpa"
      "ir\030\002 \001(\0162\034.digitalcurrency.TradingPair\022\'"
      "\n\006titerm\030\003 \001(\0132\027.digitalcurrency.TIterm\""
      "g\n\nTickerData\022+\n\010exchange\030\001 \001(\0162\031.digita"
      "lcurrency.Exchange\022,\n\007tickers\030\002 \003(\0132\033.di"
      "gitalcurrency.TickerItem\"\'\n\006AskBid\022\r\n\005pr"
      "ice\030\001 \001(\003\022\016\n\006amount\030\002 \001(\003\"i\n\006DIterm\022%\n\004a"
      "sks\030\001 \003(\0132\027.digitalcurrency.AskBid\022%\n\004bi"
      "ds\030\002 \003(\0132\027.digitalcurrency.AskBid\022\021\n\ttim"
      "estamp\030\003 \001(\003\"r\n\tDepthItem\022\017\n\007channel\030\001 \001"
      "(\t\022+\n\005tpair\030\002 \001(\0162\034.digitalcurrency.Trad"
      "ingPair\022\'\n\006diterm\030\003 \001(\0132\027.digitalcurrenc"
      "y.DIterm\"d\n\tDepthData\022+\n\010exchange\030\001 \001(\0162"
      "\031.digitalcurrency.Exchange\022*\n\006depths\030\002 \003"
      "(\0132\032.digitalcurrency.DepthItem\"=\n\tTradeD"
      "ata\022\r\n\005price\030\001 \001(\001\022\016\n\006amount\030\002 \001(\001\022\021\n\tti"
      "mestamp\030\003 \001(\003\"\242\001\n\tKlineData\022\021\n\topen_time"
      "\030\001 \001(\003\022\022\n\nopen_price\030\002 \001(\001\022\022\n\nhigh_price"
      "\030\003 \001(\001\022\021\n\tlow_price\030\004 \001(\001\022\023\n\013close_price"
      "\030\005 \001(\001\022\022\n\nclose_time\030\006 \001(\003\022\016\n\006volumn\030\007 \001"
      "(\001\022\016\n\006number\030\010 \001(\003\"G\n\tPriceData\022+\n\005tpair"
      "\030\001 \002(\0162\034.digitalcurrency.TradingPair\022\r\n\005"
      "price\030\002 \002(\001\"\357\001\n\tOrderData\022\020\n\010order_id\030\001 "
      "\002(\003\022,\n\006status\030\002 \002(\0162\034.digitalcurrency.Or"
      "derStatus\022+\n\010exchange\030\003 \002(\0162\031.digitalcur"
      "rency.Exchange\022\016\n\006amount\030\004 \002(\001\022\r\n\005price\030"
      "\005 \002(\001\022\023\n\013deal_amount\030\006 \002(\001\022\021\n\tavg_price\030"
      "\007 \002(\001\022.\n\norder_type\030\010 \002(\0162\032.digitalcurre"
      "ncy.TradeType\"s\n\010ReqDepth\022+\n\010exchange\030\001 "
      "\002(\0162\031.digitalcurrency.Exchange\022+\n\005tpair\030"
      "\002 \002(\0162\034.digitalcurrency.TradingPair\022\r\n\005l"
      "imit\030\003 \001(\003\"O\n\tRespDepth\022\022\n\nerror_code\030\001 "
      "\002(\003\022.\n\ndepth_data\030\002 \002(\0132\032.digitalcurrenc"
      "y.DepthData\"\235\001\n\014ReqTradeList\022+\n\010exchange"
      "\030\001 \002(\0162\031.digitalcurrency.Exchange\022+\n\005tpa"
      "ir\030\002 \002(\0162\034.digitalcurrency.TradingPair\022\r"
      "\n\005limit\030\003 \001(\003\022\022\n\nbegin_time\030\004 \001(\003\022\020\n\010end"
      "_time\030\005 \001(\003\"S\n\rRespTradeList\022\022\n\nerror_co"
      "de\030\001 \002(\003\022.\n\ntrade_data\030\002 \003(\0132\032.digitalcu"
      "rrency.TradeData\"\276\001\n\010ReqKline\022+\n\010exchang"
      "e\030\001 \002(\0162\031.digitalcurrency.Exchange\022+\n\005tp"
      "air\030\002 \002(\0162\034.digitalcurrency.TradingPair\022"
      "2\n\nkline_type\030\003 \002(\0162\036.digitalcurrency.Kl"
      "ineInterval\022\022\n\nbegin_time\030\004 \001(\003\022\020\n\010end_t"
      "ime\030\005 \001(\003\"O\n\tRespKline\022\022\n\nerror_code\030\001 \002"
      "(\003\022.\n\nkline_data\030\002 \003(\0132\032.digitalcurrency"
      ".KlineData\"d\n\010ReqPrice\022+\n\010exchange\030\001 \002(\016"
      "2\031.digitalcurrency.Exchange\022+\n\005tpair\030\002 \001"
      "(\0162\034.digitalcurrency.TradingPair\"O\n\tResp"
      "Price\022\022\n\nerror_code\030\001 \002(\003\022.\n\nprice_data\030"
      "\002 \003(\0132\032.digitalcurrency.PriceData\"\261\001\n\013Re"
      "qNewTrade\022+\n\010exchange\030\001 \002(\0162\031.digitalcur"
      "rency.Exchange\022+\n\005tpair\030\002 \002(\0162\034.digitalc"
      "urrency.TradingPair\022)\n\005ttype\030\003 \002(\0162\032.dig"
      "italcurrency.TradeType\022\r\n\005price\030\004 \002(\001\022\016\n"
      "\006amount\030\005 \002(\001\"4\n\014RespNewTrade\022\022\n\nerror_c"
      "ode\030\001 \002(\003\022\020\n\010order_id\030\002 \001(\003\"O\n\016ReqCancel"
      "Trade\022+\n\010exchange\030\001 \002(\0162\031.digitalcurrenc"
      "y.Exchange\022\020\n\010order_id\030\002 \002(\003\"%\n\017RespCanc"
      "elTrade\022\022\n\nerror_code\030\001 \002(\003\"M\n\014ReqOrderI"
      "nfo\022+\n\010exchange\030\001 \002(\0162\031.digitalcurrency."
      "Exchange\022\020\n\010order_id\030\002 \001(\003\"S\n\rRespOrderI"
      "nfo\022\022\n\nerror_code\030\001 \002(\003\022.\n\norder_data\030\002 "
      "\003(\0132\032.digitalcurrency.OrderData*/\n\014Messg"
      "eTypeID\022\016\n\nReqDepthID\020\001\022\017\n\013RespDetphID\020\002"
      "*4\n\013TradingPair\022\013\n\007BTCUSDT\020\000\022\013\n\007ETHUSDT\020"
      "\001\022\013\n\007BCHUSDT\020\002*I\n\010Exchange\022\023\n\017Exchange_O"
      "KCOIN\020\000\022\024\n\020Exchange_BINANCE\020\001\022\022\n\016Exchang"
      "e_HUOBI\020\002*\320\001\n\rKlineInterval\022\r\n\tOneMinute"
      "\020\001\022\017\n\013ThreeMinute\020\002\022\016\n\nFiveMinute\020\003\022\021\n\rF"
      "ifteenMinute\020\004\022\020\n\014ThirtyMinute\020\005\022\013\n\007OneH"
      "our\020\006\022\013\n\007TwoHour\020\007\022\014\n\010FourHour\020\010\022\013\n\007SixH"
      "our\020\t\022\016\n\nTwelveHour\020\n\022\n\n\006OneDay\020\013\022\014\n\010Thr"
      "eeDay\020\014\022\013\n\007OneWeek\020\r*G\n\tTradeType\022\r\n\tBuy"
      "Market\020\001\022\016\n\nSellMarket\020\002\022\014\n\010BuyLimit\020\003\022\r"
      "\n\tSellLimit\020\004*Y\n\013OrderStatus\022\014\n\010Canceled"
      "\020\001\022\n\n\006NoDeal\020\002\022\017\n\013PartialDeal\020\003\022\020\n\014Compl"
      "eteDeal\020\004\022\r\n\tCanceling\020\005B\002H\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3308);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protos/coin_quote.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_protos_2fcoin_5fquote_2eproto
namespace digitalcurrency {
const ::google::protobuf::EnumDescriptor* MessgeTypeID_descriptor() {
  protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protos_2fcoin_5fquote_2eproto::file_level_enum_descriptors[0];
}
bool MessgeTypeID_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TradingPair_descriptor() {
  protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protos_2fcoin_5fquote_2eproto::file_level_enum_descriptors[1];
}
bool TradingPair_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Exchange_descriptor() {
  protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protos_2fcoin_5fquote_2eproto::file_level_enum_descriptors[2];
}
bool Exchange_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* KlineInterval_descriptor() {
  protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protos_2fcoin_5fquote_2eproto::file_level_enum_descriptors[3];
}
bool KlineInterval_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TradeType_descriptor() {
  protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protos_2fcoin_5fquote_2eproto::file_level_enum_descriptors[4];
}
bool TradeType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OrderStatus_descriptor() {
  protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protos_2fcoin_5fquote_2eproto::file_level_enum_descriptors[5];
}
bool OrderStatus_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void TIterm::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TIterm::kTimestampFieldNumber;
const int TIterm::kHighFieldNumber;
const int TIterm::kLowFieldNumber;
const int TIterm::kDayHighFieldNumber;
const int TIterm::kDayLowFieldNumber;
const int TIterm::kVolFieldNumber;
const int TIterm::kLastFieldNumber;
const int TIterm::kBuyFieldNumber;
const int TIterm::kSellFieldNumber;
const int TIterm::kChangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TIterm::TIterm()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fcoin_5fquote_2eproto::scc_info_TIterm.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:digitalcurrency.TIterm)
}
TIterm::TIterm(const TIterm& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&change_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(change_));
  // @@protoc_insertion_point(copy_constructor:digitalcurrency.TIterm)
}

void TIterm::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&change_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(change_));
}

TIterm::~TIterm() {
  // @@protoc_insertion_point(destructor:digitalcurrency.TIterm)
  SharedDtor();
}

void TIterm::SharedDtor() {
}

void TIterm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TIterm::descriptor() {
  ::protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TIterm& TIterm::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fcoin_5fquote_2eproto::scc_info_TIterm.base);
  return *internal_default_instance();
}


void TIterm::Clear() {
// @@protoc_insertion_point(message_clear_start:digitalcurrency.TIterm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&buy_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(buy_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&sell_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&change_) -
        reinterpret_cast<char*>(&sell_)) + sizeof(change_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TIterm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:digitalcurrency.TIterm)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 high = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_high();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &high_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 low = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_low();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &low_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 dayHigh = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_dayhigh();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dayhigh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 dayLow = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_daylow();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &daylow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 vol = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_vol();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_last();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 buy = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_buy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sell = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_sell();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sell_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 change = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_change();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &change_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:digitalcurrency.TIterm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:digitalcurrency.TIterm)
  return false;
#undef DO_
}

void TIterm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:digitalcurrency.TIterm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional int64 high = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->high(), output);
  }

  // optional int64 low = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->low(), output);
  }

  // optional int64 dayHigh = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->dayhigh(), output);
  }

  // optional int64 dayLow = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->daylow(), output);
  }

  // optional int64 vol = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->vol(), output);
  }

  // optional int64 last = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->last(), output);
  }

  // optional int64 buy = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->buy(), output);
  }

  // optional int64 sell = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->sell(), output);
  }

  // optional int64 change = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->change(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:digitalcurrency.TIterm)
}

::google::protobuf::uint8* TIterm::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:digitalcurrency.TIterm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional int64 high = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->high(), target);
  }

  // optional int64 low = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->low(), target);
  }

  // optional int64 dayHigh = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->dayhigh(), target);
  }

  // optional int64 dayLow = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->daylow(), target);
  }

  // optional int64 vol = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->vol(), target);
  }

  // optional int64 last = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->last(), target);
  }

  // optional int64 buy = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->buy(), target);
  }

  // optional int64 sell = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->sell(), target);
  }

  // optional int64 change = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->change(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:digitalcurrency.TIterm)
  return target;
}

size_t TIterm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:digitalcurrency.TIterm)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional int64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional int64 high = 2;
    if (has_high()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->high());
    }

    // optional int64 low = 3;
    if (has_low()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->low());
    }

    // optional int64 dayHigh = 4;
    if (has_dayhigh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dayhigh());
    }

    // optional int64 dayLow = 5;
    if (has_daylow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->daylow());
    }

    // optional int64 vol = 6;
    if (has_vol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vol());
    }

    // optional int64 last = 7;
    if (has_last()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last());
    }

    // optional int64 buy = 8;
    if (has_buy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->buy());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional int64 sell = 9;
    if (has_sell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sell());
    }

    // optional int64 change = 10;
    if (has_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->change());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TIterm::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:digitalcurrency.TIterm)
  GOOGLE_DCHECK_NE(&from, this);
  const TIterm* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TIterm>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:digitalcurrency.TIterm)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:digitalcurrency.TIterm)
    MergeFrom(*source);
  }
}

void TIterm::MergeFrom(const TIterm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:digitalcurrency.TIterm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      high_ = from.high_;
    }
    if (cached_has_bits & 0x00000004u) {
      low_ = from.low_;
    }
    if (cached_has_bits & 0x00000008u) {
      dayhigh_ = from.dayhigh_;
    }
    if (cached_has_bits & 0x00000010u) {
      daylow_ = from.daylow_;
    }
    if (cached_has_bits & 0x00000020u) {
      vol_ = from.vol_;
    }
    if (cached_has_bits & 0x00000040u) {
      last_ = from.last_;
    }
    if (cached_has_bits & 0x00000080u) {
      buy_ = from.buy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      sell_ = from.sell_;
    }
    if (cached_has_bits & 0x00000200u) {
      change_ = from.change_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TIterm::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:digitalcurrency.TIterm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TIterm::CopyFrom(const TIterm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:digitalcurrency.TIterm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TIterm::IsInitialized() const {
  return true;
}

void TIterm::Swap(TIterm* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TIterm::InternalSwap(TIterm* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(high_, other->high_);
  swap(low_, other->low_);
  swap(dayhigh_, other->dayhigh_);
  swap(daylow_, other->daylow_);
  swap(vol_, other->vol_);
  swap(last_, other->last_);
  swap(buy_, other->buy_);
  swap(sell_, other->sell_);
  swap(change_, other->change_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TIterm::GetMetadata() const {
  protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TickerItem::InitAsDefaultInstance() {
  ::digitalcurrency::_TickerItem_default_instance_._instance.get_mutable()->titerm_ = const_cast< ::digitalcurrency::TIterm*>(
      ::digitalcurrency::TIterm::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TickerItem::kChannelFieldNumber;
const int TickerItem::kTpairFieldNumber;
const int TickerItem::kTitermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TickerItem::TickerItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fcoin_5fquote_2eproto::scc_info_TickerItem.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:digitalcurrency.TickerItem)
}
TickerItem::TickerItem(const TickerItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_channel()) {
    channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  if (from.has_titerm()) {
    titerm_ = new ::digitalcurrency::TIterm(*from.titerm_);
  } else {
    titerm_ = NULL;
  }
  tpair_ = from.tpair_;
  // @@protoc_insertion_point(copy_constructor:digitalcurrency.TickerItem)
}

void TickerItem::SharedCtor() {
  channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&titerm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tpair_) -
      reinterpret_cast<char*>(&titerm_)) + sizeof(tpair_));
}

TickerItem::~TickerItem() {
  // @@protoc_insertion_point(destructor:digitalcurrency.TickerItem)
  SharedDtor();
}

void TickerItem::SharedDtor() {
  channel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete titerm_;
}

void TickerItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TickerItem::descriptor() {
  ::protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TickerItem& TickerItem::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fcoin_5fquote_2eproto::scc_info_TickerItem.base);
  return *internal_default_instance();
}


void TickerItem::Clear() {
// @@protoc_insertion_point(message_clear_start:digitalcurrency.TickerItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      channel_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(titerm_ != NULL);
      titerm_->Clear();
    }
  }
  tpair_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TickerItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:digitalcurrency.TickerItem)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string channel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel().data(), static_cast<int>(this->channel().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "digitalcurrency.TickerItem.channel");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .digitalcurrency.TradingPair tpair = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::digitalcurrency::TradingPair_IsValid(value)) {
            set_tpair(static_cast< ::digitalcurrency::TradingPair >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .digitalcurrency.TIterm titerm = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_titerm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:digitalcurrency.TickerItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:digitalcurrency.TickerItem)
  return false;
#undef DO_
}

void TickerItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:digitalcurrency.TickerItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string channel = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "digitalcurrency.TickerItem.channel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channel(), output);
  }

  // optional .digitalcurrency.TradingPair tpair = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->tpair(), output);
  }

  // optional .digitalcurrency.TIterm titerm = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_titerm(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:digitalcurrency.TickerItem)
}

::google::protobuf::uint8* TickerItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:digitalcurrency.TickerItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string channel = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "digitalcurrency.TickerItem.channel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel(), target);
  }

  // optional .digitalcurrency.TradingPair tpair = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->tpair(), target);
  }

  // optional .digitalcurrency.TIterm titerm = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_titerm(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:digitalcurrency.TickerItem)
  return target;
}

size_t TickerItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:digitalcurrency.TickerItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

    // optional .digitalcurrency.TIterm titerm = 3;
    if (has_titerm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *titerm_);
    }

    // optional .digitalcurrency.TradingPair tpair = 2;
    if (has_tpair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tpair());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TickerItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:digitalcurrency.TickerItem)
  GOOGLE_DCHECK_NE(&from, this);
  const TickerItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TickerItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:digitalcurrency.TickerItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:digitalcurrency.TickerItem)
    MergeFrom(*source);
  }
}

void TickerItem::MergeFrom(const TickerItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:digitalcurrency.TickerItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_channel();
      channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_titerm()->::digitalcurrency::TIterm::MergeFrom(from.titerm());
    }
    if (cached_has_bits & 0x00000004u) {
      tpair_ = from.tpair_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TickerItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:digitalcurrency.TickerItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TickerItem::CopyFrom(const TickerItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:digitalcurrency.TickerItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TickerItem::IsInitialized() const {
  return true;
}

void TickerItem::Swap(TickerItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TickerItem::InternalSwap(TickerItem* other) {
  using std::swap;
  channel_.Swap(&other->channel_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(titerm_, other->titerm_);
  swap(tpair_, other->tpair_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TickerItem::GetMetadata() const {
  protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TickerData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TickerData::kExchangeFieldNumber;
const int TickerData::kTickersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TickerData::TickerData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fcoin_5fquote_2eproto::scc_info_TickerData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:digitalcurrency.TickerData)
}
TickerData::TickerData(const TickerData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      tickers_(from.tickers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  exchange_ = from.exchange_;
  // @@protoc_insertion_point(copy_constructor:digitalcurrency.TickerData)
}

void TickerData::SharedCtor() {
  exchange_ = 0;
}

TickerData::~TickerData() {
  // @@protoc_insertion_point(destructor:digitalcurrency.TickerData)
  SharedDtor();
}

void TickerData::SharedDtor() {
}

void TickerData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TickerData::descriptor() {
  ::protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TickerData& TickerData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fcoin_5fquote_2eproto::scc_info_TickerData.base);
  return *internal_default_instance();
}


void TickerData::Clear() {
// @@protoc_insertion_point(message_clear_start:digitalcurrency.TickerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tickers_.Clear();
  exchange_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TickerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:digitalcurrency.TickerData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .digitalcurrency.Exchange exchange = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::digitalcurrency::Exchange_IsValid(value)) {
            set_exchange(static_cast< ::digitalcurrency::Exchange >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .digitalcurrency.TickerItem tickers = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tickers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:digitalcurrency.TickerData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:digitalcurrency.TickerData)
  return false;
#undef DO_
}

void TickerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:digitalcurrency.TickerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .digitalcurrency.Exchange exchange = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->exchange(), output);
  }

  // repeated .digitalcurrency.TickerItem tickers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tickers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->tickers(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:digitalcurrency.TickerData)
}

::google::protobuf::uint8* TickerData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:digitalcurrency.TickerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .digitalcurrency.Exchange exchange = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->exchange(), target);
  }

  // repeated .digitalcurrency.TickerItem tickers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tickers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->tickers(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:digitalcurrency.TickerData)
  return target;
}

size_t TickerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:digitalcurrency.TickerData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .digitalcurrency.TickerItem tickers = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->tickers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tickers(static_cast<int>(i)));
    }
  }

  // optional .digitalcurrency.Exchange exchange = 1;
  if (has_exchange()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->exchange());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TickerData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:digitalcurrency.TickerData)
  GOOGLE_DCHECK_NE(&from, this);
  const TickerData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TickerData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:digitalcurrency.TickerData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:digitalcurrency.TickerData)
    MergeFrom(*source);
  }
}

void TickerData::MergeFrom(const TickerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:digitalcurrency.TickerData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tickers_.MergeFrom(from.tickers_);
  if (from.has_exchange()) {
    set_exchange(from.exchange());
  }
}

void TickerData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:digitalcurrency.TickerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TickerData::CopyFrom(const TickerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:digitalcurrency.TickerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TickerData::IsInitialized() const {
  return true;
}

void TickerData::Swap(TickerData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TickerData::InternalSwap(TickerData* other) {
  using std::swap;
  CastToBase(&tickers_)->InternalSwap(CastToBase(&other->tickers_));
  swap(exchange_, other->exchange_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TickerData::GetMetadata() const {
  protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AskBid::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AskBid::kPriceFieldNumber;
const int AskBid::kAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AskBid::AskBid()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fcoin_5fquote_2eproto::scc_info_AskBid.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:digitalcurrency.AskBid)
}
AskBid::AskBid(const AskBid& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&amount_) -
    reinterpret_cast<char*>(&price_)) + sizeof(amount_));
  // @@protoc_insertion_point(copy_constructor:digitalcurrency.AskBid)
}

void AskBid::SharedCtor() {
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) -
      reinterpret_cast<char*>(&price_)) + sizeof(amount_));
}

AskBid::~AskBid() {
  // @@protoc_insertion_point(destructor:digitalcurrency.AskBid)
  SharedDtor();
}

void AskBid::SharedDtor() {
}

void AskBid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AskBid::descriptor() {
  ::protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AskBid& AskBid::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fcoin_5fquote_2eproto::scc_info_AskBid.base);
  return *internal_default_instance();
}


void AskBid::Clear() {
// @@protoc_insertion_point(message_clear_start:digitalcurrency.AskBid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&amount_) -
        reinterpret_cast<char*>(&price_)) + sizeof(amount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AskBid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:digitalcurrency.AskBid)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 price = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 amount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:digitalcurrency.AskBid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:digitalcurrency.AskBid)
  return false;
#undef DO_
}

void AskBid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:digitalcurrency.AskBid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 price = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->price(), output);
  }

  // optional int64 amount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->amount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:digitalcurrency.AskBid)
}

::google::protobuf::uint8* AskBid::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:digitalcurrency.AskBid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 price = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->price(), target);
  }

  // optional int64 amount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->amount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:digitalcurrency.AskBid)
  return target;
}

size_t AskBid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:digitalcurrency.AskBid)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 price = 1;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->price());
    }

    // optional int64 amount = 2;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->amount());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AskBid::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:digitalcurrency.AskBid)
  GOOGLE_DCHECK_NE(&from, this);
  const AskBid* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AskBid>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:digitalcurrency.AskBid)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:digitalcurrency.AskBid)
    MergeFrom(*source);
  }
}

void AskBid::MergeFrom(const AskBid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:digitalcurrency.AskBid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000002u) {
      amount_ = from.amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AskBid::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:digitalcurrency.AskBid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskBid::CopyFrom(const AskBid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:digitalcurrency.AskBid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskBid::IsInitialized() const {
  return true;
}

void AskBid::Swap(AskBid* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AskBid::InternalSwap(AskBid* other) {
  using std::swap;
  swap(price_, other->price_);
  swap(amount_, other->amount_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AskBid::GetMetadata() const {
  protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DIterm::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DIterm::kAsksFieldNumber;
const int DIterm::kBidsFieldNumber;
const int DIterm::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DIterm::DIterm()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fcoin_5fquote_2eproto::scc_info_DIterm.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:digitalcurrency.DIterm)
}
DIterm::DIterm(const DIterm& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      asks_(from.asks_),
      bids_(from.bids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:digitalcurrency.DIterm)
}

void DIterm::SharedCtor() {
  timestamp_ = GOOGLE_LONGLONG(0);
}

DIterm::~DIterm() {
  // @@protoc_insertion_point(destructor:digitalcurrency.DIterm)
  SharedDtor();
}

void DIterm::SharedDtor() {
}

void DIterm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DIterm::descriptor() {
  ::protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DIterm& DIterm::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fcoin_5fquote_2eproto::scc_info_DIterm.base);
  return *internal_default_instance();
}


void DIterm::Clear() {
// @@protoc_insertion_point(message_clear_start:digitalcurrency.DIterm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  asks_.Clear();
  bids_.Clear();
  timestamp_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DIterm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:digitalcurrency.DIterm)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .digitalcurrency.AskBid asks = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_asks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .digitalcurrency.AskBid bids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_bids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:digitalcurrency.DIterm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:digitalcurrency.DIterm)
  return false;
#undef DO_
}

void DIterm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:digitalcurrency.DIterm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .digitalcurrency.AskBid asks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->asks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->asks(static_cast<int>(i)),
      output);
  }

  // repeated .digitalcurrency.AskBid bids = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bids_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->bids(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:digitalcurrency.DIterm)
}

::google::protobuf::uint8* DIterm::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:digitalcurrency.DIterm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .digitalcurrency.AskBid asks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->asks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->asks(static_cast<int>(i)), deterministic, target);
  }

  // repeated .digitalcurrency.AskBid bids = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bids_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->bids(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:digitalcurrency.DIterm)
  return target;
}

size_t DIterm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:digitalcurrency.DIterm)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .digitalcurrency.AskBid asks = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->asks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->asks(static_cast<int>(i)));
    }
  }

  // repeated .digitalcurrency.AskBid bids = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->bids_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->bids(static_cast<int>(i)));
    }
  }

  // optional int64 timestamp = 3;
  if (has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DIterm::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:digitalcurrency.DIterm)
  GOOGLE_DCHECK_NE(&from, this);
  const DIterm* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DIterm>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:digitalcurrency.DIterm)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:digitalcurrency.DIterm)
    MergeFrom(*source);
  }
}

void DIterm::MergeFrom(const DIterm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:digitalcurrency.DIterm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  asks_.MergeFrom(from.asks_);
  bids_.MergeFrom(from.bids_);
  if (from.has_timestamp()) {
    set_timestamp(from.timestamp());
  }
}

void DIterm::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:digitalcurrency.DIterm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DIterm::CopyFrom(const DIterm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:digitalcurrency.DIterm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DIterm::IsInitialized() const {
  return true;
}

void DIterm::Swap(DIterm* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DIterm::InternalSwap(DIterm* other) {
  using std::swap;
  CastToBase(&asks_)->InternalSwap(CastToBase(&other->asks_));
  CastToBase(&bids_)->InternalSwap(CastToBase(&other->bids_));
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DIterm::GetMetadata() const {
  protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DepthItem::InitAsDefaultInstance() {
  ::digitalcurrency::_DepthItem_default_instance_._instance.get_mutable()->diterm_ = const_cast< ::digitalcurrency::DIterm*>(
      ::digitalcurrency::DIterm::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DepthItem::kChannelFieldNumber;
const int DepthItem::kTpairFieldNumber;
const int DepthItem::kDitermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DepthItem::DepthItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fcoin_5fquote_2eproto::scc_info_DepthItem.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:digitalcurrency.DepthItem)
}
DepthItem::DepthItem(const DepthItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_channel()) {
    channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  if (from.has_diterm()) {
    diterm_ = new ::digitalcurrency::DIterm(*from.diterm_);
  } else {
    diterm_ = NULL;
  }
  tpair_ = from.tpair_;
  // @@protoc_insertion_point(copy_constructor:digitalcurrency.DepthItem)
}

void DepthItem::SharedCtor() {
  channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&diterm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tpair_) -
      reinterpret_cast<char*>(&diterm_)) + sizeof(tpair_));
}

DepthItem::~DepthItem() {
  // @@protoc_insertion_point(destructor:digitalcurrency.DepthItem)
  SharedDtor();
}

void DepthItem::SharedDtor() {
  channel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete diterm_;
}

void DepthItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DepthItem::descriptor() {
  ::protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DepthItem& DepthItem::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fcoin_5fquote_2eproto::scc_info_DepthItem.base);
  return *internal_default_instance();
}


void DepthItem::Clear() {
// @@protoc_insertion_point(message_clear_start:digitalcurrency.DepthItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      channel_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(diterm_ != NULL);
      diterm_->Clear();
    }
  }
  tpair_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DepthItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:digitalcurrency.DepthItem)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string channel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel().data(), static_cast<int>(this->channel().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "digitalcurrency.DepthItem.channel");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .digitalcurrency.TradingPair tpair = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::digitalcurrency::TradingPair_IsValid(value)) {
            set_tpair(static_cast< ::digitalcurrency::TradingPair >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .digitalcurrency.DIterm diterm = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_diterm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:digitalcurrency.DepthItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:digitalcurrency.DepthItem)
  return false;
#undef DO_
}

void DepthItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:digitalcurrency.DepthItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string channel = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "digitalcurrency.DepthItem.channel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channel(), output);
  }

  // optional .digitalcurrency.TradingPair tpair = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->tpair(), output);
  }

  // optional .digitalcurrency.DIterm diterm = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_diterm(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:digitalcurrency.DepthItem)
}

::google::protobuf::uint8* DepthItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:digitalcurrency.DepthItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string channel = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "digitalcurrency.DepthItem.channel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel(), target);
  }

  // optional .digitalcurrency.TradingPair tpair = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->tpair(), target);
  }

  // optional .digitalcurrency.DIterm diterm = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_diterm(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:digitalcurrency.DepthItem)
  return target;
}

size_t DepthItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:digitalcurrency.DepthItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

    // optional .digitalcurrency.DIterm diterm = 3;
    if (has_diterm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *diterm_);
    }

    // optional .digitalcurrency.TradingPair tpair = 2;
    if (has_tpair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tpair());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DepthItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:digitalcurrency.DepthItem)
  GOOGLE_DCHECK_NE(&from, this);
  const DepthItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DepthItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:digitalcurrency.DepthItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:digitalcurrency.DepthItem)
    MergeFrom(*source);
  }
}

void DepthItem::MergeFrom(const DepthItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:digitalcurrency.DepthItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_channel();
      channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_diterm()->::digitalcurrency::DIterm::MergeFrom(from.diterm());
    }
    if (cached_has_bits & 0x00000004u) {
      tpair_ = from.tpair_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DepthItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:digitalcurrency.DepthItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepthItem::CopyFrom(const DepthItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:digitalcurrency.DepthItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepthItem::IsInitialized() const {
  return true;
}

void DepthItem::Swap(DepthItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DepthItem::InternalSwap(DepthItem* other) {
  using std::swap;
  channel_.Swap(&other->channel_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(diterm_, other->diterm_);
  swap(tpair_, other->tpair_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DepthItem::GetMetadata() const {
  protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DepthData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DepthData::kExchangeFieldNumber;
const int DepthData::kDepthsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DepthData::DepthData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fcoin_5fquote_2eproto::scc_info_DepthData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:digitalcurrency.DepthData)
}
DepthData::DepthData(const DepthData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      depths_(from.depths_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  exchange_ = from.exchange_;
  // @@protoc_insertion_point(copy_constructor:digitalcurrency.DepthData)
}

void DepthData::SharedCtor() {
  exchange_ = 0;
}

DepthData::~DepthData() {
  // @@protoc_insertion_point(destructor:digitalcurrency.DepthData)
  SharedDtor();
}

void DepthData::SharedDtor() {
}

void DepthData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DepthData::descriptor() {
  ::protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DepthData& DepthData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fcoin_5fquote_2eproto::scc_info_DepthData.base);
  return *internal_default_instance();
}


void DepthData::Clear() {
// @@protoc_insertion_point(message_clear_start:digitalcurrency.DepthData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  depths_.Clear();
  exchange_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DepthData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:digitalcurrency.DepthData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .digitalcurrency.Exchange exchange = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::digitalcurrency::Exchange_IsValid(value)) {
            set_exchange(static_cast< ::digitalcurrency::Exchange >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .digitalcurrency.DepthItem depths = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_depths()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:digitalcurrency.DepthData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:digitalcurrency.DepthData)
  return false;
#undef DO_
}

void DepthData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:digitalcurrency.DepthData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .digitalcurrency.Exchange exchange = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->exchange(), output);
  }

  // repeated .digitalcurrency.DepthItem depths = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->depths_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->depths(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:digitalcurrency.DepthData)
}

::google::protobuf::uint8* DepthData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:digitalcurrency.DepthData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .digitalcurrency.Exchange exchange = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->exchange(), target);
  }

  // repeated .digitalcurrency.DepthItem depths = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->depths_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->depths(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:digitalcurrency.DepthData)
  return target;
}

size_t DepthData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:digitalcurrency.DepthData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .digitalcurrency.DepthItem depths = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->depths_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->depths(static_cast<int>(i)));
    }
  }

  // optional .digitalcurrency.Exchange exchange = 1;
  if (has_exchange()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->exchange());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DepthData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:digitalcurrency.DepthData)
  GOOGLE_DCHECK_NE(&from, this);
  const DepthData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DepthData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:digitalcurrency.DepthData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:digitalcurrency.DepthData)
    MergeFrom(*source);
  }
}

void DepthData::MergeFrom(const DepthData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:digitalcurrency.DepthData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  depths_.MergeFrom(from.depths_);
  if (from.has_exchange()) {
    set_exchange(from.exchange());
  }
}

void DepthData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:digitalcurrency.DepthData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepthData::CopyFrom(const DepthData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:digitalcurrency.DepthData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepthData::IsInitialized() const {
  return true;
}

void DepthData::Swap(DepthData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DepthData::InternalSwap(DepthData* other) {
  using std::swap;
  CastToBase(&depths_)->InternalSwap(CastToBase(&other->depths_));
  swap(exchange_, other->exchange_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DepthData::GetMetadata() const {
  protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TradeData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradeData::kPriceFieldNumber;
const int TradeData::kAmountFieldNumber;
const int TradeData::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradeData::TradeData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fcoin_5fquote_2eproto::scc_info_TradeData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:digitalcurrency.TradeData)
}
TradeData::TradeData(const TradeData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&price_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:digitalcurrency.TradeData)
}

void TradeData::SharedCtor() {
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&price_)) + sizeof(timestamp_));
}

TradeData::~TradeData() {
  // @@protoc_insertion_point(destructor:digitalcurrency.TradeData)
  SharedDtor();
}

void TradeData::SharedDtor() {
}

void TradeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TradeData::descriptor() {
  ::protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TradeData& TradeData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fcoin_5fquote_2eproto::scc_info_TradeData.base);
  return *internal_default_instance();
}


void TradeData::Clear() {
// @@protoc_insertion_point(message_clear_start:digitalcurrency.TradeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&price_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TradeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:digitalcurrency.TradeData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double price = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double amount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:digitalcurrency.TradeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:digitalcurrency.TradeData)
  return false;
#undef DO_
}

void TradeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:digitalcurrency.TradeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double price = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->price(), output);
  }

  // optional double amount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->amount(), output);
  }

  // optional int64 timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:digitalcurrency.TradeData)
}

::google::protobuf::uint8* TradeData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:digitalcurrency.TradeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double price = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->price(), target);
  }

  // optional double amount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->amount(), target);
  }

  // optional int64 timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:digitalcurrency.TradeData)
  return target;
}

size_t TradeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:digitalcurrency.TradeData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional double price = 1;
    if (has_price()) {
      total_size += 1 + 8;
    }

    // optional double amount = 2;
    if (has_amount()) {
      total_size += 1 + 8;
    }

    // optional int64 timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradeData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:digitalcurrency.TradeData)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TradeData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:digitalcurrency.TradeData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:digitalcurrency.TradeData)
    MergeFrom(*source);
  }
}

void TradeData::MergeFrom(const TradeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:digitalcurrency.TradeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000002u) {
      amount_ = from.amount_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TradeData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:digitalcurrency.TradeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeData::CopyFrom(const TradeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:digitalcurrency.TradeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeData::IsInitialized() const {
  return true;
}

void TradeData::Swap(TradeData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TradeData::InternalSwap(TradeData* other) {
  using std::swap;
  swap(price_, other->price_);
  swap(amount_, other->amount_);
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TradeData::GetMetadata() const {
  protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void KlineData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KlineData::kOpenTimeFieldNumber;
const int KlineData::kOpenPriceFieldNumber;
const int KlineData::kHighPriceFieldNumber;
const int KlineData::kLowPriceFieldNumber;
const int KlineData::kClosePriceFieldNumber;
const int KlineData::kCloseTimeFieldNumber;
const int KlineData::kVolumnFieldNumber;
const int KlineData::kNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KlineData::KlineData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fcoin_5fquote_2eproto::scc_info_KlineData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:digitalcurrency.KlineData)
}
KlineData::KlineData(const KlineData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&open_time_, &from.open_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_) -
    reinterpret_cast<char*>(&open_time_)) + sizeof(number_));
  // @@protoc_insertion_point(copy_constructor:digitalcurrency.KlineData)
}

void KlineData::SharedCtor() {
  ::memset(&open_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_) -
      reinterpret_cast<char*>(&open_time_)) + sizeof(number_));
}

KlineData::~KlineData() {
  // @@protoc_insertion_point(destructor:digitalcurrency.KlineData)
  SharedDtor();
}

void KlineData::SharedDtor() {
}

void KlineData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* KlineData::descriptor() {
  ::protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KlineData& KlineData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fcoin_5fquote_2eproto::scc_info_KlineData.base);
  return *internal_default_instance();
}


void KlineData::Clear() {
// @@protoc_insertion_point(message_clear_start:digitalcurrency.KlineData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&open_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_) -
        reinterpret_cast<char*>(&open_time_)) + sizeof(number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool KlineData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:digitalcurrency.KlineData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 open_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_open_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &open_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double open_price = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_open_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &open_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double high_price = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_high_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &high_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double low_price = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_low_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &low_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double close_price = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_close_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &close_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 close_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_close_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &close_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double volumn = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_volumn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volumn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 number = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:digitalcurrency.KlineData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:digitalcurrency.KlineData)
  return false;
#undef DO_
}

void KlineData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:digitalcurrency.KlineData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 open_time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->open_time(), output);
  }

  // optional double open_price = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->open_price(), output);
  }

  // optional double high_price = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->high_price(), output);
  }

  // optional double low_price = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->low_price(), output);
  }

  // optional double close_price = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->close_price(), output);
  }

  // optional int64 close_time = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->close_time(), output);
  }

  // optional double volumn = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->volumn(), output);
  }

  // optional int64 number = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->number(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:digitalcurrency.KlineData)
}

::google::protobuf::uint8* KlineData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:digitalcurrency.KlineData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 open_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->open_time(), target);
  }

  // optional double open_price = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->open_price(), target);
  }

  // optional double high_price = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->high_price(), target);
  }

  // optional double low_price = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->low_price(), target);
  }

  // optional double close_price = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->close_price(), target);
  }

  // optional int64 close_time = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->close_time(), target);
  }

  // optional double volumn = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->volumn(), target);
  }

  // optional int64 number = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->number(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:digitalcurrency.KlineData)
  return target;
}

size_t KlineData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:digitalcurrency.KlineData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional int64 open_time = 1;
    if (has_open_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->open_time());
    }

    // optional double open_price = 2;
    if (has_open_price()) {
      total_size += 1 + 8;
    }

    // optional double high_price = 3;
    if (has_high_price()) {
      total_size += 1 + 8;
    }

    // optional double low_price = 4;
    if (has_low_price()) {
      total_size += 1 + 8;
    }

    // optional double close_price = 5;
    if (has_close_price()) {
      total_size += 1 + 8;
    }

    // optional int64 close_time = 6;
    if (has_close_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->close_time());
    }

    // optional double volumn = 7;
    if (has_volumn()) {
      total_size += 1 + 8;
    }

    // optional int64 number = 8;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->number());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KlineData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:digitalcurrency.KlineData)
  GOOGLE_DCHECK_NE(&from, this);
  const KlineData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KlineData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:digitalcurrency.KlineData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:digitalcurrency.KlineData)
    MergeFrom(*source);
  }
}

void KlineData::MergeFrom(const KlineData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:digitalcurrency.KlineData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      open_time_ = from.open_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      open_price_ = from.open_price_;
    }
    if (cached_has_bits & 0x00000004u) {
      high_price_ = from.high_price_;
    }
    if (cached_has_bits & 0x00000008u) {
      low_price_ = from.low_price_;
    }
    if (cached_has_bits & 0x00000010u) {
      close_price_ = from.close_price_;
    }
    if (cached_has_bits & 0x00000020u) {
      close_time_ = from.close_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      volumn_ = from.volumn_;
    }
    if (cached_has_bits & 0x00000080u) {
      number_ = from.number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KlineData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:digitalcurrency.KlineData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KlineData::CopyFrom(const KlineData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:digitalcurrency.KlineData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KlineData::IsInitialized() const {
  return true;
}

void KlineData::Swap(KlineData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KlineData::InternalSwap(KlineData* other) {
  using std::swap;
  swap(open_time_, other->open_time_);
  swap(open_price_, other->open_price_);
  swap(high_price_, other->high_price_);
  swap(low_price_, other->low_price_);
  swap(close_price_, other->close_price_);
  swap(close_time_, other->close_time_);
  swap(volumn_, other->volumn_);
  swap(number_, other->number_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata KlineData::GetMetadata() const {
  protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PriceData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PriceData::kTpairFieldNumber;
const int PriceData::kPriceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PriceData::PriceData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fcoin_5fquote_2eproto::scc_info_PriceData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:digitalcurrency.PriceData)
}
PriceData::PriceData(const PriceData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&tpair_) -
    reinterpret_cast<char*>(&price_)) + sizeof(tpair_));
  // @@protoc_insertion_point(copy_constructor:digitalcurrency.PriceData)
}

void PriceData::SharedCtor() {
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tpair_) -
      reinterpret_cast<char*>(&price_)) + sizeof(tpair_));
}

PriceData::~PriceData() {
  // @@protoc_insertion_point(destructor:digitalcurrency.PriceData)
  SharedDtor();
}

void PriceData::SharedDtor() {
}

void PriceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PriceData::descriptor() {
  ::protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PriceData& PriceData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fcoin_5fquote_2eproto::scc_info_PriceData.base);
  return *internal_default_instance();
}


void PriceData::Clear() {
// @@protoc_insertion_point(message_clear_start:digitalcurrency.PriceData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tpair_) -
        reinterpret_cast<char*>(&price_)) + sizeof(tpair_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PriceData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:digitalcurrency.PriceData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .digitalcurrency.TradingPair tpair = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::digitalcurrency::TradingPair_IsValid(value)) {
            set_tpair(static_cast< ::digitalcurrency::TradingPair >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double price = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:digitalcurrency.PriceData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:digitalcurrency.PriceData)
  return false;
#undef DO_
}

void PriceData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:digitalcurrency.PriceData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .digitalcurrency.TradingPair tpair = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->tpair(), output);
  }

  // required double price = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->price(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:digitalcurrency.PriceData)
}

::google::protobuf::uint8* PriceData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:digitalcurrency.PriceData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .digitalcurrency.TradingPair tpair = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->tpair(), target);
  }

  // required double price = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->price(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:digitalcurrency.PriceData)
  return target;
}

size_t PriceData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:digitalcurrency.PriceData)
  size_t total_size = 0;

  if (has_price()) {
    // required double price = 2;
    total_size += 1 + 8;
  }

  if (has_tpair()) {
    // required .digitalcurrency.TradingPair tpair = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tpair());
  }

  return total_size;
}
size_t PriceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:digitalcurrency.PriceData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double price = 2;
    total_size += 1 + 8;

    // required .digitalcurrency.TradingPair tpair = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tpair());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PriceData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:digitalcurrency.PriceData)
  GOOGLE_DCHECK_NE(&from, this);
  const PriceData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PriceData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:digitalcurrency.PriceData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:digitalcurrency.PriceData)
    MergeFrom(*source);
  }
}

void PriceData::MergeFrom(const PriceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:digitalcurrency.PriceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000002u) {
      tpair_ = from.tpair_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PriceData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:digitalcurrency.PriceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PriceData::CopyFrom(const PriceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:digitalcurrency.PriceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void PriceData::Swap(PriceData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PriceData::InternalSwap(PriceData* other) {
  using std::swap;
  swap(price_, other->price_);
  swap(tpair_, other->tpair_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PriceData::GetMetadata() const {
  protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OrderData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderData::kOrderIdFieldNumber;
const int OrderData::kStatusFieldNumber;
const int OrderData::kExchangeFieldNumber;
const int OrderData::kAmountFieldNumber;
const int OrderData::kPriceFieldNumber;
const int OrderData::kDealAmountFieldNumber;
const int OrderData::kAvgPriceFieldNumber;
const int OrderData::kOrderTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderData::OrderData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fcoin_5fquote_2eproto::scc_info_OrderData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:digitalcurrency.OrderData)
}
OrderData::OrderData(const OrderData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&order_id_, &from.order_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&order_type_) -
    reinterpret_cast<char*>(&order_id_)) + sizeof(order_type_));
  // @@protoc_insertion_point(copy_constructor:digitalcurrency.OrderData)
}

void OrderData::SharedCtor() {
  ::memset(&order_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exchange_) -
      reinterpret_cast<char*>(&order_id_)) + sizeof(exchange_));
  status_ = 1;
  order_type_ = 1;
}

OrderData::~OrderData() {
  // @@protoc_insertion_point(destructor:digitalcurrency.OrderData)
  SharedDtor();
}

void OrderData::SharedDtor() {
}

void OrderData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OrderData::descriptor() {
  ::protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OrderData& OrderData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fcoin_5fquote_2eproto::scc_info_OrderData.base);
  return *internal_default_instance();
}


void OrderData::Clear() {
// @@protoc_insertion_point(message_clear_start:digitalcurrency.OrderData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&order_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&exchange_) -
        reinterpret_cast<char*>(&order_id_)) + sizeof(exchange_));
    status_ = 1;
    order_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OrderData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:digitalcurrency.OrderData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 order_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_order_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &order_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .digitalcurrency.OrderStatus status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::digitalcurrency::OrderStatus_IsValid(value)) {
            set_status(static_cast< ::digitalcurrency::OrderStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .digitalcurrency.Exchange exchange = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::digitalcurrency::Exchange_IsValid(value)) {
            set_exchange(static_cast< ::digitalcurrency::Exchange >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double amount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double price = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double deal_amount = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_deal_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &deal_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double avg_price = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_avg_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &avg_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .digitalcurrency.TradeType order_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::digitalcurrency::TradeType_IsValid(value)) {
            set_order_type(static_cast< ::digitalcurrency::TradeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:digitalcurrency.OrderData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:digitalcurrency.OrderData)
  return false;
#undef DO_
}

void OrderData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:digitalcurrency.OrderData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 order_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->order_id(), output);
  }

  // required .digitalcurrency.OrderStatus status = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // required .digitalcurrency.Exchange exchange = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->exchange(), output);
  }

  // required double amount = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->amount(), output);
  }

  // required double price = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->price(), output);
  }

  // required double deal_amount = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->deal_amount(), output);
  }

  // required double avg_price = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->avg_price(), output);
  }

  // required .digitalcurrency.TradeType order_type = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->order_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:digitalcurrency.OrderData)
}

::google::protobuf::uint8* OrderData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:digitalcurrency.OrderData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 order_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->order_id(), target);
  }

  // required .digitalcurrency.OrderStatus status = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // required .digitalcurrency.Exchange exchange = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->exchange(), target);
  }

  // required double amount = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->amount(), target);
  }

  // required double price = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->price(), target);
  }

  // required double deal_amount = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->deal_amount(), target);
  }

  // required double avg_price = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->avg_price(), target);
  }

  // required .digitalcurrency.TradeType order_type = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->order_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:digitalcurrency.OrderData)
  return target;
}

size_t OrderData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:digitalcurrency.OrderData)
  size_t total_size = 0;

  if (has_order_id()) {
    // required int64 order_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->order_id());
  }

  if (has_amount()) {
    // required double amount = 4;
    total_size += 1 + 8;
  }

  if (has_price()) {
    // required double price = 5;
    total_size += 1 + 8;
  }

  if (has_deal_amount()) {
    // required double deal_amount = 6;
    total_size += 1 + 8;
  }

  if (has_avg_price()) {
    // required double avg_price = 7;
    total_size += 1 + 8;
  }

  if (has_exchange()) {
    // required .digitalcurrency.Exchange exchange = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->exchange());
  }

  if (has_status()) {
    // required .digitalcurrency.OrderStatus status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  if (has_order_type()) {
    // required .digitalcurrency.TradeType order_type = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->order_type());
  }

  return total_size;
}
size_t OrderData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:digitalcurrency.OrderData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required int64 order_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->order_id());

    // required double amount = 4;
    total_size += 1 + 8;

    // required double price = 5;
    total_size += 1 + 8;

    // required double deal_amount = 6;
    total_size += 1 + 8;

    // required double avg_price = 7;
    total_size += 1 + 8;

    // required .digitalcurrency.Exchange exchange = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->exchange());

    // required .digitalcurrency.OrderStatus status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

    // required .digitalcurrency.TradeType order_type = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->order_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:digitalcurrency.OrderData)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OrderData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:digitalcurrency.OrderData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:digitalcurrency.OrderData)
    MergeFrom(*source);
  }
}

void OrderData::MergeFrom(const OrderData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:digitalcurrency.OrderData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      order_id_ = from.order_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      amount_ = from.amount_;
    }
    if (cached_has_bits & 0x00000004u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000008u) {
      deal_amount_ = from.deal_amount_;
    }
    if (cached_has_bits & 0x00000010u) {
      avg_price_ = from.avg_price_;
    }
    if (cached_has_bits & 0x00000020u) {
      exchange_ = from.exchange_;
    }
    if (cached_has_bits & 0x00000040u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000080u) {
      order_type_ = from.order_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OrderData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:digitalcurrency.OrderData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderData::CopyFrom(const OrderData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:digitalcurrency.OrderData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderData::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  return true;
}

void OrderData::Swap(OrderData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderData::InternalSwap(OrderData* other) {
  using std::swap;
  swap(order_id_, other->order_id_);
  swap(amount_, other->amount_);
  swap(price_, other->price_);
  swap(deal_amount_, other->deal_amount_);
  swap(avg_price_, other->avg_price_);
  swap(exchange_, other->exchange_);
  swap(status_, other->status_);
  swap(order_type_, other->order_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OrderData::GetMetadata() const {
  protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqDepth::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqDepth::kExchangeFieldNumber;
const int ReqDepth::kTpairFieldNumber;
const int ReqDepth::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqDepth::ReqDepth()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fcoin_5fquote_2eproto::scc_info_ReqDepth.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:digitalcurrency.ReqDepth)
}
ReqDepth::ReqDepth(const ReqDepth& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&exchange_, &from.exchange_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&exchange_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:digitalcurrency.ReqDepth)
}

void ReqDepth::SharedCtor() {
  ::memset(&exchange_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&exchange_)) + sizeof(limit_));
}

ReqDepth::~ReqDepth() {
  // @@protoc_insertion_point(destructor:digitalcurrency.ReqDepth)
  SharedDtor();
}

void ReqDepth::SharedDtor() {
}

void ReqDepth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqDepth::descriptor() {
  ::protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqDepth& ReqDepth::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fcoin_5fquote_2eproto::scc_info_ReqDepth.base);
  return *internal_default_instance();
}


void ReqDepth::Clear() {
// @@protoc_insertion_point(message_clear_start:digitalcurrency.ReqDepth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&exchange_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&limit_) -
        reinterpret_cast<char*>(&exchange_)) + sizeof(limit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqDepth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:digitalcurrency.ReqDepth)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .digitalcurrency.Exchange exchange = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::digitalcurrency::Exchange_IsValid(value)) {
            set_exchange(static_cast< ::digitalcurrency::Exchange >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .digitalcurrency.TradingPair tpair = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::digitalcurrency::TradingPair_IsValid(value)) {
            set_tpair(static_cast< ::digitalcurrency::TradingPair >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 limit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:digitalcurrency.ReqDepth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:digitalcurrency.ReqDepth)
  return false;
#undef DO_
}

void ReqDepth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:digitalcurrency.ReqDepth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .digitalcurrency.Exchange exchange = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->exchange(), output);
  }

  // required .digitalcurrency.TradingPair tpair = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->tpair(), output);
  }

  // optional int64 limit = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:digitalcurrency.ReqDepth)
}

::google::protobuf::uint8* ReqDepth::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:digitalcurrency.ReqDepth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .digitalcurrency.Exchange exchange = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->exchange(), target);
  }

  // required .digitalcurrency.TradingPair tpair = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->tpair(), target);
  }

  // optional int64 limit = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:digitalcurrency.ReqDepth)
  return target;
}

size_t ReqDepth::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:digitalcurrency.ReqDepth)
  size_t total_size = 0;

  if (has_exchange()) {
    // required .digitalcurrency.Exchange exchange = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->exchange());
  }

  if (has_tpair()) {
    // required .digitalcurrency.TradingPair tpair = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tpair());
  }

  return total_size;
}
size_t ReqDepth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:digitalcurrency.ReqDepth)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .digitalcurrency.Exchange exchange = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->exchange());

    // required .digitalcurrency.TradingPair tpair = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tpair());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int64 limit = 3;
  if (has_limit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqDepth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:digitalcurrency.ReqDepth)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqDepth* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqDepth>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:digitalcurrency.ReqDepth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:digitalcurrency.ReqDepth)
    MergeFrom(*source);
  }
}

void ReqDepth::MergeFrom(const ReqDepth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:digitalcurrency.ReqDepth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      exchange_ = from.exchange_;
    }
    if (cached_has_bits & 0x00000002u) {
      tpair_ = from.tpair_;
    }
    if (cached_has_bits & 0x00000004u) {
      limit_ = from.limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReqDepth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:digitalcurrency.ReqDepth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqDepth::CopyFrom(const ReqDepth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:digitalcurrency.ReqDepth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDepth::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ReqDepth::Swap(ReqDepth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqDepth::InternalSwap(ReqDepth* other) {
  using std::swap;
  swap(exchange_, other->exchange_);
  swap(tpair_, other->tpair_);
  swap(limit_, other->limit_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqDepth::GetMetadata() const {
  protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RespDepth::InitAsDefaultInstance() {
  ::digitalcurrency::_RespDepth_default_instance_._instance.get_mutable()->depth_data_ = const_cast< ::digitalcurrency::DepthData*>(
      ::digitalcurrency::DepthData::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RespDepth::kErrorCodeFieldNumber;
const int RespDepth::kDepthDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RespDepth::RespDepth()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fcoin_5fquote_2eproto::scc_info_RespDepth.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:digitalcurrency.RespDepth)
}
RespDepth::RespDepth(const RespDepth& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_depth_data()) {
    depth_data_ = new ::digitalcurrency::DepthData(*from.depth_data_);
  } else {
    depth_data_ = NULL;
  }
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:digitalcurrency.RespDepth)
}

void RespDepth::SharedCtor() {
  ::memset(&depth_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&depth_data_)) + sizeof(error_code_));
}

RespDepth::~RespDepth() {
  // @@protoc_insertion_point(destructor:digitalcurrency.RespDepth)
  SharedDtor();
}

void RespDepth::SharedDtor() {
  if (this != internal_default_instance()) delete depth_data_;
}

void RespDepth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RespDepth::descriptor() {
  ::protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RespDepth& RespDepth::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fcoin_5fquote_2eproto::scc_info_RespDepth.base);
  return *internal_default_instance();
}


void RespDepth::Clear() {
// @@protoc_insertion_point(message_clear_start:digitalcurrency.RespDepth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(depth_data_ != NULL);
    depth_data_->Clear();
  }
  error_code_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RespDepth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:digitalcurrency.RespDepth)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 error_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_error_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .digitalcurrency.DepthData depth_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_depth_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:digitalcurrency.RespDepth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:digitalcurrency.RespDepth)
  return false;
#undef DO_
}

void RespDepth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:digitalcurrency.RespDepth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 error_code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->error_code(), output);
  }

  // required .digitalcurrency.DepthData depth_data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_depth_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:digitalcurrency.RespDepth)
}

::google::protobuf::uint8* RespDepth::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:digitalcurrency.RespDepth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 error_code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->error_code(), target);
  }

  // required .digitalcurrency.DepthData depth_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_depth_data(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:digitalcurrency.RespDepth)
  return target;
}

size_t RespDepth::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:digitalcurrency.RespDepth)
  size_t total_size = 0;

  if (has_depth_data()) {
    // required .digitalcurrency.DepthData depth_data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *depth_data_);
  }

  if (has_error_code()) {
    // required int64 error_code = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->error_code());
  }

  return total_size;
}
size_t RespDepth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:digitalcurrency.RespDepth)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .digitalcurrency.DepthData depth_data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *depth_data_);

    // required int64 error_code = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->error_code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RespDepth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:digitalcurrency.RespDepth)
  GOOGLE_DCHECK_NE(&from, this);
  const RespDepth* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RespDepth>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:digitalcurrency.RespDepth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:digitalcurrency.RespDepth)
    MergeFrom(*source);
  }
}

void RespDepth::MergeFrom(const RespDepth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:digitalcurrency.RespDepth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_depth_data()->::digitalcurrency::DepthData::MergeFrom(from.depth_data());
    }
    if (cached_has_bits & 0x00000002u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RespDepth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:digitalcurrency.RespDepth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RespDepth::CopyFrom(const RespDepth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:digitalcurrency.RespDepth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespDepth::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void RespDepth::Swap(RespDepth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RespDepth::InternalSwap(RespDepth* other) {
  using std::swap;
  swap(depth_data_, other->depth_data_);
  swap(error_code_, other->error_code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RespDepth::GetMetadata() const {
  protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqTradeList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqTradeList::kExchangeFieldNumber;
const int ReqTradeList::kTpairFieldNumber;
const int ReqTradeList::kLimitFieldNumber;
const int ReqTradeList::kBeginTimeFieldNumber;
const int ReqTradeList::kEndTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqTradeList::ReqTradeList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fcoin_5fquote_2eproto::scc_info_ReqTradeList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:digitalcurrency.ReqTradeList)
}
ReqTradeList::ReqTradeList(const ReqTradeList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&exchange_, &from.exchange_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&exchange_)) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:digitalcurrency.ReqTradeList)
}

void ReqTradeList::SharedCtor() {
  ::memset(&exchange_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&exchange_)) + sizeof(end_time_));
}

ReqTradeList::~ReqTradeList() {
  // @@protoc_insertion_point(destructor:digitalcurrency.ReqTradeList)
  SharedDtor();
}

void ReqTradeList::SharedDtor() {
}

void ReqTradeList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqTradeList::descriptor() {
  ::protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqTradeList& ReqTradeList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fcoin_5fquote_2eproto::scc_info_ReqTradeList.base);
  return *internal_default_instance();
}


void ReqTradeList::Clear() {
// @@protoc_insertion_point(message_clear_start:digitalcurrency.ReqTradeList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&exchange_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_time_) -
        reinterpret_cast<char*>(&exchange_)) + sizeof(end_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqTradeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:digitalcurrency.ReqTradeList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .digitalcurrency.Exchange exchange = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::digitalcurrency::Exchange_IsValid(value)) {
            set_exchange(static_cast< ::digitalcurrency::Exchange >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .digitalcurrency.TradingPair tpair = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::digitalcurrency::TradingPair_IsValid(value)) {
            set_tpair(static_cast< ::digitalcurrency::TradingPair >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 limit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 begin_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_begin_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begin_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 end_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_end_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:digitalcurrency.ReqTradeList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:digitalcurrency.ReqTradeList)
  return false;
#undef DO_
}

void ReqTradeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:digitalcurrency.ReqTradeList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .digitalcurrency.Exchange exchange = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->exchange(), output);
  }

  // required .digitalcurrency.TradingPair tpair = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->tpair(), output);
  }

  // optional int64 limit = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->limit(), output);
  }

  // optional int64 begin_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->begin_time(), output);
  }

  // optional int64 end_time = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->end_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:digitalcurrency.ReqTradeList)
}

::google::protobuf::uint8* ReqTradeList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:digitalcurrency.ReqTradeList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .digitalcurrency.Exchange exchange = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->exchange(), target);
  }

  // required .digitalcurrency.TradingPair tpair = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->tpair(), target);
  }

  // optional int64 limit = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->limit(), target);
  }

  // optional int64 begin_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->begin_time(), target);
  }

  // optional int64 end_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->end_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:digitalcurrency.ReqTradeList)
  return target;
}

size_t ReqTradeList::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:digitalcurrency.ReqTradeList)
  size_t total_size = 0;

  if (has_exchange()) {
    // required .digitalcurrency.Exchange exchange = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->exchange());
  }

  if (has_tpair()) {
    // required .digitalcurrency.TradingPair tpair = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tpair());
  }

  return total_size;
}
size_t ReqTradeList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:digitalcurrency.ReqTradeList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .digitalcurrency.Exchange exchange = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->exchange());

    // required .digitalcurrency.TradingPair tpair = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tpair());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 28u) {
    // optional int64 limit = 3;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->limit());
    }

    // optional int64 begin_time = 4;
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begin_time());
    }

    // optional int64 end_time = 5;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqTradeList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:digitalcurrency.ReqTradeList)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqTradeList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqTradeList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:digitalcurrency.ReqTradeList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:digitalcurrency.ReqTradeList)
    MergeFrom(*source);
  }
}

void ReqTradeList::MergeFrom(const ReqTradeList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:digitalcurrency.ReqTradeList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      exchange_ = from.exchange_;
    }
    if (cached_has_bits & 0x00000002u) {
      tpair_ = from.tpair_;
    }
    if (cached_has_bits & 0x00000004u) {
      limit_ = from.limit_;
    }
    if (cached_has_bits & 0x00000008u) {
      begin_time_ = from.begin_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      end_time_ = from.end_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReqTradeList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:digitalcurrency.ReqTradeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqTradeList::CopyFrom(const ReqTradeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:digitalcurrency.ReqTradeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqTradeList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ReqTradeList::Swap(ReqTradeList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqTradeList::InternalSwap(ReqTradeList* other) {
  using std::swap;
  swap(exchange_, other->exchange_);
  swap(tpair_, other->tpair_);
  swap(limit_, other->limit_);
  swap(begin_time_, other->begin_time_);
  swap(end_time_, other->end_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqTradeList::GetMetadata() const {
  protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RespTradeList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RespTradeList::kErrorCodeFieldNumber;
const int RespTradeList::kTradeDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RespTradeList::RespTradeList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fcoin_5fquote_2eproto::scc_info_RespTradeList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:digitalcurrency.RespTradeList)
}
RespTradeList::RespTradeList(const RespTradeList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      trade_data_(from.trade_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:digitalcurrency.RespTradeList)
}

void RespTradeList::SharedCtor() {
  error_code_ = GOOGLE_LONGLONG(0);
}

RespTradeList::~RespTradeList() {
  // @@protoc_insertion_point(destructor:digitalcurrency.RespTradeList)
  SharedDtor();
}

void RespTradeList::SharedDtor() {
}

void RespTradeList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RespTradeList::descriptor() {
  ::protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RespTradeList& RespTradeList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fcoin_5fquote_2eproto::scc_info_RespTradeList.base);
  return *internal_default_instance();
}


void RespTradeList::Clear() {
// @@protoc_insertion_point(message_clear_start:digitalcurrency.RespTradeList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trade_data_.Clear();
  error_code_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RespTradeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:digitalcurrency.RespTradeList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 error_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_error_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .digitalcurrency.TradeData trade_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_trade_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:digitalcurrency.RespTradeList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:digitalcurrency.RespTradeList)
  return false;
#undef DO_
}

void RespTradeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:digitalcurrency.RespTradeList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 error_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->error_code(), output);
  }

  // repeated .digitalcurrency.TradeData trade_data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trade_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->trade_data(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:digitalcurrency.RespTradeList)
}

::google::protobuf::uint8* RespTradeList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:digitalcurrency.RespTradeList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 error_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->error_code(), target);
  }

  // repeated .digitalcurrency.TradeData trade_data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trade_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->trade_data(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:digitalcurrency.RespTradeList)
  return target;
}

size_t RespTradeList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:digitalcurrency.RespTradeList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 error_code = 1;
  if (has_error_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->error_code());
  }
  // repeated .digitalcurrency.TradeData trade_data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->trade_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->trade_data(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RespTradeList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:digitalcurrency.RespTradeList)
  GOOGLE_DCHECK_NE(&from, this);
  const RespTradeList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RespTradeList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:digitalcurrency.RespTradeList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:digitalcurrency.RespTradeList)
    MergeFrom(*source);
  }
}

void RespTradeList::MergeFrom(const RespTradeList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:digitalcurrency.RespTradeList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trade_data_.MergeFrom(from.trade_data_);
  if (from.has_error_code()) {
    set_error_code(from.error_code());
  }
}

void RespTradeList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:digitalcurrency.RespTradeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RespTradeList::CopyFrom(const RespTradeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:digitalcurrency.RespTradeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespTradeList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void RespTradeList::Swap(RespTradeList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RespTradeList::InternalSwap(RespTradeList* other) {
  using std::swap;
  CastToBase(&trade_data_)->InternalSwap(CastToBase(&other->trade_data_));
  swap(error_code_, other->error_code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RespTradeList::GetMetadata() const {
  protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqKline::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqKline::kExchangeFieldNumber;
const int ReqKline::kTpairFieldNumber;
const int ReqKline::kKlineTypeFieldNumber;
const int ReqKline::kBeginTimeFieldNumber;
const int ReqKline::kEndTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqKline::ReqKline()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fcoin_5fquote_2eproto::scc_info_ReqKline.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:digitalcurrency.ReqKline)
}
ReqKline::ReqKline(const ReqKline& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&exchange_, &from.exchange_,
    static_cast<size_t>(reinterpret_cast<char*>(&kline_type_) -
    reinterpret_cast<char*>(&exchange_)) + sizeof(kline_type_));
  // @@protoc_insertion_point(copy_constructor:digitalcurrency.ReqKline)
}

void ReqKline::SharedCtor() {
  ::memset(&exchange_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&exchange_)) + sizeof(end_time_));
  kline_type_ = 1;
}

ReqKline::~ReqKline() {
  // @@protoc_insertion_point(destructor:digitalcurrency.ReqKline)
  SharedDtor();
}

void ReqKline::SharedDtor() {
}

void ReqKline::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqKline::descriptor() {
  ::protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqKline& ReqKline::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fcoin_5fquote_2eproto::scc_info_ReqKline.base);
  return *internal_default_instance();
}


void ReqKline::Clear() {
// @@protoc_insertion_point(message_clear_start:digitalcurrency.ReqKline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&exchange_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_time_) -
        reinterpret_cast<char*>(&exchange_)) + sizeof(end_time_));
    kline_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqKline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:digitalcurrency.ReqKline)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .digitalcurrency.Exchange exchange = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::digitalcurrency::Exchange_IsValid(value)) {
            set_exchange(static_cast< ::digitalcurrency::Exchange >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .digitalcurrency.TradingPair tpair = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::digitalcurrency::TradingPair_IsValid(value)) {
            set_tpair(static_cast< ::digitalcurrency::TradingPair >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .digitalcurrency.KlineInterval kline_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::digitalcurrency::KlineInterval_IsValid(value)) {
            set_kline_type(static_cast< ::digitalcurrency::KlineInterval >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 begin_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_begin_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begin_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 end_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_end_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:digitalcurrency.ReqKline)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:digitalcurrency.ReqKline)
  return false;
#undef DO_
}

void ReqKline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:digitalcurrency.ReqKline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .digitalcurrency.Exchange exchange = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->exchange(), output);
  }

  // required .digitalcurrency.TradingPair tpair = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->tpair(), output);
  }

  // required .digitalcurrency.KlineInterval kline_type = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->kline_type(), output);
  }

  // optional int64 begin_time = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->begin_time(), output);
  }

  // optional int64 end_time = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->end_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:digitalcurrency.ReqKline)
}

::google::protobuf::uint8* ReqKline::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:digitalcurrency.ReqKline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .digitalcurrency.Exchange exchange = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->exchange(), target);
  }

  // required .digitalcurrency.TradingPair tpair = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->tpair(), target);
  }

  // required .digitalcurrency.KlineInterval kline_type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->kline_type(), target);
  }

  // optional int64 begin_time = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->begin_time(), target);
  }

  // optional int64 end_time = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->end_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:digitalcurrency.ReqKline)
  return target;
}

size_t ReqKline::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:digitalcurrency.ReqKline)
  size_t total_size = 0;

  if (has_exchange()) {
    // required .digitalcurrency.Exchange exchange = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->exchange());
  }

  if (has_tpair()) {
    // required .digitalcurrency.TradingPair tpair = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tpair());
  }

  if (has_kline_type()) {
    // required .digitalcurrency.KlineInterval kline_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->kline_type());
  }

  return total_size;
}
size_t ReqKline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:digitalcurrency.ReqKline)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000013) ^ 0x00000013) == 0) {  // All required fields are present.
    // required .digitalcurrency.Exchange exchange = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->exchange());

    // required .digitalcurrency.TradingPair tpair = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tpair());

    // required .digitalcurrency.KlineInterval kline_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->kline_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 12u) {
    // optional int64 begin_time = 4;
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begin_time());
    }

    // optional int64 end_time = 5;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqKline::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:digitalcurrency.ReqKline)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqKline* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqKline>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:digitalcurrency.ReqKline)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:digitalcurrency.ReqKline)
    MergeFrom(*source);
  }
}

void ReqKline::MergeFrom(const ReqKline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:digitalcurrency.ReqKline)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      exchange_ = from.exchange_;
    }
    if (cached_has_bits & 0x00000002u) {
      tpair_ = from.tpair_;
    }
    if (cached_has_bits & 0x00000004u) {
      begin_time_ = from.begin_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      end_time_ = from.end_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      kline_type_ = from.kline_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReqKline::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:digitalcurrency.ReqKline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqKline::CopyFrom(const ReqKline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:digitalcurrency.ReqKline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqKline::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;
  return true;
}

void ReqKline::Swap(ReqKline* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqKline::InternalSwap(ReqKline* other) {
  using std::swap;
  swap(exchange_, other->exchange_);
  swap(tpair_, other->tpair_);
  swap(begin_time_, other->begin_time_);
  swap(end_time_, other->end_time_);
  swap(kline_type_, other->kline_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqKline::GetMetadata() const {
  protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RespKline::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RespKline::kErrorCodeFieldNumber;
const int RespKline::kKlineDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RespKline::RespKline()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fcoin_5fquote_2eproto::scc_info_RespKline.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:digitalcurrency.RespKline)
}
RespKline::RespKline(const RespKline& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      kline_data_(from.kline_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:digitalcurrency.RespKline)
}

void RespKline::SharedCtor() {
  error_code_ = GOOGLE_LONGLONG(0);
}

RespKline::~RespKline() {
  // @@protoc_insertion_point(destructor:digitalcurrency.RespKline)
  SharedDtor();
}

void RespKline::SharedDtor() {
}

void RespKline::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RespKline::descriptor() {
  ::protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RespKline& RespKline::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fcoin_5fquote_2eproto::scc_info_RespKline.base);
  return *internal_default_instance();
}


void RespKline::Clear() {
// @@protoc_insertion_point(message_clear_start:digitalcurrency.RespKline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kline_data_.Clear();
  error_code_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RespKline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:digitalcurrency.RespKline)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 error_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_error_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .digitalcurrency.KlineData kline_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_kline_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:digitalcurrency.RespKline)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:digitalcurrency.RespKline)
  return false;
#undef DO_
}

void RespKline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:digitalcurrency.RespKline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 error_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->error_code(), output);
  }

  // repeated .digitalcurrency.KlineData kline_data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->kline_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->kline_data(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:digitalcurrency.RespKline)
}

::google::protobuf::uint8* RespKline::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:digitalcurrency.RespKline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 error_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->error_code(), target);
  }

  // repeated .digitalcurrency.KlineData kline_data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->kline_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->kline_data(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:digitalcurrency.RespKline)
  return target;
}

size_t RespKline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:digitalcurrency.RespKline)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 error_code = 1;
  if (has_error_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->error_code());
  }
  // repeated .digitalcurrency.KlineData kline_data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->kline_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->kline_data(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RespKline::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:digitalcurrency.RespKline)
  GOOGLE_DCHECK_NE(&from, this);
  const RespKline* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RespKline>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:digitalcurrency.RespKline)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:digitalcurrency.RespKline)
    MergeFrom(*source);
  }
}

void RespKline::MergeFrom(const RespKline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:digitalcurrency.RespKline)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  kline_data_.MergeFrom(from.kline_data_);
  if (from.has_error_code()) {
    set_error_code(from.error_code());
  }
}

void RespKline::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:digitalcurrency.RespKline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RespKline::CopyFrom(const RespKline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:digitalcurrency.RespKline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespKline::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void RespKline::Swap(RespKline* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RespKline::InternalSwap(RespKline* other) {
  using std::swap;
  CastToBase(&kline_data_)->InternalSwap(CastToBase(&other->kline_data_));
  swap(error_code_, other->error_code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RespKline::GetMetadata() const {
  protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqPrice::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqPrice::kExchangeFieldNumber;
const int ReqPrice::kTpairFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqPrice::ReqPrice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fcoin_5fquote_2eproto::scc_info_ReqPrice.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:digitalcurrency.ReqPrice)
}
ReqPrice::ReqPrice(const ReqPrice& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&exchange_, &from.exchange_,
    static_cast<size_t>(reinterpret_cast<char*>(&tpair_) -
    reinterpret_cast<char*>(&exchange_)) + sizeof(tpair_));
  // @@protoc_insertion_point(copy_constructor:digitalcurrency.ReqPrice)
}

void ReqPrice::SharedCtor() {
  ::memset(&exchange_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tpair_) -
      reinterpret_cast<char*>(&exchange_)) + sizeof(tpair_));
}

ReqPrice::~ReqPrice() {
  // @@protoc_insertion_point(destructor:digitalcurrency.ReqPrice)
  SharedDtor();
}

void ReqPrice::SharedDtor() {
}

void ReqPrice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqPrice::descriptor() {
  ::protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqPrice& ReqPrice::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fcoin_5fquote_2eproto::scc_info_ReqPrice.base);
  return *internal_default_instance();
}


void ReqPrice::Clear() {
// @@protoc_insertion_point(message_clear_start:digitalcurrency.ReqPrice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&exchange_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tpair_) -
        reinterpret_cast<char*>(&exchange_)) + sizeof(tpair_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqPrice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:digitalcurrency.ReqPrice)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .digitalcurrency.Exchange exchange = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::digitalcurrency::Exchange_IsValid(value)) {
            set_exchange(static_cast< ::digitalcurrency::Exchange >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .digitalcurrency.TradingPair tpair = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::digitalcurrency::TradingPair_IsValid(value)) {
            set_tpair(static_cast< ::digitalcurrency::TradingPair >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:digitalcurrency.ReqPrice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:digitalcurrency.ReqPrice)
  return false;
#undef DO_
}

void ReqPrice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:digitalcurrency.ReqPrice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .digitalcurrency.Exchange exchange = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->exchange(), output);
  }

  // optional .digitalcurrency.TradingPair tpair = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->tpair(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:digitalcurrency.ReqPrice)
}

::google::protobuf::uint8* ReqPrice::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:digitalcurrency.ReqPrice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .digitalcurrency.Exchange exchange = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->exchange(), target);
  }

  // optional .digitalcurrency.TradingPair tpair = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->tpair(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:digitalcurrency.ReqPrice)
  return target;
}

size_t ReqPrice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:digitalcurrency.ReqPrice)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .digitalcurrency.Exchange exchange = 1;
  if (has_exchange()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->exchange());
  }
  // optional .digitalcurrency.TradingPair tpair = 2;
  if (has_tpair()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tpair());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqPrice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:digitalcurrency.ReqPrice)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqPrice* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqPrice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:digitalcurrency.ReqPrice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:digitalcurrency.ReqPrice)
    MergeFrom(*source);
  }
}

void ReqPrice::MergeFrom(const ReqPrice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:digitalcurrency.ReqPrice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      exchange_ = from.exchange_;
    }
    if (cached_has_bits & 0x00000002u) {
      tpair_ = from.tpair_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReqPrice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:digitalcurrency.ReqPrice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqPrice::CopyFrom(const ReqPrice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:digitalcurrency.ReqPrice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqPrice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ReqPrice::Swap(ReqPrice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqPrice::InternalSwap(ReqPrice* other) {
  using std::swap;
  swap(exchange_, other->exchange_);
  swap(tpair_, other->tpair_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqPrice::GetMetadata() const {
  protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RespPrice::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RespPrice::kErrorCodeFieldNumber;
const int RespPrice::kPriceDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RespPrice::RespPrice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fcoin_5fquote_2eproto::scc_info_RespPrice.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:digitalcurrency.RespPrice)
}
RespPrice::RespPrice(const RespPrice& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      price_data_(from.price_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:digitalcurrency.RespPrice)
}

void RespPrice::SharedCtor() {
  error_code_ = GOOGLE_LONGLONG(0);
}

RespPrice::~RespPrice() {
  // @@protoc_insertion_point(destructor:digitalcurrency.RespPrice)
  SharedDtor();
}

void RespPrice::SharedDtor() {
}

void RespPrice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RespPrice::descriptor() {
  ::protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RespPrice& RespPrice::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fcoin_5fquote_2eproto::scc_info_RespPrice.base);
  return *internal_default_instance();
}


void RespPrice::Clear() {
// @@protoc_insertion_point(message_clear_start:digitalcurrency.RespPrice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  price_data_.Clear();
  error_code_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RespPrice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:digitalcurrency.RespPrice)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 error_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_error_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .digitalcurrency.PriceData price_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_price_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:digitalcurrency.RespPrice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:digitalcurrency.RespPrice)
  return false;
#undef DO_
}

void RespPrice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:digitalcurrency.RespPrice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 error_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->error_code(), output);
  }

  // repeated .digitalcurrency.PriceData price_data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->price_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->price_data(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:digitalcurrency.RespPrice)
}

::google::protobuf::uint8* RespPrice::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:digitalcurrency.RespPrice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 error_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->error_code(), target);
  }

  // repeated .digitalcurrency.PriceData price_data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->price_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->price_data(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:digitalcurrency.RespPrice)
  return target;
}

size_t RespPrice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:digitalcurrency.RespPrice)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 error_code = 1;
  if (has_error_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->error_code());
  }
  // repeated .digitalcurrency.PriceData price_data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->price_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->price_data(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RespPrice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:digitalcurrency.RespPrice)
  GOOGLE_DCHECK_NE(&from, this);
  const RespPrice* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RespPrice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:digitalcurrency.RespPrice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:digitalcurrency.RespPrice)
    MergeFrom(*source);
  }
}

void RespPrice::MergeFrom(const RespPrice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:digitalcurrency.RespPrice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  price_data_.MergeFrom(from.price_data_);
  if (from.has_error_code()) {
    set_error_code(from.error_code());
  }
}

void RespPrice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:digitalcurrency.RespPrice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RespPrice::CopyFrom(const RespPrice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:digitalcurrency.RespPrice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespPrice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->price_data())) return false;
  return true;
}

void RespPrice::Swap(RespPrice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RespPrice::InternalSwap(RespPrice* other) {
  using std::swap;
  CastToBase(&price_data_)->InternalSwap(CastToBase(&other->price_data_));
  swap(error_code_, other->error_code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RespPrice::GetMetadata() const {
  protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqNewTrade::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqNewTrade::kExchangeFieldNumber;
const int ReqNewTrade::kTpairFieldNumber;
const int ReqNewTrade::kTtypeFieldNumber;
const int ReqNewTrade::kPriceFieldNumber;
const int ReqNewTrade::kAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqNewTrade::ReqNewTrade()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fcoin_5fquote_2eproto::scc_info_ReqNewTrade.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:digitalcurrency.ReqNewTrade)
}
ReqNewTrade::ReqNewTrade(const ReqNewTrade& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&exchange_, &from.exchange_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttype_) -
    reinterpret_cast<char*>(&exchange_)) + sizeof(ttype_));
  // @@protoc_insertion_point(copy_constructor:digitalcurrency.ReqNewTrade)
}

void ReqNewTrade::SharedCtor() {
  ::memset(&exchange_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) -
      reinterpret_cast<char*>(&exchange_)) + sizeof(amount_));
  ttype_ = 1;
}

ReqNewTrade::~ReqNewTrade() {
  // @@protoc_insertion_point(destructor:digitalcurrency.ReqNewTrade)
  SharedDtor();
}

void ReqNewTrade::SharedDtor() {
}

void ReqNewTrade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqNewTrade::descriptor() {
  ::protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqNewTrade& ReqNewTrade::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fcoin_5fquote_2eproto::scc_info_ReqNewTrade.base);
  return *internal_default_instance();
}


void ReqNewTrade::Clear() {
// @@protoc_insertion_point(message_clear_start:digitalcurrency.ReqNewTrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&exchange_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&amount_) -
        reinterpret_cast<char*>(&exchange_)) + sizeof(amount_));
    ttype_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqNewTrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:digitalcurrency.ReqNewTrade)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .digitalcurrency.Exchange exchange = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::digitalcurrency::Exchange_IsValid(value)) {
            set_exchange(static_cast< ::digitalcurrency::Exchange >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .digitalcurrency.TradingPair tpair = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::digitalcurrency::TradingPair_IsValid(value)) {
            set_tpair(static_cast< ::digitalcurrency::TradingPair >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .digitalcurrency.TradeType ttype = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::digitalcurrency::TradeType_IsValid(value)) {
            set_ttype(static_cast< ::digitalcurrency::TradeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double price = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double amount = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:digitalcurrency.ReqNewTrade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:digitalcurrency.ReqNewTrade)
  return false;
#undef DO_
}

void ReqNewTrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:digitalcurrency.ReqNewTrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .digitalcurrency.Exchange exchange = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->exchange(), output);
  }

  // required .digitalcurrency.TradingPair tpair = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->tpair(), output);
  }

  // required .digitalcurrency.TradeType ttype = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ttype(), output);
  }

  // required double price = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->price(), output);
  }

  // required double amount = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->amount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:digitalcurrency.ReqNewTrade)
}

::google::protobuf::uint8* ReqNewTrade::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:digitalcurrency.ReqNewTrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .digitalcurrency.Exchange exchange = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->exchange(), target);
  }

  // required .digitalcurrency.TradingPair tpair = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->tpair(), target);
  }

  // required .digitalcurrency.TradeType ttype = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ttype(), target);
  }

  // required double price = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->price(), target);
  }

  // required double amount = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->amount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:digitalcurrency.ReqNewTrade)
  return target;
}

size_t ReqNewTrade::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:digitalcurrency.ReqNewTrade)
  size_t total_size = 0;

  if (has_exchange()) {
    // required .digitalcurrency.Exchange exchange = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->exchange());
  }

  if (has_tpair()) {
    // required .digitalcurrency.TradingPair tpair = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tpair());
  }

  if (has_price()) {
    // required double price = 4;
    total_size += 1 + 8;
  }

  if (has_amount()) {
    // required double amount = 5;
    total_size += 1 + 8;
  }

  if (has_ttype()) {
    // required .digitalcurrency.TradeType ttype = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ttype());
  }

  return total_size;
}
size_t ReqNewTrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:digitalcurrency.ReqNewTrade)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .digitalcurrency.Exchange exchange = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->exchange());

    // required .digitalcurrency.TradingPair tpair = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tpair());

    // required double price = 4;
    total_size += 1 + 8;

    // required double amount = 5;
    total_size += 1 + 8;

    // required .digitalcurrency.TradeType ttype = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ttype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqNewTrade::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:digitalcurrency.ReqNewTrade)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqNewTrade* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqNewTrade>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:digitalcurrency.ReqNewTrade)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:digitalcurrency.ReqNewTrade)
    MergeFrom(*source);
  }
}

void ReqNewTrade::MergeFrom(const ReqNewTrade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:digitalcurrency.ReqNewTrade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      exchange_ = from.exchange_;
    }
    if (cached_has_bits & 0x00000002u) {
      tpair_ = from.tpair_;
    }
    if (cached_has_bits & 0x00000004u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000008u) {
      amount_ = from.amount_;
    }
    if (cached_has_bits & 0x00000010u) {
      ttype_ = from.ttype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReqNewTrade::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:digitalcurrency.ReqNewTrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqNewTrade::CopyFrom(const ReqNewTrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:digitalcurrency.ReqNewTrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqNewTrade::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void ReqNewTrade::Swap(ReqNewTrade* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqNewTrade::InternalSwap(ReqNewTrade* other) {
  using std::swap;
  swap(exchange_, other->exchange_);
  swap(tpair_, other->tpair_);
  swap(price_, other->price_);
  swap(amount_, other->amount_);
  swap(ttype_, other->ttype_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqNewTrade::GetMetadata() const {
  protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RespNewTrade::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RespNewTrade::kErrorCodeFieldNumber;
const int RespNewTrade::kOrderIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RespNewTrade::RespNewTrade()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fcoin_5fquote_2eproto::scc_info_RespNewTrade.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:digitalcurrency.RespNewTrade)
}
RespNewTrade::RespNewTrade(const RespNewTrade& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&error_code_, &from.error_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&order_id_) -
    reinterpret_cast<char*>(&error_code_)) + sizeof(order_id_));
  // @@protoc_insertion_point(copy_constructor:digitalcurrency.RespNewTrade)
}

void RespNewTrade::SharedCtor() {
  ::memset(&error_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&order_id_) -
      reinterpret_cast<char*>(&error_code_)) + sizeof(order_id_));
}

RespNewTrade::~RespNewTrade() {
  // @@protoc_insertion_point(destructor:digitalcurrency.RespNewTrade)
  SharedDtor();
}

void RespNewTrade::SharedDtor() {
}

void RespNewTrade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RespNewTrade::descriptor() {
  ::protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RespNewTrade& RespNewTrade::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fcoin_5fquote_2eproto::scc_info_RespNewTrade.base);
  return *internal_default_instance();
}


void RespNewTrade::Clear() {
// @@protoc_insertion_point(message_clear_start:digitalcurrency.RespNewTrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&error_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&order_id_) -
        reinterpret_cast<char*>(&error_code_)) + sizeof(order_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RespNewTrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:digitalcurrency.RespNewTrade)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 error_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_error_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 order_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_order_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &order_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:digitalcurrency.RespNewTrade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:digitalcurrency.RespNewTrade)
  return false;
#undef DO_
}

void RespNewTrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:digitalcurrency.RespNewTrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 error_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->error_code(), output);
  }

  // optional int64 order_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->order_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:digitalcurrency.RespNewTrade)
}

::google::protobuf::uint8* RespNewTrade::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:digitalcurrency.RespNewTrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 error_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->error_code(), target);
  }

  // optional int64 order_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->order_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:digitalcurrency.RespNewTrade)
  return target;
}

size_t RespNewTrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:digitalcurrency.RespNewTrade)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 error_code = 1;
  if (has_error_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->error_code());
  }
  // optional int64 order_id = 2;
  if (has_order_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->order_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RespNewTrade::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:digitalcurrency.RespNewTrade)
  GOOGLE_DCHECK_NE(&from, this);
  const RespNewTrade* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RespNewTrade>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:digitalcurrency.RespNewTrade)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:digitalcurrency.RespNewTrade)
    MergeFrom(*source);
  }
}

void RespNewTrade::MergeFrom(const RespNewTrade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:digitalcurrency.RespNewTrade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      error_code_ = from.error_code_;
    }
    if (cached_has_bits & 0x00000002u) {
      order_id_ = from.order_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RespNewTrade::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:digitalcurrency.RespNewTrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RespNewTrade::CopyFrom(const RespNewTrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:digitalcurrency.RespNewTrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespNewTrade::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void RespNewTrade::Swap(RespNewTrade* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RespNewTrade::InternalSwap(RespNewTrade* other) {
  using std::swap;
  swap(error_code_, other->error_code_);
  swap(order_id_, other->order_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RespNewTrade::GetMetadata() const {
  protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqCancelTrade::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqCancelTrade::kExchangeFieldNumber;
const int ReqCancelTrade::kOrderIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqCancelTrade::ReqCancelTrade()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fcoin_5fquote_2eproto::scc_info_ReqCancelTrade.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:digitalcurrency.ReqCancelTrade)
}
ReqCancelTrade::ReqCancelTrade(const ReqCancelTrade& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&order_id_, &from.order_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&exchange_) -
    reinterpret_cast<char*>(&order_id_)) + sizeof(exchange_));
  // @@protoc_insertion_point(copy_constructor:digitalcurrency.ReqCancelTrade)
}

void ReqCancelTrade::SharedCtor() {
  ::memset(&order_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exchange_) -
      reinterpret_cast<char*>(&order_id_)) + sizeof(exchange_));
}

ReqCancelTrade::~ReqCancelTrade() {
  // @@protoc_insertion_point(destructor:digitalcurrency.ReqCancelTrade)
  SharedDtor();
}

void ReqCancelTrade::SharedDtor() {
}

void ReqCancelTrade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqCancelTrade::descriptor() {
  ::protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqCancelTrade& ReqCancelTrade::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fcoin_5fquote_2eproto::scc_info_ReqCancelTrade.base);
  return *internal_default_instance();
}


void ReqCancelTrade::Clear() {
// @@protoc_insertion_point(message_clear_start:digitalcurrency.ReqCancelTrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&order_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&exchange_) -
        reinterpret_cast<char*>(&order_id_)) + sizeof(exchange_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqCancelTrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:digitalcurrency.ReqCancelTrade)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .digitalcurrency.Exchange exchange = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::digitalcurrency::Exchange_IsValid(value)) {
            set_exchange(static_cast< ::digitalcurrency::Exchange >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 order_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_order_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &order_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:digitalcurrency.ReqCancelTrade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:digitalcurrency.ReqCancelTrade)
  return false;
#undef DO_
}

void ReqCancelTrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:digitalcurrency.ReqCancelTrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .digitalcurrency.Exchange exchange = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->exchange(), output);
  }

  // required int64 order_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->order_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:digitalcurrency.ReqCancelTrade)
}

::google::protobuf::uint8* ReqCancelTrade::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:digitalcurrency.ReqCancelTrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .digitalcurrency.Exchange exchange = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->exchange(), target);
  }

  // required int64 order_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->order_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:digitalcurrency.ReqCancelTrade)
  return target;
}

size_t ReqCancelTrade::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:digitalcurrency.ReqCancelTrade)
  size_t total_size = 0;

  if (has_order_id()) {
    // required int64 order_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->order_id());
  }

  if (has_exchange()) {
    // required .digitalcurrency.Exchange exchange = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->exchange());
  }

  return total_size;
}
size_t ReqCancelTrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:digitalcurrency.ReqCancelTrade)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 order_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->order_id());

    // required .digitalcurrency.Exchange exchange = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->exchange());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqCancelTrade::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:digitalcurrency.ReqCancelTrade)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqCancelTrade* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqCancelTrade>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:digitalcurrency.ReqCancelTrade)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:digitalcurrency.ReqCancelTrade)
    MergeFrom(*source);
  }
}

void ReqCancelTrade::MergeFrom(const ReqCancelTrade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:digitalcurrency.ReqCancelTrade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      order_id_ = from.order_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      exchange_ = from.exchange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReqCancelTrade::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:digitalcurrency.ReqCancelTrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCancelTrade::CopyFrom(const ReqCancelTrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:digitalcurrency.ReqCancelTrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCancelTrade::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ReqCancelTrade::Swap(ReqCancelTrade* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqCancelTrade::InternalSwap(ReqCancelTrade* other) {
  using std::swap;
  swap(order_id_, other->order_id_);
  swap(exchange_, other->exchange_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqCancelTrade::GetMetadata() const {
  protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RespCancelTrade::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RespCancelTrade::kErrorCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RespCancelTrade::RespCancelTrade()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fcoin_5fquote_2eproto::scc_info_RespCancelTrade.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:digitalcurrency.RespCancelTrade)
}
RespCancelTrade::RespCancelTrade(const RespCancelTrade& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:digitalcurrency.RespCancelTrade)
}

void RespCancelTrade::SharedCtor() {
  error_code_ = GOOGLE_LONGLONG(0);
}

RespCancelTrade::~RespCancelTrade() {
  // @@protoc_insertion_point(destructor:digitalcurrency.RespCancelTrade)
  SharedDtor();
}

void RespCancelTrade::SharedDtor() {
}

void RespCancelTrade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RespCancelTrade::descriptor() {
  ::protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RespCancelTrade& RespCancelTrade::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fcoin_5fquote_2eproto::scc_info_RespCancelTrade.base);
  return *internal_default_instance();
}


void RespCancelTrade::Clear() {
// @@protoc_insertion_point(message_clear_start:digitalcurrency.RespCancelTrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_code_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RespCancelTrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:digitalcurrency.RespCancelTrade)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 error_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_error_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:digitalcurrency.RespCancelTrade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:digitalcurrency.RespCancelTrade)
  return false;
#undef DO_
}

void RespCancelTrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:digitalcurrency.RespCancelTrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 error_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->error_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:digitalcurrency.RespCancelTrade)
}

::google::protobuf::uint8* RespCancelTrade::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:digitalcurrency.RespCancelTrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 error_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->error_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:digitalcurrency.RespCancelTrade)
  return target;
}

size_t RespCancelTrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:digitalcurrency.RespCancelTrade)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 error_code = 1;
  if (has_error_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->error_code());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RespCancelTrade::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:digitalcurrency.RespCancelTrade)
  GOOGLE_DCHECK_NE(&from, this);
  const RespCancelTrade* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RespCancelTrade>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:digitalcurrency.RespCancelTrade)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:digitalcurrency.RespCancelTrade)
    MergeFrom(*source);
  }
}

void RespCancelTrade::MergeFrom(const RespCancelTrade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:digitalcurrency.RespCancelTrade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_error_code()) {
    set_error_code(from.error_code());
  }
}

void RespCancelTrade::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:digitalcurrency.RespCancelTrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RespCancelTrade::CopyFrom(const RespCancelTrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:digitalcurrency.RespCancelTrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespCancelTrade::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void RespCancelTrade::Swap(RespCancelTrade* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RespCancelTrade::InternalSwap(RespCancelTrade* other) {
  using std::swap;
  swap(error_code_, other->error_code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RespCancelTrade::GetMetadata() const {
  protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqOrderInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqOrderInfo::kExchangeFieldNumber;
const int ReqOrderInfo::kOrderIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqOrderInfo::ReqOrderInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fcoin_5fquote_2eproto::scc_info_ReqOrderInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:digitalcurrency.ReqOrderInfo)
}
ReqOrderInfo::ReqOrderInfo(const ReqOrderInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&order_id_, &from.order_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&exchange_) -
    reinterpret_cast<char*>(&order_id_)) + sizeof(exchange_));
  // @@protoc_insertion_point(copy_constructor:digitalcurrency.ReqOrderInfo)
}

void ReqOrderInfo::SharedCtor() {
  ::memset(&order_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exchange_) -
      reinterpret_cast<char*>(&order_id_)) + sizeof(exchange_));
}

ReqOrderInfo::~ReqOrderInfo() {
  // @@protoc_insertion_point(destructor:digitalcurrency.ReqOrderInfo)
  SharedDtor();
}

void ReqOrderInfo::SharedDtor() {
}

void ReqOrderInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqOrderInfo::descriptor() {
  ::protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqOrderInfo& ReqOrderInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fcoin_5fquote_2eproto::scc_info_ReqOrderInfo.base);
  return *internal_default_instance();
}


void ReqOrderInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:digitalcurrency.ReqOrderInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&order_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&exchange_) -
        reinterpret_cast<char*>(&order_id_)) + sizeof(exchange_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqOrderInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:digitalcurrency.ReqOrderInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .digitalcurrency.Exchange exchange = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::digitalcurrency::Exchange_IsValid(value)) {
            set_exchange(static_cast< ::digitalcurrency::Exchange >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 order_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_order_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &order_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:digitalcurrency.ReqOrderInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:digitalcurrency.ReqOrderInfo)
  return false;
#undef DO_
}

void ReqOrderInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:digitalcurrency.ReqOrderInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .digitalcurrency.Exchange exchange = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->exchange(), output);
  }

  // optional int64 order_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->order_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:digitalcurrency.ReqOrderInfo)
}

::google::protobuf::uint8* ReqOrderInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:digitalcurrency.ReqOrderInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .digitalcurrency.Exchange exchange = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->exchange(), target);
  }

  // optional int64 order_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->order_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:digitalcurrency.ReqOrderInfo)
  return target;
}

size_t ReqOrderInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:digitalcurrency.ReqOrderInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .digitalcurrency.Exchange exchange = 1;
  if (has_exchange()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->exchange());
  }
  // optional int64 order_id = 2;
  if (has_order_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->order_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqOrderInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:digitalcurrency.ReqOrderInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqOrderInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqOrderInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:digitalcurrency.ReqOrderInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:digitalcurrency.ReqOrderInfo)
    MergeFrom(*source);
  }
}

void ReqOrderInfo::MergeFrom(const ReqOrderInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:digitalcurrency.ReqOrderInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      order_id_ = from.order_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      exchange_ = from.exchange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReqOrderInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:digitalcurrency.ReqOrderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqOrderInfo::CopyFrom(const ReqOrderInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:digitalcurrency.ReqOrderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqOrderInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void ReqOrderInfo::Swap(ReqOrderInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqOrderInfo::InternalSwap(ReqOrderInfo* other) {
  using std::swap;
  swap(order_id_, other->order_id_);
  swap(exchange_, other->exchange_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqOrderInfo::GetMetadata() const {
  protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RespOrderInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RespOrderInfo::kErrorCodeFieldNumber;
const int RespOrderInfo::kOrderDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RespOrderInfo::RespOrderInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fcoin_5fquote_2eproto::scc_info_RespOrderInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:digitalcurrency.RespOrderInfo)
}
RespOrderInfo::RespOrderInfo(const RespOrderInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      order_data_(from.order_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:digitalcurrency.RespOrderInfo)
}

void RespOrderInfo::SharedCtor() {
  error_code_ = GOOGLE_LONGLONG(0);
}

RespOrderInfo::~RespOrderInfo() {
  // @@protoc_insertion_point(destructor:digitalcurrency.RespOrderInfo)
  SharedDtor();
}

void RespOrderInfo::SharedDtor() {
}

void RespOrderInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RespOrderInfo::descriptor() {
  ::protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RespOrderInfo& RespOrderInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fcoin_5fquote_2eproto::scc_info_RespOrderInfo.base);
  return *internal_default_instance();
}


void RespOrderInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:digitalcurrency.RespOrderInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  order_data_.Clear();
  error_code_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RespOrderInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:digitalcurrency.RespOrderInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 error_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_error_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .digitalcurrency.OrderData order_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_order_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:digitalcurrency.RespOrderInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:digitalcurrency.RespOrderInfo)
  return false;
#undef DO_
}

void RespOrderInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:digitalcurrency.RespOrderInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 error_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->error_code(), output);
  }

  // repeated .digitalcurrency.OrderData order_data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->order_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->order_data(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:digitalcurrency.RespOrderInfo)
}

::google::protobuf::uint8* RespOrderInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:digitalcurrency.RespOrderInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 error_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->error_code(), target);
  }

  // repeated .digitalcurrency.OrderData order_data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->order_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->order_data(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:digitalcurrency.RespOrderInfo)
  return target;
}

size_t RespOrderInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:digitalcurrency.RespOrderInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 error_code = 1;
  if (has_error_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->error_code());
  }
  // repeated .digitalcurrency.OrderData order_data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->order_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->order_data(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RespOrderInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:digitalcurrency.RespOrderInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RespOrderInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RespOrderInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:digitalcurrency.RespOrderInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:digitalcurrency.RespOrderInfo)
    MergeFrom(*source);
  }
}

void RespOrderInfo::MergeFrom(const RespOrderInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:digitalcurrency.RespOrderInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  order_data_.MergeFrom(from.order_data_);
  if (from.has_error_code()) {
    set_error_code(from.error_code());
  }
}

void RespOrderInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:digitalcurrency.RespOrderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RespOrderInfo::CopyFrom(const RespOrderInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:digitalcurrency.RespOrderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespOrderInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->order_data())) return false;
  return true;
}

void RespOrderInfo::Swap(RespOrderInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RespOrderInfo::InternalSwap(RespOrderInfo* other) {
  using std::swap;
  CastToBase(&order_data_)->InternalSwap(CastToBase(&other->order_data_));
  swap(error_code_, other->error_code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RespOrderInfo::GetMetadata() const {
  protobuf_protos_2fcoin_5fquote_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fcoin_5fquote_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace digitalcurrency
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::digitalcurrency::TIterm* Arena::CreateMaybeMessage< ::digitalcurrency::TIterm >(Arena* arena) {
  return Arena::CreateInternal< ::digitalcurrency::TIterm >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::digitalcurrency::TickerItem* Arena::CreateMaybeMessage< ::digitalcurrency::TickerItem >(Arena* arena) {
  return Arena::CreateInternal< ::digitalcurrency::TickerItem >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::digitalcurrency::TickerData* Arena::CreateMaybeMessage< ::digitalcurrency::TickerData >(Arena* arena) {
  return Arena::CreateInternal< ::digitalcurrency::TickerData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::digitalcurrency::AskBid* Arena::CreateMaybeMessage< ::digitalcurrency::AskBid >(Arena* arena) {
  return Arena::CreateInternal< ::digitalcurrency::AskBid >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::digitalcurrency::DIterm* Arena::CreateMaybeMessage< ::digitalcurrency::DIterm >(Arena* arena) {
  return Arena::CreateInternal< ::digitalcurrency::DIterm >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::digitalcurrency::DepthItem* Arena::CreateMaybeMessage< ::digitalcurrency::DepthItem >(Arena* arena) {
  return Arena::CreateInternal< ::digitalcurrency::DepthItem >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::digitalcurrency::DepthData* Arena::CreateMaybeMessage< ::digitalcurrency::DepthData >(Arena* arena) {
  return Arena::CreateInternal< ::digitalcurrency::DepthData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::digitalcurrency::TradeData* Arena::CreateMaybeMessage< ::digitalcurrency::TradeData >(Arena* arena) {
  return Arena::CreateInternal< ::digitalcurrency::TradeData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::digitalcurrency::KlineData* Arena::CreateMaybeMessage< ::digitalcurrency::KlineData >(Arena* arena) {
  return Arena::CreateInternal< ::digitalcurrency::KlineData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::digitalcurrency::PriceData* Arena::CreateMaybeMessage< ::digitalcurrency::PriceData >(Arena* arena) {
  return Arena::CreateInternal< ::digitalcurrency::PriceData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::digitalcurrency::OrderData* Arena::CreateMaybeMessage< ::digitalcurrency::OrderData >(Arena* arena) {
  return Arena::CreateInternal< ::digitalcurrency::OrderData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::digitalcurrency::ReqDepth* Arena::CreateMaybeMessage< ::digitalcurrency::ReqDepth >(Arena* arena) {
  return Arena::CreateInternal< ::digitalcurrency::ReqDepth >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::digitalcurrency::RespDepth* Arena::CreateMaybeMessage< ::digitalcurrency::RespDepth >(Arena* arena) {
  return Arena::CreateInternal< ::digitalcurrency::RespDepth >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::digitalcurrency::ReqTradeList* Arena::CreateMaybeMessage< ::digitalcurrency::ReqTradeList >(Arena* arena) {
  return Arena::CreateInternal< ::digitalcurrency::ReqTradeList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::digitalcurrency::RespTradeList* Arena::CreateMaybeMessage< ::digitalcurrency::RespTradeList >(Arena* arena) {
  return Arena::CreateInternal< ::digitalcurrency::RespTradeList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::digitalcurrency::ReqKline* Arena::CreateMaybeMessage< ::digitalcurrency::ReqKline >(Arena* arena) {
  return Arena::CreateInternal< ::digitalcurrency::ReqKline >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::digitalcurrency::RespKline* Arena::CreateMaybeMessage< ::digitalcurrency::RespKline >(Arena* arena) {
  return Arena::CreateInternal< ::digitalcurrency::RespKline >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::digitalcurrency::ReqPrice* Arena::CreateMaybeMessage< ::digitalcurrency::ReqPrice >(Arena* arena) {
  return Arena::CreateInternal< ::digitalcurrency::ReqPrice >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::digitalcurrency::RespPrice* Arena::CreateMaybeMessage< ::digitalcurrency::RespPrice >(Arena* arena) {
  return Arena::CreateInternal< ::digitalcurrency::RespPrice >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::digitalcurrency::ReqNewTrade* Arena::CreateMaybeMessage< ::digitalcurrency::ReqNewTrade >(Arena* arena) {
  return Arena::CreateInternal< ::digitalcurrency::ReqNewTrade >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::digitalcurrency::RespNewTrade* Arena::CreateMaybeMessage< ::digitalcurrency::RespNewTrade >(Arena* arena) {
  return Arena::CreateInternal< ::digitalcurrency::RespNewTrade >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::digitalcurrency::ReqCancelTrade* Arena::CreateMaybeMessage< ::digitalcurrency::ReqCancelTrade >(Arena* arena) {
  return Arena::CreateInternal< ::digitalcurrency::ReqCancelTrade >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::digitalcurrency::RespCancelTrade* Arena::CreateMaybeMessage< ::digitalcurrency::RespCancelTrade >(Arena* arena) {
  return Arena::CreateInternal< ::digitalcurrency::RespCancelTrade >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::digitalcurrency::ReqOrderInfo* Arena::CreateMaybeMessage< ::digitalcurrency::ReqOrderInfo >(Arena* arena) {
  return Arena::CreateInternal< ::digitalcurrency::ReqOrderInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::digitalcurrency::RespOrderInfo* Arena::CreateMaybeMessage< ::digitalcurrency::RespOrderInfo >(Arena* arena) {
  return Arena::CreateInternal< ::digitalcurrency::RespOrderInfo >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
