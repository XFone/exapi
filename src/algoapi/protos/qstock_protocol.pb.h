// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/qstock_protocol.proto

#ifndef PROTOBUF_INCLUDED_protos_2fqstock_5fprotocol_2eproto
#define PROTOBUF_INCLUDED_protos_2fqstock_5fprotocol_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fqstock_5fprotocol_2eproto 

namespace protobuf_protos_2fqstock_5fprotocol_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[45];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_protos_2fqstock_5fprotocol_2eproto
namespace autotrade {
class CStockAvailableBalanceQueryReqt;
class CStockAvailableBalanceQueryReqtDefaultTypeInternal;
extern CStockAvailableBalanceQueryReqtDefaultTypeInternal _CStockAvailableBalanceQueryReqt_default_instance_;
class CStockAvailableBalanceQueryResp;
class CStockAvailableBalanceQueryRespDefaultTypeInternal;
extern CStockAvailableBalanceQueryRespDefaultTypeInternal _CStockAvailableBalanceQueryResp_default_instance_;
class ETFBasicInfoQueryReqt;
class ETFBasicInfoQueryReqtDefaultTypeInternal;
extern ETFBasicInfoQueryReqtDefaultTypeInternal _ETFBasicInfoQueryReqt_default_instance_;
class ETFBasicInfoQueryResp;
class ETFBasicInfoQueryRespDefaultTypeInternal;
extern ETFBasicInfoQueryRespDefaultTypeInternal _ETFBasicInfoQueryResp_default_instance_;
class ETFBasicInfoQueryResp_ETFBasicInfo;
class ETFBasicInfoQueryResp_ETFBasicInfoDefaultTypeInternal;
extern ETFBasicInfoQueryResp_ETFBasicInfoDefaultTypeInternal _ETFBasicInfoQueryResp_ETFBasicInfo_default_instance_;
class ETFBasketDynamicInfo;
class ETFBasketDynamicInfoDefaultTypeInternal;
extern ETFBasketDynamicInfoDefaultTypeInternal _ETFBasketDynamicInfo_default_instance_;
class ETFBasketDynamicInfoReqt;
class ETFBasketDynamicInfoReqtDefaultTypeInternal;
extern ETFBasketDynamicInfoReqtDefaultTypeInternal _ETFBasketDynamicInfoReqt_default_instance_;
class ETFBasketDynamicInfo_DynamicInfo;
class ETFBasketDynamicInfo_DynamicInfoDefaultTypeInternal;
extern ETFBasketDynamicInfo_DynamicInfoDefaultTypeInternal _ETFBasketDynamicInfo_DynamicInfo_default_instance_;
class ETFBasketListQueryReqt;
class ETFBasketListQueryReqtDefaultTypeInternal;
extern ETFBasketListQueryReqtDefaultTypeInternal _ETFBasketListQueryReqt_default_instance_;
class ETFBasketListQueryResp;
class ETFBasketListQueryRespDefaultTypeInternal;
extern ETFBasketListQueryRespDefaultTypeInternal _ETFBasketListQueryResp_default_instance_;
class ETFBasketListQueryResp_ConstituentStockInfo;
class ETFBasketListQueryResp_ConstituentStockInfoDefaultTypeInternal;
extern ETFBasketListQueryResp_ConstituentStockInfoDefaultTypeInternal _ETFBasketListQueryResp_ConstituentStockInfo_default_instance_;
class OneStockKnock;
class OneStockKnockDefaultTypeInternal;
extern OneStockKnockDefaultTypeInternal _OneStockKnock_default_instance_;
class RawStockKnock;
class RawStockKnockDefaultTypeInternal;
extern RawStockKnockDefaultTypeInternal _RawStockKnock_default_instance_;
class StockCapital;
class StockCapitalDefaultTypeInternal;
extern StockCapitalDefaultTypeInternal _StockCapital_default_instance_;
class StockCreateRedeemReqt;
class StockCreateRedeemReqtDefaultTypeInternal;
extern StockCreateRedeemReqtDefaultTypeInternal _StockCreateRedeemReqt_default_instance_;
class StockCreateRedeemResp;
class StockCreateRedeemRespDefaultTypeInternal;
extern StockCreateRedeemRespDefaultTypeInternal _StockCreateRedeemResp_default_instance_;
class StockDealDetail;
class StockDealDetailDefaultTypeInternal;
extern StockDealDetailDefaultTypeInternal _StockDealDetail_default_instance_;
class StockDeleteReqt;
class StockDeleteReqtDefaultTypeInternal;
extern StockDeleteReqtDefaultTypeInternal _StockDeleteReqt_default_instance_;
class StockDeleteResp;
class StockDeleteRespDefaultTypeInternal;
extern StockDeleteRespDefaultTypeInternal _StockDeleteResp_default_instance_;
class StockDeletesReqt;
class StockDeletesReqtDefaultTypeInternal;
extern StockDeletesReqtDefaultTypeInternal _StockDeletesReqt_default_instance_;
class StockDeletesResp;
class StockDeletesRespDefaultTypeInternal;
extern StockDeletesRespDefaultTypeInternal _StockDeletesResp_default_instance_;
class StockLoginReqt;
class StockLoginReqtDefaultTypeInternal;
extern StockLoginReqtDefaultTypeInternal _StockLoginReqt_default_instance_;
class StockLoginResp;
class StockLoginRespDefaultTypeInternal;
extern StockLoginRespDefaultTypeInternal _StockLoginResp_default_instance_;
class StockOrderReqt;
class StockOrderReqtDefaultTypeInternal;
extern StockOrderReqtDefaultTypeInternal _StockOrderReqt_default_instance_;
class StockOrderResp;
class StockOrderRespDefaultTypeInternal;
extern StockOrderRespDefaultTypeInternal _StockOrderResp_default_instance_;
class StockOrdersCreateResp;
class StockOrdersCreateRespDefaultTypeInternal;
extern StockOrdersCreateRespDefaultTypeInternal _StockOrdersCreateResp_default_instance_;
class StockOrdersCreateResp_OrderList;
class StockOrdersCreateResp_OrderListDefaultTypeInternal;
extern StockOrdersCreateResp_OrderListDefaultTypeInternal _StockOrdersCreateResp_OrderList_default_instance_;
class StockOrdersRecieved;
class StockOrdersRecievedDefaultTypeInternal;
extern StockOrdersRecievedDefaultTypeInternal _StockOrdersRecieved_default_instance_;
class StockOrdersReqt;
class StockOrdersReqtDefaultTypeInternal;
extern StockOrdersReqtDefaultTypeInternal _StockOrdersReqt_default_instance_;
class StockOrdersReqt_SingleOrder;
class StockOrdersReqt_SingleOrderDefaultTypeInternal;
extern StockOrdersReqt_SingleOrderDefaultTypeInternal _StockOrdersReqt_SingleOrder_default_instance_;
class StockOrdersResp;
class StockOrdersRespDefaultTypeInternal;
extern StockOrdersRespDefaultTypeInternal _StockOrdersResp_default_instance_;
class StockOrdersResp_OrderResult;
class StockOrdersResp_OrderResultDefaultTypeInternal;
extern StockOrdersResp_OrderResultDefaultTypeInternal _StockOrdersResp_OrderResult_default_instance_;
class StockPosition;
class StockPositionDefaultTypeInternal;
extern StockPositionDefaultTypeInternal _StockPosition_default_instance_;
class StockPosition_Position;
class StockPosition_PositionDefaultTypeInternal;
extern StockPosition_PositionDefaultTypeInternal _StockPosition_Position_default_instance_;
class StockQueryCapitalReqt;
class StockQueryCapitalReqtDefaultTypeInternal;
extern StockQueryCapitalReqtDefaultTypeInternal _StockQueryCapitalReqt_default_instance_;
class StockQueryCaptialReqt;
class StockQueryCaptialReqtDefaultTypeInternal;
extern StockQueryCaptialReqtDefaultTypeInternal _StockQueryCaptialReqt_default_instance_;
class StockQueryDealDetailReqt;
class StockQueryDealDetailReqtDefaultTypeInternal;
extern StockQueryDealDetailReqtDefaultTypeInternal _StockQueryDealDetailReqt_default_instance_;
class StockQueryOrderReqt;
class StockQueryOrderReqtDefaultTypeInternal;
extern StockQueryOrderReqtDefaultTypeInternal _StockQueryOrderReqt_default_instance_;
class StockQueryOrderResp;
class StockQueryOrderRespDefaultTypeInternal;
extern StockQueryOrderRespDefaultTypeInternal _StockQueryOrderResp_default_instance_;
class StockQueryOrderResp_OrderDetail;
class StockQueryOrderResp_OrderDetailDefaultTypeInternal;
extern StockQueryOrderResp_OrderDetailDefaultTypeInternal _StockQueryOrderResp_OrderDetail_default_instance_;
class StockQueryOrdersReqt;
class StockQueryOrdersReqtDefaultTypeInternal;
extern StockQueryOrdersReqtDefaultTypeInternal _StockQueryOrdersReqt_default_instance_;
class StockQueryOrdersResp;
class StockQueryOrdersRespDefaultTypeInternal;
extern StockQueryOrdersRespDefaultTypeInternal _StockQueryOrdersResp_default_instance_;
class StockQueryOrdersResp_OrderDetail;
class StockQueryOrdersResp_OrderDetailDefaultTypeInternal;
extern StockQueryOrdersResp_OrderDetailDefaultTypeInternal _StockQueryOrdersResp_OrderDetail_default_instance_;
class StockQueryPositionReqt;
class StockQueryPositionReqtDefaultTypeInternal;
extern StockQueryPositionReqtDefaultTypeInternal _StockQueryPositionReqt_default_instance_;
class SumStockKnock;
class SumStockKnockDefaultTypeInternal;
extern SumStockKnockDefaultTypeInternal _SumStockKnock_default_instance_;
}  // namespace autotrade
namespace google {
namespace protobuf {
template<> ::autotrade::CStockAvailableBalanceQueryReqt* Arena::CreateMaybeMessage<::autotrade::CStockAvailableBalanceQueryReqt>(Arena*);
template<> ::autotrade::CStockAvailableBalanceQueryResp* Arena::CreateMaybeMessage<::autotrade::CStockAvailableBalanceQueryResp>(Arena*);
template<> ::autotrade::ETFBasicInfoQueryReqt* Arena::CreateMaybeMessage<::autotrade::ETFBasicInfoQueryReqt>(Arena*);
template<> ::autotrade::ETFBasicInfoQueryResp* Arena::CreateMaybeMessage<::autotrade::ETFBasicInfoQueryResp>(Arena*);
template<> ::autotrade::ETFBasicInfoQueryResp_ETFBasicInfo* Arena::CreateMaybeMessage<::autotrade::ETFBasicInfoQueryResp_ETFBasicInfo>(Arena*);
template<> ::autotrade::ETFBasketDynamicInfo* Arena::CreateMaybeMessage<::autotrade::ETFBasketDynamicInfo>(Arena*);
template<> ::autotrade::ETFBasketDynamicInfoReqt* Arena::CreateMaybeMessage<::autotrade::ETFBasketDynamicInfoReqt>(Arena*);
template<> ::autotrade::ETFBasketDynamicInfo_DynamicInfo* Arena::CreateMaybeMessage<::autotrade::ETFBasketDynamicInfo_DynamicInfo>(Arena*);
template<> ::autotrade::ETFBasketListQueryReqt* Arena::CreateMaybeMessage<::autotrade::ETFBasketListQueryReqt>(Arena*);
template<> ::autotrade::ETFBasketListQueryResp* Arena::CreateMaybeMessage<::autotrade::ETFBasketListQueryResp>(Arena*);
template<> ::autotrade::ETFBasketListQueryResp_ConstituentStockInfo* Arena::CreateMaybeMessage<::autotrade::ETFBasketListQueryResp_ConstituentStockInfo>(Arena*);
template<> ::autotrade::OneStockKnock* Arena::CreateMaybeMessage<::autotrade::OneStockKnock>(Arena*);
template<> ::autotrade::RawStockKnock* Arena::CreateMaybeMessage<::autotrade::RawStockKnock>(Arena*);
template<> ::autotrade::StockCapital* Arena::CreateMaybeMessage<::autotrade::StockCapital>(Arena*);
template<> ::autotrade::StockCreateRedeemReqt* Arena::CreateMaybeMessage<::autotrade::StockCreateRedeemReqt>(Arena*);
template<> ::autotrade::StockCreateRedeemResp* Arena::CreateMaybeMessage<::autotrade::StockCreateRedeemResp>(Arena*);
template<> ::autotrade::StockDealDetail* Arena::CreateMaybeMessage<::autotrade::StockDealDetail>(Arena*);
template<> ::autotrade::StockDeleteReqt* Arena::CreateMaybeMessage<::autotrade::StockDeleteReqt>(Arena*);
template<> ::autotrade::StockDeleteResp* Arena::CreateMaybeMessage<::autotrade::StockDeleteResp>(Arena*);
template<> ::autotrade::StockDeletesReqt* Arena::CreateMaybeMessage<::autotrade::StockDeletesReqt>(Arena*);
template<> ::autotrade::StockDeletesResp* Arena::CreateMaybeMessage<::autotrade::StockDeletesResp>(Arena*);
template<> ::autotrade::StockLoginReqt* Arena::CreateMaybeMessage<::autotrade::StockLoginReqt>(Arena*);
template<> ::autotrade::StockLoginResp* Arena::CreateMaybeMessage<::autotrade::StockLoginResp>(Arena*);
template<> ::autotrade::StockOrderReqt* Arena::CreateMaybeMessage<::autotrade::StockOrderReqt>(Arena*);
template<> ::autotrade::StockOrderResp* Arena::CreateMaybeMessage<::autotrade::StockOrderResp>(Arena*);
template<> ::autotrade::StockOrdersCreateResp* Arena::CreateMaybeMessage<::autotrade::StockOrdersCreateResp>(Arena*);
template<> ::autotrade::StockOrdersCreateResp_OrderList* Arena::CreateMaybeMessage<::autotrade::StockOrdersCreateResp_OrderList>(Arena*);
template<> ::autotrade::StockOrdersRecieved* Arena::CreateMaybeMessage<::autotrade::StockOrdersRecieved>(Arena*);
template<> ::autotrade::StockOrdersReqt* Arena::CreateMaybeMessage<::autotrade::StockOrdersReqt>(Arena*);
template<> ::autotrade::StockOrdersReqt_SingleOrder* Arena::CreateMaybeMessage<::autotrade::StockOrdersReqt_SingleOrder>(Arena*);
template<> ::autotrade::StockOrdersResp* Arena::CreateMaybeMessage<::autotrade::StockOrdersResp>(Arena*);
template<> ::autotrade::StockOrdersResp_OrderResult* Arena::CreateMaybeMessage<::autotrade::StockOrdersResp_OrderResult>(Arena*);
template<> ::autotrade::StockPosition* Arena::CreateMaybeMessage<::autotrade::StockPosition>(Arena*);
template<> ::autotrade::StockPosition_Position* Arena::CreateMaybeMessage<::autotrade::StockPosition_Position>(Arena*);
template<> ::autotrade::StockQueryCapitalReqt* Arena::CreateMaybeMessage<::autotrade::StockQueryCapitalReqt>(Arena*);
template<> ::autotrade::StockQueryCaptialReqt* Arena::CreateMaybeMessage<::autotrade::StockQueryCaptialReqt>(Arena*);
template<> ::autotrade::StockQueryDealDetailReqt* Arena::CreateMaybeMessage<::autotrade::StockQueryDealDetailReqt>(Arena*);
template<> ::autotrade::StockQueryOrderReqt* Arena::CreateMaybeMessage<::autotrade::StockQueryOrderReqt>(Arena*);
template<> ::autotrade::StockQueryOrderResp* Arena::CreateMaybeMessage<::autotrade::StockQueryOrderResp>(Arena*);
template<> ::autotrade::StockQueryOrderResp_OrderDetail* Arena::CreateMaybeMessage<::autotrade::StockQueryOrderResp_OrderDetail>(Arena*);
template<> ::autotrade::StockQueryOrdersReqt* Arena::CreateMaybeMessage<::autotrade::StockQueryOrdersReqt>(Arena*);
template<> ::autotrade::StockQueryOrdersResp* Arena::CreateMaybeMessage<::autotrade::StockQueryOrdersResp>(Arena*);
template<> ::autotrade::StockQueryOrdersResp_OrderDetail* Arena::CreateMaybeMessage<::autotrade::StockQueryOrdersResp_OrderDetail>(Arena*);
template<> ::autotrade::StockQueryPositionReqt* Arena::CreateMaybeMessage<::autotrade::StockQueryPositionReqt>(Arena*);
template<> ::autotrade::SumStockKnock* Arena::CreateMaybeMessage<::autotrade::SumStockKnock>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace autotrade {

enum StockQueryOrderReqt_QueryType {
  StockQueryOrderReqt_QueryType_Type_ONCE = 0,
  StockQueryOrderReqt_QueryType_Type_MORE = 1,
  StockQueryOrderReqt_QueryType_Type_ALL = 2
};
bool StockQueryOrderReqt_QueryType_IsValid(int value);
const StockQueryOrderReqt_QueryType StockQueryOrderReqt_QueryType_QueryType_MIN = StockQueryOrderReqt_QueryType_Type_ONCE;
const StockQueryOrderReqt_QueryType StockQueryOrderReqt_QueryType_QueryType_MAX = StockQueryOrderReqt_QueryType_Type_ALL;
const int StockQueryOrderReqt_QueryType_QueryType_ARRAYSIZE = StockQueryOrderReqt_QueryType_QueryType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StockQueryOrderReqt_QueryType_descriptor();
inline const ::std::string& StockQueryOrderReqt_QueryType_Name(StockQueryOrderReqt_QueryType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StockQueryOrderReqt_QueryType_descriptor(), value);
}
inline bool StockQueryOrderReqt_QueryType_Parse(
    const ::std::string& name, StockQueryOrderReqt_QueryType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StockQueryOrderReqt_QueryType>(
    StockQueryOrderReqt_QueryType_descriptor(), name, value);
}
enum StockQueryOrderReqt_QueryFlag {
  StockQueryOrderReqt_QueryFlag_Type_Query_ALL = 0,
  StockQueryOrderReqt_QueryFlag_Type_NO_DELETE = 1,
  StockQueryOrderReqt_QueryFlag_Type_DELETE = 2
};
bool StockQueryOrderReqt_QueryFlag_IsValid(int value);
const StockQueryOrderReqt_QueryFlag StockQueryOrderReqt_QueryFlag_QueryFlag_MIN = StockQueryOrderReqt_QueryFlag_Type_Query_ALL;
const StockQueryOrderReqt_QueryFlag StockQueryOrderReqt_QueryFlag_QueryFlag_MAX = StockQueryOrderReqt_QueryFlag_Type_DELETE;
const int StockQueryOrderReqt_QueryFlag_QueryFlag_ARRAYSIZE = StockQueryOrderReqt_QueryFlag_QueryFlag_MAX + 1;

const ::google::protobuf::EnumDescriptor* StockQueryOrderReqt_QueryFlag_descriptor();
inline const ::std::string& StockQueryOrderReqt_QueryFlag_Name(StockQueryOrderReqt_QueryFlag value) {
  return ::google::protobuf::internal::NameOfEnum(
    StockQueryOrderReqt_QueryFlag_descriptor(), value);
}
inline bool StockQueryOrderReqt_QueryFlag_Parse(
    const ::std::string& name, StockQueryOrderReqt_QueryFlag* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StockQueryOrderReqt_QueryFlag>(
    StockQueryOrderReqt_QueryFlag_descriptor(), name, value);
}
enum StockQueryPositionReqt_QueryType {
  StockQueryPositionReqt_QueryType_Type_ONCE = 0,
  StockQueryPositionReqt_QueryType_Type_MORE = 1,
  StockQueryPositionReqt_QueryType_Type_ALL = 2
};
bool StockQueryPositionReqt_QueryType_IsValid(int value);
const StockQueryPositionReqt_QueryType StockQueryPositionReqt_QueryType_QueryType_MIN = StockQueryPositionReqt_QueryType_Type_ONCE;
const StockQueryPositionReqt_QueryType StockQueryPositionReqt_QueryType_QueryType_MAX = StockQueryPositionReqt_QueryType_Type_ALL;
const int StockQueryPositionReqt_QueryType_QueryType_ARRAYSIZE = StockQueryPositionReqt_QueryType_QueryType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StockQueryPositionReqt_QueryType_descriptor();
inline const ::std::string& StockQueryPositionReqt_QueryType_Name(StockQueryPositionReqt_QueryType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StockQueryPositionReqt_QueryType_descriptor(), value);
}
inline bool StockQueryPositionReqt_QueryType_Parse(
    const ::std::string& name, StockQueryPositionReqt_QueryType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StockQueryPositionReqt_QueryType>(
    StockQueryPositionReqt_QueryType_descriptor(), name, value);
}
enum StockQueryDealDetailReqt_QueryType {
  StockQueryDealDetailReqt_QueryType_Type_ONCE = 0,
  StockQueryDealDetailReqt_QueryType_Type_MORE = 1,
  StockQueryDealDetailReqt_QueryType_Type_ALL = 2
};
bool StockQueryDealDetailReqt_QueryType_IsValid(int value);
const StockQueryDealDetailReqt_QueryType StockQueryDealDetailReqt_QueryType_QueryType_MIN = StockQueryDealDetailReqt_QueryType_Type_ONCE;
const StockQueryDealDetailReqt_QueryType StockQueryDealDetailReqt_QueryType_QueryType_MAX = StockQueryDealDetailReqt_QueryType_Type_ALL;
const int StockQueryDealDetailReqt_QueryType_QueryType_ARRAYSIZE = StockQueryDealDetailReqt_QueryType_QueryType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StockQueryDealDetailReqt_QueryType_descriptor();
inline const ::std::string& StockQueryDealDetailReqt_QueryType_Name(StockQueryDealDetailReqt_QueryType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StockQueryDealDetailReqt_QueryType_descriptor(), value);
}
inline bool StockQueryDealDetailReqt_QueryType_Parse(
    const ::std::string& name, StockQueryDealDetailReqt_QueryType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StockQueryDealDetailReqt_QueryType>(
    StockQueryDealDetailReqt_QueryType_descriptor(), name, value);
}
// ===================================================================

class StockLoginReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.StockLoginReqt) */ {
 public:
  StockLoginReqt();
  virtual ~StockLoginReqt();

  StockLoginReqt(const StockLoginReqt& from);

  inline StockLoginReqt& operator=(const StockLoginReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StockLoginReqt(StockLoginReqt&& from) noexcept
    : StockLoginReqt() {
    *this = ::std::move(from);
  }

  inline StockLoginReqt& operator=(StockLoginReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockLoginReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StockLoginReqt* internal_default_instance() {
    return reinterpret_cast<const StockLoginReqt*>(
               &_StockLoginReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(StockLoginReqt* other);
  friend void swap(StockLoginReqt& a, StockLoginReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StockLoginReqt* New() const final {
    return CreateMaybeMessage<StockLoginReqt>(NULL);
  }

  StockLoginReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StockLoginReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StockLoginReqt& from);
  void MergeFrom(const StockLoginReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StockLoginReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string request_id = 2;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 2;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional int32 funcid = 1 [default = 11000001];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.StockLoginReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_request_id();
  void clear_has_request_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StockLoginResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.StockLoginResp) */ {
 public:
  StockLoginResp();
  virtual ~StockLoginResp();

  StockLoginResp(const StockLoginResp& from);

  inline StockLoginResp& operator=(const StockLoginResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StockLoginResp(StockLoginResp&& from) noexcept
    : StockLoginResp() {
    *this = ::std::move(from);
  }

  inline StockLoginResp& operator=(StockLoginResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockLoginResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StockLoginResp* internal_default_instance() {
    return reinterpret_cast<const StockLoginResp*>(
               &_StockLoginResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(StockLoginResp* other);
  friend void swap(StockLoginResp& a, StockLoginResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StockLoginResp* New() const final {
    return CreateMaybeMessage<StockLoginResp>(NULL);
  }

  StockLoginResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StockLoginResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StockLoginResp& from);
  void MergeFrom(const StockLoginResp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StockLoginResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string fund_account = 2;
  bool has_fund_account() const;
  void clear_fund_account();
  static const int kFundAccountFieldNumber = 2;
  const ::std::string& fund_account() const;
  void set_fund_account(const ::std::string& value);
  #if LANG_CXX11
  void set_fund_account(::std::string&& value);
  #endif
  void set_fund_account(const char* value);
  void set_fund_account(const char* value, size_t size);
  ::std::string* mutable_fund_account();
  ::std::string* release_fund_account();
  void set_allocated_fund_account(::std::string* fund_account);

  // optional string request_id = 3;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional int32 funcid = 1 [default = 11100001];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.StockLoginResp)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_fund_account();
  void clear_has_fund_account();
  void set_has_request_id();
  void clear_has_request_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr fund_account_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StockOrderReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.StockOrderReqt) */ {
 public:
  StockOrderReqt();
  virtual ~StockOrderReqt();

  StockOrderReqt(const StockOrderReqt& from);

  inline StockOrderReqt& operator=(const StockOrderReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StockOrderReqt(StockOrderReqt&& from) noexcept
    : StockOrderReqt() {
    *this = ::std::move(from);
  }

  inline StockOrderReqt& operator=(StockOrderReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockOrderReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StockOrderReqt* internal_default_instance() {
    return reinterpret_cast<const StockOrderReqt*>(
               &_StockOrderReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(StockOrderReqt* other);
  friend void swap(StockOrderReqt& a, StockOrderReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StockOrderReqt* New() const final {
    return CreateMaybeMessage<StockOrderReqt>(NULL);
  }

  StockOrderReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StockOrderReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StockOrderReqt& from);
  void MergeFrom(const StockOrderReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StockOrderReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string code = 2;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // required string order_id = 7;
  bool has_order_id() const;
  void clear_order_id();
  static const int kOrderIdFieldNumber = 7;
  const ::std::string& order_id() const;
  void set_order_id(const ::std::string& value);
  #if LANG_CXX11
  void set_order_id(::std::string&& value);
  #endif
  void set_order_id(const char* value);
  void set_order_id(const char* value, size_t size);
  ::std::string* mutable_order_id();
  ::std::string* release_order_id();
  void set_allocated_order_id(::std::string* order_id);

  // optional string request_id = 8;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 8;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional string order_type = 9;
  bool has_order_type() const;
  void clear_order_type();
  static const int kOrderTypeFieldNumber = 9;
  const ::std::string& order_type() const;
  void set_order_type(const ::std::string& value);
  #if LANG_CXX11
  void set_order_type(::std::string&& value);
  #endif
  void set_order_type(const char* value);
  void set_order_type(const char* value, size_t size);
  ::std::string* mutable_order_type();
  ::std::string* release_order_type();
  void set_allocated_order_type(::std::string* order_type);

  // optional string parent_id = 10;
  bool has_parent_id() const;
  void clear_parent_id();
  static const int kParentIdFieldNumber = 10;
  const ::std::string& parent_id() const;
  void set_parent_id(const ::std::string& value);
  #if LANG_CXX11
  void set_parent_id(::std::string&& value);
  #endif
  void set_parent_id(const char* value);
  void set_parent_id(const char* value, size_t size);
  ::std::string* mutable_parent_id();
  ::std::string* release_parent_id();
  void set_allocated_parent_id(::std::string* parent_id);

  // optional string parent_type = 11;
  bool has_parent_type() const;
  void clear_parent_type();
  static const int kParentTypeFieldNumber = 11;
  const ::std::string& parent_type() const;
  void set_parent_type(const ::std::string& value);
  #if LANG_CXX11
  void set_parent_type(::std::string&& value);
  #endif
  void set_parent_type(const char* value);
  void set_parent_type(const char* value, size_t size);
  ::std::string* mutable_parent_type();
  ::std::string* release_parent_type();
  void set_allocated_parent_type(::std::string* parent_type);

  // optional string robot_id = 12;
  bool has_robot_id() const;
  void clear_robot_id();
  static const int kRobotIdFieldNumber = 12;
  const ::std::string& robot_id() const;
  void set_robot_id(const ::std::string& value);
  #if LANG_CXX11
  void set_robot_id(::std::string&& value);
  #endif
  void set_robot_id(const char* value);
  void set_robot_id(const char* value, size_t size);
  ::std::string* mutable_robot_id();
  ::std::string* release_robot_id();
  void set_allocated_robot_id(::std::string* robot_id);

  // optional string trader_id = 13;
  bool has_trader_id() const;
  void clear_trader_id();
  static const int kTraderIdFieldNumber = 13;
  const ::std::string& trader_id() const;
  void set_trader_id(const ::std::string& value);
  #if LANG_CXX11
  void set_trader_id(::std::string&& value);
  #endif
  void set_trader_id(const char* value);
  void set_trader_id(const char* value, size_t size);
  ::std::string* mutable_trader_id();
  ::std::string* release_trader_id();
  void set_allocated_trader_id(::std::string* trader_id);

  // optional string fund_id = 17;
  bool has_fund_id() const;
  void clear_fund_id();
  static const int kFundIdFieldNumber = 17;
  const ::std::string& fund_id() const;
  void set_fund_id(const ::std::string& value);
  #if LANG_CXX11
  void set_fund_id(::std::string&& value);
  #endif
  void set_fund_id(const char* value);
  void set_fund_id(const char* value, size_t size);
  ::std::string* mutable_fund_id();
  ::std::string* release_fund_id();
  void set_allocated_fund_id(::std::string* fund_id);

  // optional string session_id = 18;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 18;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // optional string name = 19;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 19;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required int64 price = 3;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 3;
  ::google::protobuf::int64 price() const;
  void set_price(::google::protobuf::int64 value);

  // required uint32 qty = 4;
  bool has_qty() const;
  void clear_qty();
  static const int kQtyFieldNumber = 4;
  ::google::protobuf::uint32 qty() const;
  void set_qty(::google::protobuf::uint32 value);

  // required uint32 bsflag = 5;
  bool has_bsflag() const;
  void clear_bsflag();
  static const int kBsflagFieldNumber = 5;
  ::google::protobuf::uint32 bsflag() const;
  void set_bsflag(::google::protobuf::uint32 value);

  // optional int64 request_time = 14 [default = 0];
  bool has_request_time() const;
  void clear_request_time();
  static const int kRequestTimeFieldNumber = 14;
  ::google::protobuf::int64 request_time() const;
  void set_request_time(::google::protobuf::int64 value);

  // optional int64 request_date = 16 [default = 0];
  bool has_request_date() const;
  void clear_request_date();
  static const int kRequestDateFieldNumber = 16;
  ::google::protobuf::int64 request_date() const;
  void set_request_date(::google::protobuf::int64 value);

  // required uint32 market = 6;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 6;
  ::google::protobuf::uint32 market() const;
  void set_market(::google::protobuf::uint32 value);

  // optional int32 funcid = 1 [default = 11001001];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // optional int64 active_interval = 15 [default = 1000];
  bool has_active_interval() const;
  void clear_active_interval();
  static const int kActiveIntervalFieldNumber = 15;
  ::google::protobuf::int64 active_interval() const;
  void set_active_interval(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:autotrade.StockOrderReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_code();
  void clear_has_code();
  void set_has_price();
  void clear_has_price();
  void set_has_qty();
  void clear_has_qty();
  void set_has_bsflag();
  void clear_has_bsflag();
  void set_has_market();
  void clear_has_market();
  void set_has_order_id();
  void clear_has_order_id();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_order_type();
  void clear_has_order_type();
  void set_has_parent_id();
  void clear_has_parent_id();
  void set_has_parent_type();
  void clear_has_parent_type();
  void set_has_robot_id();
  void clear_has_robot_id();
  void set_has_trader_id();
  void clear_has_trader_id();
  void set_has_request_time();
  void clear_has_request_time();
  void set_has_active_interval();
  void clear_has_active_interval();
  void set_has_request_date();
  void clear_has_request_date();
  void set_has_fund_id();
  void clear_has_fund_id();
  void set_has_session_id();
  void clear_has_session_id();
  void set_has_name();
  void clear_has_name();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr order_id_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr order_type_;
  ::google::protobuf::internal::ArenaStringPtr parent_id_;
  ::google::protobuf::internal::ArenaStringPtr parent_type_;
  ::google::protobuf::internal::ArenaStringPtr robot_id_;
  ::google::protobuf::internal::ArenaStringPtr trader_id_;
  ::google::protobuf::internal::ArenaStringPtr fund_id_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int64 price_;
  ::google::protobuf::uint32 qty_;
  ::google::protobuf::uint32 bsflag_;
  ::google::protobuf::int64 request_time_;
  ::google::protobuf::int64 request_date_;
  ::google::protobuf::uint32 market_;
  ::google::protobuf::int32 funcid_;
  ::google::protobuf::int64 active_interval_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StockOrderResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.StockOrderResp) */ {
 public:
  StockOrderResp();
  virtual ~StockOrderResp();

  StockOrderResp(const StockOrderResp& from);

  inline StockOrderResp& operator=(const StockOrderResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StockOrderResp(StockOrderResp&& from) noexcept
    : StockOrderResp() {
    *this = ::std::move(from);
  }

  inline StockOrderResp& operator=(StockOrderResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockOrderResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StockOrderResp* internal_default_instance() {
    return reinterpret_cast<const StockOrderResp*>(
               &_StockOrderResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(StockOrderResp* other);
  friend void swap(StockOrderResp& a, StockOrderResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StockOrderResp* New() const final {
    return CreateMaybeMessage<StockOrderResp>(NULL);
  }

  StockOrderResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StockOrderResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StockOrderResp& from);
  void MergeFrom(const StockOrderResp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StockOrderResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string order_group = 2;
  bool has_order_group() const;
  void clear_order_group();
  static const int kOrderGroupFieldNumber = 2;
  const ::std::string& order_group() const;
  void set_order_group(const ::std::string& value);
  #if LANG_CXX11
  void set_order_group(::std::string&& value);
  #endif
  void set_order_group(const char* value);
  void set_order_group(const char* value, size_t size);
  ::std::string* mutable_order_group();
  ::std::string* release_order_group();
  void set_allocated_order_group(::std::string* order_group);

  // optional string request_id = 3;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // required string order_id = 4;
  bool has_order_id() const;
  void clear_order_id();
  static const int kOrderIdFieldNumber = 4;
  const ::std::string& order_id() const;
  void set_order_id(const ::std::string& value);
  #if LANG_CXX11
  void set_order_id(::std::string&& value);
  #endif
  void set_order_id(const char* value);
  void set_order_id(const char* value, size_t size);
  ::std::string* mutable_order_id();
  ::std::string* release_order_id();
  void set_allocated_order_id(::std::string* order_id);

  // optional int32 funcid = 1 [default = 11101001];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.StockOrderResp)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_order_group();
  void clear_has_order_group();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_order_id();
  void clear_has_order_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr order_group_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr order_id_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StockOrdersReqt_SingleOrder : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.StockOrdersReqt.SingleOrder) */ {
 public:
  StockOrdersReqt_SingleOrder();
  virtual ~StockOrdersReqt_SingleOrder();

  StockOrdersReqt_SingleOrder(const StockOrdersReqt_SingleOrder& from);

  inline StockOrdersReqt_SingleOrder& operator=(const StockOrdersReqt_SingleOrder& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StockOrdersReqt_SingleOrder(StockOrdersReqt_SingleOrder&& from) noexcept
    : StockOrdersReqt_SingleOrder() {
    *this = ::std::move(from);
  }

  inline StockOrdersReqt_SingleOrder& operator=(StockOrdersReqt_SingleOrder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockOrdersReqt_SingleOrder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StockOrdersReqt_SingleOrder* internal_default_instance() {
    return reinterpret_cast<const StockOrdersReqt_SingleOrder*>(
               &_StockOrdersReqt_SingleOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(StockOrdersReqt_SingleOrder* other);
  friend void swap(StockOrdersReqt_SingleOrder& a, StockOrdersReqt_SingleOrder& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StockOrdersReqt_SingleOrder* New() const final {
    return CreateMaybeMessage<StockOrdersReqt_SingleOrder>(NULL);
  }

  StockOrdersReqt_SingleOrder* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StockOrdersReqt_SingleOrder>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StockOrdersReqt_SingleOrder& from);
  void MergeFrom(const StockOrdersReqt_SingleOrder& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StockOrdersReqt_SingleOrder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string name = 4;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required int64 price = 2;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 2;
  ::google::protobuf::int64 price() const;
  void set_price(::google::protobuf::int64 value);

  // required uint32 qty = 3;
  bool has_qty() const;
  void clear_qty();
  static const int kQtyFieldNumber = 3;
  ::google::protobuf::uint32 qty() const;
  void set_qty(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:autotrade.StockOrdersReqt.SingleOrder)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_price();
  void clear_has_price();
  void set_has_qty();
  void clear_has_qty();
  void set_has_name();
  void clear_has_name();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int64 price_;
  ::google::protobuf::uint32 qty_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StockOrdersReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.StockOrdersReqt) */ {
 public:
  StockOrdersReqt();
  virtual ~StockOrdersReqt();

  StockOrdersReqt(const StockOrdersReqt& from);

  inline StockOrdersReqt& operator=(const StockOrdersReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StockOrdersReqt(StockOrdersReqt&& from) noexcept
    : StockOrdersReqt() {
    *this = ::std::move(from);
  }

  inline StockOrdersReqt& operator=(StockOrdersReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockOrdersReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StockOrdersReqt* internal_default_instance() {
    return reinterpret_cast<const StockOrdersReqt*>(
               &_StockOrdersReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(StockOrdersReqt* other);
  friend void swap(StockOrdersReqt& a, StockOrdersReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StockOrdersReqt* New() const final {
    return CreateMaybeMessage<StockOrdersReqt>(NULL);
  }

  StockOrdersReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StockOrdersReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StockOrdersReqt& from);
  void MergeFrom(const StockOrdersReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StockOrdersReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StockOrdersReqt_SingleOrder SingleOrder;

  // accessors -------------------------------------------------------

  // repeated .autotrade.StockOrdersReqt.SingleOrder order_list = 2;
  int order_list_size() const;
  void clear_order_list();
  static const int kOrderListFieldNumber = 2;
  ::autotrade::StockOrdersReqt_SingleOrder* mutable_order_list(int index);
  ::google::protobuf::RepeatedPtrField< ::autotrade::StockOrdersReqt_SingleOrder >*
      mutable_order_list();
  const ::autotrade::StockOrdersReqt_SingleOrder& order_list(int index) const;
  ::autotrade::StockOrdersReqt_SingleOrder* add_order_list();
  const ::google::protobuf::RepeatedPtrField< ::autotrade::StockOrdersReqt_SingleOrder >&
      order_list() const;

  // required string order_id = 5;
  bool has_order_id() const;
  void clear_order_id();
  static const int kOrderIdFieldNumber = 5;
  const ::std::string& order_id() const;
  void set_order_id(const ::std::string& value);
  #if LANG_CXX11
  void set_order_id(::std::string&& value);
  #endif
  void set_order_id(const char* value);
  void set_order_id(const char* value, size_t size);
  ::std::string* mutable_order_id();
  ::std::string* release_order_id();
  void set_allocated_order_id(::std::string* order_id);

  // optional string order_type = 6;
  bool has_order_type() const;
  void clear_order_type();
  static const int kOrderTypeFieldNumber = 6;
  const ::std::string& order_type() const;
  void set_order_type(const ::std::string& value);
  #if LANG_CXX11
  void set_order_type(::std::string&& value);
  #endif
  void set_order_type(const char* value);
  void set_order_type(const char* value, size_t size);
  ::std::string* mutable_order_type();
  ::std::string* release_order_type();
  void set_allocated_order_type(::std::string* order_type);

  // optional string parent_id = 7;
  bool has_parent_id() const;
  void clear_parent_id();
  static const int kParentIdFieldNumber = 7;
  const ::std::string& parent_id() const;
  void set_parent_id(const ::std::string& value);
  #if LANG_CXX11
  void set_parent_id(::std::string&& value);
  #endif
  void set_parent_id(const char* value);
  void set_parent_id(const char* value, size_t size);
  ::std::string* mutable_parent_id();
  ::std::string* release_parent_id();
  void set_allocated_parent_id(::std::string* parent_id);

  // optional string parent_type = 8;
  bool has_parent_type() const;
  void clear_parent_type();
  static const int kParentTypeFieldNumber = 8;
  const ::std::string& parent_type() const;
  void set_parent_type(const ::std::string& value);
  #if LANG_CXX11
  void set_parent_type(::std::string&& value);
  #endif
  void set_parent_type(const char* value);
  void set_parent_type(const char* value, size_t size);
  ::std::string* mutable_parent_type();
  ::std::string* release_parent_type();
  void set_allocated_parent_type(::std::string* parent_type);

  // optional string request_id = 9;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 9;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional string robot_id = 10;
  bool has_robot_id() const;
  void clear_robot_id();
  static const int kRobotIdFieldNumber = 10;
  const ::std::string& robot_id() const;
  void set_robot_id(const ::std::string& value);
  #if LANG_CXX11
  void set_robot_id(::std::string&& value);
  #endif
  void set_robot_id(const char* value);
  void set_robot_id(const char* value, size_t size);
  ::std::string* mutable_robot_id();
  ::std::string* release_robot_id();
  void set_allocated_robot_id(::std::string* robot_id);

  // optional string trader_id = 11;
  bool has_trader_id() const;
  void clear_trader_id();
  static const int kTraderIdFieldNumber = 11;
  const ::std::string& trader_id() const;
  void set_trader_id(const ::std::string& value);
  #if LANG_CXX11
  void set_trader_id(::std::string&& value);
  #endif
  void set_trader_id(const char* value);
  void set_trader_id(const char* value, size_t size);
  ::std::string* mutable_trader_id();
  ::std::string* release_trader_id();
  void set_allocated_trader_id(::std::string* trader_id);

  // optional string fund_id = 15;
  bool has_fund_id() const;
  void clear_fund_id();
  static const int kFundIdFieldNumber = 15;
  const ::std::string& fund_id() const;
  void set_fund_id(const ::std::string& value);
  #if LANG_CXX11
  void set_fund_id(::std::string&& value);
  #endif
  void set_fund_id(const char* value);
  void set_fund_id(const char* value, size_t size);
  ::std::string* mutable_fund_id();
  ::std::string* release_fund_id();
  void set_allocated_fund_id(::std::string* fund_id);

  // optional string session_id = 16;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 16;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // required uint32 bsflag = 3;
  bool has_bsflag() const;
  void clear_bsflag();
  static const int kBsflagFieldNumber = 3;
  ::google::protobuf::uint32 bsflag() const;
  void set_bsflag(::google::protobuf::uint32 value);

  // required uint32 market = 4;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 4;
  ::google::protobuf::uint32 market() const;
  void set_market(::google::protobuf::uint32 value);

  // optional int64 request_time = 12 [default = 0];
  bool has_request_time() const;
  void clear_request_time();
  static const int kRequestTimeFieldNumber = 12;
  ::google::protobuf::int64 request_time() const;
  void set_request_time(::google::protobuf::int64 value);

  // optional int64 request_date = 14 [default = 0];
  bool has_request_date() const;
  void clear_request_date();
  static const int kRequestDateFieldNumber = 14;
  ::google::protobuf::int64 request_date() const;
  void set_request_date(::google::protobuf::int64 value);

  // optional int32 funcid = 1 [default = 11001002];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // optional int64 active_interval = 13 [default = 1000];
  bool has_active_interval() const;
  void clear_active_interval();
  static const int kActiveIntervalFieldNumber = 13;
  ::google::protobuf::int64 active_interval() const;
  void set_active_interval(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:autotrade.StockOrdersReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_bsflag();
  void clear_has_bsflag();
  void set_has_market();
  void clear_has_market();
  void set_has_order_id();
  void clear_has_order_id();
  void set_has_order_type();
  void clear_has_order_type();
  void set_has_parent_id();
  void clear_has_parent_id();
  void set_has_parent_type();
  void clear_has_parent_type();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_robot_id();
  void clear_has_robot_id();
  void set_has_trader_id();
  void clear_has_trader_id();
  void set_has_request_time();
  void clear_has_request_time();
  void set_has_active_interval();
  void clear_has_active_interval();
  void set_has_request_date();
  void clear_has_request_date();
  void set_has_fund_id();
  void clear_has_fund_id();
  void set_has_session_id();
  void clear_has_session_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::autotrade::StockOrdersReqt_SingleOrder > order_list_;
  ::google::protobuf::internal::ArenaStringPtr order_id_;
  ::google::protobuf::internal::ArenaStringPtr order_type_;
  ::google::protobuf::internal::ArenaStringPtr parent_id_;
  ::google::protobuf::internal::ArenaStringPtr parent_type_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr robot_id_;
  ::google::protobuf::internal::ArenaStringPtr trader_id_;
  ::google::protobuf::internal::ArenaStringPtr fund_id_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::uint32 bsflag_;
  ::google::protobuf::uint32 market_;
  ::google::protobuf::int64 request_time_;
  ::google::protobuf::int64 request_date_;
  ::google::protobuf::int32 funcid_;
  ::google::protobuf::int64 active_interval_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StockOrdersResp_OrderResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.StockOrdersResp.OrderResult) */ {
 public:
  StockOrdersResp_OrderResult();
  virtual ~StockOrdersResp_OrderResult();

  StockOrdersResp_OrderResult(const StockOrdersResp_OrderResult& from);

  inline StockOrdersResp_OrderResult& operator=(const StockOrdersResp_OrderResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StockOrdersResp_OrderResult(StockOrdersResp_OrderResult&& from) noexcept
    : StockOrdersResp_OrderResult() {
    *this = ::std::move(from);
  }

  inline StockOrdersResp_OrderResult& operator=(StockOrdersResp_OrderResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockOrdersResp_OrderResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StockOrdersResp_OrderResult* internal_default_instance() {
    return reinterpret_cast<const StockOrdersResp_OrderResult*>(
               &_StockOrdersResp_OrderResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(StockOrdersResp_OrderResult* other);
  friend void swap(StockOrdersResp_OrderResult& a, StockOrdersResp_OrderResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StockOrdersResp_OrderResult* New() const final {
    return CreateMaybeMessage<StockOrdersResp_OrderResult>(NULL);
  }

  StockOrdersResp_OrderResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StockOrdersResp_OrderResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StockOrdersResp_OrderResult& from);
  void MergeFrom(const StockOrdersResp_OrderResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StockOrdersResp_OrderResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ret_msg = 2;
  bool has_ret_msg() const;
  void clear_ret_msg();
  static const int kRetMsgFieldNumber = 2;
  const ::std::string& ret_msg() const;
  void set_ret_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_ret_msg(::std::string&& value);
  #endif
  void set_ret_msg(const char* value);
  void set_ret_msg(const char* value, size_t size);
  ::std::string* mutable_ret_msg();
  ::std::string* release_ret_msg();
  void set_allocated_ret_msg(::std::string* ret_msg);

  // optional string orderno = 3;
  bool has_orderno() const;
  void clear_orderno();
  static const int kOrdernoFieldNumber = 3;
  const ::std::string& orderno() const;
  void set_orderno(const ::std::string& value);
  #if LANG_CXX11
  void set_orderno(::std::string&& value);
  #endif
  void set_orderno(const char* value);
  void set_orderno(const char* value, size_t size);
  ::std::string* mutable_orderno();
  ::std::string* release_orderno();
  void set_allocated_orderno(::std::string* orderno);

  // required int32 ret_code = 1;
  bool has_ret_code() const;
  void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  ::google::protobuf::int32 ret_code() const;
  void set_ret_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.StockOrdersResp.OrderResult)
 private:
  void set_has_ret_code();
  void clear_has_ret_code();
  void set_has_ret_msg();
  void clear_has_ret_msg();
  void set_has_orderno();
  void clear_has_orderno();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ret_msg_;
  ::google::protobuf::internal::ArenaStringPtr orderno_;
  ::google::protobuf::int32 ret_code_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StockOrdersResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.StockOrdersResp) */ {
 public:
  StockOrdersResp();
  virtual ~StockOrdersResp();

  StockOrdersResp(const StockOrdersResp& from);

  inline StockOrdersResp& operator=(const StockOrdersResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StockOrdersResp(StockOrdersResp&& from) noexcept
    : StockOrdersResp() {
    *this = ::std::move(from);
  }

  inline StockOrdersResp& operator=(StockOrdersResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockOrdersResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StockOrdersResp* internal_default_instance() {
    return reinterpret_cast<const StockOrdersResp*>(
               &_StockOrdersResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(StockOrdersResp* other);
  friend void swap(StockOrdersResp& a, StockOrdersResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StockOrdersResp* New() const final {
    return CreateMaybeMessage<StockOrdersResp>(NULL);
  }

  StockOrdersResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StockOrdersResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StockOrdersResp& from);
  void MergeFrom(const StockOrdersResp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StockOrdersResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StockOrdersResp_OrderResult OrderResult;

  // accessors -------------------------------------------------------

  // repeated .autotrade.StockOrdersResp.OrderResult results = 3;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 3;
  ::autotrade::StockOrdersResp_OrderResult* mutable_results(int index);
  ::google::protobuf::RepeatedPtrField< ::autotrade::StockOrdersResp_OrderResult >*
      mutable_results();
  const ::autotrade::StockOrdersResp_OrderResult& results(int index) const;
  ::autotrade::StockOrdersResp_OrderResult* add_results();
  const ::google::protobuf::RepeatedPtrField< ::autotrade::StockOrdersResp_OrderResult >&
      results() const;

  // required string order_group = 2;
  bool has_order_group() const;
  void clear_order_group();
  static const int kOrderGroupFieldNumber = 2;
  const ::std::string& order_group() const;
  void set_order_group(const ::std::string& value);
  #if LANG_CXX11
  void set_order_group(::std::string&& value);
  #endif
  void set_order_group(const char* value);
  void set_order_group(const char* value, size_t size);
  ::std::string* mutable_order_group();
  ::std::string* release_order_group();
  void set_allocated_order_group(::std::string* order_group);

  // optional string request_id = 4;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 4;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // required string order_id = 5;
  bool has_order_id() const;
  void clear_order_id();
  static const int kOrderIdFieldNumber = 5;
  const ::std::string& order_id() const;
  void set_order_id(const ::std::string& value);
  #if LANG_CXX11
  void set_order_id(::std::string&& value);
  #endif
  void set_order_id(const char* value);
  void set_order_id(const char* value, size_t size);
  ::std::string* mutable_order_id();
  ::std::string* release_order_id();
  void set_allocated_order_id(::std::string* order_id);

  // optional int32 funcid = 1 [default = 11101002];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.StockOrdersResp)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_order_group();
  void clear_has_order_group();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_order_id();
  void clear_has_order_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::autotrade::StockOrdersResp_OrderResult > results_;
  ::google::protobuf::internal::ArenaStringPtr order_group_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr order_id_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StockOrdersRecieved : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.StockOrdersRecieved) */ {
 public:
  StockOrdersRecieved();
  virtual ~StockOrdersRecieved();

  StockOrdersRecieved(const StockOrdersRecieved& from);

  inline StockOrdersRecieved& operator=(const StockOrdersRecieved& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StockOrdersRecieved(StockOrdersRecieved&& from) noexcept
    : StockOrdersRecieved() {
    *this = ::std::move(from);
  }

  inline StockOrdersRecieved& operator=(StockOrdersRecieved&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockOrdersRecieved& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StockOrdersRecieved* internal_default_instance() {
    return reinterpret_cast<const StockOrdersRecieved*>(
               &_StockOrdersRecieved_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(StockOrdersRecieved* other);
  friend void swap(StockOrdersRecieved& a, StockOrdersRecieved& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StockOrdersRecieved* New() const final {
    return CreateMaybeMessage<StockOrdersRecieved>(NULL);
  }

  StockOrdersRecieved* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StockOrdersRecieved>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StockOrdersRecieved& from);
  void MergeFrom(const StockOrdersRecieved& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StockOrdersRecieved* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string request_id = 2;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 2;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional int32 funcid = 1 [default = 11101010];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.StockOrdersRecieved)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_request_id();
  void clear_has_request_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StockOrdersCreateResp_OrderList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.StockOrdersCreateResp.OrderList) */ {
 public:
  StockOrdersCreateResp_OrderList();
  virtual ~StockOrdersCreateResp_OrderList();

  StockOrdersCreateResp_OrderList(const StockOrdersCreateResp_OrderList& from);

  inline StockOrdersCreateResp_OrderList& operator=(const StockOrdersCreateResp_OrderList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StockOrdersCreateResp_OrderList(StockOrdersCreateResp_OrderList&& from) noexcept
    : StockOrdersCreateResp_OrderList() {
    *this = ::std::move(from);
  }

  inline StockOrdersCreateResp_OrderList& operator=(StockOrdersCreateResp_OrderList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockOrdersCreateResp_OrderList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StockOrdersCreateResp_OrderList* internal_default_instance() {
    return reinterpret_cast<const StockOrdersCreateResp_OrderList*>(
               &_StockOrdersCreateResp_OrderList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(StockOrdersCreateResp_OrderList* other);
  friend void swap(StockOrdersCreateResp_OrderList& a, StockOrdersCreateResp_OrderList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StockOrdersCreateResp_OrderList* New() const final {
    return CreateMaybeMessage<StockOrdersCreateResp_OrderList>(NULL);
  }

  StockOrdersCreateResp_OrderList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StockOrdersCreateResp_OrderList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StockOrdersCreateResp_OrderList& from);
  void MergeFrom(const StockOrdersCreateResp_OrderList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StockOrdersCreateResp_OrderList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string orderno = 4;
  bool has_orderno() const;
  void clear_orderno();
  static const int kOrdernoFieldNumber = 4;
  const ::std::string& orderno() const;
  void set_orderno(const ::std::string& value);
  #if LANG_CXX11
  void set_orderno(::std::string&& value);
  #endif
  void set_orderno(const char* value);
  void set_orderno(const char* value, size_t size);
  ::std::string* mutable_orderno();
  ::std::string* release_orderno();
  void set_allocated_orderno(::std::string* orderno);

  // optional string ret_message = 6;
  bool has_ret_message() const;
  void clear_ret_message();
  static const int kRetMessageFieldNumber = 6;
  const ::std::string& ret_message() const;
  void set_ret_message(const ::std::string& value);
  #if LANG_CXX11
  void set_ret_message(::std::string&& value);
  #endif
  void set_ret_message(const char* value);
  void set_ret_message(const char* value, size_t size);
  ::std::string* mutable_ret_message();
  ::std::string* release_ret_message();
  void set_allocated_ret_message(::std::string* ret_message);

  // optional string name = 7;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 7;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required int64 price = 2;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 2;
  ::google::protobuf::int64 price() const;
  void set_price(::google::protobuf::int64 value);

  // required uint32 qty = 3;
  bool has_qty() const;
  void clear_qty();
  static const int kQtyFieldNumber = 3;
  ::google::protobuf::uint32 qty() const;
  void set_qty(::google::protobuf::uint32 value);

  // optional int32 ret_code = 5;
  bool has_ret_code() const;
  void clear_ret_code();
  static const int kRetCodeFieldNumber = 5;
  ::google::protobuf::int32 ret_code() const;
  void set_ret_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.StockOrdersCreateResp.OrderList)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_price();
  void clear_has_price();
  void set_has_qty();
  void clear_has_qty();
  void set_has_orderno();
  void clear_has_orderno();
  void set_has_ret_code();
  void clear_has_ret_code();
  void set_has_ret_message();
  void clear_has_ret_message();
  void set_has_name();
  void clear_has_name();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr orderno_;
  ::google::protobuf::internal::ArenaStringPtr ret_message_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int64 price_;
  ::google::protobuf::uint32 qty_;
  ::google::protobuf::int32 ret_code_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StockOrdersCreateResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.StockOrdersCreateResp) */ {
 public:
  StockOrdersCreateResp();
  virtual ~StockOrdersCreateResp();

  StockOrdersCreateResp(const StockOrdersCreateResp& from);

  inline StockOrdersCreateResp& operator=(const StockOrdersCreateResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StockOrdersCreateResp(StockOrdersCreateResp&& from) noexcept
    : StockOrdersCreateResp() {
    *this = ::std::move(from);
  }

  inline StockOrdersCreateResp& operator=(StockOrdersCreateResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockOrdersCreateResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StockOrdersCreateResp* internal_default_instance() {
    return reinterpret_cast<const StockOrdersCreateResp*>(
               &_StockOrdersCreateResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(StockOrdersCreateResp* other);
  friend void swap(StockOrdersCreateResp& a, StockOrdersCreateResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StockOrdersCreateResp* New() const final {
    return CreateMaybeMessage<StockOrdersCreateResp>(NULL);
  }

  StockOrdersCreateResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StockOrdersCreateResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StockOrdersCreateResp& from);
  void MergeFrom(const StockOrdersCreateResp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StockOrdersCreateResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StockOrdersCreateResp_OrderList OrderList;

  // accessors -------------------------------------------------------

  // repeated .autotrade.StockOrdersCreateResp.OrderList order_list = 12;
  int order_list_size() const;
  void clear_order_list();
  static const int kOrderListFieldNumber = 12;
  ::autotrade::StockOrdersCreateResp_OrderList* mutable_order_list(int index);
  ::google::protobuf::RepeatedPtrField< ::autotrade::StockOrdersCreateResp_OrderList >*
      mutable_order_list();
  const ::autotrade::StockOrdersCreateResp_OrderList& order_list(int index) const;
  ::autotrade::StockOrdersCreateResp_OrderList* add_order_list();
  const ::google::protobuf::RepeatedPtrField< ::autotrade::StockOrdersCreateResp_OrderList >&
      order_list() const;

  // optional string request_id = 2;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 2;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // required string order_id = 3;
  bool has_order_id() const;
  void clear_order_id();
  static const int kOrderIdFieldNumber = 3;
  const ::std::string& order_id() const;
  void set_order_id(const ::std::string& value);
  #if LANG_CXX11
  void set_order_id(::std::string&& value);
  #endif
  void set_order_id(const char* value);
  void set_order_id(const char* value, size_t size);
  ::std::string* mutable_order_id();
  ::std::string* release_order_id();
  void set_allocated_order_id(::std::string* order_id);

  // required string order_group = 4;
  bool has_order_group() const;
  void clear_order_group();
  static const int kOrderGroupFieldNumber = 4;
  const ::std::string& order_group() const;
  void set_order_group(const ::std::string& value);
  #if LANG_CXX11
  void set_order_group(::std::string&& value);
  #endif
  void set_order_group(const char* value);
  void set_order_group(const char* value, size_t size);
  ::std::string* mutable_order_group();
  ::std::string* release_order_group();
  void set_allocated_order_group(::std::string* order_group);

  // optional string trader_id = 5;
  bool has_trader_id() const;
  void clear_trader_id();
  static const int kTraderIdFieldNumber = 5;
  const ::std::string& trader_id() const;
  void set_trader_id(const ::std::string& value);
  #if LANG_CXX11
  void set_trader_id(::std::string&& value);
  #endif
  void set_trader_id(const char* value);
  void set_trader_id(const char* value, size_t size);
  ::std::string* mutable_trader_id();
  ::std::string* release_trader_id();
  void set_allocated_trader_id(::std::string* trader_id);

  // optional string robot_id = 6;
  bool has_robot_id() const;
  void clear_robot_id();
  static const int kRobotIdFieldNumber = 6;
  const ::std::string& robot_id() const;
  void set_robot_id(const ::std::string& value);
  #if LANG_CXX11
  void set_robot_id(::std::string&& value);
  #endif
  void set_robot_id(const char* value);
  void set_robot_id(const char* value, size_t size);
  ::std::string* mutable_robot_id();
  ::std::string* release_robot_id();
  void set_allocated_robot_id(::std::string* robot_id);

  // required string fund_id = 9;
  bool has_fund_id() const;
  void clear_fund_id();
  static const int kFundIdFieldNumber = 9;
  const ::std::string& fund_id() const;
  void set_fund_id(const ::std::string& value);
  #if LANG_CXX11
  void set_fund_id(::std::string&& value);
  #endif
  void set_fund_id(const char* value);
  void set_fund_id(const char* value, size_t size);
  ::std::string* mutable_fund_id();
  ::std::string* release_fund_id();
  void set_allocated_fund_id(::std::string* fund_id);

  // optional string account_name = 13 [default = ""];
  bool has_account_name() const;
  void clear_account_name();
  static const int kAccountNameFieldNumber = 13;
  const ::std::string& account_name() const;
  void set_account_name(const ::std::string& value);
  #if LANG_CXX11
  void set_account_name(::std::string&& value);
  #endif
  void set_account_name(const char* value);
  void set_account_name(const char* value, size_t size);
  ::std::string* mutable_account_name();
  ::std::string* release_account_name();
  void set_allocated_account_name(::std::string* account_name);

  // optional uint32 data_date = 7;
  bool has_data_date() const;
  void clear_data_date();
  static const int kDataDateFieldNumber = 7;
  ::google::protobuf::uint32 data_date() const;
  void set_data_date(::google::protobuf::uint32 value);

  // required uint32 data_time = 8;
  bool has_data_time() const;
  void clear_data_time();
  static const int kDataTimeFieldNumber = 8;
  ::google::protobuf::uint32 data_time() const;
  void set_data_time(::google::protobuf::uint32 value);

  // optional int64 market = 10;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 10;
  ::google::protobuf::int64 market() const;
  void set_market(::google::protobuf::int64 value);

  // optional int64 bsflag = 11;
  bool has_bsflag() const;
  void clear_bsflag();
  static const int kBsflagFieldNumber = 11;
  ::google::protobuf::int64 bsflag() const;
  void set_bsflag(::google::protobuf::int64 value);

  // optional int32 funcid = 1 [default = 11101014];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.StockOrdersCreateResp)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_order_id();
  void clear_has_order_id();
  void set_has_order_group();
  void clear_has_order_group();
  void set_has_trader_id();
  void clear_has_trader_id();
  void set_has_robot_id();
  void clear_has_robot_id();
  void set_has_data_date();
  void clear_has_data_date();
  void set_has_data_time();
  void clear_has_data_time();
  void set_has_fund_id();
  void clear_has_fund_id();
  void set_has_market();
  void clear_has_market();
  void set_has_bsflag();
  void clear_has_bsflag();
  void set_has_account_name();
  void clear_has_account_name();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::autotrade::StockOrdersCreateResp_OrderList > order_list_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr order_id_;
  ::google::protobuf::internal::ArenaStringPtr order_group_;
  ::google::protobuf::internal::ArenaStringPtr trader_id_;
  ::google::protobuf::internal::ArenaStringPtr robot_id_;
  ::google::protobuf::internal::ArenaStringPtr fund_id_;
  ::google::protobuf::internal::ArenaStringPtr account_name_;
  ::google::protobuf::uint32 data_date_;
  ::google::protobuf::uint32 data_time_;
  ::google::protobuf::int64 market_;
  ::google::protobuf::int64 bsflag_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StockDeleteReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.StockDeleteReqt) */ {
 public:
  StockDeleteReqt();
  virtual ~StockDeleteReqt();

  StockDeleteReqt(const StockDeleteReqt& from);

  inline StockDeleteReqt& operator=(const StockDeleteReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StockDeleteReqt(StockDeleteReqt&& from) noexcept
    : StockDeleteReqt() {
    *this = ::std::move(from);
  }

  inline StockDeleteReqt& operator=(StockDeleteReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockDeleteReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StockDeleteReqt* internal_default_instance() {
    return reinterpret_cast<const StockDeleteReqt*>(
               &_StockDeleteReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(StockDeleteReqt* other);
  friend void swap(StockDeleteReqt& a, StockDeleteReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StockDeleteReqt* New() const final {
    return CreateMaybeMessage<StockDeleteReqt>(NULL);
  }

  StockDeleteReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StockDeleteReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StockDeleteReqt& from);
  void MergeFrom(const StockDeleteReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StockDeleteReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string order_group = 2;
  bool has_order_group() const;
  void clear_order_group();
  static const int kOrderGroupFieldNumber = 2;
  const ::std::string& order_group() const;
  void set_order_group(const ::std::string& value);
  #if LANG_CXX11
  void set_order_group(::std::string&& value);
  #endif
  void set_order_group(const char* value);
  void set_order_group(const char* value, size_t size);
  ::std::string* mutable_order_group();
  ::std::string* release_order_group();
  void set_allocated_order_group(::std::string* order_group);

  // optional string request_id = 4;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 4;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional string fund_id = 6;
  bool has_fund_id() const;
  void clear_fund_id();
  static const int kFundIdFieldNumber = 6;
  const ::std::string& fund_id() const;
  void set_fund_id(const ::std::string& value);
  #if LANG_CXX11
  void set_fund_id(::std::string&& value);
  #endif
  void set_fund_id(const char* value);
  void set_fund_id(const char* value, size_t size);
  ::std::string* mutable_fund_id();
  ::std::string* release_fund_id();
  void set_allocated_fund_id(::std::string* fund_id);

  // optional string session_id = 7;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 7;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // optional string trader_id = 8;
  bool has_trader_id() const;
  void clear_trader_id();
  static const int kTraderIdFieldNumber = 8;
  const ::std::string& trader_id() const;
  void set_trader_id(const ::std::string& value);
  #if LANG_CXX11
  void set_trader_id(::std::string&& value);
  #endif
  void set_trader_id(const char* value);
  void set_trader_id(const char* value, size_t size);
  ::std::string* mutable_trader_id();
  ::std::string* release_trader_id();
  void set_allocated_trader_id(::std::string* trader_id);

  // required uint32 market = 3;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 3;
  ::google::protobuf::uint32 market() const;
  void set_market(::google::protobuf::uint32 value);

  // optional int32 asset_prop = 5;
  bool has_asset_prop() const;
  void clear_asset_prop();
  static const int kAssetPropFieldNumber = 5;
  ::google::protobuf::int32 asset_prop() const;
  void set_asset_prop(::google::protobuf::int32 value);

  // optional int32 funcid = 1 [default = 11001004];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.StockDeleteReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_order_group();
  void clear_has_order_group();
  void set_has_market();
  void clear_has_market();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_asset_prop();
  void clear_has_asset_prop();
  void set_has_fund_id();
  void clear_has_fund_id();
  void set_has_session_id();
  void clear_has_session_id();
  void set_has_trader_id();
  void clear_has_trader_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr order_group_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr fund_id_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::internal::ArenaStringPtr trader_id_;
  ::google::protobuf::uint32 market_;
  ::google::protobuf::int32 asset_prop_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StockDeleteResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.StockDeleteResp) */ {
 public:
  StockDeleteResp();
  virtual ~StockDeleteResp();

  StockDeleteResp(const StockDeleteResp& from);

  inline StockDeleteResp& operator=(const StockDeleteResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StockDeleteResp(StockDeleteResp&& from) noexcept
    : StockDeleteResp() {
    *this = ::std::move(from);
  }

  inline StockDeleteResp& operator=(StockDeleteResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockDeleteResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StockDeleteResp* internal_default_instance() {
    return reinterpret_cast<const StockDeleteResp*>(
               &_StockDeleteResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(StockDeleteResp* other);
  friend void swap(StockDeleteResp& a, StockDeleteResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StockDeleteResp* New() const final {
    return CreateMaybeMessage<StockDeleteResp>(NULL);
  }

  StockDeleteResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StockDeleteResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StockDeleteResp& from);
  void MergeFrom(const StockDeleteResp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StockDeleteResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string order_group = 2;
  bool has_order_group() const;
  void clear_order_group();
  static const int kOrderGroupFieldNumber = 2;
  const ::std::string& order_group() const;
  void set_order_group(const ::std::string& value);
  #if LANG_CXX11
  void set_order_group(::std::string&& value);
  #endif
  void set_order_group(const char* value);
  void set_order_group(const char* value, size_t size);
  ::std::string* mutable_order_group();
  ::std::string* release_order_group();
  void set_allocated_order_group(::std::string* order_group);

  // optional string request_id = 3;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional int32 funcid = 1 [default = 11101004];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.StockDeleteResp)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_order_group();
  void clear_has_order_group();
  void set_has_request_id();
  void clear_has_request_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr order_group_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StockDeletesReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.StockDeletesReqt) */ {
 public:
  StockDeletesReqt();
  virtual ~StockDeletesReqt();

  StockDeletesReqt(const StockDeletesReqt& from);

  inline StockDeletesReqt& operator=(const StockDeletesReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StockDeletesReqt(StockDeletesReqt&& from) noexcept
    : StockDeletesReqt() {
    *this = ::std::move(from);
  }

  inline StockDeletesReqt& operator=(StockDeletesReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockDeletesReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StockDeletesReqt* internal_default_instance() {
    return reinterpret_cast<const StockDeletesReqt*>(
               &_StockDeletesReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(StockDeletesReqt* other);
  friend void swap(StockDeletesReqt& a, StockDeletesReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StockDeletesReqt* New() const final {
    return CreateMaybeMessage<StockDeletesReqt>(NULL);
  }

  StockDeletesReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StockDeletesReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StockDeletesReqt& from);
  void MergeFrom(const StockDeletesReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StockDeletesReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string order_group = 2;
  bool has_order_group() const;
  void clear_order_group();
  static const int kOrderGroupFieldNumber = 2;
  const ::std::string& order_group() const;
  void set_order_group(const ::std::string& value);
  #if LANG_CXX11
  void set_order_group(::std::string&& value);
  #endif
  void set_order_group(const char* value);
  void set_order_group(const char* value, size_t size);
  ::std::string* mutable_order_group();
  ::std::string* release_order_group();
  void set_allocated_order_group(::std::string* order_group);

  // optional string request_id = 4;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 4;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional string fund_id = 6;
  bool has_fund_id() const;
  void clear_fund_id();
  static const int kFundIdFieldNumber = 6;
  const ::std::string& fund_id() const;
  void set_fund_id(const ::std::string& value);
  #if LANG_CXX11
  void set_fund_id(::std::string&& value);
  #endif
  void set_fund_id(const char* value);
  void set_fund_id(const char* value, size_t size);
  ::std::string* mutable_fund_id();
  ::std::string* release_fund_id();
  void set_allocated_fund_id(::std::string* fund_id);

  // optional string session_id = 7;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 7;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // optional string trader_id = 8;
  bool has_trader_id() const;
  void clear_trader_id();
  static const int kTraderIdFieldNumber = 8;
  const ::std::string& trader_id() const;
  void set_trader_id(const ::std::string& value);
  #if LANG_CXX11
  void set_trader_id(::std::string&& value);
  #endif
  void set_trader_id(const char* value);
  void set_trader_id(const char* value, size_t size);
  ::std::string* mutable_trader_id();
  ::std::string* release_trader_id();
  void set_allocated_trader_id(::std::string* trader_id);

  // required uint32 market = 3;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 3;
  ::google::protobuf::uint32 market() const;
  void set_market(::google::protobuf::uint32 value);

  // optional int32 asset_prop = 5;
  bool has_asset_prop() const;
  void clear_asset_prop();
  static const int kAssetPropFieldNumber = 5;
  ::google::protobuf::int32 asset_prop() const;
  void set_asset_prop(::google::protobuf::int32 value);

  // optional int32 funcid = 1 [default = 11001005];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.StockDeletesReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_order_group();
  void clear_has_order_group();
  void set_has_market();
  void clear_has_market();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_asset_prop();
  void clear_has_asset_prop();
  void set_has_fund_id();
  void clear_has_fund_id();
  void set_has_session_id();
  void clear_has_session_id();
  void set_has_trader_id();
  void clear_has_trader_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr order_group_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr fund_id_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::internal::ArenaStringPtr trader_id_;
  ::google::protobuf::uint32 market_;
  ::google::protobuf::int32 asset_prop_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StockDeletesResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.StockDeletesResp) */ {
 public:
  StockDeletesResp();
  virtual ~StockDeletesResp();

  StockDeletesResp(const StockDeletesResp& from);

  inline StockDeletesResp& operator=(const StockDeletesResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StockDeletesResp(StockDeletesResp&& from) noexcept
    : StockDeletesResp() {
    *this = ::std::move(from);
  }

  inline StockDeletesResp& operator=(StockDeletesResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockDeletesResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StockDeletesResp* internal_default_instance() {
    return reinterpret_cast<const StockDeletesResp*>(
               &_StockDeletesResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(StockDeletesResp* other);
  friend void swap(StockDeletesResp& a, StockDeletesResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StockDeletesResp* New() const final {
    return CreateMaybeMessage<StockDeletesResp>(NULL);
  }

  StockDeletesResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StockDeletesResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StockDeletesResp& from);
  void MergeFrom(const StockDeletesResp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StockDeletesResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string order_group = 2;
  bool has_order_group() const;
  void clear_order_group();
  static const int kOrderGroupFieldNumber = 2;
  const ::std::string& order_group() const;
  void set_order_group(const ::std::string& value);
  #if LANG_CXX11
  void set_order_group(::std::string&& value);
  #endif
  void set_order_group(const char* value);
  void set_order_group(const char* value, size_t size);
  ::std::string* mutable_order_group();
  ::std::string* release_order_group();
  void set_allocated_order_group(::std::string* order_group);

  // optional string request_id = 3;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional int32 funcid = 1 [default = 11101005];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.StockDeletesResp)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_order_group();
  void clear_has_order_group();
  void set_has_request_id();
  void clear_has_request_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr order_group_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StockCreateRedeemReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.StockCreateRedeemReqt) */ {
 public:
  StockCreateRedeemReqt();
  virtual ~StockCreateRedeemReqt();

  StockCreateRedeemReqt(const StockCreateRedeemReqt& from);

  inline StockCreateRedeemReqt& operator=(const StockCreateRedeemReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StockCreateRedeemReqt(StockCreateRedeemReqt&& from) noexcept
    : StockCreateRedeemReqt() {
    *this = ::std::move(from);
  }

  inline StockCreateRedeemReqt& operator=(StockCreateRedeemReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockCreateRedeemReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StockCreateRedeemReqt* internal_default_instance() {
    return reinterpret_cast<const StockCreateRedeemReqt*>(
               &_StockCreateRedeemReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(StockCreateRedeemReqt* other);
  friend void swap(StockCreateRedeemReqt& a, StockCreateRedeemReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StockCreateRedeemReqt* New() const final {
    return CreateMaybeMessage<StockCreateRedeemReqt>(NULL);
  }

  StockCreateRedeemReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StockCreateRedeemReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StockCreateRedeemReqt& from);
  void MergeFrom(const StockCreateRedeemReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StockCreateRedeemReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string code = 2;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string request_id = 8;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 8;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional string order_id = 12;
  bool has_order_id() const;
  void clear_order_id();
  static const int kOrderIdFieldNumber = 12;
  const ::std::string& order_id() const;
  void set_order_id(const ::std::string& value);
  #if LANG_CXX11
  void set_order_id(::std::string&& value);
  #endif
  void set_order_id(const char* value);
  void set_order_id(const char* value, size_t size);
  ::std::string* mutable_order_id();
  ::std::string* release_order_id();
  void set_allocated_order_id(::std::string* order_id);

  // optional string robot_id = 13;
  bool has_robot_id() const;
  void clear_robot_id();
  static const int kRobotIdFieldNumber = 13;
  const ::std::string& robot_id() const;
  void set_robot_id(const ::std::string& value);
  #if LANG_CXX11
  void set_robot_id(::std::string&& value);
  #endif
  void set_robot_id(const char* value);
  void set_robot_id(const char* value, size_t size);
  ::std::string* mutable_robot_id();
  ::std::string* release_robot_id();
  void set_allocated_robot_id(::std::string* robot_id);

  // optional string trader_id = 14;
  bool has_trader_id() const;
  void clear_trader_id();
  static const int kTraderIdFieldNumber = 14;
  const ::std::string& trader_id() const;
  void set_trader_id(const ::std::string& value);
  #if LANG_CXX11
  void set_trader_id(::std::string&& value);
  #endif
  void set_trader_id(const char* value);
  void set_trader_id(const char* value, size_t size);
  ::std::string* mutable_trader_id();
  ::std::string* release_trader_id();
  void set_allocated_trader_id(::std::string* trader_id);

  // optional string fund_id = 15;
  bool has_fund_id() const;
  void clear_fund_id();
  static const int kFundIdFieldNumber = 15;
  const ::std::string& fund_id() const;
  void set_fund_id(const ::std::string& value);
  #if LANG_CXX11
  void set_fund_id(::std::string&& value);
  #endif
  void set_fund_id(const char* value);
  void set_fund_id(const char* value, size_t size);
  ::std::string* mutable_fund_id();
  ::std::string* release_fund_id();
  void set_allocated_fund_id(::std::string* fund_id);

  // optional string session_id = 16;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 16;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // required int64 qty = 3;
  bool has_qty() const;
  void clear_qty();
  static const int kQtyFieldNumber = 3;
  ::google::protobuf::int64 qty() const;
  void set_qty(::google::protobuf::int64 value);

  // required int64 basket_qty = 4;
  bool has_basket_qty() const;
  void clear_basket_qty();
  static const int kBasketQtyFieldNumber = 4;
  ::google::protobuf::int64 basket_qty() const;
  void set_basket_qty(::google::protobuf::int64 value);

  // required uint32 bsflag = 5;
  bool has_bsflag() const;
  void clear_bsflag();
  static const int kBsflagFieldNumber = 5;
  ::google::protobuf::uint32 bsflag() const;
  void set_bsflag(::google::protobuf::uint32 value);

  // required uint32 market = 6;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 6;
  ::google::protobuf::uint32 market() const;
  void set_market(::google::protobuf::uint32 value);

  // optional int64 price = 7;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 7;
  ::google::protobuf::int64 price() const;
  void set_price(::google::protobuf::int64 value);

  // optional int64 request_time = 9 [default = 0];
  bool has_request_time() const;
  void clear_request_time();
  static const int kRequestTimeFieldNumber = 9;
  ::google::protobuf::int64 request_time() const;
  void set_request_time(::google::protobuf::int64 value);

  // optional int64 request_date = 11 [default = 0];
  bool has_request_date() const;
  void clear_request_date();
  static const int kRequestDateFieldNumber = 11;
  ::google::protobuf::int64 request_date() const;
  void set_request_date(::google::protobuf::int64 value);

  // optional int32 funcid = 1 [default = 11001003];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // optional int64 active_interval = 10 [default = 1000];
  bool has_active_interval() const;
  void clear_active_interval();
  static const int kActiveIntervalFieldNumber = 10;
  ::google::protobuf::int64 active_interval() const;
  void set_active_interval(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:autotrade.StockCreateRedeemReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_code();
  void clear_has_code();
  void set_has_qty();
  void clear_has_qty();
  void set_has_basket_qty();
  void clear_has_basket_qty();
  void set_has_bsflag();
  void clear_has_bsflag();
  void set_has_market();
  void clear_has_market();
  void set_has_price();
  void clear_has_price();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_request_time();
  void clear_has_request_time();
  void set_has_active_interval();
  void clear_has_active_interval();
  void set_has_request_date();
  void clear_has_request_date();
  void set_has_order_id();
  void clear_has_order_id();
  void set_has_robot_id();
  void clear_has_robot_id();
  void set_has_trader_id();
  void clear_has_trader_id();
  void set_has_fund_id();
  void clear_has_fund_id();
  void set_has_session_id();
  void clear_has_session_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr order_id_;
  ::google::protobuf::internal::ArenaStringPtr robot_id_;
  ::google::protobuf::internal::ArenaStringPtr trader_id_;
  ::google::protobuf::internal::ArenaStringPtr fund_id_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::int64 qty_;
  ::google::protobuf::int64 basket_qty_;
  ::google::protobuf::uint32 bsflag_;
  ::google::protobuf::uint32 market_;
  ::google::protobuf::int64 price_;
  ::google::protobuf::int64 request_time_;
  ::google::protobuf::int64 request_date_;
  ::google::protobuf::int32 funcid_;
  ::google::protobuf::int64 active_interval_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StockCreateRedeemResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.StockCreateRedeemResp) */ {
 public:
  StockCreateRedeemResp();
  virtual ~StockCreateRedeemResp();

  StockCreateRedeemResp(const StockCreateRedeemResp& from);

  inline StockCreateRedeemResp& operator=(const StockCreateRedeemResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StockCreateRedeemResp(StockCreateRedeemResp&& from) noexcept
    : StockCreateRedeemResp() {
    *this = ::std::move(from);
  }

  inline StockCreateRedeemResp& operator=(StockCreateRedeemResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockCreateRedeemResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StockCreateRedeemResp* internal_default_instance() {
    return reinterpret_cast<const StockCreateRedeemResp*>(
               &_StockCreateRedeemResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(StockCreateRedeemResp* other);
  friend void swap(StockCreateRedeemResp& a, StockCreateRedeemResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StockCreateRedeemResp* New() const final {
    return CreateMaybeMessage<StockCreateRedeemResp>(NULL);
  }

  StockCreateRedeemResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StockCreateRedeemResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StockCreateRedeemResp& from);
  void MergeFrom(const StockCreateRedeemResp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StockCreateRedeemResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string order_group = 2;
  bool has_order_group() const;
  void clear_order_group();
  static const int kOrderGroupFieldNumber = 2;
  const ::std::string& order_group() const;
  void set_order_group(const ::std::string& value);
  #if LANG_CXX11
  void set_order_group(::std::string&& value);
  #endif
  void set_order_group(const char* value);
  void set_order_group(const char* value, size_t size);
  ::std::string* mutable_order_group();
  ::std::string* release_order_group();
  void set_allocated_order_group(::std::string* order_group);

  // optional string request_id = 3;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // required string order_id = 4;
  bool has_order_id() const;
  void clear_order_id();
  static const int kOrderIdFieldNumber = 4;
  const ::std::string& order_id() const;
  void set_order_id(const ::std::string& value);
  #if LANG_CXX11
  void set_order_id(::std::string&& value);
  #endif
  void set_order_id(const char* value);
  void set_order_id(const char* value, size_t size);
  ::std::string* mutable_order_id();
  ::std::string* release_order_id();
  void set_allocated_order_id(::std::string* order_id);

  // optional int32 funcid = 1 [default = 11101003];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.StockCreateRedeemResp)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_order_group();
  void clear_has_order_group();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_order_id();
  void clear_has_order_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr order_group_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr order_id_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StockQueryOrderReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.StockQueryOrderReqt) */ {
 public:
  StockQueryOrderReqt();
  virtual ~StockQueryOrderReqt();

  StockQueryOrderReqt(const StockQueryOrderReqt& from);

  inline StockQueryOrderReqt& operator=(const StockQueryOrderReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StockQueryOrderReqt(StockQueryOrderReqt&& from) noexcept
    : StockQueryOrderReqt() {
    *this = ::std::move(from);
  }

  inline StockQueryOrderReqt& operator=(StockQueryOrderReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockQueryOrderReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StockQueryOrderReqt* internal_default_instance() {
    return reinterpret_cast<const StockQueryOrderReqt*>(
               &_StockQueryOrderReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(StockQueryOrderReqt* other);
  friend void swap(StockQueryOrderReqt& a, StockQueryOrderReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StockQueryOrderReqt* New() const final {
    return CreateMaybeMessage<StockQueryOrderReqt>(NULL);
  }

  StockQueryOrderReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StockQueryOrderReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StockQueryOrderReqt& from);
  void MergeFrom(const StockQueryOrderReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StockQueryOrderReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StockQueryOrderReqt_QueryType QueryType;
  static const QueryType Type_ONCE =
    StockQueryOrderReqt_QueryType_Type_ONCE;
  static const QueryType Type_MORE =
    StockQueryOrderReqt_QueryType_Type_MORE;
  static const QueryType Type_ALL =
    StockQueryOrderReqt_QueryType_Type_ALL;
  static inline bool QueryType_IsValid(int value) {
    return StockQueryOrderReqt_QueryType_IsValid(value);
  }
  static const QueryType QueryType_MIN =
    StockQueryOrderReqt_QueryType_QueryType_MIN;
  static const QueryType QueryType_MAX =
    StockQueryOrderReqt_QueryType_QueryType_MAX;
  static const int QueryType_ARRAYSIZE =
    StockQueryOrderReqt_QueryType_QueryType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  QueryType_descriptor() {
    return StockQueryOrderReqt_QueryType_descriptor();
  }
  static inline const ::std::string& QueryType_Name(QueryType value) {
    return StockQueryOrderReqt_QueryType_Name(value);
  }
  static inline bool QueryType_Parse(const ::std::string& name,
      QueryType* value) {
    return StockQueryOrderReqt_QueryType_Parse(name, value);
  }

  typedef StockQueryOrderReqt_QueryFlag QueryFlag;
  static const QueryFlag Type_Query_ALL =
    StockQueryOrderReqt_QueryFlag_Type_Query_ALL;
  static const QueryFlag Type_NO_DELETE =
    StockQueryOrderReqt_QueryFlag_Type_NO_DELETE;
  static const QueryFlag Type_DELETE =
    StockQueryOrderReqt_QueryFlag_Type_DELETE;
  static inline bool QueryFlag_IsValid(int value) {
    return StockQueryOrderReqt_QueryFlag_IsValid(value);
  }
  static const QueryFlag QueryFlag_MIN =
    StockQueryOrderReqt_QueryFlag_QueryFlag_MIN;
  static const QueryFlag QueryFlag_MAX =
    StockQueryOrderReqt_QueryFlag_QueryFlag_MAX;
  static const int QueryFlag_ARRAYSIZE =
    StockQueryOrderReqt_QueryFlag_QueryFlag_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  QueryFlag_descriptor() {
    return StockQueryOrderReqt_QueryFlag_descriptor();
  }
  static inline const ::std::string& QueryFlag_Name(QueryFlag value) {
    return StockQueryOrderReqt_QueryFlag_Name(value);
  }
  static inline bool QueryFlag_Parse(const ::std::string& name,
      QueryFlag* value) {
    return StockQueryOrderReqt_QueryFlag_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string order_group = 2 [default = ""];
  bool has_order_group() const;
  void clear_order_group();
  static const int kOrderGroupFieldNumber = 2;
  const ::std::string& order_group() const;
  void set_order_group(const ::std::string& value);
  #if LANG_CXX11
  void set_order_group(::std::string&& value);
  #endif
  void set_order_group(const char* value);
  void set_order_group(const char* value, size_t size);
  ::std::string* mutable_order_group();
  ::std::string* release_order_group();
  void set_allocated_order_group(::std::string* order_group);

  // optional string start_pos = 5 [default = ""];
  bool has_start_pos() const;
  void clear_start_pos();
  static const int kStartPosFieldNumber = 5;
  const ::std::string& start_pos() const;
  void set_start_pos(const ::std::string& value);
  #if LANG_CXX11
  void set_start_pos(::std::string&& value);
  #endif
  void set_start_pos(const char* value);
  void set_start_pos(const char* value, size_t size);
  ::std::string* mutable_start_pos();
  ::std::string* release_start_pos();
  void set_allocated_start_pos(::std::string* start_pos);

  // optional string request_id = 6;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 6;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional string fund_id = 12;
  bool has_fund_id() const;
  void clear_fund_id();
  static const int kFundIdFieldNumber = 12;
  const ::std::string& fund_id() const;
  void set_fund_id(const ::std::string& value);
  #if LANG_CXX11
  void set_fund_id(::std::string&& value);
  #endif
  void set_fund_id(const char* value);
  void set_fund_id(const char* value, size_t size);
  ::std::string* mutable_fund_id();
  ::std::string* release_fund_id();
  void set_allocated_fund_id(::std::string* fund_id);

  // optional string session_id = 13;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 13;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // optional int64 request_time = 10 [default = 0];
  bool has_request_time() const;
  void clear_request_time();
  static const int kRequestTimeFieldNumber = 10;
  ::google::protobuf::int64 request_time() const;
  void set_request_time(::google::protobuf::int64 value);

  // optional .autotrade.StockQueryOrderReqt.QueryType query_type = 3 [default = Type_ONCE];
  bool has_query_type() const;
  void clear_query_type();
  static const int kQueryTypeFieldNumber = 3;
  ::autotrade::StockQueryOrderReqt_QueryType query_type() const;
  void set_query_type(::autotrade::StockQueryOrderReqt_QueryType value);

  // optional int32 funcid = 1 [default = 11002002];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // optional .autotrade.StockQueryOrderReqt.QueryFlag query_flag = 4 [default = Type_NO_DELETE];
  bool has_query_flag() const;
  void clear_query_flag();
  static const int kQueryFlagFieldNumber = 4;
  ::autotrade::StockQueryOrderReqt_QueryFlag query_flag() const;
  void set_query_flag(::autotrade::StockQueryOrderReqt_QueryFlag value);

  // optional int64 active_interval = 11 [default = 1000];
  bool has_active_interval() const;
  void clear_active_interval();
  static const int kActiveIntervalFieldNumber = 11;
  ::google::protobuf::int64 active_interval() const;
  void set_active_interval(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:autotrade.StockQueryOrderReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_order_group();
  void clear_has_order_group();
  void set_has_query_type();
  void clear_has_query_type();
  void set_has_query_flag();
  void clear_has_query_flag();
  void set_has_start_pos();
  void clear_has_start_pos();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_request_time();
  void clear_has_request_time();
  void set_has_active_interval();
  void clear_has_active_interval();
  void set_has_fund_id();
  void clear_has_fund_id();
  void set_has_session_id();
  void clear_has_session_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr order_group_;
  ::google::protobuf::internal::ArenaStringPtr start_pos_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr fund_id_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::int64 request_time_;
  int query_type_;
  ::google::protobuf::int32 funcid_;
  int query_flag_;
  ::google::protobuf::int64 active_interval_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StockQueryOrderResp_OrderDetail : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.StockQueryOrderResp.OrderDetail) */ {
 public:
  StockQueryOrderResp_OrderDetail();
  virtual ~StockQueryOrderResp_OrderDetail();

  StockQueryOrderResp_OrderDetail(const StockQueryOrderResp_OrderDetail& from);

  inline StockQueryOrderResp_OrderDetail& operator=(const StockQueryOrderResp_OrderDetail& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StockQueryOrderResp_OrderDetail(StockQueryOrderResp_OrderDetail&& from) noexcept
    : StockQueryOrderResp_OrderDetail() {
    *this = ::std::move(from);
  }

  inline StockQueryOrderResp_OrderDetail& operator=(StockQueryOrderResp_OrderDetail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockQueryOrderResp_OrderDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StockQueryOrderResp_OrderDetail* internal_default_instance() {
    return reinterpret_cast<const StockQueryOrderResp_OrderDetail*>(
               &_StockQueryOrderResp_OrderDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(StockQueryOrderResp_OrderDetail* other);
  friend void swap(StockQueryOrderResp_OrderDetail& a, StockQueryOrderResp_OrderDetail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StockQueryOrderResp_OrderDetail* New() const final {
    return CreateMaybeMessage<StockQueryOrderResp_OrderDetail>(NULL);
  }

  StockQueryOrderResp_OrderDetail* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StockQueryOrderResp_OrderDetail>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StockQueryOrderResp_OrderDetail& from);
  void MergeFrom(const StockQueryOrderResp_OrderDetail& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StockQueryOrderResp_OrderDetail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string orderno = 2;
  bool has_orderno() const;
  void clear_orderno();
  static const int kOrdernoFieldNumber = 2;
  const ::std::string& orderno() const;
  void set_orderno(const ::std::string& value);
  #if LANG_CXX11
  void set_orderno(::std::string&& value);
  #endif
  void set_orderno(const char* value);
  void set_orderno(const char* value, size_t size);
  ::std::string* mutable_orderno();
  ::std::string* release_orderno();
  void set_allocated_orderno(::std::string* orderno);

  // optional string orderid = 4;
  bool has_orderid() const;
  void clear_orderid();
  static const int kOrderidFieldNumber = 4;
  const ::std::string& orderid() const;
  void set_orderid(const ::std::string& value);
  #if LANG_CXX11
  void set_orderid(::std::string&& value);
  #endif
  void set_orderid(const char* value);
  void set_orderid(const char* value, size_t size);
  ::std::string* mutable_orderid();
  ::std::string* release_orderid();
  void set_allocated_orderid(::std::string* orderid);

  // required string code = 8;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 8;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string code_name = 16;
  bool has_code_name() const;
  void clear_code_name();
  static const int kCodeNameFieldNumber = 16;
  const ::std::string& code_name() const;
  void set_code_name(const ::std::string& value);
  #if LANG_CXX11
  void set_code_name(::std::string&& value);
  #endif
  void set_code_name(const char* value);
  void set_code_name(const char* value, size_t size);
  ::std::string* mutable_code_name();
  ::std::string* release_code_name();
  void set_allocated_code_name(::std::string* code_name);

  // optional string order_group = 18;
  bool has_order_group() const;
  void clear_order_group();
  static const int kOrderGroupFieldNumber = 18;
  const ::std::string& order_group() const;
  void set_order_group(const ::std::string& value);
  #if LANG_CXX11
  void set_order_group(::std::string&& value);
  #endif
  void set_order_group(const char* value);
  void set_order_group(const char* value, size_t size);
  ::std::string* mutable_order_group();
  ::std::string* release_order_group();
  void set_allocated_order_group(::std::string* order_group);

  // optional string info = 19;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 19;
  const ::std::string& info() const;
  void set_info(const ::std::string& value);
  #if LANG_CXX11
  void set_info(::std::string&& value);
  #endif
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  ::std::string* mutable_info();
  ::std::string* release_info();
  void set_allocated_info(::std::string* info);

  // optional uint64 match_time = 1;
  bool has_match_time() const;
  void clear_match_time();
  static const int kMatchTimeFieldNumber = 1;
  ::google::protobuf::uint64 match_time() const;
  void set_match_time(::google::protobuf::uint64 value);

  // optional uint64 sumbit_time = 5;
  bool has_sumbit_time() const;
  void clear_sumbit_time();
  static const int kSumbitTimeFieldNumber = 5;
  ::google::protobuf::uint64 sumbit_time() const;
  void set_sumbit_time(::google::protobuf::uint64 value);

  // required uint32 bsflag = 3;
  bool has_bsflag() const;
  void clear_bsflag();
  static const int kBsflagFieldNumber = 3;
  ::google::protobuf::uint32 bsflag() const;
  void set_bsflag(::google::protobuf::uint32 value);

  // required uint32 market = 7;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 7;
  ::google::protobuf::uint32 market() const;
  void set_market(::google::protobuf::uint32 value);

  // optional uint64 order_time = 6;
  bool has_order_time() const;
  void clear_order_time();
  static const int kOrderTimeFieldNumber = 6;
  ::google::protobuf::uint64 order_time() const;
  void set_order_time(::google::protobuf::uint64 value);

  // required int64 order_price = 9;
  bool has_order_price() const;
  void clear_order_price();
  static const int kOrderPriceFieldNumber = 9;
  ::google::protobuf::int64 order_price() const;
  void set_order_price(::google::protobuf::int64 value);

  // optional double order_frz_amt = 11;
  bool has_order_frz_amt() const;
  void clear_order_frz_amt();
  static const int kOrderFrzAmtFieldNumber = 11;
  double order_frz_amt() const;
  void set_order_frz_amt(double value);

  // required uint32 order_qty = 10;
  bool has_order_qty() const;
  void clear_order_qty();
  static const int kOrderQtyFieldNumber = 10;
  ::google::protobuf::uint32 order_qty() const;
  void set_order_qty(::google::protobuf::uint32 value);

  // required uint32 match_qty = 13;
  bool has_match_qty() const;
  void clear_match_qty();
  static const int kMatchQtyFieldNumber = 13;
  ::google::protobuf::uint32 match_qty() const;
  void set_match_qty(::google::protobuf::uint32 value);

  // optional double match_amt = 12;
  bool has_match_amt() const;
  void clear_match_amt();
  static const int kMatchAmtFieldNumber = 12;
  double match_amt() const;
  void set_match_amt(double value);

  // required int64 order_status = 15;
  bool has_order_status() const;
  void clear_order_status();
  static const int kOrderStatusFieldNumber = 15;
  ::google::protobuf::int64 order_status() const;
  void set_order_status(::google::protobuf::int64 value);

  // optional double clear_amt = 17;
  bool has_clear_amt() const;
  void clear_clear_amt();
  static const int kClearAmtFieldNumber = 17;
  double clear_amt() const;
  void set_clear_amt(double value);

  // required uint32 cancel_qty = 14;
  bool has_cancel_qty() const;
  void clear_cancel_qty();
  static const int kCancelQtyFieldNumber = 14;
  ::google::protobuf::uint32 cancel_qty() const;
  void set_cancel_qty(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:autotrade.StockQueryOrderResp.OrderDetail)
 private:
  void set_has_match_time();
  void clear_has_match_time();
  void set_has_orderno();
  void clear_has_orderno();
  void set_has_bsflag();
  void clear_has_bsflag();
  void set_has_orderid();
  void clear_has_orderid();
  void set_has_sumbit_time();
  void clear_has_sumbit_time();
  void set_has_order_time();
  void clear_has_order_time();
  void set_has_market();
  void clear_has_market();
  void set_has_code();
  void clear_has_code();
  void set_has_order_price();
  void clear_has_order_price();
  void set_has_order_qty();
  void clear_has_order_qty();
  void set_has_order_frz_amt();
  void clear_has_order_frz_amt();
  void set_has_match_amt();
  void clear_has_match_amt();
  void set_has_match_qty();
  void clear_has_match_qty();
  void set_has_cancel_qty();
  void clear_has_cancel_qty();
  void set_has_order_status();
  void clear_has_order_status();
  void set_has_code_name();
  void clear_has_code_name();
  void set_has_clear_amt();
  void clear_has_clear_amt();
  void set_has_order_group();
  void clear_has_order_group();
  void set_has_info();
  void clear_has_info();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr orderno_;
  ::google::protobuf::internal::ArenaStringPtr orderid_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr code_name_;
  ::google::protobuf::internal::ArenaStringPtr order_group_;
  ::google::protobuf::internal::ArenaStringPtr info_;
  ::google::protobuf::uint64 match_time_;
  ::google::protobuf::uint64 sumbit_time_;
  ::google::protobuf::uint32 bsflag_;
  ::google::protobuf::uint32 market_;
  ::google::protobuf::uint64 order_time_;
  ::google::protobuf::int64 order_price_;
  double order_frz_amt_;
  ::google::protobuf::uint32 order_qty_;
  ::google::protobuf::uint32 match_qty_;
  double match_amt_;
  ::google::protobuf::int64 order_status_;
  double clear_amt_;
  ::google::protobuf::uint32 cancel_qty_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StockQueryOrderResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.StockQueryOrderResp) */ {
 public:
  StockQueryOrderResp();
  virtual ~StockQueryOrderResp();

  StockQueryOrderResp(const StockQueryOrderResp& from);

  inline StockQueryOrderResp& operator=(const StockQueryOrderResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StockQueryOrderResp(StockQueryOrderResp&& from) noexcept
    : StockQueryOrderResp() {
    *this = ::std::move(from);
  }

  inline StockQueryOrderResp& operator=(StockQueryOrderResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockQueryOrderResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StockQueryOrderResp* internal_default_instance() {
    return reinterpret_cast<const StockQueryOrderResp*>(
               &_StockQueryOrderResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(StockQueryOrderResp* other);
  friend void swap(StockQueryOrderResp& a, StockQueryOrderResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StockQueryOrderResp* New() const final {
    return CreateMaybeMessage<StockQueryOrderResp>(NULL);
  }

  StockQueryOrderResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StockQueryOrderResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StockQueryOrderResp& from);
  void MergeFrom(const StockQueryOrderResp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StockQueryOrderResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StockQueryOrderResp_OrderDetail OrderDetail;

  // accessors -------------------------------------------------------

  // repeated .autotrade.StockQueryOrderResp.OrderDetail detail_list = 2;
  int detail_list_size() const;
  void clear_detail_list();
  static const int kDetailListFieldNumber = 2;
  ::autotrade::StockQueryOrderResp_OrderDetail* mutable_detail_list(int index);
  ::google::protobuf::RepeatedPtrField< ::autotrade::StockQueryOrderResp_OrderDetail >*
      mutable_detail_list();
  const ::autotrade::StockQueryOrderResp_OrderDetail& detail_list(int index) const;
  ::autotrade::StockQueryOrderResp_OrderDetail* add_detail_list();
  const ::google::protobuf::RepeatedPtrField< ::autotrade::StockQueryOrderResp_OrderDetail >&
      detail_list() const;

  // optional string last_pos = 3;
  bool has_last_pos() const;
  void clear_last_pos();
  static const int kLastPosFieldNumber = 3;
  const ::std::string& last_pos() const;
  void set_last_pos(const ::std::string& value);
  #if LANG_CXX11
  void set_last_pos(::std::string&& value);
  #endif
  void set_last_pos(const char* value);
  void set_last_pos(const char* value, size_t size);
  ::std::string* mutable_last_pos();
  ::std::string* release_last_pos();
  void set_allocated_last_pos(::std::string* last_pos);

  // optional string request_id = 4;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 4;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional int32 funcid = 1 [default = 11102002];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.StockQueryOrderResp)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_last_pos();
  void clear_has_last_pos();
  void set_has_request_id();
  void clear_has_request_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::autotrade::StockQueryOrderResp_OrderDetail > detail_list_;
  ::google::protobuf::internal::ArenaStringPtr last_pos_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StockQueryOrdersReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.StockQueryOrdersReqt) */ {
 public:
  StockQueryOrdersReqt();
  virtual ~StockQueryOrdersReqt();

  StockQueryOrdersReqt(const StockQueryOrdersReqt& from);

  inline StockQueryOrdersReqt& operator=(const StockQueryOrdersReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StockQueryOrdersReqt(StockQueryOrdersReqt&& from) noexcept
    : StockQueryOrdersReqt() {
    *this = ::std::move(from);
  }

  inline StockQueryOrdersReqt& operator=(StockQueryOrdersReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockQueryOrdersReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StockQueryOrdersReqt* internal_default_instance() {
    return reinterpret_cast<const StockQueryOrdersReqt*>(
               &_StockQueryOrdersReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(StockQueryOrdersReqt* other);
  friend void swap(StockQueryOrdersReqt& a, StockQueryOrdersReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StockQueryOrdersReqt* New() const final {
    return CreateMaybeMessage<StockQueryOrdersReqt>(NULL);
  }

  StockQueryOrdersReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StockQueryOrdersReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StockQueryOrdersReqt& from);
  void MergeFrom(const StockQueryOrdersReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StockQueryOrdersReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string order_group = 2 [default = ""];
  bool has_order_group() const;
  void clear_order_group();
  static const int kOrderGroupFieldNumber = 2;
  const ::std::string& order_group() const;
  void set_order_group(const ::std::string& value);
  #if LANG_CXX11
  void set_order_group(::std::string&& value);
  #endif
  void set_order_group(const char* value);
  void set_order_group(const char* value, size_t size);
  ::std::string* mutable_order_group();
  ::std::string* release_order_group();
  void set_allocated_order_group(::std::string* order_group);

  // optional string request_id = 3;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional string fund_id = 6;
  bool has_fund_id() const;
  void clear_fund_id();
  static const int kFundIdFieldNumber = 6;
  const ::std::string& fund_id() const;
  void set_fund_id(const ::std::string& value);
  #if LANG_CXX11
  void set_fund_id(::std::string&& value);
  #endif
  void set_fund_id(const char* value);
  void set_fund_id(const char* value, size_t size);
  ::std::string* mutable_fund_id();
  ::std::string* release_fund_id();
  void set_allocated_fund_id(::std::string* fund_id);

  // optional string session_id = 7;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 7;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // optional int64 request_time = 4 [default = 0];
  bool has_request_time() const;
  void clear_request_time();
  static const int kRequestTimeFieldNumber = 4;
  ::google::protobuf::int64 request_time() const;
  void set_request_time(::google::protobuf::int64 value);

  // optional int32 funcid = 1 [default = 11002003];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // optional int64 active_interval = 5 [default = 1000];
  bool has_active_interval() const;
  void clear_active_interval();
  static const int kActiveIntervalFieldNumber = 5;
  ::google::protobuf::int64 active_interval() const;
  void set_active_interval(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:autotrade.StockQueryOrdersReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_order_group();
  void clear_has_order_group();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_request_time();
  void clear_has_request_time();
  void set_has_active_interval();
  void clear_has_active_interval();
  void set_has_fund_id();
  void clear_has_fund_id();
  void set_has_session_id();
  void clear_has_session_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr order_group_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr fund_id_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::int64 request_time_;
  ::google::protobuf::int32 funcid_;
  ::google::protobuf::int64 active_interval_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StockQueryOrdersResp_OrderDetail : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.StockQueryOrdersResp.OrderDetail) */ {
 public:
  StockQueryOrdersResp_OrderDetail();
  virtual ~StockQueryOrdersResp_OrderDetail();

  StockQueryOrdersResp_OrderDetail(const StockQueryOrdersResp_OrderDetail& from);

  inline StockQueryOrdersResp_OrderDetail& operator=(const StockQueryOrdersResp_OrderDetail& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StockQueryOrdersResp_OrderDetail(StockQueryOrdersResp_OrderDetail&& from) noexcept
    : StockQueryOrdersResp_OrderDetail() {
    *this = ::std::move(from);
  }

  inline StockQueryOrdersResp_OrderDetail& operator=(StockQueryOrdersResp_OrderDetail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockQueryOrdersResp_OrderDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StockQueryOrdersResp_OrderDetail* internal_default_instance() {
    return reinterpret_cast<const StockQueryOrdersResp_OrderDetail*>(
               &_StockQueryOrdersResp_OrderDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(StockQueryOrdersResp_OrderDetail* other);
  friend void swap(StockQueryOrdersResp_OrderDetail& a, StockQueryOrdersResp_OrderDetail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StockQueryOrdersResp_OrderDetail* New() const final {
    return CreateMaybeMessage<StockQueryOrdersResp_OrderDetail>(NULL);
  }

  StockQueryOrdersResp_OrderDetail* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StockQueryOrdersResp_OrderDetail>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StockQueryOrdersResp_OrderDetail& from);
  void MergeFrom(const StockQueryOrdersResp_OrderDetail& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StockQueryOrdersResp_OrderDetail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string orderno = 2;
  bool has_orderno() const;
  void clear_orderno();
  static const int kOrdernoFieldNumber = 2;
  const ::std::string& orderno() const;
  void set_orderno(const ::std::string& value);
  #if LANG_CXX11
  void set_orderno(::std::string&& value);
  #endif
  void set_orderno(const char* value);
  void set_orderno(const char* value, size_t size);
  ::std::string* mutable_orderno();
  ::std::string* release_orderno();
  void set_allocated_orderno(::std::string* orderno);

  // required string order_group = 3;
  bool has_order_group() const;
  void clear_order_group();
  static const int kOrderGroupFieldNumber = 3;
  const ::std::string& order_group() const;
  void set_order_group(const ::std::string& value);
  #if LANG_CXX11
  void set_order_group(::std::string&& value);
  #endif
  void set_order_group(const char* value);
  void set_order_group(const char* value, size_t size);
  ::std::string* mutable_order_group();
  ::std::string* release_order_group();
  void set_allocated_order_group(::std::string* order_group);

  // required string code = 8;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 8;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // required string order_status = 15;
  bool has_order_status() const;
  void clear_order_status();
  static const int kOrderStatusFieldNumber = 15;
  const ::std::string& order_status() const;
  void set_order_status(const ::std::string& value);
  #if LANG_CXX11
  void set_order_status(::std::string&& value);
  #endif
  void set_order_status(const char* value);
  void set_order_status(const char* value, size_t size);
  ::std::string* mutable_order_status();
  ::std::string* release_order_status();
  void set_allocated_order_status(::std::string* order_status);

  // required string code_name = 16;
  bool has_code_name() const;
  void clear_code_name();
  static const int kCodeNameFieldNumber = 16;
  const ::std::string& code_name() const;
  void set_code_name(const ::std::string& value);
  #if LANG_CXX11
  void set_code_name(::std::string&& value);
  #endif
  void set_code_name(const char* value);
  void set_code_name(const char* value, size_t size);
  ::std::string* mutable_code_name();
  ::std::string* release_code_name();
  void set_allocated_code_name(::std::string* code_name);

  // optional uint64 match_time = 1;
  bool has_match_time() const;
  void clear_match_time();
  static const int kMatchTimeFieldNumber = 1;
  ::google::protobuf::uint64 match_time() const;
  void set_match_time(::google::protobuf::uint64 value);

  // optional uint64 submit_time = 5;
  bool has_submit_time() const;
  void clear_submit_time();
  static const int kSubmitTimeFieldNumber = 5;
  ::google::protobuf::uint64 submit_time() const;
  void set_submit_time(::google::protobuf::uint64 value);

  // required uint32 bsflag = 4;
  bool has_bsflag() const;
  void clear_bsflag();
  static const int kBsflagFieldNumber = 4;
  ::google::protobuf::uint32 bsflag() const;
  void set_bsflag(::google::protobuf::uint32 value);

  // required uint32 market = 7;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 7;
  ::google::protobuf::uint32 market() const;
  void set_market(::google::protobuf::uint32 value);

  // optional uint64 order_time = 6;
  bool has_order_time() const;
  void clear_order_time();
  static const int kOrderTimeFieldNumber = 6;
  ::google::protobuf::uint64 order_time() const;
  void set_order_time(::google::protobuf::uint64 value);

  // required int64 order_price = 9;
  bool has_order_price() const;
  void clear_order_price();
  static const int kOrderPriceFieldNumber = 9;
  ::google::protobuf::int64 order_price() const;
  void set_order_price(::google::protobuf::int64 value);

  // optional double order_frz_amt = 11;
  bool has_order_frz_amt() const;
  void clear_order_frz_amt();
  static const int kOrderFrzAmtFieldNumber = 11;
  double order_frz_amt() const;
  void set_order_frz_amt(double value);

  // required uint32 order_qty = 10;
  bool has_order_qty() const;
  void clear_order_qty();
  static const int kOrderQtyFieldNumber = 10;
  ::google::protobuf::uint32 order_qty() const;
  void set_order_qty(::google::protobuf::uint32 value);

  // required uint32 match_qty = 13;
  bool has_match_qty() const;
  void clear_match_qty();
  static const int kMatchQtyFieldNumber = 13;
  ::google::protobuf::uint32 match_qty() const;
  void set_match_qty(::google::protobuf::uint32 value);

  // optional double match_amt = 12;
  bool has_match_amt() const;
  void clear_match_amt();
  static const int kMatchAmtFieldNumber = 12;
  double match_amt() const;
  void set_match_amt(double value);

  // optional double clear_amt = 17;
  bool has_clear_amt() const;
  void clear_clear_amt();
  static const int kClearAmtFieldNumber = 17;
  double clear_amt() const;
  void set_clear_amt(double value);

  // required uint32 cancel_qty = 14;
  bool has_cancel_qty() const;
  void clear_cancel_qty();
  static const int kCancelQtyFieldNumber = 14;
  ::google::protobuf::uint32 cancel_qty() const;
  void set_cancel_qty(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:autotrade.StockQueryOrdersResp.OrderDetail)
 private:
  void set_has_match_time();
  void clear_has_match_time();
  void set_has_orderno();
  void clear_has_orderno();
  void set_has_order_group();
  void clear_has_order_group();
  void set_has_bsflag();
  void clear_has_bsflag();
  void set_has_submit_time();
  void clear_has_submit_time();
  void set_has_order_time();
  void clear_has_order_time();
  void set_has_market();
  void clear_has_market();
  void set_has_code();
  void clear_has_code();
  void set_has_order_price();
  void clear_has_order_price();
  void set_has_order_qty();
  void clear_has_order_qty();
  void set_has_order_frz_amt();
  void clear_has_order_frz_amt();
  void set_has_match_amt();
  void clear_has_match_amt();
  void set_has_match_qty();
  void clear_has_match_qty();
  void set_has_cancel_qty();
  void clear_has_cancel_qty();
  void set_has_order_status();
  void clear_has_order_status();
  void set_has_code_name();
  void clear_has_code_name();
  void set_has_clear_amt();
  void clear_has_clear_amt();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr orderno_;
  ::google::protobuf::internal::ArenaStringPtr order_group_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr order_status_;
  ::google::protobuf::internal::ArenaStringPtr code_name_;
  ::google::protobuf::uint64 match_time_;
  ::google::protobuf::uint64 submit_time_;
  ::google::protobuf::uint32 bsflag_;
  ::google::protobuf::uint32 market_;
  ::google::protobuf::uint64 order_time_;
  ::google::protobuf::int64 order_price_;
  double order_frz_amt_;
  ::google::protobuf::uint32 order_qty_;
  ::google::protobuf::uint32 match_qty_;
  double match_amt_;
  double clear_amt_;
  ::google::protobuf::uint32 cancel_qty_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StockQueryOrdersResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.StockQueryOrdersResp) */ {
 public:
  StockQueryOrdersResp();
  virtual ~StockQueryOrdersResp();

  StockQueryOrdersResp(const StockQueryOrdersResp& from);

  inline StockQueryOrdersResp& operator=(const StockQueryOrdersResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StockQueryOrdersResp(StockQueryOrdersResp&& from) noexcept
    : StockQueryOrdersResp() {
    *this = ::std::move(from);
  }

  inline StockQueryOrdersResp& operator=(StockQueryOrdersResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockQueryOrdersResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StockQueryOrdersResp* internal_default_instance() {
    return reinterpret_cast<const StockQueryOrdersResp*>(
               &_StockQueryOrdersResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(StockQueryOrdersResp* other);
  friend void swap(StockQueryOrdersResp& a, StockQueryOrdersResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StockQueryOrdersResp* New() const final {
    return CreateMaybeMessage<StockQueryOrdersResp>(NULL);
  }

  StockQueryOrdersResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StockQueryOrdersResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StockQueryOrdersResp& from);
  void MergeFrom(const StockQueryOrdersResp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StockQueryOrdersResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StockQueryOrdersResp_OrderDetail OrderDetail;

  // accessors -------------------------------------------------------

  // repeated .autotrade.StockQueryOrdersResp.OrderDetail detail_list = 2;
  int detail_list_size() const;
  void clear_detail_list();
  static const int kDetailListFieldNumber = 2;
  ::autotrade::StockQueryOrdersResp_OrderDetail* mutable_detail_list(int index);
  ::google::protobuf::RepeatedPtrField< ::autotrade::StockQueryOrdersResp_OrderDetail >*
      mutable_detail_list();
  const ::autotrade::StockQueryOrdersResp_OrderDetail& detail_list(int index) const;
  ::autotrade::StockQueryOrdersResp_OrderDetail* add_detail_list();
  const ::google::protobuf::RepeatedPtrField< ::autotrade::StockQueryOrdersResp_OrderDetail >&
      detail_list() const;

  // optional string request_id = 3;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional int32 funcid = 1 [default = 11102003];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.StockQueryOrdersResp)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_request_id();
  void clear_has_request_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::autotrade::StockQueryOrdersResp_OrderDetail > detail_list_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ETFBasicInfoQueryReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.ETFBasicInfoQueryReqt) */ {
 public:
  ETFBasicInfoQueryReqt();
  virtual ~ETFBasicInfoQueryReqt();

  ETFBasicInfoQueryReqt(const ETFBasicInfoQueryReqt& from);

  inline ETFBasicInfoQueryReqt& operator=(const ETFBasicInfoQueryReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ETFBasicInfoQueryReqt(ETFBasicInfoQueryReqt&& from) noexcept
    : ETFBasicInfoQueryReqt() {
    *this = ::std::move(from);
  }

  inline ETFBasicInfoQueryReqt& operator=(ETFBasicInfoQueryReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ETFBasicInfoQueryReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ETFBasicInfoQueryReqt* internal_default_instance() {
    return reinterpret_cast<const ETFBasicInfoQueryReqt*>(
               &_ETFBasicInfoQueryReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(ETFBasicInfoQueryReqt* other);
  friend void swap(ETFBasicInfoQueryReqt& a, ETFBasicInfoQueryReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ETFBasicInfoQueryReqt* New() const final {
    return CreateMaybeMessage<ETFBasicInfoQueryReqt>(NULL);
  }

  ETFBasicInfoQueryReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ETFBasicInfoQueryReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ETFBasicInfoQueryReqt& from);
  void MergeFrom(const ETFBasicInfoQueryReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ETFBasicInfoQueryReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string code = 2;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string request_id = 3;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional int64 request_time = 4 [default = 0];
  bool has_request_time() const;
  void clear_request_time();
  static const int kRequestTimeFieldNumber = 4;
  ::google::protobuf::int64 request_time() const;
  void set_request_time(::google::protobuf::int64 value);

  // optional int32 funcid = 1 [default = 11002008];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // optional int64 active_interval = 5 [default = 1000];
  bool has_active_interval() const;
  void clear_active_interval();
  static const int kActiveIntervalFieldNumber = 5;
  ::google::protobuf::int64 active_interval() const;
  void set_active_interval(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:autotrade.ETFBasicInfoQueryReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_code();
  void clear_has_code();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_request_time();
  void clear_has_request_time();
  void set_has_active_interval();
  void clear_has_active_interval();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::int64 request_time_;
  ::google::protobuf::int32 funcid_;
  ::google::protobuf::int64 active_interval_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ETFBasicInfoQueryResp_ETFBasicInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo) */ {
 public:
  ETFBasicInfoQueryResp_ETFBasicInfo();
  virtual ~ETFBasicInfoQueryResp_ETFBasicInfo();

  ETFBasicInfoQueryResp_ETFBasicInfo(const ETFBasicInfoQueryResp_ETFBasicInfo& from);

  inline ETFBasicInfoQueryResp_ETFBasicInfo& operator=(const ETFBasicInfoQueryResp_ETFBasicInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ETFBasicInfoQueryResp_ETFBasicInfo(ETFBasicInfoQueryResp_ETFBasicInfo&& from) noexcept
    : ETFBasicInfoQueryResp_ETFBasicInfo() {
    *this = ::std::move(from);
  }

  inline ETFBasicInfoQueryResp_ETFBasicInfo& operator=(ETFBasicInfoQueryResp_ETFBasicInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ETFBasicInfoQueryResp_ETFBasicInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ETFBasicInfoQueryResp_ETFBasicInfo* internal_default_instance() {
    return reinterpret_cast<const ETFBasicInfoQueryResp_ETFBasicInfo*>(
               &_ETFBasicInfoQueryResp_ETFBasicInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(ETFBasicInfoQueryResp_ETFBasicInfo* other);
  friend void swap(ETFBasicInfoQueryResp_ETFBasicInfo& a, ETFBasicInfoQueryResp_ETFBasicInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ETFBasicInfoQueryResp_ETFBasicInfo* New() const final {
    return CreateMaybeMessage<ETFBasicInfoQueryResp_ETFBasicInfo>(NULL);
  }

  ETFBasicInfoQueryResp_ETFBasicInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ETFBasicInfoQueryResp_ETFBasicInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ETFBasicInfoQueryResp_ETFBasicInfo& from);
  void MergeFrom(const ETFBasicInfoQueryResp_ETFBasicInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ETFBasicInfoQueryResp_ETFBasicInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string code = 3;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 3;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string name = 4;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string level1_code = 5;
  bool has_level1_code() const;
  void clear_level1_code();
  static const int kLevel1CodeFieldNumber = 5;
  const ::std::string& level1_code() const;
  void set_level1_code(const ::std::string& value);
  #if LANG_CXX11
  void set_level1_code(::std::string&& value);
  #endif
  void set_level1_code(const char* value);
  void set_level1_code(const char* value, size_t size);
  ::std::string* mutable_level1_code();
  ::std::string* release_level1_code();
  void set_allocated_level1_code(::std::string* level1_code);

  // required string level2_code = 6;
  bool has_level2_code() const;
  void clear_level2_code();
  static const int kLevel2CodeFieldNumber = 6;
  const ::std::string& level2_code() const;
  void set_level2_code(const ::std::string& value);
  #if LANG_CXX11
  void set_level2_code(::std::string&& value);
  #endif
  void set_level2_code(const char* value);
  void set_level2_code(const char* value, size_t size);
  ::std::string* mutable_level2_code();
  ::std::string* release_level2_code();
  void set_allocated_level2_code(::std::string* level2_code);

  // optional string capital_code = 7;
  bool has_capital_code() const;
  void clear_capital_code();
  static const int kCapitalCodeFieldNumber = 7;
  const ::std::string& capital_code() const;
  void set_capital_code(const ::std::string& value);
  #if LANG_CXX11
  void set_capital_code(::std::string&& value);
  #endif
  void set_capital_code(const char* value);
  void set_capital_code(const char* value, size_t size);
  ::std::string* mutable_capital_code();
  ::std::string* release_capital_code();
  void set_allocated_capital_code(::std::string* capital_code);

  // required string publish_flag = 10;
  bool has_publish_flag() const;
  void clear_publish_flag();
  static const int kPublishFlagFieldNumber = 10;
  const ::std::string& publish_flag() const;
  void set_publish_flag(const ::std::string& value);
  #if LANG_CXX11
  void set_publish_flag(::std::string&& value);
  #endif
  void set_publish_flag(const char* value);
  void set_publish_flag(const char* value, size_t size);
  ::std::string* mutable_publish_flag();
  ::std::string* release_publish_flag();
  void set_allocated_publish_flag(::std::string* publish_flag);

  // required string trade_stat = 11;
  bool has_trade_stat() const;
  void clear_trade_stat();
  static const int kTradeStatFieldNumber = 11;
  const ::std::string& trade_stat() const;
  void set_trade_stat(const ::std::string& value);
  #if LANG_CXX11
  void set_trade_stat(::std::string&& value);
  #endif
  void set_trade_stat(const char* value);
  void set_trade_stat(const char* value, size_t size);
  ::std::string* mutable_trade_stat();
  ::std::string* release_trade_stat();
  void set_allocated_trade_stat(::std::string* trade_stat);

  // required string trading_day = 13;
  bool has_trading_day() const;
  void clear_trading_day();
  static const int kTradingDayFieldNumber = 13;
  const ::std::string& trading_day() const;
  void set_trading_day(const ::std::string& value);
  #if LANG_CXX11
  void set_trading_day(::std::string&& value);
  #endif
  void set_trading_day(const char* value);
  void set_trading_day(const char* value, size_t size);
  ::std::string* mutable_trading_day();
  ::std::string* release_trading_day();
  void set_allocated_trading_day(::std::string* trading_day);

  // required string pretrading_day = 15;
  bool has_pretrading_day() const;
  void clear_pretrading_day();
  static const int kPretradingDayFieldNumber = 15;
  const ::std::string& pretrading_day() const;
  void set_pretrading_day(const ::std::string& value);
  #if LANG_CXX11
  void set_pretrading_day(::std::string&& value);
  #endif
  void set_pretrading_day(const char* value);
  void set_pretrading_day(const char* value, size_t size);
  ::std::string* mutable_pretrading_day();
  ::std::string* release_pretrading_day();
  void set_allocated_pretrading_day(::std::string* pretrading_day);

  // required uint32 market = 2;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 2;
  ::google::protobuf::uint32 market() const;
  void set_market(::google::protobuf::uint32 value);

  // required uint32 trade_unit = 8;
  bool has_trade_unit() const;
  void clear_trade_unit();
  static const int kTradeUnitFieldNumber = 8;
  ::google::protobuf::uint32 trade_unit() const;
  void set_trade_unit(::google::protobuf::uint32 value);

  // optional double ecash_component = 9;
  bool has_ecash_component() const;
  void clear_ecash_component();
  static const int kEcashComponentFieldNumber = 9;
  double ecash_component() const;
  void set_ecash_component(double value);

  // required double maxcashratio = 14;
  bool has_maxcashratio() const;
  void clear_maxcashratio();
  static const int kMaxcashratioFieldNumber = 14;
  double maxcashratio() const;
  void set_maxcashratio(double value);

  // required double cash_component = 16;
  bool has_cash_component() const;
  void clear_cash_component();
  static const int kCashComponentFieldNumber = 16;
  double cash_component() const;
  void set_cash_component(double value);

  // required double navpercu = 17;
  bool has_navpercu() const;
  void clear_navpercu();
  static const int kNavpercuFieldNumber = 17;
  double navpercu() const;
  void set_navpercu(double value);

  // required double nav = 18;
  bool has_nav() const;
  void clear_nav();
  static const int kNavFieldNumber = 18;
  double nav() const;
  void set_nav(double value);

  // required uint32 record_num = 12;
  bool has_record_num() const;
  void clear_record_num();
  static const int kRecordNumFieldNumber = 12;
  ::google::protobuf::uint32 record_num() const;
  void set_record_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo)
 private:
  void set_has_market();
  void clear_has_market();
  void set_has_code();
  void clear_has_code();
  void set_has_name();
  void clear_has_name();
  void set_has_level1_code();
  void clear_has_level1_code();
  void set_has_level2_code();
  void clear_has_level2_code();
  void set_has_capital_code();
  void clear_has_capital_code();
  void set_has_trade_unit();
  void clear_has_trade_unit();
  void set_has_ecash_component();
  void clear_has_ecash_component();
  void set_has_publish_flag();
  void clear_has_publish_flag();
  void set_has_trade_stat();
  void clear_has_trade_stat();
  void set_has_record_num();
  void clear_has_record_num();
  void set_has_trading_day();
  void clear_has_trading_day();
  void set_has_maxcashratio();
  void clear_has_maxcashratio();
  void set_has_pretrading_day();
  void clear_has_pretrading_day();
  void set_has_cash_component();
  void clear_has_cash_component();
  void set_has_navpercu();
  void clear_has_navpercu();
  void set_has_nav();
  void clear_has_nav();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr level1_code_;
  ::google::protobuf::internal::ArenaStringPtr level2_code_;
  ::google::protobuf::internal::ArenaStringPtr capital_code_;
  ::google::protobuf::internal::ArenaStringPtr publish_flag_;
  ::google::protobuf::internal::ArenaStringPtr trade_stat_;
  ::google::protobuf::internal::ArenaStringPtr trading_day_;
  ::google::protobuf::internal::ArenaStringPtr pretrading_day_;
  ::google::protobuf::uint32 market_;
  ::google::protobuf::uint32 trade_unit_;
  double ecash_component_;
  double maxcashratio_;
  double cash_component_;
  double navpercu_;
  double nav_;
  ::google::protobuf::uint32 record_num_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ETFBasicInfoQueryResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.ETFBasicInfoQueryResp) */ {
 public:
  ETFBasicInfoQueryResp();
  virtual ~ETFBasicInfoQueryResp();

  ETFBasicInfoQueryResp(const ETFBasicInfoQueryResp& from);

  inline ETFBasicInfoQueryResp& operator=(const ETFBasicInfoQueryResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ETFBasicInfoQueryResp(ETFBasicInfoQueryResp&& from) noexcept
    : ETFBasicInfoQueryResp() {
    *this = ::std::move(from);
  }

  inline ETFBasicInfoQueryResp& operator=(ETFBasicInfoQueryResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ETFBasicInfoQueryResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ETFBasicInfoQueryResp* internal_default_instance() {
    return reinterpret_cast<const ETFBasicInfoQueryResp*>(
               &_ETFBasicInfoQueryResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(ETFBasicInfoQueryResp* other);
  friend void swap(ETFBasicInfoQueryResp& a, ETFBasicInfoQueryResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ETFBasicInfoQueryResp* New() const final {
    return CreateMaybeMessage<ETFBasicInfoQueryResp>(NULL);
  }

  ETFBasicInfoQueryResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ETFBasicInfoQueryResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ETFBasicInfoQueryResp& from);
  void MergeFrom(const ETFBasicInfoQueryResp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ETFBasicInfoQueryResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ETFBasicInfoQueryResp_ETFBasicInfo ETFBasicInfo;

  // accessors -------------------------------------------------------

  // repeated .autotrade.ETFBasicInfoQueryResp.ETFBasicInfo infos = 2;
  int infos_size() const;
  void clear_infos();
  static const int kInfosFieldNumber = 2;
  ::autotrade::ETFBasicInfoQueryResp_ETFBasicInfo* mutable_infos(int index);
  ::google::protobuf::RepeatedPtrField< ::autotrade::ETFBasicInfoQueryResp_ETFBasicInfo >*
      mutable_infos();
  const ::autotrade::ETFBasicInfoQueryResp_ETFBasicInfo& infos(int index) const;
  ::autotrade::ETFBasicInfoQueryResp_ETFBasicInfo* add_infos();
  const ::google::protobuf::RepeatedPtrField< ::autotrade::ETFBasicInfoQueryResp_ETFBasicInfo >&
      infos() const;

  // optional string request_id = 3;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional int32 funcid = 1 [default = 11102008];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.ETFBasicInfoQueryResp)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_request_id();
  void clear_has_request_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::autotrade::ETFBasicInfoQueryResp_ETFBasicInfo > infos_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ETFBasketListQueryReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.ETFBasketListQueryReqt) */ {
 public:
  ETFBasketListQueryReqt();
  virtual ~ETFBasketListQueryReqt();

  ETFBasketListQueryReqt(const ETFBasketListQueryReqt& from);

  inline ETFBasketListQueryReqt& operator=(const ETFBasketListQueryReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ETFBasketListQueryReqt(ETFBasketListQueryReqt&& from) noexcept
    : ETFBasketListQueryReqt() {
    *this = ::std::move(from);
  }

  inline ETFBasketListQueryReqt& operator=(ETFBasketListQueryReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ETFBasketListQueryReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ETFBasketListQueryReqt* internal_default_instance() {
    return reinterpret_cast<const ETFBasketListQueryReqt*>(
               &_ETFBasketListQueryReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(ETFBasketListQueryReqt* other);
  friend void swap(ETFBasketListQueryReqt& a, ETFBasketListQueryReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ETFBasketListQueryReqt* New() const final {
    return CreateMaybeMessage<ETFBasketListQueryReqt>(NULL);
  }

  ETFBasketListQueryReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ETFBasketListQueryReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ETFBasketListQueryReqt& from);
  void MergeFrom(const ETFBasketListQueryReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ETFBasketListQueryReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string code = 2;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string request_id = 3;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional int64 request_time = 4 [default = 0];
  bool has_request_time() const;
  void clear_request_time();
  static const int kRequestTimeFieldNumber = 4;
  ::google::protobuf::int64 request_time() const;
  void set_request_time(::google::protobuf::int64 value);

  // optional int32 funcid = 1 [default = 11002009];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // optional int64 active_interval = 5 [default = 1000];
  bool has_active_interval() const;
  void clear_active_interval();
  static const int kActiveIntervalFieldNumber = 5;
  ::google::protobuf::int64 active_interval() const;
  void set_active_interval(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:autotrade.ETFBasketListQueryReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_code();
  void clear_has_code();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_request_time();
  void clear_has_request_time();
  void set_has_active_interval();
  void clear_has_active_interval();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::int64 request_time_;
  ::google::protobuf::int32 funcid_;
  ::google::protobuf::int64 active_interval_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ETFBasketListQueryResp_ConstituentStockInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.ETFBasketListQueryResp.ConstituentStockInfo) */ {
 public:
  ETFBasketListQueryResp_ConstituentStockInfo();
  virtual ~ETFBasketListQueryResp_ConstituentStockInfo();

  ETFBasketListQueryResp_ConstituentStockInfo(const ETFBasketListQueryResp_ConstituentStockInfo& from);

  inline ETFBasketListQueryResp_ConstituentStockInfo& operator=(const ETFBasketListQueryResp_ConstituentStockInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ETFBasketListQueryResp_ConstituentStockInfo(ETFBasketListQueryResp_ConstituentStockInfo&& from) noexcept
    : ETFBasketListQueryResp_ConstituentStockInfo() {
    *this = ::std::move(from);
  }

  inline ETFBasketListQueryResp_ConstituentStockInfo& operator=(ETFBasketListQueryResp_ConstituentStockInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ETFBasketListQueryResp_ConstituentStockInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ETFBasketListQueryResp_ConstituentStockInfo* internal_default_instance() {
    return reinterpret_cast<const ETFBasketListQueryResp_ConstituentStockInfo*>(
               &_ETFBasketListQueryResp_ConstituentStockInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(ETFBasketListQueryResp_ConstituentStockInfo* other);
  friend void swap(ETFBasketListQueryResp_ConstituentStockInfo& a, ETFBasketListQueryResp_ConstituentStockInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ETFBasketListQueryResp_ConstituentStockInfo* New() const final {
    return CreateMaybeMessage<ETFBasketListQueryResp_ConstituentStockInfo>(NULL);
  }

  ETFBasketListQueryResp_ConstituentStockInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ETFBasketListQueryResp_ConstituentStockInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ETFBasketListQueryResp_ConstituentStockInfo& from);
  void MergeFrom(const ETFBasketListQueryResp_ConstituentStockInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ETFBasketListQueryResp_ConstituentStockInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string code = 2;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string replaceflag = 5;
  bool has_replaceflag() const;
  void clear_replaceflag();
  static const int kReplaceflagFieldNumber = 5;
  const ::std::string& replaceflag() const;
  void set_replaceflag(const ::std::string& value);
  #if LANG_CXX11
  void set_replaceflag(::std::string&& value);
  #endif
  void set_replaceflag(const char* value);
  void set_replaceflag(const char* value, size_t size);
  ::std::string* mutable_replaceflag();
  ::std::string* release_replaceflag();
  void set_allocated_replaceflag(::std::string* replaceflag);

  // required uint32 market = 1;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 1;
  ::google::protobuf::uint32 market() const;
  void set_market(::google::protobuf::uint32 value);

  // required int32 qty = 4;
  bool has_qty() const;
  void clear_qty();
  static const int kQtyFieldNumber = 4;
  ::google::protobuf::int32 qty() const;
  void set_qty(::google::protobuf::int32 value);

  // required double overpricerate = 6;
  bool has_overpricerate() const;
  void clear_overpricerate();
  static const int kOverpricerateFieldNumber = 6;
  double overpricerate() const;
  void set_overpricerate(double value);

  // required double replaceamt = 7;
  bool has_replaceamt() const;
  void clear_replaceamt();
  static const int kReplaceamtFieldNumber = 7;
  double replaceamt() const;
  void set_replaceamt(double value);

  // @@protoc_insertion_point(class_scope:autotrade.ETFBasketListQueryResp.ConstituentStockInfo)
 private:
  void set_has_market();
  void clear_has_market();
  void set_has_code();
  void clear_has_code();
  void set_has_name();
  void clear_has_name();
  void set_has_qty();
  void clear_has_qty();
  void set_has_replaceflag();
  void clear_has_replaceflag();
  void set_has_overpricerate();
  void clear_has_overpricerate();
  void set_has_replaceamt();
  void clear_has_replaceamt();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr replaceflag_;
  ::google::protobuf::uint32 market_;
  ::google::protobuf::int32 qty_;
  double overpricerate_;
  double replaceamt_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ETFBasketListQueryResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.ETFBasketListQueryResp) */ {
 public:
  ETFBasketListQueryResp();
  virtual ~ETFBasketListQueryResp();

  ETFBasketListQueryResp(const ETFBasketListQueryResp& from);

  inline ETFBasketListQueryResp& operator=(const ETFBasketListQueryResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ETFBasketListQueryResp(ETFBasketListQueryResp&& from) noexcept
    : ETFBasketListQueryResp() {
    *this = ::std::move(from);
  }

  inline ETFBasketListQueryResp& operator=(ETFBasketListQueryResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ETFBasketListQueryResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ETFBasketListQueryResp* internal_default_instance() {
    return reinterpret_cast<const ETFBasketListQueryResp*>(
               &_ETFBasketListQueryResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(ETFBasketListQueryResp* other);
  friend void swap(ETFBasketListQueryResp& a, ETFBasketListQueryResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ETFBasketListQueryResp* New() const final {
    return CreateMaybeMessage<ETFBasketListQueryResp>(NULL);
  }

  ETFBasketListQueryResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ETFBasketListQueryResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ETFBasketListQueryResp& from);
  void MergeFrom(const ETFBasketListQueryResp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ETFBasketListQueryResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ETFBasketListQueryResp_ConstituentStockInfo ConstituentStockInfo;

  // accessors -------------------------------------------------------

  // repeated .autotrade.ETFBasketListQueryResp.ConstituentStockInfo stock_infos = 2;
  int stock_infos_size() const;
  void clear_stock_infos();
  static const int kStockInfosFieldNumber = 2;
  ::autotrade::ETFBasketListQueryResp_ConstituentStockInfo* mutable_stock_infos(int index);
  ::google::protobuf::RepeatedPtrField< ::autotrade::ETFBasketListQueryResp_ConstituentStockInfo >*
      mutable_stock_infos();
  const ::autotrade::ETFBasketListQueryResp_ConstituentStockInfo& stock_infos(int index) const;
  ::autotrade::ETFBasketListQueryResp_ConstituentStockInfo* add_stock_infos();
  const ::google::protobuf::RepeatedPtrField< ::autotrade::ETFBasketListQueryResp_ConstituentStockInfo >&
      stock_infos() const;

  // optional string request_id = 3;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional int32 funcid = 1 [default = 11102009];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.ETFBasketListQueryResp)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_request_id();
  void clear_has_request_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::autotrade::ETFBasketListQueryResp_ConstituentStockInfo > stock_infos_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StockQueryCaptialReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.StockQueryCaptialReqt) */ {
 public:
  StockQueryCaptialReqt();
  virtual ~StockQueryCaptialReqt();

  StockQueryCaptialReqt(const StockQueryCaptialReqt& from);

  inline StockQueryCaptialReqt& operator=(const StockQueryCaptialReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StockQueryCaptialReqt(StockQueryCaptialReqt&& from) noexcept
    : StockQueryCaptialReqt() {
    *this = ::std::move(from);
  }

  inline StockQueryCaptialReqt& operator=(StockQueryCaptialReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockQueryCaptialReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StockQueryCaptialReqt* internal_default_instance() {
    return reinterpret_cast<const StockQueryCaptialReqt*>(
               &_StockQueryCaptialReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(StockQueryCaptialReqt* other);
  friend void swap(StockQueryCaptialReqt& a, StockQueryCaptialReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StockQueryCaptialReqt* New() const final {
    return CreateMaybeMessage<StockQueryCaptialReqt>(NULL);
  }

  StockQueryCaptialReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StockQueryCaptialReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StockQueryCaptialReqt& from);
  void MergeFrom(const StockQueryCaptialReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StockQueryCaptialReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string moneytype = 2;
  bool has_moneytype() const;
  void clear_moneytype();
  static const int kMoneytypeFieldNumber = 2;
  const ::std::string& moneytype() const;
  void set_moneytype(const ::std::string& value);
  #if LANG_CXX11
  void set_moneytype(::std::string&& value);
  #endif
  void set_moneytype(const char* value);
  void set_moneytype(const char* value, size_t size);
  ::std::string* mutable_moneytype();
  ::std::string* release_moneytype();
  void set_allocated_moneytype(::std::string* moneytype);

  // optional string request_id = 3;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional string fund_id = 6;
  bool has_fund_id() const;
  void clear_fund_id();
  static const int kFundIdFieldNumber = 6;
  const ::std::string& fund_id() const;
  void set_fund_id(const ::std::string& value);
  #if LANG_CXX11
  void set_fund_id(::std::string&& value);
  #endif
  void set_fund_id(const char* value);
  void set_fund_id(const char* value, size_t size);
  ::std::string* mutable_fund_id();
  ::std::string* release_fund_id();
  void set_allocated_fund_id(::std::string* fund_id);

  // optional string session_id = 7;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 7;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // optional int64 request_time = 4 [default = 0];
  bool has_request_time() const;
  void clear_request_time();
  static const int kRequestTimeFieldNumber = 4;
  ::google::protobuf::int64 request_time() const;
  void set_request_time(::google::protobuf::int64 value);

  // optional int32 funcid = 1 [default = 11002010];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // optional int64 active_interval = 5 [default = 1000];
  bool has_active_interval() const;
  void clear_active_interval();
  static const int kActiveIntervalFieldNumber = 5;
  ::google::protobuf::int64 active_interval() const;
  void set_active_interval(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:autotrade.StockQueryCaptialReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_moneytype();
  void clear_has_moneytype();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_request_time();
  void clear_has_request_time();
  void set_has_active_interval();
  void clear_has_active_interval();
  void set_has_fund_id();
  void clear_has_fund_id();
  void set_has_session_id();
  void clear_has_session_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr moneytype_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr fund_id_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::int64 request_time_;
  ::google::protobuf::int32 funcid_;
  ::google::protobuf::int64 active_interval_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StockQueryCapitalReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.StockQueryCapitalReqt) */ {
 public:
  StockQueryCapitalReqt();
  virtual ~StockQueryCapitalReqt();

  StockQueryCapitalReqt(const StockQueryCapitalReqt& from);

  inline StockQueryCapitalReqt& operator=(const StockQueryCapitalReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StockQueryCapitalReqt(StockQueryCapitalReqt&& from) noexcept
    : StockQueryCapitalReqt() {
    *this = ::std::move(from);
  }

  inline StockQueryCapitalReqt& operator=(StockQueryCapitalReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockQueryCapitalReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StockQueryCapitalReqt* internal_default_instance() {
    return reinterpret_cast<const StockQueryCapitalReqt*>(
               &_StockQueryCapitalReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(StockQueryCapitalReqt* other);
  friend void swap(StockQueryCapitalReqt& a, StockQueryCapitalReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StockQueryCapitalReqt* New() const final {
    return CreateMaybeMessage<StockQueryCapitalReqt>(NULL);
  }

  StockQueryCapitalReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StockQueryCapitalReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StockQueryCapitalReqt& from);
  void MergeFrom(const StockQueryCapitalReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StockQueryCapitalReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string moneytype = 2;
  bool has_moneytype() const;
  void clear_moneytype();
  static const int kMoneytypeFieldNumber = 2;
  const ::std::string& moneytype() const;
  void set_moneytype(const ::std::string& value);
  #if LANG_CXX11
  void set_moneytype(::std::string&& value);
  #endif
  void set_moneytype(const char* value);
  void set_moneytype(const char* value, size_t size);
  ::std::string* mutable_moneytype();
  ::std::string* release_moneytype();
  void set_allocated_moneytype(::std::string* moneytype);

  // optional string request_id = 3;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional int64 request_time = 4 [default = 0];
  bool has_request_time() const;
  void clear_request_time();
  static const int kRequestTimeFieldNumber = 4;
  ::google::protobuf::int64 request_time() const;
  void set_request_time(::google::protobuf::int64 value);

  // optional int32 funcid = 1 [default = 11002010];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // optional int64 active_interval = 5 [default = 1000];
  bool has_active_interval() const;
  void clear_active_interval();
  static const int kActiveIntervalFieldNumber = 5;
  ::google::protobuf::int64 active_interval() const;
  void set_active_interval(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:autotrade.StockQueryCapitalReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_moneytype();
  void clear_has_moneytype();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_request_time();
  void clear_has_request_time();
  void set_has_active_interval();
  void clear_has_active_interval();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr moneytype_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::int64 request_time_;
  ::google::protobuf::int32 funcid_;
  ::google::protobuf::int64 active_interval_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StockCapital : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.StockCapital) */ {
 public:
  StockCapital();
  virtual ~StockCapital();

  StockCapital(const StockCapital& from);

  inline StockCapital& operator=(const StockCapital& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StockCapital(StockCapital&& from) noexcept
    : StockCapital() {
    *this = ::std::move(from);
  }

  inline StockCapital& operator=(StockCapital&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockCapital& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StockCapital* internal_default_instance() {
    return reinterpret_cast<const StockCapital*>(
               &_StockCapital_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(StockCapital* other);
  friend void swap(StockCapital& a, StockCapital& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StockCapital* New() const final {
    return CreateMaybeMessage<StockCapital>(NULL);
  }

  StockCapital* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StockCapital>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StockCapital& from);
  void MergeFrom(const StockCapital& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StockCapital* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string moneytype = 2;
  bool has_moneytype() const;
  void clear_moneytype();
  static const int kMoneytypeFieldNumber = 2;
  const ::std::string& moneytype() const;
  void set_moneytype(const ::std::string& value);
  #if LANG_CXX11
  void set_moneytype(::std::string&& value);
  #endif
  void set_moneytype(const char* value);
  void set_moneytype(const char* value, size_t size);
  ::std::string* mutable_moneytype();
  ::std::string* release_moneytype();
  void set_allocated_moneytype(::std::string* moneytype);

  // optional string request_id = 6;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 6;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // required double fund_bal = 3;
  bool has_fund_bal() const;
  void clear_fund_bal();
  static const int kFundBalFieldNumber = 3;
  double fund_bal() const;
  void set_fund_bal(double value);

  // required double fund_ava = 4;
  bool has_fund_ava() const;
  void clear_fund_ava();
  static const int kFundAvaFieldNumber = 4;
  double fund_ava() const;
  void set_fund_ava(double value);

  // required double market_value = 5;
  bool has_market_value() const;
  void clear_market_value();
  static const int kMarketValueFieldNumber = 5;
  double market_value() const;
  void set_market_value(double value);

  // optional int32 funcid = 1 [default = 11102010];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.StockCapital)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_moneytype();
  void clear_has_moneytype();
  void set_has_fund_bal();
  void clear_has_fund_bal();
  void set_has_fund_ava();
  void clear_has_fund_ava();
  void set_has_market_value();
  void clear_has_market_value();
  void set_has_request_id();
  void clear_has_request_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr moneytype_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  double fund_bal_;
  double fund_ava_;
  double market_value_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StockQueryPositionReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.StockQueryPositionReqt) */ {
 public:
  StockQueryPositionReqt();
  virtual ~StockQueryPositionReqt();

  StockQueryPositionReqt(const StockQueryPositionReqt& from);

  inline StockQueryPositionReqt& operator=(const StockQueryPositionReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StockQueryPositionReqt(StockQueryPositionReqt&& from) noexcept
    : StockQueryPositionReqt() {
    *this = ::std::move(from);
  }

  inline StockQueryPositionReqt& operator=(StockQueryPositionReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockQueryPositionReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StockQueryPositionReqt* internal_default_instance() {
    return reinterpret_cast<const StockQueryPositionReqt*>(
               &_StockQueryPositionReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(StockQueryPositionReqt* other);
  friend void swap(StockQueryPositionReqt& a, StockQueryPositionReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StockQueryPositionReqt* New() const final {
    return CreateMaybeMessage<StockQueryPositionReqt>(NULL);
  }

  StockQueryPositionReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StockQueryPositionReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StockQueryPositionReqt& from);
  void MergeFrom(const StockQueryPositionReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StockQueryPositionReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StockQueryPositionReqt_QueryType QueryType;
  static const QueryType Type_ONCE =
    StockQueryPositionReqt_QueryType_Type_ONCE;
  static const QueryType Type_MORE =
    StockQueryPositionReqt_QueryType_Type_MORE;
  static const QueryType Type_ALL =
    StockQueryPositionReqt_QueryType_Type_ALL;
  static inline bool QueryType_IsValid(int value) {
    return StockQueryPositionReqt_QueryType_IsValid(value);
  }
  static const QueryType QueryType_MIN =
    StockQueryPositionReqt_QueryType_QueryType_MIN;
  static const QueryType QueryType_MAX =
    StockQueryPositionReqt_QueryType_QueryType_MAX;
  static const int QueryType_ARRAYSIZE =
    StockQueryPositionReqt_QueryType_QueryType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  QueryType_descriptor() {
    return StockQueryPositionReqt_QueryType_descriptor();
  }
  static inline const ::std::string& QueryType_Name(QueryType value) {
    return StockQueryPositionReqt_QueryType_Name(value);
  }
  static inline bool QueryType_Parse(const ::std::string& name,
      QueryType* value) {
    return StockQueryPositionReqt_QueryType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string code = 2;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string start_pos = 6 [default = ""];
  bool has_start_pos() const;
  void clear_start_pos();
  static const int kStartPosFieldNumber = 6;
  const ::std::string& start_pos() const;
  void set_start_pos(const ::std::string& value);
  #if LANG_CXX11
  void set_start_pos(::std::string&& value);
  #endif
  void set_start_pos(const char* value);
  void set_start_pos(const char* value, size_t size);
  ::std::string* mutable_start_pos();
  ::std::string* release_start_pos();
  void set_allocated_start_pos(::std::string* start_pos);

  // optional string request_id = 7;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 7;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional string fund_id = 10;
  bool has_fund_id() const;
  void clear_fund_id();
  static const int kFundIdFieldNumber = 10;
  const ::std::string& fund_id() const;
  void set_fund_id(const ::std::string& value);
  #if LANG_CXX11
  void set_fund_id(::std::string&& value);
  #endif
  void set_fund_id(const char* value);
  void set_fund_id(const char* value, size_t size);
  ::std::string* mutable_fund_id();
  ::std::string* release_fund_id();
  void set_allocated_fund_id(::std::string* fund_id);

  // optional string session_id = 11;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 11;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // optional uint32 market = 3;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 3;
  ::google::protobuf::uint32 market() const;
  void set_market(::google::protobuf::uint32 value);

  // optional .autotrade.StockQueryPositionReqt.QueryType query_type = 5 [default = Type_ONCE];
  bool has_query_type() const;
  void clear_query_type();
  static const int kQueryTypeFieldNumber = 5;
  ::autotrade::StockQueryPositionReqt_QueryType query_type() const;
  void set_query_type(::autotrade::StockQueryPositionReqt_QueryType value);

  // optional int64 request_time = 8 [default = 0];
  bool has_request_time() const;
  void clear_request_time();
  static const int kRequestTimeFieldNumber = 8;
  ::google::protobuf::int64 request_time() const;
  void set_request_time(::google::protobuf::int64 value);

  // optional int32 funcid = 1 [default = 11002006];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // optional uint32 query_count = 4 [default = 500];
  bool has_query_count() const;
  void clear_query_count();
  static const int kQueryCountFieldNumber = 4;
  ::google::protobuf::uint32 query_count() const;
  void set_query_count(::google::protobuf::uint32 value);

  // optional int64 active_interval = 9 [default = 1000];
  bool has_active_interval() const;
  void clear_active_interval();
  static const int kActiveIntervalFieldNumber = 9;
  ::google::protobuf::int64 active_interval() const;
  void set_active_interval(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:autotrade.StockQueryPositionReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_code();
  void clear_has_code();
  void set_has_market();
  void clear_has_market();
  void set_has_query_count();
  void clear_has_query_count();
  void set_has_query_type();
  void clear_has_query_type();
  void set_has_start_pos();
  void clear_has_start_pos();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_request_time();
  void clear_has_request_time();
  void set_has_active_interval();
  void clear_has_active_interval();
  void set_has_fund_id();
  void clear_has_fund_id();
  void set_has_session_id();
  void clear_has_session_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr start_pos_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr fund_id_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::uint32 market_;
  int query_type_;
  ::google::protobuf::int64 request_time_;
  ::google::protobuf::int32 funcid_;
  ::google::protobuf::uint32 query_count_;
  ::google::protobuf::int64 active_interval_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StockPosition_Position : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.StockPosition.Position) */ {
 public:
  StockPosition_Position();
  virtual ~StockPosition_Position();

  StockPosition_Position(const StockPosition_Position& from);

  inline StockPosition_Position& operator=(const StockPosition_Position& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StockPosition_Position(StockPosition_Position&& from) noexcept
    : StockPosition_Position() {
    *this = ::std::move(from);
  }

  inline StockPosition_Position& operator=(StockPosition_Position&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockPosition_Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StockPosition_Position* internal_default_instance() {
    return reinterpret_cast<const StockPosition_Position*>(
               &_StockPosition_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(StockPosition_Position* other);
  friend void swap(StockPosition_Position& a, StockPosition_Position& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StockPosition_Position* New() const final {
    return CreateMaybeMessage<StockPosition_Position>(NULL);
  }

  StockPosition_Position* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StockPosition_Position>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StockPosition_Position& from);
  void MergeFrom(const StockPosition_Position& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StockPosition_Position* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string code = 2;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string start_pos = 15;
  bool has_start_pos() const;
  void clear_start_pos();
  static const int kStartPosFieldNumber = 15;
  const ::std::string& start_pos() const;
  void set_start_pos(const ::std::string& value);
  #if LANG_CXX11
  void set_start_pos(::std::string&& value);
  #endif
  void set_start_pos(const char* value);
  void set_start_pos(const char* value, size_t size);
  ::std::string* mutable_start_pos();
  ::std::string* release_start_pos();
  void set_allocated_start_pos(::std::string* start_pos);

  // required int64 bal = 4;
  bool has_bal() const;
  void clear_bal();
  static const int kBalFieldNumber = 4;
  ::google::protobuf::int64 bal() const;
  void set_bal(::google::protobuf::int64 value);

  // required int64 can_sell_qty = 5;
  bool has_can_sell_qty() const;
  void clear_can_sell_qty();
  static const int kCanSellQtyFieldNumber = 5;
  ::google::protobuf::int64 can_sell_qty() const;
  void set_can_sell_qty(::google::protobuf::int64 value);

  // optional int64 can_create_qty = 6;
  bool has_can_create_qty() const;
  void clear_can_create_qty();
  static const int kCanCreateQtyFieldNumber = 6;
  ::google::protobuf::int64 can_create_qty() const;
  void set_can_create_qty(::google::protobuf::int64 value);

  // optional int64 can_redeem_qty = 7;
  bool has_can_redeem_qty() const;
  void clear_can_redeem_qty();
  static const int kCanRedeemQtyFieldNumber = 7;
  ::google::protobuf::int64 can_redeem_qty() const;
  void set_can_redeem_qty(::google::protobuf::int64 value);

  // optional int64 buy_frz_qty = 8;
  bool has_buy_frz_qty() const;
  void clear_buy_frz_qty();
  static const int kBuyFrzQtyFieldNumber = 8;
  ::google::protobuf::int64 buy_frz_qty() const;
  void set_buy_frz_qty(::google::protobuf::int64 value);

  // optional int64 sell_frz_qty = 9;
  bool has_sell_frz_qty() const;
  void clear_sell_frz_qty();
  static const int kSellFrzQtyFieldNumber = 9;
  ::google::protobuf::int64 sell_frz_qty() const;
  void set_sell_frz_qty(::google::protobuf::int64 value);

  // optional int64 td_buy_qty = 10;
  bool has_td_buy_qty() const;
  void clear_td_buy_qty();
  static const int kTdBuyQtyFieldNumber = 10;
  ::google::protobuf::int64 td_buy_qty() const;
  void set_td_buy_qty(::google::protobuf::int64 value);

  // optional int64 td_sell_qty = 11;
  bool has_td_sell_qty() const;
  void clear_td_sell_qty();
  static const int kTdSellQtyFieldNumber = 11;
  ::google::protobuf::int64 td_sell_qty() const;
  void set_td_sell_qty(::google::protobuf::int64 value);

  // optional int64 yd_qty = 12;
  bool has_yd_qty() const;
  void clear_yd_qty();
  static const int kYdQtyFieldNumber = 12;
  ::google::protobuf::int64 yd_qty() const;
  void set_yd_qty(::google::protobuf::int64 value);

  // required double market_value = 13;
  bool has_market_value() const;
  void clear_market_value();
  static const int kMarketValueFieldNumber = 13;
  double market_value() const;
  void set_market_value(double value);

  // required double cost_price = 14;
  bool has_cost_price() const;
  void clear_cost_price();
  static const int kCostPriceFieldNumber = 14;
  double cost_price() const;
  void set_cost_price(double value);

  // required uint32 market = 1;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 1;
  ::google::protobuf::uint32 market() const;
  void set_market(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:autotrade.StockPosition.Position)
 private:
  void set_has_market();
  void clear_has_market();
  void set_has_code();
  void clear_has_code();
  void set_has_name();
  void clear_has_name();
  void set_has_bal();
  void clear_has_bal();
  void set_has_can_sell_qty();
  void clear_has_can_sell_qty();
  void set_has_can_create_qty();
  void clear_has_can_create_qty();
  void set_has_can_redeem_qty();
  void clear_has_can_redeem_qty();
  void set_has_buy_frz_qty();
  void clear_has_buy_frz_qty();
  void set_has_sell_frz_qty();
  void clear_has_sell_frz_qty();
  void set_has_td_buy_qty();
  void clear_has_td_buy_qty();
  void set_has_td_sell_qty();
  void clear_has_td_sell_qty();
  void set_has_yd_qty();
  void clear_has_yd_qty();
  void set_has_market_value();
  void clear_has_market_value();
  void set_has_cost_price();
  void clear_has_cost_price();
  void set_has_start_pos();
  void clear_has_start_pos();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr start_pos_;
  ::google::protobuf::int64 bal_;
  ::google::protobuf::int64 can_sell_qty_;
  ::google::protobuf::int64 can_create_qty_;
  ::google::protobuf::int64 can_redeem_qty_;
  ::google::protobuf::int64 buy_frz_qty_;
  ::google::protobuf::int64 sell_frz_qty_;
  ::google::protobuf::int64 td_buy_qty_;
  ::google::protobuf::int64 td_sell_qty_;
  ::google::protobuf::int64 yd_qty_;
  double market_value_;
  double cost_price_;
  ::google::protobuf::uint32 market_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StockPosition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.StockPosition) */ {
 public:
  StockPosition();
  virtual ~StockPosition();

  StockPosition(const StockPosition& from);

  inline StockPosition& operator=(const StockPosition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StockPosition(StockPosition&& from) noexcept
    : StockPosition() {
    *this = ::std::move(from);
  }

  inline StockPosition& operator=(StockPosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StockPosition* internal_default_instance() {
    return reinterpret_cast<const StockPosition*>(
               &_StockPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(StockPosition* other);
  friend void swap(StockPosition& a, StockPosition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StockPosition* New() const final {
    return CreateMaybeMessage<StockPosition>(NULL);
  }

  StockPosition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StockPosition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StockPosition& from);
  void MergeFrom(const StockPosition& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StockPosition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StockPosition_Position Position;

  // accessors -------------------------------------------------------

  // repeated .autotrade.StockPosition.Position positions = 2;
  int positions_size() const;
  void clear_positions();
  static const int kPositionsFieldNumber = 2;
  ::autotrade::StockPosition_Position* mutable_positions(int index);
  ::google::protobuf::RepeatedPtrField< ::autotrade::StockPosition_Position >*
      mutable_positions();
  const ::autotrade::StockPosition_Position& positions(int index) const;
  ::autotrade::StockPosition_Position* add_positions();
  const ::google::protobuf::RepeatedPtrField< ::autotrade::StockPosition_Position >&
      positions() const;

  // optional string last_pos = 3;
  bool has_last_pos() const;
  void clear_last_pos();
  static const int kLastPosFieldNumber = 3;
  const ::std::string& last_pos() const;
  void set_last_pos(const ::std::string& value);
  #if LANG_CXX11
  void set_last_pos(::std::string&& value);
  #endif
  void set_last_pos(const char* value);
  void set_last_pos(const char* value, size_t size);
  ::std::string* mutable_last_pos();
  ::std::string* release_last_pos();
  void set_allocated_last_pos(::std::string* last_pos);

  // optional string request_id = 4;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 4;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional int32 funcid = 1 [default = 11102006];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.StockPosition)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_last_pos();
  void clear_has_last_pos();
  void set_has_request_id();
  void clear_has_request_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::autotrade::StockPosition_Position > positions_;
  ::google::protobuf::internal::ArenaStringPtr last_pos_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StockQueryDealDetailReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.StockQueryDealDetailReqt) */ {
 public:
  StockQueryDealDetailReqt();
  virtual ~StockQueryDealDetailReqt();

  StockQueryDealDetailReqt(const StockQueryDealDetailReqt& from);

  inline StockQueryDealDetailReqt& operator=(const StockQueryDealDetailReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StockQueryDealDetailReqt(StockQueryDealDetailReqt&& from) noexcept
    : StockQueryDealDetailReqt() {
    *this = ::std::move(from);
  }

  inline StockQueryDealDetailReqt& operator=(StockQueryDealDetailReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockQueryDealDetailReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StockQueryDealDetailReqt* internal_default_instance() {
    return reinterpret_cast<const StockQueryDealDetailReqt*>(
               &_StockQueryDealDetailReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(StockQueryDealDetailReqt* other);
  friend void swap(StockQueryDealDetailReqt& a, StockQueryDealDetailReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StockQueryDealDetailReqt* New() const final {
    return CreateMaybeMessage<StockQueryDealDetailReqt>(NULL);
  }

  StockQueryDealDetailReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StockQueryDealDetailReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StockQueryDealDetailReqt& from);
  void MergeFrom(const StockQueryDealDetailReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StockQueryDealDetailReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StockQueryDealDetailReqt_QueryType QueryType;
  static const QueryType Type_ONCE =
    StockQueryDealDetailReqt_QueryType_Type_ONCE;
  static const QueryType Type_MORE =
    StockQueryDealDetailReqt_QueryType_Type_MORE;
  static const QueryType Type_ALL =
    StockQueryDealDetailReqt_QueryType_Type_ALL;
  static inline bool QueryType_IsValid(int value) {
    return StockQueryDealDetailReqt_QueryType_IsValid(value);
  }
  static const QueryType QueryType_MIN =
    StockQueryDealDetailReqt_QueryType_QueryType_MIN;
  static const QueryType QueryType_MAX =
    StockQueryDealDetailReqt_QueryType_QueryType_MAX;
  static const int QueryType_ARRAYSIZE =
    StockQueryDealDetailReqt_QueryType_QueryType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  QueryType_descriptor() {
    return StockQueryDealDetailReqt_QueryType_descriptor();
  }
  static inline const ::std::string& QueryType_Name(QueryType value) {
    return StockQueryDealDetailReqt_QueryType_Name(value);
  }
  static inline bool QueryType_Parse(const ::std::string& name,
      QueryType* value) {
    return StockQueryDealDetailReqt_QueryType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string orderno = 2 [default = ""];
  bool has_orderno() const;
  void clear_orderno();
  static const int kOrdernoFieldNumber = 2;
  const ::std::string& orderno() const;
  void set_orderno(const ::std::string& value);
  #if LANG_CXX11
  void set_orderno(::std::string&& value);
  #endif
  void set_orderno(const char* value);
  void set_orderno(const char* value, size_t size);
  ::std::string* mutable_orderno();
  ::std::string* release_orderno();
  void set_allocated_orderno(::std::string* orderno);

  // optional string start_pos = 5 [default = ""];
  bool has_start_pos() const;
  void clear_start_pos();
  static const int kStartPosFieldNumber = 5;
  const ::std::string& start_pos() const;
  void set_start_pos(const ::std::string& value);
  #if LANG_CXX11
  void set_start_pos(::std::string&& value);
  #endif
  void set_start_pos(const char* value);
  void set_start_pos(const char* value, size_t size);
  ::std::string* mutable_start_pos();
  ::std::string* release_start_pos();
  void set_allocated_start_pos(::std::string* start_pos);

  // optional string request_id = 6;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 6;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional string fund_id = 9;
  bool has_fund_id() const;
  void clear_fund_id();
  static const int kFundIdFieldNumber = 9;
  const ::std::string& fund_id() const;
  void set_fund_id(const ::std::string& value);
  #if LANG_CXX11
  void set_fund_id(::std::string&& value);
  #endif
  void set_fund_id(const char* value);
  void set_fund_id(const char* value, size_t size);
  ::std::string* mutable_fund_id();
  ::std::string* release_fund_id();
  void set_allocated_fund_id(::std::string* fund_id);

  // optional string session_id = 10;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 10;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // optional int64 request_time = 7 [default = 0];
  bool has_request_time() const;
  void clear_request_time();
  static const int kRequestTimeFieldNumber = 7;
  ::google::protobuf::int64 request_time() const;
  void set_request_time(::google::protobuf::int64 value);

  // optional .autotrade.StockQueryDealDetailReqt.QueryType query_type = 4 [default = Type_ONCE];
  bool has_query_type() const;
  void clear_query_type();
  static const int kQueryTypeFieldNumber = 4;
  ::autotrade::StockQueryDealDetailReqt_QueryType query_type() const;
  void set_query_type(::autotrade::StockQueryDealDetailReqt_QueryType value);

  // optional int32 funcid = 1 [default = 11002004];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // optional uint32 query_count = 3 [default = 500];
  bool has_query_count() const;
  void clear_query_count();
  static const int kQueryCountFieldNumber = 3;
  ::google::protobuf::uint32 query_count() const;
  void set_query_count(::google::protobuf::uint32 value);

  // optional int64 active_interval = 8 [default = 1000];
  bool has_active_interval() const;
  void clear_active_interval();
  static const int kActiveIntervalFieldNumber = 8;
  ::google::protobuf::int64 active_interval() const;
  void set_active_interval(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:autotrade.StockQueryDealDetailReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_orderno();
  void clear_has_orderno();
  void set_has_query_count();
  void clear_has_query_count();
  void set_has_query_type();
  void clear_has_query_type();
  void set_has_start_pos();
  void clear_has_start_pos();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_request_time();
  void clear_has_request_time();
  void set_has_active_interval();
  void clear_has_active_interval();
  void set_has_fund_id();
  void clear_has_fund_id();
  void set_has_session_id();
  void clear_has_session_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr orderno_;
  ::google::protobuf::internal::ArenaStringPtr start_pos_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr fund_id_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::int64 request_time_;
  int query_type_;
  ::google::protobuf::int32 funcid_;
  ::google::protobuf::uint32 query_count_;
  ::google::protobuf::int64 active_interval_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StockDealDetail : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.StockDealDetail) */ {
 public:
  StockDealDetail();
  virtual ~StockDealDetail();

  StockDealDetail(const StockDealDetail& from);

  inline StockDealDetail& operator=(const StockDealDetail& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StockDealDetail(StockDealDetail&& from) noexcept
    : StockDealDetail() {
    *this = ::std::move(from);
  }

  inline StockDealDetail& operator=(StockDealDetail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockDealDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StockDealDetail* internal_default_instance() {
    return reinterpret_cast<const StockDealDetail*>(
               &_StockDealDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(StockDealDetail* other);
  friend void swap(StockDealDetail& a, StockDealDetail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StockDealDetail* New() const final {
    return CreateMaybeMessage<StockDealDetail>(NULL);
  }

  StockDealDetail* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StockDealDetail>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StockDealDetail& from);
  void MergeFrom(const StockDealDetail& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StockDealDetail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .autotrade.RawStockKnock knocks = 2;
  int knocks_size() const;
  void clear_knocks();
  static const int kKnocksFieldNumber = 2;
  ::autotrade::RawStockKnock* mutable_knocks(int index);
  ::google::protobuf::RepeatedPtrField< ::autotrade::RawStockKnock >*
      mutable_knocks();
  const ::autotrade::RawStockKnock& knocks(int index) const;
  ::autotrade::RawStockKnock* add_knocks();
  const ::google::protobuf::RepeatedPtrField< ::autotrade::RawStockKnock >&
      knocks() const;

  // optional string last_pos = 3;
  bool has_last_pos() const;
  void clear_last_pos();
  static const int kLastPosFieldNumber = 3;
  const ::std::string& last_pos() const;
  void set_last_pos(const ::std::string& value);
  #if LANG_CXX11
  void set_last_pos(::std::string&& value);
  #endif
  void set_last_pos(const char* value);
  void set_last_pos(const char* value, size_t size);
  ::std::string* mutable_last_pos();
  ::std::string* release_last_pos();
  void set_allocated_last_pos(::std::string* last_pos);

  // optional string request_id = 4;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 4;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional int32 funcid = 1 [default = 11102004];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.StockDealDetail)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_last_pos();
  void clear_has_last_pos();
  void set_has_request_id();
  void clear_has_request_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::autotrade::RawStockKnock > knocks_;
  ::google::protobuf::internal::ArenaStringPtr last_pos_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ETFBasketDynamicInfoReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.ETFBasketDynamicInfoReqt) */ {
 public:
  ETFBasketDynamicInfoReqt();
  virtual ~ETFBasketDynamicInfoReqt();

  ETFBasketDynamicInfoReqt(const ETFBasketDynamicInfoReqt& from);

  inline ETFBasketDynamicInfoReqt& operator=(const ETFBasketDynamicInfoReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ETFBasketDynamicInfoReqt(ETFBasketDynamicInfoReqt&& from) noexcept
    : ETFBasketDynamicInfoReqt() {
    *this = ::std::move(from);
  }

  inline ETFBasketDynamicInfoReqt& operator=(ETFBasketDynamicInfoReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ETFBasketDynamicInfoReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ETFBasketDynamicInfoReqt* internal_default_instance() {
    return reinterpret_cast<const ETFBasketDynamicInfoReqt*>(
               &_ETFBasketDynamicInfoReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(ETFBasketDynamicInfoReqt* other);
  friend void swap(ETFBasketDynamicInfoReqt& a, ETFBasketDynamicInfoReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ETFBasketDynamicInfoReqt* New() const final {
    return CreateMaybeMessage<ETFBasketDynamicInfoReqt>(NULL);
  }

  ETFBasketDynamicInfoReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ETFBasketDynamicInfoReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ETFBasketDynamicInfoReqt& from);
  void MergeFrom(const ETFBasketDynamicInfoReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ETFBasketDynamicInfoReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string code = 2;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string request_id = 4;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 4;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional int64 request_time = 5 [default = 0];
  bool has_request_time() const;
  void clear_request_time();
  static const int kRequestTimeFieldNumber = 5;
  ::google::protobuf::int64 request_time() const;
  void set_request_time(::google::protobuf::int64 value);

  // required uint32 market = 3;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 3;
  ::google::protobuf::uint32 market() const;
  void set_market(::google::protobuf::uint32 value);

  // optional int32 funcid = 1 [default = 11002011];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // optional int64 active_interval = 6 [default = 1000];
  bool has_active_interval() const;
  void clear_active_interval();
  static const int kActiveIntervalFieldNumber = 6;
  ::google::protobuf::int64 active_interval() const;
  void set_active_interval(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:autotrade.ETFBasketDynamicInfoReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_code();
  void clear_has_code();
  void set_has_market();
  void clear_has_market();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_request_time();
  void clear_has_request_time();
  void set_has_active_interval();
  void clear_has_active_interval();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::int64 request_time_;
  ::google::protobuf::uint32 market_;
  ::google::protobuf::int32 funcid_;
  ::google::protobuf::int64 active_interval_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ETFBasketDynamicInfo_DynamicInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.ETFBasketDynamicInfo.DynamicInfo) */ {
 public:
  ETFBasketDynamicInfo_DynamicInfo();
  virtual ~ETFBasketDynamicInfo_DynamicInfo();

  ETFBasketDynamicInfo_DynamicInfo(const ETFBasketDynamicInfo_DynamicInfo& from);

  inline ETFBasketDynamicInfo_DynamicInfo& operator=(const ETFBasketDynamicInfo_DynamicInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ETFBasketDynamicInfo_DynamicInfo(ETFBasketDynamicInfo_DynamicInfo&& from) noexcept
    : ETFBasketDynamicInfo_DynamicInfo() {
    *this = ::std::move(from);
  }

  inline ETFBasketDynamicInfo_DynamicInfo& operator=(ETFBasketDynamicInfo_DynamicInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ETFBasketDynamicInfo_DynamicInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ETFBasketDynamicInfo_DynamicInfo* internal_default_instance() {
    return reinterpret_cast<const ETFBasketDynamicInfo_DynamicInfo*>(
               &_ETFBasketDynamicInfo_DynamicInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(ETFBasketDynamicInfo_DynamicInfo* other);
  friend void swap(ETFBasketDynamicInfo_DynamicInfo& a, ETFBasketDynamicInfo_DynamicInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ETFBasketDynamicInfo_DynamicInfo* New() const final {
    return CreateMaybeMessage<ETFBasketDynamicInfo_DynamicInfo>(NULL);
  }

  ETFBasketDynamicInfo_DynamicInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ETFBasketDynamicInfo_DynamicInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ETFBasketDynamicInfo_DynamicInfo& from);
  void MergeFrom(const ETFBasketDynamicInfo_DynamicInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ETFBasketDynamicInfo_DynamicInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string code = 2;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional uint32 market = 1;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 1;
  ::google::protobuf::uint32 market() const;
  void set_market(::google::protobuf::uint32 value);

  // required uint32 creatable_qty = 3;
  bool has_creatable_qty() const;
  void clear_creatable_qty();
  static const int kCreatableQtyFieldNumber = 3;
  ::google::protobuf::uint32 creatable_qty() const;
  void set_creatable_qty(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:autotrade.ETFBasketDynamicInfo.DynamicInfo)
 private:
  void set_has_market();
  void clear_has_market();
  void set_has_code();
  void clear_has_code();
  void set_has_creatable_qty();
  void clear_has_creatable_qty();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::uint32 market_;
  ::google::protobuf::uint32 creatable_qty_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ETFBasketDynamicInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.ETFBasketDynamicInfo) */ {
 public:
  ETFBasketDynamicInfo();
  virtual ~ETFBasketDynamicInfo();

  ETFBasketDynamicInfo(const ETFBasketDynamicInfo& from);

  inline ETFBasketDynamicInfo& operator=(const ETFBasketDynamicInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ETFBasketDynamicInfo(ETFBasketDynamicInfo&& from) noexcept
    : ETFBasketDynamicInfo() {
    *this = ::std::move(from);
  }

  inline ETFBasketDynamicInfo& operator=(ETFBasketDynamicInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ETFBasketDynamicInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ETFBasketDynamicInfo* internal_default_instance() {
    return reinterpret_cast<const ETFBasketDynamicInfo*>(
               &_ETFBasketDynamicInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(ETFBasketDynamicInfo* other);
  friend void swap(ETFBasketDynamicInfo& a, ETFBasketDynamicInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ETFBasketDynamicInfo* New() const final {
    return CreateMaybeMessage<ETFBasketDynamicInfo>(NULL);
  }

  ETFBasketDynamicInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ETFBasketDynamicInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ETFBasketDynamicInfo& from);
  void MergeFrom(const ETFBasketDynamicInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ETFBasketDynamicInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ETFBasketDynamicInfo_DynamicInfo DynamicInfo;

  // accessors -------------------------------------------------------

  // repeated .autotrade.ETFBasketDynamicInfo.DynamicInfo dynamic_info = 2;
  int dynamic_info_size() const;
  void clear_dynamic_info();
  static const int kDynamicInfoFieldNumber = 2;
  ::autotrade::ETFBasketDynamicInfo_DynamicInfo* mutable_dynamic_info(int index);
  ::google::protobuf::RepeatedPtrField< ::autotrade::ETFBasketDynamicInfo_DynamicInfo >*
      mutable_dynamic_info();
  const ::autotrade::ETFBasketDynamicInfo_DynamicInfo& dynamic_info(int index) const;
  ::autotrade::ETFBasketDynamicInfo_DynamicInfo* add_dynamic_info();
  const ::google::protobuf::RepeatedPtrField< ::autotrade::ETFBasketDynamicInfo_DynamicInfo >&
      dynamic_info() const;

  // optional string request_id = 3;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional int32 funcid = 1 [default = 11102011];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.ETFBasketDynamicInfo)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_request_id();
  void clear_has_request_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::autotrade::ETFBasketDynamicInfo_DynamicInfo > dynamic_info_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RawStockKnock : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.RawStockKnock) */ {
 public:
  RawStockKnock();
  virtual ~RawStockKnock();

  RawStockKnock(const RawStockKnock& from);

  inline RawStockKnock& operator=(const RawStockKnock& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RawStockKnock(RawStockKnock&& from) noexcept
    : RawStockKnock() {
    *this = ::std::move(from);
  }

  inline RawStockKnock& operator=(RawStockKnock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RawStockKnock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RawStockKnock* internal_default_instance() {
    return reinterpret_cast<const RawStockKnock*>(
               &_RawStockKnock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void Swap(RawStockKnock* other);
  friend void swap(RawStockKnock& a, RawStockKnock& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RawStockKnock* New() const final {
    return CreateMaybeMessage<RawStockKnock>(NULL);
  }

  RawStockKnock* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RawStockKnock>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RawStockKnock& from);
  void MergeFrom(const RawStockKnock& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RawStockKnock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string order_group = 3;
  bool has_order_group() const;
  void clear_order_group();
  static const int kOrderGroupFieldNumber = 3;
  const ::std::string& order_group() const;
  void set_order_group(const ::std::string& value);
  #if LANG_CXX11
  void set_order_group(::std::string&& value);
  #endif
  void set_order_group(const char* value);
  void set_order_group(const char* value, size_t size);
  ::std::string* mutable_order_group();
  ::std::string* release_order_group();
  void set_allocated_order_group(::std::string* order_group);

  // required string orderno = 4;
  bool has_orderno() const;
  void clear_orderno();
  static const int kOrdernoFieldNumber = 4;
  const ::std::string& orderno() const;
  void set_orderno(const ::std::string& value);
  #if LANG_CXX11
  void set_orderno(::std::string&& value);
  #endif
  void set_orderno(const char* value);
  void set_orderno(const char* value, size_t size);
  ::std::string* mutable_orderno();
  ::std::string* release_orderno();
  void set_allocated_orderno(::std::string* orderno);

  // required string code = 6;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 6;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // required string match_id = 16;
  bool has_match_id() const;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 16;
  const ::std::string& match_id() const;
  void set_match_id(const ::std::string& value);
  #if LANG_CXX11
  void set_match_id(::std::string&& value);
  #endif
  void set_match_id(const char* value);
  void set_match_id(const char* value, size_t size);
  ::std::string* mutable_match_id();
  ::std::string* release_match_id();
  void set_allocated_match_id(::std::string* match_id);

  // required string stock_account = 17;
  bool has_stock_account() const;
  void clear_stock_account();
  static const int kStockAccountFieldNumber = 17;
  const ::std::string& stock_account() const;
  void set_stock_account(const ::std::string& value);
  #if LANG_CXX11
  void set_stock_account(::std::string&& value);
  #endif
  void set_stock_account(const char* value);
  void set_stock_account(const char* value, size_t size);
  ::std::string* mutable_stock_account();
  ::std::string* release_stock_account();
  void set_allocated_stock_account(::std::string* stock_account);

  // optional string oppo_account = 18;
  bool has_oppo_account() const;
  void clear_oppo_account();
  static const int kOppoAccountFieldNumber = 18;
  const ::std::string& oppo_account() const;
  void set_oppo_account(const ::std::string& value);
  #if LANG_CXX11
  void set_oppo_account(::std::string&& value);
  #endif
  void set_oppo_account(const char* value);
  void set_oppo_account(const char* value, size_t size);
  ::std::string* mutable_oppo_account();
  ::std::string* release_oppo_account();
  void set_allocated_oppo_account(::std::string* oppo_account);

  // optional string name = 19;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 19;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string start_pos = 20;
  bool has_start_pos() const;
  void clear_start_pos();
  static const int kStartPosFieldNumber = 20;
  const ::std::string& start_pos() const;
  void set_start_pos(const ::std::string& value);
  #if LANG_CXX11
  void set_start_pos(::std::string&& value);
  #endif
  void set_start_pos(const char* value);
  void set_start_pos(const char* value, size_t size);
  ::std::string* mutable_start_pos();
  ::std::string* release_start_pos();
  void set_allocated_start_pos(::std::string* start_pos);

  // optional string fund_id = 21;
  bool has_fund_id() const;
  void clear_fund_id();
  static const int kFundIdFieldNumber = 21;
  const ::std::string& fund_id() const;
  void set_fund_id(const ::std::string& value);
  #if LANG_CXX11
  void set_fund_id(::std::string&& value);
  #endif
  void set_fund_id(const char* value);
  void set_fund_id(const char* value, size_t size);
  ::std::string* mutable_fund_id();
  ::std::string* release_fund_id();
  void set_allocated_fund_id(::std::string* fund_id);

  // required uint64 stamp = 2;
  bool has_stamp() const;
  void clear_stamp();
  static const int kStampFieldNumber = 2;
  ::google::protobuf::uint64 stamp() const;
  void set_stamp(::google::protobuf::uint64 value);

  // optional int64 order_price = 7;
  bool has_order_price() const;
  void clear_order_price();
  static const int kOrderPriceFieldNumber = 7;
  ::google::protobuf::int64 order_price() const;
  void set_order_price(::google::protobuf::int64 value);

  // optional uint32 market = 5;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 5;
  ::google::protobuf::uint32 market() const;
  void set_market(::google::protobuf::uint32 value);

  // required uint32 order_qty = 9;
  bool has_order_qty() const;
  void clear_order_qty();
  static const int kOrderQtyFieldNumber = 9;
  ::google::protobuf::uint32 order_qty() const;
  void set_order_qty(::google::protobuf::uint32 value);

  // required int64 match_qty = 8;
  bool has_match_qty() const;
  void clear_match_qty();
  static const int kMatchQtyFieldNumber = 8;
  ::google::protobuf::int64 match_qty() const;
  void set_match_qty(::google::protobuf::int64 value);

  // required uint32 bsflag = 10;
  bool has_bsflag() const;
  void clear_bsflag();
  static const int kBsflagFieldNumber = 10;
  ::google::protobuf::uint32 bsflag() const;
  void set_bsflag(::google::protobuf::uint32 value);

  // required int32 match_type = 11;
  bool has_match_type() const;
  void clear_match_type();
  static const int kMatchTypeFieldNumber = 11;
  ::google::protobuf::int32 match_type() const;
  void set_match_type(::google::protobuf::int32 value);

  // optional double clear_amt = 12;
  bool has_clear_amt() const;
  void clear_clear_amt();
  static const int kClearAmtFieldNumber = 12;
  double clear_amt() const;
  void set_clear_amt(double value);

  // required double match_amt = 13;
  bool has_match_amt() const;
  void clear_match_amt();
  static const int kMatchAmtFieldNumber = 13;
  double match_amt() const;
  void set_match_amt(double value);

  // required int64 match_price = 14;
  bool has_match_price() const;
  void clear_match_price();
  static const int kMatchPriceFieldNumber = 14;
  ::google::protobuf::int64 match_price() const;
  void set_match_price(::google::protobuf::int64 value);

  // optional int32 order_type = 15;
  bool has_order_type() const;
  void clear_order_type();
  static const int kOrderTypeFieldNumber = 15;
  ::google::protobuf::int32 order_type() const;
  void set_order_type(::google::protobuf::int32 value);

  // optional int32 funcid = 1 [default = 11003001];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.RawStockKnock)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_stamp();
  void clear_has_stamp();
  void set_has_order_group();
  void clear_has_order_group();
  void set_has_orderno();
  void clear_has_orderno();
  void set_has_market();
  void clear_has_market();
  void set_has_code();
  void clear_has_code();
  void set_has_order_price();
  void clear_has_order_price();
  void set_has_match_qty();
  void clear_has_match_qty();
  void set_has_order_qty();
  void clear_has_order_qty();
  void set_has_bsflag();
  void clear_has_bsflag();
  void set_has_match_type();
  void clear_has_match_type();
  void set_has_clear_amt();
  void clear_has_clear_amt();
  void set_has_match_amt();
  void clear_has_match_amt();
  void set_has_match_price();
  void clear_has_match_price();
  void set_has_order_type();
  void clear_has_order_type();
  void set_has_match_id();
  void clear_has_match_id();
  void set_has_stock_account();
  void clear_has_stock_account();
  void set_has_oppo_account();
  void clear_has_oppo_account();
  void set_has_name();
  void clear_has_name();
  void set_has_start_pos();
  void clear_has_start_pos();
  void set_has_fund_id();
  void clear_has_fund_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr order_group_;
  ::google::protobuf::internal::ArenaStringPtr orderno_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr match_id_;
  ::google::protobuf::internal::ArenaStringPtr stock_account_;
  ::google::protobuf::internal::ArenaStringPtr oppo_account_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr start_pos_;
  ::google::protobuf::internal::ArenaStringPtr fund_id_;
  ::google::protobuf::uint64 stamp_;
  ::google::protobuf::int64 order_price_;
  ::google::protobuf::uint32 market_;
  ::google::protobuf::uint32 order_qty_;
  ::google::protobuf::int64 match_qty_;
  ::google::protobuf::uint32 bsflag_;
  ::google::protobuf::int32 match_type_;
  double clear_amt_;
  double match_amt_;
  ::google::protobuf::int64 match_price_;
  ::google::protobuf::int32 order_type_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OneStockKnock : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.OneStockKnock) */ {
 public:
  OneStockKnock();
  virtual ~OneStockKnock();

  OneStockKnock(const OneStockKnock& from);

  inline OneStockKnock& operator=(const OneStockKnock& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OneStockKnock(OneStockKnock&& from) noexcept
    : OneStockKnock() {
    *this = ::std::move(from);
  }

  inline OneStockKnock& operator=(OneStockKnock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OneStockKnock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OneStockKnock* internal_default_instance() {
    return reinterpret_cast<const OneStockKnock*>(
               &_OneStockKnock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void Swap(OneStockKnock* other);
  friend void swap(OneStockKnock& a, OneStockKnock& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OneStockKnock* New() const final {
    return CreateMaybeMessage<OneStockKnock>(NULL);
  }

  OneStockKnock* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OneStockKnock>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OneStockKnock& from);
  void MergeFrom(const OneStockKnock& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OneStockKnock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string code = 3;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 3;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // required string order_group = 4;
  bool has_order_group() const;
  void clear_order_group();
  static const int kOrderGroupFieldNumber = 4;
  const ::std::string& order_group() const;
  void set_order_group(const ::std::string& value);
  #if LANG_CXX11
  void set_order_group(::std::string&& value);
  #endif
  void set_order_group(const char* value);
  void set_order_group(const char* value, size_t size);
  ::std::string* mutable_order_group();
  ::std::string* release_order_group();
  void set_allocated_order_group(::std::string* order_group);

  // required string orderno = 5;
  bool has_orderno() const;
  void clear_orderno();
  static const int kOrdernoFieldNumber = 5;
  const ::std::string& orderno() const;
  void set_orderno(const ::std::string& value);
  #if LANG_CXX11
  void set_orderno(::std::string&& value);
  #endif
  void set_orderno(const char* value);
  void set_orderno(const char* value, size_t size);
  ::std::string* mutable_orderno();
  ::std::string* release_orderno();
  void set_allocated_orderno(::std::string* orderno);

  // required string match_id = 6;
  bool has_match_id() const;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 6;
  const ::std::string& match_id() const;
  void set_match_id(const ::std::string& value);
  #if LANG_CXX11
  void set_match_id(::std::string&& value);
  #endif
  void set_match_id(const char* value);
  void set_match_id(const char* value, size_t size);
  ::std::string* mutable_match_id();
  ::std::string* release_match_id();
  void set_allocated_match_id(::std::string* match_id);

  // optional string fund_id = 13;
  bool has_fund_id() const;
  void clear_fund_id();
  static const int kFundIdFieldNumber = 13;
  const ::std::string& fund_id() const;
  void set_fund_id(const ::std::string& value);
  #if LANG_CXX11
  void set_fund_id(::std::string&& value);
  #endif
  void set_fund_id(const char* value);
  void set_fund_id(const char* value, size_t size);
  ::std::string* mutable_fund_id();
  ::std::string* release_fund_id();
  void set_allocated_fund_id(::std::string* fund_id);

  // required uint64 stamp = 2;
  bool has_stamp() const;
  void clear_stamp();
  static const int kStampFieldNumber = 2;
  ::google::protobuf::uint64 stamp() const;
  void set_stamp(::google::protobuf::uint64 value);

  // required uint32 order_qty = 7;
  bool has_order_qty() const;
  void clear_order_qty();
  static const int kOrderQtyFieldNumber = 7;
  ::google::protobuf::uint32 order_qty() const;
  void set_order_qty(::google::protobuf::uint32 value);

  // required uint32 match_qty = 8;
  bool has_match_qty() const;
  void clear_match_qty();
  static const int kMatchQtyFieldNumber = 8;
  ::google::protobuf::uint32 match_qty() const;
  void set_match_qty(::google::protobuf::uint32 value);

  // optional int64 order_price = 9;
  bool has_order_price() const;
  void clear_order_price();
  static const int kOrderPriceFieldNumber = 9;
  ::google::protobuf::int64 order_price() const;
  void set_order_price(::google::protobuf::int64 value);

  // required double match_price = 10;
  bool has_match_price() const;
  void clear_match_price();
  static const int kMatchPriceFieldNumber = 10;
  double match_price() const;
  void set_match_price(double value);

  // required double match_amt = 11;
  bool has_match_amt() const;
  void clear_match_amt();
  static const int kMatchAmtFieldNumber = 11;
  double match_amt() const;
  void set_match_amt(double value);

  // required uint32 bsflag = 12;
  bool has_bsflag() const;
  void clear_bsflag();
  static const int kBsflagFieldNumber = 12;
  ::google::protobuf::uint32 bsflag() const;
  void set_bsflag(::google::protobuf::uint32 value);

  // optional int32 funcid = 1 [default = 11003002];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.OneStockKnock)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_stamp();
  void clear_has_stamp();
  void set_has_code();
  void clear_has_code();
  void set_has_order_group();
  void clear_has_order_group();
  void set_has_orderno();
  void clear_has_orderno();
  void set_has_match_id();
  void clear_has_match_id();
  void set_has_order_qty();
  void clear_has_order_qty();
  void set_has_match_qty();
  void clear_has_match_qty();
  void set_has_order_price();
  void clear_has_order_price();
  void set_has_match_price();
  void clear_has_match_price();
  void set_has_match_amt();
  void clear_has_match_amt();
  void set_has_bsflag();
  void clear_has_bsflag();
  void set_has_fund_id();
  void clear_has_fund_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr order_group_;
  ::google::protobuf::internal::ArenaStringPtr orderno_;
  ::google::protobuf::internal::ArenaStringPtr match_id_;
  ::google::protobuf::internal::ArenaStringPtr fund_id_;
  ::google::protobuf::uint64 stamp_;
  ::google::protobuf::uint32 order_qty_;
  ::google::protobuf::uint32 match_qty_;
  ::google::protobuf::int64 order_price_;
  double match_price_;
  double match_amt_;
  ::google::protobuf::uint32 bsflag_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SumStockKnock : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.SumStockKnock) */ {
 public:
  SumStockKnock();
  virtual ~SumStockKnock();

  SumStockKnock(const SumStockKnock& from);

  inline SumStockKnock& operator=(const SumStockKnock& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SumStockKnock(SumStockKnock&& from) noexcept
    : SumStockKnock() {
    *this = ::std::move(from);
  }

  inline SumStockKnock& operator=(SumStockKnock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SumStockKnock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SumStockKnock* internal_default_instance() {
    return reinterpret_cast<const SumStockKnock*>(
               &_SumStockKnock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void Swap(SumStockKnock* other);
  friend void swap(SumStockKnock& a, SumStockKnock& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SumStockKnock* New() const final {
    return CreateMaybeMessage<SumStockKnock>(NULL);
  }

  SumStockKnock* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SumStockKnock>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SumStockKnock& from);
  void MergeFrom(const SumStockKnock& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SumStockKnock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .autotrade.OneStockKnock one_knocks = 11;
  int one_knocks_size() const;
  void clear_one_knocks();
  static const int kOneKnocksFieldNumber = 11;
  ::autotrade::OneStockKnock* mutable_one_knocks(int index);
  ::google::protobuf::RepeatedPtrField< ::autotrade::OneStockKnock >*
      mutable_one_knocks();
  const ::autotrade::OneStockKnock& one_knocks(int index) const;
  ::autotrade::OneStockKnock* add_one_knocks();
  const ::google::protobuf::RepeatedPtrField< ::autotrade::OneStockKnock >&
      one_knocks() const;

  // optional string type = 3 [default = "S"];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required string order_group = 4;
  bool has_order_group() const;
  void clear_order_group();
  static const int kOrderGroupFieldNumber = 4;
  const ::std::string& order_group() const;
  void set_order_group(const ::std::string& value);
  #if LANG_CXX11
  void set_order_group(::std::string&& value);
  #endif
  void set_order_group(const char* value);
  void set_order_group(const char* value, size_t size);
  ::std::string* mutable_order_group();
  ::std::string* release_order_group();
  void set_allocated_order_group(::std::string* order_group);

  // required string order_id = 10;
  bool has_order_id() const;
  void clear_order_id();
  static const int kOrderIdFieldNumber = 10;
  const ::std::string& order_id() const;
  void set_order_id(const ::std::string& value);
  #if LANG_CXX11
  void set_order_id(::std::string&& value);
  #endif
  void set_order_id(const char* value);
  void set_order_id(const char* value, size_t size);
  ::std::string* mutable_order_id();
  ::std::string* release_order_id();
  void set_allocated_order_id(::std::string* order_id);

  // optional string account_name = 12 [default = ""];
  bool has_account_name() const;
  void clear_account_name();
  static const int kAccountNameFieldNumber = 12;
  const ::std::string& account_name() const;
  void set_account_name(const ::std::string& value);
  #if LANG_CXX11
  void set_account_name(::std::string&& value);
  #endif
  void set_account_name(const char* value);
  void set_account_name(const char* value, size_t size);
  ::std::string* mutable_account_name();
  ::std::string* release_account_name();
  void set_allocated_account_name(::std::string* account_name);

  // optional string fund_id = 13;
  bool has_fund_id() const;
  void clear_fund_id();
  static const int kFundIdFieldNumber = 13;
  const ::std::string& fund_id() const;
  void set_fund_id(const ::std::string& value);
  #if LANG_CXX11
  void set_fund_id(::std::string&& value);
  #endif
  void set_fund_id(const char* value);
  void set_fund_id(const char* value, size_t size);
  ::std::string* mutable_fund_id();
  ::std::string* release_fund_id();
  void set_allocated_fund_id(::std::string* fund_id);

  // required uint64 stamp = 2;
  bool has_stamp() const;
  void clear_stamp();
  static const int kStampFieldNumber = 2;
  ::google::protobuf::uint64 stamp() const;
  void set_stamp(::google::protobuf::uint64 value);

  // required uint64 order_qty = 5;
  bool has_order_qty() const;
  void clear_order_qty();
  static const int kOrderQtyFieldNumber = 5;
  ::google::protobuf::uint64 order_qty() const;
  void set_order_qty(::google::protobuf::uint64 value);

  // required uint64 match_qty = 6;
  bool has_match_qty() const;
  void clear_match_qty();
  static const int kMatchQtyFieldNumber = 6;
  ::google::protobuf::uint64 match_qty() const;
  void set_match_qty(::google::protobuf::uint64 value);

  // optional double match_amt = 7;
  bool has_match_amt() const;
  void clear_match_amt();
  static const int kMatchAmtFieldNumber = 7;
  double match_amt() const;
  void set_match_amt(double value);

  // required uint64 cancel_qty = 8 [default = 0];
  bool has_cancel_qty() const;
  void clear_cancel_qty();
  static const int kCancelQtyFieldNumber = 8;
  ::google::protobuf::uint64 cancel_qty() const;
  void set_cancel_qty(::google::protobuf::uint64 value);

  // required bool finished = 9 [default = false];
  bool has_finished() const;
  void clear_finished();
  static const int kFinishedFieldNumber = 9;
  bool finished() const;
  void set_finished(bool value);

  // optional int32 funcid = 1 [default = 11003003];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.SumStockKnock)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_stamp();
  void clear_has_stamp();
  void set_has_type();
  void clear_has_type();
  void set_has_order_group();
  void clear_has_order_group();
  void set_has_order_qty();
  void clear_has_order_qty();
  void set_has_match_qty();
  void clear_has_match_qty();
  void set_has_match_amt();
  void clear_has_match_amt();
  void set_has_cancel_qty();
  void clear_has_cancel_qty();
  void set_has_finished();
  void clear_has_finished();
  void set_has_order_id();
  void clear_has_order_id();
  void set_has_account_name();
  void clear_has_account_name();
  void set_has_fund_id();
  void clear_has_fund_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::autotrade::OneStockKnock > one_knocks_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_type_;
  private:
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr order_group_;
  ::google::protobuf::internal::ArenaStringPtr order_id_;
  ::google::protobuf::internal::ArenaStringPtr account_name_;
  ::google::protobuf::internal::ArenaStringPtr fund_id_;
  ::google::protobuf::uint64 stamp_;
  ::google::protobuf::uint64 order_qty_;
  ::google::protobuf::uint64 match_qty_;
  double match_amt_;
  ::google::protobuf::uint64 cancel_qty_;
  bool finished_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CStockAvailableBalanceQueryReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.CStockAvailableBalanceQueryReqt) */ {
 public:
  CStockAvailableBalanceQueryReqt();
  virtual ~CStockAvailableBalanceQueryReqt();

  CStockAvailableBalanceQueryReqt(const CStockAvailableBalanceQueryReqt& from);

  inline CStockAvailableBalanceQueryReqt& operator=(const CStockAvailableBalanceQueryReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CStockAvailableBalanceQueryReqt(CStockAvailableBalanceQueryReqt&& from) noexcept
    : CStockAvailableBalanceQueryReqt() {
    *this = ::std::move(from);
  }

  inline CStockAvailableBalanceQueryReqt& operator=(CStockAvailableBalanceQueryReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CStockAvailableBalanceQueryReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CStockAvailableBalanceQueryReqt* internal_default_instance() {
    return reinterpret_cast<const CStockAvailableBalanceQueryReqt*>(
               &_CStockAvailableBalanceQueryReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  void Swap(CStockAvailableBalanceQueryReqt* other);
  friend void swap(CStockAvailableBalanceQueryReqt& a, CStockAvailableBalanceQueryReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CStockAvailableBalanceQueryReqt* New() const final {
    return CreateMaybeMessage<CStockAvailableBalanceQueryReqt>(NULL);
  }

  CStockAvailableBalanceQueryReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CStockAvailableBalanceQueryReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CStockAvailableBalanceQueryReqt& from);
  void MergeFrom(const CStockAvailableBalanceQueryReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStockAvailableBalanceQueryReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string fund_id = 2;
  bool has_fund_id() const;
  void clear_fund_id();
  static const int kFundIdFieldNumber = 2;
  const ::std::string& fund_id() const;
  void set_fund_id(const ::std::string& value);
  #if LANG_CXX11
  void set_fund_id(::std::string&& value);
  #endif
  void set_fund_id(const char* value);
  void set_fund_id(const char* value, size_t size);
  ::std::string* mutable_fund_id();
  ::std::string* release_fund_id();
  void set_allocated_fund_id(::std::string* fund_id);

  // optional string session_id = 3;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // optional int32 funcid = 1 [default = 11003004];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.CStockAvailableBalanceQueryReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_fund_id();
  void clear_has_fund_id();
  void set_has_session_id();
  void clear_has_session_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr fund_id_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CStockAvailableBalanceQueryResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.CStockAvailableBalanceQueryResp) */ {
 public:
  CStockAvailableBalanceQueryResp();
  virtual ~CStockAvailableBalanceQueryResp();

  CStockAvailableBalanceQueryResp(const CStockAvailableBalanceQueryResp& from);

  inline CStockAvailableBalanceQueryResp& operator=(const CStockAvailableBalanceQueryResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CStockAvailableBalanceQueryResp(CStockAvailableBalanceQueryResp&& from) noexcept
    : CStockAvailableBalanceQueryResp() {
    *this = ::std::move(from);
  }

  inline CStockAvailableBalanceQueryResp& operator=(CStockAvailableBalanceQueryResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CStockAvailableBalanceQueryResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CStockAvailableBalanceQueryResp* internal_default_instance() {
    return reinterpret_cast<const CStockAvailableBalanceQueryResp*>(
               &_CStockAvailableBalanceQueryResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  void Swap(CStockAvailableBalanceQueryResp* other);
  friend void swap(CStockAvailableBalanceQueryResp& a, CStockAvailableBalanceQueryResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CStockAvailableBalanceQueryResp* New() const final {
    return CreateMaybeMessage<CStockAvailableBalanceQueryResp>(NULL);
  }

  CStockAvailableBalanceQueryResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CStockAvailableBalanceQueryResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CStockAvailableBalanceQueryResp& from);
  void MergeFrom(const CStockAvailableBalanceQueryResp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStockAvailableBalanceQueryResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 funcid = 1 [default = 11103004];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.CStockAvailableBalanceQueryResp)
 private:
  void set_has_funcid();
  void clear_has_funcid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqstock_5fprotocol_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StockLoginReqt

// optional int32 funcid = 1 [default = 11000001];
inline bool StockLoginReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockLoginReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockLoginReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockLoginReqt::clear_funcid() {
  funcid_ = 11000001;
  clear_has_funcid();
}
inline ::google::protobuf::int32 StockLoginReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.StockLoginReqt.funcid)
  return funcid_;
}
inline void StockLoginReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockLoginReqt.funcid)
}

// optional string request_id = 2;
inline bool StockLoginReqt::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockLoginReqt::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockLoginReqt::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockLoginReqt::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& StockLoginReqt::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockLoginReqt.request_id)
  return request_id_.GetNoArena();
}
inline void StockLoginReqt::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockLoginReqt.request_id)
}
#if LANG_CXX11
inline void StockLoginReqt::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockLoginReqt.request_id)
}
#endif
inline void StockLoginReqt::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockLoginReqt.request_id)
}
inline void StockLoginReqt::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockLoginReqt.request_id)
}
inline ::std::string* StockLoginReqt::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockLoginReqt.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockLoginReqt::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockLoginReqt.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockLoginReqt::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockLoginReqt.request_id)
}

// -------------------------------------------------------------------

// StockLoginResp

// optional int32 funcid = 1 [default = 11100001];
inline bool StockLoginResp::has_funcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StockLoginResp::set_has_funcid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StockLoginResp::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StockLoginResp::clear_funcid() {
  funcid_ = 11100001;
  clear_has_funcid();
}
inline ::google::protobuf::int32 StockLoginResp::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.StockLoginResp.funcid)
  return funcid_;
}
inline void StockLoginResp::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockLoginResp.funcid)
}

// required string fund_account = 2;
inline bool StockLoginResp::has_fund_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockLoginResp::set_has_fund_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockLoginResp::clear_has_fund_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockLoginResp::clear_fund_account() {
  fund_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fund_account();
}
inline const ::std::string& StockLoginResp::fund_account() const {
  // @@protoc_insertion_point(field_get:autotrade.StockLoginResp.fund_account)
  return fund_account_.GetNoArena();
}
inline void StockLoginResp::set_fund_account(const ::std::string& value) {
  set_has_fund_account();
  fund_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockLoginResp.fund_account)
}
#if LANG_CXX11
inline void StockLoginResp::set_fund_account(::std::string&& value) {
  set_has_fund_account();
  fund_account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockLoginResp.fund_account)
}
#endif
inline void StockLoginResp::set_fund_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fund_account();
  fund_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockLoginResp.fund_account)
}
inline void StockLoginResp::set_fund_account(const char* value, size_t size) {
  set_has_fund_account();
  fund_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockLoginResp.fund_account)
}
inline ::std::string* StockLoginResp::mutable_fund_account() {
  set_has_fund_account();
  // @@protoc_insertion_point(field_mutable:autotrade.StockLoginResp.fund_account)
  return fund_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockLoginResp::release_fund_account() {
  // @@protoc_insertion_point(field_release:autotrade.StockLoginResp.fund_account)
  if (!has_fund_account()) {
    return NULL;
  }
  clear_has_fund_account();
  return fund_account_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockLoginResp::set_allocated_fund_account(::std::string* fund_account) {
  if (fund_account != NULL) {
    set_has_fund_account();
  } else {
    clear_has_fund_account();
  }
  fund_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fund_account);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockLoginResp.fund_account)
}

// optional string request_id = 3;
inline bool StockLoginResp::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockLoginResp::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockLoginResp::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockLoginResp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& StockLoginResp::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockLoginResp.request_id)
  return request_id_.GetNoArena();
}
inline void StockLoginResp::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockLoginResp.request_id)
}
#if LANG_CXX11
inline void StockLoginResp::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockLoginResp.request_id)
}
#endif
inline void StockLoginResp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockLoginResp.request_id)
}
inline void StockLoginResp::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockLoginResp.request_id)
}
inline ::std::string* StockLoginResp::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockLoginResp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockLoginResp::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockLoginResp.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockLoginResp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockLoginResp.request_id)
}

// -------------------------------------------------------------------

// StockOrderReqt

// optional int32 funcid = 1 [default = 11001001];
inline bool StockOrderReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void StockOrderReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void StockOrderReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void StockOrderReqt::clear_funcid() {
  funcid_ = 11001001;
  clear_has_funcid();
}
inline ::google::protobuf::int32 StockOrderReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrderReqt.funcid)
  return funcid_;
}
inline void StockOrderReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockOrderReqt.funcid)
}

// required string code = 2;
inline bool StockOrderReqt::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockOrderReqt::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockOrderReqt::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockOrderReqt::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& StockOrderReqt::code() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrderReqt.code)
  return code_.GetNoArena();
}
inline void StockOrderReqt::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockOrderReqt.code)
}
#if LANG_CXX11
inline void StockOrderReqt::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockOrderReqt.code)
}
#endif
inline void StockOrderReqt::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockOrderReqt.code)
}
inline void StockOrderReqt::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockOrderReqt.code)
}
inline ::std::string* StockOrderReqt::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrderReqt.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockOrderReqt::release_code() {
  // @@protoc_insertion_point(field_release:autotrade.StockOrderReqt.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockOrderReqt::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockOrderReqt.code)
}

// required int64 price = 3;
inline bool StockOrderReqt::has_price() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void StockOrderReqt::set_has_price() {
  _has_bits_[0] |= 0x00000800u;
}
inline void StockOrderReqt::clear_has_price() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void StockOrderReqt::clear_price() {
  price_ = GOOGLE_LONGLONG(0);
  clear_has_price();
}
inline ::google::protobuf::int64 StockOrderReqt::price() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrderReqt.price)
  return price_;
}
inline void StockOrderReqt::set_price(::google::protobuf::int64 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockOrderReqt.price)
}

// required uint32 qty = 4;
inline bool StockOrderReqt::has_qty() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void StockOrderReqt::set_has_qty() {
  _has_bits_[0] |= 0x00001000u;
}
inline void StockOrderReqt::clear_has_qty() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void StockOrderReqt::clear_qty() {
  qty_ = 0u;
  clear_has_qty();
}
inline ::google::protobuf::uint32 StockOrderReqt::qty() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrderReqt.qty)
  return qty_;
}
inline void StockOrderReqt::set_qty(::google::protobuf::uint32 value) {
  set_has_qty();
  qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockOrderReqt.qty)
}

// required uint32 bsflag = 5;
inline bool StockOrderReqt::has_bsflag() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void StockOrderReqt::set_has_bsflag() {
  _has_bits_[0] |= 0x00002000u;
}
inline void StockOrderReqt::clear_has_bsflag() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void StockOrderReqt::clear_bsflag() {
  bsflag_ = 0u;
  clear_has_bsflag();
}
inline ::google::protobuf::uint32 StockOrderReqt::bsflag() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrderReqt.bsflag)
  return bsflag_;
}
inline void StockOrderReqt::set_bsflag(::google::protobuf::uint32 value) {
  set_has_bsflag();
  bsflag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockOrderReqt.bsflag)
}

// required uint32 market = 6;
inline bool StockOrderReqt::has_market() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void StockOrderReqt::set_has_market() {
  _has_bits_[0] |= 0x00010000u;
}
inline void StockOrderReqt::clear_has_market() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void StockOrderReqt::clear_market() {
  market_ = 0u;
  clear_has_market();
}
inline ::google::protobuf::uint32 StockOrderReqt::market() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrderReqt.market)
  return market_;
}
inline void StockOrderReqt::set_market(::google::protobuf::uint32 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockOrderReqt.market)
}

// required string order_id = 7;
inline bool StockOrderReqt::has_order_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockOrderReqt::set_has_order_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockOrderReqt::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockOrderReqt::clear_order_id() {
  order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_id();
}
inline const ::std::string& StockOrderReqt::order_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrderReqt.order_id)
  return order_id_.GetNoArena();
}
inline void StockOrderReqt::set_order_id(const ::std::string& value) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockOrderReqt.order_id)
}
#if LANG_CXX11
inline void StockOrderReqt::set_order_id(::std::string&& value) {
  set_has_order_id();
  order_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockOrderReqt.order_id)
}
#endif
inline void StockOrderReqt::set_order_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockOrderReqt.order_id)
}
inline void StockOrderReqt::set_order_id(const char* value, size_t size) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockOrderReqt.order_id)
}
inline ::std::string* StockOrderReqt::mutable_order_id() {
  set_has_order_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrderReqt.order_id)
  return order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockOrderReqt::release_order_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockOrderReqt.order_id)
  if (!has_order_id()) {
    return NULL;
  }
  clear_has_order_id();
  return order_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockOrderReqt::set_allocated_order_id(::std::string* order_id) {
  if (order_id != NULL) {
    set_has_order_id();
  } else {
    clear_has_order_id();
  }
  order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockOrderReqt.order_id)
}

// optional string request_id = 8;
inline bool StockOrderReqt::has_request_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StockOrderReqt::set_has_request_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StockOrderReqt::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StockOrderReqt::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& StockOrderReqt::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrderReqt.request_id)
  return request_id_.GetNoArena();
}
inline void StockOrderReqt::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockOrderReqt.request_id)
}
#if LANG_CXX11
inline void StockOrderReqt::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockOrderReqt.request_id)
}
#endif
inline void StockOrderReqt::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockOrderReqt.request_id)
}
inline void StockOrderReqt::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockOrderReqt.request_id)
}
inline ::std::string* StockOrderReqt::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrderReqt.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockOrderReqt::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockOrderReqt.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockOrderReqt::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockOrderReqt.request_id)
}

// optional string order_type = 9;
inline bool StockOrderReqt::has_order_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StockOrderReqt::set_has_order_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StockOrderReqt::clear_has_order_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StockOrderReqt::clear_order_type() {
  order_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_type();
}
inline const ::std::string& StockOrderReqt::order_type() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrderReqt.order_type)
  return order_type_.GetNoArena();
}
inline void StockOrderReqt::set_order_type(const ::std::string& value) {
  set_has_order_type();
  order_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockOrderReqt.order_type)
}
#if LANG_CXX11
inline void StockOrderReqt::set_order_type(::std::string&& value) {
  set_has_order_type();
  order_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockOrderReqt.order_type)
}
#endif
inline void StockOrderReqt::set_order_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_type();
  order_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockOrderReqt.order_type)
}
inline void StockOrderReqt::set_order_type(const char* value, size_t size) {
  set_has_order_type();
  order_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockOrderReqt.order_type)
}
inline ::std::string* StockOrderReqt::mutable_order_type() {
  set_has_order_type();
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrderReqt.order_type)
  return order_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockOrderReqt::release_order_type() {
  // @@protoc_insertion_point(field_release:autotrade.StockOrderReqt.order_type)
  if (!has_order_type()) {
    return NULL;
  }
  clear_has_order_type();
  return order_type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockOrderReqt::set_allocated_order_type(::std::string* order_type) {
  if (order_type != NULL) {
    set_has_order_type();
  } else {
    clear_has_order_type();
  }
  order_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_type);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockOrderReqt.order_type)
}

// optional string parent_id = 10;
inline bool StockOrderReqt::has_parent_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StockOrderReqt::set_has_parent_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StockOrderReqt::clear_has_parent_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StockOrderReqt::clear_parent_id() {
  parent_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parent_id();
}
inline const ::std::string& StockOrderReqt::parent_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrderReqt.parent_id)
  return parent_id_.GetNoArena();
}
inline void StockOrderReqt::set_parent_id(const ::std::string& value) {
  set_has_parent_id();
  parent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockOrderReqt.parent_id)
}
#if LANG_CXX11
inline void StockOrderReqt::set_parent_id(::std::string&& value) {
  set_has_parent_id();
  parent_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockOrderReqt.parent_id)
}
#endif
inline void StockOrderReqt::set_parent_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_parent_id();
  parent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockOrderReqt.parent_id)
}
inline void StockOrderReqt::set_parent_id(const char* value, size_t size) {
  set_has_parent_id();
  parent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockOrderReqt.parent_id)
}
inline ::std::string* StockOrderReqt::mutable_parent_id() {
  set_has_parent_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrderReqt.parent_id)
  return parent_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockOrderReqt::release_parent_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockOrderReqt.parent_id)
  if (!has_parent_id()) {
    return NULL;
  }
  clear_has_parent_id();
  return parent_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockOrderReqt::set_allocated_parent_id(::std::string* parent_id) {
  if (parent_id != NULL) {
    set_has_parent_id();
  } else {
    clear_has_parent_id();
  }
  parent_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockOrderReqt.parent_id)
}

// optional string parent_type = 11;
inline bool StockOrderReqt::has_parent_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StockOrderReqt::set_has_parent_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StockOrderReqt::clear_has_parent_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StockOrderReqt::clear_parent_type() {
  parent_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parent_type();
}
inline const ::std::string& StockOrderReqt::parent_type() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrderReqt.parent_type)
  return parent_type_.GetNoArena();
}
inline void StockOrderReqt::set_parent_type(const ::std::string& value) {
  set_has_parent_type();
  parent_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockOrderReqt.parent_type)
}
#if LANG_CXX11
inline void StockOrderReqt::set_parent_type(::std::string&& value) {
  set_has_parent_type();
  parent_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockOrderReqt.parent_type)
}
#endif
inline void StockOrderReqt::set_parent_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_parent_type();
  parent_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockOrderReqt.parent_type)
}
inline void StockOrderReqt::set_parent_type(const char* value, size_t size) {
  set_has_parent_type();
  parent_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockOrderReqt.parent_type)
}
inline ::std::string* StockOrderReqt::mutable_parent_type() {
  set_has_parent_type();
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrderReqt.parent_type)
  return parent_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockOrderReqt::release_parent_type() {
  // @@protoc_insertion_point(field_release:autotrade.StockOrderReqt.parent_type)
  if (!has_parent_type()) {
    return NULL;
  }
  clear_has_parent_type();
  return parent_type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockOrderReqt::set_allocated_parent_type(::std::string* parent_type) {
  if (parent_type != NULL) {
    set_has_parent_type();
  } else {
    clear_has_parent_type();
  }
  parent_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent_type);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockOrderReqt.parent_type)
}

// optional string robot_id = 12;
inline bool StockOrderReqt::has_robot_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StockOrderReqt::set_has_robot_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StockOrderReqt::clear_has_robot_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StockOrderReqt::clear_robot_id() {
  robot_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_robot_id();
}
inline const ::std::string& StockOrderReqt::robot_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrderReqt.robot_id)
  return robot_id_.GetNoArena();
}
inline void StockOrderReqt::set_robot_id(const ::std::string& value) {
  set_has_robot_id();
  robot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockOrderReqt.robot_id)
}
#if LANG_CXX11
inline void StockOrderReqt::set_robot_id(::std::string&& value) {
  set_has_robot_id();
  robot_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockOrderReqt.robot_id)
}
#endif
inline void StockOrderReqt::set_robot_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_robot_id();
  robot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockOrderReqt.robot_id)
}
inline void StockOrderReqt::set_robot_id(const char* value, size_t size) {
  set_has_robot_id();
  robot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockOrderReqt.robot_id)
}
inline ::std::string* StockOrderReqt::mutable_robot_id() {
  set_has_robot_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrderReqt.robot_id)
  return robot_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockOrderReqt::release_robot_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockOrderReqt.robot_id)
  if (!has_robot_id()) {
    return NULL;
  }
  clear_has_robot_id();
  return robot_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockOrderReqt::set_allocated_robot_id(::std::string* robot_id) {
  if (robot_id != NULL) {
    set_has_robot_id();
  } else {
    clear_has_robot_id();
  }
  robot_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), robot_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockOrderReqt.robot_id)
}

// optional string trader_id = 13;
inline bool StockOrderReqt::has_trader_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StockOrderReqt::set_has_trader_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StockOrderReqt::clear_has_trader_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StockOrderReqt::clear_trader_id() {
  trader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trader_id();
}
inline const ::std::string& StockOrderReqt::trader_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrderReqt.trader_id)
  return trader_id_.GetNoArena();
}
inline void StockOrderReqt::set_trader_id(const ::std::string& value) {
  set_has_trader_id();
  trader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockOrderReqt.trader_id)
}
#if LANG_CXX11
inline void StockOrderReqt::set_trader_id(::std::string&& value) {
  set_has_trader_id();
  trader_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockOrderReqt.trader_id)
}
#endif
inline void StockOrderReqt::set_trader_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trader_id();
  trader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockOrderReqt.trader_id)
}
inline void StockOrderReqt::set_trader_id(const char* value, size_t size) {
  set_has_trader_id();
  trader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockOrderReqt.trader_id)
}
inline ::std::string* StockOrderReqt::mutable_trader_id() {
  set_has_trader_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrderReqt.trader_id)
  return trader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockOrderReqt::release_trader_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockOrderReqt.trader_id)
  if (!has_trader_id()) {
    return NULL;
  }
  clear_has_trader_id();
  return trader_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockOrderReqt::set_allocated_trader_id(::std::string* trader_id) {
  if (trader_id != NULL) {
    set_has_trader_id();
  } else {
    clear_has_trader_id();
  }
  trader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trader_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockOrderReqt.trader_id)
}

// optional int64 request_time = 14 [default = 0];
inline bool StockOrderReqt::has_request_time() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void StockOrderReqt::set_has_request_time() {
  _has_bits_[0] |= 0x00004000u;
}
inline void StockOrderReqt::clear_has_request_time() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void StockOrderReqt::clear_request_time() {
  request_time_ = GOOGLE_LONGLONG(0);
  clear_has_request_time();
}
inline ::google::protobuf::int64 StockOrderReqt::request_time() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrderReqt.request_time)
  return request_time_;
}
inline void StockOrderReqt::set_request_time(::google::protobuf::int64 value) {
  set_has_request_time();
  request_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockOrderReqt.request_time)
}

// optional int64 active_interval = 15 [default = 1000];
inline bool StockOrderReqt::has_active_interval() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void StockOrderReqt::set_has_active_interval() {
  _has_bits_[0] |= 0x00040000u;
}
inline void StockOrderReqt::clear_has_active_interval() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void StockOrderReqt::clear_active_interval() {
  active_interval_ = GOOGLE_LONGLONG(1000);
  clear_has_active_interval();
}
inline ::google::protobuf::int64 StockOrderReqt::active_interval() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrderReqt.active_interval)
  return active_interval_;
}
inline void StockOrderReqt::set_active_interval(::google::protobuf::int64 value) {
  set_has_active_interval();
  active_interval_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockOrderReqt.active_interval)
}

// optional int64 request_date = 16 [default = 0];
inline bool StockOrderReqt::has_request_date() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void StockOrderReqt::set_has_request_date() {
  _has_bits_[0] |= 0x00008000u;
}
inline void StockOrderReqt::clear_has_request_date() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void StockOrderReqt::clear_request_date() {
  request_date_ = GOOGLE_LONGLONG(0);
  clear_has_request_date();
}
inline ::google::protobuf::int64 StockOrderReqt::request_date() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrderReqt.request_date)
  return request_date_;
}
inline void StockOrderReqt::set_request_date(::google::protobuf::int64 value) {
  set_has_request_date();
  request_date_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockOrderReqt.request_date)
}

// optional string fund_id = 17;
inline bool StockOrderReqt::has_fund_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void StockOrderReqt::set_has_fund_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void StockOrderReqt::clear_has_fund_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void StockOrderReqt::clear_fund_id() {
  fund_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fund_id();
}
inline const ::std::string& StockOrderReqt::fund_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrderReqt.fund_id)
  return fund_id_.GetNoArena();
}
inline void StockOrderReqt::set_fund_id(const ::std::string& value) {
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockOrderReqt.fund_id)
}
#if LANG_CXX11
inline void StockOrderReqt::set_fund_id(::std::string&& value) {
  set_has_fund_id();
  fund_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockOrderReqt.fund_id)
}
#endif
inline void StockOrderReqt::set_fund_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockOrderReqt.fund_id)
}
inline void StockOrderReqt::set_fund_id(const char* value, size_t size) {
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockOrderReqt.fund_id)
}
inline ::std::string* StockOrderReqt::mutable_fund_id() {
  set_has_fund_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrderReqt.fund_id)
  return fund_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockOrderReqt::release_fund_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockOrderReqt.fund_id)
  if (!has_fund_id()) {
    return NULL;
  }
  clear_has_fund_id();
  return fund_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockOrderReqt::set_allocated_fund_id(::std::string* fund_id) {
  if (fund_id != NULL) {
    set_has_fund_id();
  } else {
    clear_has_fund_id();
  }
  fund_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fund_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockOrderReqt.fund_id)
}

// optional string session_id = 18;
inline bool StockOrderReqt::has_session_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void StockOrderReqt::set_has_session_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void StockOrderReqt::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void StockOrderReqt::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_session_id();
}
inline const ::std::string& StockOrderReqt::session_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrderReqt.session_id)
  return session_id_.GetNoArena();
}
inline void StockOrderReqt::set_session_id(const ::std::string& value) {
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockOrderReqt.session_id)
}
#if LANG_CXX11
inline void StockOrderReqt::set_session_id(::std::string&& value) {
  set_has_session_id();
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockOrderReqt.session_id)
}
#endif
inline void StockOrderReqt::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockOrderReqt.session_id)
}
inline void StockOrderReqt::set_session_id(const char* value, size_t size) {
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockOrderReqt.session_id)
}
inline ::std::string* StockOrderReqt::mutable_session_id() {
  set_has_session_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrderReqt.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockOrderReqt::release_session_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockOrderReqt.session_id)
  if (!has_session_id()) {
    return NULL;
  }
  clear_has_session_id();
  return session_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockOrderReqt::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    set_has_session_id();
  } else {
    clear_has_session_id();
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockOrderReqt.session_id)
}

// optional string name = 19;
inline bool StockOrderReqt::has_name() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void StockOrderReqt::set_has_name() {
  _has_bits_[0] |= 0x00000400u;
}
inline void StockOrderReqt::clear_has_name() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void StockOrderReqt::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& StockOrderReqt::name() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrderReqt.name)
  return name_.GetNoArena();
}
inline void StockOrderReqt::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockOrderReqt.name)
}
#if LANG_CXX11
inline void StockOrderReqt::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockOrderReqt.name)
}
#endif
inline void StockOrderReqt::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockOrderReqt.name)
}
inline void StockOrderReqt::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockOrderReqt.name)
}
inline ::std::string* StockOrderReqt::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrderReqt.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockOrderReqt::release_name() {
  // @@protoc_insertion_point(field_release:autotrade.StockOrderReqt.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockOrderReqt::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockOrderReqt.name)
}

// -------------------------------------------------------------------

// StockOrderResp

// optional int32 funcid = 1 [default = 11101001];
inline bool StockOrderResp::has_funcid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StockOrderResp::set_has_funcid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StockOrderResp::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StockOrderResp::clear_funcid() {
  funcid_ = 11101001;
  clear_has_funcid();
}
inline ::google::protobuf::int32 StockOrderResp::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrderResp.funcid)
  return funcid_;
}
inline void StockOrderResp::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockOrderResp.funcid)
}

// required string order_group = 2;
inline bool StockOrderResp::has_order_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockOrderResp::set_has_order_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockOrderResp::clear_has_order_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockOrderResp::clear_order_group() {
  order_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_group();
}
inline const ::std::string& StockOrderResp::order_group() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrderResp.order_group)
  return order_group_.GetNoArena();
}
inline void StockOrderResp::set_order_group(const ::std::string& value) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockOrderResp.order_group)
}
#if LANG_CXX11
inline void StockOrderResp::set_order_group(::std::string&& value) {
  set_has_order_group();
  order_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockOrderResp.order_group)
}
#endif
inline void StockOrderResp::set_order_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockOrderResp.order_group)
}
inline void StockOrderResp::set_order_group(const char* value, size_t size) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockOrderResp.order_group)
}
inline ::std::string* StockOrderResp::mutable_order_group() {
  set_has_order_group();
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrderResp.order_group)
  return order_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockOrderResp::release_order_group() {
  // @@protoc_insertion_point(field_release:autotrade.StockOrderResp.order_group)
  if (!has_order_group()) {
    return NULL;
  }
  clear_has_order_group();
  return order_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockOrderResp::set_allocated_order_group(::std::string* order_group) {
  if (order_group != NULL) {
    set_has_order_group();
  } else {
    clear_has_order_group();
  }
  order_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_group);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockOrderResp.order_group)
}

// optional string request_id = 3;
inline bool StockOrderResp::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockOrderResp::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockOrderResp::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockOrderResp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& StockOrderResp::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrderResp.request_id)
  return request_id_.GetNoArena();
}
inline void StockOrderResp::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockOrderResp.request_id)
}
#if LANG_CXX11
inline void StockOrderResp::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockOrderResp.request_id)
}
#endif
inline void StockOrderResp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockOrderResp.request_id)
}
inline void StockOrderResp::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockOrderResp.request_id)
}
inline ::std::string* StockOrderResp::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrderResp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockOrderResp::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockOrderResp.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockOrderResp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockOrderResp.request_id)
}

// required string order_id = 4;
inline bool StockOrderResp::has_order_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StockOrderResp::set_has_order_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StockOrderResp::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StockOrderResp::clear_order_id() {
  order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_id();
}
inline const ::std::string& StockOrderResp::order_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrderResp.order_id)
  return order_id_.GetNoArena();
}
inline void StockOrderResp::set_order_id(const ::std::string& value) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockOrderResp.order_id)
}
#if LANG_CXX11
inline void StockOrderResp::set_order_id(::std::string&& value) {
  set_has_order_id();
  order_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockOrderResp.order_id)
}
#endif
inline void StockOrderResp::set_order_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockOrderResp.order_id)
}
inline void StockOrderResp::set_order_id(const char* value, size_t size) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockOrderResp.order_id)
}
inline ::std::string* StockOrderResp::mutable_order_id() {
  set_has_order_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrderResp.order_id)
  return order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockOrderResp::release_order_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockOrderResp.order_id)
  if (!has_order_id()) {
    return NULL;
  }
  clear_has_order_id();
  return order_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockOrderResp::set_allocated_order_id(::std::string* order_id) {
  if (order_id != NULL) {
    set_has_order_id();
  } else {
    clear_has_order_id();
  }
  order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockOrderResp.order_id)
}

// -------------------------------------------------------------------

// StockOrdersReqt_SingleOrder

// required string code = 1;
inline bool StockOrdersReqt_SingleOrder::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockOrdersReqt_SingleOrder::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockOrdersReqt_SingleOrder::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockOrdersReqt_SingleOrder::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& StockOrdersReqt_SingleOrder::code() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersReqt.SingleOrder.code)
  return code_.GetNoArena();
}
inline void StockOrdersReqt_SingleOrder::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersReqt.SingleOrder.code)
}
#if LANG_CXX11
inline void StockOrdersReqt_SingleOrder::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockOrdersReqt.SingleOrder.code)
}
#endif
inline void StockOrdersReqt_SingleOrder::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockOrdersReqt.SingleOrder.code)
}
inline void StockOrdersReqt_SingleOrder::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockOrdersReqt.SingleOrder.code)
}
inline ::std::string* StockOrdersReqt_SingleOrder::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrdersReqt.SingleOrder.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockOrdersReqt_SingleOrder::release_code() {
  // @@protoc_insertion_point(field_release:autotrade.StockOrdersReqt.SingleOrder.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockOrdersReqt_SingleOrder::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockOrdersReqt.SingleOrder.code)
}

// required int64 price = 2;
inline bool StockOrdersReqt_SingleOrder::has_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StockOrdersReqt_SingleOrder::set_has_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StockOrdersReqt_SingleOrder::clear_has_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StockOrdersReqt_SingleOrder::clear_price() {
  price_ = GOOGLE_LONGLONG(0);
  clear_has_price();
}
inline ::google::protobuf::int64 StockOrdersReqt_SingleOrder::price() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersReqt.SingleOrder.price)
  return price_;
}
inline void StockOrdersReqt_SingleOrder::set_price(::google::protobuf::int64 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersReqt.SingleOrder.price)
}

// required uint32 qty = 3;
inline bool StockOrdersReqt_SingleOrder::has_qty() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StockOrdersReqt_SingleOrder::set_has_qty() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StockOrdersReqt_SingleOrder::clear_has_qty() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StockOrdersReqt_SingleOrder::clear_qty() {
  qty_ = 0u;
  clear_has_qty();
}
inline ::google::protobuf::uint32 StockOrdersReqt_SingleOrder::qty() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersReqt.SingleOrder.qty)
  return qty_;
}
inline void StockOrdersReqt_SingleOrder::set_qty(::google::protobuf::uint32 value) {
  set_has_qty();
  qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersReqt.SingleOrder.qty)
}

// optional string name = 4;
inline bool StockOrdersReqt_SingleOrder::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockOrdersReqt_SingleOrder::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockOrdersReqt_SingleOrder::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockOrdersReqt_SingleOrder::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& StockOrdersReqt_SingleOrder::name() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersReqt.SingleOrder.name)
  return name_.GetNoArena();
}
inline void StockOrdersReqt_SingleOrder::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersReqt.SingleOrder.name)
}
#if LANG_CXX11
inline void StockOrdersReqt_SingleOrder::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockOrdersReqt.SingleOrder.name)
}
#endif
inline void StockOrdersReqt_SingleOrder::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockOrdersReqt.SingleOrder.name)
}
inline void StockOrdersReqt_SingleOrder::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockOrdersReqt.SingleOrder.name)
}
inline ::std::string* StockOrdersReqt_SingleOrder::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrdersReqt.SingleOrder.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockOrdersReqt_SingleOrder::release_name() {
  // @@protoc_insertion_point(field_release:autotrade.StockOrdersReqt.SingleOrder.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockOrdersReqt_SingleOrder::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockOrdersReqt.SingleOrder.name)
}

// -------------------------------------------------------------------

// StockOrdersReqt

// optional int32 funcid = 1 [default = 11001002];
inline bool StockOrdersReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void StockOrdersReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void StockOrdersReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void StockOrdersReqt::clear_funcid() {
  funcid_ = 11001002;
  clear_has_funcid();
}
inline ::google::protobuf::int32 StockOrdersReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersReqt.funcid)
  return funcid_;
}
inline void StockOrdersReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersReqt.funcid)
}

// repeated .autotrade.StockOrdersReqt.SingleOrder order_list = 2;
inline int StockOrdersReqt::order_list_size() const {
  return order_list_.size();
}
inline void StockOrdersReqt::clear_order_list() {
  order_list_.Clear();
}
inline ::autotrade::StockOrdersReqt_SingleOrder* StockOrdersReqt::mutable_order_list(int index) {
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrdersReqt.order_list)
  return order_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::autotrade::StockOrdersReqt_SingleOrder >*
StockOrdersReqt::mutable_order_list() {
  // @@protoc_insertion_point(field_mutable_list:autotrade.StockOrdersReqt.order_list)
  return &order_list_;
}
inline const ::autotrade::StockOrdersReqt_SingleOrder& StockOrdersReqt::order_list(int index) const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersReqt.order_list)
  return order_list_.Get(index);
}
inline ::autotrade::StockOrdersReqt_SingleOrder* StockOrdersReqt::add_order_list() {
  // @@protoc_insertion_point(field_add:autotrade.StockOrdersReqt.order_list)
  return order_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::autotrade::StockOrdersReqt_SingleOrder >&
StockOrdersReqt::order_list() const {
  // @@protoc_insertion_point(field_list:autotrade.StockOrdersReqt.order_list)
  return order_list_;
}

// required uint32 bsflag = 3;
inline bool StockOrdersReqt::has_bsflag() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void StockOrdersReqt::set_has_bsflag() {
  _has_bits_[0] |= 0x00000200u;
}
inline void StockOrdersReqt::clear_has_bsflag() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void StockOrdersReqt::clear_bsflag() {
  bsflag_ = 0u;
  clear_has_bsflag();
}
inline ::google::protobuf::uint32 StockOrdersReqt::bsflag() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersReqt.bsflag)
  return bsflag_;
}
inline void StockOrdersReqt::set_bsflag(::google::protobuf::uint32 value) {
  set_has_bsflag();
  bsflag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersReqt.bsflag)
}

// required uint32 market = 4;
inline bool StockOrdersReqt::has_market() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void StockOrdersReqt::set_has_market() {
  _has_bits_[0] |= 0x00000400u;
}
inline void StockOrdersReqt::clear_has_market() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void StockOrdersReqt::clear_market() {
  market_ = 0u;
  clear_has_market();
}
inline ::google::protobuf::uint32 StockOrdersReqt::market() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersReqt.market)
  return market_;
}
inline void StockOrdersReqt::set_market(::google::protobuf::uint32 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersReqt.market)
}

// required string order_id = 5;
inline bool StockOrdersReqt::has_order_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockOrdersReqt::set_has_order_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockOrdersReqt::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockOrdersReqt::clear_order_id() {
  order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_id();
}
inline const ::std::string& StockOrdersReqt::order_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersReqt.order_id)
  return order_id_.GetNoArena();
}
inline void StockOrdersReqt::set_order_id(const ::std::string& value) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersReqt.order_id)
}
#if LANG_CXX11
inline void StockOrdersReqt::set_order_id(::std::string&& value) {
  set_has_order_id();
  order_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockOrdersReqt.order_id)
}
#endif
inline void StockOrdersReqt::set_order_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockOrdersReqt.order_id)
}
inline void StockOrdersReqt::set_order_id(const char* value, size_t size) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockOrdersReqt.order_id)
}
inline ::std::string* StockOrdersReqt::mutable_order_id() {
  set_has_order_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrdersReqt.order_id)
  return order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockOrdersReqt::release_order_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockOrdersReqt.order_id)
  if (!has_order_id()) {
    return NULL;
  }
  clear_has_order_id();
  return order_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockOrdersReqt::set_allocated_order_id(::std::string* order_id) {
  if (order_id != NULL) {
    set_has_order_id();
  } else {
    clear_has_order_id();
  }
  order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockOrdersReqt.order_id)
}

// optional string order_type = 6;
inline bool StockOrdersReqt::has_order_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockOrdersReqt::set_has_order_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockOrdersReqt::clear_has_order_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockOrdersReqt::clear_order_type() {
  order_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_type();
}
inline const ::std::string& StockOrdersReqt::order_type() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersReqt.order_type)
  return order_type_.GetNoArena();
}
inline void StockOrdersReqt::set_order_type(const ::std::string& value) {
  set_has_order_type();
  order_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersReqt.order_type)
}
#if LANG_CXX11
inline void StockOrdersReqt::set_order_type(::std::string&& value) {
  set_has_order_type();
  order_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockOrdersReqt.order_type)
}
#endif
inline void StockOrdersReqt::set_order_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_type();
  order_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockOrdersReqt.order_type)
}
inline void StockOrdersReqt::set_order_type(const char* value, size_t size) {
  set_has_order_type();
  order_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockOrdersReqt.order_type)
}
inline ::std::string* StockOrdersReqt::mutable_order_type() {
  set_has_order_type();
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrdersReqt.order_type)
  return order_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockOrdersReqt::release_order_type() {
  // @@protoc_insertion_point(field_release:autotrade.StockOrdersReqt.order_type)
  if (!has_order_type()) {
    return NULL;
  }
  clear_has_order_type();
  return order_type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockOrdersReqt::set_allocated_order_type(::std::string* order_type) {
  if (order_type != NULL) {
    set_has_order_type();
  } else {
    clear_has_order_type();
  }
  order_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_type);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockOrdersReqt.order_type)
}

// optional string parent_id = 7;
inline bool StockOrdersReqt::has_parent_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StockOrdersReqt::set_has_parent_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StockOrdersReqt::clear_has_parent_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StockOrdersReqt::clear_parent_id() {
  parent_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parent_id();
}
inline const ::std::string& StockOrdersReqt::parent_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersReqt.parent_id)
  return parent_id_.GetNoArena();
}
inline void StockOrdersReqt::set_parent_id(const ::std::string& value) {
  set_has_parent_id();
  parent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersReqt.parent_id)
}
#if LANG_CXX11
inline void StockOrdersReqt::set_parent_id(::std::string&& value) {
  set_has_parent_id();
  parent_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockOrdersReqt.parent_id)
}
#endif
inline void StockOrdersReqt::set_parent_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_parent_id();
  parent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockOrdersReqt.parent_id)
}
inline void StockOrdersReqt::set_parent_id(const char* value, size_t size) {
  set_has_parent_id();
  parent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockOrdersReqt.parent_id)
}
inline ::std::string* StockOrdersReqt::mutable_parent_id() {
  set_has_parent_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrdersReqt.parent_id)
  return parent_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockOrdersReqt::release_parent_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockOrdersReqt.parent_id)
  if (!has_parent_id()) {
    return NULL;
  }
  clear_has_parent_id();
  return parent_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockOrdersReqt::set_allocated_parent_id(::std::string* parent_id) {
  if (parent_id != NULL) {
    set_has_parent_id();
  } else {
    clear_has_parent_id();
  }
  parent_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockOrdersReqt.parent_id)
}

// optional string parent_type = 8;
inline bool StockOrdersReqt::has_parent_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StockOrdersReqt::set_has_parent_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StockOrdersReqt::clear_has_parent_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StockOrdersReqt::clear_parent_type() {
  parent_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parent_type();
}
inline const ::std::string& StockOrdersReqt::parent_type() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersReqt.parent_type)
  return parent_type_.GetNoArena();
}
inline void StockOrdersReqt::set_parent_type(const ::std::string& value) {
  set_has_parent_type();
  parent_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersReqt.parent_type)
}
#if LANG_CXX11
inline void StockOrdersReqt::set_parent_type(::std::string&& value) {
  set_has_parent_type();
  parent_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockOrdersReqt.parent_type)
}
#endif
inline void StockOrdersReqt::set_parent_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_parent_type();
  parent_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockOrdersReqt.parent_type)
}
inline void StockOrdersReqt::set_parent_type(const char* value, size_t size) {
  set_has_parent_type();
  parent_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockOrdersReqt.parent_type)
}
inline ::std::string* StockOrdersReqt::mutable_parent_type() {
  set_has_parent_type();
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrdersReqt.parent_type)
  return parent_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockOrdersReqt::release_parent_type() {
  // @@protoc_insertion_point(field_release:autotrade.StockOrdersReqt.parent_type)
  if (!has_parent_type()) {
    return NULL;
  }
  clear_has_parent_type();
  return parent_type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockOrdersReqt::set_allocated_parent_type(::std::string* parent_type) {
  if (parent_type != NULL) {
    set_has_parent_type();
  } else {
    clear_has_parent_type();
  }
  parent_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent_type);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockOrdersReqt.parent_type)
}

// optional string request_id = 9;
inline bool StockOrdersReqt::has_request_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StockOrdersReqt::set_has_request_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StockOrdersReqt::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StockOrdersReqt::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& StockOrdersReqt::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersReqt.request_id)
  return request_id_.GetNoArena();
}
inline void StockOrdersReqt::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersReqt.request_id)
}
#if LANG_CXX11
inline void StockOrdersReqt::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockOrdersReqt.request_id)
}
#endif
inline void StockOrdersReqt::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockOrdersReqt.request_id)
}
inline void StockOrdersReqt::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockOrdersReqt.request_id)
}
inline ::std::string* StockOrdersReqt::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrdersReqt.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockOrdersReqt::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockOrdersReqt.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockOrdersReqt::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockOrdersReqt.request_id)
}

// optional string robot_id = 10;
inline bool StockOrdersReqt::has_robot_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StockOrdersReqt::set_has_robot_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StockOrdersReqt::clear_has_robot_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StockOrdersReqt::clear_robot_id() {
  robot_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_robot_id();
}
inline const ::std::string& StockOrdersReqt::robot_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersReqt.robot_id)
  return robot_id_.GetNoArena();
}
inline void StockOrdersReqt::set_robot_id(const ::std::string& value) {
  set_has_robot_id();
  robot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersReqt.robot_id)
}
#if LANG_CXX11
inline void StockOrdersReqt::set_robot_id(::std::string&& value) {
  set_has_robot_id();
  robot_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockOrdersReqt.robot_id)
}
#endif
inline void StockOrdersReqt::set_robot_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_robot_id();
  robot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockOrdersReqt.robot_id)
}
inline void StockOrdersReqt::set_robot_id(const char* value, size_t size) {
  set_has_robot_id();
  robot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockOrdersReqt.robot_id)
}
inline ::std::string* StockOrdersReqt::mutable_robot_id() {
  set_has_robot_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrdersReqt.robot_id)
  return robot_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockOrdersReqt::release_robot_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockOrdersReqt.robot_id)
  if (!has_robot_id()) {
    return NULL;
  }
  clear_has_robot_id();
  return robot_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockOrdersReqt::set_allocated_robot_id(::std::string* robot_id) {
  if (robot_id != NULL) {
    set_has_robot_id();
  } else {
    clear_has_robot_id();
  }
  robot_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), robot_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockOrdersReqt.robot_id)
}

// optional string trader_id = 11;
inline bool StockOrdersReqt::has_trader_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StockOrdersReqt::set_has_trader_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StockOrdersReqt::clear_has_trader_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StockOrdersReqt::clear_trader_id() {
  trader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trader_id();
}
inline const ::std::string& StockOrdersReqt::trader_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersReqt.trader_id)
  return trader_id_.GetNoArena();
}
inline void StockOrdersReqt::set_trader_id(const ::std::string& value) {
  set_has_trader_id();
  trader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersReqt.trader_id)
}
#if LANG_CXX11
inline void StockOrdersReqt::set_trader_id(::std::string&& value) {
  set_has_trader_id();
  trader_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockOrdersReqt.trader_id)
}
#endif
inline void StockOrdersReqt::set_trader_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trader_id();
  trader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockOrdersReqt.trader_id)
}
inline void StockOrdersReqt::set_trader_id(const char* value, size_t size) {
  set_has_trader_id();
  trader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockOrdersReqt.trader_id)
}
inline ::std::string* StockOrdersReqt::mutable_trader_id() {
  set_has_trader_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrdersReqt.trader_id)
  return trader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockOrdersReqt::release_trader_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockOrdersReqt.trader_id)
  if (!has_trader_id()) {
    return NULL;
  }
  clear_has_trader_id();
  return trader_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockOrdersReqt::set_allocated_trader_id(::std::string* trader_id) {
  if (trader_id != NULL) {
    set_has_trader_id();
  } else {
    clear_has_trader_id();
  }
  trader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trader_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockOrdersReqt.trader_id)
}

// optional int64 request_time = 12 [default = 0];
inline bool StockOrdersReqt::has_request_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void StockOrdersReqt::set_has_request_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void StockOrdersReqt::clear_has_request_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void StockOrdersReqt::clear_request_time() {
  request_time_ = GOOGLE_LONGLONG(0);
  clear_has_request_time();
}
inline ::google::protobuf::int64 StockOrdersReqt::request_time() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersReqt.request_time)
  return request_time_;
}
inline void StockOrdersReqt::set_request_time(::google::protobuf::int64 value) {
  set_has_request_time();
  request_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersReqt.request_time)
}

// optional int64 active_interval = 13 [default = 1000];
inline bool StockOrdersReqt::has_active_interval() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void StockOrdersReqt::set_has_active_interval() {
  _has_bits_[0] |= 0x00004000u;
}
inline void StockOrdersReqt::clear_has_active_interval() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void StockOrdersReqt::clear_active_interval() {
  active_interval_ = GOOGLE_LONGLONG(1000);
  clear_has_active_interval();
}
inline ::google::protobuf::int64 StockOrdersReqt::active_interval() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersReqt.active_interval)
  return active_interval_;
}
inline void StockOrdersReqt::set_active_interval(::google::protobuf::int64 value) {
  set_has_active_interval();
  active_interval_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersReqt.active_interval)
}

// optional int64 request_date = 14 [default = 0];
inline bool StockOrdersReqt::has_request_date() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void StockOrdersReqt::set_has_request_date() {
  _has_bits_[0] |= 0x00001000u;
}
inline void StockOrdersReqt::clear_has_request_date() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void StockOrdersReqt::clear_request_date() {
  request_date_ = GOOGLE_LONGLONG(0);
  clear_has_request_date();
}
inline ::google::protobuf::int64 StockOrdersReqt::request_date() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersReqt.request_date)
  return request_date_;
}
inline void StockOrdersReqt::set_request_date(::google::protobuf::int64 value) {
  set_has_request_date();
  request_date_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersReqt.request_date)
}

// optional string fund_id = 15;
inline bool StockOrdersReqt::has_fund_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StockOrdersReqt::set_has_fund_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StockOrdersReqt::clear_has_fund_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StockOrdersReqt::clear_fund_id() {
  fund_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fund_id();
}
inline const ::std::string& StockOrdersReqt::fund_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersReqt.fund_id)
  return fund_id_.GetNoArena();
}
inline void StockOrdersReqt::set_fund_id(const ::std::string& value) {
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersReqt.fund_id)
}
#if LANG_CXX11
inline void StockOrdersReqt::set_fund_id(::std::string&& value) {
  set_has_fund_id();
  fund_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockOrdersReqt.fund_id)
}
#endif
inline void StockOrdersReqt::set_fund_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockOrdersReqt.fund_id)
}
inline void StockOrdersReqt::set_fund_id(const char* value, size_t size) {
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockOrdersReqt.fund_id)
}
inline ::std::string* StockOrdersReqt::mutable_fund_id() {
  set_has_fund_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrdersReqt.fund_id)
  return fund_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockOrdersReqt::release_fund_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockOrdersReqt.fund_id)
  if (!has_fund_id()) {
    return NULL;
  }
  clear_has_fund_id();
  return fund_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockOrdersReqt::set_allocated_fund_id(::std::string* fund_id) {
  if (fund_id != NULL) {
    set_has_fund_id();
  } else {
    clear_has_fund_id();
  }
  fund_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fund_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockOrdersReqt.fund_id)
}

// optional string session_id = 16;
inline bool StockOrdersReqt::has_session_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void StockOrdersReqt::set_has_session_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void StockOrdersReqt::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void StockOrdersReqt::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_session_id();
}
inline const ::std::string& StockOrdersReqt::session_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersReqt.session_id)
  return session_id_.GetNoArena();
}
inline void StockOrdersReqt::set_session_id(const ::std::string& value) {
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersReqt.session_id)
}
#if LANG_CXX11
inline void StockOrdersReqt::set_session_id(::std::string&& value) {
  set_has_session_id();
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockOrdersReqt.session_id)
}
#endif
inline void StockOrdersReqt::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockOrdersReqt.session_id)
}
inline void StockOrdersReqt::set_session_id(const char* value, size_t size) {
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockOrdersReqt.session_id)
}
inline ::std::string* StockOrdersReqt::mutable_session_id() {
  set_has_session_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrdersReqt.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockOrdersReqt::release_session_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockOrdersReqt.session_id)
  if (!has_session_id()) {
    return NULL;
  }
  clear_has_session_id();
  return session_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockOrdersReqt::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    set_has_session_id();
  } else {
    clear_has_session_id();
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockOrdersReqt.session_id)
}

// -------------------------------------------------------------------

// StockOrdersResp_OrderResult

// required int32 ret_code = 1;
inline bool StockOrdersResp_OrderResult::has_ret_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StockOrdersResp_OrderResult::set_has_ret_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StockOrdersResp_OrderResult::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StockOrdersResp_OrderResult::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 StockOrdersResp_OrderResult::ret_code() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersResp.OrderResult.ret_code)
  return ret_code_;
}
inline void StockOrdersResp_OrderResult::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersResp.OrderResult.ret_code)
}

// optional string ret_msg = 2;
inline bool StockOrdersResp_OrderResult::has_ret_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockOrdersResp_OrderResult::set_has_ret_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockOrdersResp_OrderResult::clear_has_ret_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockOrdersResp_OrderResult::clear_ret_msg() {
  ret_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ret_msg();
}
inline const ::std::string& StockOrdersResp_OrderResult::ret_msg() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersResp.OrderResult.ret_msg)
  return ret_msg_.GetNoArena();
}
inline void StockOrdersResp_OrderResult::set_ret_msg(const ::std::string& value) {
  set_has_ret_msg();
  ret_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersResp.OrderResult.ret_msg)
}
#if LANG_CXX11
inline void StockOrdersResp_OrderResult::set_ret_msg(::std::string&& value) {
  set_has_ret_msg();
  ret_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockOrdersResp.OrderResult.ret_msg)
}
#endif
inline void StockOrdersResp_OrderResult::set_ret_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ret_msg();
  ret_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockOrdersResp.OrderResult.ret_msg)
}
inline void StockOrdersResp_OrderResult::set_ret_msg(const char* value, size_t size) {
  set_has_ret_msg();
  ret_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockOrdersResp.OrderResult.ret_msg)
}
inline ::std::string* StockOrdersResp_OrderResult::mutable_ret_msg() {
  set_has_ret_msg();
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrdersResp.OrderResult.ret_msg)
  return ret_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockOrdersResp_OrderResult::release_ret_msg() {
  // @@protoc_insertion_point(field_release:autotrade.StockOrdersResp.OrderResult.ret_msg)
  if (!has_ret_msg()) {
    return NULL;
  }
  clear_has_ret_msg();
  return ret_msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockOrdersResp_OrderResult::set_allocated_ret_msg(::std::string* ret_msg) {
  if (ret_msg != NULL) {
    set_has_ret_msg();
  } else {
    clear_has_ret_msg();
  }
  ret_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ret_msg);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockOrdersResp.OrderResult.ret_msg)
}

// optional string orderno = 3;
inline bool StockOrdersResp_OrderResult::has_orderno() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockOrdersResp_OrderResult::set_has_orderno() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockOrdersResp_OrderResult::clear_has_orderno() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockOrdersResp_OrderResult::clear_orderno() {
  orderno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_orderno();
}
inline const ::std::string& StockOrdersResp_OrderResult::orderno() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersResp.OrderResult.orderno)
  return orderno_.GetNoArena();
}
inline void StockOrdersResp_OrderResult::set_orderno(const ::std::string& value) {
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersResp.OrderResult.orderno)
}
#if LANG_CXX11
inline void StockOrdersResp_OrderResult::set_orderno(::std::string&& value) {
  set_has_orderno();
  orderno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockOrdersResp.OrderResult.orderno)
}
#endif
inline void StockOrdersResp_OrderResult::set_orderno(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockOrdersResp.OrderResult.orderno)
}
inline void StockOrdersResp_OrderResult::set_orderno(const char* value, size_t size) {
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockOrdersResp.OrderResult.orderno)
}
inline ::std::string* StockOrdersResp_OrderResult::mutable_orderno() {
  set_has_orderno();
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrdersResp.OrderResult.orderno)
  return orderno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockOrdersResp_OrderResult::release_orderno() {
  // @@protoc_insertion_point(field_release:autotrade.StockOrdersResp.OrderResult.orderno)
  if (!has_orderno()) {
    return NULL;
  }
  clear_has_orderno();
  return orderno_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockOrdersResp_OrderResult::set_allocated_orderno(::std::string* orderno) {
  if (orderno != NULL) {
    set_has_orderno();
  } else {
    clear_has_orderno();
  }
  orderno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderno);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockOrdersResp.OrderResult.orderno)
}

// -------------------------------------------------------------------

// StockOrdersResp

// optional int32 funcid = 1 [default = 11101002];
inline bool StockOrdersResp::has_funcid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StockOrdersResp::set_has_funcid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StockOrdersResp::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StockOrdersResp::clear_funcid() {
  funcid_ = 11101002;
  clear_has_funcid();
}
inline ::google::protobuf::int32 StockOrdersResp::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersResp.funcid)
  return funcid_;
}
inline void StockOrdersResp::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersResp.funcid)
}

// required string order_group = 2;
inline bool StockOrdersResp::has_order_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockOrdersResp::set_has_order_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockOrdersResp::clear_has_order_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockOrdersResp::clear_order_group() {
  order_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_group();
}
inline const ::std::string& StockOrdersResp::order_group() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersResp.order_group)
  return order_group_.GetNoArena();
}
inline void StockOrdersResp::set_order_group(const ::std::string& value) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersResp.order_group)
}
#if LANG_CXX11
inline void StockOrdersResp::set_order_group(::std::string&& value) {
  set_has_order_group();
  order_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockOrdersResp.order_group)
}
#endif
inline void StockOrdersResp::set_order_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockOrdersResp.order_group)
}
inline void StockOrdersResp::set_order_group(const char* value, size_t size) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockOrdersResp.order_group)
}
inline ::std::string* StockOrdersResp::mutable_order_group() {
  set_has_order_group();
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrdersResp.order_group)
  return order_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockOrdersResp::release_order_group() {
  // @@protoc_insertion_point(field_release:autotrade.StockOrdersResp.order_group)
  if (!has_order_group()) {
    return NULL;
  }
  clear_has_order_group();
  return order_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockOrdersResp::set_allocated_order_group(::std::string* order_group) {
  if (order_group != NULL) {
    set_has_order_group();
  } else {
    clear_has_order_group();
  }
  order_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_group);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockOrdersResp.order_group)
}

// repeated .autotrade.StockOrdersResp.OrderResult results = 3;
inline int StockOrdersResp::results_size() const {
  return results_.size();
}
inline void StockOrdersResp::clear_results() {
  results_.Clear();
}
inline ::autotrade::StockOrdersResp_OrderResult* StockOrdersResp::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrdersResp.results)
  return results_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::autotrade::StockOrdersResp_OrderResult >*
StockOrdersResp::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:autotrade.StockOrdersResp.results)
  return &results_;
}
inline const ::autotrade::StockOrdersResp_OrderResult& StockOrdersResp::results(int index) const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersResp.results)
  return results_.Get(index);
}
inline ::autotrade::StockOrdersResp_OrderResult* StockOrdersResp::add_results() {
  // @@protoc_insertion_point(field_add:autotrade.StockOrdersResp.results)
  return results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::autotrade::StockOrdersResp_OrderResult >&
StockOrdersResp::results() const {
  // @@protoc_insertion_point(field_list:autotrade.StockOrdersResp.results)
  return results_;
}

// optional string request_id = 4;
inline bool StockOrdersResp::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockOrdersResp::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockOrdersResp::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockOrdersResp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& StockOrdersResp::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersResp.request_id)
  return request_id_.GetNoArena();
}
inline void StockOrdersResp::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersResp.request_id)
}
#if LANG_CXX11
inline void StockOrdersResp::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockOrdersResp.request_id)
}
#endif
inline void StockOrdersResp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockOrdersResp.request_id)
}
inline void StockOrdersResp::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockOrdersResp.request_id)
}
inline ::std::string* StockOrdersResp::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrdersResp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockOrdersResp::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockOrdersResp.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockOrdersResp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockOrdersResp.request_id)
}

// required string order_id = 5;
inline bool StockOrdersResp::has_order_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StockOrdersResp::set_has_order_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StockOrdersResp::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StockOrdersResp::clear_order_id() {
  order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_id();
}
inline const ::std::string& StockOrdersResp::order_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersResp.order_id)
  return order_id_.GetNoArena();
}
inline void StockOrdersResp::set_order_id(const ::std::string& value) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersResp.order_id)
}
#if LANG_CXX11
inline void StockOrdersResp::set_order_id(::std::string&& value) {
  set_has_order_id();
  order_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockOrdersResp.order_id)
}
#endif
inline void StockOrdersResp::set_order_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockOrdersResp.order_id)
}
inline void StockOrdersResp::set_order_id(const char* value, size_t size) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockOrdersResp.order_id)
}
inline ::std::string* StockOrdersResp::mutable_order_id() {
  set_has_order_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrdersResp.order_id)
  return order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockOrdersResp::release_order_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockOrdersResp.order_id)
  if (!has_order_id()) {
    return NULL;
  }
  clear_has_order_id();
  return order_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockOrdersResp::set_allocated_order_id(::std::string* order_id) {
  if (order_id != NULL) {
    set_has_order_id();
  } else {
    clear_has_order_id();
  }
  order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockOrdersResp.order_id)
}

// -------------------------------------------------------------------

// StockOrdersRecieved

// optional int32 funcid = 1 [default = 11101010];
inline bool StockOrdersRecieved::has_funcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockOrdersRecieved::set_has_funcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockOrdersRecieved::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockOrdersRecieved::clear_funcid() {
  funcid_ = 11101010;
  clear_has_funcid();
}
inline ::google::protobuf::int32 StockOrdersRecieved::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersRecieved.funcid)
  return funcid_;
}
inline void StockOrdersRecieved::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersRecieved.funcid)
}

// optional string request_id = 2;
inline bool StockOrdersRecieved::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockOrdersRecieved::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockOrdersRecieved::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockOrdersRecieved::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& StockOrdersRecieved::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersRecieved.request_id)
  return request_id_.GetNoArena();
}
inline void StockOrdersRecieved::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersRecieved.request_id)
}
#if LANG_CXX11
inline void StockOrdersRecieved::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockOrdersRecieved.request_id)
}
#endif
inline void StockOrdersRecieved::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockOrdersRecieved.request_id)
}
inline void StockOrdersRecieved::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockOrdersRecieved.request_id)
}
inline ::std::string* StockOrdersRecieved::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrdersRecieved.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockOrdersRecieved::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockOrdersRecieved.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockOrdersRecieved::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockOrdersRecieved.request_id)
}

// -------------------------------------------------------------------

// StockOrdersCreateResp_OrderList

// required string code = 1;
inline bool StockOrdersCreateResp_OrderList::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockOrdersCreateResp_OrderList::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockOrdersCreateResp_OrderList::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockOrdersCreateResp_OrderList::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& StockOrdersCreateResp_OrderList::code() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersCreateResp.OrderList.code)
  return code_.GetNoArena();
}
inline void StockOrdersCreateResp_OrderList::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersCreateResp.OrderList.code)
}
#if LANG_CXX11
inline void StockOrdersCreateResp_OrderList::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockOrdersCreateResp.OrderList.code)
}
#endif
inline void StockOrdersCreateResp_OrderList::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockOrdersCreateResp.OrderList.code)
}
inline void StockOrdersCreateResp_OrderList::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockOrdersCreateResp.OrderList.code)
}
inline ::std::string* StockOrdersCreateResp_OrderList::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrdersCreateResp.OrderList.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockOrdersCreateResp_OrderList::release_code() {
  // @@protoc_insertion_point(field_release:autotrade.StockOrdersCreateResp.OrderList.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockOrdersCreateResp_OrderList::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockOrdersCreateResp.OrderList.code)
}

// required int64 price = 2;
inline bool StockOrdersCreateResp_OrderList::has_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StockOrdersCreateResp_OrderList::set_has_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StockOrdersCreateResp_OrderList::clear_has_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StockOrdersCreateResp_OrderList::clear_price() {
  price_ = GOOGLE_LONGLONG(0);
  clear_has_price();
}
inline ::google::protobuf::int64 StockOrdersCreateResp_OrderList::price() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersCreateResp.OrderList.price)
  return price_;
}
inline void StockOrdersCreateResp_OrderList::set_price(::google::protobuf::int64 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersCreateResp.OrderList.price)
}

// required uint32 qty = 3;
inline bool StockOrdersCreateResp_OrderList::has_qty() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StockOrdersCreateResp_OrderList::set_has_qty() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StockOrdersCreateResp_OrderList::clear_has_qty() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StockOrdersCreateResp_OrderList::clear_qty() {
  qty_ = 0u;
  clear_has_qty();
}
inline ::google::protobuf::uint32 StockOrdersCreateResp_OrderList::qty() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersCreateResp.OrderList.qty)
  return qty_;
}
inline void StockOrdersCreateResp_OrderList::set_qty(::google::protobuf::uint32 value) {
  set_has_qty();
  qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersCreateResp.OrderList.qty)
}

// optional string orderno = 4;
inline bool StockOrdersCreateResp_OrderList::has_orderno() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockOrdersCreateResp_OrderList::set_has_orderno() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockOrdersCreateResp_OrderList::clear_has_orderno() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockOrdersCreateResp_OrderList::clear_orderno() {
  orderno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_orderno();
}
inline const ::std::string& StockOrdersCreateResp_OrderList::orderno() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersCreateResp.OrderList.orderno)
  return orderno_.GetNoArena();
}
inline void StockOrdersCreateResp_OrderList::set_orderno(const ::std::string& value) {
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersCreateResp.OrderList.orderno)
}
#if LANG_CXX11
inline void StockOrdersCreateResp_OrderList::set_orderno(::std::string&& value) {
  set_has_orderno();
  orderno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockOrdersCreateResp.OrderList.orderno)
}
#endif
inline void StockOrdersCreateResp_OrderList::set_orderno(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockOrdersCreateResp.OrderList.orderno)
}
inline void StockOrdersCreateResp_OrderList::set_orderno(const char* value, size_t size) {
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockOrdersCreateResp.OrderList.orderno)
}
inline ::std::string* StockOrdersCreateResp_OrderList::mutable_orderno() {
  set_has_orderno();
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrdersCreateResp.OrderList.orderno)
  return orderno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockOrdersCreateResp_OrderList::release_orderno() {
  // @@protoc_insertion_point(field_release:autotrade.StockOrdersCreateResp.OrderList.orderno)
  if (!has_orderno()) {
    return NULL;
  }
  clear_has_orderno();
  return orderno_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockOrdersCreateResp_OrderList::set_allocated_orderno(::std::string* orderno) {
  if (orderno != NULL) {
    set_has_orderno();
  } else {
    clear_has_orderno();
  }
  orderno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderno);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockOrdersCreateResp.OrderList.orderno)
}

// optional int32 ret_code = 5;
inline bool StockOrdersCreateResp_OrderList::has_ret_code() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StockOrdersCreateResp_OrderList::set_has_ret_code() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StockOrdersCreateResp_OrderList::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StockOrdersCreateResp_OrderList::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 StockOrdersCreateResp_OrderList::ret_code() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersCreateResp.OrderList.ret_code)
  return ret_code_;
}
inline void StockOrdersCreateResp_OrderList::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersCreateResp.OrderList.ret_code)
}

// optional string ret_message = 6;
inline bool StockOrdersCreateResp_OrderList::has_ret_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StockOrdersCreateResp_OrderList::set_has_ret_message() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StockOrdersCreateResp_OrderList::clear_has_ret_message() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StockOrdersCreateResp_OrderList::clear_ret_message() {
  ret_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ret_message();
}
inline const ::std::string& StockOrdersCreateResp_OrderList::ret_message() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersCreateResp.OrderList.ret_message)
  return ret_message_.GetNoArena();
}
inline void StockOrdersCreateResp_OrderList::set_ret_message(const ::std::string& value) {
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersCreateResp.OrderList.ret_message)
}
#if LANG_CXX11
inline void StockOrdersCreateResp_OrderList::set_ret_message(::std::string&& value) {
  set_has_ret_message();
  ret_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockOrdersCreateResp.OrderList.ret_message)
}
#endif
inline void StockOrdersCreateResp_OrderList::set_ret_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockOrdersCreateResp.OrderList.ret_message)
}
inline void StockOrdersCreateResp_OrderList::set_ret_message(const char* value, size_t size) {
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockOrdersCreateResp.OrderList.ret_message)
}
inline ::std::string* StockOrdersCreateResp_OrderList::mutable_ret_message() {
  set_has_ret_message();
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrdersCreateResp.OrderList.ret_message)
  return ret_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockOrdersCreateResp_OrderList::release_ret_message() {
  // @@protoc_insertion_point(field_release:autotrade.StockOrdersCreateResp.OrderList.ret_message)
  if (!has_ret_message()) {
    return NULL;
  }
  clear_has_ret_message();
  return ret_message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockOrdersCreateResp_OrderList::set_allocated_ret_message(::std::string* ret_message) {
  if (ret_message != NULL) {
    set_has_ret_message();
  } else {
    clear_has_ret_message();
  }
  ret_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ret_message);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockOrdersCreateResp.OrderList.ret_message)
}

// optional string name = 7;
inline bool StockOrdersCreateResp_OrderList::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StockOrdersCreateResp_OrderList::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StockOrdersCreateResp_OrderList::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StockOrdersCreateResp_OrderList::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& StockOrdersCreateResp_OrderList::name() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersCreateResp.OrderList.name)
  return name_.GetNoArena();
}
inline void StockOrdersCreateResp_OrderList::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersCreateResp.OrderList.name)
}
#if LANG_CXX11
inline void StockOrdersCreateResp_OrderList::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockOrdersCreateResp.OrderList.name)
}
#endif
inline void StockOrdersCreateResp_OrderList::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockOrdersCreateResp.OrderList.name)
}
inline void StockOrdersCreateResp_OrderList::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockOrdersCreateResp.OrderList.name)
}
inline ::std::string* StockOrdersCreateResp_OrderList::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrdersCreateResp.OrderList.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockOrdersCreateResp_OrderList::release_name() {
  // @@protoc_insertion_point(field_release:autotrade.StockOrdersCreateResp.OrderList.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockOrdersCreateResp_OrderList::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockOrdersCreateResp.OrderList.name)
}

// -------------------------------------------------------------------

// StockOrdersCreateResp

// optional int32 funcid = 1 [default = 11101014];
inline bool StockOrdersCreateResp::has_funcid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void StockOrdersCreateResp::set_has_funcid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void StockOrdersCreateResp::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void StockOrdersCreateResp::clear_funcid() {
  funcid_ = 11101014;
  clear_has_funcid();
}
inline ::google::protobuf::int32 StockOrdersCreateResp::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersCreateResp.funcid)
  return funcid_;
}
inline void StockOrdersCreateResp::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersCreateResp.funcid)
}

// optional string request_id = 2;
inline bool StockOrdersCreateResp::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockOrdersCreateResp::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockOrdersCreateResp::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockOrdersCreateResp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& StockOrdersCreateResp::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersCreateResp.request_id)
  return request_id_.GetNoArena();
}
inline void StockOrdersCreateResp::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersCreateResp.request_id)
}
#if LANG_CXX11
inline void StockOrdersCreateResp::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockOrdersCreateResp.request_id)
}
#endif
inline void StockOrdersCreateResp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockOrdersCreateResp.request_id)
}
inline void StockOrdersCreateResp::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockOrdersCreateResp.request_id)
}
inline ::std::string* StockOrdersCreateResp::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrdersCreateResp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockOrdersCreateResp::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockOrdersCreateResp.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockOrdersCreateResp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockOrdersCreateResp.request_id)
}

// required string order_id = 3;
inline bool StockOrdersCreateResp::has_order_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockOrdersCreateResp::set_has_order_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockOrdersCreateResp::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockOrdersCreateResp::clear_order_id() {
  order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_id();
}
inline const ::std::string& StockOrdersCreateResp::order_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersCreateResp.order_id)
  return order_id_.GetNoArena();
}
inline void StockOrdersCreateResp::set_order_id(const ::std::string& value) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersCreateResp.order_id)
}
#if LANG_CXX11
inline void StockOrdersCreateResp::set_order_id(::std::string&& value) {
  set_has_order_id();
  order_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockOrdersCreateResp.order_id)
}
#endif
inline void StockOrdersCreateResp::set_order_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockOrdersCreateResp.order_id)
}
inline void StockOrdersCreateResp::set_order_id(const char* value, size_t size) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockOrdersCreateResp.order_id)
}
inline ::std::string* StockOrdersCreateResp::mutable_order_id() {
  set_has_order_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrdersCreateResp.order_id)
  return order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockOrdersCreateResp::release_order_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockOrdersCreateResp.order_id)
  if (!has_order_id()) {
    return NULL;
  }
  clear_has_order_id();
  return order_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockOrdersCreateResp::set_allocated_order_id(::std::string* order_id) {
  if (order_id != NULL) {
    set_has_order_id();
  } else {
    clear_has_order_id();
  }
  order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockOrdersCreateResp.order_id)
}

// required string order_group = 4;
inline bool StockOrdersCreateResp::has_order_group() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StockOrdersCreateResp::set_has_order_group() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StockOrdersCreateResp::clear_has_order_group() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StockOrdersCreateResp::clear_order_group() {
  order_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_group();
}
inline const ::std::string& StockOrdersCreateResp::order_group() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersCreateResp.order_group)
  return order_group_.GetNoArena();
}
inline void StockOrdersCreateResp::set_order_group(const ::std::string& value) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersCreateResp.order_group)
}
#if LANG_CXX11
inline void StockOrdersCreateResp::set_order_group(::std::string&& value) {
  set_has_order_group();
  order_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockOrdersCreateResp.order_group)
}
#endif
inline void StockOrdersCreateResp::set_order_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockOrdersCreateResp.order_group)
}
inline void StockOrdersCreateResp::set_order_group(const char* value, size_t size) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockOrdersCreateResp.order_group)
}
inline ::std::string* StockOrdersCreateResp::mutable_order_group() {
  set_has_order_group();
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrdersCreateResp.order_group)
  return order_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockOrdersCreateResp::release_order_group() {
  // @@protoc_insertion_point(field_release:autotrade.StockOrdersCreateResp.order_group)
  if (!has_order_group()) {
    return NULL;
  }
  clear_has_order_group();
  return order_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockOrdersCreateResp::set_allocated_order_group(::std::string* order_group) {
  if (order_group != NULL) {
    set_has_order_group();
  } else {
    clear_has_order_group();
  }
  order_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_group);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockOrdersCreateResp.order_group)
}

// optional string trader_id = 5;
inline bool StockOrdersCreateResp::has_trader_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StockOrdersCreateResp::set_has_trader_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StockOrdersCreateResp::clear_has_trader_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StockOrdersCreateResp::clear_trader_id() {
  trader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trader_id();
}
inline const ::std::string& StockOrdersCreateResp::trader_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersCreateResp.trader_id)
  return trader_id_.GetNoArena();
}
inline void StockOrdersCreateResp::set_trader_id(const ::std::string& value) {
  set_has_trader_id();
  trader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersCreateResp.trader_id)
}
#if LANG_CXX11
inline void StockOrdersCreateResp::set_trader_id(::std::string&& value) {
  set_has_trader_id();
  trader_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockOrdersCreateResp.trader_id)
}
#endif
inline void StockOrdersCreateResp::set_trader_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trader_id();
  trader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockOrdersCreateResp.trader_id)
}
inline void StockOrdersCreateResp::set_trader_id(const char* value, size_t size) {
  set_has_trader_id();
  trader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockOrdersCreateResp.trader_id)
}
inline ::std::string* StockOrdersCreateResp::mutable_trader_id() {
  set_has_trader_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrdersCreateResp.trader_id)
  return trader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockOrdersCreateResp::release_trader_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockOrdersCreateResp.trader_id)
  if (!has_trader_id()) {
    return NULL;
  }
  clear_has_trader_id();
  return trader_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockOrdersCreateResp::set_allocated_trader_id(::std::string* trader_id) {
  if (trader_id != NULL) {
    set_has_trader_id();
  } else {
    clear_has_trader_id();
  }
  trader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trader_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockOrdersCreateResp.trader_id)
}

// optional string robot_id = 6;
inline bool StockOrdersCreateResp::has_robot_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StockOrdersCreateResp::set_has_robot_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StockOrdersCreateResp::clear_has_robot_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StockOrdersCreateResp::clear_robot_id() {
  robot_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_robot_id();
}
inline const ::std::string& StockOrdersCreateResp::robot_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersCreateResp.robot_id)
  return robot_id_.GetNoArena();
}
inline void StockOrdersCreateResp::set_robot_id(const ::std::string& value) {
  set_has_robot_id();
  robot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersCreateResp.robot_id)
}
#if LANG_CXX11
inline void StockOrdersCreateResp::set_robot_id(::std::string&& value) {
  set_has_robot_id();
  robot_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockOrdersCreateResp.robot_id)
}
#endif
inline void StockOrdersCreateResp::set_robot_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_robot_id();
  robot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockOrdersCreateResp.robot_id)
}
inline void StockOrdersCreateResp::set_robot_id(const char* value, size_t size) {
  set_has_robot_id();
  robot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockOrdersCreateResp.robot_id)
}
inline ::std::string* StockOrdersCreateResp::mutable_robot_id() {
  set_has_robot_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrdersCreateResp.robot_id)
  return robot_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockOrdersCreateResp::release_robot_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockOrdersCreateResp.robot_id)
  if (!has_robot_id()) {
    return NULL;
  }
  clear_has_robot_id();
  return robot_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockOrdersCreateResp::set_allocated_robot_id(::std::string* robot_id) {
  if (robot_id != NULL) {
    set_has_robot_id();
  } else {
    clear_has_robot_id();
  }
  robot_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), robot_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockOrdersCreateResp.robot_id)
}

// optional uint32 data_date = 7;
inline bool StockOrdersCreateResp::has_data_date() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StockOrdersCreateResp::set_has_data_date() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StockOrdersCreateResp::clear_has_data_date() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StockOrdersCreateResp::clear_data_date() {
  data_date_ = 0u;
  clear_has_data_date();
}
inline ::google::protobuf::uint32 StockOrdersCreateResp::data_date() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersCreateResp.data_date)
  return data_date_;
}
inline void StockOrdersCreateResp::set_data_date(::google::protobuf::uint32 value) {
  set_has_data_date();
  data_date_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersCreateResp.data_date)
}

// required uint32 data_time = 8;
inline bool StockOrdersCreateResp::has_data_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void StockOrdersCreateResp::set_has_data_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void StockOrdersCreateResp::clear_has_data_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void StockOrdersCreateResp::clear_data_time() {
  data_time_ = 0u;
  clear_has_data_time();
}
inline ::google::protobuf::uint32 StockOrdersCreateResp::data_time() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersCreateResp.data_time)
  return data_time_;
}
inline void StockOrdersCreateResp::set_data_time(::google::protobuf::uint32 value) {
  set_has_data_time();
  data_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersCreateResp.data_time)
}

// required string fund_id = 9;
inline bool StockOrdersCreateResp::has_fund_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StockOrdersCreateResp::set_has_fund_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StockOrdersCreateResp::clear_has_fund_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StockOrdersCreateResp::clear_fund_id() {
  fund_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fund_id();
}
inline const ::std::string& StockOrdersCreateResp::fund_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersCreateResp.fund_id)
  return fund_id_.GetNoArena();
}
inline void StockOrdersCreateResp::set_fund_id(const ::std::string& value) {
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersCreateResp.fund_id)
}
#if LANG_CXX11
inline void StockOrdersCreateResp::set_fund_id(::std::string&& value) {
  set_has_fund_id();
  fund_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockOrdersCreateResp.fund_id)
}
#endif
inline void StockOrdersCreateResp::set_fund_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockOrdersCreateResp.fund_id)
}
inline void StockOrdersCreateResp::set_fund_id(const char* value, size_t size) {
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockOrdersCreateResp.fund_id)
}
inline ::std::string* StockOrdersCreateResp::mutable_fund_id() {
  set_has_fund_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrdersCreateResp.fund_id)
  return fund_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockOrdersCreateResp::release_fund_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockOrdersCreateResp.fund_id)
  if (!has_fund_id()) {
    return NULL;
  }
  clear_has_fund_id();
  return fund_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockOrdersCreateResp::set_allocated_fund_id(::std::string* fund_id) {
  if (fund_id != NULL) {
    set_has_fund_id();
  } else {
    clear_has_fund_id();
  }
  fund_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fund_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockOrdersCreateResp.fund_id)
}

// optional int64 market = 10;
inline bool StockOrdersCreateResp::has_market() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void StockOrdersCreateResp::set_has_market() {
  _has_bits_[0] |= 0x00000200u;
}
inline void StockOrdersCreateResp::clear_has_market() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void StockOrdersCreateResp::clear_market() {
  market_ = GOOGLE_LONGLONG(0);
  clear_has_market();
}
inline ::google::protobuf::int64 StockOrdersCreateResp::market() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersCreateResp.market)
  return market_;
}
inline void StockOrdersCreateResp::set_market(::google::protobuf::int64 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersCreateResp.market)
}

// optional int64 bsflag = 11;
inline bool StockOrdersCreateResp::has_bsflag() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void StockOrdersCreateResp::set_has_bsflag() {
  _has_bits_[0] |= 0x00000400u;
}
inline void StockOrdersCreateResp::clear_has_bsflag() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void StockOrdersCreateResp::clear_bsflag() {
  bsflag_ = GOOGLE_LONGLONG(0);
  clear_has_bsflag();
}
inline ::google::protobuf::int64 StockOrdersCreateResp::bsflag() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersCreateResp.bsflag)
  return bsflag_;
}
inline void StockOrdersCreateResp::set_bsflag(::google::protobuf::int64 value) {
  set_has_bsflag();
  bsflag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersCreateResp.bsflag)
}

// repeated .autotrade.StockOrdersCreateResp.OrderList order_list = 12;
inline int StockOrdersCreateResp::order_list_size() const {
  return order_list_.size();
}
inline void StockOrdersCreateResp::clear_order_list() {
  order_list_.Clear();
}
inline ::autotrade::StockOrdersCreateResp_OrderList* StockOrdersCreateResp::mutable_order_list(int index) {
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrdersCreateResp.order_list)
  return order_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::autotrade::StockOrdersCreateResp_OrderList >*
StockOrdersCreateResp::mutable_order_list() {
  // @@protoc_insertion_point(field_mutable_list:autotrade.StockOrdersCreateResp.order_list)
  return &order_list_;
}
inline const ::autotrade::StockOrdersCreateResp_OrderList& StockOrdersCreateResp::order_list(int index) const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersCreateResp.order_list)
  return order_list_.Get(index);
}
inline ::autotrade::StockOrdersCreateResp_OrderList* StockOrdersCreateResp::add_order_list() {
  // @@protoc_insertion_point(field_add:autotrade.StockOrdersCreateResp.order_list)
  return order_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::autotrade::StockOrdersCreateResp_OrderList >&
StockOrdersCreateResp::order_list() const {
  // @@protoc_insertion_point(field_list:autotrade.StockOrdersCreateResp.order_list)
  return order_list_;
}

// optional string account_name = 13 [default = ""];
inline bool StockOrdersCreateResp::has_account_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StockOrdersCreateResp::set_has_account_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StockOrdersCreateResp::clear_has_account_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StockOrdersCreateResp::clear_account_name() {
  account_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account_name();
}
inline const ::std::string& StockOrdersCreateResp::account_name() const {
  // @@protoc_insertion_point(field_get:autotrade.StockOrdersCreateResp.account_name)
  return account_name_.GetNoArena();
}
inline void StockOrdersCreateResp::set_account_name(const ::std::string& value) {
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockOrdersCreateResp.account_name)
}
#if LANG_CXX11
inline void StockOrdersCreateResp::set_account_name(::std::string&& value) {
  set_has_account_name();
  account_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockOrdersCreateResp.account_name)
}
#endif
inline void StockOrdersCreateResp::set_account_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockOrdersCreateResp.account_name)
}
inline void StockOrdersCreateResp::set_account_name(const char* value, size_t size) {
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockOrdersCreateResp.account_name)
}
inline ::std::string* StockOrdersCreateResp::mutable_account_name() {
  set_has_account_name();
  // @@protoc_insertion_point(field_mutable:autotrade.StockOrdersCreateResp.account_name)
  return account_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockOrdersCreateResp::release_account_name() {
  // @@protoc_insertion_point(field_release:autotrade.StockOrdersCreateResp.account_name)
  if (!has_account_name()) {
    return NULL;
  }
  clear_has_account_name();
  return account_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockOrdersCreateResp::set_allocated_account_name(::std::string* account_name) {
  if (account_name != NULL) {
    set_has_account_name();
  } else {
    clear_has_account_name();
  }
  account_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_name);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockOrdersCreateResp.account_name)
}

// -------------------------------------------------------------------

// StockDeleteReqt

// optional int32 funcid = 1 [default = 11001004];
inline bool StockDeleteReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StockDeleteReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StockDeleteReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StockDeleteReqt::clear_funcid() {
  funcid_ = 11001004;
  clear_has_funcid();
}
inline ::google::protobuf::int32 StockDeleteReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.StockDeleteReqt.funcid)
  return funcid_;
}
inline void StockDeleteReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockDeleteReqt.funcid)
}

// required string order_group = 2;
inline bool StockDeleteReqt::has_order_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockDeleteReqt::set_has_order_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockDeleteReqt::clear_has_order_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockDeleteReqt::clear_order_group() {
  order_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_group();
}
inline const ::std::string& StockDeleteReqt::order_group() const {
  // @@protoc_insertion_point(field_get:autotrade.StockDeleteReqt.order_group)
  return order_group_.GetNoArena();
}
inline void StockDeleteReqt::set_order_group(const ::std::string& value) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockDeleteReqt.order_group)
}
#if LANG_CXX11
inline void StockDeleteReqt::set_order_group(::std::string&& value) {
  set_has_order_group();
  order_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockDeleteReqt.order_group)
}
#endif
inline void StockDeleteReqt::set_order_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockDeleteReqt.order_group)
}
inline void StockDeleteReqt::set_order_group(const char* value, size_t size) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockDeleteReqt.order_group)
}
inline ::std::string* StockDeleteReqt::mutable_order_group() {
  set_has_order_group();
  // @@protoc_insertion_point(field_mutable:autotrade.StockDeleteReqt.order_group)
  return order_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockDeleteReqt::release_order_group() {
  // @@protoc_insertion_point(field_release:autotrade.StockDeleteReqt.order_group)
  if (!has_order_group()) {
    return NULL;
  }
  clear_has_order_group();
  return order_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockDeleteReqt::set_allocated_order_group(::std::string* order_group) {
  if (order_group != NULL) {
    set_has_order_group();
  } else {
    clear_has_order_group();
  }
  order_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_group);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockDeleteReqt.order_group)
}

// required uint32 market = 3;
inline bool StockDeleteReqt::has_market() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StockDeleteReqt::set_has_market() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StockDeleteReqt::clear_has_market() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StockDeleteReqt::clear_market() {
  market_ = 0u;
  clear_has_market();
}
inline ::google::protobuf::uint32 StockDeleteReqt::market() const {
  // @@protoc_insertion_point(field_get:autotrade.StockDeleteReqt.market)
  return market_;
}
inline void StockDeleteReqt::set_market(::google::protobuf::uint32 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockDeleteReqt.market)
}

// optional string request_id = 4;
inline bool StockDeleteReqt::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockDeleteReqt::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockDeleteReqt::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockDeleteReqt::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& StockDeleteReqt::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockDeleteReqt.request_id)
  return request_id_.GetNoArena();
}
inline void StockDeleteReqt::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockDeleteReqt.request_id)
}
#if LANG_CXX11
inline void StockDeleteReqt::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockDeleteReqt.request_id)
}
#endif
inline void StockDeleteReqt::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockDeleteReqt.request_id)
}
inline void StockDeleteReqt::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockDeleteReqt.request_id)
}
inline ::std::string* StockDeleteReqt::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockDeleteReqt.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockDeleteReqt::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockDeleteReqt.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockDeleteReqt::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockDeleteReqt.request_id)
}

// optional int32 asset_prop = 5;
inline bool StockDeleteReqt::has_asset_prop() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StockDeleteReqt::set_has_asset_prop() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StockDeleteReqt::clear_has_asset_prop() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StockDeleteReqt::clear_asset_prop() {
  asset_prop_ = 0;
  clear_has_asset_prop();
}
inline ::google::protobuf::int32 StockDeleteReqt::asset_prop() const {
  // @@protoc_insertion_point(field_get:autotrade.StockDeleteReqt.asset_prop)
  return asset_prop_;
}
inline void StockDeleteReqt::set_asset_prop(::google::protobuf::int32 value) {
  set_has_asset_prop();
  asset_prop_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockDeleteReqt.asset_prop)
}

// optional string fund_id = 6;
inline bool StockDeleteReqt::has_fund_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StockDeleteReqt::set_has_fund_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StockDeleteReqt::clear_has_fund_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StockDeleteReqt::clear_fund_id() {
  fund_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fund_id();
}
inline const ::std::string& StockDeleteReqt::fund_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockDeleteReqt.fund_id)
  return fund_id_.GetNoArena();
}
inline void StockDeleteReqt::set_fund_id(const ::std::string& value) {
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockDeleteReqt.fund_id)
}
#if LANG_CXX11
inline void StockDeleteReqt::set_fund_id(::std::string&& value) {
  set_has_fund_id();
  fund_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockDeleteReqt.fund_id)
}
#endif
inline void StockDeleteReqt::set_fund_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockDeleteReqt.fund_id)
}
inline void StockDeleteReqt::set_fund_id(const char* value, size_t size) {
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockDeleteReqt.fund_id)
}
inline ::std::string* StockDeleteReqt::mutable_fund_id() {
  set_has_fund_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockDeleteReqt.fund_id)
  return fund_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockDeleteReqt::release_fund_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockDeleteReqt.fund_id)
  if (!has_fund_id()) {
    return NULL;
  }
  clear_has_fund_id();
  return fund_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockDeleteReqt::set_allocated_fund_id(::std::string* fund_id) {
  if (fund_id != NULL) {
    set_has_fund_id();
  } else {
    clear_has_fund_id();
  }
  fund_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fund_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockDeleteReqt.fund_id)
}

// optional string session_id = 7;
inline bool StockDeleteReqt::has_session_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StockDeleteReqt::set_has_session_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StockDeleteReqt::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StockDeleteReqt::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_session_id();
}
inline const ::std::string& StockDeleteReqt::session_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockDeleteReqt.session_id)
  return session_id_.GetNoArena();
}
inline void StockDeleteReqt::set_session_id(const ::std::string& value) {
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockDeleteReqt.session_id)
}
#if LANG_CXX11
inline void StockDeleteReqt::set_session_id(::std::string&& value) {
  set_has_session_id();
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockDeleteReqt.session_id)
}
#endif
inline void StockDeleteReqt::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockDeleteReqt.session_id)
}
inline void StockDeleteReqt::set_session_id(const char* value, size_t size) {
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockDeleteReqt.session_id)
}
inline ::std::string* StockDeleteReqt::mutable_session_id() {
  set_has_session_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockDeleteReqt.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockDeleteReqt::release_session_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockDeleteReqt.session_id)
  if (!has_session_id()) {
    return NULL;
  }
  clear_has_session_id();
  return session_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockDeleteReqt::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    set_has_session_id();
  } else {
    clear_has_session_id();
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockDeleteReqt.session_id)
}

// optional string trader_id = 8;
inline bool StockDeleteReqt::has_trader_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StockDeleteReqt::set_has_trader_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StockDeleteReqt::clear_has_trader_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StockDeleteReqt::clear_trader_id() {
  trader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trader_id();
}
inline const ::std::string& StockDeleteReqt::trader_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockDeleteReqt.trader_id)
  return trader_id_.GetNoArena();
}
inline void StockDeleteReqt::set_trader_id(const ::std::string& value) {
  set_has_trader_id();
  trader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockDeleteReqt.trader_id)
}
#if LANG_CXX11
inline void StockDeleteReqt::set_trader_id(::std::string&& value) {
  set_has_trader_id();
  trader_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockDeleteReqt.trader_id)
}
#endif
inline void StockDeleteReqt::set_trader_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trader_id();
  trader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockDeleteReqt.trader_id)
}
inline void StockDeleteReqt::set_trader_id(const char* value, size_t size) {
  set_has_trader_id();
  trader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockDeleteReqt.trader_id)
}
inline ::std::string* StockDeleteReqt::mutable_trader_id() {
  set_has_trader_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockDeleteReqt.trader_id)
  return trader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockDeleteReqt::release_trader_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockDeleteReqt.trader_id)
  if (!has_trader_id()) {
    return NULL;
  }
  clear_has_trader_id();
  return trader_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockDeleteReqt::set_allocated_trader_id(::std::string* trader_id) {
  if (trader_id != NULL) {
    set_has_trader_id();
  } else {
    clear_has_trader_id();
  }
  trader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trader_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockDeleteReqt.trader_id)
}

// -------------------------------------------------------------------

// StockDeleteResp

// optional int32 funcid = 1 [default = 11101004];
inline bool StockDeleteResp::has_funcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StockDeleteResp::set_has_funcid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StockDeleteResp::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StockDeleteResp::clear_funcid() {
  funcid_ = 11101004;
  clear_has_funcid();
}
inline ::google::protobuf::int32 StockDeleteResp::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.StockDeleteResp.funcid)
  return funcid_;
}
inline void StockDeleteResp::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockDeleteResp.funcid)
}

// optional string order_group = 2;
inline bool StockDeleteResp::has_order_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockDeleteResp::set_has_order_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockDeleteResp::clear_has_order_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockDeleteResp::clear_order_group() {
  order_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_group();
}
inline const ::std::string& StockDeleteResp::order_group() const {
  // @@protoc_insertion_point(field_get:autotrade.StockDeleteResp.order_group)
  return order_group_.GetNoArena();
}
inline void StockDeleteResp::set_order_group(const ::std::string& value) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockDeleteResp.order_group)
}
#if LANG_CXX11
inline void StockDeleteResp::set_order_group(::std::string&& value) {
  set_has_order_group();
  order_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockDeleteResp.order_group)
}
#endif
inline void StockDeleteResp::set_order_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockDeleteResp.order_group)
}
inline void StockDeleteResp::set_order_group(const char* value, size_t size) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockDeleteResp.order_group)
}
inline ::std::string* StockDeleteResp::mutable_order_group() {
  set_has_order_group();
  // @@protoc_insertion_point(field_mutable:autotrade.StockDeleteResp.order_group)
  return order_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockDeleteResp::release_order_group() {
  // @@protoc_insertion_point(field_release:autotrade.StockDeleteResp.order_group)
  if (!has_order_group()) {
    return NULL;
  }
  clear_has_order_group();
  return order_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockDeleteResp::set_allocated_order_group(::std::string* order_group) {
  if (order_group != NULL) {
    set_has_order_group();
  } else {
    clear_has_order_group();
  }
  order_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_group);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockDeleteResp.order_group)
}

// optional string request_id = 3;
inline bool StockDeleteResp::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockDeleteResp::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockDeleteResp::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockDeleteResp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& StockDeleteResp::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockDeleteResp.request_id)
  return request_id_.GetNoArena();
}
inline void StockDeleteResp::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockDeleteResp.request_id)
}
#if LANG_CXX11
inline void StockDeleteResp::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockDeleteResp.request_id)
}
#endif
inline void StockDeleteResp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockDeleteResp.request_id)
}
inline void StockDeleteResp::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockDeleteResp.request_id)
}
inline ::std::string* StockDeleteResp::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockDeleteResp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockDeleteResp::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockDeleteResp.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockDeleteResp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockDeleteResp.request_id)
}

// -------------------------------------------------------------------

// StockDeletesReqt

// optional int32 funcid = 1 [default = 11001005];
inline bool StockDeletesReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StockDeletesReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StockDeletesReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StockDeletesReqt::clear_funcid() {
  funcid_ = 11001005;
  clear_has_funcid();
}
inline ::google::protobuf::int32 StockDeletesReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.StockDeletesReqt.funcid)
  return funcid_;
}
inline void StockDeletesReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockDeletesReqt.funcid)
}

// required string order_group = 2;
inline bool StockDeletesReqt::has_order_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockDeletesReqt::set_has_order_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockDeletesReqt::clear_has_order_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockDeletesReqt::clear_order_group() {
  order_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_group();
}
inline const ::std::string& StockDeletesReqt::order_group() const {
  // @@protoc_insertion_point(field_get:autotrade.StockDeletesReqt.order_group)
  return order_group_.GetNoArena();
}
inline void StockDeletesReqt::set_order_group(const ::std::string& value) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockDeletesReqt.order_group)
}
#if LANG_CXX11
inline void StockDeletesReqt::set_order_group(::std::string&& value) {
  set_has_order_group();
  order_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockDeletesReqt.order_group)
}
#endif
inline void StockDeletesReqt::set_order_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockDeletesReqt.order_group)
}
inline void StockDeletesReqt::set_order_group(const char* value, size_t size) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockDeletesReqt.order_group)
}
inline ::std::string* StockDeletesReqt::mutable_order_group() {
  set_has_order_group();
  // @@protoc_insertion_point(field_mutable:autotrade.StockDeletesReqt.order_group)
  return order_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockDeletesReqt::release_order_group() {
  // @@protoc_insertion_point(field_release:autotrade.StockDeletesReqt.order_group)
  if (!has_order_group()) {
    return NULL;
  }
  clear_has_order_group();
  return order_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockDeletesReqt::set_allocated_order_group(::std::string* order_group) {
  if (order_group != NULL) {
    set_has_order_group();
  } else {
    clear_has_order_group();
  }
  order_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_group);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockDeletesReqt.order_group)
}

// required uint32 market = 3;
inline bool StockDeletesReqt::has_market() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StockDeletesReqt::set_has_market() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StockDeletesReqt::clear_has_market() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StockDeletesReqt::clear_market() {
  market_ = 0u;
  clear_has_market();
}
inline ::google::protobuf::uint32 StockDeletesReqt::market() const {
  // @@protoc_insertion_point(field_get:autotrade.StockDeletesReqt.market)
  return market_;
}
inline void StockDeletesReqt::set_market(::google::protobuf::uint32 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockDeletesReqt.market)
}

// optional string request_id = 4;
inline bool StockDeletesReqt::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockDeletesReqt::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockDeletesReqt::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockDeletesReqt::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& StockDeletesReqt::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockDeletesReqt.request_id)
  return request_id_.GetNoArena();
}
inline void StockDeletesReqt::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockDeletesReqt.request_id)
}
#if LANG_CXX11
inline void StockDeletesReqt::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockDeletesReqt.request_id)
}
#endif
inline void StockDeletesReqt::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockDeletesReqt.request_id)
}
inline void StockDeletesReqt::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockDeletesReqt.request_id)
}
inline ::std::string* StockDeletesReqt::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockDeletesReqt.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockDeletesReqt::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockDeletesReqt.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockDeletesReqt::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockDeletesReqt.request_id)
}

// optional int32 asset_prop = 5;
inline bool StockDeletesReqt::has_asset_prop() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StockDeletesReqt::set_has_asset_prop() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StockDeletesReqt::clear_has_asset_prop() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StockDeletesReqt::clear_asset_prop() {
  asset_prop_ = 0;
  clear_has_asset_prop();
}
inline ::google::protobuf::int32 StockDeletesReqt::asset_prop() const {
  // @@protoc_insertion_point(field_get:autotrade.StockDeletesReqt.asset_prop)
  return asset_prop_;
}
inline void StockDeletesReqt::set_asset_prop(::google::protobuf::int32 value) {
  set_has_asset_prop();
  asset_prop_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockDeletesReqt.asset_prop)
}

// optional string fund_id = 6;
inline bool StockDeletesReqt::has_fund_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StockDeletesReqt::set_has_fund_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StockDeletesReqt::clear_has_fund_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StockDeletesReqt::clear_fund_id() {
  fund_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fund_id();
}
inline const ::std::string& StockDeletesReqt::fund_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockDeletesReqt.fund_id)
  return fund_id_.GetNoArena();
}
inline void StockDeletesReqt::set_fund_id(const ::std::string& value) {
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockDeletesReqt.fund_id)
}
#if LANG_CXX11
inline void StockDeletesReqt::set_fund_id(::std::string&& value) {
  set_has_fund_id();
  fund_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockDeletesReqt.fund_id)
}
#endif
inline void StockDeletesReqt::set_fund_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockDeletesReqt.fund_id)
}
inline void StockDeletesReqt::set_fund_id(const char* value, size_t size) {
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockDeletesReqt.fund_id)
}
inline ::std::string* StockDeletesReqt::mutable_fund_id() {
  set_has_fund_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockDeletesReqt.fund_id)
  return fund_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockDeletesReqt::release_fund_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockDeletesReqt.fund_id)
  if (!has_fund_id()) {
    return NULL;
  }
  clear_has_fund_id();
  return fund_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockDeletesReqt::set_allocated_fund_id(::std::string* fund_id) {
  if (fund_id != NULL) {
    set_has_fund_id();
  } else {
    clear_has_fund_id();
  }
  fund_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fund_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockDeletesReqt.fund_id)
}

// optional string session_id = 7;
inline bool StockDeletesReqt::has_session_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StockDeletesReqt::set_has_session_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StockDeletesReqt::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StockDeletesReqt::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_session_id();
}
inline const ::std::string& StockDeletesReqt::session_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockDeletesReqt.session_id)
  return session_id_.GetNoArena();
}
inline void StockDeletesReqt::set_session_id(const ::std::string& value) {
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockDeletesReqt.session_id)
}
#if LANG_CXX11
inline void StockDeletesReqt::set_session_id(::std::string&& value) {
  set_has_session_id();
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockDeletesReqt.session_id)
}
#endif
inline void StockDeletesReqt::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockDeletesReqt.session_id)
}
inline void StockDeletesReqt::set_session_id(const char* value, size_t size) {
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockDeletesReqt.session_id)
}
inline ::std::string* StockDeletesReqt::mutable_session_id() {
  set_has_session_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockDeletesReqt.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockDeletesReqt::release_session_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockDeletesReqt.session_id)
  if (!has_session_id()) {
    return NULL;
  }
  clear_has_session_id();
  return session_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockDeletesReqt::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    set_has_session_id();
  } else {
    clear_has_session_id();
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockDeletesReqt.session_id)
}

// optional string trader_id = 8;
inline bool StockDeletesReqt::has_trader_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StockDeletesReqt::set_has_trader_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StockDeletesReqt::clear_has_trader_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StockDeletesReqt::clear_trader_id() {
  trader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trader_id();
}
inline const ::std::string& StockDeletesReqt::trader_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockDeletesReqt.trader_id)
  return trader_id_.GetNoArena();
}
inline void StockDeletesReqt::set_trader_id(const ::std::string& value) {
  set_has_trader_id();
  trader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockDeletesReqt.trader_id)
}
#if LANG_CXX11
inline void StockDeletesReqt::set_trader_id(::std::string&& value) {
  set_has_trader_id();
  trader_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockDeletesReqt.trader_id)
}
#endif
inline void StockDeletesReqt::set_trader_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trader_id();
  trader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockDeletesReqt.trader_id)
}
inline void StockDeletesReqt::set_trader_id(const char* value, size_t size) {
  set_has_trader_id();
  trader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockDeletesReqt.trader_id)
}
inline ::std::string* StockDeletesReqt::mutable_trader_id() {
  set_has_trader_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockDeletesReqt.trader_id)
  return trader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockDeletesReqt::release_trader_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockDeletesReqt.trader_id)
  if (!has_trader_id()) {
    return NULL;
  }
  clear_has_trader_id();
  return trader_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockDeletesReqt::set_allocated_trader_id(::std::string* trader_id) {
  if (trader_id != NULL) {
    set_has_trader_id();
  } else {
    clear_has_trader_id();
  }
  trader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trader_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockDeletesReqt.trader_id)
}

// -------------------------------------------------------------------

// StockDeletesResp

// optional int32 funcid = 1 [default = 11101005];
inline bool StockDeletesResp::has_funcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StockDeletesResp::set_has_funcid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StockDeletesResp::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StockDeletesResp::clear_funcid() {
  funcid_ = 11101005;
  clear_has_funcid();
}
inline ::google::protobuf::int32 StockDeletesResp::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.StockDeletesResp.funcid)
  return funcid_;
}
inline void StockDeletesResp::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockDeletesResp.funcid)
}

// optional string order_group = 2;
inline bool StockDeletesResp::has_order_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockDeletesResp::set_has_order_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockDeletesResp::clear_has_order_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockDeletesResp::clear_order_group() {
  order_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_group();
}
inline const ::std::string& StockDeletesResp::order_group() const {
  // @@protoc_insertion_point(field_get:autotrade.StockDeletesResp.order_group)
  return order_group_.GetNoArena();
}
inline void StockDeletesResp::set_order_group(const ::std::string& value) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockDeletesResp.order_group)
}
#if LANG_CXX11
inline void StockDeletesResp::set_order_group(::std::string&& value) {
  set_has_order_group();
  order_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockDeletesResp.order_group)
}
#endif
inline void StockDeletesResp::set_order_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockDeletesResp.order_group)
}
inline void StockDeletesResp::set_order_group(const char* value, size_t size) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockDeletesResp.order_group)
}
inline ::std::string* StockDeletesResp::mutable_order_group() {
  set_has_order_group();
  // @@protoc_insertion_point(field_mutable:autotrade.StockDeletesResp.order_group)
  return order_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockDeletesResp::release_order_group() {
  // @@protoc_insertion_point(field_release:autotrade.StockDeletesResp.order_group)
  if (!has_order_group()) {
    return NULL;
  }
  clear_has_order_group();
  return order_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockDeletesResp::set_allocated_order_group(::std::string* order_group) {
  if (order_group != NULL) {
    set_has_order_group();
  } else {
    clear_has_order_group();
  }
  order_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_group);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockDeletesResp.order_group)
}

// optional string request_id = 3;
inline bool StockDeletesResp::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockDeletesResp::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockDeletesResp::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockDeletesResp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& StockDeletesResp::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockDeletesResp.request_id)
  return request_id_.GetNoArena();
}
inline void StockDeletesResp::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockDeletesResp.request_id)
}
#if LANG_CXX11
inline void StockDeletesResp::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockDeletesResp.request_id)
}
#endif
inline void StockDeletesResp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockDeletesResp.request_id)
}
inline void StockDeletesResp::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockDeletesResp.request_id)
}
inline ::std::string* StockDeletesResp::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockDeletesResp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockDeletesResp::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockDeletesResp.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockDeletesResp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockDeletesResp.request_id)
}

// -------------------------------------------------------------------

// StockCreateRedeemReqt

// optional int32 funcid = 1 [default = 11001003];
inline bool StockCreateRedeemReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void StockCreateRedeemReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void StockCreateRedeemReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void StockCreateRedeemReqt::clear_funcid() {
  funcid_ = 11001003;
  clear_has_funcid();
}
inline ::google::protobuf::int32 StockCreateRedeemReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.StockCreateRedeemReqt.funcid)
  return funcid_;
}
inline void StockCreateRedeemReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockCreateRedeemReqt.funcid)
}

// required string code = 2;
inline bool StockCreateRedeemReqt::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockCreateRedeemReqt::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockCreateRedeemReqt::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockCreateRedeemReqt::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& StockCreateRedeemReqt::code() const {
  // @@protoc_insertion_point(field_get:autotrade.StockCreateRedeemReqt.code)
  return code_.GetNoArena();
}
inline void StockCreateRedeemReqt::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockCreateRedeemReqt.code)
}
#if LANG_CXX11
inline void StockCreateRedeemReqt::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockCreateRedeemReqt.code)
}
#endif
inline void StockCreateRedeemReqt::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockCreateRedeemReqt.code)
}
inline void StockCreateRedeemReqt::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockCreateRedeemReqt.code)
}
inline ::std::string* StockCreateRedeemReqt::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:autotrade.StockCreateRedeemReqt.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockCreateRedeemReqt::release_code() {
  // @@protoc_insertion_point(field_release:autotrade.StockCreateRedeemReqt.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockCreateRedeemReqt::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockCreateRedeemReqt.code)
}

// required int64 qty = 3;
inline bool StockCreateRedeemReqt::has_qty() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StockCreateRedeemReqt::set_has_qty() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StockCreateRedeemReqt::clear_has_qty() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StockCreateRedeemReqt::clear_qty() {
  qty_ = GOOGLE_LONGLONG(0);
  clear_has_qty();
}
inline ::google::protobuf::int64 StockCreateRedeemReqt::qty() const {
  // @@protoc_insertion_point(field_get:autotrade.StockCreateRedeemReqt.qty)
  return qty_;
}
inline void StockCreateRedeemReqt::set_qty(::google::protobuf::int64 value) {
  set_has_qty();
  qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockCreateRedeemReqt.qty)
}

// required int64 basket_qty = 4;
inline bool StockCreateRedeemReqt::has_basket_qty() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void StockCreateRedeemReqt::set_has_basket_qty() {
  _has_bits_[0] |= 0x00000100u;
}
inline void StockCreateRedeemReqt::clear_has_basket_qty() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void StockCreateRedeemReqt::clear_basket_qty() {
  basket_qty_ = GOOGLE_LONGLONG(0);
  clear_has_basket_qty();
}
inline ::google::protobuf::int64 StockCreateRedeemReqt::basket_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.StockCreateRedeemReqt.basket_qty)
  return basket_qty_;
}
inline void StockCreateRedeemReqt::set_basket_qty(::google::protobuf::int64 value) {
  set_has_basket_qty();
  basket_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockCreateRedeemReqt.basket_qty)
}

// required uint32 bsflag = 5;
inline bool StockCreateRedeemReqt::has_bsflag() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void StockCreateRedeemReqt::set_has_bsflag() {
  _has_bits_[0] |= 0x00000200u;
}
inline void StockCreateRedeemReqt::clear_has_bsflag() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void StockCreateRedeemReqt::clear_bsflag() {
  bsflag_ = 0u;
  clear_has_bsflag();
}
inline ::google::protobuf::uint32 StockCreateRedeemReqt::bsflag() const {
  // @@protoc_insertion_point(field_get:autotrade.StockCreateRedeemReqt.bsflag)
  return bsflag_;
}
inline void StockCreateRedeemReqt::set_bsflag(::google::protobuf::uint32 value) {
  set_has_bsflag();
  bsflag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockCreateRedeemReqt.bsflag)
}

// required uint32 market = 6;
inline bool StockCreateRedeemReqt::has_market() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void StockCreateRedeemReqt::set_has_market() {
  _has_bits_[0] |= 0x00000400u;
}
inline void StockCreateRedeemReqt::clear_has_market() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void StockCreateRedeemReqt::clear_market() {
  market_ = 0u;
  clear_has_market();
}
inline ::google::protobuf::uint32 StockCreateRedeemReqt::market() const {
  // @@protoc_insertion_point(field_get:autotrade.StockCreateRedeemReqt.market)
  return market_;
}
inline void StockCreateRedeemReqt::set_market(::google::protobuf::uint32 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockCreateRedeemReqt.market)
}

// optional int64 price = 7;
inline bool StockCreateRedeemReqt::has_price() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void StockCreateRedeemReqt::set_has_price() {
  _has_bits_[0] |= 0x00000800u;
}
inline void StockCreateRedeemReqt::clear_has_price() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void StockCreateRedeemReqt::clear_price() {
  price_ = GOOGLE_LONGLONG(0);
  clear_has_price();
}
inline ::google::protobuf::int64 StockCreateRedeemReqt::price() const {
  // @@protoc_insertion_point(field_get:autotrade.StockCreateRedeemReqt.price)
  return price_;
}
inline void StockCreateRedeemReqt::set_price(::google::protobuf::int64 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockCreateRedeemReqt.price)
}

// optional string request_id = 8;
inline bool StockCreateRedeemReqt::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockCreateRedeemReqt::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockCreateRedeemReqt::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockCreateRedeemReqt::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& StockCreateRedeemReqt::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockCreateRedeemReqt.request_id)
  return request_id_.GetNoArena();
}
inline void StockCreateRedeemReqt::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockCreateRedeemReqt.request_id)
}
#if LANG_CXX11
inline void StockCreateRedeemReqt::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockCreateRedeemReqt.request_id)
}
#endif
inline void StockCreateRedeemReqt::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockCreateRedeemReqt.request_id)
}
inline void StockCreateRedeemReqt::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockCreateRedeemReqt.request_id)
}
inline ::std::string* StockCreateRedeemReqt::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockCreateRedeemReqt.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockCreateRedeemReqt::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockCreateRedeemReqt.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockCreateRedeemReqt::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockCreateRedeemReqt.request_id)
}

// optional int64 request_time = 9 [default = 0];
inline bool StockCreateRedeemReqt::has_request_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void StockCreateRedeemReqt::set_has_request_time() {
  _has_bits_[0] |= 0x00001000u;
}
inline void StockCreateRedeemReqt::clear_has_request_time() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void StockCreateRedeemReqt::clear_request_time() {
  request_time_ = GOOGLE_LONGLONG(0);
  clear_has_request_time();
}
inline ::google::protobuf::int64 StockCreateRedeemReqt::request_time() const {
  // @@protoc_insertion_point(field_get:autotrade.StockCreateRedeemReqt.request_time)
  return request_time_;
}
inline void StockCreateRedeemReqt::set_request_time(::google::protobuf::int64 value) {
  set_has_request_time();
  request_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockCreateRedeemReqt.request_time)
}

// optional int64 active_interval = 10 [default = 1000];
inline bool StockCreateRedeemReqt::has_active_interval() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void StockCreateRedeemReqt::set_has_active_interval() {
  _has_bits_[0] |= 0x00008000u;
}
inline void StockCreateRedeemReqt::clear_has_active_interval() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void StockCreateRedeemReqt::clear_active_interval() {
  active_interval_ = GOOGLE_LONGLONG(1000);
  clear_has_active_interval();
}
inline ::google::protobuf::int64 StockCreateRedeemReqt::active_interval() const {
  // @@protoc_insertion_point(field_get:autotrade.StockCreateRedeemReqt.active_interval)
  return active_interval_;
}
inline void StockCreateRedeemReqt::set_active_interval(::google::protobuf::int64 value) {
  set_has_active_interval();
  active_interval_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockCreateRedeemReqt.active_interval)
}

// optional int64 request_date = 11 [default = 0];
inline bool StockCreateRedeemReqt::has_request_date() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void StockCreateRedeemReqt::set_has_request_date() {
  _has_bits_[0] |= 0x00002000u;
}
inline void StockCreateRedeemReqt::clear_has_request_date() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void StockCreateRedeemReqt::clear_request_date() {
  request_date_ = GOOGLE_LONGLONG(0);
  clear_has_request_date();
}
inline ::google::protobuf::int64 StockCreateRedeemReqt::request_date() const {
  // @@protoc_insertion_point(field_get:autotrade.StockCreateRedeemReqt.request_date)
  return request_date_;
}
inline void StockCreateRedeemReqt::set_request_date(::google::protobuf::int64 value) {
  set_has_request_date();
  request_date_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockCreateRedeemReqt.request_date)
}

// optional string order_id = 12;
inline bool StockCreateRedeemReqt::has_order_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StockCreateRedeemReqt::set_has_order_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StockCreateRedeemReqt::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StockCreateRedeemReqt::clear_order_id() {
  order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_id();
}
inline const ::std::string& StockCreateRedeemReqt::order_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockCreateRedeemReqt.order_id)
  return order_id_.GetNoArena();
}
inline void StockCreateRedeemReqt::set_order_id(const ::std::string& value) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockCreateRedeemReqt.order_id)
}
#if LANG_CXX11
inline void StockCreateRedeemReqt::set_order_id(::std::string&& value) {
  set_has_order_id();
  order_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockCreateRedeemReqt.order_id)
}
#endif
inline void StockCreateRedeemReqt::set_order_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockCreateRedeemReqt.order_id)
}
inline void StockCreateRedeemReqt::set_order_id(const char* value, size_t size) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockCreateRedeemReqt.order_id)
}
inline ::std::string* StockCreateRedeemReqt::mutable_order_id() {
  set_has_order_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockCreateRedeemReqt.order_id)
  return order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockCreateRedeemReqt::release_order_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockCreateRedeemReqt.order_id)
  if (!has_order_id()) {
    return NULL;
  }
  clear_has_order_id();
  return order_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockCreateRedeemReqt::set_allocated_order_id(::std::string* order_id) {
  if (order_id != NULL) {
    set_has_order_id();
  } else {
    clear_has_order_id();
  }
  order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockCreateRedeemReqt.order_id)
}

// optional string robot_id = 13;
inline bool StockCreateRedeemReqt::has_robot_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StockCreateRedeemReqt::set_has_robot_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StockCreateRedeemReqt::clear_has_robot_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StockCreateRedeemReqt::clear_robot_id() {
  robot_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_robot_id();
}
inline const ::std::string& StockCreateRedeemReqt::robot_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockCreateRedeemReqt.robot_id)
  return robot_id_.GetNoArena();
}
inline void StockCreateRedeemReqt::set_robot_id(const ::std::string& value) {
  set_has_robot_id();
  robot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockCreateRedeemReqt.robot_id)
}
#if LANG_CXX11
inline void StockCreateRedeemReqt::set_robot_id(::std::string&& value) {
  set_has_robot_id();
  robot_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockCreateRedeemReqt.robot_id)
}
#endif
inline void StockCreateRedeemReqt::set_robot_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_robot_id();
  robot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockCreateRedeemReqt.robot_id)
}
inline void StockCreateRedeemReqt::set_robot_id(const char* value, size_t size) {
  set_has_robot_id();
  robot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockCreateRedeemReqt.robot_id)
}
inline ::std::string* StockCreateRedeemReqt::mutable_robot_id() {
  set_has_robot_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockCreateRedeemReqt.robot_id)
  return robot_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockCreateRedeemReqt::release_robot_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockCreateRedeemReqt.robot_id)
  if (!has_robot_id()) {
    return NULL;
  }
  clear_has_robot_id();
  return robot_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockCreateRedeemReqt::set_allocated_robot_id(::std::string* robot_id) {
  if (robot_id != NULL) {
    set_has_robot_id();
  } else {
    clear_has_robot_id();
  }
  robot_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), robot_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockCreateRedeemReqt.robot_id)
}

// optional string trader_id = 14;
inline bool StockCreateRedeemReqt::has_trader_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StockCreateRedeemReqt::set_has_trader_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StockCreateRedeemReqt::clear_has_trader_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StockCreateRedeemReqt::clear_trader_id() {
  trader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trader_id();
}
inline const ::std::string& StockCreateRedeemReqt::trader_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockCreateRedeemReqt.trader_id)
  return trader_id_.GetNoArena();
}
inline void StockCreateRedeemReqt::set_trader_id(const ::std::string& value) {
  set_has_trader_id();
  trader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockCreateRedeemReqt.trader_id)
}
#if LANG_CXX11
inline void StockCreateRedeemReqt::set_trader_id(::std::string&& value) {
  set_has_trader_id();
  trader_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockCreateRedeemReqt.trader_id)
}
#endif
inline void StockCreateRedeemReqt::set_trader_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trader_id();
  trader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockCreateRedeemReqt.trader_id)
}
inline void StockCreateRedeemReqt::set_trader_id(const char* value, size_t size) {
  set_has_trader_id();
  trader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockCreateRedeemReqt.trader_id)
}
inline ::std::string* StockCreateRedeemReqt::mutable_trader_id() {
  set_has_trader_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockCreateRedeemReqt.trader_id)
  return trader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockCreateRedeemReqt::release_trader_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockCreateRedeemReqt.trader_id)
  if (!has_trader_id()) {
    return NULL;
  }
  clear_has_trader_id();
  return trader_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockCreateRedeemReqt::set_allocated_trader_id(::std::string* trader_id) {
  if (trader_id != NULL) {
    set_has_trader_id();
  } else {
    clear_has_trader_id();
  }
  trader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trader_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockCreateRedeemReqt.trader_id)
}

// optional string fund_id = 15;
inline bool StockCreateRedeemReqt::has_fund_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StockCreateRedeemReqt::set_has_fund_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StockCreateRedeemReqt::clear_has_fund_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StockCreateRedeemReqt::clear_fund_id() {
  fund_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fund_id();
}
inline const ::std::string& StockCreateRedeemReqt::fund_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockCreateRedeemReqt.fund_id)
  return fund_id_.GetNoArena();
}
inline void StockCreateRedeemReqt::set_fund_id(const ::std::string& value) {
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockCreateRedeemReqt.fund_id)
}
#if LANG_CXX11
inline void StockCreateRedeemReqt::set_fund_id(::std::string&& value) {
  set_has_fund_id();
  fund_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockCreateRedeemReqt.fund_id)
}
#endif
inline void StockCreateRedeemReqt::set_fund_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockCreateRedeemReqt.fund_id)
}
inline void StockCreateRedeemReqt::set_fund_id(const char* value, size_t size) {
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockCreateRedeemReqt.fund_id)
}
inline ::std::string* StockCreateRedeemReqt::mutable_fund_id() {
  set_has_fund_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockCreateRedeemReqt.fund_id)
  return fund_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockCreateRedeemReqt::release_fund_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockCreateRedeemReqt.fund_id)
  if (!has_fund_id()) {
    return NULL;
  }
  clear_has_fund_id();
  return fund_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockCreateRedeemReqt::set_allocated_fund_id(::std::string* fund_id) {
  if (fund_id != NULL) {
    set_has_fund_id();
  } else {
    clear_has_fund_id();
  }
  fund_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fund_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockCreateRedeemReqt.fund_id)
}

// optional string session_id = 16;
inline bool StockCreateRedeemReqt::has_session_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StockCreateRedeemReqt::set_has_session_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StockCreateRedeemReqt::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StockCreateRedeemReqt::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_session_id();
}
inline const ::std::string& StockCreateRedeemReqt::session_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockCreateRedeemReqt.session_id)
  return session_id_.GetNoArena();
}
inline void StockCreateRedeemReqt::set_session_id(const ::std::string& value) {
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockCreateRedeemReqt.session_id)
}
#if LANG_CXX11
inline void StockCreateRedeemReqt::set_session_id(::std::string&& value) {
  set_has_session_id();
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockCreateRedeemReqt.session_id)
}
#endif
inline void StockCreateRedeemReqt::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockCreateRedeemReqt.session_id)
}
inline void StockCreateRedeemReqt::set_session_id(const char* value, size_t size) {
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockCreateRedeemReqt.session_id)
}
inline ::std::string* StockCreateRedeemReqt::mutable_session_id() {
  set_has_session_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockCreateRedeemReqt.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockCreateRedeemReqt::release_session_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockCreateRedeemReqt.session_id)
  if (!has_session_id()) {
    return NULL;
  }
  clear_has_session_id();
  return session_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockCreateRedeemReqt::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    set_has_session_id();
  } else {
    clear_has_session_id();
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockCreateRedeemReqt.session_id)
}

// -------------------------------------------------------------------

// StockCreateRedeemResp

// optional int32 funcid = 1 [default = 11101003];
inline bool StockCreateRedeemResp::has_funcid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StockCreateRedeemResp::set_has_funcid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StockCreateRedeemResp::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StockCreateRedeemResp::clear_funcid() {
  funcid_ = 11101003;
  clear_has_funcid();
}
inline ::google::protobuf::int32 StockCreateRedeemResp::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.StockCreateRedeemResp.funcid)
  return funcid_;
}
inline void StockCreateRedeemResp::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockCreateRedeemResp.funcid)
}

// required string order_group = 2;
inline bool StockCreateRedeemResp::has_order_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockCreateRedeemResp::set_has_order_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockCreateRedeemResp::clear_has_order_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockCreateRedeemResp::clear_order_group() {
  order_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_group();
}
inline const ::std::string& StockCreateRedeemResp::order_group() const {
  // @@protoc_insertion_point(field_get:autotrade.StockCreateRedeemResp.order_group)
  return order_group_.GetNoArena();
}
inline void StockCreateRedeemResp::set_order_group(const ::std::string& value) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockCreateRedeemResp.order_group)
}
#if LANG_CXX11
inline void StockCreateRedeemResp::set_order_group(::std::string&& value) {
  set_has_order_group();
  order_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockCreateRedeemResp.order_group)
}
#endif
inline void StockCreateRedeemResp::set_order_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockCreateRedeemResp.order_group)
}
inline void StockCreateRedeemResp::set_order_group(const char* value, size_t size) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockCreateRedeemResp.order_group)
}
inline ::std::string* StockCreateRedeemResp::mutable_order_group() {
  set_has_order_group();
  // @@protoc_insertion_point(field_mutable:autotrade.StockCreateRedeemResp.order_group)
  return order_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockCreateRedeemResp::release_order_group() {
  // @@protoc_insertion_point(field_release:autotrade.StockCreateRedeemResp.order_group)
  if (!has_order_group()) {
    return NULL;
  }
  clear_has_order_group();
  return order_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockCreateRedeemResp::set_allocated_order_group(::std::string* order_group) {
  if (order_group != NULL) {
    set_has_order_group();
  } else {
    clear_has_order_group();
  }
  order_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_group);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockCreateRedeemResp.order_group)
}

// optional string request_id = 3;
inline bool StockCreateRedeemResp::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockCreateRedeemResp::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockCreateRedeemResp::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockCreateRedeemResp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& StockCreateRedeemResp::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockCreateRedeemResp.request_id)
  return request_id_.GetNoArena();
}
inline void StockCreateRedeemResp::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockCreateRedeemResp.request_id)
}
#if LANG_CXX11
inline void StockCreateRedeemResp::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockCreateRedeemResp.request_id)
}
#endif
inline void StockCreateRedeemResp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockCreateRedeemResp.request_id)
}
inline void StockCreateRedeemResp::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockCreateRedeemResp.request_id)
}
inline ::std::string* StockCreateRedeemResp::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockCreateRedeemResp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockCreateRedeemResp::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockCreateRedeemResp.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockCreateRedeemResp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockCreateRedeemResp.request_id)
}

// required string order_id = 4;
inline bool StockCreateRedeemResp::has_order_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StockCreateRedeemResp::set_has_order_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StockCreateRedeemResp::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StockCreateRedeemResp::clear_order_id() {
  order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_id();
}
inline const ::std::string& StockCreateRedeemResp::order_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockCreateRedeemResp.order_id)
  return order_id_.GetNoArena();
}
inline void StockCreateRedeemResp::set_order_id(const ::std::string& value) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockCreateRedeemResp.order_id)
}
#if LANG_CXX11
inline void StockCreateRedeemResp::set_order_id(::std::string&& value) {
  set_has_order_id();
  order_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockCreateRedeemResp.order_id)
}
#endif
inline void StockCreateRedeemResp::set_order_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockCreateRedeemResp.order_id)
}
inline void StockCreateRedeemResp::set_order_id(const char* value, size_t size) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockCreateRedeemResp.order_id)
}
inline ::std::string* StockCreateRedeemResp::mutable_order_id() {
  set_has_order_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockCreateRedeemResp.order_id)
  return order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockCreateRedeemResp::release_order_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockCreateRedeemResp.order_id)
  if (!has_order_id()) {
    return NULL;
  }
  clear_has_order_id();
  return order_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockCreateRedeemResp::set_allocated_order_id(::std::string* order_id) {
  if (order_id != NULL) {
    set_has_order_id();
  } else {
    clear_has_order_id();
  }
  order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockCreateRedeemResp.order_id)
}

// -------------------------------------------------------------------

// StockQueryOrderReqt

// optional int32 funcid = 1 [default = 11002002];
inline bool StockQueryOrderReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StockQueryOrderReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StockQueryOrderReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StockQueryOrderReqt::clear_funcid() {
  funcid_ = 11002002;
  clear_has_funcid();
}
inline ::google::protobuf::int32 StockQueryOrderReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrderReqt.funcid)
  return funcid_;
}
inline void StockQueryOrderReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrderReqt.funcid)
}

// optional string order_group = 2 [default = ""];
inline bool StockQueryOrderReqt::has_order_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockQueryOrderReqt::set_has_order_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockQueryOrderReqt::clear_has_order_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockQueryOrderReqt::clear_order_group() {
  order_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_group();
}
inline const ::std::string& StockQueryOrderReqt::order_group() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrderReqt.order_group)
  return order_group_.GetNoArena();
}
inline void StockQueryOrderReqt::set_order_group(const ::std::string& value) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrderReqt.order_group)
}
#if LANG_CXX11
inline void StockQueryOrderReqt::set_order_group(::std::string&& value) {
  set_has_order_group();
  order_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockQueryOrderReqt.order_group)
}
#endif
inline void StockQueryOrderReqt::set_order_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockQueryOrderReqt.order_group)
}
inline void StockQueryOrderReqt::set_order_group(const char* value, size_t size) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockQueryOrderReqt.order_group)
}
inline ::std::string* StockQueryOrderReqt::mutable_order_group() {
  set_has_order_group();
  // @@protoc_insertion_point(field_mutable:autotrade.StockQueryOrderReqt.order_group)
  return order_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockQueryOrderReqt::release_order_group() {
  // @@protoc_insertion_point(field_release:autotrade.StockQueryOrderReqt.order_group)
  if (!has_order_group()) {
    return NULL;
  }
  clear_has_order_group();
  return order_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQueryOrderReqt::set_allocated_order_group(::std::string* order_group) {
  if (order_group != NULL) {
    set_has_order_group();
  } else {
    clear_has_order_group();
  }
  order_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_group);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockQueryOrderReqt.order_group)
}

// optional .autotrade.StockQueryOrderReqt.QueryType query_type = 3 [default = Type_ONCE];
inline bool StockQueryOrderReqt::has_query_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StockQueryOrderReqt::set_has_query_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StockQueryOrderReqt::clear_has_query_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StockQueryOrderReqt::clear_query_type() {
  query_type_ = 0;
  clear_has_query_type();
}
inline ::autotrade::StockQueryOrderReqt_QueryType StockQueryOrderReqt::query_type() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrderReqt.query_type)
  return static_cast< ::autotrade::StockQueryOrderReqt_QueryType >(query_type_);
}
inline void StockQueryOrderReqt::set_query_type(::autotrade::StockQueryOrderReqt_QueryType value) {
  assert(::autotrade::StockQueryOrderReqt_QueryType_IsValid(value));
  set_has_query_type();
  query_type_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrderReqt.query_type)
}

// optional .autotrade.StockQueryOrderReqt.QueryFlag query_flag = 4 [default = Type_NO_DELETE];
inline bool StockQueryOrderReqt::has_query_flag() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void StockQueryOrderReqt::set_has_query_flag() {
  _has_bits_[0] |= 0x00000100u;
}
inline void StockQueryOrderReqt::clear_has_query_flag() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void StockQueryOrderReqt::clear_query_flag() {
  query_flag_ = 1;
  clear_has_query_flag();
}
inline ::autotrade::StockQueryOrderReqt_QueryFlag StockQueryOrderReqt::query_flag() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrderReqt.query_flag)
  return static_cast< ::autotrade::StockQueryOrderReqt_QueryFlag >(query_flag_);
}
inline void StockQueryOrderReqt::set_query_flag(::autotrade::StockQueryOrderReqt_QueryFlag value) {
  assert(::autotrade::StockQueryOrderReqt_QueryFlag_IsValid(value));
  set_has_query_flag();
  query_flag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrderReqt.query_flag)
}

// optional string start_pos = 5 [default = ""];
inline bool StockQueryOrderReqt::has_start_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockQueryOrderReqt::set_has_start_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockQueryOrderReqt::clear_has_start_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockQueryOrderReqt::clear_start_pos() {
  start_pos_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_start_pos();
}
inline const ::std::string& StockQueryOrderReqt::start_pos() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrderReqt.start_pos)
  return start_pos_.GetNoArena();
}
inline void StockQueryOrderReqt::set_start_pos(const ::std::string& value) {
  set_has_start_pos();
  start_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrderReqt.start_pos)
}
#if LANG_CXX11
inline void StockQueryOrderReqt::set_start_pos(::std::string&& value) {
  set_has_start_pos();
  start_pos_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockQueryOrderReqt.start_pos)
}
#endif
inline void StockQueryOrderReqt::set_start_pos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_start_pos();
  start_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockQueryOrderReqt.start_pos)
}
inline void StockQueryOrderReqt::set_start_pos(const char* value, size_t size) {
  set_has_start_pos();
  start_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockQueryOrderReqt.start_pos)
}
inline ::std::string* StockQueryOrderReqt::mutable_start_pos() {
  set_has_start_pos();
  // @@protoc_insertion_point(field_mutable:autotrade.StockQueryOrderReqt.start_pos)
  return start_pos_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockQueryOrderReqt::release_start_pos() {
  // @@protoc_insertion_point(field_release:autotrade.StockQueryOrderReqt.start_pos)
  if (!has_start_pos()) {
    return NULL;
  }
  clear_has_start_pos();
  return start_pos_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQueryOrderReqt::set_allocated_start_pos(::std::string* start_pos) {
  if (start_pos != NULL) {
    set_has_start_pos();
  } else {
    clear_has_start_pos();
  }
  start_pos_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_pos);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockQueryOrderReqt.start_pos)
}

// optional string request_id = 6;
inline bool StockQueryOrderReqt::has_request_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StockQueryOrderReqt::set_has_request_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StockQueryOrderReqt::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StockQueryOrderReqt::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& StockQueryOrderReqt::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrderReqt.request_id)
  return request_id_.GetNoArena();
}
inline void StockQueryOrderReqt::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrderReqt.request_id)
}
#if LANG_CXX11
inline void StockQueryOrderReqt::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockQueryOrderReqt.request_id)
}
#endif
inline void StockQueryOrderReqt::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockQueryOrderReqt.request_id)
}
inline void StockQueryOrderReqt::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockQueryOrderReqt.request_id)
}
inline ::std::string* StockQueryOrderReqt::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockQueryOrderReqt.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockQueryOrderReqt::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockQueryOrderReqt.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQueryOrderReqt::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockQueryOrderReqt.request_id)
}

// optional int64 request_time = 10 [default = 0];
inline bool StockQueryOrderReqt::has_request_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StockQueryOrderReqt::set_has_request_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StockQueryOrderReqt::clear_has_request_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StockQueryOrderReqt::clear_request_time() {
  request_time_ = GOOGLE_LONGLONG(0);
  clear_has_request_time();
}
inline ::google::protobuf::int64 StockQueryOrderReqt::request_time() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrderReqt.request_time)
  return request_time_;
}
inline void StockQueryOrderReqt::set_request_time(::google::protobuf::int64 value) {
  set_has_request_time();
  request_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrderReqt.request_time)
}

// optional int64 active_interval = 11 [default = 1000];
inline bool StockQueryOrderReqt::has_active_interval() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void StockQueryOrderReqt::set_has_active_interval() {
  _has_bits_[0] |= 0x00000200u;
}
inline void StockQueryOrderReqt::clear_has_active_interval() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void StockQueryOrderReqt::clear_active_interval() {
  active_interval_ = GOOGLE_LONGLONG(1000);
  clear_has_active_interval();
}
inline ::google::protobuf::int64 StockQueryOrderReqt::active_interval() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrderReqt.active_interval)
  return active_interval_;
}
inline void StockQueryOrderReqt::set_active_interval(::google::protobuf::int64 value) {
  set_has_active_interval();
  active_interval_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrderReqt.active_interval)
}

// optional string fund_id = 12;
inline bool StockQueryOrderReqt::has_fund_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StockQueryOrderReqt::set_has_fund_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StockQueryOrderReqt::clear_has_fund_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StockQueryOrderReqt::clear_fund_id() {
  fund_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fund_id();
}
inline const ::std::string& StockQueryOrderReqt::fund_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrderReqt.fund_id)
  return fund_id_.GetNoArena();
}
inline void StockQueryOrderReqt::set_fund_id(const ::std::string& value) {
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrderReqt.fund_id)
}
#if LANG_CXX11
inline void StockQueryOrderReqt::set_fund_id(::std::string&& value) {
  set_has_fund_id();
  fund_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockQueryOrderReqt.fund_id)
}
#endif
inline void StockQueryOrderReqt::set_fund_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockQueryOrderReqt.fund_id)
}
inline void StockQueryOrderReqt::set_fund_id(const char* value, size_t size) {
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockQueryOrderReqt.fund_id)
}
inline ::std::string* StockQueryOrderReqt::mutable_fund_id() {
  set_has_fund_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockQueryOrderReqt.fund_id)
  return fund_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockQueryOrderReqt::release_fund_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockQueryOrderReqt.fund_id)
  if (!has_fund_id()) {
    return NULL;
  }
  clear_has_fund_id();
  return fund_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQueryOrderReqt::set_allocated_fund_id(::std::string* fund_id) {
  if (fund_id != NULL) {
    set_has_fund_id();
  } else {
    clear_has_fund_id();
  }
  fund_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fund_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockQueryOrderReqt.fund_id)
}

// optional string session_id = 13;
inline bool StockQueryOrderReqt::has_session_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StockQueryOrderReqt::set_has_session_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StockQueryOrderReqt::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StockQueryOrderReqt::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_session_id();
}
inline const ::std::string& StockQueryOrderReqt::session_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrderReqt.session_id)
  return session_id_.GetNoArena();
}
inline void StockQueryOrderReqt::set_session_id(const ::std::string& value) {
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrderReqt.session_id)
}
#if LANG_CXX11
inline void StockQueryOrderReqt::set_session_id(::std::string&& value) {
  set_has_session_id();
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockQueryOrderReqt.session_id)
}
#endif
inline void StockQueryOrderReqt::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockQueryOrderReqt.session_id)
}
inline void StockQueryOrderReqt::set_session_id(const char* value, size_t size) {
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockQueryOrderReqt.session_id)
}
inline ::std::string* StockQueryOrderReqt::mutable_session_id() {
  set_has_session_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockQueryOrderReqt.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockQueryOrderReqt::release_session_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockQueryOrderReqt.session_id)
  if (!has_session_id()) {
    return NULL;
  }
  clear_has_session_id();
  return session_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQueryOrderReqt::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    set_has_session_id();
  } else {
    clear_has_session_id();
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockQueryOrderReqt.session_id)
}

// -------------------------------------------------------------------

// StockQueryOrderResp_OrderDetail

// optional uint64 match_time = 1;
inline bool StockQueryOrderResp_OrderDetail::has_match_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StockQueryOrderResp_OrderDetail::set_has_match_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StockQueryOrderResp_OrderDetail::clear_has_match_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StockQueryOrderResp_OrderDetail::clear_match_time() {
  match_time_ = GOOGLE_ULONGLONG(0);
  clear_has_match_time();
}
inline ::google::protobuf::uint64 StockQueryOrderResp_OrderDetail::match_time() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrderResp.OrderDetail.match_time)
  return match_time_;
}
inline void StockQueryOrderResp_OrderDetail::set_match_time(::google::protobuf::uint64 value) {
  set_has_match_time();
  match_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrderResp.OrderDetail.match_time)
}

// required string orderno = 2;
inline bool StockQueryOrderResp_OrderDetail::has_orderno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockQueryOrderResp_OrderDetail::set_has_orderno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockQueryOrderResp_OrderDetail::clear_has_orderno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockQueryOrderResp_OrderDetail::clear_orderno() {
  orderno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_orderno();
}
inline const ::std::string& StockQueryOrderResp_OrderDetail::orderno() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrderResp.OrderDetail.orderno)
  return orderno_.GetNoArena();
}
inline void StockQueryOrderResp_OrderDetail::set_orderno(const ::std::string& value) {
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrderResp.OrderDetail.orderno)
}
#if LANG_CXX11
inline void StockQueryOrderResp_OrderDetail::set_orderno(::std::string&& value) {
  set_has_orderno();
  orderno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockQueryOrderResp.OrderDetail.orderno)
}
#endif
inline void StockQueryOrderResp_OrderDetail::set_orderno(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockQueryOrderResp.OrderDetail.orderno)
}
inline void StockQueryOrderResp_OrderDetail::set_orderno(const char* value, size_t size) {
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockQueryOrderResp.OrderDetail.orderno)
}
inline ::std::string* StockQueryOrderResp_OrderDetail::mutable_orderno() {
  set_has_orderno();
  // @@protoc_insertion_point(field_mutable:autotrade.StockQueryOrderResp.OrderDetail.orderno)
  return orderno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockQueryOrderResp_OrderDetail::release_orderno() {
  // @@protoc_insertion_point(field_release:autotrade.StockQueryOrderResp.OrderDetail.orderno)
  if (!has_orderno()) {
    return NULL;
  }
  clear_has_orderno();
  return orderno_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQueryOrderResp_OrderDetail::set_allocated_orderno(::std::string* orderno) {
  if (orderno != NULL) {
    set_has_orderno();
  } else {
    clear_has_orderno();
  }
  orderno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderno);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockQueryOrderResp.OrderDetail.orderno)
}

// required uint32 bsflag = 3;
inline bool StockQueryOrderResp_OrderDetail::has_bsflag() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void StockQueryOrderResp_OrderDetail::set_has_bsflag() {
  _has_bits_[0] |= 0x00000100u;
}
inline void StockQueryOrderResp_OrderDetail::clear_has_bsflag() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void StockQueryOrderResp_OrderDetail::clear_bsflag() {
  bsflag_ = 0u;
  clear_has_bsflag();
}
inline ::google::protobuf::uint32 StockQueryOrderResp_OrderDetail::bsflag() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrderResp.OrderDetail.bsflag)
  return bsflag_;
}
inline void StockQueryOrderResp_OrderDetail::set_bsflag(::google::protobuf::uint32 value) {
  set_has_bsflag();
  bsflag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrderResp.OrderDetail.bsflag)
}

// optional string orderid = 4;
inline bool StockQueryOrderResp_OrderDetail::has_orderid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockQueryOrderResp_OrderDetail::set_has_orderid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockQueryOrderResp_OrderDetail::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockQueryOrderResp_OrderDetail::clear_orderid() {
  orderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_orderid();
}
inline const ::std::string& StockQueryOrderResp_OrderDetail::orderid() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrderResp.OrderDetail.orderid)
  return orderid_.GetNoArena();
}
inline void StockQueryOrderResp_OrderDetail::set_orderid(const ::std::string& value) {
  set_has_orderid();
  orderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrderResp.OrderDetail.orderid)
}
#if LANG_CXX11
inline void StockQueryOrderResp_OrderDetail::set_orderid(::std::string&& value) {
  set_has_orderid();
  orderid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockQueryOrderResp.OrderDetail.orderid)
}
#endif
inline void StockQueryOrderResp_OrderDetail::set_orderid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_orderid();
  orderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockQueryOrderResp.OrderDetail.orderid)
}
inline void StockQueryOrderResp_OrderDetail::set_orderid(const char* value, size_t size) {
  set_has_orderid();
  orderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockQueryOrderResp.OrderDetail.orderid)
}
inline ::std::string* StockQueryOrderResp_OrderDetail::mutable_orderid() {
  set_has_orderid();
  // @@protoc_insertion_point(field_mutable:autotrade.StockQueryOrderResp.OrderDetail.orderid)
  return orderid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockQueryOrderResp_OrderDetail::release_orderid() {
  // @@protoc_insertion_point(field_release:autotrade.StockQueryOrderResp.OrderDetail.orderid)
  if (!has_orderid()) {
    return NULL;
  }
  clear_has_orderid();
  return orderid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQueryOrderResp_OrderDetail::set_allocated_orderid(::std::string* orderid) {
  if (orderid != NULL) {
    set_has_orderid();
  } else {
    clear_has_orderid();
  }
  orderid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderid);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockQueryOrderResp.OrderDetail.orderid)
}

// optional uint64 sumbit_time = 5;
inline bool StockQueryOrderResp_OrderDetail::has_sumbit_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StockQueryOrderResp_OrderDetail::set_has_sumbit_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StockQueryOrderResp_OrderDetail::clear_has_sumbit_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StockQueryOrderResp_OrderDetail::clear_sumbit_time() {
  sumbit_time_ = GOOGLE_ULONGLONG(0);
  clear_has_sumbit_time();
}
inline ::google::protobuf::uint64 StockQueryOrderResp_OrderDetail::sumbit_time() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrderResp.OrderDetail.sumbit_time)
  return sumbit_time_;
}
inline void StockQueryOrderResp_OrderDetail::set_sumbit_time(::google::protobuf::uint64 value) {
  set_has_sumbit_time();
  sumbit_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrderResp.OrderDetail.sumbit_time)
}

// optional uint64 order_time = 6;
inline bool StockQueryOrderResp_OrderDetail::has_order_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void StockQueryOrderResp_OrderDetail::set_has_order_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void StockQueryOrderResp_OrderDetail::clear_has_order_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void StockQueryOrderResp_OrderDetail::clear_order_time() {
  order_time_ = GOOGLE_ULONGLONG(0);
  clear_has_order_time();
}
inline ::google::protobuf::uint64 StockQueryOrderResp_OrderDetail::order_time() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrderResp.OrderDetail.order_time)
  return order_time_;
}
inline void StockQueryOrderResp_OrderDetail::set_order_time(::google::protobuf::uint64 value) {
  set_has_order_time();
  order_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrderResp.OrderDetail.order_time)
}

// required uint32 market = 7;
inline bool StockQueryOrderResp_OrderDetail::has_market() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void StockQueryOrderResp_OrderDetail::set_has_market() {
  _has_bits_[0] |= 0x00000200u;
}
inline void StockQueryOrderResp_OrderDetail::clear_has_market() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void StockQueryOrderResp_OrderDetail::clear_market() {
  market_ = 0u;
  clear_has_market();
}
inline ::google::protobuf::uint32 StockQueryOrderResp_OrderDetail::market() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrderResp.OrderDetail.market)
  return market_;
}
inline void StockQueryOrderResp_OrderDetail::set_market(::google::protobuf::uint32 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrderResp.OrderDetail.market)
}

// required string code = 8;
inline bool StockQueryOrderResp_OrderDetail::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StockQueryOrderResp_OrderDetail::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StockQueryOrderResp_OrderDetail::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StockQueryOrderResp_OrderDetail::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& StockQueryOrderResp_OrderDetail::code() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrderResp.OrderDetail.code)
  return code_.GetNoArena();
}
inline void StockQueryOrderResp_OrderDetail::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrderResp.OrderDetail.code)
}
#if LANG_CXX11
inline void StockQueryOrderResp_OrderDetail::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockQueryOrderResp.OrderDetail.code)
}
#endif
inline void StockQueryOrderResp_OrderDetail::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockQueryOrderResp.OrderDetail.code)
}
inline void StockQueryOrderResp_OrderDetail::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockQueryOrderResp.OrderDetail.code)
}
inline ::std::string* StockQueryOrderResp_OrderDetail::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:autotrade.StockQueryOrderResp.OrderDetail.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockQueryOrderResp_OrderDetail::release_code() {
  // @@protoc_insertion_point(field_release:autotrade.StockQueryOrderResp.OrderDetail.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQueryOrderResp_OrderDetail::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockQueryOrderResp.OrderDetail.code)
}

// required int64 order_price = 9;
inline bool StockQueryOrderResp_OrderDetail::has_order_price() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void StockQueryOrderResp_OrderDetail::set_has_order_price() {
  _has_bits_[0] |= 0x00000800u;
}
inline void StockQueryOrderResp_OrderDetail::clear_has_order_price() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void StockQueryOrderResp_OrderDetail::clear_order_price() {
  order_price_ = GOOGLE_LONGLONG(0);
  clear_has_order_price();
}
inline ::google::protobuf::int64 StockQueryOrderResp_OrderDetail::order_price() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrderResp.OrderDetail.order_price)
  return order_price_;
}
inline void StockQueryOrderResp_OrderDetail::set_order_price(::google::protobuf::int64 value) {
  set_has_order_price();
  order_price_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrderResp.OrderDetail.order_price)
}

// required uint32 order_qty = 10;
inline bool StockQueryOrderResp_OrderDetail::has_order_qty() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void StockQueryOrderResp_OrderDetail::set_has_order_qty() {
  _has_bits_[0] |= 0x00002000u;
}
inline void StockQueryOrderResp_OrderDetail::clear_has_order_qty() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void StockQueryOrderResp_OrderDetail::clear_order_qty() {
  order_qty_ = 0u;
  clear_has_order_qty();
}
inline ::google::protobuf::uint32 StockQueryOrderResp_OrderDetail::order_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrderResp.OrderDetail.order_qty)
  return order_qty_;
}
inline void StockQueryOrderResp_OrderDetail::set_order_qty(::google::protobuf::uint32 value) {
  set_has_order_qty();
  order_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrderResp.OrderDetail.order_qty)
}

// optional double order_frz_amt = 11;
inline bool StockQueryOrderResp_OrderDetail::has_order_frz_amt() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void StockQueryOrderResp_OrderDetail::set_has_order_frz_amt() {
  _has_bits_[0] |= 0x00001000u;
}
inline void StockQueryOrderResp_OrderDetail::clear_has_order_frz_amt() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void StockQueryOrderResp_OrderDetail::clear_order_frz_amt() {
  order_frz_amt_ = 0;
  clear_has_order_frz_amt();
}
inline double StockQueryOrderResp_OrderDetail::order_frz_amt() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrderResp.OrderDetail.order_frz_amt)
  return order_frz_amt_;
}
inline void StockQueryOrderResp_OrderDetail::set_order_frz_amt(double value) {
  set_has_order_frz_amt();
  order_frz_amt_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrderResp.OrderDetail.order_frz_amt)
}

// optional double match_amt = 12;
inline bool StockQueryOrderResp_OrderDetail::has_match_amt() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void StockQueryOrderResp_OrderDetail::set_has_match_amt() {
  _has_bits_[0] |= 0x00008000u;
}
inline void StockQueryOrderResp_OrderDetail::clear_has_match_amt() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void StockQueryOrderResp_OrderDetail::clear_match_amt() {
  match_amt_ = 0;
  clear_has_match_amt();
}
inline double StockQueryOrderResp_OrderDetail::match_amt() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrderResp.OrderDetail.match_amt)
  return match_amt_;
}
inline void StockQueryOrderResp_OrderDetail::set_match_amt(double value) {
  set_has_match_amt();
  match_amt_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrderResp.OrderDetail.match_amt)
}

// required uint32 match_qty = 13;
inline bool StockQueryOrderResp_OrderDetail::has_match_qty() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void StockQueryOrderResp_OrderDetail::set_has_match_qty() {
  _has_bits_[0] |= 0x00004000u;
}
inline void StockQueryOrderResp_OrderDetail::clear_has_match_qty() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void StockQueryOrderResp_OrderDetail::clear_match_qty() {
  match_qty_ = 0u;
  clear_has_match_qty();
}
inline ::google::protobuf::uint32 StockQueryOrderResp_OrderDetail::match_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrderResp.OrderDetail.match_qty)
  return match_qty_;
}
inline void StockQueryOrderResp_OrderDetail::set_match_qty(::google::protobuf::uint32 value) {
  set_has_match_qty();
  match_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrderResp.OrderDetail.match_qty)
}

// required uint32 cancel_qty = 14;
inline bool StockQueryOrderResp_OrderDetail::has_cancel_qty() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void StockQueryOrderResp_OrderDetail::set_has_cancel_qty() {
  _has_bits_[0] |= 0x00040000u;
}
inline void StockQueryOrderResp_OrderDetail::clear_has_cancel_qty() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void StockQueryOrderResp_OrderDetail::clear_cancel_qty() {
  cancel_qty_ = 0u;
  clear_has_cancel_qty();
}
inline ::google::protobuf::uint32 StockQueryOrderResp_OrderDetail::cancel_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrderResp.OrderDetail.cancel_qty)
  return cancel_qty_;
}
inline void StockQueryOrderResp_OrderDetail::set_cancel_qty(::google::protobuf::uint32 value) {
  set_has_cancel_qty();
  cancel_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrderResp.OrderDetail.cancel_qty)
}

// required int64 order_status = 15;
inline bool StockQueryOrderResp_OrderDetail::has_order_status() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void StockQueryOrderResp_OrderDetail::set_has_order_status() {
  _has_bits_[0] |= 0x00010000u;
}
inline void StockQueryOrderResp_OrderDetail::clear_has_order_status() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void StockQueryOrderResp_OrderDetail::clear_order_status() {
  order_status_ = GOOGLE_LONGLONG(0);
  clear_has_order_status();
}
inline ::google::protobuf::int64 StockQueryOrderResp_OrderDetail::order_status() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrderResp.OrderDetail.order_status)
  return order_status_;
}
inline void StockQueryOrderResp_OrderDetail::set_order_status(::google::protobuf::int64 value) {
  set_has_order_status();
  order_status_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrderResp.OrderDetail.order_status)
}

// optional string code_name = 16;
inline bool StockQueryOrderResp_OrderDetail::has_code_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StockQueryOrderResp_OrderDetail::set_has_code_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StockQueryOrderResp_OrderDetail::clear_has_code_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StockQueryOrderResp_OrderDetail::clear_code_name() {
  code_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code_name();
}
inline const ::std::string& StockQueryOrderResp_OrderDetail::code_name() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrderResp.OrderDetail.code_name)
  return code_name_.GetNoArena();
}
inline void StockQueryOrderResp_OrderDetail::set_code_name(const ::std::string& value) {
  set_has_code_name();
  code_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrderResp.OrderDetail.code_name)
}
#if LANG_CXX11
inline void StockQueryOrderResp_OrderDetail::set_code_name(::std::string&& value) {
  set_has_code_name();
  code_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockQueryOrderResp.OrderDetail.code_name)
}
#endif
inline void StockQueryOrderResp_OrderDetail::set_code_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code_name();
  code_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockQueryOrderResp.OrderDetail.code_name)
}
inline void StockQueryOrderResp_OrderDetail::set_code_name(const char* value, size_t size) {
  set_has_code_name();
  code_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockQueryOrderResp.OrderDetail.code_name)
}
inline ::std::string* StockQueryOrderResp_OrderDetail::mutable_code_name() {
  set_has_code_name();
  // @@protoc_insertion_point(field_mutable:autotrade.StockQueryOrderResp.OrderDetail.code_name)
  return code_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockQueryOrderResp_OrderDetail::release_code_name() {
  // @@protoc_insertion_point(field_release:autotrade.StockQueryOrderResp.OrderDetail.code_name)
  if (!has_code_name()) {
    return NULL;
  }
  clear_has_code_name();
  return code_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQueryOrderResp_OrderDetail::set_allocated_code_name(::std::string* code_name) {
  if (code_name != NULL) {
    set_has_code_name();
  } else {
    clear_has_code_name();
  }
  code_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code_name);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockQueryOrderResp.OrderDetail.code_name)
}

// optional double clear_amt = 17;
inline bool StockQueryOrderResp_OrderDetail::has_clear_amt() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void StockQueryOrderResp_OrderDetail::set_has_clear_amt() {
  _has_bits_[0] |= 0x00020000u;
}
inline void StockQueryOrderResp_OrderDetail::clear_has_clear_amt() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void StockQueryOrderResp_OrderDetail::clear_clear_amt() {
  clear_amt_ = 0;
  clear_has_clear_amt();
}
inline double StockQueryOrderResp_OrderDetail::clear_amt() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrderResp.OrderDetail.clear_amt)
  return clear_amt_;
}
inline void StockQueryOrderResp_OrderDetail::set_clear_amt(double value) {
  set_has_clear_amt();
  clear_amt_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrderResp.OrderDetail.clear_amt)
}

// optional string order_group = 18;
inline bool StockQueryOrderResp_OrderDetail::has_order_group() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StockQueryOrderResp_OrderDetail::set_has_order_group() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StockQueryOrderResp_OrderDetail::clear_has_order_group() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StockQueryOrderResp_OrderDetail::clear_order_group() {
  order_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_group();
}
inline const ::std::string& StockQueryOrderResp_OrderDetail::order_group() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrderResp.OrderDetail.order_group)
  return order_group_.GetNoArena();
}
inline void StockQueryOrderResp_OrderDetail::set_order_group(const ::std::string& value) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrderResp.OrderDetail.order_group)
}
#if LANG_CXX11
inline void StockQueryOrderResp_OrderDetail::set_order_group(::std::string&& value) {
  set_has_order_group();
  order_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockQueryOrderResp.OrderDetail.order_group)
}
#endif
inline void StockQueryOrderResp_OrderDetail::set_order_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockQueryOrderResp.OrderDetail.order_group)
}
inline void StockQueryOrderResp_OrderDetail::set_order_group(const char* value, size_t size) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockQueryOrderResp.OrderDetail.order_group)
}
inline ::std::string* StockQueryOrderResp_OrderDetail::mutable_order_group() {
  set_has_order_group();
  // @@protoc_insertion_point(field_mutable:autotrade.StockQueryOrderResp.OrderDetail.order_group)
  return order_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockQueryOrderResp_OrderDetail::release_order_group() {
  // @@protoc_insertion_point(field_release:autotrade.StockQueryOrderResp.OrderDetail.order_group)
  if (!has_order_group()) {
    return NULL;
  }
  clear_has_order_group();
  return order_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQueryOrderResp_OrderDetail::set_allocated_order_group(::std::string* order_group) {
  if (order_group != NULL) {
    set_has_order_group();
  } else {
    clear_has_order_group();
  }
  order_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_group);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockQueryOrderResp.OrderDetail.order_group)
}

// optional string info = 19;
inline bool StockQueryOrderResp_OrderDetail::has_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StockQueryOrderResp_OrderDetail::set_has_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StockQueryOrderResp_OrderDetail::clear_has_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StockQueryOrderResp_OrderDetail::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_info();
}
inline const ::std::string& StockQueryOrderResp_OrderDetail::info() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrderResp.OrderDetail.info)
  return info_.GetNoArena();
}
inline void StockQueryOrderResp_OrderDetail::set_info(const ::std::string& value) {
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrderResp.OrderDetail.info)
}
#if LANG_CXX11
inline void StockQueryOrderResp_OrderDetail::set_info(::std::string&& value) {
  set_has_info();
  info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockQueryOrderResp.OrderDetail.info)
}
#endif
inline void StockQueryOrderResp_OrderDetail::set_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockQueryOrderResp.OrderDetail.info)
}
inline void StockQueryOrderResp_OrderDetail::set_info(const char* value, size_t size) {
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockQueryOrderResp.OrderDetail.info)
}
inline ::std::string* StockQueryOrderResp_OrderDetail::mutable_info() {
  set_has_info();
  // @@protoc_insertion_point(field_mutable:autotrade.StockQueryOrderResp.OrderDetail.info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockQueryOrderResp_OrderDetail::release_info() {
  // @@protoc_insertion_point(field_release:autotrade.StockQueryOrderResp.OrderDetail.info)
  if (!has_info()) {
    return NULL;
  }
  clear_has_info();
  return info_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQueryOrderResp_OrderDetail::set_allocated_info(::std::string* info) {
  if (info != NULL) {
    set_has_info();
  } else {
    clear_has_info();
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockQueryOrderResp.OrderDetail.info)
}

// -------------------------------------------------------------------

// StockQueryOrderResp

// optional int32 funcid = 1 [default = 11102002];
inline bool StockQueryOrderResp::has_funcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StockQueryOrderResp::set_has_funcid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StockQueryOrderResp::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StockQueryOrderResp::clear_funcid() {
  funcid_ = 11102002;
  clear_has_funcid();
}
inline ::google::protobuf::int32 StockQueryOrderResp::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrderResp.funcid)
  return funcid_;
}
inline void StockQueryOrderResp::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrderResp.funcid)
}

// repeated .autotrade.StockQueryOrderResp.OrderDetail detail_list = 2;
inline int StockQueryOrderResp::detail_list_size() const {
  return detail_list_.size();
}
inline void StockQueryOrderResp::clear_detail_list() {
  detail_list_.Clear();
}
inline ::autotrade::StockQueryOrderResp_OrderDetail* StockQueryOrderResp::mutable_detail_list(int index) {
  // @@protoc_insertion_point(field_mutable:autotrade.StockQueryOrderResp.detail_list)
  return detail_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::autotrade::StockQueryOrderResp_OrderDetail >*
StockQueryOrderResp::mutable_detail_list() {
  // @@protoc_insertion_point(field_mutable_list:autotrade.StockQueryOrderResp.detail_list)
  return &detail_list_;
}
inline const ::autotrade::StockQueryOrderResp_OrderDetail& StockQueryOrderResp::detail_list(int index) const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrderResp.detail_list)
  return detail_list_.Get(index);
}
inline ::autotrade::StockQueryOrderResp_OrderDetail* StockQueryOrderResp::add_detail_list() {
  // @@protoc_insertion_point(field_add:autotrade.StockQueryOrderResp.detail_list)
  return detail_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::autotrade::StockQueryOrderResp_OrderDetail >&
StockQueryOrderResp::detail_list() const {
  // @@protoc_insertion_point(field_list:autotrade.StockQueryOrderResp.detail_list)
  return detail_list_;
}

// optional string last_pos = 3;
inline bool StockQueryOrderResp::has_last_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockQueryOrderResp::set_has_last_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockQueryOrderResp::clear_has_last_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockQueryOrderResp::clear_last_pos() {
  last_pos_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_last_pos();
}
inline const ::std::string& StockQueryOrderResp::last_pos() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrderResp.last_pos)
  return last_pos_.GetNoArena();
}
inline void StockQueryOrderResp::set_last_pos(const ::std::string& value) {
  set_has_last_pos();
  last_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrderResp.last_pos)
}
#if LANG_CXX11
inline void StockQueryOrderResp::set_last_pos(::std::string&& value) {
  set_has_last_pos();
  last_pos_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockQueryOrderResp.last_pos)
}
#endif
inline void StockQueryOrderResp::set_last_pos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_last_pos();
  last_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockQueryOrderResp.last_pos)
}
inline void StockQueryOrderResp::set_last_pos(const char* value, size_t size) {
  set_has_last_pos();
  last_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockQueryOrderResp.last_pos)
}
inline ::std::string* StockQueryOrderResp::mutable_last_pos() {
  set_has_last_pos();
  // @@protoc_insertion_point(field_mutable:autotrade.StockQueryOrderResp.last_pos)
  return last_pos_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockQueryOrderResp::release_last_pos() {
  // @@protoc_insertion_point(field_release:autotrade.StockQueryOrderResp.last_pos)
  if (!has_last_pos()) {
    return NULL;
  }
  clear_has_last_pos();
  return last_pos_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQueryOrderResp::set_allocated_last_pos(::std::string* last_pos) {
  if (last_pos != NULL) {
    set_has_last_pos();
  } else {
    clear_has_last_pos();
  }
  last_pos_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_pos);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockQueryOrderResp.last_pos)
}

// optional string request_id = 4;
inline bool StockQueryOrderResp::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockQueryOrderResp::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockQueryOrderResp::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockQueryOrderResp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& StockQueryOrderResp::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrderResp.request_id)
  return request_id_.GetNoArena();
}
inline void StockQueryOrderResp::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrderResp.request_id)
}
#if LANG_CXX11
inline void StockQueryOrderResp::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockQueryOrderResp.request_id)
}
#endif
inline void StockQueryOrderResp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockQueryOrderResp.request_id)
}
inline void StockQueryOrderResp::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockQueryOrderResp.request_id)
}
inline ::std::string* StockQueryOrderResp::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockQueryOrderResp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockQueryOrderResp::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockQueryOrderResp.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQueryOrderResp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockQueryOrderResp.request_id)
}

// -------------------------------------------------------------------

// StockQueryOrdersReqt

// optional int32 funcid = 1 [default = 11002003];
inline bool StockQueryOrdersReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StockQueryOrdersReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StockQueryOrdersReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StockQueryOrdersReqt::clear_funcid() {
  funcid_ = 11002003;
  clear_has_funcid();
}
inline ::google::protobuf::int32 StockQueryOrdersReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrdersReqt.funcid)
  return funcid_;
}
inline void StockQueryOrdersReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrdersReqt.funcid)
}

// optional string order_group = 2 [default = ""];
inline bool StockQueryOrdersReqt::has_order_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockQueryOrdersReqt::set_has_order_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockQueryOrdersReqt::clear_has_order_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockQueryOrdersReqt::clear_order_group() {
  order_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_group();
}
inline const ::std::string& StockQueryOrdersReqt::order_group() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrdersReqt.order_group)
  return order_group_.GetNoArena();
}
inline void StockQueryOrdersReqt::set_order_group(const ::std::string& value) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrdersReqt.order_group)
}
#if LANG_CXX11
inline void StockQueryOrdersReqt::set_order_group(::std::string&& value) {
  set_has_order_group();
  order_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockQueryOrdersReqt.order_group)
}
#endif
inline void StockQueryOrdersReqt::set_order_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockQueryOrdersReqt.order_group)
}
inline void StockQueryOrdersReqt::set_order_group(const char* value, size_t size) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockQueryOrdersReqt.order_group)
}
inline ::std::string* StockQueryOrdersReqt::mutable_order_group() {
  set_has_order_group();
  // @@protoc_insertion_point(field_mutable:autotrade.StockQueryOrdersReqt.order_group)
  return order_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockQueryOrdersReqt::release_order_group() {
  // @@protoc_insertion_point(field_release:autotrade.StockQueryOrdersReqt.order_group)
  if (!has_order_group()) {
    return NULL;
  }
  clear_has_order_group();
  return order_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQueryOrdersReqt::set_allocated_order_group(::std::string* order_group) {
  if (order_group != NULL) {
    set_has_order_group();
  } else {
    clear_has_order_group();
  }
  order_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_group);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockQueryOrdersReqt.order_group)
}

// optional string request_id = 3;
inline bool StockQueryOrdersReqt::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockQueryOrdersReqt::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockQueryOrdersReqt::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockQueryOrdersReqt::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& StockQueryOrdersReqt::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrdersReqt.request_id)
  return request_id_.GetNoArena();
}
inline void StockQueryOrdersReqt::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrdersReqt.request_id)
}
#if LANG_CXX11
inline void StockQueryOrdersReqt::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockQueryOrdersReqt.request_id)
}
#endif
inline void StockQueryOrdersReqt::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockQueryOrdersReqt.request_id)
}
inline void StockQueryOrdersReqt::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockQueryOrdersReqt.request_id)
}
inline ::std::string* StockQueryOrdersReqt::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockQueryOrdersReqt.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockQueryOrdersReqt::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockQueryOrdersReqt.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQueryOrdersReqt::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockQueryOrdersReqt.request_id)
}

// optional int64 request_time = 4 [default = 0];
inline bool StockQueryOrdersReqt::has_request_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StockQueryOrdersReqt::set_has_request_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StockQueryOrdersReqt::clear_has_request_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StockQueryOrdersReqt::clear_request_time() {
  request_time_ = GOOGLE_LONGLONG(0);
  clear_has_request_time();
}
inline ::google::protobuf::int64 StockQueryOrdersReqt::request_time() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrdersReqt.request_time)
  return request_time_;
}
inline void StockQueryOrdersReqt::set_request_time(::google::protobuf::int64 value) {
  set_has_request_time();
  request_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrdersReqt.request_time)
}

// optional int64 active_interval = 5 [default = 1000];
inline bool StockQueryOrdersReqt::has_active_interval() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StockQueryOrdersReqt::set_has_active_interval() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StockQueryOrdersReqt::clear_has_active_interval() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StockQueryOrdersReqt::clear_active_interval() {
  active_interval_ = GOOGLE_LONGLONG(1000);
  clear_has_active_interval();
}
inline ::google::protobuf::int64 StockQueryOrdersReqt::active_interval() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrdersReqt.active_interval)
  return active_interval_;
}
inline void StockQueryOrdersReqt::set_active_interval(::google::protobuf::int64 value) {
  set_has_active_interval();
  active_interval_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrdersReqt.active_interval)
}

// optional string fund_id = 6;
inline bool StockQueryOrdersReqt::has_fund_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StockQueryOrdersReqt::set_has_fund_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StockQueryOrdersReqt::clear_has_fund_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StockQueryOrdersReqt::clear_fund_id() {
  fund_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fund_id();
}
inline const ::std::string& StockQueryOrdersReqt::fund_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrdersReqt.fund_id)
  return fund_id_.GetNoArena();
}
inline void StockQueryOrdersReqt::set_fund_id(const ::std::string& value) {
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrdersReqt.fund_id)
}
#if LANG_CXX11
inline void StockQueryOrdersReqt::set_fund_id(::std::string&& value) {
  set_has_fund_id();
  fund_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockQueryOrdersReqt.fund_id)
}
#endif
inline void StockQueryOrdersReqt::set_fund_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockQueryOrdersReqt.fund_id)
}
inline void StockQueryOrdersReqt::set_fund_id(const char* value, size_t size) {
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockQueryOrdersReqt.fund_id)
}
inline ::std::string* StockQueryOrdersReqt::mutable_fund_id() {
  set_has_fund_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockQueryOrdersReqt.fund_id)
  return fund_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockQueryOrdersReqt::release_fund_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockQueryOrdersReqt.fund_id)
  if (!has_fund_id()) {
    return NULL;
  }
  clear_has_fund_id();
  return fund_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQueryOrdersReqt::set_allocated_fund_id(::std::string* fund_id) {
  if (fund_id != NULL) {
    set_has_fund_id();
  } else {
    clear_has_fund_id();
  }
  fund_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fund_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockQueryOrdersReqt.fund_id)
}

// optional string session_id = 7;
inline bool StockQueryOrdersReqt::has_session_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StockQueryOrdersReqt::set_has_session_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StockQueryOrdersReqt::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StockQueryOrdersReqt::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_session_id();
}
inline const ::std::string& StockQueryOrdersReqt::session_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrdersReqt.session_id)
  return session_id_.GetNoArena();
}
inline void StockQueryOrdersReqt::set_session_id(const ::std::string& value) {
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrdersReqt.session_id)
}
#if LANG_CXX11
inline void StockQueryOrdersReqt::set_session_id(::std::string&& value) {
  set_has_session_id();
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockQueryOrdersReqt.session_id)
}
#endif
inline void StockQueryOrdersReqt::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockQueryOrdersReqt.session_id)
}
inline void StockQueryOrdersReqt::set_session_id(const char* value, size_t size) {
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockQueryOrdersReqt.session_id)
}
inline ::std::string* StockQueryOrdersReqt::mutable_session_id() {
  set_has_session_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockQueryOrdersReqt.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockQueryOrdersReqt::release_session_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockQueryOrdersReqt.session_id)
  if (!has_session_id()) {
    return NULL;
  }
  clear_has_session_id();
  return session_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQueryOrdersReqt::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    set_has_session_id();
  } else {
    clear_has_session_id();
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockQueryOrdersReqt.session_id)
}

// -------------------------------------------------------------------

// StockQueryOrdersResp_OrderDetail

// optional uint64 match_time = 1;
inline bool StockQueryOrdersResp_OrderDetail::has_match_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StockQueryOrdersResp_OrderDetail::set_has_match_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StockQueryOrdersResp_OrderDetail::clear_has_match_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StockQueryOrdersResp_OrderDetail::clear_match_time() {
  match_time_ = GOOGLE_ULONGLONG(0);
  clear_has_match_time();
}
inline ::google::protobuf::uint64 StockQueryOrdersResp_OrderDetail::match_time() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrdersResp.OrderDetail.match_time)
  return match_time_;
}
inline void StockQueryOrdersResp_OrderDetail::set_match_time(::google::protobuf::uint64 value) {
  set_has_match_time();
  match_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrdersResp.OrderDetail.match_time)
}

// required string orderno = 2;
inline bool StockQueryOrdersResp_OrderDetail::has_orderno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockQueryOrdersResp_OrderDetail::set_has_orderno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockQueryOrdersResp_OrderDetail::clear_has_orderno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockQueryOrdersResp_OrderDetail::clear_orderno() {
  orderno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_orderno();
}
inline const ::std::string& StockQueryOrdersResp_OrderDetail::orderno() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrdersResp.OrderDetail.orderno)
  return orderno_.GetNoArena();
}
inline void StockQueryOrdersResp_OrderDetail::set_orderno(const ::std::string& value) {
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrdersResp.OrderDetail.orderno)
}
#if LANG_CXX11
inline void StockQueryOrdersResp_OrderDetail::set_orderno(::std::string&& value) {
  set_has_orderno();
  orderno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockQueryOrdersResp.OrderDetail.orderno)
}
#endif
inline void StockQueryOrdersResp_OrderDetail::set_orderno(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockQueryOrdersResp.OrderDetail.orderno)
}
inline void StockQueryOrdersResp_OrderDetail::set_orderno(const char* value, size_t size) {
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockQueryOrdersResp.OrderDetail.orderno)
}
inline ::std::string* StockQueryOrdersResp_OrderDetail::mutable_orderno() {
  set_has_orderno();
  // @@protoc_insertion_point(field_mutable:autotrade.StockQueryOrdersResp.OrderDetail.orderno)
  return orderno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockQueryOrdersResp_OrderDetail::release_orderno() {
  // @@protoc_insertion_point(field_release:autotrade.StockQueryOrdersResp.OrderDetail.orderno)
  if (!has_orderno()) {
    return NULL;
  }
  clear_has_orderno();
  return orderno_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQueryOrdersResp_OrderDetail::set_allocated_orderno(::std::string* orderno) {
  if (orderno != NULL) {
    set_has_orderno();
  } else {
    clear_has_orderno();
  }
  orderno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderno);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockQueryOrdersResp.OrderDetail.orderno)
}

// required string order_group = 3;
inline bool StockQueryOrdersResp_OrderDetail::has_order_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockQueryOrdersResp_OrderDetail::set_has_order_group() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockQueryOrdersResp_OrderDetail::clear_has_order_group() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockQueryOrdersResp_OrderDetail::clear_order_group() {
  order_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_group();
}
inline const ::std::string& StockQueryOrdersResp_OrderDetail::order_group() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrdersResp.OrderDetail.order_group)
  return order_group_.GetNoArena();
}
inline void StockQueryOrdersResp_OrderDetail::set_order_group(const ::std::string& value) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrdersResp.OrderDetail.order_group)
}
#if LANG_CXX11
inline void StockQueryOrdersResp_OrderDetail::set_order_group(::std::string&& value) {
  set_has_order_group();
  order_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockQueryOrdersResp.OrderDetail.order_group)
}
#endif
inline void StockQueryOrdersResp_OrderDetail::set_order_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockQueryOrdersResp.OrderDetail.order_group)
}
inline void StockQueryOrdersResp_OrderDetail::set_order_group(const char* value, size_t size) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockQueryOrdersResp.OrderDetail.order_group)
}
inline ::std::string* StockQueryOrdersResp_OrderDetail::mutable_order_group() {
  set_has_order_group();
  // @@protoc_insertion_point(field_mutable:autotrade.StockQueryOrdersResp.OrderDetail.order_group)
  return order_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockQueryOrdersResp_OrderDetail::release_order_group() {
  // @@protoc_insertion_point(field_release:autotrade.StockQueryOrdersResp.OrderDetail.order_group)
  if (!has_order_group()) {
    return NULL;
  }
  clear_has_order_group();
  return order_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQueryOrdersResp_OrderDetail::set_allocated_order_group(::std::string* order_group) {
  if (order_group != NULL) {
    set_has_order_group();
  } else {
    clear_has_order_group();
  }
  order_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_group);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockQueryOrdersResp.OrderDetail.order_group)
}

// required uint32 bsflag = 4;
inline bool StockQueryOrdersResp_OrderDetail::has_bsflag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StockQueryOrdersResp_OrderDetail::set_has_bsflag() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StockQueryOrdersResp_OrderDetail::clear_has_bsflag() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StockQueryOrdersResp_OrderDetail::clear_bsflag() {
  bsflag_ = 0u;
  clear_has_bsflag();
}
inline ::google::protobuf::uint32 StockQueryOrdersResp_OrderDetail::bsflag() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrdersResp.OrderDetail.bsflag)
  return bsflag_;
}
inline void StockQueryOrdersResp_OrderDetail::set_bsflag(::google::protobuf::uint32 value) {
  set_has_bsflag();
  bsflag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrdersResp.OrderDetail.bsflag)
}

// optional uint64 submit_time = 5;
inline bool StockQueryOrdersResp_OrderDetail::has_submit_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StockQueryOrdersResp_OrderDetail::set_has_submit_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StockQueryOrdersResp_OrderDetail::clear_has_submit_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StockQueryOrdersResp_OrderDetail::clear_submit_time() {
  submit_time_ = GOOGLE_ULONGLONG(0);
  clear_has_submit_time();
}
inline ::google::protobuf::uint64 StockQueryOrdersResp_OrderDetail::submit_time() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrdersResp.OrderDetail.submit_time)
  return submit_time_;
}
inline void StockQueryOrdersResp_OrderDetail::set_submit_time(::google::protobuf::uint64 value) {
  set_has_submit_time();
  submit_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrdersResp.OrderDetail.submit_time)
}

// optional uint64 order_time = 6;
inline bool StockQueryOrdersResp_OrderDetail::has_order_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void StockQueryOrdersResp_OrderDetail::set_has_order_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void StockQueryOrdersResp_OrderDetail::clear_has_order_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void StockQueryOrdersResp_OrderDetail::clear_order_time() {
  order_time_ = GOOGLE_ULONGLONG(0);
  clear_has_order_time();
}
inline ::google::protobuf::uint64 StockQueryOrdersResp_OrderDetail::order_time() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrdersResp.OrderDetail.order_time)
  return order_time_;
}
inline void StockQueryOrdersResp_OrderDetail::set_order_time(::google::protobuf::uint64 value) {
  set_has_order_time();
  order_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrdersResp.OrderDetail.order_time)
}

// required uint32 market = 7;
inline bool StockQueryOrdersResp_OrderDetail::has_market() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void StockQueryOrdersResp_OrderDetail::set_has_market() {
  _has_bits_[0] |= 0x00000100u;
}
inline void StockQueryOrdersResp_OrderDetail::clear_has_market() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void StockQueryOrdersResp_OrderDetail::clear_market() {
  market_ = 0u;
  clear_has_market();
}
inline ::google::protobuf::uint32 StockQueryOrdersResp_OrderDetail::market() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrdersResp.OrderDetail.market)
  return market_;
}
inline void StockQueryOrdersResp_OrderDetail::set_market(::google::protobuf::uint32 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrdersResp.OrderDetail.market)
}

// required string code = 8;
inline bool StockQueryOrdersResp_OrderDetail::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StockQueryOrdersResp_OrderDetail::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StockQueryOrdersResp_OrderDetail::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StockQueryOrdersResp_OrderDetail::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& StockQueryOrdersResp_OrderDetail::code() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrdersResp.OrderDetail.code)
  return code_.GetNoArena();
}
inline void StockQueryOrdersResp_OrderDetail::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrdersResp.OrderDetail.code)
}
#if LANG_CXX11
inline void StockQueryOrdersResp_OrderDetail::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockQueryOrdersResp.OrderDetail.code)
}
#endif
inline void StockQueryOrdersResp_OrderDetail::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockQueryOrdersResp.OrderDetail.code)
}
inline void StockQueryOrdersResp_OrderDetail::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockQueryOrdersResp.OrderDetail.code)
}
inline ::std::string* StockQueryOrdersResp_OrderDetail::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:autotrade.StockQueryOrdersResp.OrderDetail.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockQueryOrdersResp_OrderDetail::release_code() {
  // @@protoc_insertion_point(field_release:autotrade.StockQueryOrdersResp.OrderDetail.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQueryOrdersResp_OrderDetail::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockQueryOrdersResp.OrderDetail.code)
}

// required int64 order_price = 9;
inline bool StockQueryOrdersResp_OrderDetail::has_order_price() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void StockQueryOrdersResp_OrderDetail::set_has_order_price() {
  _has_bits_[0] |= 0x00000400u;
}
inline void StockQueryOrdersResp_OrderDetail::clear_has_order_price() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void StockQueryOrdersResp_OrderDetail::clear_order_price() {
  order_price_ = GOOGLE_LONGLONG(0);
  clear_has_order_price();
}
inline ::google::protobuf::int64 StockQueryOrdersResp_OrderDetail::order_price() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrdersResp.OrderDetail.order_price)
  return order_price_;
}
inline void StockQueryOrdersResp_OrderDetail::set_order_price(::google::protobuf::int64 value) {
  set_has_order_price();
  order_price_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrdersResp.OrderDetail.order_price)
}

// required uint32 order_qty = 10;
inline bool StockQueryOrdersResp_OrderDetail::has_order_qty() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void StockQueryOrdersResp_OrderDetail::set_has_order_qty() {
  _has_bits_[0] |= 0x00001000u;
}
inline void StockQueryOrdersResp_OrderDetail::clear_has_order_qty() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void StockQueryOrdersResp_OrderDetail::clear_order_qty() {
  order_qty_ = 0u;
  clear_has_order_qty();
}
inline ::google::protobuf::uint32 StockQueryOrdersResp_OrderDetail::order_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrdersResp.OrderDetail.order_qty)
  return order_qty_;
}
inline void StockQueryOrdersResp_OrderDetail::set_order_qty(::google::protobuf::uint32 value) {
  set_has_order_qty();
  order_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrdersResp.OrderDetail.order_qty)
}

// optional double order_frz_amt = 11;
inline bool StockQueryOrdersResp_OrderDetail::has_order_frz_amt() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void StockQueryOrdersResp_OrderDetail::set_has_order_frz_amt() {
  _has_bits_[0] |= 0x00000800u;
}
inline void StockQueryOrdersResp_OrderDetail::clear_has_order_frz_amt() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void StockQueryOrdersResp_OrderDetail::clear_order_frz_amt() {
  order_frz_amt_ = 0;
  clear_has_order_frz_amt();
}
inline double StockQueryOrdersResp_OrderDetail::order_frz_amt() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrdersResp.OrderDetail.order_frz_amt)
  return order_frz_amt_;
}
inline void StockQueryOrdersResp_OrderDetail::set_order_frz_amt(double value) {
  set_has_order_frz_amt();
  order_frz_amt_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrdersResp.OrderDetail.order_frz_amt)
}

// optional double match_amt = 12;
inline bool StockQueryOrdersResp_OrderDetail::has_match_amt() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void StockQueryOrdersResp_OrderDetail::set_has_match_amt() {
  _has_bits_[0] |= 0x00004000u;
}
inline void StockQueryOrdersResp_OrderDetail::clear_has_match_amt() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void StockQueryOrdersResp_OrderDetail::clear_match_amt() {
  match_amt_ = 0;
  clear_has_match_amt();
}
inline double StockQueryOrdersResp_OrderDetail::match_amt() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrdersResp.OrderDetail.match_amt)
  return match_amt_;
}
inline void StockQueryOrdersResp_OrderDetail::set_match_amt(double value) {
  set_has_match_amt();
  match_amt_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrdersResp.OrderDetail.match_amt)
}

// required uint32 match_qty = 13;
inline bool StockQueryOrdersResp_OrderDetail::has_match_qty() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void StockQueryOrdersResp_OrderDetail::set_has_match_qty() {
  _has_bits_[0] |= 0x00002000u;
}
inline void StockQueryOrdersResp_OrderDetail::clear_has_match_qty() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void StockQueryOrdersResp_OrderDetail::clear_match_qty() {
  match_qty_ = 0u;
  clear_has_match_qty();
}
inline ::google::protobuf::uint32 StockQueryOrdersResp_OrderDetail::match_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrdersResp.OrderDetail.match_qty)
  return match_qty_;
}
inline void StockQueryOrdersResp_OrderDetail::set_match_qty(::google::protobuf::uint32 value) {
  set_has_match_qty();
  match_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrdersResp.OrderDetail.match_qty)
}

// required uint32 cancel_qty = 14;
inline bool StockQueryOrdersResp_OrderDetail::has_cancel_qty() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void StockQueryOrdersResp_OrderDetail::set_has_cancel_qty() {
  _has_bits_[0] |= 0x00010000u;
}
inline void StockQueryOrdersResp_OrderDetail::clear_has_cancel_qty() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void StockQueryOrdersResp_OrderDetail::clear_cancel_qty() {
  cancel_qty_ = 0u;
  clear_has_cancel_qty();
}
inline ::google::protobuf::uint32 StockQueryOrdersResp_OrderDetail::cancel_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrdersResp.OrderDetail.cancel_qty)
  return cancel_qty_;
}
inline void StockQueryOrdersResp_OrderDetail::set_cancel_qty(::google::protobuf::uint32 value) {
  set_has_cancel_qty();
  cancel_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrdersResp.OrderDetail.cancel_qty)
}

// required string order_status = 15;
inline bool StockQueryOrdersResp_OrderDetail::has_order_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StockQueryOrdersResp_OrderDetail::set_has_order_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StockQueryOrdersResp_OrderDetail::clear_has_order_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StockQueryOrdersResp_OrderDetail::clear_order_status() {
  order_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_status();
}
inline const ::std::string& StockQueryOrdersResp_OrderDetail::order_status() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrdersResp.OrderDetail.order_status)
  return order_status_.GetNoArena();
}
inline void StockQueryOrdersResp_OrderDetail::set_order_status(const ::std::string& value) {
  set_has_order_status();
  order_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrdersResp.OrderDetail.order_status)
}
#if LANG_CXX11
inline void StockQueryOrdersResp_OrderDetail::set_order_status(::std::string&& value) {
  set_has_order_status();
  order_status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockQueryOrdersResp.OrderDetail.order_status)
}
#endif
inline void StockQueryOrdersResp_OrderDetail::set_order_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_status();
  order_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockQueryOrdersResp.OrderDetail.order_status)
}
inline void StockQueryOrdersResp_OrderDetail::set_order_status(const char* value, size_t size) {
  set_has_order_status();
  order_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockQueryOrdersResp.OrderDetail.order_status)
}
inline ::std::string* StockQueryOrdersResp_OrderDetail::mutable_order_status() {
  set_has_order_status();
  // @@protoc_insertion_point(field_mutable:autotrade.StockQueryOrdersResp.OrderDetail.order_status)
  return order_status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockQueryOrdersResp_OrderDetail::release_order_status() {
  // @@protoc_insertion_point(field_release:autotrade.StockQueryOrdersResp.OrderDetail.order_status)
  if (!has_order_status()) {
    return NULL;
  }
  clear_has_order_status();
  return order_status_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQueryOrdersResp_OrderDetail::set_allocated_order_status(::std::string* order_status) {
  if (order_status != NULL) {
    set_has_order_status();
  } else {
    clear_has_order_status();
  }
  order_status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_status);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockQueryOrdersResp.OrderDetail.order_status)
}

// required string code_name = 16;
inline bool StockQueryOrdersResp_OrderDetail::has_code_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StockQueryOrdersResp_OrderDetail::set_has_code_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StockQueryOrdersResp_OrderDetail::clear_has_code_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StockQueryOrdersResp_OrderDetail::clear_code_name() {
  code_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code_name();
}
inline const ::std::string& StockQueryOrdersResp_OrderDetail::code_name() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrdersResp.OrderDetail.code_name)
  return code_name_.GetNoArena();
}
inline void StockQueryOrdersResp_OrderDetail::set_code_name(const ::std::string& value) {
  set_has_code_name();
  code_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrdersResp.OrderDetail.code_name)
}
#if LANG_CXX11
inline void StockQueryOrdersResp_OrderDetail::set_code_name(::std::string&& value) {
  set_has_code_name();
  code_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockQueryOrdersResp.OrderDetail.code_name)
}
#endif
inline void StockQueryOrdersResp_OrderDetail::set_code_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code_name();
  code_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockQueryOrdersResp.OrderDetail.code_name)
}
inline void StockQueryOrdersResp_OrderDetail::set_code_name(const char* value, size_t size) {
  set_has_code_name();
  code_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockQueryOrdersResp.OrderDetail.code_name)
}
inline ::std::string* StockQueryOrdersResp_OrderDetail::mutable_code_name() {
  set_has_code_name();
  // @@protoc_insertion_point(field_mutable:autotrade.StockQueryOrdersResp.OrderDetail.code_name)
  return code_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockQueryOrdersResp_OrderDetail::release_code_name() {
  // @@protoc_insertion_point(field_release:autotrade.StockQueryOrdersResp.OrderDetail.code_name)
  if (!has_code_name()) {
    return NULL;
  }
  clear_has_code_name();
  return code_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQueryOrdersResp_OrderDetail::set_allocated_code_name(::std::string* code_name) {
  if (code_name != NULL) {
    set_has_code_name();
  } else {
    clear_has_code_name();
  }
  code_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code_name);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockQueryOrdersResp.OrderDetail.code_name)
}

// optional double clear_amt = 17;
inline bool StockQueryOrdersResp_OrderDetail::has_clear_amt() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void StockQueryOrdersResp_OrderDetail::set_has_clear_amt() {
  _has_bits_[0] |= 0x00008000u;
}
inline void StockQueryOrdersResp_OrderDetail::clear_has_clear_amt() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void StockQueryOrdersResp_OrderDetail::clear_clear_amt() {
  clear_amt_ = 0;
  clear_has_clear_amt();
}
inline double StockQueryOrdersResp_OrderDetail::clear_amt() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrdersResp.OrderDetail.clear_amt)
  return clear_amt_;
}
inline void StockQueryOrdersResp_OrderDetail::set_clear_amt(double value) {
  set_has_clear_amt();
  clear_amt_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrdersResp.OrderDetail.clear_amt)
}

// -------------------------------------------------------------------

// StockQueryOrdersResp

// optional int32 funcid = 1 [default = 11102003];
inline bool StockQueryOrdersResp::has_funcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockQueryOrdersResp::set_has_funcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockQueryOrdersResp::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockQueryOrdersResp::clear_funcid() {
  funcid_ = 11102003;
  clear_has_funcid();
}
inline ::google::protobuf::int32 StockQueryOrdersResp::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrdersResp.funcid)
  return funcid_;
}
inline void StockQueryOrdersResp::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrdersResp.funcid)
}

// repeated .autotrade.StockQueryOrdersResp.OrderDetail detail_list = 2;
inline int StockQueryOrdersResp::detail_list_size() const {
  return detail_list_.size();
}
inline void StockQueryOrdersResp::clear_detail_list() {
  detail_list_.Clear();
}
inline ::autotrade::StockQueryOrdersResp_OrderDetail* StockQueryOrdersResp::mutable_detail_list(int index) {
  // @@protoc_insertion_point(field_mutable:autotrade.StockQueryOrdersResp.detail_list)
  return detail_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::autotrade::StockQueryOrdersResp_OrderDetail >*
StockQueryOrdersResp::mutable_detail_list() {
  // @@protoc_insertion_point(field_mutable_list:autotrade.StockQueryOrdersResp.detail_list)
  return &detail_list_;
}
inline const ::autotrade::StockQueryOrdersResp_OrderDetail& StockQueryOrdersResp::detail_list(int index) const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrdersResp.detail_list)
  return detail_list_.Get(index);
}
inline ::autotrade::StockQueryOrdersResp_OrderDetail* StockQueryOrdersResp::add_detail_list() {
  // @@protoc_insertion_point(field_add:autotrade.StockQueryOrdersResp.detail_list)
  return detail_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::autotrade::StockQueryOrdersResp_OrderDetail >&
StockQueryOrdersResp::detail_list() const {
  // @@protoc_insertion_point(field_list:autotrade.StockQueryOrdersResp.detail_list)
  return detail_list_;
}

// optional string request_id = 3;
inline bool StockQueryOrdersResp::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockQueryOrdersResp::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockQueryOrdersResp::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockQueryOrdersResp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& StockQueryOrdersResp::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryOrdersResp.request_id)
  return request_id_.GetNoArena();
}
inline void StockQueryOrdersResp::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockQueryOrdersResp.request_id)
}
#if LANG_CXX11
inline void StockQueryOrdersResp::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockQueryOrdersResp.request_id)
}
#endif
inline void StockQueryOrdersResp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockQueryOrdersResp.request_id)
}
inline void StockQueryOrdersResp::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockQueryOrdersResp.request_id)
}
inline ::std::string* StockQueryOrdersResp::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockQueryOrdersResp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockQueryOrdersResp::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockQueryOrdersResp.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQueryOrdersResp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockQueryOrdersResp.request_id)
}

// -------------------------------------------------------------------

// ETFBasicInfoQueryReqt

// optional int32 funcid = 1 [default = 11002008];
inline bool ETFBasicInfoQueryReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ETFBasicInfoQueryReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ETFBasicInfoQueryReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ETFBasicInfoQueryReqt::clear_funcid() {
  funcid_ = 11002008;
  clear_has_funcid();
}
inline ::google::protobuf::int32 ETFBasicInfoQueryReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasicInfoQueryReqt.funcid)
  return funcid_;
}
inline void ETFBasicInfoQueryReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.ETFBasicInfoQueryReqt.funcid)
}

// required string code = 2;
inline bool ETFBasicInfoQueryReqt::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ETFBasicInfoQueryReqt::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ETFBasicInfoQueryReqt::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ETFBasicInfoQueryReqt::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& ETFBasicInfoQueryReqt::code() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasicInfoQueryReqt.code)
  return code_.GetNoArena();
}
inline void ETFBasicInfoQueryReqt::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.ETFBasicInfoQueryReqt.code)
}
#if LANG_CXX11
inline void ETFBasicInfoQueryReqt::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.ETFBasicInfoQueryReqt.code)
}
#endif
inline void ETFBasicInfoQueryReqt::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.ETFBasicInfoQueryReqt.code)
}
inline void ETFBasicInfoQueryReqt::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.ETFBasicInfoQueryReqt.code)
}
inline ::std::string* ETFBasicInfoQueryReqt::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:autotrade.ETFBasicInfoQueryReqt.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ETFBasicInfoQueryReqt::release_code() {
  // @@protoc_insertion_point(field_release:autotrade.ETFBasicInfoQueryReqt.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ETFBasicInfoQueryReqt::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:autotrade.ETFBasicInfoQueryReqt.code)
}

// optional string request_id = 3;
inline bool ETFBasicInfoQueryReqt::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ETFBasicInfoQueryReqt::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ETFBasicInfoQueryReqt::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ETFBasicInfoQueryReqt::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& ETFBasicInfoQueryReqt::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasicInfoQueryReqt.request_id)
  return request_id_.GetNoArena();
}
inline void ETFBasicInfoQueryReqt::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.ETFBasicInfoQueryReqt.request_id)
}
#if LANG_CXX11
inline void ETFBasicInfoQueryReqt::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.ETFBasicInfoQueryReqt.request_id)
}
#endif
inline void ETFBasicInfoQueryReqt::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.ETFBasicInfoQueryReqt.request_id)
}
inline void ETFBasicInfoQueryReqt::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.ETFBasicInfoQueryReqt.request_id)
}
inline ::std::string* ETFBasicInfoQueryReqt::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.ETFBasicInfoQueryReqt.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ETFBasicInfoQueryReqt::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.ETFBasicInfoQueryReqt.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ETFBasicInfoQueryReqt::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.ETFBasicInfoQueryReqt.request_id)
}

// optional int64 request_time = 4 [default = 0];
inline bool ETFBasicInfoQueryReqt::has_request_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ETFBasicInfoQueryReqt::set_has_request_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ETFBasicInfoQueryReqt::clear_has_request_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ETFBasicInfoQueryReqt::clear_request_time() {
  request_time_ = GOOGLE_LONGLONG(0);
  clear_has_request_time();
}
inline ::google::protobuf::int64 ETFBasicInfoQueryReqt::request_time() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasicInfoQueryReqt.request_time)
  return request_time_;
}
inline void ETFBasicInfoQueryReqt::set_request_time(::google::protobuf::int64 value) {
  set_has_request_time();
  request_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.ETFBasicInfoQueryReqt.request_time)
}

// optional int64 active_interval = 5 [default = 1000];
inline bool ETFBasicInfoQueryReqt::has_active_interval() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ETFBasicInfoQueryReqt::set_has_active_interval() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ETFBasicInfoQueryReqt::clear_has_active_interval() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ETFBasicInfoQueryReqt::clear_active_interval() {
  active_interval_ = GOOGLE_LONGLONG(1000);
  clear_has_active_interval();
}
inline ::google::protobuf::int64 ETFBasicInfoQueryReqt::active_interval() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasicInfoQueryReqt.active_interval)
  return active_interval_;
}
inline void ETFBasicInfoQueryReqt::set_active_interval(::google::protobuf::int64 value) {
  set_has_active_interval();
  active_interval_ = value;
  // @@protoc_insertion_point(field_set:autotrade.ETFBasicInfoQueryReqt.active_interval)
}

// -------------------------------------------------------------------

// ETFBasicInfoQueryResp_ETFBasicInfo

// required uint32 market = 2;
inline bool ETFBasicInfoQueryResp_ETFBasicInfo::has_market() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_has_market() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::clear_has_market() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::clear_market() {
  market_ = 0u;
  clear_has_market();
}
inline ::google::protobuf::uint32 ETFBasicInfoQueryResp_ETFBasicInfo::market() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.market)
  return market_;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_market(::google::protobuf::uint32 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.market)
}

// required string code = 3;
inline bool ETFBasicInfoQueryResp_ETFBasicInfo::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& ETFBasicInfoQueryResp_ETFBasicInfo::code() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.code)
  return code_.GetNoArena();
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.code)
}
#if LANG_CXX11
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.code)
}
#endif
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.code)
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.code)
}
inline ::std::string* ETFBasicInfoQueryResp_ETFBasicInfo::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ETFBasicInfoQueryResp_ETFBasicInfo::release_code() {
  // @@protoc_insertion_point(field_release:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.code)
}

// optional string name = 4;
inline bool ETFBasicInfoQueryResp_ETFBasicInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ETFBasicInfoQueryResp_ETFBasicInfo::name() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.name)
  return name_.GetNoArena();
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.name)
}
#if LANG_CXX11
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.name)
}
#endif
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.name)
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.name)
}
inline ::std::string* ETFBasicInfoQueryResp_ETFBasicInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ETFBasicInfoQueryResp_ETFBasicInfo::release_name() {
  // @@protoc_insertion_point(field_release:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.name)
}

// required string level1_code = 5;
inline bool ETFBasicInfoQueryResp_ETFBasicInfo::has_level1_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_has_level1_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::clear_has_level1_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::clear_level1_code() {
  level1_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_level1_code();
}
inline const ::std::string& ETFBasicInfoQueryResp_ETFBasicInfo::level1_code() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.level1_code)
  return level1_code_.GetNoArena();
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_level1_code(const ::std::string& value) {
  set_has_level1_code();
  level1_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.level1_code)
}
#if LANG_CXX11
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_level1_code(::std::string&& value) {
  set_has_level1_code();
  level1_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.level1_code)
}
#endif
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_level1_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_level1_code();
  level1_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.level1_code)
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_level1_code(const char* value, size_t size) {
  set_has_level1_code();
  level1_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.level1_code)
}
inline ::std::string* ETFBasicInfoQueryResp_ETFBasicInfo::mutable_level1_code() {
  set_has_level1_code();
  // @@protoc_insertion_point(field_mutable:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.level1_code)
  return level1_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ETFBasicInfoQueryResp_ETFBasicInfo::release_level1_code() {
  // @@protoc_insertion_point(field_release:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.level1_code)
  if (!has_level1_code()) {
    return NULL;
  }
  clear_has_level1_code();
  return level1_code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_allocated_level1_code(::std::string* level1_code) {
  if (level1_code != NULL) {
    set_has_level1_code();
  } else {
    clear_has_level1_code();
  }
  level1_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), level1_code);
  // @@protoc_insertion_point(field_set_allocated:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.level1_code)
}

// required string level2_code = 6;
inline bool ETFBasicInfoQueryResp_ETFBasicInfo::has_level2_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_has_level2_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::clear_has_level2_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::clear_level2_code() {
  level2_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_level2_code();
}
inline const ::std::string& ETFBasicInfoQueryResp_ETFBasicInfo::level2_code() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.level2_code)
  return level2_code_.GetNoArena();
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_level2_code(const ::std::string& value) {
  set_has_level2_code();
  level2_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.level2_code)
}
#if LANG_CXX11
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_level2_code(::std::string&& value) {
  set_has_level2_code();
  level2_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.level2_code)
}
#endif
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_level2_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_level2_code();
  level2_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.level2_code)
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_level2_code(const char* value, size_t size) {
  set_has_level2_code();
  level2_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.level2_code)
}
inline ::std::string* ETFBasicInfoQueryResp_ETFBasicInfo::mutable_level2_code() {
  set_has_level2_code();
  // @@protoc_insertion_point(field_mutable:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.level2_code)
  return level2_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ETFBasicInfoQueryResp_ETFBasicInfo::release_level2_code() {
  // @@protoc_insertion_point(field_release:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.level2_code)
  if (!has_level2_code()) {
    return NULL;
  }
  clear_has_level2_code();
  return level2_code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_allocated_level2_code(::std::string* level2_code) {
  if (level2_code != NULL) {
    set_has_level2_code();
  } else {
    clear_has_level2_code();
  }
  level2_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), level2_code);
  // @@protoc_insertion_point(field_set_allocated:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.level2_code)
}

// optional string capital_code = 7;
inline bool ETFBasicInfoQueryResp_ETFBasicInfo::has_capital_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_has_capital_code() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::clear_has_capital_code() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::clear_capital_code() {
  capital_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_capital_code();
}
inline const ::std::string& ETFBasicInfoQueryResp_ETFBasicInfo::capital_code() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.capital_code)
  return capital_code_.GetNoArena();
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_capital_code(const ::std::string& value) {
  set_has_capital_code();
  capital_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.capital_code)
}
#if LANG_CXX11
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_capital_code(::std::string&& value) {
  set_has_capital_code();
  capital_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.capital_code)
}
#endif
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_capital_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_capital_code();
  capital_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.capital_code)
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_capital_code(const char* value, size_t size) {
  set_has_capital_code();
  capital_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.capital_code)
}
inline ::std::string* ETFBasicInfoQueryResp_ETFBasicInfo::mutable_capital_code() {
  set_has_capital_code();
  // @@protoc_insertion_point(field_mutable:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.capital_code)
  return capital_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ETFBasicInfoQueryResp_ETFBasicInfo::release_capital_code() {
  // @@protoc_insertion_point(field_release:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.capital_code)
  if (!has_capital_code()) {
    return NULL;
  }
  clear_has_capital_code();
  return capital_code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_allocated_capital_code(::std::string* capital_code) {
  if (capital_code != NULL) {
    set_has_capital_code();
  } else {
    clear_has_capital_code();
  }
  capital_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), capital_code);
  // @@protoc_insertion_point(field_set_allocated:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.capital_code)
}

// required uint32 trade_unit = 8;
inline bool ETFBasicInfoQueryResp_ETFBasicInfo::has_trade_unit() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_has_trade_unit() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::clear_has_trade_unit() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::clear_trade_unit() {
  trade_unit_ = 0u;
  clear_has_trade_unit();
}
inline ::google::protobuf::uint32 ETFBasicInfoQueryResp_ETFBasicInfo::trade_unit() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.trade_unit)
  return trade_unit_;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_trade_unit(::google::protobuf::uint32 value) {
  set_has_trade_unit();
  trade_unit_ = value;
  // @@protoc_insertion_point(field_set:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.trade_unit)
}

// optional double ecash_component = 9;
inline bool ETFBasicInfoQueryResp_ETFBasicInfo::has_ecash_component() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_has_ecash_component() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::clear_has_ecash_component() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::clear_ecash_component() {
  ecash_component_ = 0;
  clear_has_ecash_component();
}
inline double ETFBasicInfoQueryResp_ETFBasicInfo::ecash_component() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.ecash_component)
  return ecash_component_;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_ecash_component(double value) {
  set_has_ecash_component();
  ecash_component_ = value;
  // @@protoc_insertion_point(field_set:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.ecash_component)
}

// required string publish_flag = 10;
inline bool ETFBasicInfoQueryResp_ETFBasicInfo::has_publish_flag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_has_publish_flag() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::clear_has_publish_flag() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::clear_publish_flag() {
  publish_flag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_publish_flag();
}
inline const ::std::string& ETFBasicInfoQueryResp_ETFBasicInfo::publish_flag() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.publish_flag)
  return publish_flag_.GetNoArena();
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_publish_flag(const ::std::string& value) {
  set_has_publish_flag();
  publish_flag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.publish_flag)
}
#if LANG_CXX11
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_publish_flag(::std::string&& value) {
  set_has_publish_flag();
  publish_flag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.publish_flag)
}
#endif
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_publish_flag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_publish_flag();
  publish_flag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.publish_flag)
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_publish_flag(const char* value, size_t size) {
  set_has_publish_flag();
  publish_flag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.publish_flag)
}
inline ::std::string* ETFBasicInfoQueryResp_ETFBasicInfo::mutable_publish_flag() {
  set_has_publish_flag();
  // @@protoc_insertion_point(field_mutable:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.publish_flag)
  return publish_flag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ETFBasicInfoQueryResp_ETFBasicInfo::release_publish_flag() {
  // @@protoc_insertion_point(field_release:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.publish_flag)
  if (!has_publish_flag()) {
    return NULL;
  }
  clear_has_publish_flag();
  return publish_flag_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_allocated_publish_flag(::std::string* publish_flag) {
  if (publish_flag != NULL) {
    set_has_publish_flag();
  } else {
    clear_has_publish_flag();
  }
  publish_flag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publish_flag);
  // @@protoc_insertion_point(field_set_allocated:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.publish_flag)
}

// required string trade_stat = 11;
inline bool ETFBasicInfoQueryResp_ETFBasicInfo::has_trade_stat() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_has_trade_stat() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::clear_has_trade_stat() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::clear_trade_stat() {
  trade_stat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trade_stat();
}
inline const ::std::string& ETFBasicInfoQueryResp_ETFBasicInfo::trade_stat() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.trade_stat)
  return trade_stat_.GetNoArena();
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_trade_stat(const ::std::string& value) {
  set_has_trade_stat();
  trade_stat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.trade_stat)
}
#if LANG_CXX11
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_trade_stat(::std::string&& value) {
  set_has_trade_stat();
  trade_stat_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.trade_stat)
}
#endif
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_trade_stat(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trade_stat();
  trade_stat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.trade_stat)
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_trade_stat(const char* value, size_t size) {
  set_has_trade_stat();
  trade_stat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.trade_stat)
}
inline ::std::string* ETFBasicInfoQueryResp_ETFBasicInfo::mutable_trade_stat() {
  set_has_trade_stat();
  // @@protoc_insertion_point(field_mutable:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.trade_stat)
  return trade_stat_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ETFBasicInfoQueryResp_ETFBasicInfo::release_trade_stat() {
  // @@protoc_insertion_point(field_release:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.trade_stat)
  if (!has_trade_stat()) {
    return NULL;
  }
  clear_has_trade_stat();
  return trade_stat_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_allocated_trade_stat(::std::string* trade_stat) {
  if (trade_stat != NULL) {
    set_has_trade_stat();
  } else {
    clear_has_trade_stat();
  }
  trade_stat_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trade_stat);
  // @@protoc_insertion_point(field_set_allocated:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.trade_stat)
}

// required uint32 record_num = 12;
inline bool ETFBasicInfoQueryResp_ETFBasicInfo::has_record_num() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_has_record_num() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::clear_has_record_num() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::clear_record_num() {
  record_num_ = 0u;
  clear_has_record_num();
}
inline ::google::protobuf::uint32 ETFBasicInfoQueryResp_ETFBasicInfo::record_num() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.record_num)
  return record_num_;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_record_num(::google::protobuf::uint32 value) {
  set_has_record_num();
  record_num_ = value;
  // @@protoc_insertion_point(field_set:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.record_num)
}

// required string trading_day = 13;
inline bool ETFBasicInfoQueryResp_ETFBasicInfo::has_trading_day() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_has_trading_day() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::clear_has_trading_day() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::clear_trading_day() {
  trading_day_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trading_day();
}
inline const ::std::string& ETFBasicInfoQueryResp_ETFBasicInfo::trading_day() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.trading_day)
  return trading_day_.GetNoArena();
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_trading_day(const ::std::string& value) {
  set_has_trading_day();
  trading_day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.trading_day)
}
#if LANG_CXX11
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_trading_day(::std::string&& value) {
  set_has_trading_day();
  trading_day_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.trading_day)
}
#endif
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_trading_day(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trading_day();
  trading_day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.trading_day)
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_trading_day(const char* value, size_t size) {
  set_has_trading_day();
  trading_day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.trading_day)
}
inline ::std::string* ETFBasicInfoQueryResp_ETFBasicInfo::mutable_trading_day() {
  set_has_trading_day();
  // @@protoc_insertion_point(field_mutable:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.trading_day)
  return trading_day_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ETFBasicInfoQueryResp_ETFBasicInfo::release_trading_day() {
  // @@protoc_insertion_point(field_release:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.trading_day)
  if (!has_trading_day()) {
    return NULL;
  }
  clear_has_trading_day();
  return trading_day_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_allocated_trading_day(::std::string* trading_day) {
  if (trading_day != NULL) {
    set_has_trading_day();
  } else {
    clear_has_trading_day();
  }
  trading_day_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trading_day);
  // @@protoc_insertion_point(field_set_allocated:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.trading_day)
}

// required double maxcashratio = 14;
inline bool ETFBasicInfoQueryResp_ETFBasicInfo::has_maxcashratio() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_has_maxcashratio() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::clear_has_maxcashratio() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::clear_maxcashratio() {
  maxcashratio_ = 0;
  clear_has_maxcashratio();
}
inline double ETFBasicInfoQueryResp_ETFBasicInfo::maxcashratio() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.maxcashratio)
  return maxcashratio_;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_maxcashratio(double value) {
  set_has_maxcashratio();
  maxcashratio_ = value;
  // @@protoc_insertion_point(field_set:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.maxcashratio)
}

// required string pretrading_day = 15;
inline bool ETFBasicInfoQueryResp_ETFBasicInfo::has_pretrading_day() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_has_pretrading_day() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::clear_has_pretrading_day() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::clear_pretrading_day() {
  pretrading_day_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pretrading_day();
}
inline const ::std::string& ETFBasicInfoQueryResp_ETFBasicInfo::pretrading_day() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.pretrading_day)
  return pretrading_day_.GetNoArena();
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_pretrading_day(const ::std::string& value) {
  set_has_pretrading_day();
  pretrading_day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.pretrading_day)
}
#if LANG_CXX11
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_pretrading_day(::std::string&& value) {
  set_has_pretrading_day();
  pretrading_day_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.pretrading_day)
}
#endif
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_pretrading_day(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pretrading_day();
  pretrading_day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.pretrading_day)
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_pretrading_day(const char* value, size_t size) {
  set_has_pretrading_day();
  pretrading_day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.pretrading_day)
}
inline ::std::string* ETFBasicInfoQueryResp_ETFBasicInfo::mutable_pretrading_day() {
  set_has_pretrading_day();
  // @@protoc_insertion_point(field_mutable:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.pretrading_day)
  return pretrading_day_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ETFBasicInfoQueryResp_ETFBasicInfo::release_pretrading_day() {
  // @@protoc_insertion_point(field_release:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.pretrading_day)
  if (!has_pretrading_day()) {
    return NULL;
  }
  clear_has_pretrading_day();
  return pretrading_day_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_allocated_pretrading_day(::std::string* pretrading_day) {
  if (pretrading_day != NULL) {
    set_has_pretrading_day();
  } else {
    clear_has_pretrading_day();
  }
  pretrading_day_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pretrading_day);
  // @@protoc_insertion_point(field_set_allocated:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.pretrading_day)
}

// required double cash_component = 16;
inline bool ETFBasicInfoQueryResp_ETFBasicInfo::has_cash_component() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_has_cash_component() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::clear_has_cash_component() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::clear_cash_component() {
  cash_component_ = 0;
  clear_has_cash_component();
}
inline double ETFBasicInfoQueryResp_ETFBasicInfo::cash_component() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.cash_component)
  return cash_component_;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_cash_component(double value) {
  set_has_cash_component();
  cash_component_ = value;
  // @@protoc_insertion_point(field_set:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.cash_component)
}

// required double navpercu = 17;
inline bool ETFBasicInfoQueryResp_ETFBasicInfo::has_navpercu() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_has_navpercu() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::clear_has_navpercu() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::clear_navpercu() {
  navpercu_ = 0;
  clear_has_navpercu();
}
inline double ETFBasicInfoQueryResp_ETFBasicInfo::navpercu() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.navpercu)
  return navpercu_;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_navpercu(double value) {
  set_has_navpercu();
  navpercu_ = value;
  // @@protoc_insertion_point(field_set:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.navpercu)
}

// required double nav = 18;
inline bool ETFBasicInfoQueryResp_ETFBasicInfo::has_nav() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_has_nav() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::clear_has_nav() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::clear_nav() {
  nav_ = 0;
  clear_has_nav();
}
inline double ETFBasicInfoQueryResp_ETFBasicInfo::nav() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.nav)
  return nav_;
}
inline void ETFBasicInfoQueryResp_ETFBasicInfo::set_nav(double value) {
  set_has_nav();
  nav_ = value;
  // @@protoc_insertion_point(field_set:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.nav)
}

// -------------------------------------------------------------------

// ETFBasicInfoQueryResp

// optional int32 funcid = 1 [default = 11102008];
inline bool ETFBasicInfoQueryResp::has_funcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ETFBasicInfoQueryResp::set_has_funcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ETFBasicInfoQueryResp::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ETFBasicInfoQueryResp::clear_funcid() {
  funcid_ = 11102008;
  clear_has_funcid();
}
inline ::google::protobuf::int32 ETFBasicInfoQueryResp::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasicInfoQueryResp.funcid)
  return funcid_;
}
inline void ETFBasicInfoQueryResp::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.ETFBasicInfoQueryResp.funcid)
}

// repeated .autotrade.ETFBasicInfoQueryResp.ETFBasicInfo infos = 2;
inline int ETFBasicInfoQueryResp::infos_size() const {
  return infos_.size();
}
inline void ETFBasicInfoQueryResp::clear_infos() {
  infos_.Clear();
}
inline ::autotrade::ETFBasicInfoQueryResp_ETFBasicInfo* ETFBasicInfoQueryResp::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:autotrade.ETFBasicInfoQueryResp.infos)
  return infos_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::autotrade::ETFBasicInfoQueryResp_ETFBasicInfo >*
ETFBasicInfoQueryResp::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:autotrade.ETFBasicInfoQueryResp.infos)
  return &infos_;
}
inline const ::autotrade::ETFBasicInfoQueryResp_ETFBasicInfo& ETFBasicInfoQueryResp::infos(int index) const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasicInfoQueryResp.infos)
  return infos_.Get(index);
}
inline ::autotrade::ETFBasicInfoQueryResp_ETFBasicInfo* ETFBasicInfoQueryResp::add_infos() {
  // @@protoc_insertion_point(field_add:autotrade.ETFBasicInfoQueryResp.infos)
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::autotrade::ETFBasicInfoQueryResp_ETFBasicInfo >&
ETFBasicInfoQueryResp::infos() const {
  // @@protoc_insertion_point(field_list:autotrade.ETFBasicInfoQueryResp.infos)
  return infos_;
}

// optional string request_id = 3;
inline bool ETFBasicInfoQueryResp::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ETFBasicInfoQueryResp::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ETFBasicInfoQueryResp::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ETFBasicInfoQueryResp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& ETFBasicInfoQueryResp::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasicInfoQueryResp.request_id)
  return request_id_.GetNoArena();
}
inline void ETFBasicInfoQueryResp::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.ETFBasicInfoQueryResp.request_id)
}
#if LANG_CXX11
inline void ETFBasicInfoQueryResp::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.ETFBasicInfoQueryResp.request_id)
}
#endif
inline void ETFBasicInfoQueryResp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.ETFBasicInfoQueryResp.request_id)
}
inline void ETFBasicInfoQueryResp::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.ETFBasicInfoQueryResp.request_id)
}
inline ::std::string* ETFBasicInfoQueryResp::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.ETFBasicInfoQueryResp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ETFBasicInfoQueryResp::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.ETFBasicInfoQueryResp.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ETFBasicInfoQueryResp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.ETFBasicInfoQueryResp.request_id)
}

// -------------------------------------------------------------------

// ETFBasketListQueryReqt

// optional int32 funcid = 1 [default = 11002009];
inline bool ETFBasketListQueryReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ETFBasketListQueryReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ETFBasketListQueryReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ETFBasketListQueryReqt::clear_funcid() {
  funcid_ = 11002009;
  clear_has_funcid();
}
inline ::google::protobuf::int32 ETFBasketListQueryReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasketListQueryReqt.funcid)
  return funcid_;
}
inline void ETFBasketListQueryReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.ETFBasketListQueryReqt.funcid)
}

// required string code = 2;
inline bool ETFBasketListQueryReqt::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ETFBasketListQueryReqt::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ETFBasketListQueryReqt::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ETFBasketListQueryReqt::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& ETFBasketListQueryReqt::code() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasketListQueryReqt.code)
  return code_.GetNoArena();
}
inline void ETFBasketListQueryReqt::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.ETFBasketListQueryReqt.code)
}
#if LANG_CXX11
inline void ETFBasketListQueryReqt::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.ETFBasketListQueryReqt.code)
}
#endif
inline void ETFBasketListQueryReqt::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.ETFBasketListQueryReqt.code)
}
inline void ETFBasketListQueryReqt::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.ETFBasketListQueryReqt.code)
}
inline ::std::string* ETFBasketListQueryReqt::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:autotrade.ETFBasketListQueryReqt.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ETFBasketListQueryReqt::release_code() {
  // @@protoc_insertion_point(field_release:autotrade.ETFBasketListQueryReqt.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ETFBasketListQueryReqt::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:autotrade.ETFBasketListQueryReqt.code)
}

// optional string request_id = 3;
inline bool ETFBasketListQueryReqt::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ETFBasketListQueryReqt::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ETFBasketListQueryReqt::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ETFBasketListQueryReqt::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& ETFBasketListQueryReqt::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasketListQueryReqt.request_id)
  return request_id_.GetNoArena();
}
inline void ETFBasketListQueryReqt::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.ETFBasketListQueryReqt.request_id)
}
#if LANG_CXX11
inline void ETFBasketListQueryReqt::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.ETFBasketListQueryReqt.request_id)
}
#endif
inline void ETFBasketListQueryReqt::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.ETFBasketListQueryReqt.request_id)
}
inline void ETFBasketListQueryReqt::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.ETFBasketListQueryReqt.request_id)
}
inline ::std::string* ETFBasketListQueryReqt::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.ETFBasketListQueryReqt.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ETFBasketListQueryReqt::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.ETFBasketListQueryReqt.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ETFBasketListQueryReqt::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.ETFBasketListQueryReqt.request_id)
}

// optional int64 request_time = 4 [default = 0];
inline bool ETFBasketListQueryReqt::has_request_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ETFBasketListQueryReqt::set_has_request_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ETFBasketListQueryReqt::clear_has_request_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ETFBasketListQueryReqt::clear_request_time() {
  request_time_ = GOOGLE_LONGLONG(0);
  clear_has_request_time();
}
inline ::google::protobuf::int64 ETFBasketListQueryReqt::request_time() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasketListQueryReqt.request_time)
  return request_time_;
}
inline void ETFBasketListQueryReqt::set_request_time(::google::protobuf::int64 value) {
  set_has_request_time();
  request_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.ETFBasketListQueryReqt.request_time)
}

// optional int64 active_interval = 5 [default = 1000];
inline bool ETFBasketListQueryReqt::has_active_interval() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ETFBasketListQueryReqt::set_has_active_interval() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ETFBasketListQueryReqt::clear_has_active_interval() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ETFBasketListQueryReqt::clear_active_interval() {
  active_interval_ = GOOGLE_LONGLONG(1000);
  clear_has_active_interval();
}
inline ::google::protobuf::int64 ETFBasketListQueryReqt::active_interval() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasketListQueryReqt.active_interval)
  return active_interval_;
}
inline void ETFBasketListQueryReqt::set_active_interval(::google::protobuf::int64 value) {
  set_has_active_interval();
  active_interval_ = value;
  // @@protoc_insertion_point(field_set:autotrade.ETFBasketListQueryReqt.active_interval)
}

// -------------------------------------------------------------------

// ETFBasketListQueryResp_ConstituentStockInfo

// required uint32 market = 1;
inline bool ETFBasketListQueryResp_ConstituentStockInfo::has_market() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ETFBasketListQueryResp_ConstituentStockInfo::set_has_market() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ETFBasketListQueryResp_ConstituentStockInfo::clear_has_market() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ETFBasketListQueryResp_ConstituentStockInfo::clear_market() {
  market_ = 0u;
  clear_has_market();
}
inline ::google::protobuf::uint32 ETFBasketListQueryResp_ConstituentStockInfo::market() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasketListQueryResp.ConstituentStockInfo.market)
  return market_;
}
inline void ETFBasketListQueryResp_ConstituentStockInfo::set_market(::google::protobuf::uint32 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:autotrade.ETFBasketListQueryResp.ConstituentStockInfo.market)
}

// required string code = 2;
inline bool ETFBasketListQueryResp_ConstituentStockInfo::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ETFBasketListQueryResp_ConstituentStockInfo::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ETFBasketListQueryResp_ConstituentStockInfo::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ETFBasketListQueryResp_ConstituentStockInfo::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& ETFBasketListQueryResp_ConstituentStockInfo::code() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasketListQueryResp.ConstituentStockInfo.code)
  return code_.GetNoArena();
}
inline void ETFBasketListQueryResp_ConstituentStockInfo::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.ETFBasketListQueryResp.ConstituentStockInfo.code)
}
#if LANG_CXX11
inline void ETFBasketListQueryResp_ConstituentStockInfo::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.ETFBasketListQueryResp.ConstituentStockInfo.code)
}
#endif
inline void ETFBasketListQueryResp_ConstituentStockInfo::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.ETFBasketListQueryResp.ConstituentStockInfo.code)
}
inline void ETFBasketListQueryResp_ConstituentStockInfo::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.ETFBasketListQueryResp.ConstituentStockInfo.code)
}
inline ::std::string* ETFBasketListQueryResp_ConstituentStockInfo::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:autotrade.ETFBasketListQueryResp.ConstituentStockInfo.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ETFBasketListQueryResp_ConstituentStockInfo::release_code() {
  // @@protoc_insertion_point(field_release:autotrade.ETFBasketListQueryResp.ConstituentStockInfo.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ETFBasketListQueryResp_ConstituentStockInfo::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:autotrade.ETFBasketListQueryResp.ConstituentStockInfo.code)
}

// optional string name = 3;
inline bool ETFBasketListQueryResp_ConstituentStockInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ETFBasketListQueryResp_ConstituentStockInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ETFBasketListQueryResp_ConstituentStockInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ETFBasketListQueryResp_ConstituentStockInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ETFBasketListQueryResp_ConstituentStockInfo::name() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasketListQueryResp.ConstituentStockInfo.name)
  return name_.GetNoArena();
}
inline void ETFBasketListQueryResp_ConstituentStockInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.ETFBasketListQueryResp.ConstituentStockInfo.name)
}
#if LANG_CXX11
inline void ETFBasketListQueryResp_ConstituentStockInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.ETFBasketListQueryResp.ConstituentStockInfo.name)
}
#endif
inline void ETFBasketListQueryResp_ConstituentStockInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.ETFBasketListQueryResp.ConstituentStockInfo.name)
}
inline void ETFBasketListQueryResp_ConstituentStockInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.ETFBasketListQueryResp.ConstituentStockInfo.name)
}
inline ::std::string* ETFBasketListQueryResp_ConstituentStockInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:autotrade.ETFBasketListQueryResp.ConstituentStockInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ETFBasketListQueryResp_ConstituentStockInfo::release_name() {
  // @@protoc_insertion_point(field_release:autotrade.ETFBasketListQueryResp.ConstituentStockInfo.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ETFBasketListQueryResp_ConstituentStockInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:autotrade.ETFBasketListQueryResp.ConstituentStockInfo.name)
}

// required int32 qty = 4;
inline bool ETFBasketListQueryResp_ConstituentStockInfo::has_qty() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ETFBasketListQueryResp_ConstituentStockInfo::set_has_qty() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ETFBasketListQueryResp_ConstituentStockInfo::clear_has_qty() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ETFBasketListQueryResp_ConstituentStockInfo::clear_qty() {
  qty_ = 0;
  clear_has_qty();
}
inline ::google::protobuf::int32 ETFBasketListQueryResp_ConstituentStockInfo::qty() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasketListQueryResp.ConstituentStockInfo.qty)
  return qty_;
}
inline void ETFBasketListQueryResp_ConstituentStockInfo::set_qty(::google::protobuf::int32 value) {
  set_has_qty();
  qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.ETFBasketListQueryResp.ConstituentStockInfo.qty)
}

// required string replaceflag = 5;
inline bool ETFBasketListQueryResp_ConstituentStockInfo::has_replaceflag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ETFBasketListQueryResp_ConstituentStockInfo::set_has_replaceflag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ETFBasketListQueryResp_ConstituentStockInfo::clear_has_replaceflag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ETFBasketListQueryResp_ConstituentStockInfo::clear_replaceflag() {
  replaceflag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_replaceflag();
}
inline const ::std::string& ETFBasketListQueryResp_ConstituentStockInfo::replaceflag() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasketListQueryResp.ConstituentStockInfo.replaceflag)
  return replaceflag_.GetNoArena();
}
inline void ETFBasketListQueryResp_ConstituentStockInfo::set_replaceflag(const ::std::string& value) {
  set_has_replaceflag();
  replaceflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.ETFBasketListQueryResp.ConstituentStockInfo.replaceflag)
}
#if LANG_CXX11
inline void ETFBasketListQueryResp_ConstituentStockInfo::set_replaceflag(::std::string&& value) {
  set_has_replaceflag();
  replaceflag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.ETFBasketListQueryResp.ConstituentStockInfo.replaceflag)
}
#endif
inline void ETFBasketListQueryResp_ConstituentStockInfo::set_replaceflag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_replaceflag();
  replaceflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.ETFBasketListQueryResp.ConstituentStockInfo.replaceflag)
}
inline void ETFBasketListQueryResp_ConstituentStockInfo::set_replaceflag(const char* value, size_t size) {
  set_has_replaceflag();
  replaceflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.ETFBasketListQueryResp.ConstituentStockInfo.replaceflag)
}
inline ::std::string* ETFBasketListQueryResp_ConstituentStockInfo::mutable_replaceflag() {
  set_has_replaceflag();
  // @@protoc_insertion_point(field_mutable:autotrade.ETFBasketListQueryResp.ConstituentStockInfo.replaceflag)
  return replaceflag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ETFBasketListQueryResp_ConstituentStockInfo::release_replaceflag() {
  // @@protoc_insertion_point(field_release:autotrade.ETFBasketListQueryResp.ConstituentStockInfo.replaceflag)
  if (!has_replaceflag()) {
    return NULL;
  }
  clear_has_replaceflag();
  return replaceflag_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ETFBasketListQueryResp_ConstituentStockInfo::set_allocated_replaceflag(::std::string* replaceflag) {
  if (replaceflag != NULL) {
    set_has_replaceflag();
  } else {
    clear_has_replaceflag();
  }
  replaceflag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), replaceflag);
  // @@protoc_insertion_point(field_set_allocated:autotrade.ETFBasketListQueryResp.ConstituentStockInfo.replaceflag)
}

// required double overpricerate = 6;
inline bool ETFBasketListQueryResp_ConstituentStockInfo::has_overpricerate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ETFBasketListQueryResp_ConstituentStockInfo::set_has_overpricerate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ETFBasketListQueryResp_ConstituentStockInfo::clear_has_overpricerate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ETFBasketListQueryResp_ConstituentStockInfo::clear_overpricerate() {
  overpricerate_ = 0;
  clear_has_overpricerate();
}
inline double ETFBasketListQueryResp_ConstituentStockInfo::overpricerate() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasketListQueryResp.ConstituentStockInfo.overpricerate)
  return overpricerate_;
}
inline void ETFBasketListQueryResp_ConstituentStockInfo::set_overpricerate(double value) {
  set_has_overpricerate();
  overpricerate_ = value;
  // @@protoc_insertion_point(field_set:autotrade.ETFBasketListQueryResp.ConstituentStockInfo.overpricerate)
}

// required double replaceamt = 7;
inline bool ETFBasketListQueryResp_ConstituentStockInfo::has_replaceamt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ETFBasketListQueryResp_ConstituentStockInfo::set_has_replaceamt() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ETFBasketListQueryResp_ConstituentStockInfo::clear_has_replaceamt() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ETFBasketListQueryResp_ConstituentStockInfo::clear_replaceamt() {
  replaceamt_ = 0;
  clear_has_replaceamt();
}
inline double ETFBasketListQueryResp_ConstituentStockInfo::replaceamt() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasketListQueryResp.ConstituentStockInfo.replaceamt)
  return replaceamt_;
}
inline void ETFBasketListQueryResp_ConstituentStockInfo::set_replaceamt(double value) {
  set_has_replaceamt();
  replaceamt_ = value;
  // @@protoc_insertion_point(field_set:autotrade.ETFBasketListQueryResp.ConstituentStockInfo.replaceamt)
}

// -------------------------------------------------------------------

// ETFBasketListQueryResp

// optional int32 funcid = 1 [default = 11102009];
inline bool ETFBasketListQueryResp::has_funcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ETFBasketListQueryResp::set_has_funcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ETFBasketListQueryResp::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ETFBasketListQueryResp::clear_funcid() {
  funcid_ = 11102009;
  clear_has_funcid();
}
inline ::google::protobuf::int32 ETFBasketListQueryResp::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasketListQueryResp.funcid)
  return funcid_;
}
inline void ETFBasketListQueryResp::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.ETFBasketListQueryResp.funcid)
}

// repeated .autotrade.ETFBasketListQueryResp.ConstituentStockInfo stock_infos = 2;
inline int ETFBasketListQueryResp::stock_infos_size() const {
  return stock_infos_.size();
}
inline void ETFBasketListQueryResp::clear_stock_infos() {
  stock_infos_.Clear();
}
inline ::autotrade::ETFBasketListQueryResp_ConstituentStockInfo* ETFBasketListQueryResp::mutable_stock_infos(int index) {
  // @@protoc_insertion_point(field_mutable:autotrade.ETFBasketListQueryResp.stock_infos)
  return stock_infos_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::autotrade::ETFBasketListQueryResp_ConstituentStockInfo >*
ETFBasketListQueryResp::mutable_stock_infos() {
  // @@protoc_insertion_point(field_mutable_list:autotrade.ETFBasketListQueryResp.stock_infos)
  return &stock_infos_;
}
inline const ::autotrade::ETFBasketListQueryResp_ConstituentStockInfo& ETFBasketListQueryResp::stock_infos(int index) const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasketListQueryResp.stock_infos)
  return stock_infos_.Get(index);
}
inline ::autotrade::ETFBasketListQueryResp_ConstituentStockInfo* ETFBasketListQueryResp::add_stock_infos() {
  // @@protoc_insertion_point(field_add:autotrade.ETFBasketListQueryResp.stock_infos)
  return stock_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::autotrade::ETFBasketListQueryResp_ConstituentStockInfo >&
ETFBasketListQueryResp::stock_infos() const {
  // @@protoc_insertion_point(field_list:autotrade.ETFBasketListQueryResp.stock_infos)
  return stock_infos_;
}

// optional string request_id = 3;
inline bool ETFBasketListQueryResp::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ETFBasketListQueryResp::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ETFBasketListQueryResp::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ETFBasketListQueryResp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& ETFBasketListQueryResp::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasketListQueryResp.request_id)
  return request_id_.GetNoArena();
}
inline void ETFBasketListQueryResp::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.ETFBasketListQueryResp.request_id)
}
#if LANG_CXX11
inline void ETFBasketListQueryResp::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.ETFBasketListQueryResp.request_id)
}
#endif
inline void ETFBasketListQueryResp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.ETFBasketListQueryResp.request_id)
}
inline void ETFBasketListQueryResp::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.ETFBasketListQueryResp.request_id)
}
inline ::std::string* ETFBasketListQueryResp::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.ETFBasketListQueryResp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ETFBasketListQueryResp::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.ETFBasketListQueryResp.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ETFBasketListQueryResp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.ETFBasketListQueryResp.request_id)
}

// -------------------------------------------------------------------

// StockQueryCaptialReqt

// optional int32 funcid = 1 [default = 11002010];
inline bool StockQueryCaptialReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StockQueryCaptialReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StockQueryCaptialReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StockQueryCaptialReqt::clear_funcid() {
  funcid_ = 11002010;
  clear_has_funcid();
}
inline ::google::protobuf::int32 StockQueryCaptialReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryCaptialReqt.funcid)
  return funcid_;
}
inline void StockQueryCaptialReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryCaptialReqt.funcid)
}

// optional string moneytype = 2;
inline bool StockQueryCaptialReqt::has_moneytype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockQueryCaptialReqt::set_has_moneytype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockQueryCaptialReqt::clear_has_moneytype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockQueryCaptialReqt::clear_moneytype() {
  moneytype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_moneytype();
}
inline const ::std::string& StockQueryCaptialReqt::moneytype() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryCaptialReqt.moneytype)
  return moneytype_.GetNoArena();
}
inline void StockQueryCaptialReqt::set_moneytype(const ::std::string& value) {
  set_has_moneytype();
  moneytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockQueryCaptialReqt.moneytype)
}
#if LANG_CXX11
inline void StockQueryCaptialReqt::set_moneytype(::std::string&& value) {
  set_has_moneytype();
  moneytype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockQueryCaptialReqt.moneytype)
}
#endif
inline void StockQueryCaptialReqt::set_moneytype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_moneytype();
  moneytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockQueryCaptialReqt.moneytype)
}
inline void StockQueryCaptialReqt::set_moneytype(const char* value, size_t size) {
  set_has_moneytype();
  moneytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockQueryCaptialReqt.moneytype)
}
inline ::std::string* StockQueryCaptialReqt::mutable_moneytype() {
  set_has_moneytype();
  // @@protoc_insertion_point(field_mutable:autotrade.StockQueryCaptialReqt.moneytype)
  return moneytype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockQueryCaptialReqt::release_moneytype() {
  // @@protoc_insertion_point(field_release:autotrade.StockQueryCaptialReqt.moneytype)
  if (!has_moneytype()) {
    return NULL;
  }
  clear_has_moneytype();
  return moneytype_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQueryCaptialReqt::set_allocated_moneytype(::std::string* moneytype) {
  if (moneytype != NULL) {
    set_has_moneytype();
  } else {
    clear_has_moneytype();
  }
  moneytype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), moneytype);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockQueryCaptialReqt.moneytype)
}

// optional string request_id = 3;
inline bool StockQueryCaptialReqt::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockQueryCaptialReqt::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockQueryCaptialReqt::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockQueryCaptialReqt::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& StockQueryCaptialReqt::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryCaptialReqt.request_id)
  return request_id_.GetNoArena();
}
inline void StockQueryCaptialReqt::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockQueryCaptialReqt.request_id)
}
#if LANG_CXX11
inline void StockQueryCaptialReqt::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockQueryCaptialReqt.request_id)
}
#endif
inline void StockQueryCaptialReqt::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockQueryCaptialReqt.request_id)
}
inline void StockQueryCaptialReqt::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockQueryCaptialReqt.request_id)
}
inline ::std::string* StockQueryCaptialReqt::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockQueryCaptialReqt.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockQueryCaptialReqt::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockQueryCaptialReqt.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQueryCaptialReqt::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockQueryCaptialReqt.request_id)
}

// optional int64 request_time = 4 [default = 0];
inline bool StockQueryCaptialReqt::has_request_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StockQueryCaptialReqt::set_has_request_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StockQueryCaptialReqt::clear_has_request_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StockQueryCaptialReqt::clear_request_time() {
  request_time_ = GOOGLE_LONGLONG(0);
  clear_has_request_time();
}
inline ::google::protobuf::int64 StockQueryCaptialReqt::request_time() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryCaptialReqt.request_time)
  return request_time_;
}
inline void StockQueryCaptialReqt::set_request_time(::google::protobuf::int64 value) {
  set_has_request_time();
  request_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryCaptialReqt.request_time)
}

// optional int64 active_interval = 5 [default = 1000];
inline bool StockQueryCaptialReqt::has_active_interval() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StockQueryCaptialReqt::set_has_active_interval() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StockQueryCaptialReqt::clear_has_active_interval() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StockQueryCaptialReqt::clear_active_interval() {
  active_interval_ = GOOGLE_LONGLONG(1000);
  clear_has_active_interval();
}
inline ::google::protobuf::int64 StockQueryCaptialReqt::active_interval() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryCaptialReqt.active_interval)
  return active_interval_;
}
inline void StockQueryCaptialReqt::set_active_interval(::google::protobuf::int64 value) {
  set_has_active_interval();
  active_interval_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryCaptialReqt.active_interval)
}

// optional string fund_id = 6;
inline bool StockQueryCaptialReqt::has_fund_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StockQueryCaptialReqt::set_has_fund_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StockQueryCaptialReqt::clear_has_fund_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StockQueryCaptialReqt::clear_fund_id() {
  fund_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fund_id();
}
inline const ::std::string& StockQueryCaptialReqt::fund_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryCaptialReqt.fund_id)
  return fund_id_.GetNoArena();
}
inline void StockQueryCaptialReqt::set_fund_id(const ::std::string& value) {
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockQueryCaptialReqt.fund_id)
}
#if LANG_CXX11
inline void StockQueryCaptialReqt::set_fund_id(::std::string&& value) {
  set_has_fund_id();
  fund_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockQueryCaptialReqt.fund_id)
}
#endif
inline void StockQueryCaptialReqt::set_fund_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockQueryCaptialReqt.fund_id)
}
inline void StockQueryCaptialReqt::set_fund_id(const char* value, size_t size) {
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockQueryCaptialReqt.fund_id)
}
inline ::std::string* StockQueryCaptialReqt::mutable_fund_id() {
  set_has_fund_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockQueryCaptialReqt.fund_id)
  return fund_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockQueryCaptialReqt::release_fund_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockQueryCaptialReqt.fund_id)
  if (!has_fund_id()) {
    return NULL;
  }
  clear_has_fund_id();
  return fund_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQueryCaptialReqt::set_allocated_fund_id(::std::string* fund_id) {
  if (fund_id != NULL) {
    set_has_fund_id();
  } else {
    clear_has_fund_id();
  }
  fund_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fund_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockQueryCaptialReqt.fund_id)
}

// optional string session_id = 7;
inline bool StockQueryCaptialReqt::has_session_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StockQueryCaptialReqt::set_has_session_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StockQueryCaptialReqt::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StockQueryCaptialReqt::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_session_id();
}
inline const ::std::string& StockQueryCaptialReqt::session_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryCaptialReqt.session_id)
  return session_id_.GetNoArena();
}
inline void StockQueryCaptialReqt::set_session_id(const ::std::string& value) {
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockQueryCaptialReqt.session_id)
}
#if LANG_CXX11
inline void StockQueryCaptialReqt::set_session_id(::std::string&& value) {
  set_has_session_id();
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockQueryCaptialReqt.session_id)
}
#endif
inline void StockQueryCaptialReqt::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockQueryCaptialReqt.session_id)
}
inline void StockQueryCaptialReqt::set_session_id(const char* value, size_t size) {
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockQueryCaptialReqt.session_id)
}
inline ::std::string* StockQueryCaptialReqt::mutable_session_id() {
  set_has_session_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockQueryCaptialReqt.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockQueryCaptialReqt::release_session_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockQueryCaptialReqt.session_id)
  if (!has_session_id()) {
    return NULL;
  }
  clear_has_session_id();
  return session_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQueryCaptialReqt::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    set_has_session_id();
  } else {
    clear_has_session_id();
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockQueryCaptialReqt.session_id)
}

// -------------------------------------------------------------------

// StockQueryCapitalReqt

// optional int32 funcid = 1 [default = 11002010];
inline bool StockQueryCapitalReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StockQueryCapitalReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StockQueryCapitalReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StockQueryCapitalReqt::clear_funcid() {
  funcid_ = 11002010;
  clear_has_funcid();
}
inline ::google::protobuf::int32 StockQueryCapitalReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryCapitalReqt.funcid)
  return funcid_;
}
inline void StockQueryCapitalReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryCapitalReqt.funcid)
}

// optional string moneytype = 2;
inline bool StockQueryCapitalReqt::has_moneytype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockQueryCapitalReqt::set_has_moneytype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockQueryCapitalReqt::clear_has_moneytype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockQueryCapitalReqt::clear_moneytype() {
  moneytype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_moneytype();
}
inline const ::std::string& StockQueryCapitalReqt::moneytype() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryCapitalReqt.moneytype)
  return moneytype_.GetNoArena();
}
inline void StockQueryCapitalReqt::set_moneytype(const ::std::string& value) {
  set_has_moneytype();
  moneytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockQueryCapitalReqt.moneytype)
}
#if LANG_CXX11
inline void StockQueryCapitalReqt::set_moneytype(::std::string&& value) {
  set_has_moneytype();
  moneytype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockQueryCapitalReqt.moneytype)
}
#endif
inline void StockQueryCapitalReqt::set_moneytype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_moneytype();
  moneytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockQueryCapitalReqt.moneytype)
}
inline void StockQueryCapitalReqt::set_moneytype(const char* value, size_t size) {
  set_has_moneytype();
  moneytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockQueryCapitalReqt.moneytype)
}
inline ::std::string* StockQueryCapitalReqt::mutable_moneytype() {
  set_has_moneytype();
  // @@protoc_insertion_point(field_mutable:autotrade.StockQueryCapitalReqt.moneytype)
  return moneytype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockQueryCapitalReqt::release_moneytype() {
  // @@protoc_insertion_point(field_release:autotrade.StockQueryCapitalReqt.moneytype)
  if (!has_moneytype()) {
    return NULL;
  }
  clear_has_moneytype();
  return moneytype_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQueryCapitalReqt::set_allocated_moneytype(::std::string* moneytype) {
  if (moneytype != NULL) {
    set_has_moneytype();
  } else {
    clear_has_moneytype();
  }
  moneytype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), moneytype);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockQueryCapitalReqt.moneytype)
}

// optional string request_id = 3;
inline bool StockQueryCapitalReqt::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockQueryCapitalReqt::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockQueryCapitalReqt::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockQueryCapitalReqt::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& StockQueryCapitalReqt::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryCapitalReqt.request_id)
  return request_id_.GetNoArena();
}
inline void StockQueryCapitalReqt::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockQueryCapitalReqt.request_id)
}
#if LANG_CXX11
inline void StockQueryCapitalReqt::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockQueryCapitalReqt.request_id)
}
#endif
inline void StockQueryCapitalReqt::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockQueryCapitalReqt.request_id)
}
inline void StockQueryCapitalReqt::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockQueryCapitalReqt.request_id)
}
inline ::std::string* StockQueryCapitalReqt::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockQueryCapitalReqt.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockQueryCapitalReqt::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockQueryCapitalReqt.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQueryCapitalReqt::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockQueryCapitalReqt.request_id)
}

// optional int64 request_time = 4 [default = 0];
inline bool StockQueryCapitalReqt::has_request_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StockQueryCapitalReqt::set_has_request_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StockQueryCapitalReqt::clear_has_request_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StockQueryCapitalReqt::clear_request_time() {
  request_time_ = GOOGLE_LONGLONG(0);
  clear_has_request_time();
}
inline ::google::protobuf::int64 StockQueryCapitalReqt::request_time() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryCapitalReqt.request_time)
  return request_time_;
}
inline void StockQueryCapitalReqt::set_request_time(::google::protobuf::int64 value) {
  set_has_request_time();
  request_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryCapitalReqt.request_time)
}

// optional int64 active_interval = 5 [default = 1000];
inline bool StockQueryCapitalReqt::has_active_interval() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StockQueryCapitalReqt::set_has_active_interval() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StockQueryCapitalReqt::clear_has_active_interval() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StockQueryCapitalReqt::clear_active_interval() {
  active_interval_ = GOOGLE_LONGLONG(1000);
  clear_has_active_interval();
}
inline ::google::protobuf::int64 StockQueryCapitalReqt::active_interval() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryCapitalReqt.active_interval)
  return active_interval_;
}
inline void StockQueryCapitalReqt::set_active_interval(::google::protobuf::int64 value) {
  set_has_active_interval();
  active_interval_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryCapitalReqt.active_interval)
}

// -------------------------------------------------------------------

// StockCapital

// optional int32 funcid = 1 [default = 11102010];
inline bool StockCapital::has_funcid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StockCapital::set_has_funcid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StockCapital::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StockCapital::clear_funcid() {
  funcid_ = 11102010;
  clear_has_funcid();
}
inline ::google::protobuf::int32 StockCapital::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.StockCapital.funcid)
  return funcid_;
}
inline void StockCapital::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockCapital.funcid)
}

// optional string moneytype = 2;
inline bool StockCapital::has_moneytype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockCapital::set_has_moneytype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockCapital::clear_has_moneytype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockCapital::clear_moneytype() {
  moneytype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_moneytype();
}
inline const ::std::string& StockCapital::moneytype() const {
  // @@protoc_insertion_point(field_get:autotrade.StockCapital.moneytype)
  return moneytype_.GetNoArena();
}
inline void StockCapital::set_moneytype(const ::std::string& value) {
  set_has_moneytype();
  moneytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockCapital.moneytype)
}
#if LANG_CXX11
inline void StockCapital::set_moneytype(::std::string&& value) {
  set_has_moneytype();
  moneytype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockCapital.moneytype)
}
#endif
inline void StockCapital::set_moneytype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_moneytype();
  moneytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockCapital.moneytype)
}
inline void StockCapital::set_moneytype(const char* value, size_t size) {
  set_has_moneytype();
  moneytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockCapital.moneytype)
}
inline ::std::string* StockCapital::mutable_moneytype() {
  set_has_moneytype();
  // @@protoc_insertion_point(field_mutable:autotrade.StockCapital.moneytype)
  return moneytype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockCapital::release_moneytype() {
  // @@protoc_insertion_point(field_release:autotrade.StockCapital.moneytype)
  if (!has_moneytype()) {
    return NULL;
  }
  clear_has_moneytype();
  return moneytype_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockCapital::set_allocated_moneytype(::std::string* moneytype) {
  if (moneytype != NULL) {
    set_has_moneytype();
  } else {
    clear_has_moneytype();
  }
  moneytype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), moneytype);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockCapital.moneytype)
}

// required double fund_bal = 3;
inline bool StockCapital::has_fund_bal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StockCapital::set_has_fund_bal() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StockCapital::clear_has_fund_bal() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StockCapital::clear_fund_bal() {
  fund_bal_ = 0;
  clear_has_fund_bal();
}
inline double StockCapital::fund_bal() const {
  // @@protoc_insertion_point(field_get:autotrade.StockCapital.fund_bal)
  return fund_bal_;
}
inline void StockCapital::set_fund_bal(double value) {
  set_has_fund_bal();
  fund_bal_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockCapital.fund_bal)
}

// required double fund_ava = 4;
inline bool StockCapital::has_fund_ava() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StockCapital::set_has_fund_ava() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StockCapital::clear_has_fund_ava() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StockCapital::clear_fund_ava() {
  fund_ava_ = 0;
  clear_has_fund_ava();
}
inline double StockCapital::fund_ava() const {
  // @@protoc_insertion_point(field_get:autotrade.StockCapital.fund_ava)
  return fund_ava_;
}
inline void StockCapital::set_fund_ava(double value) {
  set_has_fund_ava();
  fund_ava_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockCapital.fund_ava)
}

// required double market_value = 5;
inline bool StockCapital::has_market_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StockCapital::set_has_market_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StockCapital::clear_has_market_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StockCapital::clear_market_value() {
  market_value_ = 0;
  clear_has_market_value();
}
inline double StockCapital::market_value() const {
  // @@protoc_insertion_point(field_get:autotrade.StockCapital.market_value)
  return market_value_;
}
inline void StockCapital::set_market_value(double value) {
  set_has_market_value();
  market_value_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockCapital.market_value)
}

// optional string request_id = 6;
inline bool StockCapital::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockCapital::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockCapital::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockCapital::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& StockCapital::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockCapital.request_id)
  return request_id_.GetNoArena();
}
inline void StockCapital::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockCapital.request_id)
}
#if LANG_CXX11
inline void StockCapital::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockCapital.request_id)
}
#endif
inline void StockCapital::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockCapital.request_id)
}
inline void StockCapital::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockCapital.request_id)
}
inline ::std::string* StockCapital::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockCapital.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockCapital::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockCapital.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockCapital::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockCapital.request_id)
}

// -------------------------------------------------------------------

// StockQueryPositionReqt

// optional int32 funcid = 1 [default = 11002006];
inline bool StockQueryPositionReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void StockQueryPositionReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void StockQueryPositionReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void StockQueryPositionReqt::clear_funcid() {
  funcid_ = 11002006;
  clear_has_funcid();
}
inline ::google::protobuf::int32 StockQueryPositionReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryPositionReqt.funcid)
  return funcid_;
}
inline void StockQueryPositionReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryPositionReqt.funcid)
}

// optional string code = 2;
inline bool StockQueryPositionReqt::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockQueryPositionReqt::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockQueryPositionReqt::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockQueryPositionReqt::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& StockQueryPositionReqt::code() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryPositionReqt.code)
  return code_.GetNoArena();
}
inline void StockQueryPositionReqt::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockQueryPositionReqt.code)
}
#if LANG_CXX11
inline void StockQueryPositionReqt::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockQueryPositionReqt.code)
}
#endif
inline void StockQueryPositionReqt::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockQueryPositionReqt.code)
}
inline void StockQueryPositionReqt::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockQueryPositionReqt.code)
}
inline ::std::string* StockQueryPositionReqt::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:autotrade.StockQueryPositionReqt.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockQueryPositionReqt::release_code() {
  // @@protoc_insertion_point(field_release:autotrade.StockQueryPositionReqt.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQueryPositionReqt::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockQueryPositionReqt.code)
}

// optional uint32 market = 3;
inline bool StockQueryPositionReqt::has_market() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StockQueryPositionReqt::set_has_market() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StockQueryPositionReqt::clear_has_market() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StockQueryPositionReqt::clear_market() {
  market_ = 0u;
  clear_has_market();
}
inline ::google::protobuf::uint32 StockQueryPositionReqt::market() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryPositionReqt.market)
  return market_;
}
inline void StockQueryPositionReqt::set_market(::google::protobuf::uint32 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryPositionReqt.market)
}

// optional uint32 query_count = 4 [default = 500];
inline bool StockQueryPositionReqt::has_query_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void StockQueryPositionReqt::set_has_query_count() {
  _has_bits_[0] |= 0x00000200u;
}
inline void StockQueryPositionReqt::clear_has_query_count() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void StockQueryPositionReqt::clear_query_count() {
  query_count_ = 500u;
  clear_has_query_count();
}
inline ::google::protobuf::uint32 StockQueryPositionReqt::query_count() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryPositionReqt.query_count)
  return query_count_;
}
inline void StockQueryPositionReqt::set_query_count(::google::protobuf::uint32 value) {
  set_has_query_count();
  query_count_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryPositionReqt.query_count)
}

// optional .autotrade.StockQueryPositionReqt.QueryType query_type = 5 [default = Type_ONCE];
inline bool StockQueryPositionReqt::has_query_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StockQueryPositionReqt::set_has_query_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StockQueryPositionReqt::clear_has_query_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StockQueryPositionReqt::clear_query_type() {
  query_type_ = 0;
  clear_has_query_type();
}
inline ::autotrade::StockQueryPositionReqt_QueryType StockQueryPositionReqt::query_type() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryPositionReqt.query_type)
  return static_cast< ::autotrade::StockQueryPositionReqt_QueryType >(query_type_);
}
inline void StockQueryPositionReqt::set_query_type(::autotrade::StockQueryPositionReqt_QueryType value) {
  assert(::autotrade::StockQueryPositionReqt_QueryType_IsValid(value));
  set_has_query_type();
  query_type_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryPositionReqt.query_type)
}

// optional string start_pos = 6 [default = ""];
inline bool StockQueryPositionReqt::has_start_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockQueryPositionReqt::set_has_start_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockQueryPositionReqt::clear_has_start_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockQueryPositionReqt::clear_start_pos() {
  start_pos_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_start_pos();
}
inline const ::std::string& StockQueryPositionReqt::start_pos() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryPositionReqt.start_pos)
  return start_pos_.GetNoArena();
}
inline void StockQueryPositionReqt::set_start_pos(const ::std::string& value) {
  set_has_start_pos();
  start_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockQueryPositionReqt.start_pos)
}
#if LANG_CXX11
inline void StockQueryPositionReqt::set_start_pos(::std::string&& value) {
  set_has_start_pos();
  start_pos_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockQueryPositionReqt.start_pos)
}
#endif
inline void StockQueryPositionReqt::set_start_pos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_start_pos();
  start_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockQueryPositionReqt.start_pos)
}
inline void StockQueryPositionReqt::set_start_pos(const char* value, size_t size) {
  set_has_start_pos();
  start_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockQueryPositionReqt.start_pos)
}
inline ::std::string* StockQueryPositionReqt::mutable_start_pos() {
  set_has_start_pos();
  // @@protoc_insertion_point(field_mutable:autotrade.StockQueryPositionReqt.start_pos)
  return start_pos_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockQueryPositionReqt::release_start_pos() {
  // @@protoc_insertion_point(field_release:autotrade.StockQueryPositionReqt.start_pos)
  if (!has_start_pos()) {
    return NULL;
  }
  clear_has_start_pos();
  return start_pos_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQueryPositionReqt::set_allocated_start_pos(::std::string* start_pos) {
  if (start_pos != NULL) {
    set_has_start_pos();
  } else {
    clear_has_start_pos();
  }
  start_pos_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_pos);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockQueryPositionReqt.start_pos)
}

// optional string request_id = 7;
inline bool StockQueryPositionReqt::has_request_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StockQueryPositionReqt::set_has_request_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StockQueryPositionReqt::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StockQueryPositionReqt::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& StockQueryPositionReqt::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryPositionReqt.request_id)
  return request_id_.GetNoArena();
}
inline void StockQueryPositionReqt::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockQueryPositionReqt.request_id)
}
#if LANG_CXX11
inline void StockQueryPositionReqt::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockQueryPositionReqt.request_id)
}
#endif
inline void StockQueryPositionReqt::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockQueryPositionReqt.request_id)
}
inline void StockQueryPositionReqt::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockQueryPositionReqt.request_id)
}
inline ::std::string* StockQueryPositionReqt::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockQueryPositionReqt.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockQueryPositionReqt::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockQueryPositionReqt.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQueryPositionReqt::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockQueryPositionReqt.request_id)
}

// optional int64 request_time = 8 [default = 0];
inline bool StockQueryPositionReqt::has_request_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StockQueryPositionReqt::set_has_request_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StockQueryPositionReqt::clear_has_request_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StockQueryPositionReqt::clear_request_time() {
  request_time_ = GOOGLE_LONGLONG(0);
  clear_has_request_time();
}
inline ::google::protobuf::int64 StockQueryPositionReqt::request_time() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryPositionReqt.request_time)
  return request_time_;
}
inline void StockQueryPositionReqt::set_request_time(::google::protobuf::int64 value) {
  set_has_request_time();
  request_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryPositionReqt.request_time)
}

// optional int64 active_interval = 9 [default = 1000];
inline bool StockQueryPositionReqt::has_active_interval() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void StockQueryPositionReqt::set_has_active_interval() {
  _has_bits_[0] |= 0x00000400u;
}
inline void StockQueryPositionReqt::clear_has_active_interval() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void StockQueryPositionReqt::clear_active_interval() {
  active_interval_ = GOOGLE_LONGLONG(1000);
  clear_has_active_interval();
}
inline ::google::protobuf::int64 StockQueryPositionReqt::active_interval() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryPositionReqt.active_interval)
  return active_interval_;
}
inline void StockQueryPositionReqt::set_active_interval(::google::protobuf::int64 value) {
  set_has_active_interval();
  active_interval_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryPositionReqt.active_interval)
}

// optional string fund_id = 10;
inline bool StockQueryPositionReqt::has_fund_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StockQueryPositionReqt::set_has_fund_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StockQueryPositionReqt::clear_has_fund_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StockQueryPositionReqt::clear_fund_id() {
  fund_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fund_id();
}
inline const ::std::string& StockQueryPositionReqt::fund_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryPositionReqt.fund_id)
  return fund_id_.GetNoArena();
}
inline void StockQueryPositionReqt::set_fund_id(const ::std::string& value) {
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockQueryPositionReqt.fund_id)
}
#if LANG_CXX11
inline void StockQueryPositionReqt::set_fund_id(::std::string&& value) {
  set_has_fund_id();
  fund_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockQueryPositionReqt.fund_id)
}
#endif
inline void StockQueryPositionReqt::set_fund_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockQueryPositionReqt.fund_id)
}
inline void StockQueryPositionReqt::set_fund_id(const char* value, size_t size) {
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockQueryPositionReqt.fund_id)
}
inline ::std::string* StockQueryPositionReqt::mutable_fund_id() {
  set_has_fund_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockQueryPositionReqt.fund_id)
  return fund_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockQueryPositionReqt::release_fund_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockQueryPositionReqt.fund_id)
  if (!has_fund_id()) {
    return NULL;
  }
  clear_has_fund_id();
  return fund_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQueryPositionReqt::set_allocated_fund_id(::std::string* fund_id) {
  if (fund_id != NULL) {
    set_has_fund_id();
  } else {
    clear_has_fund_id();
  }
  fund_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fund_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockQueryPositionReqt.fund_id)
}

// optional string session_id = 11;
inline bool StockQueryPositionReqt::has_session_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StockQueryPositionReqt::set_has_session_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StockQueryPositionReqt::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StockQueryPositionReqt::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_session_id();
}
inline const ::std::string& StockQueryPositionReqt::session_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryPositionReqt.session_id)
  return session_id_.GetNoArena();
}
inline void StockQueryPositionReqt::set_session_id(const ::std::string& value) {
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockQueryPositionReqt.session_id)
}
#if LANG_CXX11
inline void StockQueryPositionReqt::set_session_id(::std::string&& value) {
  set_has_session_id();
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockQueryPositionReqt.session_id)
}
#endif
inline void StockQueryPositionReqt::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockQueryPositionReqt.session_id)
}
inline void StockQueryPositionReqt::set_session_id(const char* value, size_t size) {
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockQueryPositionReqt.session_id)
}
inline ::std::string* StockQueryPositionReqt::mutable_session_id() {
  set_has_session_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockQueryPositionReqt.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockQueryPositionReqt::release_session_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockQueryPositionReqt.session_id)
  if (!has_session_id()) {
    return NULL;
  }
  clear_has_session_id();
  return session_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQueryPositionReqt::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    set_has_session_id();
  } else {
    clear_has_session_id();
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockQueryPositionReqt.session_id)
}

// -------------------------------------------------------------------

// StockPosition_Position

// required uint32 market = 1;
inline bool StockPosition_Position::has_market() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void StockPosition_Position::set_has_market() {
  _has_bits_[0] |= 0x00004000u;
}
inline void StockPosition_Position::clear_has_market() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void StockPosition_Position::clear_market() {
  market_ = 0u;
  clear_has_market();
}
inline ::google::protobuf::uint32 StockPosition_Position::market() const {
  // @@protoc_insertion_point(field_get:autotrade.StockPosition.Position.market)
  return market_;
}
inline void StockPosition_Position::set_market(::google::protobuf::uint32 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockPosition.Position.market)
}

// required string code = 2;
inline bool StockPosition_Position::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockPosition_Position::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockPosition_Position::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockPosition_Position::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& StockPosition_Position::code() const {
  // @@protoc_insertion_point(field_get:autotrade.StockPosition.Position.code)
  return code_.GetNoArena();
}
inline void StockPosition_Position::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockPosition.Position.code)
}
#if LANG_CXX11
inline void StockPosition_Position::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockPosition.Position.code)
}
#endif
inline void StockPosition_Position::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockPosition.Position.code)
}
inline void StockPosition_Position::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockPosition.Position.code)
}
inline ::std::string* StockPosition_Position::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:autotrade.StockPosition.Position.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockPosition_Position::release_code() {
  // @@protoc_insertion_point(field_release:autotrade.StockPosition.Position.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockPosition_Position::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockPosition.Position.code)
}

// optional string name = 3;
inline bool StockPosition_Position::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockPosition_Position::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockPosition_Position::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockPosition_Position::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& StockPosition_Position::name() const {
  // @@protoc_insertion_point(field_get:autotrade.StockPosition.Position.name)
  return name_.GetNoArena();
}
inline void StockPosition_Position::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockPosition.Position.name)
}
#if LANG_CXX11
inline void StockPosition_Position::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockPosition.Position.name)
}
#endif
inline void StockPosition_Position::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockPosition.Position.name)
}
inline void StockPosition_Position::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockPosition.Position.name)
}
inline ::std::string* StockPosition_Position::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:autotrade.StockPosition.Position.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockPosition_Position::release_name() {
  // @@protoc_insertion_point(field_release:autotrade.StockPosition.Position.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockPosition_Position::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockPosition.Position.name)
}

// required int64 bal = 4;
inline bool StockPosition_Position::has_bal() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StockPosition_Position::set_has_bal() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StockPosition_Position::clear_has_bal() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StockPosition_Position::clear_bal() {
  bal_ = GOOGLE_LONGLONG(0);
  clear_has_bal();
}
inline ::google::protobuf::int64 StockPosition_Position::bal() const {
  // @@protoc_insertion_point(field_get:autotrade.StockPosition.Position.bal)
  return bal_;
}
inline void StockPosition_Position::set_bal(::google::protobuf::int64 value) {
  set_has_bal();
  bal_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockPosition.Position.bal)
}

// required int64 can_sell_qty = 5;
inline bool StockPosition_Position::has_can_sell_qty() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StockPosition_Position::set_has_can_sell_qty() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StockPosition_Position::clear_has_can_sell_qty() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StockPosition_Position::clear_can_sell_qty() {
  can_sell_qty_ = GOOGLE_LONGLONG(0);
  clear_has_can_sell_qty();
}
inline ::google::protobuf::int64 StockPosition_Position::can_sell_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.StockPosition.Position.can_sell_qty)
  return can_sell_qty_;
}
inline void StockPosition_Position::set_can_sell_qty(::google::protobuf::int64 value) {
  set_has_can_sell_qty();
  can_sell_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockPosition.Position.can_sell_qty)
}

// optional int64 can_create_qty = 6;
inline bool StockPosition_Position::has_can_create_qty() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StockPosition_Position::set_has_can_create_qty() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StockPosition_Position::clear_has_can_create_qty() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StockPosition_Position::clear_can_create_qty() {
  can_create_qty_ = GOOGLE_LONGLONG(0);
  clear_has_can_create_qty();
}
inline ::google::protobuf::int64 StockPosition_Position::can_create_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.StockPosition.Position.can_create_qty)
  return can_create_qty_;
}
inline void StockPosition_Position::set_can_create_qty(::google::protobuf::int64 value) {
  set_has_can_create_qty();
  can_create_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockPosition.Position.can_create_qty)
}

// optional int64 can_redeem_qty = 7;
inline bool StockPosition_Position::has_can_redeem_qty() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StockPosition_Position::set_has_can_redeem_qty() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StockPosition_Position::clear_has_can_redeem_qty() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StockPosition_Position::clear_can_redeem_qty() {
  can_redeem_qty_ = GOOGLE_LONGLONG(0);
  clear_has_can_redeem_qty();
}
inline ::google::protobuf::int64 StockPosition_Position::can_redeem_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.StockPosition.Position.can_redeem_qty)
  return can_redeem_qty_;
}
inline void StockPosition_Position::set_can_redeem_qty(::google::protobuf::int64 value) {
  set_has_can_redeem_qty();
  can_redeem_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockPosition.Position.can_redeem_qty)
}

// optional int64 buy_frz_qty = 8;
inline bool StockPosition_Position::has_buy_frz_qty() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StockPosition_Position::set_has_buy_frz_qty() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StockPosition_Position::clear_has_buy_frz_qty() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StockPosition_Position::clear_buy_frz_qty() {
  buy_frz_qty_ = GOOGLE_LONGLONG(0);
  clear_has_buy_frz_qty();
}
inline ::google::protobuf::int64 StockPosition_Position::buy_frz_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.StockPosition.Position.buy_frz_qty)
  return buy_frz_qty_;
}
inline void StockPosition_Position::set_buy_frz_qty(::google::protobuf::int64 value) {
  set_has_buy_frz_qty();
  buy_frz_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockPosition.Position.buy_frz_qty)
}

// optional int64 sell_frz_qty = 9;
inline bool StockPosition_Position::has_sell_frz_qty() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void StockPosition_Position::set_has_sell_frz_qty() {
  _has_bits_[0] |= 0x00000100u;
}
inline void StockPosition_Position::clear_has_sell_frz_qty() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void StockPosition_Position::clear_sell_frz_qty() {
  sell_frz_qty_ = GOOGLE_LONGLONG(0);
  clear_has_sell_frz_qty();
}
inline ::google::protobuf::int64 StockPosition_Position::sell_frz_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.StockPosition.Position.sell_frz_qty)
  return sell_frz_qty_;
}
inline void StockPosition_Position::set_sell_frz_qty(::google::protobuf::int64 value) {
  set_has_sell_frz_qty();
  sell_frz_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockPosition.Position.sell_frz_qty)
}

// optional int64 td_buy_qty = 10;
inline bool StockPosition_Position::has_td_buy_qty() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void StockPosition_Position::set_has_td_buy_qty() {
  _has_bits_[0] |= 0x00000200u;
}
inline void StockPosition_Position::clear_has_td_buy_qty() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void StockPosition_Position::clear_td_buy_qty() {
  td_buy_qty_ = GOOGLE_LONGLONG(0);
  clear_has_td_buy_qty();
}
inline ::google::protobuf::int64 StockPosition_Position::td_buy_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.StockPosition.Position.td_buy_qty)
  return td_buy_qty_;
}
inline void StockPosition_Position::set_td_buy_qty(::google::protobuf::int64 value) {
  set_has_td_buy_qty();
  td_buy_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockPosition.Position.td_buy_qty)
}

// optional int64 td_sell_qty = 11;
inline bool StockPosition_Position::has_td_sell_qty() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void StockPosition_Position::set_has_td_sell_qty() {
  _has_bits_[0] |= 0x00000400u;
}
inline void StockPosition_Position::clear_has_td_sell_qty() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void StockPosition_Position::clear_td_sell_qty() {
  td_sell_qty_ = GOOGLE_LONGLONG(0);
  clear_has_td_sell_qty();
}
inline ::google::protobuf::int64 StockPosition_Position::td_sell_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.StockPosition.Position.td_sell_qty)
  return td_sell_qty_;
}
inline void StockPosition_Position::set_td_sell_qty(::google::protobuf::int64 value) {
  set_has_td_sell_qty();
  td_sell_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockPosition.Position.td_sell_qty)
}

// optional int64 yd_qty = 12;
inline bool StockPosition_Position::has_yd_qty() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void StockPosition_Position::set_has_yd_qty() {
  _has_bits_[0] |= 0x00000800u;
}
inline void StockPosition_Position::clear_has_yd_qty() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void StockPosition_Position::clear_yd_qty() {
  yd_qty_ = GOOGLE_LONGLONG(0);
  clear_has_yd_qty();
}
inline ::google::protobuf::int64 StockPosition_Position::yd_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.StockPosition.Position.yd_qty)
  return yd_qty_;
}
inline void StockPosition_Position::set_yd_qty(::google::protobuf::int64 value) {
  set_has_yd_qty();
  yd_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockPosition.Position.yd_qty)
}

// required double market_value = 13;
inline bool StockPosition_Position::has_market_value() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void StockPosition_Position::set_has_market_value() {
  _has_bits_[0] |= 0x00001000u;
}
inline void StockPosition_Position::clear_has_market_value() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void StockPosition_Position::clear_market_value() {
  market_value_ = 0;
  clear_has_market_value();
}
inline double StockPosition_Position::market_value() const {
  // @@protoc_insertion_point(field_get:autotrade.StockPosition.Position.market_value)
  return market_value_;
}
inline void StockPosition_Position::set_market_value(double value) {
  set_has_market_value();
  market_value_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockPosition.Position.market_value)
}

// required double cost_price = 14;
inline bool StockPosition_Position::has_cost_price() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void StockPosition_Position::set_has_cost_price() {
  _has_bits_[0] |= 0x00002000u;
}
inline void StockPosition_Position::clear_has_cost_price() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void StockPosition_Position::clear_cost_price() {
  cost_price_ = 0;
  clear_has_cost_price();
}
inline double StockPosition_Position::cost_price() const {
  // @@protoc_insertion_point(field_get:autotrade.StockPosition.Position.cost_price)
  return cost_price_;
}
inline void StockPosition_Position::set_cost_price(double value) {
  set_has_cost_price();
  cost_price_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockPosition.Position.cost_price)
}

// optional string start_pos = 15;
inline bool StockPosition_Position::has_start_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StockPosition_Position::set_has_start_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StockPosition_Position::clear_has_start_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StockPosition_Position::clear_start_pos() {
  start_pos_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_start_pos();
}
inline const ::std::string& StockPosition_Position::start_pos() const {
  // @@protoc_insertion_point(field_get:autotrade.StockPosition.Position.start_pos)
  return start_pos_.GetNoArena();
}
inline void StockPosition_Position::set_start_pos(const ::std::string& value) {
  set_has_start_pos();
  start_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockPosition.Position.start_pos)
}
#if LANG_CXX11
inline void StockPosition_Position::set_start_pos(::std::string&& value) {
  set_has_start_pos();
  start_pos_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockPosition.Position.start_pos)
}
#endif
inline void StockPosition_Position::set_start_pos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_start_pos();
  start_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockPosition.Position.start_pos)
}
inline void StockPosition_Position::set_start_pos(const char* value, size_t size) {
  set_has_start_pos();
  start_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockPosition.Position.start_pos)
}
inline ::std::string* StockPosition_Position::mutable_start_pos() {
  set_has_start_pos();
  // @@protoc_insertion_point(field_mutable:autotrade.StockPosition.Position.start_pos)
  return start_pos_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockPosition_Position::release_start_pos() {
  // @@protoc_insertion_point(field_release:autotrade.StockPosition.Position.start_pos)
  if (!has_start_pos()) {
    return NULL;
  }
  clear_has_start_pos();
  return start_pos_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockPosition_Position::set_allocated_start_pos(::std::string* start_pos) {
  if (start_pos != NULL) {
    set_has_start_pos();
  } else {
    clear_has_start_pos();
  }
  start_pos_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_pos);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockPosition.Position.start_pos)
}

// -------------------------------------------------------------------

// StockPosition

// optional int32 funcid = 1 [default = 11102006];
inline bool StockPosition::has_funcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StockPosition::set_has_funcid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StockPosition::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StockPosition::clear_funcid() {
  funcid_ = 11102006;
  clear_has_funcid();
}
inline ::google::protobuf::int32 StockPosition::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.StockPosition.funcid)
  return funcid_;
}
inline void StockPosition::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockPosition.funcid)
}

// repeated .autotrade.StockPosition.Position positions = 2;
inline int StockPosition::positions_size() const {
  return positions_.size();
}
inline void StockPosition::clear_positions() {
  positions_.Clear();
}
inline ::autotrade::StockPosition_Position* StockPosition::mutable_positions(int index) {
  // @@protoc_insertion_point(field_mutable:autotrade.StockPosition.positions)
  return positions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::autotrade::StockPosition_Position >*
StockPosition::mutable_positions() {
  // @@protoc_insertion_point(field_mutable_list:autotrade.StockPosition.positions)
  return &positions_;
}
inline const ::autotrade::StockPosition_Position& StockPosition::positions(int index) const {
  // @@protoc_insertion_point(field_get:autotrade.StockPosition.positions)
  return positions_.Get(index);
}
inline ::autotrade::StockPosition_Position* StockPosition::add_positions() {
  // @@protoc_insertion_point(field_add:autotrade.StockPosition.positions)
  return positions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::autotrade::StockPosition_Position >&
StockPosition::positions() const {
  // @@protoc_insertion_point(field_list:autotrade.StockPosition.positions)
  return positions_;
}

// optional string last_pos = 3;
inline bool StockPosition::has_last_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockPosition::set_has_last_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockPosition::clear_has_last_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockPosition::clear_last_pos() {
  last_pos_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_last_pos();
}
inline const ::std::string& StockPosition::last_pos() const {
  // @@protoc_insertion_point(field_get:autotrade.StockPosition.last_pos)
  return last_pos_.GetNoArena();
}
inline void StockPosition::set_last_pos(const ::std::string& value) {
  set_has_last_pos();
  last_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockPosition.last_pos)
}
#if LANG_CXX11
inline void StockPosition::set_last_pos(::std::string&& value) {
  set_has_last_pos();
  last_pos_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockPosition.last_pos)
}
#endif
inline void StockPosition::set_last_pos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_last_pos();
  last_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockPosition.last_pos)
}
inline void StockPosition::set_last_pos(const char* value, size_t size) {
  set_has_last_pos();
  last_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockPosition.last_pos)
}
inline ::std::string* StockPosition::mutable_last_pos() {
  set_has_last_pos();
  // @@protoc_insertion_point(field_mutable:autotrade.StockPosition.last_pos)
  return last_pos_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockPosition::release_last_pos() {
  // @@protoc_insertion_point(field_release:autotrade.StockPosition.last_pos)
  if (!has_last_pos()) {
    return NULL;
  }
  clear_has_last_pos();
  return last_pos_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockPosition::set_allocated_last_pos(::std::string* last_pos) {
  if (last_pos != NULL) {
    set_has_last_pos();
  } else {
    clear_has_last_pos();
  }
  last_pos_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_pos);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockPosition.last_pos)
}

// optional string request_id = 4;
inline bool StockPosition::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockPosition::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockPosition::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockPosition::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& StockPosition::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockPosition.request_id)
  return request_id_.GetNoArena();
}
inline void StockPosition::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockPosition.request_id)
}
#if LANG_CXX11
inline void StockPosition::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockPosition.request_id)
}
#endif
inline void StockPosition::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockPosition.request_id)
}
inline void StockPosition::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockPosition.request_id)
}
inline ::std::string* StockPosition::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockPosition.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockPosition::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockPosition.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockPosition::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockPosition.request_id)
}

// -------------------------------------------------------------------

// StockQueryDealDetailReqt

// optional int32 funcid = 1 [default = 11002004];
inline bool StockQueryDealDetailReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StockQueryDealDetailReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StockQueryDealDetailReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StockQueryDealDetailReqt::clear_funcid() {
  funcid_ = 11002004;
  clear_has_funcid();
}
inline ::google::protobuf::int32 StockQueryDealDetailReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryDealDetailReqt.funcid)
  return funcid_;
}
inline void StockQueryDealDetailReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryDealDetailReqt.funcid)
}

// optional string orderno = 2 [default = ""];
inline bool StockQueryDealDetailReqt::has_orderno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockQueryDealDetailReqt::set_has_orderno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockQueryDealDetailReqt::clear_has_orderno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockQueryDealDetailReqt::clear_orderno() {
  orderno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_orderno();
}
inline const ::std::string& StockQueryDealDetailReqt::orderno() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryDealDetailReqt.orderno)
  return orderno_.GetNoArena();
}
inline void StockQueryDealDetailReqt::set_orderno(const ::std::string& value) {
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockQueryDealDetailReqt.orderno)
}
#if LANG_CXX11
inline void StockQueryDealDetailReqt::set_orderno(::std::string&& value) {
  set_has_orderno();
  orderno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockQueryDealDetailReqt.orderno)
}
#endif
inline void StockQueryDealDetailReqt::set_orderno(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockQueryDealDetailReqt.orderno)
}
inline void StockQueryDealDetailReqt::set_orderno(const char* value, size_t size) {
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockQueryDealDetailReqt.orderno)
}
inline ::std::string* StockQueryDealDetailReqt::mutable_orderno() {
  set_has_orderno();
  // @@protoc_insertion_point(field_mutable:autotrade.StockQueryDealDetailReqt.orderno)
  return orderno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockQueryDealDetailReqt::release_orderno() {
  // @@protoc_insertion_point(field_release:autotrade.StockQueryDealDetailReqt.orderno)
  if (!has_orderno()) {
    return NULL;
  }
  clear_has_orderno();
  return orderno_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQueryDealDetailReqt::set_allocated_orderno(::std::string* orderno) {
  if (orderno != NULL) {
    set_has_orderno();
  } else {
    clear_has_orderno();
  }
  orderno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderno);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockQueryDealDetailReqt.orderno)
}

// optional uint32 query_count = 3 [default = 500];
inline bool StockQueryDealDetailReqt::has_query_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void StockQueryDealDetailReqt::set_has_query_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void StockQueryDealDetailReqt::clear_has_query_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void StockQueryDealDetailReqt::clear_query_count() {
  query_count_ = 500u;
  clear_has_query_count();
}
inline ::google::protobuf::uint32 StockQueryDealDetailReqt::query_count() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryDealDetailReqt.query_count)
  return query_count_;
}
inline void StockQueryDealDetailReqt::set_query_count(::google::protobuf::uint32 value) {
  set_has_query_count();
  query_count_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryDealDetailReqt.query_count)
}

// optional .autotrade.StockQueryDealDetailReqt.QueryType query_type = 4 [default = Type_ONCE];
inline bool StockQueryDealDetailReqt::has_query_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StockQueryDealDetailReqt::set_has_query_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StockQueryDealDetailReqt::clear_has_query_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StockQueryDealDetailReqt::clear_query_type() {
  query_type_ = 0;
  clear_has_query_type();
}
inline ::autotrade::StockQueryDealDetailReqt_QueryType StockQueryDealDetailReqt::query_type() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryDealDetailReqt.query_type)
  return static_cast< ::autotrade::StockQueryDealDetailReqt_QueryType >(query_type_);
}
inline void StockQueryDealDetailReqt::set_query_type(::autotrade::StockQueryDealDetailReqt_QueryType value) {
  assert(::autotrade::StockQueryDealDetailReqt_QueryType_IsValid(value));
  set_has_query_type();
  query_type_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryDealDetailReqt.query_type)
}

// optional string start_pos = 5 [default = ""];
inline bool StockQueryDealDetailReqt::has_start_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockQueryDealDetailReqt::set_has_start_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockQueryDealDetailReqt::clear_has_start_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockQueryDealDetailReqt::clear_start_pos() {
  start_pos_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_start_pos();
}
inline const ::std::string& StockQueryDealDetailReqt::start_pos() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryDealDetailReqt.start_pos)
  return start_pos_.GetNoArena();
}
inline void StockQueryDealDetailReqt::set_start_pos(const ::std::string& value) {
  set_has_start_pos();
  start_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockQueryDealDetailReqt.start_pos)
}
#if LANG_CXX11
inline void StockQueryDealDetailReqt::set_start_pos(::std::string&& value) {
  set_has_start_pos();
  start_pos_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockQueryDealDetailReqt.start_pos)
}
#endif
inline void StockQueryDealDetailReqt::set_start_pos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_start_pos();
  start_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockQueryDealDetailReqt.start_pos)
}
inline void StockQueryDealDetailReqt::set_start_pos(const char* value, size_t size) {
  set_has_start_pos();
  start_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockQueryDealDetailReqt.start_pos)
}
inline ::std::string* StockQueryDealDetailReqt::mutable_start_pos() {
  set_has_start_pos();
  // @@protoc_insertion_point(field_mutable:autotrade.StockQueryDealDetailReqt.start_pos)
  return start_pos_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockQueryDealDetailReqt::release_start_pos() {
  // @@protoc_insertion_point(field_release:autotrade.StockQueryDealDetailReqt.start_pos)
  if (!has_start_pos()) {
    return NULL;
  }
  clear_has_start_pos();
  return start_pos_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQueryDealDetailReqt::set_allocated_start_pos(::std::string* start_pos) {
  if (start_pos != NULL) {
    set_has_start_pos();
  } else {
    clear_has_start_pos();
  }
  start_pos_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_pos);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockQueryDealDetailReqt.start_pos)
}

// optional string request_id = 6;
inline bool StockQueryDealDetailReqt::has_request_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StockQueryDealDetailReqt::set_has_request_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StockQueryDealDetailReqt::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StockQueryDealDetailReqt::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& StockQueryDealDetailReqt::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryDealDetailReqt.request_id)
  return request_id_.GetNoArena();
}
inline void StockQueryDealDetailReqt::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockQueryDealDetailReqt.request_id)
}
#if LANG_CXX11
inline void StockQueryDealDetailReqt::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockQueryDealDetailReqt.request_id)
}
#endif
inline void StockQueryDealDetailReqt::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockQueryDealDetailReqt.request_id)
}
inline void StockQueryDealDetailReqt::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockQueryDealDetailReqt.request_id)
}
inline ::std::string* StockQueryDealDetailReqt::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockQueryDealDetailReqt.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockQueryDealDetailReqt::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockQueryDealDetailReqt.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQueryDealDetailReqt::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockQueryDealDetailReqt.request_id)
}

// optional int64 request_time = 7 [default = 0];
inline bool StockQueryDealDetailReqt::has_request_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StockQueryDealDetailReqt::set_has_request_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StockQueryDealDetailReqt::clear_has_request_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StockQueryDealDetailReqt::clear_request_time() {
  request_time_ = GOOGLE_LONGLONG(0);
  clear_has_request_time();
}
inline ::google::protobuf::int64 StockQueryDealDetailReqt::request_time() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryDealDetailReqt.request_time)
  return request_time_;
}
inline void StockQueryDealDetailReqt::set_request_time(::google::protobuf::int64 value) {
  set_has_request_time();
  request_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryDealDetailReqt.request_time)
}

// optional int64 active_interval = 8 [default = 1000];
inline bool StockQueryDealDetailReqt::has_active_interval() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void StockQueryDealDetailReqt::set_has_active_interval() {
  _has_bits_[0] |= 0x00000200u;
}
inline void StockQueryDealDetailReqt::clear_has_active_interval() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void StockQueryDealDetailReqt::clear_active_interval() {
  active_interval_ = GOOGLE_LONGLONG(1000);
  clear_has_active_interval();
}
inline ::google::protobuf::int64 StockQueryDealDetailReqt::active_interval() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryDealDetailReqt.active_interval)
  return active_interval_;
}
inline void StockQueryDealDetailReqt::set_active_interval(::google::protobuf::int64 value) {
  set_has_active_interval();
  active_interval_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockQueryDealDetailReqt.active_interval)
}

// optional string fund_id = 9;
inline bool StockQueryDealDetailReqt::has_fund_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StockQueryDealDetailReqt::set_has_fund_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StockQueryDealDetailReqt::clear_has_fund_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StockQueryDealDetailReqt::clear_fund_id() {
  fund_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fund_id();
}
inline const ::std::string& StockQueryDealDetailReqt::fund_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryDealDetailReqt.fund_id)
  return fund_id_.GetNoArena();
}
inline void StockQueryDealDetailReqt::set_fund_id(const ::std::string& value) {
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockQueryDealDetailReqt.fund_id)
}
#if LANG_CXX11
inline void StockQueryDealDetailReqt::set_fund_id(::std::string&& value) {
  set_has_fund_id();
  fund_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockQueryDealDetailReqt.fund_id)
}
#endif
inline void StockQueryDealDetailReqt::set_fund_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockQueryDealDetailReqt.fund_id)
}
inline void StockQueryDealDetailReqt::set_fund_id(const char* value, size_t size) {
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockQueryDealDetailReqt.fund_id)
}
inline ::std::string* StockQueryDealDetailReqt::mutable_fund_id() {
  set_has_fund_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockQueryDealDetailReqt.fund_id)
  return fund_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockQueryDealDetailReqt::release_fund_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockQueryDealDetailReqt.fund_id)
  if (!has_fund_id()) {
    return NULL;
  }
  clear_has_fund_id();
  return fund_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQueryDealDetailReqt::set_allocated_fund_id(::std::string* fund_id) {
  if (fund_id != NULL) {
    set_has_fund_id();
  } else {
    clear_has_fund_id();
  }
  fund_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fund_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockQueryDealDetailReqt.fund_id)
}

// optional string session_id = 10;
inline bool StockQueryDealDetailReqt::has_session_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StockQueryDealDetailReqt::set_has_session_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StockQueryDealDetailReqt::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StockQueryDealDetailReqt::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_session_id();
}
inline const ::std::string& StockQueryDealDetailReqt::session_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockQueryDealDetailReqt.session_id)
  return session_id_.GetNoArena();
}
inline void StockQueryDealDetailReqt::set_session_id(const ::std::string& value) {
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockQueryDealDetailReqt.session_id)
}
#if LANG_CXX11
inline void StockQueryDealDetailReqt::set_session_id(::std::string&& value) {
  set_has_session_id();
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockQueryDealDetailReqt.session_id)
}
#endif
inline void StockQueryDealDetailReqt::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockQueryDealDetailReqt.session_id)
}
inline void StockQueryDealDetailReqt::set_session_id(const char* value, size_t size) {
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockQueryDealDetailReqt.session_id)
}
inline ::std::string* StockQueryDealDetailReqt::mutable_session_id() {
  set_has_session_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockQueryDealDetailReqt.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockQueryDealDetailReqt::release_session_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockQueryDealDetailReqt.session_id)
  if (!has_session_id()) {
    return NULL;
  }
  clear_has_session_id();
  return session_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQueryDealDetailReqt::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    set_has_session_id();
  } else {
    clear_has_session_id();
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockQueryDealDetailReqt.session_id)
}

// -------------------------------------------------------------------

// StockDealDetail

// optional int32 funcid = 1 [default = 11102004];
inline bool StockDealDetail::has_funcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StockDealDetail::set_has_funcid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StockDealDetail::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StockDealDetail::clear_funcid() {
  funcid_ = 11102004;
  clear_has_funcid();
}
inline ::google::protobuf::int32 StockDealDetail::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.StockDealDetail.funcid)
  return funcid_;
}
inline void StockDealDetail::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.StockDealDetail.funcid)
}

// repeated .autotrade.RawStockKnock knocks = 2;
inline int StockDealDetail::knocks_size() const {
  return knocks_.size();
}
inline void StockDealDetail::clear_knocks() {
  knocks_.Clear();
}
inline ::autotrade::RawStockKnock* StockDealDetail::mutable_knocks(int index) {
  // @@protoc_insertion_point(field_mutable:autotrade.StockDealDetail.knocks)
  return knocks_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::autotrade::RawStockKnock >*
StockDealDetail::mutable_knocks() {
  // @@protoc_insertion_point(field_mutable_list:autotrade.StockDealDetail.knocks)
  return &knocks_;
}
inline const ::autotrade::RawStockKnock& StockDealDetail::knocks(int index) const {
  // @@protoc_insertion_point(field_get:autotrade.StockDealDetail.knocks)
  return knocks_.Get(index);
}
inline ::autotrade::RawStockKnock* StockDealDetail::add_knocks() {
  // @@protoc_insertion_point(field_add:autotrade.StockDealDetail.knocks)
  return knocks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::autotrade::RawStockKnock >&
StockDealDetail::knocks() const {
  // @@protoc_insertion_point(field_list:autotrade.StockDealDetail.knocks)
  return knocks_;
}

// optional string last_pos = 3;
inline bool StockDealDetail::has_last_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockDealDetail::set_has_last_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockDealDetail::clear_has_last_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockDealDetail::clear_last_pos() {
  last_pos_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_last_pos();
}
inline const ::std::string& StockDealDetail::last_pos() const {
  // @@protoc_insertion_point(field_get:autotrade.StockDealDetail.last_pos)
  return last_pos_.GetNoArena();
}
inline void StockDealDetail::set_last_pos(const ::std::string& value) {
  set_has_last_pos();
  last_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockDealDetail.last_pos)
}
#if LANG_CXX11
inline void StockDealDetail::set_last_pos(::std::string&& value) {
  set_has_last_pos();
  last_pos_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockDealDetail.last_pos)
}
#endif
inline void StockDealDetail::set_last_pos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_last_pos();
  last_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockDealDetail.last_pos)
}
inline void StockDealDetail::set_last_pos(const char* value, size_t size) {
  set_has_last_pos();
  last_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockDealDetail.last_pos)
}
inline ::std::string* StockDealDetail::mutable_last_pos() {
  set_has_last_pos();
  // @@protoc_insertion_point(field_mutable:autotrade.StockDealDetail.last_pos)
  return last_pos_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockDealDetail::release_last_pos() {
  // @@protoc_insertion_point(field_release:autotrade.StockDealDetail.last_pos)
  if (!has_last_pos()) {
    return NULL;
  }
  clear_has_last_pos();
  return last_pos_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockDealDetail::set_allocated_last_pos(::std::string* last_pos) {
  if (last_pos != NULL) {
    set_has_last_pos();
  } else {
    clear_has_last_pos();
  }
  last_pos_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_pos);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockDealDetail.last_pos)
}

// optional string request_id = 4;
inline bool StockDealDetail::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockDealDetail::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockDealDetail::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockDealDetail::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& StockDealDetail::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.StockDealDetail.request_id)
  return request_id_.GetNoArena();
}
inline void StockDealDetail::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.StockDealDetail.request_id)
}
#if LANG_CXX11
inline void StockDealDetail::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.StockDealDetail.request_id)
}
#endif
inline void StockDealDetail::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.StockDealDetail.request_id)
}
inline void StockDealDetail::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.StockDealDetail.request_id)
}
inline ::std::string* StockDealDetail::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.StockDealDetail.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockDealDetail::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.StockDealDetail.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockDealDetail::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.StockDealDetail.request_id)
}

// -------------------------------------------------------------------

// ETFBasketDynamicInfoReqt

// optional int32 funcid = 1 [default = 11002011];
inline bool ETFBasketDynamicInfoReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ETFBasketDynamicInfoReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ETFBasketDynamicInfoReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ETFBasketDynamicInfoReqt::clear_funcid() {
  funcid_ = 11002011;
  clear_has_funcid();
}
inline ::google::protobuf::int32 ETFBasketDynamicInfoReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasketDynamicInfoReqt.funcid)
  return funcid_;
}
inline void ETFBasketDynamicInfoReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.ETFBasketDynamicInfoReqt.funcid)
}

// required string code = 2;
inline bool ETFBasketDynamicInfoReqt::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ETFBasketDynamicInfoReqt::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ETFBasketDynamicInfoReqt::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ETFBasketDynamicInfoReqt::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& ETFBasketDynamicInfoReqt::code() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasketDynamicInfoReqt.code)
  return code_.GetNoArena();
}
inline void ETFBasketDynamicInfoReqt::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.ETFBasketDynamicInfoReqt.code)
}
#if LANG_CXX11
inline void ETFBasketDynamicInfoReqt::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.ETFBasketDynamicInfoReqt.code)
}
#endif
inline void ETFBasketDynamicInfoReqt::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.ETFBasketDynamicInfoReqt.code)
}
inline void ETFBasketDynamicInfoReqt::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.ETFBasketDynamicInfoReqt.code)
}
inline ::std::string* ETFBasketDynamicInfoReqt::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:autotrade.ETFBasketDynamicInfoReqt.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ETFBasketDynamicInfoReqt::release_code() {
  // @@protoc_insertion_point(field_release:autotrade.ETFBasketDynamicInfoReqt.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ETFBasketDynamicInfoReqt::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:autotrade.ETFBasketDynamicInfoReqt.code)
}

// required uint32 market = 3;
inline bool ETFBasketDynamicInfoReqt::has_market() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ETFBasketDynamicInfoReqt::set_has_market() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ETFBasketDynamicInfoReqt::clear_has_market() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ETFBasketDynamicInfoReqt::clear_market() {
  market_ = 0u;
  clear_has_market();
}
inline ::google::protobuf::uint32 ETFBasketDynamicInfoReqt::market() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasketDynamicInfoReqt.market)
  return market_;
}
inline void ETFBasketDynamicInfoReqt::set_market(::google::protobuf::uint32 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:autotrade.ETFBasketDynamicInfoReqt.market)
}

// optional string request_id = 4;
inline bool ETFBasketDynamicInfoReqt::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ETFBasketDynamicInfoReqt::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ETFBasketDynamicInfoReqt::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ETFBasketDynamicInfoReqt::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& ETFBasketDynamicInfoReqt::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasketDynamicInfoReqt.request_id)
  return request_id_.GetNoArena();
}
inline void ETFBasketDynamicInfoReqt::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.ETFBasketDynamicInfoReqt.request_id)
}
#if LANG_CXX11
inline void ETFBasketDynamicInfoReqt::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.ETFBasketDynamicInfoReqt.request_id)
}
#endif
inline void ETFBasketDynamicInfoReqt::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.ETFBasketDynamicInfoReqt.request_id)
}
inline void ETFBasketDynamicInfoReqt::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.ETFBasketDynamicInfoReqt.request_id)
}
inline ::std::string* ETFBasketDynamicInfoReqt::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.ETFBasketDynamicInfoReqt.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ETFBasketDynamicInfoReqt::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.ETFBasketDynamicInfoReqt.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ETFBasketDynamicInfoReqt::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.ETFBasketDynamicInfoReqt.request_id)
}

// optional int64 request_time = 5 [default = 0];
inline bool ETFBasketDynamicInfoReqt::has_request_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ETFBasketDynamicInfoReqt::set_has_request_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ETFBasketDynamicInfoReqt::clear_has_request_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ETFBasketDynamicInfoReqt::clear_request_time() {
  request_time_ = GOOGLE_LONGLONG(0);
  clear_has_request_time();
}
inline ::google::protobuf::int64 ETFBasketDynamicInfoReqt::request_time() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasketDynamicInfoReqt.request_time)
  return request_time_;
}
inline void ETFBasketDynamicInfoReqt::set_request_time(::google::protobuf::int64 value) {
  set_has_request_time();
  request_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.ETFBasketDynamicInfoReqt.request_time)
}

// optional int64 active_interval = 6 [default = 1000];
inline bool ETFBasketDynamicInfoReqt::has_active_interval() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ETFBasketDynamicInfoReqt::set_has_active_interval() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ETFBasketDynamicInfoReqt::clear_has_active_interval() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ETFBasketDynamicInfoReqt::clear_active_interval() {
  active_interval_ = GOOGLE_LONGLONG(1000);
  clear_has_active_interval();
}
inline ::google::protobuf::int64 ETFBasketDynamicInfoReqt::active_interval() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasketDynamicInfoReqt.active_interval)
  return active_interval_;
}
inline void ETFBasketDynamicInfoReqt::set_active_interval(::google::protobuf::int64 value) {
  set_has_active_interval();
  active_interval_ = value;
  // @@protoc_insertion_point(field_set:autotrade.ETFBasketDynamicInfoReqt.active_interval)
}

// -------------------------------------------------------------------

// ETFBasketDynamicInfo_DynamicInfo

// optional uint32 market = 1;
inline bool ETFBasketDynamicInfo_DynamicInfo::has_market() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ETFBasketDynamicInfo_DynamicInfo::set_has_market() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ETFBasketDynamicInfo_DynamicInfo::clear_has_market() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ETFBasketDynamicInfo_DynamicInfo::clear_market() {
  market_ = 0u;
  clear_has_market();
}
inline ::google::protobuf::uint32 ETFBasketDynamicInfo_DynamicInfo::market() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasketDynamicInfo.DynamicInfo.market)
  return market_;
}
inline void ETFBasketDynamicInfo_DynamicInfo::set_market(::google::protobuf::uint32 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:autotrade.ETFBasketDynamicInfo.DynamicInfo.market)
}

// required string code = 2;
inline bool ETFBasketDynamicInfo_DynamicInfo::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ETFBasketDynamicInfo_DynamicInfo::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ETFBasketDynamicInfo_DynamicInfo::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ETFBasketDynamicInfo_DynamicInfo::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& ETFBasketDynamicInfo_DynamicInfo::code() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasketDynamicInfo.DynamicInfo.code)
  return code_.GetNoArena();
}
inline void ETFBasketDynamicInfo_DynamicInfo::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.ETFBasketDynamicInfo.DynamicInfo.code)
}
#if LANG_CXX11
inline void ETFBasketDynamicInfo_DynamicInfo::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.ETFBasketDynamicInfo.DynamicInfo.code)
}
#endif
inline void ETFBasketDynamicInfo_DynamicInfo::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.ETFBasketDynamicInfo.DynamicInfo.code)
}
inline void ETFBasketDynamicInfo_DynamicInfo::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.ETFBasketDynamicInfo.DynamicInfo.code)
}
inline ::std::string* ETFBasketDynamicInfo_DynamicInfo::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:autotrade.ETFBasketDynamicInfo.DynamicInfo.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ETFBasketDynamicInfo_DynamicInfo::release_code() {
  // @@protoc_insertion_point(field_release:autotrade.ETFBasketDynamicInfo.DynamicInfo.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ETFBasketDynamicInfo_DynamicInfo::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:autotrade.ETFBasketDynamicInfo.DynamicInfo.code)
}

// required uint32 creatable_qty = 3;
inline bool ETFBasketDynamicInfo_DynamicInfo::has_creatable_qty() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ETFBasketDynamicInfo_DynamicInfo::set_has_creatable_qty() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ETFBasketDynamicInfo_DynamicInfo::clear_has_creatable_qty() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ETFBasketDynamicInfo_DynamicInfo::clear_creatable_qty() {
  creatable_qty_ = 0u;
  clear_has_creatable_qty();
}
inline ::google::protobuf::uint32 ETFBasketDynamicInfo_DynamicInfo::creatable_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasketDynamicInfo.DynamicInfo.creatable_qty)
  return creatable_qty_;
}
inline void ETFBasketDynamicInfo_DynamicInfo::set_creatable_qty(::google::protobuf::uint32 value) {
  set_has_creatable_qty();
  creatable_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.ETFBasketDynamicInfo.DynamicInfo.creatable_qty)
}

// -------------------------------------------------------------------

// ETFBasketDynamicInfo

// optional int32 funcid = 1 [default = 11102011];
inline bool ETFBasketDynamicInfo::has_funcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ETFBasketDynamicInfo::set_has_funcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ETFBasketDynamicInfo::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ETFBasketDynamicInfo::clear_funcid() {
  funcid_ = 11102011;
  clear_has_funcid();
}
inline ::google::protobuf::int32 ETFBasketDynamicInfo::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasketDynamicInfo.funcid)
  return funcid_;
}
inline void ETFBasketDynamicInfo::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.ETFBasketDynamicInfo.funcid)
}

// repeated .autotrade.ETFBasketDynamicInfo.DynamicInfo dynamic_info = 2;
inline int ETFBasketDynamicInfo::dynamic_info_size() const {
  return dynamic_info_.size();
}
inline void ETFBasketDynamicInfo::clear_dynamic_info() {
  dynamic_info_.Clear();
}
inline ::autotrade::ETFBasketDynamicInfo_DynamicInfo* ETFBasketDynamicInfo::mutable_dynamic_info(int index) {
  // @@protoc_insertion_point(field_mutable:autotrade.ETFBasketDynamicInfo.dynamic_info)
  return dynamic_info_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::autotrade::ETFBasketDynamicInfo_DynamicInfo >*
ETFBasketDynamicInfo::mutable_dynamic_info() {
  // @@protoc_insertion_point(field_mutable_list:autotrade.ETFBasketDynamicInfo.dynamic_info)
  return &dynamic_info_;
}
inline const ::autotrade::ETFBasketDynamicInfo_DynamicInfo& ETFBasketDynamicInfo::dynamic_info(int index) const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasketDynamicInfo.dynamic_info)
  return dynamic_info_.Get(index);
}
inline ::autotrade::ETFBasketDynamicInfo_DynamicInfo* ETFBasketDynamicInfo::add_dynamic_info() {
  // @@protoc_insertion_point(field_add:autotrade.ETFBasketDynamicInfo.dynamic_info)
  return dynamic_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::autotrade::ETFBasketDynamicInfo_DynamicInfo >&
ETFBasketDynamicInfo::dynamic_info() const {
  // @@protoc_insertion_point(field_list:autotrade.ETFBasketDynamicInfo.dynamic_info)
  return dynamic_info_;
}

// optional string request_id = 3;
inline bool ETFBasketDynamicInfo::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ETFBasketDynamicInfo::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ETFBasketDynamicInfo::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ETFBasketDynamicInfo::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& ETFBasketDynamicInfo::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.ETFBasketDynamicInfo.request_id)
  return request_id_.GetNoArena();
}
inline void ETFBasketDynamicInfo::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.ETFBasketDynamicInfo.request_id)
}
#if LANG_CXX11
inline void ETFBasketDynamicInfo::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.ETFBasketDynamicInfo.request_id)
}
#endif
inline void ETFBasketDynamicInfo::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.ETFBasketDynamicInfo.request_id)
}
inline void ETFBasketDynamicInfo::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.ETFBasketDynamicInfo.request_id)
}
inline ::std::string* ETFBasketDynamicInfo::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.ETFBasketDynamicInfo.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ETFBasketDynamicInfo::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.ETFBasketDynamicInfo.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ETFBasketDynamicInfo::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.ETFBasketDynamicInfo.request_id)
}

// -------------------------------------------------------------------

// RawStockKnock

// optional int32 funcid = 1 [default = 11003001];
inline bool RawStockKnock::has_funcid() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void RawStockKnock::set_has_funcid() {
  _has_bits_[0] |= 0x00100000u;
}
inline void RawStockKnock::clear_has_funcid() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void RawStockKnock::clear_funcid() {
  funcid_ = 11003001;
  clear_has_funcid();
}
inline ::google::protobuf::int32 RawStockKnock::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.RawStockKnock.funcid)
  return funcid_;
}
inline void RawStockKnock::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.RawStockKnock.funcid)
}

// required uint64 stamp = 2;
inline bool RawStockKnock::has_stamp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RawStockKnock::set_has_stamp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RawStockKnock::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RawStockKnock::clear_stamp() {
  stamp_ = GOOGLE_ULONGLONG(0);
  clear_has_stamp();
}
inline ::google::protobuf::uint64 RawStockKnock::stamp() const {
  // @@protoc_insertion_point(field_get:autotrade.RawStockKnock.stamp)
  return stamp_;
}
inline void RawStockKnock::set_stamp(::google::protobuf::uint64 value) {
  set_has_stamp();
  stamp_ = value;
  // @@protoc_insertion_point(field_set:autotrade.RawStockKnock.stamp)
}

// required string order_group = 3;
inline bool RawStockKnock::has_order_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RawStockKnock::set_has_order_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RawStockKnock::clear_has_order_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RawStockKnock::clear_order_group() {
  order_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_group();
}
inline const ::std::string& RawStockKnock::order_group() const {
  // @@protoc_insertion_point(field_get:autotrade.RawStockKnock.order_group)
  return order_group_.GetNoArena();
}
inline void RawStockKnock::set_order_group(const ::std::string& value) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.RawStockKnock.order_group)
}
#if LANG_CXX11
inline void RawStockKnock::set_order_group(::std::string&& value) {
  set_has_order_group();
  order_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.RawStockKnock.order_group)
}
#endif
inline void RawStockKnock::set_order_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.RawStockKnock.order_group)
}
inline void RawStockKnock::set_order_group(const char* value, size_t size) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.RawStockKnock.order_group)
}
inline ::std::string* RawStockKnock::mutable_order_group() {
  set_has_order_group();
  // @@protoc_insertion_point(field_mutable:autotrade.RawStockKnock.order_group)
  return order_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RawStockKnock::release_order_group() {
  // @@protoc_insertion_point(field_release:autotrade.RawStockKnock.order_group)
  if (!has_order_group()) {
    return NULL;
  }
  clear_has_order_group();
  return order_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RawStockKnock::set_allocated_order_group(::std::string* order_group) {
  if (order_group != NULL) {
    set_has_order_group();
  } else {
    clear_has_order_group();
  }
  order_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_group);
  // @@protoc_insertion_point(field_set_allocated:autotrade.RawStockKnock.order_group)
}

// required string orderno = 4;
inline bool RawStockKnock::has_orderno() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RawStockKnock::set_has_orderno() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RawStockKnock::clear_has_orderno() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RawStockKnock::clear_orderno() {
  orderno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_orderno();
}
inline const ::std::string& RawStockKnock::orderno() const {
  // @@protoc_insertion_point(field_get:autotrade.RawStockKnock.orderno)
  return orderno_.GetNoArena();
}
inline void RawStockKnock::set_orderno(const ::std::string& value) {
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.RawStockKnock.orderno)
}
#if LANG_CXX11
inline void RawStockKnock::set_orderno(::std::string&& value) {
  set_has_orderno();
  orderno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.RawStockKnock.orderno)
}
#endif
inline void RawStockKnock::set_orderno(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.RawStockKnock.orderno)
}
inline void RawStockKnock::set_orderno(const char* value, size_t size) {
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.RawStockKnock.orderno)
}
inline ::std::string* RawStockKnock::mutable_orderno() {
  set_has_orderno();
  // @@protoc_insertion_point(field_mutable:autotrade.RawStockKnock.orderno)
  return orderno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RawStockKnock::release_orderno() {
  // @@protoc_insertion_point(field_release:autotrade.RawStockKnock.orderno)
  if (!has_orderno()) {
    return NULL;
  }
  clear_has_orderno();
  return orderno_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RawStockKnock::set_allocated_orderno(::std::string* orderno) {
  if (orderno != NULL) {
    set_has_orderno();
  } else {
    clear_has_orderno();
  }
  orderno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderno);
  // @@protoc_insertion_point(field_set_allocated:autotrade.RawStockKnock.orderno)
}

// optional uint32 market = 5;
inline bool RawStockKnock::has_market() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RawStockKnock::set_has_market() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RawStockKnock::clear_has_market() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RawStockKnock::clear_market() {
  market_ = 0u;
  clear_has_market();
}
inline ::google::protobuf::uint32 RawStockKnock::market() const {
  // @@protoc_insertion_point(field_get:autotrade.RawStockKnock.market)
  return market_;
}
inline void RawStockKnock::set_market(::google::protobuf::uint32 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:autotrade.RawStockKnock.market)
}

// required string code = 6;
inline bool RawStockKnock::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RawStockKnock::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RawStockKnock::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RawStockKnock::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& RawStockKnock::code() const {
  // @@protoc_insertion_point(field_get:autotrade.RawStockKnock.code)
  return code_.GetNoArena();
}
inline void RawStockKnock::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.RawStockKnock.code)
}
#if LANG_CXX11
inline void RawStockKnock::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.RawStockKnock.code)
}
#endif
inline void RawStockKnock::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.RawStockKnock.code)
}
inline void RawStockKnock::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.RawStockKnock.code)
}
inline ::std::string* RawStockKnock::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:autotrade.RawStockKnock.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RawStockKnock::release_code() {
  // @@protoc_insertion_point(field_release:autotrade.RawStockKnock.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RawStockKnock::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:autotrade.RawStockKnock.code)
}

// optional int64 order_price = 7;
inline bool RawStockKnock::has_order_price() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RawStockKnock::set_has_order_price() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RawStockKnock::clear_has_order_price() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RawStockKnock::clear_order_price() {
  order_price_ = GOOGLE_LONGLONG(0);
  clear_has_order_price();
}
inline ::google::protobuf::int64 RawStockKnock::order_price() const {
  // @@protoc_insertion_point(field_get:autotrade.RawStockKnock.order_price)
  return order_price_;
}
inline void RawStockKnock::set_order_price(::google::protobuf::int64 value) {
  set_has_order_price();
  order_price_ = value;
  // @@protoc_insertion_point(field_set:autotrade.RawStockKnock.order_price)
}

// required int64 match_qty = 8;
inline bool RawStockKnock::has_match_qty() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RawStockKnock::set_has_match_qty() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RawStockKnock::clear_has_match_qty() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RawStockKnock::clear_match_qty() {
  match_qty_ = GOOGLE_LONGLONG(0);
  clear_has_match_qty();
}
inline ::google::protobuf::int64 RawStockKnock::match_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.RawStockKnock.match_qty)
  return match_qty_;
}
inline void RawStockKnock::set_match_qty(::google::protobuf::int64 value) {
  set_has_match_qty();
  match_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.RawStockKnock.match_qty)
}

// required uint32 order_qty = 9;
inline bool RawStockKnock::has_order_qty() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RawStockKnock::set_has_order_qty() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RawStockKnock::clear_has_order_qty() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RawStockKnock::clear_order_qty() {
  order_qty_ = 0u;
  clear_has_order_qty();
}
inline ::google::protobuf::uint32 RawStockKnock::order_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.RawStockKnock.order_qty)
  return order_qty_;
}
inline void RawStockKnock::set_order_qty(::google::protobuf::uint32 value) {
  set_has_order_qty();
  order_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.RawStockKnock.order_qty)
}

// required uint32 bsflag = 10;
inline bool RawStockKnock::has_bsflag() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RawStockKnock::set_has_bsflag() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RawStockKnock::clear_has_bsflag() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RawStockKnock::clear_bsflag() {
  bsflag_ = 0u;
  clear_has_bsflag();
}
inline ::google::protobuf::uint32 RawStockKnock::bsflag() const {
  // @@protoc_insertion_point(field_get:autotrade.RawStockKnock.bsflag)
  return bsflag_;
}
inline void RawStockKnock::set_bsflag(::google::protobuf::uint32 value) {
  set_has_bsflag();
  bsflag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.RawStockKnock.bsflag)
}

// required int32 match_type = 11;
inline bool RawStockKnock::has_match_type() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RawStockKnock::set_has_match_type() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RawStockKnock::clear_has_match_type() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RawStockKnock::clear_match_type() {
  match_type_ = 0;
  clear_has_match_type();
}
inline ::google::protobuf::int32 RawStockKnock::match_type() const {
  // @@protoc_insertion_point(field_get:autotrade.RawStockKnock.match_type)
  return match_type_;
}
inline void RawStockKnock::set_match_type(::google::protobuf::int32 value) {
  set_has_match_type();
  match_type_ = value;
  // @@protoc_insertion_point(field_set:autotrade.RawStockKnock.match_type)
}

// optional double clear_amt = 12;
inline bool RawStockKnock::has_clear_amt() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RawStockKnock::set_has_clear_amt() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RawStockKnock::clear_has_clear_amt() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RawStockKnock::clear_clear_amt() {
  clear_amt_ = 0;
  clear_has_clear_amt();
}
inline double RawStockKnock::clear_amt() const {
  // @@protoc_insertion_point(field_get:autotrade.RawStockKnock.clear_amt)
  return clear_amt_;
}
inline void RawStockKnock::set_clear_amt(double value) {
  set_has_clear_amt();
  clear_amt_ = value;
  // @@protoc_insertion_point(field_set:autotrade.RawStockKnock.clear_amt)
}

// required double match_amt = 13;
inline bool RawStockKnock::has_match_amt() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RawStockKnock::set_has_match_amt() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RawStockKnock::clear_has_match_amt() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RawStockKnock::clear_match_amt() {
  match_amt_ = 0;
  clear_has_match_amt();
}
inline double RawStockKnock::match_amt() const {
  // @@protoc_insertion_point(field_get:autotrade.RawStockKnock.match_amt)
  return match_amt_;
}
inline void RawStockKnock::set_match_amt(double value) {
  set_has_match_amt();
  match_amt_ = value;
  // @@protoc_insertion_point(field_set:autotrade.RawStockKnock.match_amt)
}

// required int64 match_price = 14;
inline bool RawStockKnock::has_match_price() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RawStockKnock::set_has_match_price() {
  _has_bits_[0] |= 0x00040000u;
}
inline void RawStockKnock::clear_has_match_price() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void RawStockKnock::clear_match_price() {
  match_price_ = GOOGLE_LONGLONG(0);
  clear_has_match_price();
}
inline ::google::protobuf::int64 RawStockKnock::match_price() const {
  // @@protoc_insertion_point(field_get:autotrade.RawStockKnock.match_price)
  return match_price_;
}
inline void RawStockKnock::set_match_price(::google::protobuf::int64 value) {
  set_has_match_price();
  match_price_ = value;
  // @@protoc_insertion_point(field_set:autotrade.RawStockKnock.match_price)
}

// optional int32 order_type = 15;
inline bool RawStockKnock::has_order_type() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void RawStockKnock::set_has_order_type() {
  _has_bits_[0] |= 0x00080000u;
}
inline void RawStockKnock::clear_has_order_type() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void RawStockKnock::clear_order_type() {
  order_type_ = 0;
  clear_has_order_type();
}
inline ::google::protobuf::int32 RawStockKnock::order_type() const {
  // @@protoc_insertion_point(field_get:autotrade.RawStockKnock.order_type)
  return order_type_;
}
inline void RawStockKnock::set_order_type(::google::protobuf::int32 value) {
  set_has_order_type();
  order_type_ = value;
  // @@protoc_insertion_point(field_set:autotrade.RawStockKnock.order_type)
}

// required string match_id = 16;
inline bool RawStockKnock::has_match_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RawStockKnock::set_has_match_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RawStockKnock::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RawStockKnock::clear_match_id() {
  match_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_match_id();
}
inline const ::std::string& RawStockKnock::match_id() const {
  // @@protoc_insertion_point(field_get:autotrade.RawStockKnock.match_id)
  return match_id_.GetNoArena();
}
inline void RawStockKnock::set_match_id(const ::std::string& value) {
  set_has_match_id();
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.RawStockKnock.match_id)
}
#if LANG_CXX11
inline void RawStockKnock::set_match_id(::std::string&& value) {
  set_has_match_id();
  match_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.RawStockKnock.match_id)
}
#endif
inline void RawStockKnock::set_match_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_match_id();
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.RawStockKnock.match_id)
}
inline void RawStockKnock::set_match_id(const char* value, size_t size) {
  set_has_match_id();
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.RawStockKnock.match_id)
}
inline ::std::string* RawStockKnock::mutable_match_id() {
  set_has_match_id();
  // @@protoc_insertion_point(field_mutable:autotrade.RawStockKnock.match_id)
  return match_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RawStockKnock::release_match_id() {
  // @@protoc_insertion_point(field_release:autotrade.RawStockKnock.match_id)
  if (!has_match_id()) {
    return NULL;
  }
  clear_has_match_id();
  return match_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RawStockKnock::set_allocated_match_id(::std::string* match_id) {
  if (match_id != NULL) {
    set_has_match_id();
  } else {
    clear_has_match_id();
  }
  match_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), match_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.RawStockKnock.match_id)
}

// required string stock_account = 17;
inline bool RawStockKnock::has_stock_account() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RawStockKnock::set_has_stock_account() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RawStockKnock::clear_has_stock_account() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RawStockKnock::clear_stock_account() {
  stock_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stock_account();
}
inline const ::std::string& RawStockKnock::stock_account() const {
  // @@protoc_insertion_point(field_get:autotrade.RawStockKnock.stock_account)
  return stock_account_.GetNoArena();
}
inline void RawStockKnock::set_stock_account(const ::std::string& value) {
  set_has_stock_account();
  stock_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.RawStockKnock.stock_account)
}
#if LANG_CXX11
inline void RawStockKnock::set_stock_account(::std::string&& value) {
  set_has_stock_account();
  stock_account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.RawStockKnock.stock_account)
}
#endif
inline void RawStockKnock::set_stock_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_stock_account();
  stock_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.RawStockKnock.stock_account)
}
inline void RawStockKnock::set_stock_account(const char* value, size_t size) {
  set_has_stock_account();
  stock_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.RawStockKnock.stock_account)
}
inline ::std::string* RawStockKnock::mutable_stock_account() {
  set_has_stock_account();
  // @@protoc_insertion_point(field_mutable:autotrade.RawStockKnock.stock_account)
  return stock_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RawStockKnock::release_stock_account() {
  // @@protoc_insertion_point(field_release:autotrade.RawStockKnock.stock_account)
  if (!has_stock_account()) {
    return NULL;
  }
  clear_has_stock_account();
  return stock_account_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RawStockKnock::set_allocated_stock_account(::std::string* stock_account) {
  if (stock_account != NULL) {
    set_has_stock_account();
  } else {
    clear_has_stock_account();
  }
  stock_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stock_account);
  // @@protoc_insertion_point(field_set_allocated:autotrade.RawStockKnock.stock_account)
}

// optional string oppo_account = 18;
inline bool RawStockKnock::has_oppo_account() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RawStockKnock::set_has_oppo_account() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RawStockKnock::clear_has_oppo_account() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RawStockKnock::clear_oppo_account() {
  oppo_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_oppo_account();
}
inline const ::std::string& RawStockKnock::oppo_account() const {
  // @@protoc_insertion_point(field_get:autotrade.RawStockKnock.oppo_account)
  return oppo_account_.GetNoArena();
}
inline void RawStockKnock::set_oppo_account(const ::std::string& value) {
  set_has_oppo_account();
  oppo_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.RawStockKnock.oppo_account)
}
#if LANG_CXX11
inline void RawStockKnock::set_oppo_account(::std::string&& value) {
  set_has_oppo_account();
  oppo_account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.RawStockKnock.oppo_account)
}
#endif
inline void RawStockKnock::set_oppo_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_oppo_account();
  oppo_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.RawStockKnock.oppo_account)
}
inline void RawStockKnock::set_oppo_account(const char* value, size_t size) {
  set_has_oppo_account();
  oppo_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.RawStockKnock.oppo_account)
}
inline ::std::string* RawStockKnock::mutable_oppo_account() {
  set_has_oppo_account();
  // @@protoc_insertion_point(field_mutable:autotrade.RawStockKnock.oppo_account)
  return oppo_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RawStockKnock::release_oppo_account() {
  // @@protoc_insertion_point(field_release:autotrade.RawStockKnock.oppo_account)
  if (!has_oppo_account()) {
    return NULL;
  }
  clear_has_oppo_account();
  return oppo_account_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RawStockKnock::set_allocated_oppo_account(::std::string* oppo_account) {
  if (oppo_account != NULL) {
    set_has_oppo_account();
  } else {
    clear_has_oppo_account();
  }
  oppo_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), oppo_account);
  // @@protoc_insertion_point(field_set_allocated:autotrade.RawStockKnock.oppo_account)
}

// optional string name = 19;
inline bool RawStockKnock::has_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RawStockKnock::set_has_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RawStockKnock::clear_has_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RawStockKnock::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& RawStockKnock::name() const {
  // @@protoc_insertion_point(field_get:autotrade.RawStockKnock.name)
  return name_.GetNoArena();
}
inline void RawStockKnock::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.RawStockKnock.name)
}
#if LANG_CXX11
inline void RawStockKnock::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.RawStockKnock.name)
}
#endif
inline void RawStockKnock::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.RawStockKnock.name)
}
inline void RawStockKnock::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.RawStockKnock.name)
}
inline ::std::string* RawStockKnock::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:autotrade.RawStockKnock.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RawStockKnock::release_name() {
  // @@protoc_insertion_point(field_release:autotrade.RawStockKnock.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RawStockKnock::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:autotrade.RawStockKnock.name)
}

// optional string start_pos = 20;
inline bool RawStockKnock::has_start_pos() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RawStockKnock::set_has_start_pos() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RawStockKnock::clear_has_start_pos() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RawStockKnock::clear_start_pos() {
  start_pos_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_start_pos();
}
inline const ::std::string& RawStockKnock::start_pos() const {
  // @@protoc_insertion_point(field_get:autotrade.RawStockKnock.start_pos)
  return start_pos_.GetNoArena();
}
inline void RawStockKnock::set_start_pos(const ::std::string& value) {
  set_has_start_pos();
  start_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.RawStockKnock.start_pos)
}
#if LANG_CXX11
inline void RawStockKnock::set_start_pos(::std::string&& value) {
  set_has_start_pos();
  start_pos_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.RawStockKnock.start_pos)
}
#endif
inline void RawStockKnock::set_start_pos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_start_pos();
  start_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.RawStockKnock.start_pos)
}
inline void RawStockKnock::set_start_pos(const char* value, size_t size) {
  set_has_start_pos();
  start_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.RawStockKnock.start_pos)
}
inline ::std::string* RawStockKnock::mutable_start_pos() {
  set_has_start_pos();
  // @@protoc_insertion_point(field_mutable:autotrade.RawStockKnock.start_pos)
  return start_pos_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RawStockKnock::release_start_pos() {
  // @@protoc_insertion_point(field_release:autotrade.RawStockKnock.start_pos)
  if (!has_start_pos()) {
    return NULL;
  }
  clear_has_start_pos();
  return start_pos_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RawStockKnock::set_allocated_start_pos(::std::string* start_pos) {
  if (start_pos != NULL) {
    set_has_start_pos();
  } else {
    clear_has_start_pos();
  }
  start_pos_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_pos);
  // @@protoc_insertion_point(field_set_allocated:autotrade.RawStockKnock.start_pos)
}

// optional string fund_id = 21;
inline bool RawStockKnock::has_fund_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RawStockKnock::set_has_fund_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RawStockKnock::clear_has_fund_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RawStockKnock::clear_fund_id() {
  fund_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fund_id();
}
inline const ::std::string& RawStockKnock::fund_id() const {
  // @@protoc_insertion_point(field_get:autotrade.RawStockKnock.fund_id)
  return fund_id_.GetNoArena();
}
inline void RawStockKnock::set_fund_id(const ::std::string& value) {
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.RawStockKnock.fund_id)
}
#if LANG_CXX11
inline void RawStockKnock::set_fund_id(::std::string&& value) {
  set_has_fund_id();
  fund_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.RawStockKnock.fund_id)
}
#endif
inline void RawStockKnock::set_fund_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.RawStockKnock.fund_id)
}
inline void RawStockKnock::set_fund_id(const char* value, size_t size) {
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.RawStockKnock.fund_id)
}
inline ::std::string* RawStockKnock::mutable_fund_id() {
  set_has_fund_id();
  // @@protoc_insertion_point(field_mutable:autotrade.RawStockKnock.fund_id)
  return fund_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RawStockKnock::release_fund_id() {
  // @@protoc_insertion_point(field_release:autotrade.RawStockKnock.fund_id)
  if (!has_fund_id()) {
    return NULL;
  }
  clear_has_fund_id();
  return fund_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RawStockKnock::set_allocated_fund_id(::std::string* fund_id) {
  if (fund_id != NULL) {
    set_has_fund_id();
  } else {
    clear_has_fund_id();
  }
  fund_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fund_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.RawStockKnock.fund_id)
}

// -------------------------------------------------------------------

// OneStockKnock

// optional int32 funcid = 1 [default = 11003002];
inline bool OneStockKnock::has_funcid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OneStockKnock::set_has_funcid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void OneStockKnock::clear_has_funcid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void OneStockKnock::clear_funcid() {
  funcid_ = 11003002;
  clear_has_funcid();
}
inline ::google::protobuf::int32 OneStockKnock::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.OneStockKnock.funcid)
  return funcid_;
}
inline void OneStockKnock::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OneStockKnock.funcid)
}

// required uint64 stamp = 2;
inline bool OneStockKnock::has_stamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OneStockKnock::set_has_stamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OneStockKnock::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OneStockKnock::clear_stamp() {
  stamp_ = GOOGLE_ULONGLONG(0);
  clear_has_stamp();
}
inline ::google::protobuf::uint64 OneStockKnock::stamp() const {
  // @@protoc_insertion_point(field_get:autotrade.OneStockKnock.stamp)
  return stamp_;
}
inline void OneStockKnock::set_stamp(::google::protobuf::uint64 value) {
  set_has_stamp();
  stamp_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OneStockKnock.stamp)
}

// required string code = 3;
inline bool OneStockKnock::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OneStockKnock::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OneStockKnock::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OneStockKnock::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& OneStockKnock::code() const {
  // @@protoc_insertion_point(field_get:autotrade.OneStockKnock.code)
  return code_.GetNoArena();
}
inline void OneStockKnock::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OneStockKnock.code)
}
#if LANG_CXX11
inline void OneStockKnock::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OneStockKnock.code)
}
#endif
inline void OneStockKnock::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OneStockKnock.code)
}
inline void OneStockKnock::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OneStockKnock.code)
}
inline ::std::string* OneStockKnock::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:autotrade.OneStockKnock.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OneStockKnock::release_code() {
  // @@protoc_insertion_point(field_release:autotrade.OneStockKnock.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OneStockKnock::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OneStockKnock.code)
}

// required string order_group = 4;
inline bool OneStockKnock::has_order_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OneStockKnock::set_has_order_group() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OneStockKnock::clear_has_order_group() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OneStockKnock::clear_order_group() {
  order_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_group();
}
inline const ::std::string& OneStockKnock::order_group() const {
  // @@protoc_insertion_point(field_get:autotrade.OneStockKnock.order_group)
  return order_group_.GetNoArena();
}
inline void OneStockKnock::set_order_group(const ::std::string& value) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OneStockKnock.order_group)
}
#if LANG_CXX11
inline void OneStockKnock::set_order_group(::std::string&& value) {
  set_has_order_group();
  order_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OneStockKnock.order_group)
}
#endif
inline void OneStockKnock::set_order_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OneStockKnock.order_group)
}
inline void OneStockKnock::set_order_group(const char* value, size_t size) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OneStockKnock.order_group)
}
inline ::std::string* OneStockKnock::mutable_order_group() {
  set_has_order_group();
  // @@protoc_insertion_point(field_mutable:autotrade.OneStockKnock.order_group)
  return order_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OneStockKnock::release_order_group() {
  // @@protoc_insertion_point(field_release:autotrade.OneStockKnock.order_group)
  if (!has_order_group()) {
    return NULL;
  }
  clear_has_order_group();
  return order_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OneStockKnock::set_allocated_order_group(::std::string* order_group) {
  if (order_group != NULL) {
    set_has_order_group();
  } else {
    clear_has_order_group();
  }
  order_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_group);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OneStockKnock.order_group)
}

// required string orderno = 5;
inline bool OneStockKnock::has_orderno() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OneStockKnock::set_has_orderno() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OneStockKnock::clear_has_orderno() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OneStockKnock::clear_orderno() {
  orderno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_orderno();
}
inline const ::std::string& OneStockKnock::orderno() const {
  // @@protoc_insertion_point(field_get:autotrade.OneStockKnock.orderno)
  return orderno_.GetNoArena();
}
inline void OneStockKnock::set_orderno(const ::std::string& value) {
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OneStockKnock.orderno)
}
#if LANG_CXX11
inline void OneStockKnock::set_orderno(::std::string&& value) {
  set_has_orderno();
  orderno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OneStockKnock.orderno)
}
#endif
inline void OneStockKnock::set_orderno(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OneStockKnock.orderno)
}
inline void OneStockKnock::set_orderno(const char* value, size_t size) {
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OneStockKnock.orderno)
}
inline ::std::string* OneStockKnock::mutable_orderno() {
  set_has_orderno();
  // @@protoc_insertion_point(field_mutable:autotrade.OneStockKnock.orderno)
  return orderno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OneStockKnock::release_orderno() {
  // @@protoc_insertion_point(field_release:autotrade.OneStockKnock.orderno)
  if (!has_orderno()) {
    return NULL;
  }
  clear_has_orderno();
  return orderno_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OneStockKnock::set_allocated_orderno(::std::string* orderno) {
  if (orderno != NULL) {
    set_has_orderno();
  } else {
    clear_has_orderno();
  }
  orderno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderno);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OneStockKnock.orderno)
}

// required string match_id = 6;
inline bool OneStockKnock::has_match_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OneStockKnock::set_has_match_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OneStockKnock::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OneStockKnock::clear_match_id() {
  match_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_match_id();
}
inline const ::std::string& OneStockKnock::match_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OneStockKnock.match_id)
  return match_id_.GetNoArena();
}
inline void OneStockKnock::set_match_id(const ::std::string& value) {
  set_has_match_id();
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OneStockKnock.match_id)
}
#if LANG_CXX11
inline void OneStockKnock::set_match_id(::std::string&& value) {
  set_has_match_id();
  match_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OneStockKnock.match_id)
}
#endif
inline void OneStockKnock::set_match_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_match_id();
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OneStockKnock.match_id)
}
inline void OneStockKnock::set_match_id(const char* value, size_t size) {
  set_has_match_id();
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OneStockKnock.match_id)
}
inline ::std::string* OneStockKnock::mutable_match_id() {
  set_has_match_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OneStockKnock.match_id)
  return match_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OneStockKnock::release_match_id() {
  // @@protoc_insertion_point(field_release:autotrade.OneStockKnock.match_id)
  if (!has_match_id()) {
    return NULL;
  }
  clear_has_match_id();
  return match_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OneStockKnock::set_allocated_match_id(::std::string* match_id) {
  if (match_id != NULL) {
    set_has_match_id();
  } else {
    clear_has_match_id();
  }
  match_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), match_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OneStockKnock.match_id)
}

// required uint32 order_qty = 7;
inline bool OneStockKnock::has_order_qty() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OneStockKnock::set_has_order_qty() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OneStockKnock::clear_has_order_qty() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OneStockKnock::clear_order_qty() {
  order_qty_ = 0u;
  clear_has_order_qty();
}
inline ::google::protobuf::uint32 OneStockKnock::order_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.OneStockKnock.order_qty)
  return order_qty_;
}
inline void OneStockKnock::set_order_qty(::google::protobuf::uint32 value) {
  set_has_order_qty();
  order_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OneStockKnock.order_qty)
}

// required uint32 match_qty = 8;
inline bool OneStockKnock::has_match_qty() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OneStockKnock::set_has_match_qty() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OneStockKnock::clear_has_match_qty() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OneStockKnock::clear_match_qty() {
  match_qty_ = 0u;
  clear_has_match_qty();
}
inline ::google::protobuf::uint32 OneStockKnock::match_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.OneStockKnock.match_qty)
  return match_qty_;
}
inline void OneStockKnock::set_match_qty(::google::protobuf::uint32 value) {
  set_has_match_qty();
  match_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OneStockKnock.match_qty)
}

// optional int64 order_price = 9;
inline bool OneStockKnock::has_order_price() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OneStockKnock::set_has_order_price() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OneStockKnock::clear_has_order_price() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OneStockKnock::clear_order_price() {
  order_price_ = GOOGLE_LONGLONG(0);
  clear_has_order_price();
}
inline ::google::protobuf::int64 OneStockKnock::order_price() const {
  // @@protoc_insertion_point(field_get:autotrade.OneStockKnock.order_price)
  return order_price_;
}
inline void OneStockKnock::set_order_price(::google::protobuf::int64 value) {
  set_has_order_price();
  order_price_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OneStockKnock.order_price)
}

// required double match_price = 10;
inline bool OneStockKnock::has_match_price() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OneStockKnock::set_has_match_price() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OneStockKnock::clear_has_match_price() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OneStockKnock::clear_match_price() {
  match_price_ = 0;
  clear_has_match_price();
}
inline double OneStockKnock::match_price() const {
  // @@protoc_insertion_point(field_get:autotrade.OneStockKnock.match_price)
  return match_price_;
}
inline void OneStockKnock::set_match_price(double value) {
  set_has_match_price();
  match_price_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OneStockKnock.match_price)
}

// required double match_amt = 11;
inline bool OneStockKnock::has_match_amt() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OneStockKnock::set_has_match_amt() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OneStockKnock::clear_has_match_amt() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OneStockKnock::clear_match_amt() {
  match_amt_ = 0;
  clear_has_match_amt();
}
inline double OneStockKnock::match_amt() const {
  // @@protoc_insertion_point(field_get:autotrade.OneStockKnock.match_amt)
  return match_amt_;
}
inline void OneStockKnock::set_match_amt(double value) {
  set_has_match_amt();
  match_amt_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OneStockKnock.match_amt)
}

// required uint32 bsflag = 12;
inline bool OneStockKnock::has_bsflag() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OneStockKnock::set_has_bsflag() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OneStockKnock::clear_has_bsflag() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OneStockKnock::clear_bsflag() {
  bsflag_ = 0u;
  clear_has_bsflag();
}
inline ::google::protobuf::uint32 OneStockKnock::bsflag() const {
  // @@protoc_insertion_point(field_get:autotrade.OneStockKnock.bsflag)
  return bsflag_;
}
inline void OneStockKnock::set_bsflag(::google::protobuf::uint32 value) {
  set_has_bsflag();
  bsflag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OneStockKnock.bsflag)
}

// optional string fund_id = 13;
inline bool OneStockKnock::has_fund_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OneStockKnock::set_has_fund_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OneStockKnock::clear_has_fund_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OneStockKnock::clear_fund_id() {
  fund_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fund_id();
}
inline const ::std::string& OneStockKnock::fund_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OneStockKnock.fund_id)
  return fund_id_.GetNoArena();
}
inline void OneStockKnock::set_fund_id(const ::std::string& value) {
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OneStockKnock.fund_id)
}
#if LANG_CXX11
inline void OneStockKnock::set_fund_id(::std::string&& value) {
  set_has_fund_id();
  fund_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OneStockKnock.fund_id)
}
#endif
inline void OneStockKnock::set_fund_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OneStockKnock.fund_id)
}
inline void OneStockKnock::set_fund_id(const char* value, size_t size) {
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OneStockKnock.fund_id)
}
inline ::std::string* OneStockKnock::mutable_fund_id() {
  set_has_fund_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OneStockKnock.fund_id)
  return fund_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OneStockKnock::release_fund_id() {
  // @@protoc_insertion_point(field_release:autotrade.OneStockKnock.fund_id)
  if (!has_fund_id()) {
    return NULL;
  }
  clear_has_fund_id();
  return fund_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OneStockKnock::set_allocated_fund_id(::std::string* fund_id) {
  if (fund_id != NULL) {
    set_has_fund_id();
  } else {
    clear_has_fund_id();
  }
  fund_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fund_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OneStockKnock.fund_id)
}

// -------------------------------------------------------------------

// SumStockKnock

// optional int32 funcid = 1 [default = 11003003];
inline bool SumStockKnock::has_funcid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SumStockKnock::set_has_funcid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SumStockKnock::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SumStockKnock::clear_funcid() {
  funcid_ = 11003003;
  clear_has_funcid();
}
inline ::google::protobuf::int32 SumStockKnock::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.SumStockKnock.funcid)
  return funcid_;
}
inline void SumStockKnock::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.SumStockKnock.funcid)
}

// required uint64 stamp = 2;
inline bool SumStockKnock::has_stamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SumStockKnock::set_has_stamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SumStockKnock::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SumStockKnock::clear_stamp() {
  stamp_ = GOOGLE_ULONGLONG(0);
  clear_has_stamp();
}
inline ::google::protobuf::uint64 SumStockKnock::stamp() const {
  // @@protoc_insertion_point(field_get:autotrade.SumStockKnock.stamp)
  return stamp_;
}
inline void SumStockKnock::set_stamp(::google::protobuf::uint64 value) {
  set_has_stamp();
  stamp_ = value;
  // @@protoc_insertion_point(field_set:autotrade.SumStockKnock.stamp)
}

// optional string type = 3 [default = "S"];
inline bool SumStockKnock::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SumStockKnock::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SumStockKnock::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SumStockKnock::clear_type() {
  type_.ClearToDefaultNoArena(&::autotrade::SumStockKnock::_i_give_permission_to_break_this_code_default_type_.get());
  clear_has_type();
}
inline const ::std::string& SumStockKnock::type() const {
  // @@protoc_insertion_point(field_get:autotrade.SumStockKnock.type)
  return type_.GetNoArena();
}
inline void SumStockKnock::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::autotrade::SumStockKnock::_i_give_permission_to_break_this_code_default_type_.get(), value);
  // @@protoc_insertion_point(field_set:autotrade.SumStockKnock.type)
}
#if LANG_CXX11
inline void SumStockKnock::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::autotrade::SumStockKnock::_i_give_permission_to_break_this_code_default_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.SumStockKnock.type)
}
#endif
inline void SumStockKnock::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::autotrade::SumStockKnock::_i_give_permission_to_break_this_code_default_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.SumStockKnock.type)
}
inline void SumStockKnock::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::autotrade::SumStockKnock::_i_give_permission_to_break_this_code_default_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.SumStockKnock.type)
}
inline ::std::string* SumStockKnock::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:autotrade.SumStockKnock.type)
  return type_.MutableNoArena(&::autotrade::SumStockKnock::_i_give_permission_to_break_this_code_default_type_.get());
}
inline ::std::string* SumStockKnock::release_type() {
  // @@protoc_insertion_point(field_release:autotrade.SumStockKnock.type)
  if (!has_type()) {
    return NULL;
  }
  clear_has_type();
  return type_.ReleaseNonDefaultNoArena(&::autotrade::SumStockKnock::_i_give_permission_to_break_this_code_default_type_.get());
}
inline void SumStockKnock::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::autotrade::SumStockKnock::_i_give_permission_to_break_this_code_default_type_.get(), type);
  // @@protoc_insertion_point(field_set_allocated:autotrade.SumStockKnock.type)
}

// required string order_group = 4;
inline bool SumStockKnock::has_order_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SumStockKnock::set_has_order_group() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SumStockKnock::clear_has_order_group() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SumStockKnock::clear_order_group() {
  order_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_group();
}
inline const ::std::string& SumStockKnock::order_group() const {
  // @@protoc_insertion_point(field_get:autotrade.SumStockKnock.order_group)
  return order_group_.GetNoArena();
}
inline void SumStockKnock::set_order_group(const ::std::string& value) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.SumStockKnock.order_group)
}
#if LANG_CXX11
inline void SumStockKnock::set_order_group(::std::string&& value) {
  set_has_order_group();
  order_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.SumStockKnock.order_group)
}
#endif
inline void SumStockKnock::set_order_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.SumStockKnock.order_group)
}
inline void SumStockKnock::set_order_group(const char* value, size_t size) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.SumStockKnock.order_group)
}
inline ::std::string* SumStockKnock::mutable_order_group() {
  set_has_order_group();
  // @@protoc_insertion_point(field_mutable:autotrade.SumStockKnock.order_group)
  return order_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SumStockKnock::release_order_group() {
  // @@protoc_insertion_point(field_release:autotrade.SumStockKnock.order_group)
  if (!has_order_group()) {
    return NULL;
  }
  clear_has_order_group();
  return order_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SumStockKnock::set_allocated_order_group(::std::string* order_group) {
  if (order_group != NULL) {
    set_has_order_group();
  } else {
    clear_has_order_group();
  }
  order_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_group);
  // @@protoc_insertion_point(field_set_allocated:autotrade.SumStockKnock.order_group)
}

// required uint64 order_qty = 5;
inline bool SumStockKnock::has_order_qty() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SumStockKnock::set_has_order_qty() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SumStockKnock::clear_has_order_qty() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SumStockKnock::clear_order_qty() {
  order_qty_ = GOOGLE_ULONGLONG(0);
  clear_has_order_qty();
}
inline ::google::protobuf::uint64 SumStockKnock::order_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.SumStockKnock.order_qty)
  return order_qty_;
}
inline void SumStockKnock::set_order_qty(::google::protobuf::uint64 value) {
  set_has_order_qty();
  order_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.SumStockKnock.order_qty)
}

// required uint64 match_qty = 6;
inline bool SumStockKnock::has_match_qty() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SumStockKnock::set_has_match_qty() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SumStockKnock::clear_has_match_qty() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SumStockKnock::clear_match_qty() {
  match_qty_ = GOOGLE_ULONGLONG(0);
  clear_has_match_qty();
}
inline ::google::protobuf::uint64 SumStockKnock::match_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.SumStockKnock.match_qty)
  return match_qty_;
}
inline void SumStockKnock::set_match_qty(::google::protobuf::uint64 value) {
  set_has_match_qty();
  match_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.SumStockKnock.match_qty)
}

// optional double match_amt = 7;
inline bool SumStockKnock::has_match_amt() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SumStockKnock::set_has_match_amt() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SumStockKnock::clear_has_match_amt() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SumStockKnock::clear_match_amt() {
  match_amt_ = 0;
  clear_has_match_amt();
}
inline double SumStockKnock::match_amt() const {
  // @@protoc_insertion_point(field_get:autotrade.SumStockKnock.match_amt)
  return match_amt_;
}
inline void SumStockKnock::set_match_amt(double value) {
  set_has_match_amt();
  match_amt_ = value;
  // @@protoc_insertion_point(field_set:autotrade.SumStockKnock.match_amt)
}

// required uint64 cancel_qty = 8 [default = 0];
inline bool SumStockKnock::has_cancel_qty() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SumStockKnock::set_has_cancel_qty() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SumStockKnock::clear_has_cancel_qty() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SumStockKnock::clear_cancel_qty() {
  cancel_qty_ = GOOGLE_ULONGLONG(0);
  clear_has_cancel_qty();
}
inline ::google::protobuf::uint64 SumStockKnock::cancel_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.SumStockKnock.cancel_qty)
  return cancel_qty_;
}
inline void SumStockKnock::set_cancel_qty(::google::protobuf::uint64 value) {
  set_has_cancel_qty();
  cancel_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.SumStockKnock.cancel_qty)
}

// required bool finished = 9 [default = false];
inline bool SumStockKnock::has_finished() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SumStockKnock::set_has_finished() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SumStockKnock::clear_has_finished() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SumStockKnock::clear_finished() {
  finished_ = false;
  clear_has_finished();
}
inline bool SumStockKnock::finished() const {
  // @@protoc_insertion_point(field_get:autotrade.SumStockKnock.finished)
  return finished_;
}
inline void SumStockKnock::set_finished(bool value) {
  set_has_finished();
  finished_ = value;
  // @@protoc_insertion_point(field_set:autotrade.SumStockKnock.finished)
}

// required string order_id = 10;
inline bool SumStockKnock::has_order_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SumStockKnock::set_has_order_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SumStockKnock::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SumStockKnock::clear_order_id() {
  order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_id();
}
inline const ::std::string& SumStockKnock::order_id() const {
  // @@protoc_insertion_point(field_get:autotrade.SumStockKnock.order_id)
  return order_id_.GetNoArena();
}
inline void SumStockKnock::set_order_id(const ::std::string& value) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.SumStockKnock.order_id)
}
#if LANG_CXX11
inline void SumStockKnock::set_order_id(::std::string&& value) {
  set_has_order_id();
  order_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.SumStockKnock.order_id)
}
#endif
inline void SumStockKnock::set_order_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.SumStockKnock.order_id)
}
inline void SumStockKnock::set_order_id(const char* value, size_t size) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.SumStockKnock.order_id)
}
inline ::std::string* SumStockKnock::mutable_order_id() {
  set_has_order_id();
  // @@protoc_insertion_point(field_mutable:autotrade.SumStockKnock.order_id)
  return order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SumStockKnock::release_order_id() {
  // @@protoc_insertion_point(field_release:autotrade.SumStockKnock.order_id)
  if (!has_order_id()) {
    return NULL;
  }
  clear_has_order_id();
  return order_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SumStockKnock::set_allocated_order_id(::std::string* order_id) {
  if (order_id != NULL) {
    set_has_order_id();
  } else {
    clear_has_order_id();
  }
  order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.SumStockKnock.order_id)
}

// repeated .autotrade.OneStockKnock one_knocks = 11;
inline int SumStockKnock::one_knocks_size() const {
  return one_knocks_.size();
}
inline void SumStockKnock::clear_one_knocks() {
  one_knocks_.Clear();
}
inline ::autotrade::OneStockKnock* SumStockKnock::mutable_one_knocks(int index) {
  // @@protoc_insertion_point(field_mutable:autotrade.SumStockKnock.one_knocks)
  return one_knocks_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::autotrade::OneStockKnock >*
SumStockKnock::mutable_one_knocks() {
  // @@protoc_insertion_point(field_mutable_list:autotrade.SumStockKnock.one_knocks)
  return &one_knocks_;
}
inline const ::autotrade::OneStockKnock& SumStockKnock::one_knocks(int index) const {
  // @@protoc_insertion_point(field_get:autotrade.SumStockKnock.one_knocks)
  return one_knocks_.Get(index);
}
inline ::autotrade::OneStockKnock* SumStockKnock::add_one_knocks() {
  // @@protoc_insertion_point(field_add:autotrade.SumStockKnock.one_knocks)
  return one_knocks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::autotrade::OneStockKnock >&
SumStockKnock::one_knocks() const {
  // @@protoc_insertion_point(field_list:autotrade.SumStockKnock.one_knocks)
  return one_knocks_;
}

// optional string account_name = 12 [default = ""];
inline bool SumStockKnock::has_account_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SumStockKnock::set_has_account_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SumStockKnock::clear_has_account_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SumStockKnock::clear_account_name() {
  account_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account_name();
}
inline const ::std::string& SumStockKnock::account_name() const {
  // @@protoc_insertion_point(field_get:autotrade.SumStockKnock.account_name)
  return account_name_.GetNoArena();
}
inline void SumStockKnock::set_account_name(const ::std::string& value) {
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.SumStockKnock.account_name)
}
#if LANG_CXX11
inline void SumStockKnock::set_account_name(::std::string&& value) {
  set_has_account_name();
  account_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.SumStockKnock.account_name)
}
#endif
inline void SumStockKnock::set_account_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.SumStockKnock.account_name)
}
inline void SumStockKnock::set_account_name(const char* value, size_t size) {
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.SumStockKnock.account_name)
}
inline ::std::string* SumStockKnock::mutable_account_name() {
  set_has_account_name();
  // @@protoc_insertion_point(field_mutable:autotrade.SumStockKnock.account_name)
  return account_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SumStockKnock::release_account_name() {
  // @@protoc_insertion_point(field_release:autotrade.SumStockKnock.account_name)
  if (!has_account_name()) {
    return NULL;
  }
  clear_has_account_name();
  return account_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SumStockKnock::set_allocated_account_name(::std::string* account_name) {
  if (account_name != NULL) {
    set_has_account_name();
  } else {
    clear_has_account_name();
  }
  account_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_name);
  // @@protoc_insertion_point(field_set_allocated:autotrade.SumStockKnock.account_name)
}

// optional string fund_id = 13;
inline bool SumStockKnock::has_fund_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SumStockKnock::set_has_fund_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SumStockKnock::clear_has_fund_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SumStockKnock::clear_fund_id() {
  fund_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fund_id();
}
inline const ::std::string& SumStockKnock::fund_id() const {
  // @@protoc_insertion_point(field_get:autotrade.SumStockKnock.fund_id)
  return fund_id_.GetNoArena();
}
inline void SumStockKnock::set_fund_id(const ::std::string& value) {
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.SumStockKnock.fund_id)
}
#if LANG_CXX11
inline void SumStockKnock::set_fund_id(::std::string&& value) {
  set_has_fund_id();
  fund_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.SumStockKnock.fund_id)
}
#endif
inline void SumStockKnock::set_fund_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.SumStockKnock.fund_id)
}
inline void SumStockKnock::set_fund_id(const char* value, size_t size) {
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.SumStockKnock.fund_id)
}
inline ::std::string* SumStockKnock::mutable_fund_id() {
  set_has_fund_id();
  // @@protoc_insertion_point(field_mutable:autotrade.SumStockKnock.fund_id)
  return fund_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SumStockKnock::release_fund_id() {
  // @@protoc_insertion_point(field_release:autotrade.SumStockKnock.fund_id)
  if (!has_fund_id()) {
    return NULL;
  }
  clear_has_fund_id();
  return fund_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SumStockKnock::set_allocated_fund_id(::std::string* fund_id) {
  if (fund_id != NULL) {
    set_has_fund_id();
  } else {
    clear_has_fund_id();
  }
  fund_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fund_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.SumStockKnock.fund_id)
}

// -------------------------------------------------------------------

// CStockAvailableBalanceQueryReqt

// optional int32 funcid = 1 [default = 11003004];
inline bool CStockAvailableBalanceQueryReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CStockAvailableBalanceQueryReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CStockAvailableBalanceQueryReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CStockAvailableBalanceQueryReqt::clear_funcid() {
  funcid_ = 11003004;
  clear_has_funcid();
}
inline ::google::protobuf::int32 CStockAvailableBalanceQueryReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.CStockAvailableBalanceQueryReqt.funcid)
  return funcid_;
}
inline void CStockAvailableBalanceQueryReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.CStockAvailableBalanceQueryReqt.funcid)
}

// optional string fund_id = 2;
inline bool CStockAvailableBalanceQueryReqt::has_fund_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CStockAvailableBalanceQueryReqt::set_has_fund_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CStockAvailableBalanceQueryReqt::clear_has_fund_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CStockAvailableBalanceQueryReqt::clear_fund_id() {
  fund_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fund_id();
}
inline const ::std::string& CStockAvailableBalanceQueryReqt::fund_id() const {
  // @@protoc_insertion_point(field_get:autotrade.CStockAvailableBalanceQueryReqt.fund_id)
  return fund_id_.GetNoArena();
}
inline void CStockAvailableBalanceQueryReqt::set_fund_id(const ::std::string& value) {
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.CStockAvailableBalanceQueryReqt.fund_id)
}
#if LANG_CXX11
inline void CStockAvailableBalanceQueryReqt::set_fund_id(::std::string&& value) {
  set_has_fund_id();
  fund_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.CStockAvailableBalanceQueryReqt.fund_id)
}
#endif
inline void CStockAvailableBalanceQueryReqt::set_fund_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.CStockAvailableBalanceQueryReqt.fund_id)
}
inline void CStockAvailableBalanceQueryReqt::set_fund_id(const char* value, size_t size) {
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.CStockAvailableBalanceQueryReqt.fund_id)
}
inline ::std::string* CStockAvailableBalanceQueryReqt::mutable_fund_id() {
  set_has_fund_id();
  // @@protoc_insertion_point(field_mutable:autotrade.CStockAvailableBalanceQueryReqt.fund_id)
  return fund_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CStockAvailableBalanceQueryReqt::release_fund_id() {
  // @@protoc_insertion_point(field_release:autotrade.CStockAvailableBalanceQueryReqt.fund_id)
  if (!has_fund_id()) {
    return NULL;
  }
  clear_has_fund_id();
  return fund_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CStockAvailableBalanceQueryReqt::set_allocated_fund_id(::std::string* fund_id) {
  if (fund_id != NULL) {
    set_has_fund_id();
  } else {
    clear_has_fund_id();
  }
  fund_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fund_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.CStockAvailableBalanceQueryReqt.fund_id)
}

// optional string session_id = 3;
inline bool CStockAvailableBalanceQueryReqt::has_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CStockAvailableBalanceQueryReqt::set_has_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CStockAvailableBalanceQueryReqt::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CStockAvailableBalanceQueryReqt::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_session_id();
}
inline const ::std::string& CStockAvailableBalanceQueryReqt::session_id() const {
  // @@protoc_insertion_point(field_get:autotrade.CStockAvailableBalanceQueryReqt.session_id)
  return session_id_.GetNoArena();
}
inline void CStockAvailableBalanceQueryReqt::set_session_id(const ::std::string& value) {
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.CStockAvailableBalanceQueryReqt.session_id)
}
#if LANG_CXX11
inline void CStockAvailableBalanceQueryReqt::set_session_id(::std::string&& value) {
  set_has_session_id();
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.CStockAvailableBalanceQueryReqt.session_id)
}
#endif
inline void CStockAvailableBalanceQueryReqt::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.CStockAvailableBalanceQueryReqt.session_id)
}
inline void CStockAvailableBalanceQueryReqt::set_session_id(const char* value, size_t size) {
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.CStockAvailableBalanceQueryReqt.session_id)
}
inline ::std::string* CStockAvailableBalanceQueryReqt::mutable_session_id() {
  set_has_session_id();
  // @@protoc_insertion_point(field_mutable:autotrade.CStockAvailableBalanceQueryReqt.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CStockAvailableBalanceQueryReqt::release_session_id() {
  // @@protoc_insertion_point(field_release:autotrade.CStockAvailableBalanceQueryReqt.session_id)
  if (!has_session_id()) {
    return NULL;
  }
  clear_has_session_id();
  return session_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CStockAvailableBalanceQueryReqt::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    set_has_session_id();
  } else {
    clear_has_session_id();
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.CStockAvailableBalanceQueryReqt.session_id)
}

// -------------------------------------------------------------------

// CStockAvailableBalanceQueryResp

// optional int32 funcid = 1 [default = 11103004];
inline bool CStockAvailableBalanceQueryResp::has_funcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CStockAvailableBalanceQueryResp::set_has_funcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CStockAvailableBalanceQueryResp::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CStockAvailableBalanceQueryResp::clear_funcid() {
  funcid_ = 11103004;
  clear_has_funcid();
}
inline ::google::protobuf::int32 CStockAvailableBalanceQueryResp::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.CStockAvailableBalanceQueryResp.funcid)
  return funcid_;
}
inline void CStockAvailableBalanceQueryResp::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.CStockAvailableBalanceQueryResp.funcid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace autotrade

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::autotrade::StockQueryOrderReqt_QueryType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autotrade::StockQueryOrderReqt_QueryType>() {
  return ::autotrade::StockQueryOrderReqt_QueryType_descriptor();
}
template <> struct is_proto_enum< ::autotrade::StockQueryOrderReqt_QueryFlag> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autotrade::StockQueryOrderReqt_QueryFlag>() {
  return ::autotrade::StockQueryOrderReqt_QueryFlag_descriptor();
}
template <> struct is_proto_enum< ::autotrade::StockQueryPositionReqt_QueryType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autotrade::StockQueryPositionReqt_QueryType>() {
  return ::autotrade::StockQueryPositionReqt_QueryType_descriptor();
}
template <> struct is_proto_enum< ::autotrade::StockQueryDealDetailReqt_QueryType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autotrade::StockQueryDealDetailReqt_QueryType>() {
  return ::autotrade::StockQueryDealDetailReqt_QueryType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_protos_2fqstock_5fprotocol_2eproto
