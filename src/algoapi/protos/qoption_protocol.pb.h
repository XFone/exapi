// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/qoption_protocol.proto

#ifndef PROTOBUF_INCLUDED_protos_2fqoption_5fprotocol_2eproto
#define PROTOBUF_INCLUDED_protos_2fqoption_5fprotocol_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fqoption_5fprotocol_2eproto 

namespace protobuf_protos_2fqoption_5fprotocol_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[28];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_protos_2fqoption_5fprotocol_2eproto
namespace autotrade {
class OptionCapital;
class OptionCapitalDefaultTypeInternal;
extern OptionCapitalDefaultTypeInternal _OptionCapital_default_instance_;
class OptionDealDetail;
class OptionDealDetailDefaultTypeInternal;
extern OptionDealDetailDefaultTypeInternal _OptionDealDetail_default_instance_;
class OptionDeleteReqt;
class OptionDeleteReqtDefaultTypeInternal;
extern OptionDeleteReqtDefaultTypeInternal _OptionDeleteReqt_default_instance_;
class OptionDeleteResp;
class OptionDeleteRespDefaultTypeInternal;
extern OptionDeleteRespDefaultTypeInternal _OptionDeleteResp_default_instance_;
class OptionDeletesReqt;
class OptionDeletesReqtDefaultTypeInternal;
extern OptionDeletesReqtDefaultTypeInternal _OptionDeletesReqt_default_instance_;
class OptionDeletesResp;
class OptionDeletesRespDefaultTypeInternal;
extern OptionDeletesRespDefaultTypeInternal _OptionDeletesResp_default_instance_;
class OptionLoginReqt;
class OptionLoginReqtDefaultTypeInternal;
extern OptionLoginReqtDefaultTypeInternal _OptionLoginReqt_default_instance_;
class OptionLoginResp;
class OptionLoginRespDefaultTypeInternal;
extern OptionLoginRespDefaultTypeInternal _OptionLoginResp_default_instance_;
class OptionOrderReqt;
class OptionOrderReqtDefaultTypeInternal;
extern OptionOrderReqtDefaultTypeInternal _OptionOrderReqt_default_instance_;
class OptionOrderResp;
class OptionOrderRespDefaultTypeInternal;
extern OptionOrderRespDefaultTypeInternal _OptionOrderResp_default_instance_;
class OptionOrdersCreateResp;
class OptionOrdersCreateRespDefaultTypeInternal;
extern OptionOrdersCreateRespDefaultTypeInternal _OptionOrdersCreateResp_default_instance_;
class OptionOrdersCreateResp_OrderList;
class OptionOrdersCreateResp_OrderListDefaultTypeInternal;
extern OptionOrdersCreateResp_OrderListDefaultTypeInternal _OptionOrdersCreateResp_OrderList_default_instance_;
class OptionOrdersReqt;
class OptionOrdersReqtDefaultTypeInternal;
extern OptionOrdersReqtDefaultTypeInternal _OptionOrdersReqt_default_instance_;
class OptionOrdersReqt_SingleOrder;
class OptionOrdersReqt_SingleOrderDefaultTypeInternal;
extern OptionOrdersReqt_SingleOrderDefaultTypeInternal _OptionOrdersReqt_SingleOrder_default_instance_;
class OptionOrdersResp;
class OptionOrdersRespDefaultTypeInternal;
extern OptionOrdersRespDefaultTypeInternal _OptionOrdersResp_default_instance_;
class OptionOrdersResp_OrderResult;
class OptionOrdersResp_OrderResultDefaultTypeInternal;
extern OptionOrdersResp_OrderResultDefaultTypeInternal _OptionOrdersResp_OrderResult_default_instance_;
class OptionPosition;
class OptionPositionDefaultTypeInternal;
extern OptionPositionDefaultTypeInternal _OptionPosition_default_instance_;
class OptionPosition_Position;
class OptionPosition_PositionDefaultTypeInternal;
extern OptionPosition_PositionDefaultTypeInternal _OptionPosition_Position_default_instance_;
class OptionQueryCaptialReqt;
class OptionQueryCaptialReqtDefaultTypeInternal;
extern OptionQueryCaptialReqtDefaultTypeInternal _OptionQueryCaptialReqt_default_instance_;
class OptionQueryDealDetailReqt;
class OptionQueryDealDetailReqtDefaultTypeInternal;
extern OptionQueryDealDetailReqtDefaultTypeInternal _OptionQueryDealDetailReqt_default_instance_;
class OptionQueryOrderReqt;
class OptionQueryOrderReqtDefaultTypeInternal;
extern OptionQueryOrderReqtDefaultTypeInternal _OptionQueryOrderReqt_default_instance_;
class OptionQueryOrderResp;
class OptionQueryOrderRespDefaultTypeInternal;
extern OptionQueryOrderRespDefaultTypeInternal _OptionQueryOrderResp_default_instance_;
class OptionQueryOrderResp_OrderDetail;
class OptionQueryOrderResp_OrderDetailDefaultTypeInternal;
extern OptionQueryOrderResp_OrderDetailDefaultTypeInternal _OptionQueryOrderResp_OrderDetail_default_instance_;
class OptionQueryOrdersReqt;
class OptionQueryOrdersReqtDefaultTypeInternal;
extern OptionQueryOrdersReqtDefaultTypeInternal _OptionQueryOrdersReqt_default_instance_;
class OptionQueryOrdersResp;
class OptionQueryOrdersRespDefaultTypeInternal;
extern OptionQueryOrdersRespDefaultTypeInternal _OptionQueryOrdersResp_default_instance_;
class OptionQueryOrdersResp_OrderDetail;
class OptionQueryOrdersResp_OrderDetailDefaultTypeInternal;
extern OptionQueryOrdersResp_OrderDetailDefaultTypeInternal _OptionQueryOrdersResp_OrderDetail_default_instance_;
class OptionQueryPositionReqt;
class OptionQueryPositionReqtDefaultTypeInternal;
extern OptionQueryPositionReqtDefaultTypeInternal _OptionQueryPositionReqt_default_instance_;
class RawOptionKnock;
class RawOptionKnockDefaultTypeInternal;
extern RawOptionKnockDefaultTypeInternal _RawOptionKnock_default_instance_;
}  // namespace autotrade
namespace google {
namespace protobuf {
template<> ::autotrade::OptionCapital* Arena::CreateMaybeMessage<::autotrade::OptionCapital>(Arena*);
template<> ::autotrade::OptionDealDetail* Arena::CreateMaybeMessage<::autotrade::OptionDealDetail>(Arena*);
template<> ::autotrade::OptionDeleteReqt* Arena::CreateMaybeMessage<::autotrade::OptionDeleteReqt>(Arena*);
template<> ::autotrade::OptionDeleteResp* Arena::CreateMaybeMessage<::autotrade::OptionDeleteResp>(Arena*);
template<> ::autotrade::OptionDeletesReqt* Arena::CreateMaybeMessage<::autotrade::OptionDeletesReqt>(Arena*);
template<> ::autotrade::OptionDeletesResp* Arena::CreateMaybeMessage<::autotrade::OptionDeletesResp>(Arena*);
template<> ::autotrade::OptionLoginReqt* Arena::CreateMaybeMessage<::autotrade::OptionLoginReqt>(Arena*);
template<> ::autotrade::OptionLoginResp* Arena::CreateMaybeMessage<::autotrade::OptionLoginResp>(Arena*);
template<> ::autotrade::OptionOrderReqt* Arena::CreateMaybeMessage<::autotrade::OptionOrderReqt>(Arena*);
template<> ::autotrade::OptionOrderResp* Arena::CreateMaybeMessage<::autotrade::OptionOrderResp>(Arena*);
template<> ::autotrade::OptionOrdersCreateResp* Arena::CreateMaybeMessage<::autotrade::OptionOrdersCreateResp>(Arena*);
template<> ::autotrade::OptionOrdersCreateResp_OrderList* Arena::CreateMaybeMessage<::autotrade::OptionOrdersCreateResp_OrderList>(Arena*);
template<> ::autotrade::OptionOrdersReqt* Arena::CreateMaybeMessage<::autotrade::OptionOrdersReqt>(Arena*);
template<> ::autotrade::OptionOrdersReqt_SingleOrder* Arena::CreateMaybeMessage<::autotrade::OptionOrdersReqt_SingleOrder>(Arena*);
template<> ::autotrade::OptionOrdersResp* Arena::CreateMaybeMessage<::autotrade::OptionOrdersResp>(Arena*);
template<> ::autotrade::OptionOrdersResp_OrderResult* Arena::CreateMaybeMessage<::autotrade::OptionOrdersResp_OrderResult>(Arena*);
template<> ::autotrade::OptionPosition* Arena::CreateMaybeMessage<::autotrade::OptionPosition>(Arena*);
template<> ::autotrade::OptionPosition_Position* Arena::CreateMaybeMessage<::autotrade::OptionPosition_Position>(Arena*);
template<> ::autotrade::OptionQueryCaptialReqt* Arena::CreateMaybeMessage<::autotrade::OptionQueryCaptialReqt>(Arena*);
template<> ::autotrade::OptionQueryDealDetailReqt* Arena::CreateMaybeMessage<::autotrade::OptionQueryDealDetailReqt>(Arena*);
template<> ::autotrade::OptionQueryOrderReqt* Arena::CreateMaybeMessage<::autotrade::OptionQueryOrderReqt>(Arena*);
template<> ::autotrade::OptionQueryOrderResp* Arena::CreateMaybeMessage<::autotrade::OptionQueryOrderResp>(Arena*);
template<> ::autotrade::OptionQueryOrderResp_OrderDetail* Arena::CreateMaybeMessage<::autotrade::OptionQueryOrderResp_OrderDetail>(Arena*);
template<> ::autotrade::OptionQueryOrdersReqt* Arena::CreateMaybeMessage<::autotrade::OptionQueryOrdersReqt>(Arena*);
template<> ::autotrade::OptionQueryOrdersResp* Arena::CreateMaybeMessage<::autotrade::OptionQueryOrdersResp>(Arena*);
template<> ::autotrade::OptionQueryOrdersResp_OrderDetail* Arena::CreateMaybeMessage<::autotrade::OptionQueryOrdersResp_OrderDetail>(Arena*);
template<> ::autotrade::OptionQueryPositionReqt* Arena::CreateMaybeMessage<::autotrade::OptionQueryPositionReqt>(Arena*);
template<> ::autotrade::RawOptionKnock* Arena::CreateMaybeMessage<::autotrade::RawOptionKnock>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace autotrade {

enum OptionQueryOrderReqt_QueryType {
  OptionQueryOrderReqt_QueryType_Type_ONCE = 0,
  OptionQueryOrderReqt_QueryType_Type_MORE = 1,
  OptionQueryOrderReqt_QueryType_Type_ALL = 2
};
bool OptionQueryOrderReqt_QueryType_IsValid(int value);
const OptionQueryOrderReqt_QueryType OptionQueryOrderReqt_QueryType_QueryType_MIN = OptionQueryOrderReqt_QueryType_Type_ONCE;
const OptionQueryOrderReqt_QueryType OptionQueryOrderReqt_QueryType_QueryType_MAX = OptionQueryOrderReqt_QueryType_Type_ALL;
const int OptionQueryOrderReqt_QueryType_QueryType_ARRAYSIZE = OptionQueryOrderReqt_QueryType_QueryType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OptionQueryOrderReqt_QueryType_descriptor();
inline const ::std::string& OptionQueryOrderReqt_QueryType_Name(OptionQueryOrderReqt_QueryType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OptionQueryOrderReqt_QueryType_descriptor(), value);
}
inline bool OptionQueryOrderReqt_QueryType_Parse(
    const ::std::string& name, OptionQueryOrderReqt_QueryType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OptionQueryOrderReqt_QueryType>(
    OptionQueryOrderReqt_QueryType_descriptor(), name, value);
}
enum OptionQueryOrderReqt_QueryFlag {
  OptionQueryOrderReqt_QueryFlag_Type_Query_ALL = 0,
  OptionQueryOrderReqt_QueryFlag_Type_NO_DELETE = 1,
  OptionQueryOrderReqt_QueryFlag_Type_DELETE = 2
};
bool OptionQueryOrderReqt_QueryFlag_IsValid(int value);
const OptionQueryOrderReqt_QueryFlag OptionQueryOrderReqt_QueryFlag_QueryFlag_MIN = OptionQueryOrderReqt_QueryFlag_Type_Query_ALL;
const OptionQueryOrderReqt_QueryFlag OptionQueryOrderReqt_QueryFlag_QueryFlag_MAX = OptionQueryOrderReqt_QueryFlag_Type_DELETE;
const int OptionQueryOrderReqt_QueryFlag_QueryFlag_ARRAYSIZE = OptionQueryOrderReqt_QueryFlag_QueryFlag_MAX + 1;

const ::google::protobuf::EnumDescriptor* OptionQueryOrderReqt_QueryFlag_descriptor();
inline const ::std::string& OptionQueryOrderReqt_QueryFlag_Name(OptionQueryOrderReqt_QueryFlag value) {
  return ::google::protobuf::internal::NameOfEnum(
    OptionQueryOrderReqt_QueryFlag_descriptor(), value);
}
inline bool OptionQueryOrderReqt_QueryFlag_Parse(
    const ::std::string& name, OptionQueryOrderReqt_QueryFlag* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OptionQueryOrderReqt_QueryFlag>(
    OptionQueryOrderReqt_QueryFlag_descriptor(), name, value);
}
enum OptionQueryPositionReqt_QueryType {
  OptionQueryPositionReqt_QueryType_Type_ONCE = 0,
  OptionQueryPositionReqt_QueryType_Type_MORE = 1,
  OptionQueryPositionReqt_QueryType_Type_ALL = 2
};
bool OptionQueryPositionReqt_QueryType_IsValid(int value);
const OptionQueryPositionReqt_QueryType OptionQueryPositionReqt_QueryType_QueryType_MIN = OptionQueryPositionReqt_QueryType_Type_ONCE;
const OptionQueryPositionReqt_QueryType OptionQueryPositionReqt_QueryType_QueryType_MAX = OptionQueryPositionReqt_QueryType_Type_ALL;
const int OptionQueryPositionReqt_QueryType_QueryType_ARRAYSIZE = OptionQueryPositionReqt_QueryType_QueryType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OptionQueryPositionReqt_QueryType_descriptor();
inline const ::std::string& OptionQueryPositionReqt_QueryType_Name(OptionQueryPositionReqt_QueryType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OptionQueryPositionReqt_QueryType_descriptor(), value);
}
inline bool OptionQueryPositionReqt_QueryType_Parse(
    const ::std::string& name, OptionQueryPositionReqt_QueryType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OptionQueryPositionReqt_QueryType>(
    OptionQueryPositionReqt_QueryType_descriptor(), name, value);
}
enum OptionQueryDealDetailReqt_QueryType {
  OptionQueryDealDetailReqt_QueryType_Type_ONCE = 0,
  OptionQueryDealDetailReqt_QueryType_Type_MORE = 1,
  OptionQueryDealDetailReqt_QueryType_Type_ALL = 2
};
bool OptionQueryDealDetailReqt_QueryType_IsValid(int value);
const OptionQueryDealDetailReqt_QueryType OptionQueryDealDetailReqt_QueryType_QueryType_MIN = OptionQueryDealDetailReqt_QueryType_Type_ONCE;
const OptionQueryDealDetailReqt_QueryType OptionQueryDealDetailReqt_QueryType_QueryType_MAX = OptionQueryDealDetailReqt_QueryType_Type_ALL;
const int OptionQueryDealDetailReqt_QueryType_QueryType_ARRAYSIZE = OptionQueryDealDetailReqt_QueryType_QueryType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OptionQueryDealDetailReqt_QueryType_descriptor();
inline const ::std::string& OptionQueryDealDetailReqt_QueryType_Name(OptionQueryDealDetailReqt_QueryType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OptionQueryDealDetailReqt_QueryType_descriptor(), value);
}
inline bool OptionQueryDealDetailReqt_QueryType_Parse(
    const ::std::string& name, OptionQueryDealDetailReqt_QueryType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OptionQueryDealDetailReqt_QueryType>(
    OptionQueryDealDetailReqt_QueryType_descriptor(), name, value);
}
// ===================================================================

class OptionLoginReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.OptionLoginReqt) */ {
 public:
  OptionLoginReqt();
  virtual ~OptionLoginReqt();

  OptionLoginReqt(const OptionLoginReqt& from);

  inline OptionLoginReqt& operator=(const OptionLoginReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionLoginReqt(OptionLoginReqt&& from) noexcept
    : OptionLoginReqt() {
    *this = ::std::move(from);
  }

  inline OptionLoginReqt& operator=(OptionLoginReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionLoginReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionLoginReqt* internal_default_instance() {
    return reinterpret_cast<const OptionLoginReqt*>(
               &_OptionLoginReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(OptionLoginReqt* other);
  friend void swap(OptionLoginReqt& a, OptionLoginReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionLoginReqt* New() const final {
    return CreateMaybeMessage<OptionLoginReqt>(NULL);
  }

  OptionLoginReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OptionLoginReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OptionLoginReqt& from);
  void MergeFrom(const OptionLoginReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionLoginReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 funcid = 1 [default = 13000001];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.OptionLoginReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqoption_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OptionLoginResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.OptionLoginResp) */ {
 public:
  OptionLoginResp();
  virtual ~OptionLoginResp();

  OptionLoginResp(const OptionLoginResp& from);

  inline OptionLoginResp& operator=(const OptionLoginResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionLoginResp(OptionLoginResp&& from) noexcept
    : OptionLoginResp() {
    *this = ::std::move(from);
  }

  inline OptionLoginResp& operator=(OptionLoginResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionLoginResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionLoginResp* internal_default_instance() {
    return reinterpret_cast<const OptionLoginResp*>(
               &_OptionLoginResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(OptionLoginResp* other);
  friend void swap(OptionLoginResp& a, OptionLoginResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionLoginResp* New() const final {
    return CreateMaybeMessage<OptionLoginResp>(NULL);
  }

  OptionLoginResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OptionLoginResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OptionLoginResp& from);
  void MergeFrom(const OptionLoginResp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionLoginResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string fund_account = 2;
  bool has_fund_account() const;
  void clear_fund_account();
  static const int kFundAccountFieldNumber = 2;
  const ::std::string& fund_account() const;
  void set_fund_account(const ::std::string& value);
  #if LANG_CXX11
  void set_fund_account(::std::string&& value);
  #endif
  void set_fund_account(const char* value);
  void set_fund_account(const char* value, size_t size);
  ::std::string* mutable_fund_account();
  ::std::string* release_fund_account();
  void set_allocated_fund_account(::std::string* fund_account);

  // optional int32 funcid = 1 [default = 13100001];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.OptionLoginResp)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_fund_account();
  void clear_has_fund_account();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr fund_account_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqoption_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OptionOrderReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.OptionOrderReqt) */ {
 public:
  OptionOrderReqt();
  virtual ~OptionOrderReqt();

  OptionOrderReqt(const OptionOrderReqt& from);

  inline OptionOrderReqt& operator=(const OptionOrderReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionOrderReqt(OptionOrderReqt&& from) noexcept
    : OptionOrderReqt() {
    *this = ::std::move(from);
  }

  inline OptionOrderReqt& operator=(OptionOrderReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionOrderReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionOrderReqt* internal_default_instance() {
    return reinterpret_cast<const OptionOrderReqt*>(
               &_OptionOrderReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(OptionOrderReqt* other);
  friend void swap(OptionOrderReqt& a, OptionOrderReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionOrderReqt* New() const final {
    return CreateMaybeMessage<OptionOrderReqt>(NULL);
  }

  OptionOrderReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OptionOrderReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OptionOrderReqt& from);
  void MergeFrom(const OptionOrderReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionOrderReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string code = 2;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string match_condition = 11 [default = "GFD"];
  bool has_match_condition() const;
  void clear_match_condition();
  static const int kMatchConditionFieldNumber = 11;
  const ::std::string& match_condition() const;
  void set_match_condition(const ::std::string& value);
  #if LANG_CXX11
  void set_match_condition(::std::string&& value);
  #endif
  void set_match_condition(const char* value);
  void set_match_condition(const char* value, size_t size);
  ::std::string* mutable_match_condition();
  ::std::string* release_match_condition();
  void set_allocated_match_condition(::std::string* match_condition);

  // required string order_id = 12;
  bool has_order_id() const;
  void clear_order_id();
  static const int kOrderIdFieldNumber = 12;
  const ::std::string& order_id() const;
  void set_order_id(const ::std::string& value);
  #if LANG_CXX11
  void set_order_id(::std::string&& value);
  #endif
  void set_order_id(const char* value);
  void set_order_id(const char* value, size_t size);
  ::std::string* mutable_order_id();
  ::std::string* release_order_id();
  void set_allocated_order_id(::std::string* order_id);

  // optional string request_id = 13;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 13;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional string order_type = 14;
  bool has_order_type() const;
  void clear_order_type();
  static const int kOrderTypeFieldNumber = 14;
  const ::std::string& order_type() const;
  void set_order_type(const ::std::string& value);
  #if LANG_CXX11
  void set_order_type(::std::string&& value);
  #endif
  void set_order_type(const char* value);
  void set_order_type(const char* value, size_t size);
  ::std::string* mutable_order_type();
  ::std::string* release_order_type();
  void set_allocated_order_type(::std::string* order_type);

  // optional string parent_id = 15;
  bool has_parent_id() const;
  void clear_parent_id();
  static const int kParentIdFieldNumber = 15;
  const ::std::string& parent_id() const;
  void set_parent_id(const ::std::string& value);
  #if LANG_CXX11
  void set_parent_id(::std::string&& value);
  #endif
  void set_parent_id(const char* value);
  void set_parent_id(const char* value, size_t size);
  ::std::string* mutable_parent_id();
  ::std::string* release_parent_id();
  void set_allocated_parent_id(::std::string* parent_id);

  // optional string parent_type = 16;
  bool has_parent_type() const;
  void clear_parent_type();
  static const int kParentTypeFieldNumber = 16;
  const ::std::string& parent_type() const;
  void set_parent_type(const ::std::string& value);
  #if LANG_CXX11
  void set_parent_type(::std::string&& value);
  #endif
  void set_parent_type(const char* value);
  void set_parent_type(const char* value, size_t size);
  ::std::string* mutable_parent_type();
  ::std::string* release_parent_type();
  void set_allocated_parent_type(::std::string* parent_type);

  // optional string robot_id = 17;
  bool has_robot_id() const;
  void clear_robot_id();
  static const int kRobotIdFieldNumber = 17;
  const ::std::string& robot_id() const;
  void set_robot_id(const ::std::string& value);
  #if LANG_CXX11
  void set_robot_id(::std::string&& value);
  #endif
  void set_robot_id(const char* value);
  void set_robot_id(const char* value, size_t size);
  ::std::string* mutable_robot_id();
  ::std::string* release_robot_id();
  void set_allocated_robot_id(::std::string* robot_id);

  // optional string trader_id = 18;
  bool has_trader_id() const;
  void clear_trader_id();
  static const int kTraderIdFieldNumber = 18;
  const ::std::string& trader_id() const;
  void set_trader_id(const ::std::string& value);
  #if LANG_CXX11
  void set_trader_id(::std::string&& value);
  #endif
  void set_trader_id(const char* value);
  void set_trader_id(const char* value, size_t size);
  ::std::string* mutable_trader_id();
  ::std::string* release_trader_id();
  void set_allocated_trader_id(::std::string* trader_id);

  // required int64 price = 4;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 4;
  ::google::protobuf::int64 price() const;
  void set_price(::google::protobuf::int64 value);

  // required int64 qty = 5;
  bool has_qty() const;
  void clear_qty();
  static const int kQtyFieldNumber = 5;
  ::google::protobuf::int64 qty() const;
  void set_qty(::google::protobuf::int64 value);

  // required int64 bsflag = 6;
  bool has_bsflag() const;
  void clear_bsflag();
  static const int kBsflagFieldNumber = 6;
  ::google::protobuf::int64 bsflag() const;
  void set_bsflag(::google::protobuf::int64 value);

  // required int64 market = 7;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 7;
  ::google::protobuf::int64 market() const;
  void set_market(::google::protobuf::int64 value);

  // optional int32 kpcbj = 8;
  bool has_kpcbj() const;
  void clear_kpcbj();
  static const int kKpcbjFieldNumber = 8;
  ::google::protobuf::int32 kpcbj() const;
  void set_kpcbj(::google::protobuf::int32 value);

  // optional int32 order_price_type = 9 [default = 0];
  bool has_order_price_type() const;
  void clear_order_price_type();
  static const int kOrderPriceTypeFieldNumber = 9;
  ::google::protobuf::int32 order_price_type() const;
  void set_order_price_type(::google::protobuf::int32 value);

  // optional int64 request_time = 19 [default = 0];
  bool has_request_time() const;
  void clear_request_time();
  static const int kRequestTimeFieldNumber = 19;
  ::google::protobuf::int64 request_time() const;
  void set_request_time(::google::protobuf::int64 value);

  // optional int64 request_date = 21 [default = 0];
  bool has_request_date() const;
  void clear_request_date();
  static const int kRequestDateFieldNumber = 21;
  ::google::protobuf::int64 request_date() const;
  void set_request_date(::google::protobuf::int64 value);

  // optional int32 covered_flag = 10 [default = 0];
  bool has_covered_flag() const;
  void clear_covered_flag();
  static const int kCoveredFlagFieldNumber = 10;
  ::google::protobuf::int32 covered_flag() const;
  void set_covered_flag(::google::protobuf::int32 value);

  // optional int32 funcid = 1 [default = 13001001];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // optional int64 active_interval = 20 [default = 1000];
  bool has_active_interval() const;
  void clear_active_interval();
  static const int kActiveIntervalFieldNumber = 20;
  ::google::protobuf::int64 active_interval() const;
  void set_active_interval(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:autotrade.OptionOrderReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_code();
  void clear_has_code();
  void set_has_name();
  void clear_has_name();
  void set_has_price();
  void clear_has_price();
  void set_has_qty();
  void clear_has_qty();
  void set_has_bsflag();
  void clear_has_bsflag();
  void set_has_market();
  void clear_has_market();
  void set_has_kpcbj();
  void clear_has_kpcbj();
  void set_has_order_price_type();
  void clear_has_order_price_type();
  void set_has_covered_flag();
  void clear_has_covered_flag();
  void set_has_match_condition();
  void clear_has_match_condition();
  void set_has_order_id();
  void clear_has_order_id();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_order_type();
  void clear_has_order_type();
  void set_has_parent_id();
  void clear_has_parent_id();
  void set_has_parent_type();
  void clear_has_parent_type();
  void set_has_robot_id();
  void clear_has_robot_id();
  void set_has_trader_id();
  void clear_has_trader_id();
  void set_has_request_time();
  void clear_has_request_time();
  void set_has_active_interval();
  void clear_has_active_interval();
  void set_has_request_date();
  void clear_has_request_date();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_match_condition_;
  private:
  ::google::protobuf::internal::ArenaStringPtr match_condition_;
  ::google::protobuf::internal::ArenaStringPtr order_id_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr order_type_;
  ::google::protobuf::internal::ArenaStringPtr parent_id_;
  ::google::protobuf::internal::ArenaStringPtr parent_type_;
  ::google::protobuf::internal::ArenaStringPtr robot_id_;
  ::google::protobuf::internal::ArenaStringPtr trader_id_;
  ::google::protobuf::int64 price_;
  ::google::protobuf::int64 qty_;
  ::google::protobuf::int64 bsflag_;
  ::google::protobuf::int64 market_;
  ::google::protobuf::int32 kpcbj_;
  ::google::protobuf::int32 order_price_type_;
  ::google::protobuf::int64 request_time_;
  ::google::protobuf::int64 request_date_;
  ::google::protobuf::int32 covered_flag_;
  ::google::protobuf::int32 funcid_;
  ::google::protobuf::int64 active_interval_;
  friend struct ::protobuf_protos_2fqoption_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OptionOrderResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.OptionOrderResp) */ {
 public:
  OptionOrderResp();
  virtual ~OptionOrderResp();

  OptionOrderResp(const OptionOrderResp& from);

  inline OptionOrderResp& operator=(const OptionOrderResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionOrderResp(OptionOrderResp&& from) noexcept
    : OptionOrderResp() {
    *this = ::std::move(from);
  }

  inline OptionOrderResp& operator=(OptionOrderResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionOrderResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionOrderResp* internal_default_instance() {
    return reinterpret_cast<const OptionOrderResp*>(
               &_OptionOrderResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(OptionOrderResp* other);
  friend void swap(OptionOrderResp& a, OptionOrderResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionOrderResp* New() const final {
    return CreateMaybeMessage<OptionOrderResp>(NULL);
  }

  OptionOrderResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OptionOrderResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OptionOrderResp& from);
  void MergeFrom(const OptionOrderResp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionOrderResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string order_nos = 3;
  int order_nos_size() const;
  void clear_order_nos();
  static const int kOrderNosFieldNumber = 3;
  const ::std::string& order_nos(int index) const;
  ::std::string* mutable_order_nos(int index);
  void set_order_nos(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_order_nos(int index, ::std::string&& value);
  #endif
  void set_order_nos(int index, const char* value);
  void set_order_nos(int index, const char* value, size_t size);
  ::std::string* add_order_nos();
  void add_order_nos(const ::std::string& value);
  #if LANG_CXX11
  void add_order_nos(::std::string&& value);
  #endif
  void add_order_nos(const char* value);
  void add_order_nos(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& order_nos() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_order_nos();

  // required string order_group = 2;
  bool has_order_group() const;
  void clear_order_group();
  static const int kOrderGroupFieldNumber = 2;
  const ::std::string& order_group() const;
  void set_order_group(const ::std::string& value);
  #if LANG_CXX11
  void set_order_group(::std::string&& value);
  #endif
  void set_order_group(const char* value);
  void set_order_group(const char* value, size_t size);
  ::std::string* mutable_order_group();
  ::std::string* release_order_group();
  void set_allocated_order_group(::std::string* order_group);

  // optional string request_id = 4;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 4;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // required string order_id = 5;
  bool has_order_id() const;
  void clear_order_id();
  static const int kOrderIdFieldNumber = 5;
  const ::std::string& order_id() const;
  void set_order_id(const ::std::string& value);
  #if LANG_CXX11
  void set_order_id(::std::string&& value);
  #endif
  void set_order_id(const char* value);
  void set_order_id(const char* value, size_t size);
  ::std::string* mutable_order_id();
  ::std::string* release_order_id();
  void set_allocated_order_id(::std::string* order_id);

  // optional int32 funcid = 1 [default = 13101001];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.OptionOrderResp)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_order_group();
  void clear_has_order_group();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_order_id();
  void clear_has_order_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> order_nos_;
  ::google::protobuf::internal::ArenaStringPtr order_group_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr order_id_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqoption_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OptionOrdersReqt_SingleOrder : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.OptionOrdersReqt.SingleOrder) */ {
 public:
  OptionOrdersReqt_SingleOrder();
  virtual ~OptionOrdersReqt_SingleOrder();

  OptionOrdersReqt_SingleOrder(const OptionOrdersReqt_SingleOrder& from);

  inline OptionOrdersReqt_SingleOrder& operator=(const OptionOrdersReqt_SingleOrder& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionOrdersReqt_SingleOrder(OptionOrdersReqt_SingleOrder&& from) noexcept
    : OptionOrdersReqt_SingleOrder() {
    *this = ::std::move(from);
  }

  inline OptionOrdersReqt_SingleOrder& operator=(OptionOrdersReqt_SingleOrder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionOrdersReqt_SingleOrder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionOrdersReqt_SingleOrder* internal_default_instance() {
    return reinterpret_cast<const OptionOrdersReqt_SingleOrder*>(
               &_OptionOrdersReqt_SingleOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(OptionOrdersReqt_SingleOrder* other);
  friend void swap(OptionOrdersReqt_SingleOrder& a, OptionOrdersReqt_SingleOrder& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionOrdersReqt_SingleOrder* New() const final {
    return CreateMaybeMessage<OptionOrdersReqt_SingleOrder>(NULL);
  }

  OptionOrdersReqt_SingleOrder* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OptionOrdersReqt_SingleOrder>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OptionOrdersReqt_SingleOrder& from);
  void MergeFrom(const OptionOrdersReqt_SingleOrder& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionOrdersReqt_SingleOrder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // required int64 price = 2;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 2;
  ::google::protobuf::int64 price() const;
  void set_price(::google::protobuf::int64 value);

  // required int64 qty = 3;
  bool has_qty() const;
  void clear_qty();
  static const int kQtyFieldNumber = 3;
  ::google::protobuf::int64 qty() const;
  void set_qty(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:autotrade.OptionOrdersReqt.SingleOrder)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_price();
  void clear_has_price();
  void set_has_qty();
  void clear_has_qty();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::int64 price_;
  ::google::protobuf::int64 qty_;
  friend struct ::protobuf_protos_2fqoption_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OptionOrdersReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.OptionOrdersReqt) */ {
 public:
  OptionOrdersReqt();
  virtual ~OptionOrdersReqt();

  OptionOrdersReqt(const OptionOrdersReqt& from);

  inline OptionOrdersReqt& operator=(const OptionOrdersReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionOrdersReqt(OptionOrdersReqt&& from) noexcept
    : OptionOrdersReqt() {
    *this = ::std::move(from);
  }

  inline OptionOrdersReqt& operator=(OptionOrdersReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionOrdersReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionOrdersReqt* internal_default_instance() {
    return reinterpret_cast<const OptionOrdersReqt*>(
               &_OptionOrdersReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(OptionOrdersReqt* other);
  friend void swap(OptionOrdersReqt& a, OptionOrdersReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionOrdersReqt* New() const final {
    return CreateMaybeMessage<OptionOrdersReqt>(NULL);
  }

  OptionOrdersReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OptionOrdersReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OptionOrdersReqt& from);
  void MergeFrom(const OptionOrdersReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionOrdersReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OptionOrdersReqt_SingleOrder SingleOrder;

  // accessors -------------------------------------------------------

  // repeated .autotrade.OptionOrdersReqt.SingleOrder order_list = 2;
  int order_list_size() const;
  void clear_order_list();
  static const int kOrderListFieldNumber = 2;
  ::autotrade::OptionOrdersReqt_SingleOrder* mutable_order_list(int index);
  ::google::protobuf::RepeatedPtrField< ::autotrade::OptionOrdersReqt_SingleOrder >*
      mutable_order_list();
  const ::autotrade::OptionOrdersReqt_SingleOrder& order_list(int index) const;
  ::autotrade::OptionOrdersReqt_SingleOrder* add_order_list();
  const ::google::protobuf::RepeatedPtrField< ::autotrade::OptionOrdersReqt_SingleOrder >&
      order_list() const;

  // required string order_id = 5;
  bool has_order_id() const;
  void clear_order_id();
  static const int kOrderIdFieldNumber = 5;
  const ::std::string& order_id() const;
  void set_order_id(const ::std::string& value);
  #if LANG_CXX11
  void set_order_id(::std::string&& value);
  #endif
  void set_order_id(const char* value);
  void set_order_id(const char* value, size_t size);
  ::std::string* mutable_order_id();
  ::std::string* release_order_id();
  void set_allocated_order_id(::std::string* order_id);

  // optional string request_id = 6;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 6;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional string order_type = 7;
  bool has_order_type() const;
  void clear_order_type();
  static const int kOrderTypeFieldNumber = 7;
  const ::std::string& order_type() const;
  void set_order_type(const ::std::string& value);
  #if LANG_CXX11
  void set_order_type(::std::string&& value);
  #endif
  void set_order_type(const char* value);
  void set_order_type(const char* value, size_t size);
  ::std::string* mutable_order_type();
  ::std::string* release_order_type();
  void set_allocated_order_type(::std::string* order_type);

  // optional string parent_id = 8;
  bool has_parent_id() const;
  void clear_parent_id();
  static const int kParentIdFieldNumber = 8;
  const ::std::string& parent_id() const;
  void set_parent_id(const ::std::string& value);
  #if LANG_CXX11
  void set_parent_id(::std::string&& value);
  #endif
  void set_parent_id(const char* value);
  void set_parent_id(const char* value, size_t size);
  ::std::string* mutable_parent_id();
  ::std::string* release_parent_id();
  void set_allocated_parent_id(::std::string* parent_id);

  // optional string parent_type = 9;
  bool has_parent_type() const;
  void clear_parent_type();
  static const int kParentTypeFieldNumber = 9;
  const ::std::string& parent_type() const;
  void set_parent_type(const ::std::string& value);
  #if LANG_CXX11
  void set_parent_type(::std::string&& value);
  #endif
  void set_parent_type(const char* value);
  void set_parent_type(const char* value, size_t size);
  ::std::string* mutable_parent_type();
  ::std::string* release_parent_type();
  void set_allocated_parent_type(::std::string* parent_type);

  // optional string robot_id = 10;
  bool has_robot_id() const;
  void clear_robot_id();
  static const int kRobotIdFieldNumber = 10;
  const ::std::string& robot_id() const;
  void set_robot_id(const ::std::string& value);
  #if LANG_CXX11
  void set_robot_id(::std::string&& value);
  #endif
  void set_robot_id(const char* value);
  void set_robot_id(const char* value, size_t size);
  ::std::string* mutable_robot_id();
  ::std::string* release_robot_id();
  void set_allocated_robot_id(::std::string* robot_id);

  // optional string trader_id = 11;
  bool has_trader_id() const;
  void clear_trader_id();
  static const int kTraderIdFieldNumber = 11;
  const ::std::string& trader_id() const;
  void set_trader_id(const ::std::string& value);
  #if LANG_CXX11
  void set_trader_id(::std::string&& value);
  #endif
  void set_trader_id(const char* value);
  void set_trader_id(const char* value, size_t size);
  ::std::string* mutable_trader_id();
  ::std::string* release_trader_id();
  void set_allocated_trader_id(::std::string* trader_id);

  // required int64 bsflag = 3;
  bool has_bsflag() const;
  void clear_bsflag();
  static const int kBsflagFieldNumber = 3;
  ::google::protobuf::int64 bsflag() const;
  void set_bsflag(::google::protobuf::int64 value);

  // required int64 market = 4;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 4;
  ::google::protobuf::int64 market() const;
  void set_market(::google::protobuf::int64 value);

  // optional int64 request_time = 12 [default = 0];
  bool has_request_time() const;
  void clear_request_time();
  static const int kRequestTimeFieldNumber = 12;
  ::google::protobuf::int64 request_time() const;
  void set_request_time(::google::protobuf::int64 value);

  // optional int64 request_date = 14 [default = 0];
  bool has_request_date() const;
  void clear_request_date();
  static const int kRequestDateFieldNumber = 14;
  ::google::protobuf::int64 request_date() const;
  void set_request_date(::google::protobuf::int64 value);

  // optional int32 funcid = 1 [default = 13001002];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // optional int64 active_interval = 13 [default = 1000];
  bool has_active_interval() const;
  void clear_active_interval();
  static const int kActiveIntervalFieldNumber = 13;
  ::google::protobuf::int64 active_interval() const;
  void set_active_interval(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:autotrade.OptionOrdersReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_bsflag();
  void clear_has_bsflag();
  void set_has_market();
  void clear_has_market();
  void set_has_order_id();
  void clear_has_order_id();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_order_type();
  void clear_has_order_type();
  void set_has_parent_id();
  void clear_has_parent_id();
  void set_has_parent_type();
  void clear_has_parent_type();
  void set_has_robot_id();
  void clear_has_robot_id();
  void set_has_trader_id();
  void clear_has_trader_id();
  void set_has_request_time();
  void clear_has_request_time();
  void set_has_active_interval();
  void clear_has_active_interval();
  void set_has_request_date();
  void clear_has_request_date();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::autotrade::OptionOrdersReqt_SingleOrder > order_list_;
  ::google::protobuf::internal::ArenaStringPtr order_id_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr order_type_;
  ::google::protobuf::internal::ArenaStringPtr parent_id_;
  ::google::protobuf::internal::ArenaStringPtr parent_type_;
  ::google::protobuf::internal::ArenaStringPtr robot_id_;
  ::google::protobuf::internal::ArenaStringPtr trader_id_;
  ::google::protobuf::int64 bsflag_;
  ::google::protobuf::int64 market_;
  ::google::protobuf::int64 request_time_;
  ::google::protobuf::int64 request_date_;
  ::google::protobuf::int32 funcid_;
  ::google::protobuf::int64 active_interval_;
  friend struct ::protobuf_protos_2fqoption_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OptionOrdersResp_OrderResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.OptionOrdersResp.OrderResult) */ {
 public:
  OptionOrdersResp_OrderResult();
  virtual ~OptionOrdersResp_OrderResult();

  OptionOrdersResp_OrderResult(const OptionOrdersResp_OrderResult& from);

  inline OptionOrdersResp_OrderResult& operator=(const OptionOrdersResp_OrderResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionOrdersResp_OrderResult(OptionOrdersResp_OrderResult&& from) noexcept
    : OptionOrdersResp_OrderResult() {
    *this = ::std::move(from);
  }

  inline OptionOrdersResp_OrderResult& operator=(OptionOrdersResp_OrderResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionOrdersResp_OrderResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionOrdersResp_OrderResult* internal_default_instance() {
    return reinterpret_cast<const OptionOrdersResp_OrderResult*>(
               &_OptionOrdersResp_OrderResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(OptionOrdersResp_OrderResult* other);
  friend void swap(OptionOrdersResp_OrderResult& a, OptionOrdersResp_OrderResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionOrdersResp_OrderResult* New() const final {
    return CreateMaybeMessage<OptionOrdersResp_OrderResult>(NULL);
  }

  OptionOrdersResp_OrderResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OptionOrdersResp_OrderResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OptionOrdersResp_OrderResult& from);
  void MergeFrom(const OptionOrdersResp_OrderResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionOrdersResp_OrderResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ret_msg = 2;
  bool has_ret_msg() const;
  void clear_ret_msg();
  static const int kRetMsgFieldNumber = 2;
  const ::std::string& ret_msg() const;
  void set_ret_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_ret_msg(::std::string&& value);
  #endif
  void set_ret_msg(const char* value);
  void set_ret_msg(const char* value, size_t size);
  ::std::string* mutable_ret_msg();
  ::std::string* release_ret_msg();
  void set_allocated_ret_msg(::std::string* ret_msg);

  // optional string orderno = 3;
  bool has_orderno() const;
  void clear_orderno();
  static const int kOrdernoFieldNumber = 3;
  const ::std::string& orderno() const;
  void set_orderno(const ::std::string& value);
  #if LANG_CXX11
  void set_orderno(::std::string&& value);
  #endif
  void set_orderno(const char* value);
  void set_orderno(const char* value, size_t size);
  ::std::string* mutable_orderno();
  ::std::string* release_orderno();
  void set_allocated_orderno(::std::string* orderno);

  // required int32 ret_code = 1;
  bool has_ret_code() const;
  void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  ::google::protobuf::int32 ret_code() const;
  void set_ret_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.OptionOrdersResp.OrderResult)
 private:
  void set_has_ret_code();
  void clear_has_ret_code();
  void set_has_ret_msg();
  void clear_has_ret_msg();
  void set_has_orderno();
  void clear_has_orderno();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ret_msg_;
  ::google::protobuf::internal::ArenaStringPtr orderno_;
  ::google::protobuf::int32 ret_code_;
  friend struct ::protobuf_protos_2fqoption_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OptionOrdersResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.OptionOrdersResp) */ {
 public:
  OptionOrdersResp();
  virtual ~OptionOrdersResp();

  OptionOrdersResp(const OptionOrdersResp& from);

  inline OptionOrdersResp& operator=(const OptionOrdersResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionOrdersResp(OptionOrdersResp&& from) noexcept
    : OptionOrdersResp() {
    *this = ::std::move(from);
  }

  inline OptionOrdersResp& operator=(OptionOrdersResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionOrdersResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionOrdersResp* internal_default_instance() {
    return reinterpret_cast<const OptionOrdersResp*>(
               &_OptionOrdersResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(OptionOrdersResp* other);
  friend void swap(OptionOrdersResp& a, OptionOrdersResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionOrdersResp* New() const final {
    return CreateMaybeMessage<OptionOrdersResp>(NULL);
  }

  OptionOrdersResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OptionOrdersResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OptionOrdersResp& from);
  void MergeFrom(const OptionOrdersResp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionOrdersResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OptionOrdersResp_OrderResult OrderResult;

  // accessors -------------------------------------------------------

  // repeated .autotrade.OptionOrdersResp.OrderResult results = 3;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 3;
  ::autotrade::OptionOrdersResp_OrderResult* mutable_results(int index);
  ::google::protobuf::RepeatedPtrField< ::autotrade::OptionOrdersResp_OrderResult >*
      mutable_results();
  const ::autotrade::OptionOrdersResp_OrderResult& results(int index) const;
  ::autotrade::OptionOrdersResp_OrderResult* add_results();
  const ::google::protobuf::RepeatedPtrField< ::autotrade::OptionOrdersResp_OrderResult >&
      results() const;

  // required string order_group = 2;
  bool has_order_group() const;
  void clear_order_group();
  static const int kOrderGroupFieldNumber = 2;
  const ::std::string& order_group() const;
  void set_order_group(const ::std::string& value);
  #if LANG_CXX11
  void set_order_group(::std::string&& value);
  #endif
  void set_order_group(const char* value);
  void set_order_group(const char* value, size_t size);
  ::std::string* mutable_order_group();
  ::std::string* release_order_group();
  void set_allocated_order_group(::std::string* order_group);

  // optional string request_id = 4;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 4;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // required string order_id = 5;
  bool has_order_id() const;
  void clear_order_id();
  static const int kOrderIdFieldNumber = 5;
  const ::std::string& order_id() const;
  void set_order_id(const ::std::string& value);
  #if LANG_CXX11
  void set_order_id(::std::string&& value);
  #endif
  void set_order_id(const char* value);
  void set_order_id(const char* value, size_t size);
  ::std::string* mutable_order_id();
  ::std::string* release_order_id();
  void set_allocated_order_id(::std::string* order_id);

  // optional int32 funcid = 1 [default = 13101002];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.OptionOrdersResp)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_order_group();
  void clear_has_order_group();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_order_id();
  void clear_has_order_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::autotrade::OptionOrdersResp_OrderResult > results_;
  ::google::protobuf::internal::ArenaStringPtr order_group_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr order_id_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqoption_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OptionDeleteReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.OptionDeleteReqt) */ {
 public:
  OptionDeleteReqt();
  virtual ~OptionDeleteReqt();

  OptionDeleteReqt(const OptionDeleteReqt& from);

  inline OptionDeleteReqt& operator=(const OptionDeleteReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionDeleteReqt(OptionDeleteReqt&& from) noexcept
    : OptionDeleteReqt() {
    *this = ::std::move(from);
  }

  inline OptionDeleteReqt& operator=(OptionDeleteReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionDeleteReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionDeleteReqt* internal_default_instance() {
    return reinterpret_cast<const OptionDeleteReqt*>(
               &_OptionDeleteReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(OptionDeleteReqt* other);
  friend void swap(OptionDeleteReqt& a, OptionDeleteReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionDeleteReqt* New() const final {
    return CreateMaybeMessage<OptionDeleteReqt>(NULL);
  }

  OptionDeleteReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OptionDeleteReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OptionDeleteReqt& from);
  void MergeFrom(const OptionDeleteReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionDeleteReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string order_group = 2;
  bool has_order_group() const;
  void clear_order_group();
  static const int kOrderGroupFieldNumber = 2;
  const ::std::string& order_group() const;
  void set_order_group(const ::std::string& value);
  #if LANG_CXX11
  void set_order_group(::std::string&& value);
  #endif
  void set_order_group(const char* value);
  void set_order_group(const char* value, size_t size);
  ::std::string* mutable_order_group();
  ::std::string* release_order_group();
  void set_allocated_order_group(::std::string* order_group);

  // optional string request_id = 4;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 4;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // required uint32 market = 3;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 3;
  ::google::protobuf::uint32 market() const;
  void set_market(::google::protobuf::uint32 value);

  // optional int32 funcid = 1 [default = 13001004];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.OptionDeleteReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_order_group();
  void clear_has_order_group();
  void set_has_market();
  void clear_has_market();
  void set_has_request_id();
  void clear_has_request_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr order_group_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::uint32 market_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqoption_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OptionDeleteResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.OptionDeleteResp) */ {
 public:
  OptionDeleteResp();
  virtual ~OptionDeleteResp();

  OptionDeleteResp(const OptionDeleteResp& from);

  inline OptionDeleteResp& operator=(const OptionDeleteResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionDeleteResp(OptionDeleteResp&& from) noexcept
    : OptionDeleteResp() {
    *this = ::std::move(from);
  }

  inline OptionDeleteResp& operator=(OptionDeleteResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionDeleteResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionDeleteResp* internal_default_instance() {
    return reinterpret_cast<const OptionDeleteResp*>(
               &_OptionDeleteResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(OptionDeleteResp* other);
  friend void swap(OptionDeleteResp& a, OptionDeleteResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionDeleteResp* New() const final {
    return CreateMaybeMessage<OptionDeleteResp>(NULL);
  }

  OptionDeleteResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OptionDeleteResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OptionDeleteResp& from);
  void MergeFrom(const OptionDeleteResp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionDeleteResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string order_group = 2;
  bool has_order_group() const;
  void clear_order_group();
  static const int kOrderGroupFieldNumber = 2;
  const ::std::string& order_group() const;
  void set_order_group(const ::std::string& value);
  #if LANG_CXX11
  void set_order_group(::std::string&& value);
  #endif
  void set_order_group(const char* value);
  void set_order_group(const char* value, size_t size);
  ::std::string* mutable_order_group();
  ::std::string* release_order_group();
  void set_allocated_order_group(::std::string* order_group);

  // optional string request_id = 3;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional int32 funcid = 1 [default = 13101004];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.OptionDeleteResp)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_order_group();
  void clear_has_order_group();
  void set_has_request_id();
  void clear_has_request_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr order_group_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqoption_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OptionDeletesReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.OptionDeletesReqt) */ {
 public:
  OptionDeletesReqt();
  virtual ~OptionDeletesReqt();

  OptionDeletesReqt(const OptionDeletesReqt& from);

  inline OptionDeletesReqt& operator=(const OptionDeletesReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionDeletesReqt(OptionDeletesReqt&& from) noexcept
    : OptionDeletesReqt() {
    *this = ::std::move(from);
  }

  inline OptionDeletesReqt& operator=(OptionDeletesReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionDeletesReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionDeletesReqt* internal_default_instance() {
    return reinterpret_cast<const OptionDeletesReqt*>(
               &_OptionDeletesReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(OptionDeletesReqt* other);
  friend void swap(OptionDeletesReqt& a, OptionDeletesReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionDeletesReqt* New() const final {
    return CreateMaybeMessage<OptionDeletesReqt>(NULL);
  }

  OptionDeletesReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OptionDeletesReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OptionDeletesReqt& from);
  void MergeFrom(const OptionDeletesReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionDeletesReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string order_nos = 5;
  int order_nos_size() const;
  void clear_order_nos();
  static const int kOrderNosFieldNumber = 5;
  const ::std::string& order_nos(int index) const;
  ::std::string* mutable_order_nos(int index);
  void set_order_nos(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_order_nos(int index, ::std::string&& value);
  #endif
  void set_order_nos(int index, const char* value);
  void set_order_nos(int index, const char* value, size_t size);
  ::std::string* add_order_nos();
  void add_order_nos(const ::std::string& value);
  #if LANG_CXX11
  void add_order_nos(::std::string&& value);
  #endif
  void add_order_nos(const char* value);
  void add_order_nos(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& order_nos() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_order_nos();

  // required string order_group = 2;
  bool has_order_group() const;
  void clear_order_group();
  static const int kOrderGroupFieldNumber = 2;
  const ::std::string& order_group() const;
  void set_order_group(const ::std::string& value);
  #if LANG_CXX11
  void set_order_group(::std::string&& value);
  #endif
  void set_order_group(const char* value);
  void set_order_group(const char* value, size_t size);
  ::std::string* mutable_order_group();
  ::std::string* release_order_group();
  void set_allocated_order_group(::std::string* order_group);

  // optional string request_id = 4;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 4;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // required uint32 market = 3;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 3;
  ::google::protobuf::uint32 market() const;
  void set_market(::google::protobuf::uint32 value);

  // optional int32 funcid = 1 [default = 13001005];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.OptionDeletesReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_order_group();
  void clear_has_order_group();
  void set_has_market();
  void clear_has_market();
  void set_has_request_id();
  void clear_has_request_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> order_nos_;
  ::google::protobuf::internal::ArenaStringPtr order_group_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::uint32 market_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqoption_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OptionDeletesResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.OptionDeletesResp) */ {
 public:
  OptionDeletesResp();
  virtual ~OptionDeletesResp();

  OptionDeletesResp(const OptionDeletesResp& from);

  inline OptionDeletesResp& operator=(const OptionDeletesResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionDeletesResp(OptionDeletesResp&& from) noexcept
    : OptionDeletesResp() {
    *this = ::std::move(from);
  }

  inline OptionDeletesResp& operator=(OptionDeletesResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionDeletesResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionDeletesResp* internal_default_instance() {
    return reinterpret_cast<const OptionDeletesResp*>(
               &_OptionDeletesResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(OptionDeletesResp* other);
  friend void swap(OptionDeletesResp& a, OptionDeletesResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionDeletesResp* New() const final {
    return CreateMaybeMessage<OptionDeletesResp>(NULL);
  }

  OptionDeletesResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OptionDeletesResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OptionDeletesResp& from);
  void MergeFrom(const OptionDeletesResp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionDeletesResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string order_group = 2;
  bool has_order_group() const;
  void clear_order_group();
  static const int kOrderGroupFieldNumber = 2;
  const ::std::string& order_group() const;
  void set_order_group(const ::std::string& value);
  #if LANG_CXX11
  void set_order_group(::std::string&& value);
  #endif
  void set_order_group(const char* value);
  void set_order_group(const char* value, size_t size);
  ::std::string* mutable_order_group();
  ::std::string* release_order_group();
  void set_allocated_order_group(::std::string* order_group);

  // optional string request_id = 3;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional int32 funcid = 1 [default = 13101005];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.OptionDeletesResp)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_order_group();
  void clear_has_order_group();
  void set_has_request_id();
  void clear_has_request_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr order_group_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqoption_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OptionQueryOrderReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.OptionQueryOrderReqt) */ {
 public:
  OptionQueryOrderReqt();
  virtual ~OptionQueryOrderReqt();

  OptionQueryOrderReqt(const OptionQueryOrderReqt& from);

  inline OptionQueryOrderReqt& operator=(const OptionQueryOrderReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionQueryOrderReqt(OptionQueryOrderReqt&& from) noexcept
    : OptionQueryOrderReqt() {
    *this = ::std::move(from);
  }

  inline OptionQueryOrderReqt& operator=(OptionQueryOrderReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionQueryOrderReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionQueryOrderReqt* internal_default_instance() {
    return reinterpret_cast<const OptionQueryOrderReqt*>(
               &_OptionQueryOrderReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(OptionQueryOrderReqt* other);
  friend void swap(OptionQueryOrderReqt& a, OptionQueryOrderReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionQueryOrderReqt* New() const final {
    return CreateMaybeMessage<OptionQueryOrderReqt>(NULL);
  }

  OptionQueryOrderReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OptionQueryOrderReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OptionQueryOrderReqt& from);
  void MergeFrom(const OptionQueryOrderReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionQueryOrderReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OptionQueryOrderReqt_QueryType QueryType;
  static const QueryType Type_ONCE =
    OptionQueryOrderReqt_QueryType_Type_ONCE;
  static const QueryType Type_MORE =
    OptionQueryOrderReqt_QueryType_Type_MORE;
  static const QueryType Type_ALL =
    OptionQueryOrderReqt_QueryType_Type_ALL;
  static inline bool QueryType_IsValid(int value) {
    return OptionQueryOrderReqt_QueryType_IsValid(value);
  }
  static const QueryType QueryType_MIN =
    OptionQueryOrderReqt_QueryType_QueryType_MIN;
  static const QueryType QueryType_MAX =
    OptionQueryOrderReqt_QueryType_QueryType_MAX;
  static const int QueryType_ARRAYSIZE =
    OptionQueryOrderReqt_QueryType_QueryType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  QueryType_descriptor() {
    return OptionQueryOrderReqt_QueryType_descriptor();
  }
  static inline const ::std::string& QueryType_Name(QueryType value) {
    return OptionQueryOrderReqt_QueryType_Name(value);
  }
  static inline bool QueryType_Parse(const ::std::string& name,
      QueryType* value) {
    return OptionQueryOrderReqt_QueryType_Parse(name, value);
  }

  typedef OptionQueryOrderReqt_QueryFlag QueryFlag;
  static const QueryFlag Type_Query_ALL =
    OptionQueryOrderReqt_QueryFlag_Type_Query_ALL;
  static const QueryFlag Type_NO_DELETE =
    OptionQueryOrderReqt_QueryFlag_Type_NO_DELETE;
  static const QueryFlag Type_DELETE =
    OptionQueryOrderReqt_QueryFlag_Type_DELETE;
  static inline bool QueryFlag_IsValid(int value) {
    return OptionQueryOrderReqt_QueryFlag_IsValid(value);
  }
  static const QueryFlag QueryFlag_MIN =
    OptionQueryOrderReqt_QueryFlag_QueryFlag_MIN;
  static const QueryFlag QueryFlag_MAX =
    OptionQueryOrderReqt_QueryFlag_QueryFlag_MAX;
  static const int QueryFlag_ARRAYSIZE =
    OptionQueryOrderReqt_QueryFlag_QueryFlag_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  QueryFlag_descriptor() {
    return OptionQueryOrderReqt_QueryFlag_descriptor();
  }
  static inline const ::std::string& QueryFlag_Name(QueryFlag value) {
    return OptionQueryOrderReqt_QueryFlag_Name(value);
  }
  static inline bool QueryFlag_Parse(const ::std::string& name,
      QueryFlag* value) {
    return OptionQueryOrderReqt_QueryFlag_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string order_group = 2 [default = ""];
  bool has_order_group() const;
  void clear_order_group();
  static const int kOrderGroupFieldNumber = 2;
  const ::std::string& order_group() const;
  void set_order_group(const ::std::string& value);
  #if LANG_CXX11
  void set_order_group(::std::string&& value);
  #endif
  void set_order_group(const char* value);
  void set_order_group(const char* value, size_t size);
  ::std::string* mutable_order_group();
  ::std::string* release_order_group();
  void set_allocated_order_group(::std::string* order_group);

  // optional string start_pos = 5 [default = ""];
  bool has_start_pos() const;
  void clear_start_pos();
  static const int kStartPosFieldNumber = 5;
  const ::std::string& start_pos() const;
  void set_start_pos(const ::std::string& value);
  #if LANG_CXX11
  void set_start_pos(::std::string&& value);
  #endif
  void set_start_pos(const char* value);
  void set_start_pos(const char* value, size_t size);
  ::std::string* mutable_start_pos();
  ::std::string* release_start_pos();
  void set_allocated_start_pos(::std::string* start_pos);

  // optional string request_id = 6;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 6;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional .autotrade.OptionQueryOrderReqt.QueryType query_type = 3 [default = Type_ONCE];
  bool has_query_type() const;
  void clear_query_type();
  static const int kQueryTypeFieldNumber = 3;
  ::autotrade::OptionQueryOrderReqt_QueryType query_type() const;
  void set_query_type(::autotrade::OptionQueryOrderReqt_QueryType value);

  // optional int64 request_time = 10 [default = 0];
  bool has_request_time() const;
  void clear_request_time();
  static const int kRequestTimeFieldNumber = 10;
  ::google::protobuf::int64 request_time() const;
  void set_request_time(::google::protobuf::int64 value);

  // optional int32 funcid = 1 [default = 13002002];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // optional .autotrade.OptionQueryOrderReqt.QueryFlag query_flag = 4 [default = Type_NO_DELETE];
  bool has_query_flag() const;
  void clear_query_flag();
  static const int kQueryFlagFieldNumber = 4;
  ::autotrade::OptionQueryOrderReqt_QueryFlag query_flag() const;
  void set_query_flag(::autotrade::OptionQueryOrderReqt_QueryFlag value);

  // optional int64 active_interval = 11 [default = 1000];
  bool has_active_interval() const;
  void clear_active_interval();
  static const int kActiveIntervalFieldNumber = 11;
  ::google::protobuf::int64 active_interval() const;
  void set_active_interval(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:autotrade.OptionQueryOrderReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_order_group();
  void clear_has_order_group();
  void set_has_query_type();
  void clear_has_query_type();
  void set_has_query_flag();
  void clear_has_query_flag();
  void set_has_start_pos();
  void clear_has_start_pos();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_request_time();
  void clear_has_request_time();
  void set_has_active_interval();
  void clear_has_active_interval();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr order_group_;
  ::google::protobuf::internal::ArenaStringPtr start_pos_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  int query_type_;
  ::google::protobuf::int64 request_time_;
  ::google::protobuf::int32 funcid_;
  int query_flag_;
  ::google::protobuf::int64 active_interval_;
  friend struct ::protobuf_protos_2fqoption_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OptionQueryOrderResp_OrderDetail : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.OptionQueryOrderResp.OrderDetail) */ {
 public:
  OptionQueryOrderResp_OrderDetail();
  virtual ~OptionQueryOrderResp_OrderDetail();

  OptionQueryOrderResp_OrderDetail(const OptionQueryOrderResp_OrderDetail& from);

  inline OptionQueryOrderResp_OrderDetail& operator=(const OptionQueryOrderResp_OrderDetail& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionQueryOrderResp_OrderDetail(OptionQueryOrderResp_OrderDetail&& from) noexcept
    : OptionQueryOrderResp_OrderDetail() {
    *this = ::std::move(from);
  }

  inline OptionQueryOrderResp_OrderDetail& operator=(OptionQueryOrderResp_OrderDetail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionQueryOrderResp_OrderDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionQueryOrderResp_OrderDetail* internal_default_instance() {
    return reinterpret_cast<const OptionQueryOrderResp_OrderDetail*>(
               &_OptionQueryOrderResp_OrderDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(OptionQueryOrderResp_OrderDetail* other);
  friend void swap(OptionQueryOrderResp_OrderDetail& a, OptionQueryOrderResp_OrderDetail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionQueryOrderResp_OrderDetail* New() const final {
    return CreateMaybeMessage<OptionQueryOrderResp_OrderDetail>(NULL);
  }

  OptionQueryOrderResp_OrderDetail* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OptionQueryOrderResp_OrderDetail>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OptionQueryOrderResp_OrderDetail& from);
  void MergeFrom(const OptionQueryOrderResp_OrderDetail& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionQueryOrderResp_OrderDetail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string policy_id = 7;
  bool has_policy_id() const;
  void clear_policy_id();
  static const int kPolicyIdFieldNumber = 7;
  const ::std::string& policy_id() const;
  void set_policy_id(const ::std::string& value);
  #if LANG_CXX11
  void set_policy_id(::std::string&& value);
  #endif
  void set_policy_id(const char* value);
  void set_policy_id(const char* value, size_t size);
  ::std::string* mutable_policy_id();
  ::std::string* release_policy_id();
  void set_allocated_policy_id(::std::string* policy_id);

  // optional string index_id = 8;
  bool has_index_id() const;
  void clear_index_id();
  static const int kIndexIdFieldNumber = 8;
  const ::std::string& index_id() const;
  void set_index_id(const ::std::string& value);
  #if LANG_CXX11
  void set_index_id(::std::string&& value);
  #endif
  void set_index_id(const char* value);
  void set_index_id(const char* value, size_t size);
  ::std::string* mutable_index_id();
  ::std::string* release_index_id();
  void set_allocated_index_id(::std::string* index_id);

  // optional string match_condition = 12 [default = "GFD"];
  bool has_match_condition() const;
  void clear_match_condition();
  static const int kMatchConditionFieldNumber = 12;
  const ::std::string& match_condition() const;
  void set_match_condition(const ::std::string& value);
  #if LANG_CXX11
  void set_match_condition(::std::string&& value);
  #endif
  void set_match_condition(const char* value);
  void set_match_condition(const char* value, size_t size);
  ::std::string* mutable_match_condition();
  ::std::string* release_match_condition();
  void set_allocated_match_condition(::std::string* match_condition);

  // optional string trader_id = 13;
  bool has_trader_id() const;
  void clear_trader_id();
  static const int kTraderIdFieldNumber = 13;
  const ::std::string& trader_id() const;
  void set_trader_id(const ::std::string& value);
  #if LANG_CXX11
  void set_trader_id(::std::string&& value);
  #endif
  void set_trader_id(const char* value);
  void set_trader_id(const char* value, size_t size);
  ::std::string* mutable_trader_id();
  ::std::string* release_trader_id();
  void set_allocated_trader_id(::std::string* trader_id);

  // optional string orderno = 14;
  bool has_orderno() const;
  void clear_orderno();
  static const int kOrdernoFieldNumber = 14;
  const ::std::string& orderno() const;
  void set_orderno(const ::std::string& value);
  #if LANG_CXX11
  void set_orderno(::std::string&& value);
  #endif
  void set_orderno(const char* value);
  void set_orderno(const char* value, size_t size);
  ::std::string* mutable_orderno();
  ::std::string* release_orderno();
  void set_allocated_orderno(::std::string* orderno);

  // optional string info = 21;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 21;
  const ::std::string& info() const;
  void set_info(const ::std::string& value);
  #if LANG_CXX11
  void set_info(::std::string&& value);
  #endif
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  ::std::string* mutable_info();
  ::std::string* release_info();
  void set_allocated_info(::std::string* info);

  // optional string order_id = 22;
  bool has_order_id() const;
  void clear_order_id();
  static const int kOrderIdFieldNumber = 22;
  const ::std::string& order_id() const;
  void set_order_id(const ::std::string& value);
  #if LANG_CXX11
  void set_order_id(::std::string&& value);
  #endif
  void set_order_id(const char* value);
  void set_order_id(const char* value, size_t size);
  ::std::string* mutable_order_id();
  ::std::string* release_order_id();
  void set_allocated_order_id(::std::string* order_id);

  // optional double price = 3;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 3;
  double price() const;
  void set_price(double value);

  // optional int64 qty = 4;
  bool has_qty() const;
  void clear_qty();
  static const int kQtyFieldNumber = 4;
  ::google::protobuf::int64 qty() const;
  void set_qty(::google::protobuf::int64 value);

  // optional int64 bsflag = 5;
  bool has_bsflag() const;
  void clear_bsflag();
  static const int kBsflagFieldNumber = 5;
  ::google::protobuf::int64 bsflag() const;
  void set_bsflag(::google::protobuf::int64 value);

  // optional int64 market = 6;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 6;
  ::google::protobuf::int64 market() const;
  void set_market(::google::protobuf::int64 value);

  // optional int32 kpcbj = 9;
  bool has_kpcbj() const;
  void clear_kpcbj();
  static const int kKpcbjFieldNumber = 9;
  ::google::protobuf::int32 kpcbj() const;
  void set_kpcbj(::google::protobuf::int32 value);

  // optional int32 order_price_type = 10 [default = 0];
  bool has_order_price_type() const;
  void clear_order_price_type();
  static const int kOrderPriceTypeFieldNumber = 10;
  ::google::protobuf::int32 order_price_type() const;
  void set_order_price_type(::google::protobuf::int32 value);

  // optional int32 covered_flag = 11 [default = 0];
  bool has_covered_flag() const;
  void clear_covered_flag();
  static const int kCoveredFlagFieldNumber = 11;
  ::google::protobuf::int32 covered_flag() const;
  void set_covered_flag(::google::protobuf::int32 value);

  // optional uint32 order_time = 15;
  bool has_order_time() const;
  void clear_order_time();
  static const int kOrderTimeFieldNumber = 15;
  ::google::protobuf::uint32 order_time() const;
  void set_order_time(::google::protobuf::uint32 value);

  // optional int64 match_qty = 16;
  bool has_match_qty() const;
  void clear_match_qty();
  static const int kMatchQtyFieldNumber = 16;
  ::google::protobuf::int64 match_qty() const;
  void set_match_qty(::google::protobuf::int64 value);

  // optional double match_amt = 17;
  bool has_match_amt() const;
  void clear_match_amt();
  static const int kMatchAmtFieldNumber = 17;
  double match_amt() const;
  void set_match_amt(double value);

  // optional double match_price = 18;
  bool has_match_price() const;
  void clear_match_price();
  static const int kMatchPriceFieldNumber = 18;
  double match_price() const;
  void set_match_price(double value);

  // optional int64 cancel_qty = 19;
  bool has_cancel_qty() const;
  void clear_cancel_qty();
  static const int kCancelQtyFieldNumber = 19;
  ::google::protobuf::int64 cancel_qty() const;
  void set_cancel_qty(::google::protobuf::int64 value);

  // optional int32 state = 20;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 20;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.OptionQueryOrderResp.OrderDetail)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_name();
  void clear_has_name();
  void set_has_price();
  void clear_has_price();
  void set_has_qty();
  void clear_has_qty();
  void set_has_bsflag();
  void clear_has_bsflag();
  void set_has_market();
  void clear_has_market();
  void set_has_policy_id();
  void clear_has_policy_id();
  void set_has_index_id();
  void clear_has_index_id();
  void set_has_kpcbj();
  void clear_has_kpcbj();
  void set_has_order_price_type();
  void clear_has_order_price_type();
  void set_has_covered_flag();
  void clear_has_covered_flag();
  void set_has_match_condition();
  void clear_has_match_condition();
  void set_has_trader_id();
  void clear_has_trader_id();
  void set_has_orderno();
  void clear_has_orderno();
  void set_has_order_time();
  void clear_has_order_time();
  void set_has_match_qty();
  void clear_has_match_qty();
  void set_has_match_amt();
  void clear_has_match_amt();
  void set_has_match_price();
  void clear_has_match_price();
  void set_has_cancel_qty();
  void clear_has_cancel_qty();
  void set_has_state();
  void clear_has_state();
  void set_has_info();
  void clear_has_info();
  void set_has_order_id();
  void clear_has_order_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr policy_id_;
  ::google::protobuf::internal::ArenaStringPtr index_id_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_match_condition_;
  private:
  ::google::protobuf::internal::ArenaStringPtr match_condition_;
  ::google::protobuf::internal::ArenaStringPtr trader_id_;
  ::google::protobuf::internal::ArenaStringPtr orderno_;
  ::google::protobuf::internal::ArenaStringPtr info_;
  ::google::protobuf::internal::ArenaStringPtr order_id_;
  double price_;
  ::google::protobuf::int64 qty_;
  ::google::protobuf::int64 bsflag_;
  ::google::protobuf::int64 market_;
  ::google::protobuf::int32 kpcbj_;
  ::google::protobuf::int32 order_price_type_;
  ::google::protobuf::int32 covered_flag_;
  ::google::protobuf::uint32 order_time_;
  ::google::protobuf::int64 match_qty_;
  double match_amt_;
  double match_price_;
  ::google::protobuf::int64 cancel_qty_;
  ::google::protobuf::int32 state_;
  friend struct ::protobuf_protos_2fqoption_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OptionQueryOrderResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.OptionQueryOrderResp) */ {
 public:
  OptionQueryOrderResp();
  virtual ~OptionQueryOrderResp();

  OptionQueryOrderResp(const OptionQueryOrderResp& from);

  inline OptionQueryOrderResp& operator=(const OptionQueryOrderResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionQueryOrderResp(OptionQueryOrderResp&& from) noexcept
    : OptionQueryOrderResp() {
    *this = ::std::move(from);
  }

  inline OptionQueryOrderResp& operator=(OptionQueryOrderResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionQueryOrderResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionQueryOrderResp* internal_default_instance() {
    return reinterpret_cast<const OptionQueryOrderResp*>(
               &_OptionQueryOrderResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(OptionQueryOrderResp* other);
  friend void swap(OptionQueryOrderResp& a, OptionQueryOrderResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionQueryOrderResp* New() const final {
    return CreateMaybeMessage<OptionQueryOrderResp>(NULL);
  }

  OptionQueryOrderResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OptionQueryOrderResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OptionQueryOrderResp& from);
  void MergeFrom(const OptionQueryOrderResp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionQueryOrderResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OptionQueryOrderResp_OrderDetail OrderDetail;

  // accessors -------------------------------------------------------

  // repeated .autotrade.OptionQueryOrderResp.OrderDetail detail_list = 2;
  int detail_list_size() const;
  void clear_detail_list();
  static const int kDetailListFieldNumber = 2;
  ::autotrade::OptionQueryOrderResp_OrderDetail* mutable_detail_list(int index);
  ::google::protobuf::RepeatedPtrField< ::autotrade::OptionQueryOrderResp_OrderDetail >*
      mutable_detail_list();
  const ::autotrade::OptionQueryOrderResp_OrderDetail& detail_list(int index) const;
  ::autotrade::OptionQueryOrderResp_OrderDetail* add_detail_list();
  const ::google::protobuf::RepeatedPtrField< ::autotrade::OptionQueryOrderResp_OrderDetail >&
      detail_list() const;

  // optional string last_pos = 3;
  bool has_last_pos() const;
  void clear_last_pos();
  static const int kLastPosFieldNumber = 3;
  const ::std::string& last_pos() const;
  void set_last_pos(const ::std::string& value);
  #if LANG_CXX11
  void set_last_pos(::std::string&& value);
  #endif
  void set_last_pos(const char* value);
  void set_last_pos(const char* value, size_t size);
  ::std::string* mutable_last_pos();
  ::std::string* release_last_pos();
  void set_allocated_last_pos(::std::string* last_pos);

  // optional string request_id = 4;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 4;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional int32 funcid = 1 [default = 13102002];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.OptionQueryOrderResp)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_last_pos();
  void clear_has_last_pos();
  void set_has_request_id();
  void clear_has_request_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::autotrade::OptionQueryOrderResp_OrderDetail > detail_list_;
  ::google::protobuf::internal::ArenaStringPtr last_pos_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqoption_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OptionQueryOrdersReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.OptionQueryOrdersReqt) */ {
 public:
  OptionQueryOrdersReqt();
  virtual ~OptionQueryOrdersReqt();

  OptionQueryOrdersReqt(const OptionQueryOrdersReqt& from);

  inline OptionQueryOrdersReqt& operator=(const OptionQueryOrdersReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionQueryOrdersReqt(OptionQueryOrdersReqt&& from) noexcept
    : OptionQueryOrdersReqt() {
    *this = ::std::move(from);
  }

  inline OptionQueryOrdersReqt& operator=(OptionQueryOrdersReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionQueryOrdersReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionQueryOrdersReqt* internal_default_instance() {
    return reinterpret_cast<const OptionQueryOrdersReqt*>(
               &_OptionQueryOrdersReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(OptionQueryOrdersReqt* other);
  friend void swap(OptionQueryOrdersReqt& a, OptionQueryOrdersReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionQueryOrdersReqt* New() const final {
    return CreateMaybeMessage<OptionQueryOrdersReqt>(NULL);
  }

  OptionQueryOrdersReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OptionQueryOrdersReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OptionQueryOrdersReqt& from);
  void MergeFrom(const OptionQueryOrdersReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionQueryOrdersReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string order_group = 2 [default = ""];
  bool has_order_group() const;
  void clear_order_group();
  static const int kOrderGroupFieldNumber = 2;
  const ::std::string& order_group() const;
  void set_order_group(const ::std::string& value);
  #if LANG_CXX11
  void set_order_group(::std::string&& value);
  #endif
  void set_order_group(const char* value);
  void set_order_group(const char* value, size_t size);
  ::std::string* mutable_order_group();
  ::std::string* release_order_group();
  void set_allocated_order_group(::std::string* order_group);

  // optional string request_id = 3;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional int64 request_time = 4 [default = 0];
  bool has_request_time() const;
  void clear_request_time();
  static const int kRequestTimeFieldNumber = 4;
  ::google::protobuf::int64 request_time() const;
  void set_request_time(::google::protobuf::int64 value);

  // optional int32 funcid = 1 [default = 13002003];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // optional int64 active_interval = 5 [default = 1000];
  bool has_active_interval() const;
  void clear_active_interval();
  static const int kActiveIntervalFieldNumber = 5;
  ::google::protobuf::int64 active_interval() const;
  void set_active_interval(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:autotrade.OptionQueryOrdersReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_order_group();
  void clear_has_order_group();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_request_time();
  void clear_has_request_time();
  void set_has_active_interval();
  void clear_has_active_interval();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr order_group_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::int64 request_time_;
  ::google::protobuf::int32 funcid_;
  ::google::protobuf::int64 active_interval_;
  friend struct ::protobuf_protos_2fqoption_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OptionQueryOrdersResp_OrderDetail : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.OptionQueryOrdersResp.OrderDetail) */ {
 public:
  OptionQueryOrdersResp_OrderDetail();
  virtual ~OptionQueryOrdersResp_OrderDetail();

  OptionQueryOrdersResp_OrderDetail(const OptionQueryOrdersResp_OrderDetail& from);

  inline OptionQueryOrdersResp_OrderDetail& operator=(const OptionQueryOrdersResp_OrderDetail& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionQueryOrdersResp_OrderDetail(OptionQueryOrdersResp_OrderDetail&& from) noexcept
    : OptionQueryOrdersResp_OrderDetail() {
    *this = ::std::move(from);
  }

  inline OptionQueryOrdersResp_OrderDetail& operator=(OptionQueryOrdersResp_OrderDetail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionQueryOrdersResp_OrderDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionQueryOrdersResp_OrderDetail* internal_default_instance() {
    return reinterpret_cast<const OptionQueryOrdersResp_OrderDetail*>(
               &_OptionQueryOrdersResp_OrderDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(OptionQueryOrdersResp_OrderDetail* other);
  friend void swap(OptionQueryOrdersResp_OrderDetail& a, OptionQueryOrdersResp_OrderDetail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionQueryOrdersResp_OrderDetail* New() const final {
    return CreateMaybeMessage<OptionQueryOrdersResp_OrderDetail>(NULL);
  }

  OptionQueryOrdersResp_OrderDetail* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OptionQueryOrdersResp_OrderDetail>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OptionQueryOrdersResp_OrderDetail& from);
  void MergeFrom(const OptionQueryOrdersResp_OrderDetail& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionQueryOrdersResp_OrderDetail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string policy_id = 7;
  bool has_policy_id() const;
  void clear_policy_id();
  static const int kPolicyIdFieldNumber = 7;
  const ::std::string& policy_id() const;
  void set_policy_id(const ::std::string& value);
  #if LANG_CXX11
  void set_policy_id(::std::string&& value);
  #endif
  void set_policy_id(const char* value);
  void set_policy_id(const char* value, size_t size);
  ::std::string* mutable_policy_id();
  ::std::string* release_policy_id();
  void set_allocated_policy_id(::std::string* policy_id);

  // optional string index_id = 8;
  bool has_index_id() const;
  void clear_index_id();
  static const int kIndexIdFieldNumber = 8;
  const ::std::string& index_id() const;
  void set_index_id(const ::std::string& value);
  #if LANG_CXX11
  void set_index_id(::std::string&& value);
  #endif
  void set_index_id(const char* value);
  void set_index_id(const char* value, size_t size);
  ::std::string* mutable_index_id();
  ::std::string* release_index_id();
  void set_allocated_index_id(::std::string* index_id);

  // optional string match_condition = 12 [default = "GFD"];
  bool has_match_condition() const;
  void clear_match_condition();
  static const int kMatchConditionFieldNumber = 12;
  const ::std::string& match_condition() const;
  void set_match_condition(const ::std::string& value);
  #if LANG_CXX11
  void set_match_condition(::std::string&& value);
  #endif
  void set_match_condition(const char* value);
  void set_match_condition(const char* value, size_t size);
  ::std::string* mutable_match_condition();
  ::std::string* release_match_condition();
  void set_allocated_match_condition(::std::string* match_condition);

  // optional string trader_id = 13;
  bool has_trader_id() const;
  void clear_trader_id();
  static const int kTraderIdFieldNumber = 13;
  const ::std::string& trader_id() const;
  void set_trader_id(const ::std::string& value);
  #if LANG_CXX11
  void set_trader_id(::std::string&& value);
  #endif
  void set_trader_id(const char* value);
  void set_trader_id(const char* value, size_t size);
  ::std::string* mutable_trader_id();
  ::std::string* release_trader_id();
  void set_allocated_trader_id(::std::string* trader_id);

  // optional string orderno = 14;
  bool has_orderno() const;
  void clear_orderno();
  static const int kOrdernoFieldNumber = 14;
  const ::std::string& orderno() const;
  void set_orderno(const ::std::string& value);
  #if LANG_CXX11
  void set_orderno(::std::string&& value);
  #endif
  void set_orderno(const char* value);
  void set_orderno(const char* value, size_t size);
  ::std::string* mutable_orderno();
  ::std::string* release_orderno();
  void set_allocated_orderno(::std::string* orderno);

  // optional string info = 21;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 21;
  const ::std::string& info() const;
  void set_info(const ::std::string& value);
  #if LANG_CXX11
  void set_info(::std::string&& value);
  #endif
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  ::std::string* mutable_info();
  ::std::string* release_info();
  void set_allocated_info(::std::string* info);

  // optional string order_id = 22;
  bool has_order_id() const;
  void clear_order_id();
  static const int kOrderIdFieldNumber = 22;
  const ::std::string& order_id() const;
  void set_order_id(const ::std::string& value);
  #if LANG_CXX11
  void set_order_id(::std::string&& value);
  #endif
  void set_order_id(const char* value);
  void set_order_id(const char* value, size_t size);
  ::std::string* mutable_order_id();
  ::std::string* release_order_id();
  void set_allocated_order_id(::std::string* order_id);

  // optional double price = 3;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 3;
  double price() const;
  void set_price(double value);

  // optional int64 qty = 4;
  bool has_qty() const;
  void clear_qty();
  static const int kQtyFieldNumber = 4;
  ::google::protobuf::int64 qty() const;
  void set_qty(::google::protobuf::int64 value);

  // optional int64 bsflag = 5;
  bool has_bsflag() const;
  void clear_bsflag();
  static const int kBsflagFieldNumber = 5;
  ::google::protobuf::int64 bsflag() const;
  void set_bsflag(::google::protobuf::int64 value);

  // optional int64 market = 6;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 6;
  ::google::protobuf::int64 market() const;
  void set_market(::google::protobuf::int64 value);

  // optional int32 kpcbj = 9;
  bool has_kpcbj() const;
  void clear_kpcbj();
  static const int kKpcbjFieldNumber = 9;
  ::google::protobuf::int32 kpcbj() const;
  void set_kpcbj(::google::protobuf::int32 value);

  // optional int32 order_price_type = 10 [default = 0];
  bool has_order_price_type() const;
  void clear_order_price_type();
  static const int kOrderPriceTypeFieldNumber = 10;
  ::google::protobuf::int32 order_price_type() const;
  void set_order_price_type(::google::protobuf::int32 value);

  // optional int32 covered_flag = 11 [default = 0];
  bool has_covered_flag() const;
  void clear_covered_flag();
  static const int kCoveredFlagFieldNumber = 11;
  ::google::protobuf::int32 covered_flag() const;
  void set_covered_flag(::google::protobuf::int32 value);

  // optional uint32 order_time = 15;
  bool has_order_time() const;
  void clear_order_time();
  static const int kOrderTimeFieldNumber = 15;
  ::google::protobuf::uint32 order_time() const;
  void set_order_time(::google::protobuf::uint32 value);

  // optional int64 match_qty = 16;
  bool has_match_qty() const;
  void clear_match_qty();
  static const int kMatchQtyFieldNumber = 16;
  ::google::protobuf::int64 match_qty() const;
  void set_match_qty(::google::protobuf::int64 value);

  // optional double match_amt = 17;
  bool has_match_amt() const;
  void clear_match_amt();
  static const int kMatchAmtFieldNumber = 17;
  double match_amt() const;
  void set_match_amt(double value);

  // optional double match_price = 18;
  bool has_match_price() const;
  void clear_match_price();
  static const int kMatchPriceFieldNumber = 18;
  double match_price() const;
  void set_match_price(double value);

  // optional int64 cancel_qty = 19;
  bool has_cancel_qty() const;
  void clear_cancel_qty();
  static const int kCancelQtyFieldNumber = 19;
  ::google::protobuf::int64 cancel_qty() const;
  void set_cancel_qty(::google::protobuf::int64 value);

  // optional int32 state = 20;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 20;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.OptionQueryOrdersResp.OrderDetail)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_name();
  void clear_has_name();
  void set_has_price();
  void clear_has_price();
  void set_has_qty();
  void clear_has_qty();
  void set_has_bsflag();
  void clear_has_bsflag();
  void set_has_market();
  void clear_has_market();
  void set_has_policy_id();
  void clear_has_policy_id();
  void set_has_index_id();
  void clear_has_index_id();
  void set_has_kpcbj();
  void clear_has_kpcbj();
  void set_has_order_price_type();
  void clear_has_order_price_type();
  void set_has_covered_flag();
  void clear_has_covered_flag();
  void set_has_match_condition();
  void clear_has_match_condition();
  void set_has_trader_id();
  void clear_has_trader_id();
  void set_has_orderno();
  void clear_has_orderno();
  void set_has_order_time();
  void clear_has_order_time();
  void set_has_match_qty();
  void clear_has_match_qty();
  void set_has_match_amt();
  void clear_has_match_amt();
  void set_has_match_price();
  void clear_has_match_price();
  void set_has_cancel_qty();
  void clear_has_cancel_qty();
  void set_has_state();
  void clear_has_state();
  void set_has_info();
  void clear_has_info();
  void set_has_order_id();
  void clear_has_order_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr policy_id_;
  ::google::protobuf::internal::ArenaStringPtr index_id_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_match_condition_;
  private:
  ::google::protobuf::internal::ArenaStringPtr match_condition_;
  ::google::protobuf::internal::ArenaStringPtr trader_id_;
  ::google::protobuf::internal::ArenaStringPtr orderno_;
  ::google::protobuf::internal::ArenaStringPtr info_;
  ::google::protobuf::internal::ArenaStringPtr order_id_;
  double price_;
  ::google::protobuf::int64 qty_;
  ::google::protobuf::int64 bsflag_;
  ::google::protobuf::int64 market_;
  ::google::protobuf::int32 kpcbj_;
  ::google::protobuf::int32 order_price_type_;
  ::google::protobuf::int32 covered_flag_;
  ::google::protobuf::uint32 order_time_;
  ::google::protobuf::int64 match_qty_;
  double match_amt_;
  double match_price_;
  ::google::protobuf::int64 cancel_qty_;
  ::google::protobuf::int32 state_;
  friend struct ::protobuf_protos_2fqoption_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OptionQueryOrdersResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.OptionQueryOrdersResp) */ {
 public:
  OptionQueryOrdersResp();
  virtual ~OptionQueryOrdersResp();

  OptionQueryOrdersResp(const OptionQueryOrdersResp& from);

  inline OptionQueryOrdersResp& operator=(const OptionQueryOrdersResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionQueryOrdersResp(OptionQueryOrdersResp&& from) noexcept
    : OptionQueryOrdersResp() {
    *this = ::std::move(from);
  }

  inline OptionQueryOrdersResp& operator=(OptionQueryOrdersResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionQueryOrdersResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionQueryOrdersResp* internal_default_instance() {
    return reinterpret_cast<const OptionQueryOrdersResp*>(
               &_OptionQueryOrdersResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(OptionQueryOrdersResp* other);
  friend void swap(OptionQueryOrdersResp& a, OptionQueryOrdersResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionQueryOrdersResp* New() const final {
    return CreateMaybeMessage<OptionQueryOrdersResp>(NULL);
  }

  OptionQueryOrdersResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OptionQueryOrdersResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OptionQueryOrdersResp& from);
  void MergeFrom(const OptionQueryOrdersResp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionQueryOrdersResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OptionQueryOrdersResp_OrderDetail OrderDetail;

  // accessors -------------------------------------------------------

  // repeated .autotrade.OptionQueryOrdersResp.OrderDetail detail_list = 2;
  int detail_list_size() const;
  void clear_detail_list();
  static const int kDetailListFieldNumber = 2;
  ::autotrade::OptionQueryOrdersResp_OrderDetail* mutable_detail_list(int index);
  ::google::protobuf::RepeatedPtrField< ::autotrade::OptionQueryOrdersResp_OrderDetail >*
      mutable_detail_list();
  const ::autotrade::OptionQueryOrdersResp_OrderDetail& detail_list(int index) const;
  ::autotrade::OptionQueryOrdersResp_OrderDetail* add_detail_list();
  const ::google::protobuf::RepeatedPtrField< ::autotrade::OptionQueryOrdersResp_OrderDetail >&
      detail_list() const;

  // optional string request_id = 3;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional int32 funcid = 1 [default = 13102003];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.OptionQueryOrdersResp)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_request_id();
  void clear_has_request_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::autotrade::OptionQueryOrdersResp_OrderDetail > detail_list_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqoption_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OptionQueryCaptialReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.OptionQueryCaptialReqt) */ {
 public:
  OptionQueryCaptialReqt();
  virtual ~OptionQueryCaptialReqt();

  OptionQueryCaptialReqt(const OptionQueryCaptialReqt& from);

  inline OptionQueryCaptialReqt& operator=(const OptionQueryCaptialReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionQueryCaptialReqt(OptionQueryCaptialReqt&& from) noexcept
    : OptionQueryCaptialReqt() {
    *this = ::std::move(from);
  }

  inline OptionQueryCaptialReqt& operator=(OptionQueryCaptialReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionQueryCaptialReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionQueryCaptialReqt* internal_default_instance() {
    return reinterpret_cast<const OptionQueryCaptialReqt*>(
               &_OptionQueryCaptialReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(OptionQueryCaptialReqt* other);
  friend void swap(OptionQueryCaptialReqt& a, OptionQueryCaptialReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionQueryCaptialReqt* New() const final {
    return CreateMaybeMessage<OptionQueryCaptialReqt>(NULL);
  }

  OptionQueryCaptialReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OptionQueryCaptialReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OptionQueryCaptialReqt& from);
  void MergeFrom(const OptionQueryCaptialReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionQueryCaptialReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string moneytype = 2;
  bool has_moneytype() const;
  void clear_moneytype();
  static const int kMoneytypeFieldNumber = 2;
  const ::std::string& moneytype() const;
  void set_moneytype(const ::std::string& value);
  #if LANG_CXX11
  void set_moneytype(::std::string&& value);
  #endif
  void set_moneytype(const char* value);
  void set_moneytype(const char* value, size_t size);
  ::std::string* mutable_moneytype();
  ::std::string* release_moneytype();
  void set_allocated_moneytype(::std::string* moneytype);

  // optional string request_id = 3;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional int64 request_time = 4 [default = 0];
  bool has_request_time() const;
  void clear_request_time();
  static const int kRequestTimeFieldNumber = 4;
  ::google::protobuf::int64 request_time() const;
  void set_request_time(::google::protobuf::int64 value);

  // optional int32 funcid = 1 [default = 13002010];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // optional int64 active_interval = 5 [default = 1000];
  bool has_active_interval() const;
  void clear_active_interval();
  static const int kActiveIntervalFieldNumber = 5;
  ::google::protobuf::int64 active_interval() const;
  void set_active_interval(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:autotrade.OptionQueryCaptialReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_moneytype();
  void clear_has_moneytype();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_request_time();
  void clear_has_request_time();
  void set_has_active_interval();
  void clear_has_active_interval();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr moneytype_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::int64 request_time_;
  ::google::protobuf::int32 funcid_;
  ::google::protobuf::int64 active_interval_;
  friend struct ::protobuf_protos_2fqoption_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OptionCapital : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.OptionCapital) */ {
 public:
  OptionCapital();
  virtual ~OptionCapital();

  OptionCapital(const OptionCapital& from);

  inline OptionCapital& operator=(const OptionCapital& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionCapital(OptionCapital&& from) noexcept
    : OptionCapital() {
    *this = ::std::move(from);
  }

  inline OptionCapital& operator=(OptionCapital&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionCapital& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionCapital* internal_default_instance() {
    return reinterpret_cast<const OptionCapital*>(
               &_OptionCapital_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(OptionCapital* other);
  friend void swap(OptionCapital& a, OptionCapital& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionCapital* New() const final {
    return CreateMaybeMessage<OptionCapital>(NULL);
  }

  OptionCapital* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OptionCapital>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OptionCapital& from);
  void MergeFrom(const OptionCapital& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionCapital* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string moneytype = 2;
  bool has_moneytype() const;
  void clear_moneytype();
  static const int kMoneytypeFieldNumber = 2;
  const ::std::string& moneytype() const;
  void set_moneytype(const ::std::string& value);
  #if LANG_CXX11
  void set_moneytype(::std::string&& value);
  #endif
  void set_moneytype(const char* value);
  void set_moneytype(const char* value, size_t size);
  ::std::string* mutable_moneytype();
  ::std::string* release_moneytype();
  void set_allocated_moneytype(::std::string* moneytype);

  // optional string request_id = 6;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 6;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // required double fund_bal = 3;
  bool has_fund_bal() const;
  void clear_fund_bal();
  static const int kFundBalFieldNumber = 3;
  double fund_bal() const;
  void set_fund_bal(double value);

  // required double fund_ava = 4;
  bool has_fund_ava() const;
  void clear_fund_ava();
  static const int kFundAvaFieldNumber = 4;
  double fund_ava() const;
  void set_fund_ava(double value);

  // required double market_value = 5;
  bool has_market_value() const;
  void clear_market_value();
  static const int kMarketValueFieldNumber = 5;
  double market_value() const;
  void set_market_value(double value);

  // optional double deposit = 7;
  bool has_deposit() const;
  void clear_deposit();
  static const int kDepositFieldNumber = 7;
  double deposit() const;
  void set_deposit(double value);

  // optional double equity = 8;
  bool has_equity() const;
  void clear_equity();
  static const int kEquityFieldNumber = 8;
  double equity() const;
  void set_equity(double value);

  // optional int32 funcid = 1 [default = 13102010];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.OptionCapital)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_moneytype();
  void clear_has_moneytype();
  void set_has_fund_bal();
  void clear_has_fund_bal();
  void set_has_fund_ava();
  void clear_has_fund_ava();
  void set_has_market_value();
  void clear_has_market_value();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_deposit();
  void clear_has_deposit();
  void set_has_equity();
  void clear_has_equity();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr moneytype_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  double fund_bal_;
  double fund_ava_;
  double market_value_;
  double deposit_;
  double equity_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqoption_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OptionQueryPositionReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.OptionQueryPositionReqt) */ {
 public:
  OptionQueryPositionReqt();
  virtual ~OptionQueryPositionReqt();

  OptionQueryPositionReqt(const OptionQueryPositionReqt& from);

  inline OptionQueryPositionReqt& operator=(const OptionQueryPositionReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionQueryPositionReqt(OptionQueryPositionReqt&& from) noexcept
    : OptionQueryPositionReqt() {
    *this = ::std::move(from);
  }

  inline OptionQueryPositionReqt& operator=(OptionQueryPositionReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionQueryPositionReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionQueryPositionReqt* internal_default_instance() {
    return reinterpret_cast<const OptionQueryPositionReqt*>(
               &_OptionQueryPositionReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(OptionQueryPositionReqt* other);
  friend void swap(OptionQueryPositionReqt& a, OptionQueryPositionReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionQueryPositionReqt* New() const final {
    return CreateMaybeMessage<OptionQueryPositionReqt>(NULL);
  }

  OptionQueryPositionReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OptionQueryPositionReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OptionQueryPositionReqt& from);
  void MergeFrom(const OptionQueryPositionReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionQueryPositionReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OptionQueryPositionReqt_QueryType QueryType;
  static const QueryType Type_ONCE =
    OptionQueryPositionReqt_QueryType_Type_ONCE;
  static const QueryType Type_MORE =
    OptionQueryPositionReqt_QueryType_Type_MORE;
  static const QueryType Type_ALL =
    OptionQueryPositionReqt_QueryType_Type_ALL;
  static inline bool QueryType_IsValid(int value) {
    return OptionQueryPositionReqt_QueryType_IsValid(value);
  }
  static const QueryType QueryType_MIN =
    OptionQueryPositionReqt_QueryType_QueryType_MIN;
  static const QueryType QueryType_MAX =
    OptionQueryPositionReqt_QueryType_QueryType_MAX;
  static const int QueryType_ARRAYSIZE =
    OptionQueryPositionReqt_QueryType_QueryType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  QueryType_descriptor() {
    return OptionQueryPositionReqt_QueryType_descriptor();
  }
  static inline const ::std::string& QueryType_Name(QueryType value) {
    return OptionQueryPositionReqt_QueryType_Name(value);
  }
  static inline bool QueryType_Parse(const ::std::string& name,
      QueryType* value) {
    return OptionQueryPositionReqt_QueryType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string code = 2;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string start_pos = 6 [default = ""];
  bool has_start_pos() const;
  void clear_start_pos();
  static const int kStartPosFieldNumber = 6;
  const ::std::string& start_pos() const;
  void set_start_pos(const ::std::string& value);
  #if LANG_CXX11
  void set_start_pos(::std::string&& value);
  #endif
  void set_start_pos(const char* value);
  void set_start_pos(const char* value, size_t size);
  ::std::string* mutable_start_pos();
  ::std::string* release_start_pos();
  void set_allocated_start_pos(::std::string* start_pos);

  // optional string request_id = 7;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 7;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional int64 market = 3;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 3;
  ::google::protobuf::int64 market() const;
  void set_market(::google::protobuf::int64 value);

  // optional int64 request_time = 8 [default = 0];
  bool has_request_time() const;
  void clear_request_time();
  static const int kRequestTimeFieldNumber = 8;
  ::google::protobuf::int64 request_time() const;
  void set_request_time(::google::protobuf::int64 value);

  // optional .autotrade.OptionQueryPositionReqt.QueryType query_type = 5 [default = Type_ONCE];
  bool has_query_type() const;
  void clear_query_type();
  static const int kQueryTypeFieldNumber = 5;
  ::autotrade::OptionQueryPositionReqt_QueryType query_type() const;
  void set_query_type(::autotrade::OptionQueryPositionReqt_QueryType value);

  // optional int32 funcid = 1 [default = 13002006];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // optional uint32 query_count = 4 [default = 500];
  bool has_query_count() const;
  void clear_query_count();
  static const int kQueryCountFieldNumber = 4;
  ::google::protobuf::uint32 query_count() const;
  void set_query_count(::google::protobuf::uint32 value);

  // optional int64 active_interval = 9 [default = 1000];
  bool has_active_interval() const;
  void clear_active_interval();
  static const int kActiveIntervalFieldNumber = 9;
  ::google::protobuf::int64 active_interval() const;
  void set_active_interval(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:autotrade.OptionQueryPositionReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_code();
  void clear_has_code();
  void set_has_market();
  void clear_has_market();
  void set_has_query_count();
  void clear_has_query_count();
  void set_has_query_type();
  void clear_has_query_type();
  void set_has_start_pos();
  void clear_has_start_pos();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_request_time();
  void clear_has_request_time();
  void set_has_active_interval();
  void clear_has_active_interval();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr start_pos_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::int64 market_;
  ::google::protobuf::int64 request_time_;
  int query_type_;
  ::google::protobuf::int32 funcid_;
  ::google::protobuf::uint32 query_count_;
  ::google::protobuf::int64 active_interval_;
  friend struct ::protobuf_protos_2fqoption_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OptionPosition_Position : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.OptionPosition.Position) */ {
 public:
  OptionPosition_Position();
  virtual ~OptionPosition_Position();

  OptionPosition_Position(const OptionPosition_Position& from);

  inline OptionPosition_Position& operator=(const OptionPosition_Position& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionPosition_Position(OptionPosition_Position&& from) noexcept
    : OptionPosition_Position() {
    *this = ::std::move(from);
  }

  inline OptionPosition_Position& operator=(OptionPosition_Position&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionPosition_Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionPosition_Position* internal_default_instance() {
    return reinterpret_cast<const OptionPosition_Position*>(
               &_OptionPosition_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(OptionPosition_Position* other);
  friend void swap(OptionPosition_Position& a, OptionPosition_Position& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionPosition_Position* New() const final {
    return CreateMaybeMessage<OptionPosition_Position>(NULL);
  }

  OptionPosition_Position* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OptionPosition_Position>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OptionPosition_Position& from);
  void MergeFrom(const OptionPosition_Position& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionPosition_Position* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string code = 2;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string start_pos = 22;
  bool has_start_pos() const;
  void clear_start_pos();
  static const int kStartPosFieldNumber = 22;
  const ::std::string& start_pos() const;
  void set_start_pos(const ::std::string& value);
  #if LANG_CXX11
  void set_start_pos(::std::string&& value);
  #endif
  void set_start_pos(const char* value);
  void set_start_pos(const char* value, size_t size);
  ::std::string* mutable_start_pos();
  ::std::string* release_start_pos();
  void set_allocated_start_pos(::std::string* start_pos);

  // optional int64 market = 1;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 1;
  ::google::protobuf::int64 market() const;
  void set_market(::google::protobuf::int64 value);

  // optional int64 cp_flag = 4;
  bool has_cp_flag() const;
  void clear_cp_flag();
  static const int kCpFlagFieldNumber = 4;
  ::google::protobuf::int64 cp_flag() const;
  void set_cp_flag(::google::protobuf::int64 value);

  // optional int64 buy_covered = 5;
  bool has_buy_covered() const;
  void clear_buy_covered();
  static const int kBuyCoveredFieldNumber = 5;
  ::google::protobuf::int64 buy_covered() const;
  void set_buy_covered(::google::protobuf::int64 value);

  // optional int64 buy_volume = 6;
  bool has_buy_volume() const;
  void clear_buy_volume();
  static const int kBuyVolumeFieldNumber = 6;
  ::google::protobuf::int64 buy_volume() const;
  void set_buy_volume(::google::protobuf::int64 value);

  // optional double buy_price = 7;
  bool has_buy_price() const;
  void clear_buy_price();
  static const int kBuyPriceFieldNumber = 7;
  double buy_price() const;
  void set_buy_price(double value);

  // optional double buy_amount = 8;
  bool has_buy_amount() const;
  void clear_buy_amount();
  static const int kBuyAmountFieldNumber = 8;
  double buy_amount() const;
  void set_buy_amount(double value);

  // optional int64 buy_can_close_volume = 9;
  bool has_buy_can_close_volume() const;
  void clear_buy_can_close_volume();
  static const int kBuyCanCloseVolumeFieldNumber = 9;
  ::google::protobuf::int64 buy_can_close_volume() const;
  void set_buy_can_close_volume(::google::protobuf::int64 value);

  // optional int64 buy_open_freezed_volume = 10;
  bool has_buy_open_freezed_volume() const;
  void clear_buy_open_freezed_volume();
  static const int kBuyOpenFreezedVolumeFieldNumber = 10;
  ::google::protobuf::int64 buy_open_freezed_volume() const;
  void set_buy_open_freezed_volume(::google::protobuf::int64 value);

  // optional int64 buy_close_freezed_volume = 11;
  bool has_buy_close_freezed_volume() const;
  void clear_buy_close_freezed_volume();
  static const int kBuyCloseFreezedVolumeFieldNumber = 11;
  ::google::protobuf::int64 buy_close_freezed_volume() const;
  void set_buy_close_freezed_volume(::google::protobuf::int64 value);

  // optional double buy_deposit_amount = 12;
  bool has_buy_deposit_amount() const;
  void clear_buy_deposit_amount();
  static const int kBuyDepositAmountFieldNumber = 12;
  double buy_deposit_amount() const;
  void set_buy_deposit_amount(double value);

  // optional int64 sell_covered = 13;
  bool has_sell_covered() const;
  void clear_sell_covered();
  static const int kSellCoveredFieldNumber = 13;
  ::google::protobuf::int64 sell_covered() const;
  void set_sell_covered(::google::protobuf::int64 value);

  // optional int64 sell_volume = 14;
  bool has_sell_volume() const;
  void clear_sell_volume();
  static const int kSellVolumeFieldNumber = 14;
  ::google::protobuf::int64 sell_volume() const;
  void set_sell_volume(::google::protobuf::int64 value);

  // optional double sell_price = 15;
  bool has_sell_price() const;
  void clear_sell_price();
  static const int kSellPriceFieldNumber = 15;
  double sell_price() const;
  void set_sell_price(double value);

  // optional double sell_amount = 16;
  bool has_sell_amount() const;
  void clear_sell_amount();
  static const int kSellAmountFieldNumber = 16;
  double sell_amount() const;
  void set_sell_amount(double value);

  // optional int64 sell_can_close_volume = 17;
  bool has_sell_can_close_volume() const;
  void clear_sell_can_close_volume();
  static const int kSellCanCloseVolumeFieldNumber = 17;
  ::google::protobuf::int64 sell_can_close_volume() const;
  void set_sell_can_close_volume(::google::protobuf::int64 value);

  // optional int64 sell_open_freezed_volume = 18;
  bool has_sell_open_freezed_volume() const;
  void clear_sell_open_freezed_volume();
  static const int kSellOpenFreezedVolumeFieldNumber = 18;
  ::google::protobuf::int64 sell_open_freezed_volume() const;
  void set_sell_open_freezed_volume(::google::protobuf::int64 value);

  // optional int64 sell_close_freezed_volume = 19;
  bool has_sell_close_freezed_volume() const;
  void clear_sell_close_freezed_volume();
  static const int kSellCloseFreezedVolumeFieldNumber = 19;
  ::google::protobuf::int64 sell_close_freezed_volume() const;
  void set_sell_close_freezed_volume(::google::protobuf::int64 value);

  // optional double sell_deposit_amount = 20;
  bool has_sell_deposit_amount() const;
  void clear_sell_deposit_amount();
  static const int kSellDepositAmountFieldNumber = 20;
  double sell_deposit_amount() const;
  void set_sell_deposit_amount(double value);

  // optional int64 net_volume = 21;
  bool has_net_volume() const;
  void clear_net_volume();
  static const int kNetVolumeFieldNumber = 21;
  ::google::protobuf::int64 net_volume() const;
  void set_net_volume(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:autotrade.OptionPosition.Position)
 private:
  void set_has_market();
  void clear_has_market();
  void set_has_code();
  void clear_has_code();
  void set_has_name();
  void clear_has_name();
  void set_has_cp_flag();
  void clear_has_cp_flag();
  void set_has_buy_covered();
  void clear_has_buy_covered();
  void set_has_buy_volume();
  void clear_has_buy_volume();
  void set_has_buy_price();
  void clear_has_buy_price();
  void set_has_buy_amount();
  void clear_has_buy_amount();
  void set_has_buy_can_close_volume();
  void clear_has_buy_can_close_volume();
  void set_has_buy_open_freezed_volume();
  void clear_has_buy_open_freezed_volume();
  void set_has_buy_close_freezed_volume();
  void clear_has_buy_close_freezed_volume();
  void set_has_buy_deposit_amount();
  void clear_has_buy_deposit_amount();
  void set_has_sell_covered();
  void clear_has_sell_covered();
  void set_has_sell_volume();
  void clear_has_sell_volume();
  void set_has_sell_price();
  void clear_has_sell_price();
  void set_has_sell_amount();
  void clear_has_sell_amount();
  void set_has_sell_can_close_volume();
  void clear_has_sell_can_close_volume();
  void set_has_sell_open_freezed_volume();
  void clear_has_sell_open_freezed_volume();
  void set_has_sell_close_freezed_volume();
  void clear_has_sell_close_freezed_volume();
  void set_has_sell_deposit_amount();
  void clear_has_sell_deposit_amount();
  void set_has_net_volume();
  void clear_has_net_volume();
  void set_has_start_pos();
  void clear_has_start_pos();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr start_pos_;
  ::google::protobuf::int64 market_;
  ::google::protobuf::int64 cp_flag_;
  ::google::protobuf::int64 buy_covered_;
  ::google::protobuf::int64 buy_volume_;
  double buy_price_;
  double buy_amount_;
  ::google::protobuf::int64 buy_can_close_volume_;
  ::google::protobuf::int64 buy_open_freezed_volume_;
  ::google::protobuf::int64 buy_close_freezed_volume_;
  double buy_deposit_amount_;
  ::google::protobuf::int64 sell_covered_;
  ::google::protobuf::int64 sell_volume_;
  double sell_price_;
  double sell_amount_;
  ::google::protobuf::int64 sell_can_close_volume_;
  ::google::protobuf::int64 sell_open_freezed_volume_;
  ::google::protobuf::int64 sell_close_freezed_volume_;
  double sell_deposit_amount_;
  ::google::protobuf::int64 net_volume_;
  friend struct ::protobuf_protos_2fqoption_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OptionPosition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.OptionPosition) */ {
 public:
  OptionPosition();
  virtual ~OptionPosition();

  OptionPosition(const OptionPosition& from);

  inline OptionPosition& operator=(const OptionPosition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionPosition(OptionPosition&& from) noexcept
    : OptionPosition() {
    *this = ::std::move(from);
  }

  inline OptionPosition& operator=(OptionPosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionPosition* internal_default_instance() {
    return reinterpret_cast<const OptionPosition*>(
               &_OptionPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(OptionPosition* other);
  friend void swap(OptionPosition& a, OptionPosition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionPosition* New() const final {
    return CreateMaybeMessage<OptionPosition>(NULL);
  }

  OptionPosition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OptionPosition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OptionPosition& from);
  void MergeFrom(const OptionPosition& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionPosition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OptionPosition_Position Position;

  // accessors -------------------------------------------------------

  // repeated .autotrade.OptionPosition.Position positions = 2;
  int positions_size() const;
  void clear_positions();
  static const int kPositionsFieldNumber = 2;
  ::autotrade::OptionPosition_Position* mutable_positions(int index);
  ::google::protobuf::RepeatedPtrField< ::autotrade::OptionPosition_Position >*
      mutable_positions();
  const ::autotrade::OptionPosition_Position& positions(int index) const;
  ::autotrade::OptionPosition_Position* add_positions();
  const ::google::protobuf::RepeatedPtrField< ::autotrade::OptionPosition_Position >&
      positions() const;

  // optional string last_pos = 3;
  bool has_last_pos() const;
  void clear_last_pos();
  static const int kLastPosFieldNumber = 3;
  const ::std::string& last_pos() const;
  void set_last_pos(const ::std::string& value);
  #if LANG_CXX11
  void set_last_pos(::std::string&& value);
  #endif
  void set_last_pos(const char* value);
  void set_last_pos(const char* value, size_t size);
  ::std::string* mutable_last_pos();
  ::std::string* release_last_pos();
  void set_allocated_last_pos(::std::string* last_pos);

  // optional string request_id = 4;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 4;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional int32 funcid = 1 [default = 13102006];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.OptionPosition)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_last_pos();
  void clear_has_last_pos();
  void set_has_request_id();
  void clear_has_request_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::autotrade::OptionPosition_Position > positions_;
  ::google::protobuf::internal::ArenaStringPtr last_pos_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqoption_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OptionQueryDealDetailReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.OptionQueryDealDetailReqt) */ {
 public:
  OptionQueryDealDetailReqt();
  virtual ~OptionQueryDealDetailReqt();

  OptionQueryDealDetailReqt(const OptionQueryDealDetailReqt& from);

  inline OptionQueryDealDetailReqt& operator=(const OptionQueryDealDetailReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionQueryDealDetailReqt(OptionQueryDealDetailReqt&& from) noexcept
    : OptionQueryDealDetailReqt() {
    *this = ::std::move(from);
  }

  inline OptionQueryDealDetailReqt& operator=(OptionQueryDealDetailReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionQueryDealDetailReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionQueryDealDetailReqt* internal_default_instance() {
    return reinterpret_cast<const OptionQueryDealDetailReqt*>(
               &_OptionQueryDealDetailReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(OptionQueryDealDetailReqt* other);
  friend void swap(OptionQueryDealDetailReqt& a, OptionQueryDealDetailReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionQueryDealDetailReqt* New() const final {
    return CreateMaybeMessage<OptionQueryDealDetailReqt>(NULL);
  }

  OptionQueryDealDetailReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OptionQueryDealDetailReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OptionQueryDealDetailReqt& from);
  void MergeFrom(const OptionQueryDealDetailReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionQueryDealDetailReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OptionQueryDealDetailReqt_QueryType QueryType;
  static const QueryType Type_ONCE =
    OptionQueryDealDetailReqt_QueryType_Type_ONCE;
  static const QueryType Type_MORE =
    OptionQueryDealDetailReqt_QueryType_Type_MORE;
  static const QueryType Type_ALL =
    OptionQueryDealDetailReqt_QueryType_Type_ALL;
  static inline bool QueryType_IsValid(int value) {
    return OptionQueryDealDetailReqt_QueryType_IsValid(value);
  }
  static const QueryType QueryType_MIN =
    OptionQueryDealDetailReqt_QueryType_QueryType_MIN;
  static const QueryType QueryType_MAX =
    OptionQueryDealDetailReqt_QueryType_QueryType_MAX;
  static const int QueryType_ARRAYSIZE =
    OptionQueryDealDetailReqt_QueryType_QueryType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  QueryType_descriptor() {
    return OptionQueryDealDetailReqt_QueryType_descriptor();
  }
  static inline const ::std::string& QueryType_Name(QueryType value) {
    return OptionQueryDealDetailReqt_QueryType_Name(value);
  }
  static inline bool QueryType_Parse(const ::std::string& name,
      QueryType* value) {
    return OptionQueryDealDetailReqt_QueryType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string orderno = 2 [default = ""];
  bool has_orderno() const;
  void clear_orderno();
  static const int kOrdernoFieldNumber = 2;
  const ::std::string& orderno() const;
  void set_orderno(const ::std::string& value);
  #if LANG_CXX11
  void set_orderno(::std::string&& value);
  #endif
  void set_orderno(const char* value);
  void set_orderno(const char* value, size_t size);
  ::std::string* mutable_orderno();
  ::std::string* release_orderno();
  void set_allocated_orderno(::std::string* orderno);

  // optional string start_pos = 5 [default = ""];
  bool has_start_pos() const;
  void clear_start_pos();
  static const int kStartPosFieldNumber = 5;
  const ::std::string& start_pos() const;
  void set_start_pos(const ::std::string& value);
  #if LANG_CXX11
  void set_start_pos(::std::string&& value);
  #endif
  void set_start_pos(const char* value);
  void set_start_pos(const char* value, size_t size);
  ::std::string* mutable_start_pos();
  ::std::string* release_start_pos();
  void set_allocated_start_pos(::std::string* start_pos);

  // optional string request_id = 6;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 6;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional int64 request_time = 7 [default = 0];
  bool has_request_time() const;
  void clear_request_time();
  static const int kRequestTimeFieldNumber = 7;
  ::google::protobuf::int64 request_time() const;
  void set_request_time(::google::protobuf::int64 value);

  // optional .autotrade.OptionQueryDealDetailReqt.QueryType query_type = 4 [default = Type_ONCE];
  bool has_query_type() const;
  void clear_query_type();
  static const int kQueryTypeFieldNumber = 4;
  ::autotrade::OptionQueryDealDetailReqt_QueryType query_type() const;
  void set_query_type(::autotrade::OptionQueryDealDetailReqt_QueryType value);

  // optional int32 funcid = 1 [default = 13002004];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // optional uint32 query_count = 3 [default = 500];
  bool has_query_count() const;
  void clear_query_count();
  static const int kQueryCountFieldNumber = 3;
  ::google::protobuf::uint32 query_count() const;
  void set_query_count(::google::protobuf::uint32 value);

  // optional int64 active_interval = 8 [default = 1000];
  bool has_active_interval() const;
  void clear_active_interval();
  static const int kActiveIntervalFieldNumber = 8;
  ::google::protobuf::int64 active_interval() const;
  void set_active_interval(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:autotrade.OptionQueryDealDetailReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_orderno();
  void clear_has_orderno();
  void set_has_query_count();
  void clear_has_query_count();
  void set_has_query_type();
  void clear_has_query_type();
  void set_has_start_pos();
  void clear_has_start_pos();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_request_time();
  void clear_has_request_time();
  void set_has_active_interval();
  void clear_has_active_interval();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr orderno_;
  ::google::protobuf::internal::ArenaStringPtr start_pos_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::int64 request_time_;
  int query_type_;
  ::google::protobuf::int32 funcid_;
  ::google::protobuf::uint32 query_count_;
  ::google::protobuf::int64 active_interval_;
  friend struct ::protobuf_protos_2fqoption_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OptionDealDetail : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.OptionDealDetail) */ {
 public:
  OptionDealDetail();
  virtual ~OptionDealDetail();

  OptionDealDetail(const OptionDealDetail& from);

  inline OptionDealDetail& operator=(const OptionDealDetail& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionDealDetail(OptionDealDetail&& from) noexcept
    : OptionDealDetail() {
    *this = ::std::move(from);
  }

  inline OptionDealDetail& operator=(OptionDealDetail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionDealDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionDealDetail* internal_default_instance() {
    return reinterpret_cast<const OptionDealDetail*>(
               &_OptionDealDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(OptionDealDetail* other);
  friend void swap(OptionDealDetail& a, OptionDealDetail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionDealDetail* New() const final {
    return CreateMaybeMessage<OptionDealDetail>(NULL);
  }

  OptionDealDetail* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OptionDealDetail>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OptionDealDetail& from);
  void MergeFrom(const OptionDealDetail& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionDealDetail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .autotrade.RawOptionKnock knocks = 2;
  int knocks_size() const;
  void clear_knocks();
  static const int kKnocksFieldNumber = 2;
  ::autotrade::RawOptionKnock* mutable_knocks(int index);
  ::google::protobuf::RepeatedPtrField< ::autotrade::RawOptionKnock >*
      mutable_knocks();
  const ::autotrade::RawOptionKnock& knocks(int index) const;
  ::autotrade::RawOptionKnock* add_knocks();
  const ::google::protobuf::RepeatedPtrField< ::autotrade::RawOptionKnock >&
      knocks() const;

  // optional string last_pos = 3;
  bool has_last_pos() const;
  void clear_last_pos();
  static const int kLastPosFieldNumber = 3;
  const ::std::string& last_pos() const;
  void set_last_pos(const ::std::string& value);
  #if LANG_CXX11
  void set_last_pos(::std::string&& value);
  #endif
  void set_last_pos(const char* value);
  void set_last_pos(const char* value, size_t size);
  ::std::string* mutable_last_pos();
  ::std::string* release_last_pos();
  void set_allocated_last_pos(::std::string* last_pos);

  // optional string request_id = 4;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 4;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional int32 funcid = 1 [default = 13102004];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.OptionDealDetail)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_last_pos();
  void clear_has_last_pos();
  void set_has_request_id();
  void clear_has_request_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::autotrade::RawOptionKnock > knocks_;
  ::google::protobuf::internal::ArenaStringPtr last_pos_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqoption_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RawOptionKnock : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.RawOptionKnock) */ {
 public:
  RawOptionKnock();
  virtual ~RawOptionKnock();

  RawOptionKnock(const RawOptionKnock& from);

  inline RawOptionKnock& operator=(const RawOptionKnock& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RawOptionKnock(RawOptionKnock&& from) noexcept
    : RawOptionKnock() {
    *this = ::std::move(from);
  }

  inline RawOptionKnock& operator=(RawOptionKnock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RawOptionKnock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RawOptionKnock* internal_default_instance() {
    return reinterpret_cast<const RawOptionKnock*>(
               &_RawOptionKnock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(RawOptionKnock* other);
  friend void swap(RawOptionKnock& a, RawOptionKnock& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RawOptionKnock* New() const final {
    return CreateMaybeMessage<RawOptionKnock>(NULL);
  }

  RawOptionKnock* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RawOptionKnock>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RawOptionKnock& from);
  void MergeFrom(const RawOptionKnock& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RawOptionKnock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string order_group = 3;
  bool has_order_group() const;
  void clear_order_group();
  static const int kOrderGroupFieldNumber = 3;
  const ::std::string& order_group() const;
  void set_order_group(const ::std::string& value);
  #if LANG_CXX11
  void set_order_group(::std::string&& value);
  #endif
  void set_order_group(const char* value);
  void set_order_group(const char* value, size_t size);
  ::std::string* mutable_order_group();
  ::std::string* release_order_group();
  void set_allocated_order_group(::std::string* order_group);

  // required string orderno = 4;
  bool has_orderno() const;
  void clear_orderno();
  static const int kOrdernoFieldNumber = 4;
  const ::std::string& orderno() const;
  void set_orderno(const ::std::string& value);
  #if LANG_CXX11
  void set_orderno(::std::string&& value);
  #endif
  void set_orderno(const char* value);
  void set_orderno(const char* value, size_t size);
  ::std::string* mutable_orderno();
  ::std::string* release_orderno();
  void set_allocated_orderno(::std::string* orderno);

  // required string code = 6;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 6;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // required string match_id = 17;
  bool has_match_id() const;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 17;
  const ::std::string& match_id() const;
  void set_match_id(const ::std::string& value);
  #if LANG_CXX11
  void set_match_id(::std::string&& value);
  #endif
  void set_match_id(const char* value);
  void set_match_id(const char* value, size_t size);
  ::std::string* mutable_match_id();
  ::std::string* release_match_id();
  void set_allocated_match_id(::std::string* match_id);

  // optional string stock_account = 18;
  bool has_stock_account() const;
  void clear_stock_account();
  static const int kStockAccountFieldNumber = 18;
  const ::std::string& stock_account() const;
  void set_stock_account(const ::std::string& value);
  #if LANG_CXX11
  void set_stock_account(::std::string&& value);
  #endif
  void set_stock_account(const char* value);
  void set_stock_account(const char* value, size_t size);
  ::std::string* mutable_stock_account();
  ::std::string* release_stock_account();
  void set_allocated_stock_account(::std::string* stock_account);

  // optional string oppo_account = 19;
  bool has_oppo_account() const;
  void clear_oppo_account();
  static const int kOppoAccountFieldNumber = 19;
  const ::std::string& oppo_account() const;
  void set_oppo_account(const ::std::string& value);
  #if LANG_CXX11
  void set_oppo_account(::std::string&& value);
  #endif
  void set_oppo_account(const char* value);
  void set_oppo_account(const char* value, size_t size);
  ::std::string* mutable_oppo_account();
  ::std::string* release_oppo_account();
  void set_allocated_oppo_account(::std::string* oppo_account);

  // optional string name = 20;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 20;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string info = 21;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 21;
  const ::std::string& info() const;
  void set_info(const ::std::string& value);
  #if LANG_CXX11
  void set_info(::std::string&& value);
  #endif
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  ::std::string* mutable_info();
  ::std::string* release_info();
  void set_allocated_info(::std::string* info);

  // optional string start_pos = 22;
  bool has_start_pos() const;
  void clear_start_pos();
  static const int kStartPosFieldNumber = 22;
  const ::std::string& start_pos() const;
  void set_start_pos(const ::std::string& value);
  #if LANG_CXX11
  void set_start_pos(::std::string&& value);
  #endif
  void set_start_pos(const char* value);
  void set_start_pos(const char* value, size_t size);
  ::std::string* mutable_start_pos();
  ::std::string* release_start_pos();
  void set_allocated_start_pos(::std::string* start_pos);

  // required uint64 stamp = 2;
  bool has_stamp() const;
  void clear_stamp();
  static const int kStampFieldNumber = 2;
  ::google::protobuf::uint64 stamp() const;
  void set_stamp(::google::protobuf::uint64 value);

  // optional int64 order_price = 7;
  bool has_order_price() const;
  void clear_order_price();
  static const int kOrderPriceFieldNumber = 7;
  ::google::protobuf::int64 order_price() const;
  void set_order_price(::google::protobuf::int64 value);

  // optional uint32 market = 5;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 5;
  ::google::protobuf::uint32 market() const;
  void set_market(::google::protobuf::uint32 value);

  // optional uint32 order_qty = 9;
  bool has_order_qty() const;
  void clear_order_qty();
  static const int kOrderQtyFieldNumber = 9;
  ::google::protobuf::uint32 order_qty() const;
  void set_order_qty(::google::protobuf::uint32 value);

  // optional int64 match_qty = 8;
  bool has_match_qty() const;
  void clear_match_qty();
  static const int kMatchQtyFieldNumber = 8;
  ::google::protobuf::int64 match_qty() const;
  void set_match_qty(::google::protobuf::int64 value);

  // optional int64 open_close_flag = 11;
  bool has_open_close_flag() const;
  void clear_open_close_flag();
  static const int kOpenCloseFlagFieldNumber = 11;
  ::google::protobuf::int64 open_close_flag() const;
  void set_open_close_flag(::google::protobuf::int64 value);

  // optional uint32 bsflag = 10;
  bool has_bsflag() const;
  void clear_bsflag();
  static const int kBsflagFieldNumber = 10;
  ::google::protobuf::uint32 bsflag() const;
  void set_bsflag(::google::protobuf::uint32 value);

  // optional int32 match_type = 12;
  bool has_match_type() const;
  void clear_match_type();
  static const int kMatchTypeFieldNumber = 12;
  ::google::protobuf::int32 match_type() const;
  void set_match_type(::google::protobuf::int32 value);

  // optional double clear_amt = 13;
  bool has_clear_amt() const;
  void clear_clear_amt();
  static const int kClearAmtFieldNumber = 13;
  double clear_amt() const;
  void set_clear_amt(double value);

  // optional double match_amt = 14;
  bool has_match_amt() const;
  void clear_match_amt();
  static const int kMatchAmtFieldNumber = 14;
  double match_amt() const;
  void set_match_amt(double value);

  // optional int64 match_price = 15;
  bool has_match_price() const;
  void clear_match_price();
  static const int kMatchPriceFieldNumber = 15;
  ::google::protobuf::int64 match_price() const;
  void set_match_price(::google::protobuf::int64 value);

  // optional int32 order_type = 16;
  bool has_order_type() const;
  void clear_order_type();
  static const int kOrderTypeFieldNumber = 16;
  ::google::protobuf::int32 order_type() const;
  void set_order_type(::google::protobuf::int32 value);

  // optional int32 funcid = 1 [default = 13003001];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.RawOptionKnock)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_stamp();
  void clear_has_stamp();
  void set_has_order_group();
  void clear_has_order_group();
  void set_has_orderno();
  void clear_has_orderno();
  void set_has_market();
  void clear_has_market();
  void set_has_code();
  void clear_has_code();
  void set_has_order_price();
  void clear_has_order_price();
  void set_has_match_qty();
  void clear_has_match_qty();
  void set_has_order_qty();
  void clear_has_order_qty();
  void set_has_bsflag();
  void clear_has_bsflag();
  void set_has_open_close_flag();
  void clear_has_open_close_flag();
  void set_has_match_type();
  void clear_has_match_type();
  void set_has_clear_amt();
  void clear_has_clear_amt();
  void set_has_match_amt();
  void clear_has_match_amt();
  void set_has_match_price();
  void clear_has_match_price();
  void set_has_order_type();
  void clear_has_order_type();
  void set_has_match_id();
  void clear_has_match_id();
  void set_has_stock_account();
  void clear_has_stock_account();
  void set_has_oppo_account();
  void clear_has_oppo_account();
  void set_has_name();
  void clear_has_name();
  void set_has_info();
  void clear_has_info();
  void set_has_start_pos();
  void clear_has_start_pos();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr order_group_;
  ::google::protobuf::internal::ArenaStringPtr orderno_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr match_id_;
  ::google::protobuf::internal::ArenaStringPtr stock_account_;
  ::google::protobuf::internal::ArenaStringPtr oppo_account_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr info_;
  ::google::protobuf::internal::ArenaStringPtr start_pos_;
  ::google::protobuf::uint64 stamp_;
  ::google::protobuf::int64 order_price_;
  ::google::protobuf::uint32 market_;
  ::google::protobuf::uint32 order_qty_;
  ::google::protobuf::int64 match_qty_;
  ::google::protobuf::int64 open_close_flag_;
  ::google::protobuf::uint32 bsflag_;
  ::google::protobuf::int32 match_type_;
  double clear_amt_;
  double match_amt_;
  ::google::protobuf::int64 match_price_;
  ::google::protobuf::int32 order_type_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqoption_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OptionOrdersCreateResp_OrderList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.OptionOrdersCreateResp.OrderList) */ {
 public:
  OptionOrdersCreateResp_OrderList();
  virtual ~OptionOrdersCreateResp_OrderList();

  OptionOrdersCreateResp_OrderList(const OptionOrdersCreateResp_OrderList& from);

  inline OptionOrdersCreateResp_OrderList& operator=(const OptionOrdersCreateResp_OrderList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionOrdersCreateResp_OrderList(OptionOrdersCreateResp_OrderList&& from) noexcept
    : OptionOrdersCreateResp_OrderList() {
    *this = ::std::move(from);
  }

  inline OptionOrdersCreateResp_OrderList& operator=(OptionOrdersCreateResp_OrderList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionOrdersCreateResp_OrderList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionOrdersCreateResp_OrderList* internal_default_instance() {
    return reinterpret_cast<const OptionOrdersCreateResp_OrderList*>(
               &_OptionOrdersCreateResp_OrderList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(OptionOrdersCreateResp_OrderList* other);
  friend void swap(OptionOrdersCreateResp_OrderList& a, OptionOrdersCreateResp_OrderList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionOrdersCreateResp_OrderList* New() const final {
    return CreateMaybeMessage<OptionOrdersCreateResp_OrderList>(NULL);
  }

  OptionOrdersCreateResp_OrderList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OptionOrdersCreateResp_OrderList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OptionOrdersCreateResp_OrderList& from);
  void MergeFrom(const OptionOrdersCreateResp_OrderList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionOrdersCreateResp_OrderList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string orderno = 4;
  bool has_orderno() const;
  void clear_orderno();
  static const int kOrdernoFieldNumber = 4;
  const ::std::string& orderno() const;
  void set_orderno(const ::std::string& value);
  #if LANG_CXX11
  void set_orderno(::std::string&& value);
  #endif
  void set_orderno(const char* value);
  void set_orderno(const char* value, size_t size);
  ::std::string* mutable_orderno();
  ::std::string* release_orderno();
  void set_allocated_orderno(::std::string* orderno);

  // optional string ret_message = 7;
  bool has_ret_message() const;
  void clear_ret_message();
  static const int kRetMessageFieldNumber = 7;
  const ::std::string& ret_message() const;
  void set_ret_message(const ::std::string& value);
  #if LANG_CXX11
  void set_ret_message(::std::string&& value);
  #endif
  void set_ret_message(const char* value);
  void set_ret_message(const char* value, size_t size);
  ::std::string* mutable_ret_message();
  ::std::string* release_ret_message();
  void set_allocated_ret_message(::std::string* ret_message);

  // optional string name = 8;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 8;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required int64 price = 2;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 2;
  ::google::protobuf::int64 price() const;
  void set_price(::google::protobuf::int64 value);

  // required uint32 qty = 3;
  bool has_qty() const;
  void clear_qty();
  static const int kQtyFieldNumber = 3;
  ::google::protobuf::uint32 qty() const;
  void set_qty(::google::protobuf::uint32 value);

  // optional int32 ret_code = 6;
  bool has_ret_code() const;
  void clear_ret_code();
  static const int kRetCodeFieldNumber = 6;
  ::google::protobuf::int32 ret_code() const;
  void set_ret_code(::google::protobuf::int32 value);

  // optional int64 open_close_flag = 5;
  bool has_open_close_flag() const;
  void clear_open_close_flag();
  static const int kOpenCloseFlagFieldNumber = 5;
  ::google::protobuf::int64 open_close_flag() const;
  void set_open_close_flag(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:autotrade.OptionOrdersCreateResp.OrderList)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_price();
  void clear_has_price();
  void set_has_qty();
  void clear_has_qty();
  void set_has_orderno();
  void clear_has_orderno();
  void set_has_open_close_flag();
  void clear_has_open_close_flag();
  void set_has_ret_code();
  void clear_has_ret_code();
  void set_has_ret_message();
  void clear_has_ret_message();
  void set_has_name();
  void clear_has_name();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr orderno_;
  ::google::protobuf::internal::ArenaStringPtr ret_message_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int64 price_;
  ::google::protobuf::uint32 qty_;
  ::google::protobuf::int32 ret_code_;
  ::google::protobuf::int64 open_close_flag_;
  friend struct ::protobuf_protos_2fqoption_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OptionOrdersCreateResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.OptionOrdersCreateResp) */ {
 public:
  OptionOrdersCreateResp();
  virtual ~OptionOrdersCreateResp();

  OptionOrdersCreateResp(const OptionOrdersCreateResp& from);

  inline OptionOrdersCreateResp& operator=(const OptionOrdersCreateResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionOrdersCreateResp(OptionOrdersCreateResp&& from) noexcept
    : OptionOrdersCreateResp() {
    *this = ::std::move(from);
  }

  inline OptionOrdersCreateResp& operator=(OptionOrdersCreateResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionOrdersCreateResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionOrdersCreateResp* internal_default_instance() {
    return reinterpret_cast<const OptionOrdersCreateResp*>(
               &_OptionOrdersCreateResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(OptionOrdersCreateResp* other);
  friend void swap(OptionOrdersCreateResp& a, OptionOrdersCreateResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionOrdersCreateResp* New() const final {
    return CreateMaybeMessage<OptionOrdersCreateResp>(NULL);
  }

  OptionOrdersCreateResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OptionOrdersCreateResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OptionOrdersCreateResp& from);
  void MergeFrom(const OptionOrdersCreateResp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionOrdersCreateResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OptionOrdersCreateResp_OrderList OrderList;

  // accessors -------------------------------------------------------

  // repeated .autotrade.OptionOrdersCreateResp.OrderList order_list = 15;
  int order_list_size() const;
  void clear_order_list();
  static const int kOrderListFieldNumber = 15;
  ::autotrade::OptionOrdersCreateResp_OrderList* mutable_order_list(int index);
  ::google::protobuf::RepeatedPtrField< ::autotrade::OptionOrdersCreateResp_OrderList >*
      mutable_order_list();
  const ::autotrade::OptionOrdersCreateResp_OrderList& order_list(int index) const;
  ::autotrade::OptionOrdersCreateResp_OrderList* add_order_list();
  const ::google::protobuf::RepeatedPtrField< ::autotrade::OptionOrdersCreateResp_OrderList >&
      order_list() const;

  // optional string request_id = 2;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 2;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // required string order_id = 3;
  bool has_order_id() const;
  void clear_order_id();
  static const int kOrderIdFieldNumber = 3;
  const ::std::string& order_id() const;
  void set_order_id(const ::std::string& value);
  #if LANG_CXX11
  void set_order_id(::std::string&& value);
  #endif
  void set_order_id(const char* value);
  void set_order_id(const char* value, size_t size);
  ::std::string* mutable_order_id();
  ::std::string* release_order_id();
  void set_allocated_order_id(::std::string* order_id);

  // required string order_group = 4;
  bool has_order_group() const;
  void clear_order_group();
  static const int kOrderGroupFieldNumber = 4;
  const ::std::string& order_group() const;
  void set_order_group(const ::std::string& value);
  #if LANG_CXX11
  void set_order_group(::std::string&& value);
  #endif
  void set_order_group(const char* value);
  void set_order_group(const char* value, size_t size);
  ::std::string* mutable_order_group();
  ::std::string* release_order_group();
  void set_allocated_order_group(::std::string* order_group);

  // optional string trader_id = 5;
  bool has_trader_id() const;
  void clear_trader_id();
  static const int kTraderIdFieldNumber = 5;
  const ::std::string& trader_id() const;
  void set_trader_id(const ::std::string& value);
  #if LANG_CXX11
  void set_trader_id(::std::string&& value);
  #endif
  void set_trader_id(const char* value);
  void set_trader_id(const char* value, size_t size);
  ::std::string* mutable_trader_id();
  ::std::string* release_trader_id();
  void set_allocated_trader_id(::std::string* trader_id);

  // optional string robot_id = 6;
  bool has_robot_id() const;
  void clear_robot_id();
  static const int kRobotIdFieldNumber = 6;
  const ::std::string& robot_id() const;
  void set_robot_id(const ::std::string& value);
  #if LANG_CXX11
  void set_robot_id(::std::string&& value);
  #endif
  void set_robot_id(const char* value);
  void set_robot_id(const char* value, size_t size);
  ::std::string* mutable_robot_id();
  ::std::string* release_robot_id();
  void set_allocated_robot_id(::std::string* robot_id);

  // optional string fund_id = 9;
  bool has_fund_id() const;
  void clear_fund_id();
  static const int kFundIdFieldNumber = 9;
  const ::std::string& fund_id() const;
  void set_fund_id(const ::std::string& value);
  #if LANG_CXX11
  void set_fund_id(::std::string&& value);
  #endif
  void set_fund_id(const char* value);
  void set_fund_id(const char* value, size_t size);
  ::std::string* mutable_fund_id();
  ::std::string* release_fund_id();
  void set_allocated_fund_id(::std::string* fund_id);

  // optional string match_condition = 14 [default = ""];
  bool has_match_condition() const;
  void clear_match_condition();
  static const int kMatchConditionFieldNumber = 14;
  const ::std::string& match_condition() const;
  void set_match_condition(const ::std::string& value);
  #if LANG_CXX11
  void set_match_condition(::std::string&& value);
  #endif
  void set_match_condition(const char* value);
  void set_match_condition(const char* value, size_t size);
  ::std::string* mutable_match_condition();
  ::std::string* release_match_condition();
  void set_allocated_match_condition(::std::string* match_condition);

  // optional string account_name = 16 [default = ""];
  bool has_account_name() const;
  void clear_account_name();
  static const int kAccountNameFieldNumber = 16;
  const ::std::string& account_name() const;
  void set_account_name(const ::std::string& value);
  #if LANG_CXX11
  void set_account_name(::std::string&& value);
  #endif
  void set_account_name(const char* value);
  void set_account_name(const char* value, size_t size);
  ::std::string* mutable_account_name();
  ::std::string* release_account_name();
  void set_allocated_account_name(::std::string* account_name);

  // optional uint32 data_date = 7;
  bool has_data_date() const;
  void clear_data_date();
  static const int kDataDateFieldNumber = 7;
  ::google::protobuf::uint32 data_date() const;
  void set_data_date(::google::protobuf::uint32 value);

  // optional uint32 data_time = 8;
  bool has_data_time() const;
  void clear_data_time();
  static const int kDataTimeFieldNumber = 8;
  ::google::protobuf::uint32 data_time() const;
  void set_data_time(::google::protobuf::uint32 value);

  // optional int64 market = 10;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 10;
  ::google::protobuf::int64 market() const;
  void set_market(::google::protobuf::int64 value);

  // optional int64 bsflag = 11;
  bool has_bsflag() const;
  void clear_bsflag();
  static const int kBsflagFieldNumber = 11;
  ::google::protobuf::int64 bsflag() const;
  void set_bsflag(::google::protobuf::int64 value);

  // optional int32 order_price_type = 12 [default = 0];
  bool has_order_price_type() const;
  void clear_order_price_type();
  static const int kOrderPriceTypeFieldNumber = 12;
  ::google::protobuf::int32 order_price_type() const;
  void set_order_price_type(::google::protobuf::int32 value);

  // optional int32 covered_flag = 13 [default = 0];
  bool has_covered_flag() const;
  void clear_covered_flag();
  static const int kCoveredFlagFieldNumber = 13;
  ::google::protobuf::int32 covered_flag() const;
  void set_covered_flag(::google::protobuf::int32 value);

  // optional int32 funcid = 1 [default = 13101014];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.OptionOrdersCreateResp)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_order_id();
  void clear_has_order_id();
  void set_has_order_group();
  void clear_has_order_group();
  void set_has_trader_id();
  void clear_has_trader_id();
  void set_has_robot_id();
  void clear_has_robot_id();
  void set_has_data_date();
  void clear_has_data_date();
  void set_has_data_time();
  void clear_has_data_time();
  void set_has_fund_id();
  void clear_has_fund_id();
  void set_has_market();
  void clear_has_market();
  void set_has_bsflag();
  void clear_has_bsflag();
  void set_has_order_price_type();
  void clear_has_order_price_type();
  void set_has_covered_flag();
  void clear_has_covered_flag();
  void set_has_match_condition();
  void clear_has_match_condition();
  void set_has_account_name();
  void clear_has_account_name();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::autotrade::OptionOrdersCreateResp_OrderList > order_list_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr order_id_;
  ::google::protobuf::internal::ArenaStringPtr order_group_;
  ::google::protobuf::internal::ArenaStringPtr trader_id_;
  ::google::protobuf::internal::ArenaStringPtr robot_id_;
  ::google::protobuf::internal::ArenaStringPtr fund_id_;
  ::google::protobuf::internal::ArenaStringPtr match_condition_;
  ::google::protobuf::internal::ArenaStringPtr account_name_;
  ::google::protobuf::uint32 data_date_;
  ::google::protobuf::uint32 data_time_;
  ::google::protobuf::int64 market_;
  ::google::protobuf::int64 bsflag_;
  ::google::protobuf::int32 order_price_type_;
  ::google::protobuf::int32 covered_flag_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqoption_5fprotocol_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OptionLoginReqt

// optional int32 funcid = 1 [default = 13000001];
inline bool OptionLoginReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptionLoginReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptionLoginReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptionLoginReqt::clear_funcid() {
  funcid_ = 13000001;
  clear_has_funcid();
}
inline ::google::protobuf::int32 OptionLoginReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionLoginReqt.funcid)
  return funcid_;
}
inline void OptionLoginReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionLoginReqt.funcid)
}

// -------------------------------------------------------------------

// OptionLoginResp

// optional int32 funcid = 1 [default = 13100001];
inline bool OptionLoginResp::has_funcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptionLoginResp::set_has_funcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OptionLoginResp::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OptionLoginResp::clear_funcid() {
  funcid_ = 13100001;
  clear_has_funcid();
}
inline ::google::protobuf::int32 OptionLoginResp::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionLoginResp.funcid)
  return funcid_;
}
inline void OptionLoginResp::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionLoginResp.funcid)
}

// required string fund_account = 2;
inline bool OptionLoginResp::has_fund_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptionLoginResp::set_has_fund_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptionLoginResp::clear_has_fund_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptionLoginResp::clear_fund_account() {
  fund_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fund_account();
}
inline const ::std::string& OptionLoginResp::fund_account() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionLoginResp.fund_account)
  return fund_account_.GetNoArena();
}
inline void OptionLoginResp::set_fund_account(const ::std::string& value) {
  set_has_fund_account();
  fund_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionLoginResp.fund_account)
}
#if LANG_CXX11
inline void OptionLoginResp::set_fund_account(::std::string&& value) {
  set_has_fund_account();
  fund_account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionLoginResp.fund_account)
}
#endif
inline void OptionLoginResp::set_fund_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fund_account();
  fund_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionLoginResp.fund_account)
}
inline void OptionLoginResp::set_fund_account(const char* value, size_t size) {
  set_has_fund_account();
  fund_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionLoginResp.fund_account)
}
inline ::std::string* OptionLoginResp::mutable_fund_account() {
  set_has_fund_account();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionLoginResp.fund_account)
  return fund_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionLoginResp::release_fund_account() {
  // @@protoc_insertion_point(field_release:autotrade.OptionLoginResp.fund_account)
  if (!has_fund_account()) {
    return NULL;
  }
  clear_has_fund_account();
  return fund_account_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionLoginResp::set_allocated_fund_account(::std::string* fund_account) {
  if (fund_account != NULL) {
    set_has_fund_account();
  } else {
    clear_has_fund_account();
  }
  fund_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fund_account);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionLoginResp.fund_account)
}

// -------------------------------------------------------------------

// OptionOrderReqt

// optional int32 funcid = 1 [default = 13001001];
inline bool OptionOrderReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void OptionOrderReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00080000u;
}
inline void OptionOrderReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void OptionOrderReqt::clear_funcid() {
  funcid_ = 13001001;
  clear_has_funcid();
}
inline ::google::protobuf::int32 OptionOrderReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrderReqt.funcid)
  return funcid_;
}
inline void OptionOrderReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionOrderReqt.funcid)
}

// required string code = 2;
inline bool OptionOrderReqt::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptionOrderReqt::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptionOrderReqt::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptionOrderReqt::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& OptionOrderReqt::code() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrderReqt.code)
  return code_.GetNoArena();
}
inline void OptionOrderReqt::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionOrderReqt.code)
}
#if LANG_CXX11
inline void OptionOrderReqt::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionOrderReqt.code)
}
#endif
inline void OptionOrderReqt::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionOrderReqt.code)
}
inline void OptionOrderReqt::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionOrderReqt.code)
}
inline ::std::string* OptionOrderReqt::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionOrderReqt.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionOrderReqt::release_code() {
  // @@protoc_insertion_point(field_release:autotrade.OptionOrderReqt.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionOrderReqt::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionOrderReqt.code)
}

// optional string name = 3;
inline bool OptionOrderReqt::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptionOrderReqt::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OptionOrderReqt::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OptionOrderReqt::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& OptionOrderReqt::name() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrderReqt.name)
  return name_.GetNoArena();
}
inline void OptionOrderReqt::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionOrderReqt.name)
}
#if LANG_CXX11
inline void OptionOrderReqt::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionOrderReqt.name)
}
#endif
inline void OptionOrderReqt::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionOrderReqt.name)
}
inline void OptionOrderReqt::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionOrderReqt.name)
}
inline ::std::string* OptionOrderReqt::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionOrderReqt.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionOrderReqt::release_name() {
  // @@protoc_insertion_point(field_release:autotrade.OptionOrderReqt.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionOrderReqt::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionOrderReqt.name)
}

// required int64 price = 4;
inline bool OptionOrderReqt::has_price() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OptionOrderReqt::set_has_price() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OptionOrderReqt::clear_has_price() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OptionOrderReqt::clear_price() {
  price_ = GOOGLE_LONGLONG(0);
  clear_has_price();
}
inline ::google::protobuf::int64 OptionOrderReqt::price() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrderReqt.price)
  return price_;
}
inline void OptionOrderReqt::set_price(::google::protobuf::int64 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionOrderReqt.price)
}

// required int64 qty = 5;
inline bool OptionOrderReqt::has_qty() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OptionOrderReqt::set_has_qty() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OptionOrderReqt::clear_has_qty() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OptionOrderReqt::clear_qty() {
  qty_ = GOOGLE_LONGLONG(0);
  clear_has_qty();
}
inline ::google::protobuf::int64 OptionOrderReqt::qty() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrderReqt.qty)
  return qty_;
}
inline void OptionOrderReqt::set_qty(::google::protobuf::int64 value) {
  set_has_qty();
  qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionOrderReqt.qty)
}

// required int64 bsflag = 6;
inline bool OptionOrderReqt::has_bsflag() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OptionOrderReqt::set_has_bsflag() {
  _has_bits_[0] |= 0x00001000u;
}
inline void OptionOrderReqt::clear_has_bsflag() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void OptionOrderReqt::clear_bsflag() {
  bsflag_ = GOOGLE_LONGLONG(0);
  clear_has_bsflag();
}
inline ::google::protobuf::int64 OptionOrderReqt::bsflag() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrderReqt.bsflag)
  return bsflag_;
}
inline void OptionOrderReqt::set_bsflag(::google::protobuf::int64 value) {
  set_has_bsflag();
  bsflag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionOrderReqt.bsflag)
}

// required int64 market = 7;
inline bool OptionOrderReqt::has_market() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void OptionOrderReqt::set_has_market() {
  _has_bits_[0] |= 0x00002000u;
}
inline void OptionOrderReqt::clear_has_market() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void OptionOrderReqt::clear_market() {
  market_ = GOOGLE_LONGLONG(0);
  clear_has_market();
}
inline ::google::protobuf::int64 OptionOrderReqt::market() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrderReqt.market)
  return market_;
}
inline void OptionOrderReqt::set_market(::google::protobuf::int64 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionOrderReqt.market)
}

// optional int32 kpcbj = 8;
inline bool OptionOrderReqt::has_kpcbj() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void OptionOrderReqt::set_has_kpcbj() {
  _has_bits_[0] |= 0x00004000u;
}
inline void OptionOrderReqt::clear_has_kpcbj() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void OptionOrderReqt::clear_kpcbj() {
  kpcbj_ = 0;
  clear_has_kpcbj();
}
inline ::google::protobuf::int32 OptionOrderReqt::kpcbj() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrderReqt.kpcbj)
  return kpcbj_;
}
inline void OptionOrderReqt::set_kpcbj(::google::protobuf::int32 value) {
  set_has_kpcbj();
  kpcbj_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionOrderReqt.kpcbj)
}

// optional int32 order_price_type = 9 [default = 0];
inline bool OptionOrderReqt::has_order_price_type() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void OptionOrderReqt::set_has_order_price_type() {
  _has_bits_[0] |= 0x00008000u;
}
inline void OptionOrderReqt::clear_has_order_price_type() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void OptionOrderReqt::clear_order_price_type() {
  order_price_type_ = 0;
  clear_has_order_price_type();
}
inline ::google::protobuf::int32 OptionOrderReqt::order_price_type() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrderReqt.order_price_type)
  return order_price_type_;
}
inline void OptionOrderReqt::set_order_price_type(::google::protobuf::int32 value) {
  set_has_order_price_type();
  order_price_type_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionOrderReqt.order_price_type)
}

// optional int32 covered_flag = 10 [default = 0];
inline bool OptionOrderReqt::has_covered_flag() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void OptionOrderReqt::set_has_covered_flag() {
  _has_bits_[0] |= 0x00040000u;
}
inline void OptionOrderReqt::clear_has_covered_flag() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void OptionOrderReqt::clear_covered_flag() {
  covered_flag_ = 0;
  clear_has_covered_flag();
}
inline ::google::protobuf::int32 OptionOrderReqt::covered_flag() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrderReqt.covered_flag)
  return covered_flag_;
}
inline void OptionOrderReqt::set_covered_flag(::google::protobuf::int32 value) {
  set_has_covered_flag();
  covered_flag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionOrderReqt.covered_flag)
}

// optional string match_condition = 11 [default = "GFD"];
inline bool OptionOrderReqt::has_match_condition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OptionOrderReqt::set_has_match_condition() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OptionOrderReqt::clear_has_match_condition() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OptionOrderReqt::clear_match_condition() {
  match_condition_.ClearToDefaultNoArena(&::autotrade::OptionOrderReqt::_i_give_permission_to_break_this_code_default_match_condition_.get());
  clear_has_match_condition();
}
inline const ::std::string& OptionOrderReqt::match_condition() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrderReqt.match_condition)
  return match_condition_.GetNoArena();
}
inline void OptionOrderReqt::set_match_condition(const ::std::string& value) {
  set_has_match_condition();
  match_condition_.SetNoArena(&::autotrade::OptionOrderReqt::_i_give_permission_to_break_this_code_default_match_condition_.get(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionOrderReqt.match_condition)
}
#if LANG_CXX11
inline void OptionOrderReqt::set_match_condition(::std::string&& value) {
  set_has_match_condition();
  match_condition_.SetNoArena(
    &::autotrade::OptionOrderReqt::_i_give_permission_to_break_this_code_default_match_condition_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionOrderReqt.match_condition)
}
#endif
inline void OptionOrderReqt::set_match_condition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_match_condition();
  match_condition_.SetNoArena(&::autotrade::OptionOrderReqt::_i_give_permission_to_break_this_code_default_match_condition_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionOrderReqt.match_condition)
}
inline void OptionOrderReqt::set_match_condition(const char* value, size_t size) {
  set_has_match_condition();
  match_condition_.SetNoArena(&::autotrade::OptionOrderReqt::_i_give_permission_to_break_this_code_default_match_condition_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionOrderReqt.match_condition)
}
inline ::std::string* OptionOrderReqt::mutable_match_condition() {
  set_has_match_condition();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionOrderReqt.match_condition)
  return match_condition_.MutableNoArena(&::autotrade::OptionOrderReqt::_i_give_permission_to_break_this_code_default_match_condition_.get());
}
inline ::std::string* OptionOrderReqt::release_match_condition() {
  // @@protoc_insertion_point(field_release:autotrade.OptionOrderReqt.match_condition)
  if (!has_match_condition()) {
    return NULL;
  }
  clear_has_match_condition();
  return match_condition_.ReleaseNonDefaultNoArena(&::autotrade::OptionOrderReqt::_i_give_permission_to_break_this_code_default_match_condition_.get());
}
inline void OptionOrderReqt::set_allocated_match_condition(::std::string* match_condition) {
  if (match_condition != NULL) {
    set_has_match_condition();
  } else {
    clear_has_match_condition();
  }
  match_condition_.SetAllocatedNoArena(&::autotrade::OptionOrderReqt::_i_give_permission_to_break_this_code_default_match_condition_.get(), match_condition);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionOrderReqt.match_condition)
}

// required string order_id = 12;
inline bool OptionOrderReqt::has_order_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OptionOrderReqt::set_has_order_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OptionOrderReqt::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OptionOrderReqt::clear_order_id() {
  order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_id();
}
inline const ::std::string& OptionOrderReqt::order_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrderReqt.order_id)
  return order_id_.GetNoArena();
}
inline void OptionOrderReqt::set_order_id(const ::std::string& value) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionOrderReqt.order_id)
}
#if LANG_CXX11
inline void OptionOrderReqt::set_order_id(::std::string&& value) {
  set_has_order_id();
  order_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionOrderReqt.order_id)
}
#endif
inline void OptionOrderReqt::set_order_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionOrderReqt.order_id)
}
inline void OptionOrderReqt::set_order_id(const char* value, size_t size) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionOrderReqt.order_id)
}
inline ::std::string* OptionOrderReqt::mutable_order_id() {
  set_has_order_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionOrderReqt.order_id)
  return order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionOrderReqt::release_order_id() {
  // @@protoc_insertion_point(field_release:autotrade.OptionOrderReqt.order_id)
  if (!has_order_id()) {
    return NULL;
  }
  clear_has_order_id();
  return order_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionOrderReqt::set_allocated_order_id(::std::string* order_id) {
  if (order_id != NULL) {
    set_has_order_id();
  } else {
    clear_has_order_id();
  }
  order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionOrderReqt.order_id)
}

// optional string request_id = 13;
inline bool OptionOrderReqt::has_request_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OptionOrderReqt::set_has_request_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OptionOrderReqt::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OptionOrderReqt::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& OptionOrderReqt::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrderReqt.request_id)
  return request_id_.GetNoArena();
}
inline void OptionOrderReqt::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionOrderReqt.request_id)
}
#if LANG_CXX11
inline void OptionOrderReqt::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionOrderReqt.request_id)
}
#endif
inline void OptionOrderReqt::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionOrderReqt.request_id)
}
inline void OptionOrderReqt::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionOrderReqt.request_id)
}
inline ::std::string* OptionOrderReqt::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionOrderReqt.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionOrderReqt::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.OptionOrderReqt.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionOrderReqt::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionOrderReqt.request_id)
}

// optional string order_type = 14;
inline bool OptionOrderReqt::has_order_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OptionOrderReqt::set_has_order_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OptionOrderReqt::clear_has_order_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OptionOrderReqt::clear_order_type() {
  order_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_type();
}
inline const ::std::string& OptionOrderReqt::order_type() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrderReqt.order_type)
  return order_type_.GetNoArena();
}
inline void OptionOrderReqt::set_order_type(const ::std::string& value) {
  set_has_order_type();
  order_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionOrderReqt.order_type)
}
#if LANG_CXX11
inline void OptionOrderReqt::set_order_type(::std::string&& value) {
  set_has_order_type();
  order_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionOrderReqt.order_type)
}
#endif
inline void OptionOrderReqt::set_order_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_type();
  order_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionOrderReqt.order_type)
}
inline void OptionOrderReqt::set_order_type(const char* value, size_t size) {
  set_has_order_type();
  order_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionOrderReqt.order_type)
}
inline ::std::string* OptionOrderReqt::mutable_order_type() {
  set_has_order_type();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionOrderReqt.order_type)
  return order_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionOrderReqt::release_order_type() {
  // @@protoc_insertion_point(field_release:autotrade.OptionOrderReqt.order_type)
  if (!has_order_type()) {
    return NULL;
  }
  clear_has_order_type();
  return order_type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionOrderReqt::set_allocated_order_type(::std::string* order_type) {
  if (order_type != NULL) {
    set_has_order_type();
  } else {
    clear_has_order_type();
  }
  order_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_type);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionOrderReqt.order_type)
}

// optional string parent_id = 15;
inline bool OptionOrderReqt::has_parent_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OptionOrderReqt::set_has_parent_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OptionOrderReqt::clear_has_parent_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OptionOrderReqt::clear_parent_id() {
  parent_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parent_id();
}
inline const ::std::string& OptionOrderReqt::parent_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrderReqt.parent_id)
  return parent_id_.GetNoArena();
}
inline void OptionOrderReqt::set_parent_id(const ::std::string& value) {
  set_has_parent_id();
  parent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionOrderReqt.parent_id)
}
#if LANG_CXX11
inline void OptionOrderReqt::set_parent_id(::std::string&& value) {
  set_has_parent_id();
  parent_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionOrderReqt.parent_id)
}
#endif
inline void OptionOrderReqt::set_parent_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_parent_id();
  parent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionOrderReqt.parent_id)
}
inline void OptionOrderReqt::set_parent_id(const char* value, size_t size) {
  set_has_parent_id();
  parent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionOrderReqt.parent_id)
}
inline ::std::string* OptionOrderReqt::mutable_parent_id() {
  set_has_parent_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionOrderReqt.parent_id)
  return parent_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionOrderReqt::release_parent_id() {
  // @@protoc_insertion_point(field_release:autotrade.OptionOrderReqt.parent_id)
  if (!has_parent_id()) {
    return NULL;
  }
  clear_has_parent_id();
  return parent_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionOrderReqt::set_allocated_parent_id(::std::string* parent_id) {
  if (parent_id != NULL) {
    set_has_parent_id();
  } else {
    clear_has_parent_id();
  }
  parent_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionOrderReqt.parent_id)
}

// optional string parent_type = 16;
inline bool OptionOrderReqt::has_parent_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OptionOrderReqt::set_has_parent_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OptionOrderReqt::clear_has_parent_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OptionOrderReqt::clear_parent_type() {
  parent_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parent_type();
}
inline const ::std::string& OptionOrderReqt::parent_type() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrderReqt.parent_type)
  return parent_type_.GetNoArena();
}
inline void OptionOrderReqt::set_parent_type(const ::std::string& value) {
  set_has_parent_type();
  parent_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionOrderReqt.parent_type)
}
#if LANG_CXX11
inline void OptionOrderReqt::set_parent_type(::std::string&& value) {
  set_has_parent_type();
  parent_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionOrderReqt.parent_type)
}
#endif
inline void OptionOrderReqt::set_parent_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_parent_type();
  parent_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionOrderReqt.parent_type)
}
inline void OptionOrderReqt::set_parent_type(const char* value, size_t size) {
  set_has_parent_type();
  parent_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionOrderReqt.parent_type)
}
inline ::std::string* OptionOrderReqt::mutable_parent_type() {
  set_has_parent_type();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionOrderReqt.parent_type)
  return parent_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionOrderReqt::release_parent_type() {
  // @@protoc_insertion_point(field_release:autotrade.OptionOrderReqt.parent_type)
  if (!has_parent_type()) {
    return NULL;
  }
  clear_has_parent_type();
  return parent_type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionOrderReqt::set_allocated_parent_type(::std::string* parent_type) {
  if (parent_type != NULL) {
    set_has_parent_type();
  } else {
    clear_has_parent_type();
  }
  parent_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent_type);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionOrderReqt.parent_type)
}

// optional string robot_id = 17;
inline bool OptionOrderReqt::has_robot_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OptionOrderReqt::set_has_robot_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OptionOrderReqt::clear_has_robot_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OptionOrderReqt::clear_robot_id() {
  robot_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_robot_id();
}
inline const ::std::string& OptionOrderReqt::robot_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrderReqt.robot_id)
  return robot_id_.GetNoArena();
}
inline void OptionOrderReqt::set_robot_id(const ::std::string& value) {
  set_has_robot_id();
  robot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionOrderReqt.robot_id)
}
#if LANG_CXX11
inline void OptionOrderReqt::set_robot_id(::std::string&& value) {
  set_has_robot_id();
  robot_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionOrderReqt.robot_id)
}
#endif
inline void OptionOrderReqt::set_robot_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_robot_id();
  robot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionOrderReqt.robot_id)
}
inline void OptionOrderReqt::set_robot_id(const char* value, size_t size) {
  set_has_robot_id();
  robot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionOrderReqt.robot_id)
}
inline ::std::string* OptionOrderReqt::mutable_robot_id() {
  set_has_robot_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionOrderReqt.robot_id)
  return robot_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionOrderReqt::release_robot_id() {
  // @@protoc_insertion_point(field_release:autotrade.OptionOrderReqt.robot_id)
  if (!has_robot_id()) {
    return NULL;
  }
  clear_has_robot_id();
  return robot_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionOrderReqt::set_allocated_robot_id(::std::string* robot_id) {
  if (robot_id != NULL) {
    set_has_robot_id();
  } else {
    clear_has_robot_id();
  }
  robot_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), robot_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionOrderReqt.robot_id)
}

// optional string trader_id = 18;
inline bool OptionOrderReqt::has_trader_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OptionOrderReqt::set_has_trader_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OptionOrderReqt::clear_has_trader_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OptionOrderReqt::clear_trader_id() {
  trader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trader_id();
}
inline const ::std::string& OptionOrderReqt::trader_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrderReqt.trader_id)
  return trader_id_.GetNoArena();
}
inline void OptionOrderReqt::set_trader_id(const ::std::string& value) {
  set_has_trader_id();
  trader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionOrderReqt.trader_id)
}
#if LANG_CXX11
inline void OptionOrderReqt::set_trader_id(::std::string&& value) {
  set_has_trader_id();
  trader_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionOrderReqt.trader_id)
}
#endif
inline void OptionOrderReqt::set_trader_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trader_id();
  trader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionOrderReqt.trader_id)
}
inline void OptionOrderReqt::set_trader_id(const char* value, size_t size) {
  set_has_trader_id();
  trader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionOrderReqt.trader_id)
}
inline ::std::string* OptionOrderReqt::mutable_trader_id() {
  set_has_trader_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionOrderReqt.trader_id)
  return trader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionOrderReqt::release_trader_id() {
  // @@protoc_insertion_point(field_release:autotrade.OptionOrderReqt.trader_id)
  if (!has_trader_id()) {
    return NULL;
  }
  clear_has_trader_id();
  return trader_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionOrderReqt::set_allocated_trader_id(::std::string* trader_id) {
  if (trader_id != NULL) {
    set_has_trader_id();
  } else {
    clear_has_trader_id();
  }
  trader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trader_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionOrderReqt.trader_id)
}

// optional int64 request_time = 19 [default = 0];
inline bool OptionOrderReqt::has_request_time() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void OptionOrderReqt::set_has_request_time() {
  _has_bits_[0] |= 0x00010000u;
}
inline void OptionOrderReqt::clear_has_request_time() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void OptionOrderReqt::clear_request_time() {
  request_time_ = GOOGLE_LONGLONG(0);
  clear_has_request_time();
}
inline ::google::protobuf::int64 OptionOrderReqt::request_time() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrderReqt.request_time)
  return request_time_;
}
inline void OptionOrderReqt::set_request_time(::google::protobuf::int64 value) {
  set_has_request_time();
  request_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionOrderReqt.request_time)
}

// optional int64 active_interval = 20 [default = 1000];
inline bool OptionOrderReqt::has_active_interval() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void OptionOrderReqt::set_has_active_interval() {
  _has_bits_[0] |= 0x00100000u;
}
inline void OptionOrderReqt::clear_has_active_interval() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void OptionOrderReqt::clear_active_interval() {
  active_interval_ = GOOGLE_LONGLONG(1000);
  clear_has_active_interval();
}
inline ::google::protobuf::int64 OptionOrderReqt::active_interval() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrderReqt.active_interval)
  return active_interval_;
}
inline void OptionOrderReqt::set_active_interval(::google::protobuf::int64 value) {
  set_has_active_interval();
  active_interval_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionOrderReqt.active_interval)
}

// optional int64 request_date = 21 [default = 0];
inline bool OptionOrderReqt::has_request_date() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void OptionOrderReqt::set_has_request_date() {
  _has_bits_[0] |= 0x00020000u;
}
inline void OptionOrderReqt::clear_has_request_date() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void OptionOrderReqt::clear_request_date() {
  request_date_ = GOOGLE_LONGLONG(0);
  clear_has_request_date();
}
inline ::google::protobuf::int64 OptionOrderReqt::request_date() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrderReqt.request_date)
  return request_date_;
}
inline void OptionOrderReqt::set_request_date(::google::protobuf::int64 value) {
  set_has_request_date();
  request_date_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionOrderReqt.request_date)
}

// -------------------------------------------------------------------

// OptionOrderResp

// optional int32 funcid = 1 [default = 13101001];
inline bool OptionOrderResp::has_funcid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OptionOrderResp::set_has_funcid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OptionOrderResp::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OptionOrderResp::clear_funcid() {
  funcid_ = 13101001;
  clear_has_funcid();
}
inline ::google::protobuf::int32 OptionOrderResp::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrderResp.funcid)
  return funcid_;
}
inline void OptionOrderResp::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionOrderResp.funcid)
}

// required string order_group = 2;
inline bool OptionOrderResp::has_order_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptionOrderResp::set_has_order_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptionOrderResp::clear_has_order_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptionOrderResp::clear_order_group() {
  order_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_group();
}
inline const ::std::string& OptionOrderResp::order_group() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrderResp.order_group)
  return order_group_.GetNoArena();
}
inline void OptionOrderResp::set_order_group(const ::std::string& value) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionOrderResp.order_group)
}
#if LANG_CXX11
inline void OptionOrderResp::set_order_group(::std::string&& value) {
  set_has_order_group();
  order_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionOrderResp.order_group)
}
#endif
inline void OptionOrderResp::set_order_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionOrderResp.order_group)
}
inline void OptionOrderResp::set_order_group(const char* value, size_t size) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionOrderResp.order_group)
}
inline ::std::string* OptionOrderResp::mutable_order_group() {
  set_has_order_group();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionOrderResp.order_group)
  return order_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionOrderResp::release_order_group() {
  // @@protoc_insertion_point(field_release:autotrade.OptionOrderResp.order_group)
  if (!has_order_group()) {
    return NULL;
  }
  clear_has_order_group();
  return order_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionOrderResp::set_allocated_order_group(::std::string* order_group) {
  if (order_group != NULL) {
    set_has_order_group();
  } else {
    clear_has_order_group();
  }
  order_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_group);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionOrderResp.order_group)
}

// repeated string order_nos = 3;
inline int OptionOrderResp::order_nos_size() const {
  return order_nos_.size();
}
inline void OptionOrderResp::clear_order_nos() {
  order_nos_.Clear();
}
inline const ::std::string& OptionOrderResp::order_nos(int index) const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrderResp.order_nos)
  return order_nos_.Get(index);
}
inline ::std::string* OptionOrderResp::mutable_order_nos(int index) {
  // @@protoc_insertion_point(field_mutable:autotrade.OptionOrderResp.order_nos)
  return order_nos_.Mutable(index);
}
inline void OptionOrderResp::set_order_nos(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:autotrade.OptionOrderResp.order_nos)
  order_nos_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void OptionOrderResp::set_order_nos(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:autotrade.OptionOrderResp.order_nos)
  order_nos_.Mutable(index)->assign(std::move(value));
}
#endif
inline void OptionOrderResp::set_order_nos(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  order_nos_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:autotrade.OptionOrderResp.order_nos)
}
inline void OptionOrderResp::set_order_nos(int index, const char* value, size_t size) {
  order_nos_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionOrderResp.order_nos)
}
inline ::std::string* OptionOrderResp::add_order_nos() {
  // @@protoc_insertion_point(field_add_mutable:autotrade.OptionOrderResp.order_nos)
  return order_nos_.Add();
}
inline void OptionOrderResp::add_order_nos(const ::std::string& value) {
  order_nos_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:autotrade.OptionOrderResp.order_nos)
}
#if LANG_CXX11
inline void OptionOrderResp::add_order_nos(::std::string&& value) {
  order_nos_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:autotrade.OptionOrderResp.order_nos)
}
#endif
inline void OptionOrderResp::add_order_nos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  order_nos_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:autotrade.OptionOrderResp.order_nos)
}
inline void OptionOrderResp::add_order_nos(const char* value, size_t size) {
  order_nos_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:autotrade.OptionOrderResp.order_nos)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
OptionOrderResp::order_nos() const {
  // @@protoc_insertion_point(field_list:autotrade.OptionOrderResp.order_nos)
  return order_nos_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
OptionOrderResp::mutable_order_nos() {
  // @@protoc_insertion_point(field_mutable_list:autotrade.OptionOrderResp.order_nos)
  return &order_nos_;
}

// optional string request_id = 4;
inline bool OptionOrderResp::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptionOrderResp::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OptionOrderResp::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OptionOrderResp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& OptionOrderResp::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrderResp.request_id)
  return request_id_.GetNoArena();
}
inline void OptionOrderResp::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionOrderResp.request_id)
}
#if LANG_CXX11
inline void OptionOrderResp::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionOrderResp.request_id)
}
#endif
inline void OptionOrderResp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionOrderResp.request_id)
}
inline void OptionOrderResp::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionOrderResp.request_id)
}
inline ::std::string* OptionOrderResp::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionOrderResp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionOrderResp::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.OptionOrderResp.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionOrderResp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionOrderResp.request_id)
}

// required string order_id = 5;
inline bool OptionOrderResp::has_order_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OptionOrderResp::set_has_order_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OptionOrderResp::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OptionOrderResp::clear_order_id() {
  order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_id();
}
inline const ::std::string& OptionOrderResp::order_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrderResp.order_id)
  return order_id_.GetNoArena();
}
inline void OptionOrderResp::set_order_id(const ::std::string& value) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionOrderResp.order_id)
}
#if LANG_CXX11
inline void OptionOrderResp::set_order_id(::std::string&& value) {
  set_has_order_id();
  order_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionOrderResp.order_id)
}
#endif
inline void OptionOrderResp::set_order_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionOrderResp.order_id)
}
inline void OptionOrderResp::set_order_id(const char* value, size_t size) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionOrderResp.order_id)
}
inline ::std::string* OptionOrderResp::mutable_order_id() {
  set_has_order_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionOrderResp.order_id)
  return order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionOrderResp::release_order_id() {
  // @@protoc_insertion_point(field_release:autotrade.OptionOrderResp.order_id)
  if (!has_order_id()) {
    return NULL;
  }
  clear_has_order_id();
  return order_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionOrderResp::set_allocated_order_id(::std::string* order_id) {
  if (order_id != NULL) {
    set_has_order_id();
  } else {
    clear_has_order_id();
  }
  order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionOrderResp.order_id)
}

// -------------------------------------------------------------------

// OptionOrdersReqt_SingleOrder

// required string code = 1;
inline bool OptionOrdersReqt_SingleOrder::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptionOrdersReqt_SingleOrder::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptionOrdersReqt_SingleOrder::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptionOrdersReqt_SingleOrder::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& OptionOrdersReqt_SingleOrder::code() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersReqt.SingleOrder.code)
  return code_.GetNoArena();
}
inline void OptionOrdersReqt_SingleOrder::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersReqt.SingleOrder.code)
}
#if LANG_CXX11
inline void OptionOrdersReqt_SingleOrder::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionOrdersReqt.SingleOrder.code)
}
#endif
inline void OptionOrdersReqt_SingleOrder::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionOrdersReqt.SingleOrder.code)
}
inline void OptionOrdersReqt_SingleOrder::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionOrdersReqt.SingleOrder.code)
}
inline ::std::string* OptionOrdersReqt_SingleOrder::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionOrdersReqt.SingleOrder.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionOrdersReqt_SingleOrder::release_code() {
  // @@protoc_insertion_point(field_release:autotrade.OptionOrdersReqt.SingleOrder.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionOrdersReqt_SingleOrder::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionOrdersReqt.SingleOrder.code)
}

// required int64 price = 2;
inline bool OptionOrdersReqt_SingleOrder::has_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptionOrdersReqt_SingleOrder::set_has_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OptionOrdersReqt_SingleOrder::clear_has_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OptionOrdersReqt_SingleOrder::clear_price() {
  price_ = GOOGLE_LONGLONG(0);
  clear_has_price();
}
inline ::google::protobuf::int64 OptionOrdersReqt_SingleOrder::price() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersReqt.SingleOrder.price)
  return price_;
}
inline void OptionOrdersReqt_SingleOrder::set_price(::google::protobuf::int64 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersReqt.SingleOrder.price)
}

// required int64 qty = 3;
inline bool OptionOrdersReqt_SingleOrder::has_qty() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OptionOrdersReqt_SingleOrder::set_has_qty() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OptionOrdersReqt_SingleOrder::clear_has_qty() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OptionOrdersReqt_SingleOrder::clear_qty() {
  qty_ = GOOGLE_LONGLONG(0);
  clear_has_qty();
}
inline ::google::protobuf::int64 OptionOrdersReqt_SingleOrder::qty() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersReqt.SingleOrder.qty)
  return qty_;
}
inline void OptionOrdersReqt_SingleOrder::set_qty(::google::protobuf::int64 value) {
  set_has_qty();
  qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersReqt.SingleOrder.qty)
}

// -------------------------------------------------------------------

// OptionOrdersReqt

// optional int32 funcid = 1 [default = 13001002];
inline bool OptionOrdersReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OptionOrdersReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OptionOrdersReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OptionOrdersReqt::clear_funcid() {
  funcid_ = 13001002;
  clear_has_funcid();
}
inline ::google::protobuf::int32 OptionOrdersReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersReqt.funcid)
  return funcid_;
}
inline void OptionOrdersReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersReqt.funcid)
}

// repeated .autotrade.OptionOrdersReqt.SingleOrder order_list = 2;
inline int OptionOrdersReqt::order_list_size() const {
  return order_list_.size();
}
inline void OptionOrdersReqt::clear_order_list() {
  order_list_.Clear();
}
inline ::autotrade::OptionOrdersReqt_SingleOrder* OptionOrdersReqt::mutable_order_list(int index) {
  // @@protoc_insertion_point(field_mutable:autotrade.OptionOrdersReqt.order_list)
  return order_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::autotrade::OptionOrdersReqt_SingleOrder >*
OptionOrdersReqt::mutable_order_list() {
  // @@protoc_insertion_point(field_mutable_list:autotrade.OptionOrdersReqt.order_list)
  return &order_list_;
}
inline const ::autotrade::OptionOrdersReqt_SingleOrder& OptionOrdersReqt::order_list(int index) const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersReqt.order_list)
  return order_list_.Get(index);
}
inline ::autotrade::OptionOrdersReqt_SingleOrder* OptionOrdersReqt::add_order_list() {
  // @@protoc_insertion_point(field_add:autotrade.OptionOrdersReqt.order_list)
  return order_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::autotrade::OptionOrdersReqt_SingleOrder >&
OptionOrdersReqt::order_list() const {
  // @@protoc_insertion_point(field_list:autotrade.OptionOrdersReqt.order_list)
  return order_list_;
}

// required int64 bsflag = 3;
inline bool OptionOrdersReqt::has_bsflag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OptionOrdersReqt::set_has_bsflag() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OptionOrdersReqt::clear_has_bsflag() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OptionOrdersReqt::clear_bsflag() {
  bsflag_ = GOOGLE_LONGLONG(0);
  clear_has_bsflag();
}
inline ::google::protobuf::int64 OptionOrdersReqt::bsflag() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersReqt.bsflag)
  return bsflag_;
}
inline void OptionOrdersReqt::set_bsflag(::google::protobuf::int64 value) {
  set_has_bsflag();
  bsflag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersReqt.bsflag)
}

// required int64 market = 4;
inline bool OptionOrdersReqt::has_market() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OptionOrdersReqt::set_has_market() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OptionOrdersReqt::clear_has_market() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OptionOrdersReqt::clear_market() {
  market_ = GOOGLE_LONGLONG(0);
  clear_has_market();
}
inline ::google::protobuf::int64 OptionOrdersReqt::market() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersReqt.market)
  return market_;
}
inline void OptionOrdersReqt::set_market(::google::protobuf::int64 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersReqt.market)
}

// required string order_id = 5;
inline bool OptionOrdersReqt::has_order_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptionOrdersReqt::set_has_order_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptionOrdersReqt::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptionOrdersReqt::clear_order_id() {
  order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_id();
}
inline const ::std::string& OptionOrdersReqt::order_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersReqt.order_id)
  return order_id_.GetNoArena();
}
inline void OptionOrdersReqt::set_order_id(const ::std::string& value) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersReqt.order_id)
}
#if LANG_CXX11
inline void OptionOrdersReqt::set_order_id(::std::string&& value) {
  set_has_order_id();
  order_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionOrdersReqt.order_id)
}
#endif
inline void OptionOrdersReqt::set_order_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionOrdersReqt.order_id)
}
inline void OptionOrdersReqt::set_order_id(const char* value, size_t size) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionOrdersReqt.order_id)
}
inline ::std::string* OptionOrdersReqt::mutable_order_id() {
  set_has_order_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionOrdersReqt.order_id)
  return order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionOrdersReqt::release_order_id() {
  // @@protoc_insertion_point(field_release:autotrade.OptionOrdersReqt.order_id)
  if (!has_order_id()) {
    return NULL;
  }
  clear_has_order_id();
  return order_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionOrdersReqt::set_allocated_order_id(::std::string* order_id) {
  if (order_id != NULL) {
    set_has_order_id();
  } else {
    clear_has_order_id();
  }
  order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionOrdersReqt.order_id)
}

// optional string request_id = 6;
inline bool OptionOrdersReqt::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptionOrdersReqt::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OptionOrdersReqt::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OptionOrdersReqt::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& OptionOrdersReqt::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersReqt.request_id)
  return request_id_.GetNoArena();
}
inline void OptionOrdersReqt::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersReqt.request_id)
}
#if LANG_CXX11
inline void OptionOrdersReqt::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionOrdersReqt.request_id)
}
#endif
inline void OptionOrdersReqt::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionOrdersReqt.request_id)
}
inline void OptionOrdersReqt::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionOrdersReqt.request_id)
}
inline ::std::string* OptionOrdersReqt::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionOrdersReqt.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionOrdersReqt::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.OptionOrdersReqt.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionOrdersReqt::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionOrdersReqt.request_id)
}

// optional string order_type = 7;
inline bool OptionOrdersReqt::has_order_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OptionOrdersReqt::set_has_order_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OptionOrdersReqt::clear_has_order_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OptionOrdersReqt::clear_order_type() {
  order_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_type();
}
inline const ::std::string& OptionOrdersReqt::order_type() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersReqt.order_type)
  return order_type_.GetNoArena();
}
inline void OptionOrdersReqt::set_order_type(const ::std::string& value) {
  set_has_order_type();
  order_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersReqt.order_type)
}
#if LANG_CXX11
inline void OptionOrdersReqt::set_order_type(::std::string&& value) {
  set_has_order_type();
  order_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionOrdersReqt.order_type)
}
#endif
inline void OptionOrdersReqt::set_order_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_type();
  order_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionOrdersReqt.order_type)
}
inline void OptionOrdersReqt::set_order_type(const char* value, size_t size) {
  set_has_order_type();
  order_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionOrdersReqt.order_type)
}
inline ::std::string* OptionOrdersReqt::mutable_order_type() {
  set_has_order_type();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionOrdersReqt.order_type)
  return order_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionOrdersReqt::release_order_type() {
  // @@protoc_insertion_point(field_release:autotrade.OptionOrdersReqt.order_type)
  if (!has_order_type()) {
    return NULL;
  }
  clear_has_order_type();
  return order_type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionOrdersReqt::set_allocated_order_type(::std::string* order_type) {
  if (order_type != NULL) {
    set_has_order_type();
  } else {
    clear_has_order_type();
  }
  order_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_type);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionOrdersReqt.order_type)
}

// optional string parent_id = 8;
inline bool OptionOrdersReqt::has_parent_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OptionOrdersReqt::set_has_parent_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OptionOrdersReqt::clear_has_parent_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OptionOrdersReqt::clear_parent_id() {
  parent_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parent_id();
}
inline const ::std::string& OptionOrdersReqt::parent_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersReqt.parent_id)
  return parent_id_.GetNoArena();
}
inline void OptionOrdersReqt::set_parent_id(const ::std::string& value) {
  set_has_parent_id();
  parent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersReqt.parent_id)
}
#if LANG_CXX11
inline void OptionOrdersReqt::set_parent_id(::std::string&& value) {
  set_has_parent_id();
  parent_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionOrdersReqt.parent_id)
}
#endif
inline void OptionOrdersReqt::set_parent_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_parent_id();
  parent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionOrdersReqt.parent_id)
}
inline void OptionOrdersReqt::set_parent_id(const char* value, size_t size) {
  set_has_parent_id();
  parent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionOrdersReqt.parent_id)
}
inline ::std::string* OptionOrdersReqt::mutable_parent_id() {
  set_has_parent_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionOrdersReqt.parent_id)
  return parent_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionOrdersReqt::release_parent_id() {
  // @@protoc_insertion_point(field_release:autotrade.OptionOrdersReqt.parent_id)
  if (!has_parent_id()) {
    return NULL;
  }
  clear_has_parent_id();
  return parent_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionOrdersReqt::set_allocated_parent_id(::std::string* parent_id) {
  if (parent_id != NULL) {
    set_has_parent_id();
  } else {
    clear_has_parent_id();
  }
  parent_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionOrdersReqt.parent_id)
}

// optional string parent_type = 9;
inline bool OptionOrdersReqt::has_parent_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OptionOrdersReqt::set_has_parent_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OptionOrdersReqt::clear_has_parent_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OptionOrdersReqt::clear_parent_type() {
  parent_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parent_type();
}
inline const ::std::string& OptionOrdersReqt::parent_type() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersReqt.parent_type)
  return parent_type_.GetNoArena();
}
inline void OptionOrdersReqt::set_parent_type(const ::std::string& value) {
  set_has_parent_type();
  parent_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersReqt.parent_type)
}
#if LANG_CXX11
inline void OptionOrdersReqt::set_parent_type(::std::string&& value) {
  set_has_parent_type();
  parent_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionOrdersReqt.parent_type)
}
#endif
inline void OptionOrdersReqt::set_parent_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_parent_type();
  parent_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionOrdersReqt.parent_type)
}
inline void OptionOrdersReqt::set_parent_type(const char* value, size_t size) {
  set_has_parent_type();
  parent_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionOrdersReqt.parent_type)
}
inline ::std::string* OptionOrdersReqt::mutable_parent_type() {
  set_has_parent_type();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionOrdersReqt.parent_type)
  return parent_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionOrdersReqt::release_parent_type() {
  // @@protoc_insertion_point(field_release:autotrade.OptionOrdersReqt.parent_type)
  if (!has_parent_type()) {
    return NULL;
  }
  clear_has_parent_type();
  return parent_type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionOrdersReqt::set_allocated_parent_type(::std::string* parent_type) {
  if (parent_type != NULL) {
    set_has_parent_type();
  } else {
    clear_has_parent_type();
  }
  parent_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent_type);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionOrdersReqt.parent_type)
}

// optional string robot_id = 10;
inline bool OptionOrdersReqt::has_robot_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OptionOrdersReqt::set_has_robot_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OptionOrdersReqt::clear_has_robot_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OptionOrdersReqt::clear_robot_id() {
  robot_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_robot_id();
}
inline const ::std::string& OptionOrdersReqt::robot_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersReqt.robot_id)
  return robot_id_.GetNoArena();
}
inline void OptionOrdersReqt::set_robot_id(const ::std::string& value) {
  set_has_robot_id();
  robot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersReqt.robot_id)
}
#if LANG_CXX11
inline void OptionOrdersReqt::set_robot_id(::std::string&& value) {
  set_has_robot_id();
  robot_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionOrdersReqt.robot_id)
}
#endif
inline void OptionOrdersReqt::set_robot_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_robot_id();
  robot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionOrdersReqt.robot_id)
}
inline void OptionOrdersReqt::set_robot_id(const char* value, size_t size) {
  set_has_robot_id();
  robot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionOrdersReqt.robot_id)
}
inline ::std::string* OptionOrdersReqt::mutable_robot_id() {
  set_has_robot_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionOrdersReqt.robot_id)
  return robot_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionOrdersReqt::release_robot_id() {
  // @@protoc_insertion_point(field_release:autotrade.OptionOrdersReqt.robot_id)
  if (!has_robot_id()) {
    return NULL;
  }
  clear_has_robot_id();
  return robot_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionOrdersReqt::set_allocated_robot_id(::std::string* robot_id) {
  if (robot_id != NULL) {
    set_has_robot_id();
  } else {
    clear_has_robot_id();
  }
  robot_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), robot_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionOrdersReqt.robot_id)
}

// optional string trader_id = 11;
inline bool OptionOrdersReqt::has_trader_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OptionOrdersReqt::set_has_trader_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OptionOrdersReqt::clear_has_trader_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OptionOrdersReqt::clear_trader_id() {
  trader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trader_id();
}
inline const ::std::string& OptionOrdersReqt::trader_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersReqt.trader_id)
  return trader_id_.GetNoArena();
}
inline void OptionOrdersReqt::set_trader_id(const ::std::string& value) {
  set_has_trader_id();
  trader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersReqt.trader_id)
}
#if LANG_CXX11
inline void OptionOrdersReqt::set_trader_id(::std::string&& value) {
  set_has_trader_id();
  trader_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionOrdersReqt.trader_id)
}
#endif
inline void OptionOrdersReqt::set_trader_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trader_id();
  trader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionOrdersReqt.trader_id)
}
inline void OptionOrdersReqt::set_trader_id(const char* value, size_t size) {
  set_has_trader_id();
  trader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionOrdersReqt.trader_id)
}
inline ::std::string* OptionOrdersReqt::mutable_trader_id() {
  set_has_trader_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionOrdersReqt.trader_id)
  return trader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionOrdersReqt::release_trader_id() {
  // @@protoc_insertion_point(field_release:autotrade.OptionOrdersReqt.trader_id)
  if (!has_trader_id()) {
    return NULL;
  }
  clear_has_trader_id();
  return trader_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionOrdersReqt::set_allocated_trader_id(::std::string* trader_id) {
  if (trader_id != NULL) {
    set_has_trader_id();
  } else {
    clear_has_trader_id();
  }
  trader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trader_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionOrdersReqt.trader_id)
}

// optional int64 request_time = 12 [default = 0];
inline bool OptionOrdersReqt::has_request_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OptionOrdersReqt::set_has_request_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OptionOrdersReqt::clear_has_request_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OptionOrdersReqt::clear_request_time() {
  request_time_ = GOOGLE_LONGLONG(0);
  clear_has_request_time();
}
inline ::google::protobuf::int64 OptionOrdersReqt::request_time() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersReqt.request_time)
  return request_time_;
}
inline void OptionOrdersReqt::set_request_time(::google::protobuf::int64 value) {
  set_has_request_time();
  request_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersReqt.request_time)
}

// optional int64 active_interval = 13 [default = 1000];
inline bool OptionOrdersReqt::has_active_interval() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OptionOrdersReqt::set_has_active_interval() {
  _has_bits_[0] |= 0x00001000u;
}
inline void OptionOrdersReqt::clear_has_active_interval() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void OptionOrdersReqt::clear_active_interval() {
  active_interval_ = GOOGLE_LONGLONG(1000);
  clear_has_active_interval();
}
inline ::google::protobuf::int64 OptionOrdersReqt::active_interval() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersReqt.active_interval)
  return active_interval_;
}
inline void OptionOrdersReqt::set_active_interval(::google::protobuf::int64 value) {
  set_has_active_interval();
  active_interval_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersReqt.active_interval)
}

// optional int64 request_date = 14 [default = 0];
inline bool OptionOrdersReqt::has_request_date() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OptionOrdersReqt::set_has_request_date() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OptionOrdersReqt::clear_has_request_date() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OptionOrdersReqt::clear_request_date() {
  request_date_ = GOOGLE_LONGLONG(0);
  clear_has_request_date();
}
inline ::google::protobuf::int64 OptionOrdersReqt::request_date() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersReqt.request_date)
  return request_date_;
}
inline void OptionOrdersReqt::set_request_date(::google::protobuf::int64 value) {
  set_has_request_date();
  request_date_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersReqt.request_date)
}

// -------------------------------------------------------------------

// OptionOrdersResp_OrderResult

// required int32 ret_code = 1;
inline bool OptionOrdersResp_OrderResult::has_ret_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OptionOrdersResp_OrderResult::set_has_ret_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OptionOrdersResp_OrderResult::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OptionOrdersResp_OrderResult::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 OptionOrdersResp_OrderResult::ret_code() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersResp.OrderResult.ret_code)
  return ret_code_;
}
inline void OptionOrdersResp_OrderResult::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersResp.OrderResult.ret_code)
}

// optional string ret_msg = 2;
inline bool OptionOrdersResp_OrderResult::has_ret_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptionOrdersResp_OrderResult::set_has_ret_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptionOrdersResp_OrderResult::clear_has_ret_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptionOrdersResp_OrderResult::clear_ret_msg() {
  ret_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ret_msg();
}
inline const ::std::string& OptionOrdersResp_OrderResult::ret_msg() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersResp.OrderResult.ret_msg)
  return ret_msg_.GetNoArena();
}
inline void OptionOrdersResp_OrderResult::set_ret_msg(const ::std::string& value) {
  set_has_ret_msg();
  ret_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersResp.OrderResult.ret_msg)
}
#if LANG_CXX11
inline void OptionOrdersResp_OrderResult::set_ret_msg(::std::string&& value) {
  set_has_ret_msg();
  ret_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionOrdersResp.OrderResult.ret_msg)
}
#endif
inline void OptionOrdersResp_OrderResult::set_ret_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ret_msg();
  ret_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionOrdersResp.OrderResult.ret_msg)
}
inline void OptionOrdersResp_OrderResult::set_ret_msg(const char* value, size_t size) {
  set_has_ret_msg();
  ret_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionOrdersResp.OrderResult.ret_msg)
}
inline ::std::string* OptionOrdersResp_OrderResult::mutable_ret_msg() {
  set_has_ret_msg();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionOrdersResp.OrderResult.ret_msg)
  return ret_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionOrdersResp_OrderResult::release_ret_msg() {
  // @@protoc_insertion_point(field_release:autotrade.OptionOrdersResp.OrderResult.ret_msg)
  if (!has_ret_msg()) {
    return NULL;
  }
  clear_has_ret_msg();
  return ret_msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionOrdersResp_OrderResult::set_allocated_ret_msg(::std::string* ret_msg) {
  if (ret_msg != NULL) {
    set_has_ret_msg();
  } else {
    clear_has_ret_msg();
  }
  ret_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ret_msg);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionOrdersResp.OrderResult.ret_msg)
}

// optional string orderno = 3;
inline bool OptionOrdersResp_OrderResult::has_orderno() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptionOrdersResp_OrderResult::set_has_orderno() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OptionOrdersResp_OrderResult::clear_has_orderno() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OptionOrdersResp_OrderResult::clear_orderno() {
  orderno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_orderno();
}
inline const ::std::string& OptionOrdersResp_OrderResult::orderno() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersResp.OrderResult.orderno)
  return orderno_.GetNoArena();
}
inline void OptionOrdersResp_OrderResult::set_orderno(const ::std::string& value) {
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersResp.OrderResult.orderno)
}
#if LANG_CXX11
inline void OptionOrdersResp_OrderResult::set_orderno(::std::string&& value) {
  set_has_orderno();
  orderno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionOrdersResp.OrderResult.orderno)
}
#endif
inline void OptionOrdersResp_OrderResult::set_orderno(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionOrdersResp.OrderResult.orderno)
}
inline void OptionOrdersResp_OrderResult::set_orderno(const char* value, size_t size) {
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionOrdersResp.OrderResult.orderno)
}
inline ::std::string* OptionOrdersResp_OrderResult::mutable_orderno() {
  set_has_orderno();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionOrdersResp.OrderResult.orderno)
  return orderno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionOrdersResp_OrderResult::release_orderno() {
  // @@protoc_insertion_point(field_release:autotrade.OptionOrdersResp.OrderResult.orderno)
  if (!has_orderno()) {
    return NULL;
  }
  clear_has_orderno();
  return orderno_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionOrdersResp_OrderResult::set_allocated_orderno(::std::string* orderno) {
  if (orderno != NULL) {
    set_has_orderno();
  } else {
    clear_has_orderno();
  }
  orderno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderno);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionOrdersResp.OrderResult.orderno)
}

// -------------------------------------------------------------------

// OptionOrdersResp

// optional int32 funcid = 1 [default = 13101002];
inline bool OptionOrdersResp::has_funcid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OptionOrdersResp::set_has_funcid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OptionOrdersResp::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OptionOrdersResp::clear_funcid() {
  funcid_ = 13101002;
  clear_has_funcid();
}
inline ::google::protobuf::int32 OptionOrdersResp::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersResp.funcid)
  return funcid_;
}
inline void OptionOrdersResp::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersResp.funcid)
}

// required string order_group = 2;
inline bool OptionOrdersResp::has_order_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptionOrdersResp::set_has_order_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptionOrdersResp::clear_has_order_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptionOrdersResp::clear_order_group() {
  order_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_group();
}
inline const ::std::string& OptionOrdersResp::order_group() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersResp.order_group)
  return order_group_.GetNoArena();
}
inline void OptionOrdersResp::set_order_group(const ::std::string& value) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersResp.order_group)
}
#if LANG_CXX11
inline void OptionOrdersResp::set_order_group(::std::string&& value) {
  set_has_order_group();
  order_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionOrdersResp.order_group)
}
#endif
inline void OptionOrdersResp::set_order_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionOrdersResp.order_group)
}
inline void OptionOrdersResp::set_order_group(const char* value, size_t size) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionOrdersResp.order_group)
}
inline ::std::string* OptionOrdersResp::mutable_order_group() {
  set_has_order_group();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionOrdersResp.order_group)
  return order_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionOrdersResp::release_order_group() {
  // @@protoc_insertion_point(field_release:autotrade.OptionOrdersResp.order_group)
  if (!has_order_group()) {
    return NULL;
  }
  clear_has_order_group();
  return order_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionOrdersResp::set_allocated_order_group(::std::string* order_group) {
  if (order_group != NULL) {
    set_has_order_group();
  } else {
    clear_has_order_group();
  }
  order_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_group);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionOrdersResp.order_group)
}

// repeated .autotrade.OptionOrdersResp.OrderResult results = 3;
inline int OptionOrdersResp::results_size() const {
  return results_.size();
}
inline void OptionOrdersResp::clear_results() {
  results_.Clear();
}
inline ::autotrade::OptionOrdersResp_OrderResult* OptionOrdersResp::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:autotrade.OptionOrdersResp.results)
  return results_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::autotrade::OptionOrdersResp_OrderResult >*
OptionOrdersResp::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:autotrade.OptionOrdersResp.results)
  return &results_;
}
inline const ::autotrade::OptionOrdersResp_OrderResult& OptionOrdersResp::results(int index) const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersResp.results)
  return results_.Get(index);
}
inline ::autotrade::OptionOrdersResp_OrderResult* OptionOrdersResp::add_results() {
  // @@protoc_insertion_point(field_add:autotrade.OptionOrdersResp.results)
  return results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::autotrade::OptionOrdersResp_OrderResult >&
OptionOrdersResp::results() const {
  // @@protoc_insertion_point(field_list:autotrade.OptionOrdersResp.results)
  return results_;
}

// optional string request_id = 4;
inline bool OptionOrdersResp::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptionOrdersResp::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OptionOrdersResp::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OptionOrdersResp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& OptionOrdersResp::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersResp.request_id)
  return request_id_.GetNoArena();
}
inline void OptionOrdersResp::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersResp.request_id)
}
#if LANG_CXX11
inline void OptionOrdersResp::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionOrdersResp.request_id)
}
#endif
inline void OptionOrdersResp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionOrdersResp.request_id)
}
inline void OptionOrdersResp::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionOrdersResp.request_id)
}
inline ::std::string* OptionOrdersResp::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionOrdersResp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionOrdersResp::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.OptionOrdersResp.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionOrdersResp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionOrdersResp.request_id)
}

// required string order_id = 5;
inline bool OptionOrdersResp::has_order_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OptionOrdersResp::set_has_order_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OptionOrdersResp::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OptionOrdersResp::clear_order_id() {
  order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_id();
}
inline const ::std::string& OptionOrdersResp::order_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersResp.order_id)
  return order_id_.GetNoArena();
}
inline void OptionOrdersResp::set_order_id(const ::std::string& value) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersResp.order_id)
}
#if LANG_CXX11
inline void OptionOrdersResp::set_order_id(::std::string&& value) {
  set_has_order_id();
  order_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionOrdersResp.order_id)
}
#endif
inline void OptionOrdersResp::set_order_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionOrdersResp.order_id)
}
inline void OptionOrdersResp::set_order_id(const char* value, size_t size) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionOrdersResp.order_id)
}
inline ::std::string* OptionOrdersResp::mutable_order_id() {
  set_has_order_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionOrdersResp.order_id)
  return order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionOrdersResp::release_order_id() {
  // @@protoc_insertion_point(field_release:autotrade.OptionOrdersResp.order_id)
  if (!has_order_id()) {
    return NULL;
  }
  clear_has_order_id();
  return order_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionOrdersResp::set_allocated_order_id(::std::string* order_id) {
  if (order_id != NULL) {
    set_has_order_id();
  } else {
    clear_has_order_id();
  }
  order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionOrdersResp.order_id)
}

// -------------------------------------------------------------------

// OptionDeleteReqt

// optional int32 funcid = 1 [default = 13001004];
inline bool OptionDeleteReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OptionDeleteReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OptionDeleteReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OptionDeleteReqt::clear_funcid() {
  funcid_ = 13001004;
  clear_has_funcid();
}
inline ::google::protobuf::int32 OptionDeleteReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionDeleteReqt.funcid)
  return funcid_;
}
inline void OptionDeleteReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionDeleteReqt.funcid)
}

// required string order_group = 2;
inline bool OptionDeleteReqt::has_order_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptionDeleteReqt::set_has_order_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptionDeleteReqt::clear_has_order_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptionDeleteReqt::clear_order_group() {
  order_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_group();
}
inline const ::std::string& OptionDeleteReqt::order_group() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionDeleteReqt.order_group)
  return order_group_.GetNoArena();
}
inline void OptionDeleteReqt::set_order_group(const ::std::string& value) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionDeleteReqt.order_group)
}
#if LANG_CXX11
inline void OptionDeleteReqt::set_order_group(::std::string&& value) {
  set_has_order_group();
  order_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionDeleteReqt.order_group)
}
#endif
inline void OptionDeleteReqt::set_order_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionDeleteReqt.order_group)
}
inline void OptionDeleteReqt::set_order_group(const char* value, size_t size) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionDeleteReqt.order_group)
}
inline ::std::string* OptionDeleteReqt::mutable_order_group() {
  set_has_order_group();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionDeleteReqt.order_group)
  return order_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionDeleteReqt::release_order_group() {
  // @@protoc_insertion_point(field_release:autotrade.OptionDeleteReqt.order_group)
  if (!has_order_group()) {
    return NULL;
  }
  clear_has_order_group();
  return order_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionDeleteReqt::set_allocated_order_group(::std::string* order_group) {
  if (order_group != NULL) {
    set_has_order_group();
  } else {
    clear_has_order_group();
  }
  order_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_group);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionDeleteReqt.order_group)
}

// required uint32 market = 3;
inline bool OptionDeleteReqt::has_market() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OptionDeleteReqt::set_has_market() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OptionDeleteReqt::clear_has_market() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OptionDeleteReqt::clear_market() {
  market_ = 0u;
  clear_has_market();
}
inline ::google::protobuf::uint32 OptionDeleteReqt::market() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionDeleteReqt.market)
  return market_;
}
inline void OptionDeleteReqt::set_market(::google::protobuf::uint32 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionDeleteReqt.market)
}

// optional string request_id = 4;
inline bool OptionDeleteReqt::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptionDeleteReqt::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OptionDeleteReqt::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OptionDeleteReqt::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& OptionDeleteReqt::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionDeleteReqt.request_id)
  return request_id_.GetNoArena();
}
inline void OptionDeleteReqt::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionDeleteReqt.request_id)
}
#if LANG_CXX11
inline void OptionDeleteReqt::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionDeleteReqt.request_id)
}
#endif
inline void OptionDeleteReqt::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionDeleteReqt.request_id)
}
inline void OptionDeleteReqt::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionDeleteReqt.request_id)
}
inline ::std::string* OptionDeleteReqt::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionDeleteReqt.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionDeleteReqt::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.OptionDeleteReqt.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionDeleteReqt::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionDeleteReqt.request_id)
}

// -------------------------------------------------------------------

// OptionDeleteResp

// optional int32 funcid = 1 [default = 13101004];
inline bool OptionDeleteResp::has_funcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OptionDeleteResp::set_has_funcid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OptionDeleteResp::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OptionDeleteResp::clear_funcid() {
  funcid_ = 13101004;
  clear_has_funcid();
}
inline ::google::protobuf::int32 OptionDeleteResp::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionDeleteResp.funcid)
  return funcid_;
}
inline void OptionDeleteResp::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionDeleteResp.funcid)
}

// optional string order_group = 2;
inline bool OptionDeleteResp::has_order_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptionDeleteResp::set_has_order_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptionDeleteResp::clear_has_order_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptionDeleteResp::clear_order_group() {
  order_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_group();
}
inline const ::std::string& OptionDeleteResp::order_group() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionDeleteResp.order_group)
  return order_group_.GetNoArena();
}
inline void OptionDeleteResp::set_order_group(const ::std::string& value) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionDeleteResp.order_group)
}
#if LANG_CXX11
inline void OptionDeleteResp::set_order_group(::std::string&& value) {
  set_has_order_group();
  order_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionDeleteResp.order_group)
}
#endif
inline void OptionDeleteResp::set_order_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionDeleteResp.order_group)
}
inline void OptionDeleteResp::set_order_group(const char* value, size_t size) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionDeleteResp.order_group)
}
inline ::std::string* OptionDeleteResp::mutable_order_group() {
  set_has_order_group();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionDeleteResp.order_group)
  return order_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionDeleteResp::release_order_group() {
  // @@protoc_insertion_point(field_release:autotrade.OptionDeleteResp.order_group)
  if (!has_order_group()) {
    return NULL;
  }
  clear_has_order_group();
  return order_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionDeleteResp::set_allocated_order_group(::std::string* order_group) {
  if (order_group != NULL) {
    set_has_order_group();
  } else {
    clear_has_order_group();
  }
  order_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_group);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionDeleteResp.order_group)
}

// optional string request_id = 3;
inline bool OptionDeleteResp::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptionDeleteResp::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OptionDeleteResp::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OptionDeleteResp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& OptionDeleteResp::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionDeleteResp.request_id)
  return request_id_.GetNoArena();
}
inline void OptionDeleteResp::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionDeleteResp.request_id)
}
#if LANG_CXX11
inline void OptionDeleteResp::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionDeleteResp.request_id)
}
#endif
inline void OptionDeleteResp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionDeleteResp.request_id)
}
inline void OptionDeleteResp::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionDeleteResp.request_id)
}
inline ::std::string* OptionDeleteResp::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionDeleteResp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionDeleteResp::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.OptionDeleteResp.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionDeleteResp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionDeleteResp.request_id)
}

// -------------------------------------------------------------------

// OptionDeletesReqt

// optional int32 funcid = 1 [default = 13001005];
inline bool OptionDeletesReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OptionDeletesReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OptionDeletesReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OptionDeletesReqt::clear_funcid() {
  funcid_ = 13001005;
  clear_has_funcid();
}
inline ::google::protobuf::int32 OptionDeletesReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionDeletesReqt.funcid)
  return funcid_;
}
inline void OptionDeletesReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionDeletesReqt.funcid)
}

// required string order_group = 2;
inline bool OptionDeletesReqt::has_order_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptionDeletesReqt::set_has_order_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptionDeletesReqt::clear_has_order_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptionDeletesReqt::clear_order_group() {
  order_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_group();
}
inline const ::std::string& OptionDeletesReqt::order_group() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionDeletesReqt.order_group)
  return order_group_.GetNoArena();
}
inline void OptionDeletesReqt::set_order_group(const ::std::string& value) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionDeletesReqt.order_group)
}
#if LANG_CXX11
inline void OptionDeletesReqt::set_order_group(::std::string&& value) {
  set_has_order_group();
  order_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionDeletesReqt.order_group)
}
#endif
inline void OptionDeletesReqt::set_order_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionDeletesReqt.order_group)
}
inline void OptionDeletesReqt::set_order_group(const char* value, size_t size) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionDeletesReqt.order_group)
}
inline ::std::string* OptionDeletesReqt::mutable_order_group() {
  set_has_order_group();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionDeletesReqt.order_group)
  return order_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionDeletesReqt::release_order_group() {
  // @@protoc_insertion_point(field_release:autotrade.OptionDeletesReqt.order_group)
  if (!has_order_group()) {
    return NULL;
  }
  clear_has_order_group();
  return order_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionDeletesReqt::set_allocated_order_group(::std::string* order_group) {
  if (order_group != NULL) {
    set_has_order_group();
  } else {
    clear_has_order_group();
  }
  order_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_group);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionDeletesReqt.order_group)
}

// required uint32 market = 3;
inline bool OptionDeletesReqt::has_market() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OptionDeletesReqt::set_has_market() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OptionDeletesReqt::clear_has_market() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OptionDeletesReqt::clear_market() {
  market_ = 0u;
  clear_has_market();
}
inline ::google::protobuf::uint32 OptionDeletesReqt::market() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionDeletesReqt.market)
  return market_;
}
inline void OptionDeletesReqt::set_market(::google::protobuf::uint32 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionDeletesReqt.market)
}

// optional string request_id = 4;
inline bool OptionDeletesReqt::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptionDeletesReqt::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OptionDeletesReqt::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OptionDeletesReqt::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& OptionDeletesReqt::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionDeletesReqt.request_id)
  return request_id_.GetNoArena();
}
inline void OptionDeletesReqt::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionDeletesReqt.request_id)
}
#if LANG_CXX11
inline void OptionDeletesReqt::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionDeletesReqt.request_id)
}
#endif
inline void OptionDeletesReqt::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionDeletesReqt.request_id)
}
inline void OptionDeletesReqt::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionDeletesReqt.request_id)
}
inline ::std::string* OptionDeletesReqt::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionDeletesReqt.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionDeletesReqt::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.OptionDeletesReqt.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionDeletesReqt::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionDeletesReqt.request_id)
}

// repeated string order_nos = 5;
inline int OptionDeletesReqt::order_nos_size() const {
  return order_nos_.size();
}
inline void OptionDeletesReqt::clear_order_nos() {
  order_nos_.Clear();
}
inline const ::std::string& OptionDeletesReqt::order_nos(int index) const {
  // @@protoc_insertion_point(field_get:autotrade.OptionDeletesReqt.order_nos)
  return order_nos_.Get(index);
}
inline ::std::string* OptionDeletesReqt::mutable_order_nos(int index) {
  // @@protoc_insertion_point(field_mutable:autotrade.OptionDeletesReqt.order_nos)
  return order_nos_.Mutable(index);
}
inline void OptionDeletesReqt::set_order_nos(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:autotrade.OptionDeletesReqt.order_nos)
  order_nos_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void OptionDeletesReqt::set_order_nos(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:autotrade.OptionDeletesReqt.order_nos)
  order_nos_.Mutable(index)->assign(std::move(value));
}
#endif
inline void OptionDeletesReqt::set_order_nos(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  order_nos_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:autotrade.OptionDeletesReqt.order_nos)
}
inline void OptionDeletesReqt::set_order_nos(int index, const char* value, size_t size) {
  order_nos_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionDeletesReqt.order_nos)
}
inline ::std::string* OptionDeletesReqt::add_order_nos() {
  // @@protoc_insertion_point(field_add_mutable:autotrade.OptionDeletesReqt.order_nos)
  return order_nos_.Add();
}
inline void OptionDeletesReqt::add_order_nos(const ::std::string& value) {
  order_nos_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:autotrade.OptionDeletesReqt.order_nos)
}
#if LANG_CXX11
inline void OptionDeletesReqt::add_order_nos(::std::string&& value) {
  order_nos_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:autotrade.OptionDeletesReqt.order_nos)
}
#endif
inline void OptionDeletesReqt::add_order_nos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  order_nos_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:autotrade.OptionDeletesReqt.order_nos)
}
inline void OptionDeletesReqt::add_order_nos(const char* value, size_t size) {
  order_nos_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:autotrade.OptionDeletesReqt.order_nos)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
OptionDeletesReqt::order_nos() const {
  // @@protoc_insertion_point(field_list:autotrade.OptionDeletesReqt.order_nos)
  return order_nos_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
OptionDeletesReqt::mutable_order_nos() {
  // @@protoc_insertion_point(field_mutable_list:autotrade.OptionDeletesReqt.order_nos)
  return &order_nos_;
}

// -------------------------------------------------------------------

// OptionDeletesResp

// optional int32 funcid = 1 [default = 13101005];
inline bool OptionDeletesResp::has_funcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OptionDeletesResp::set_has_funcid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OptionDeletesResp::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OptionDeletesResp::clear_funcid() {
  funcid_ = 13101005;
  clear_has_funcid();
}
inline ::google::protobuf::int32 OptionDeletesResp::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionDeletesResp.funcid)
  return funcid_;
}
inline void OptionDeletesResp::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionDeletesResp.funcid)
}

// optional string order_group = 2;
inline bool OptionDeletesResp::has_order_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptionDeletesResp::set_has_order_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptionDeletesResp::clear_has_order_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptionDeletesResp::clear_order_group() {
  order_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_group();
}
inline const ::std::string& OptionDeletesResp::order_group() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionDeletesResp.order_group)
  return order_group_.GetNoArena();
}
inline void OptionDeletesResp::set_order_group(const ::std::string& value) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionDeletesResp.order_group)
}
#if LANG_CXX11
inline void OptionDeletesResp::set_order_group(::std::string&& value) {
  set_has_order_group();
  order_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionDeletesResp.order_group)
}
#endif
inline void OptionDeletesResp::set_order_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionDeletesResp.order_group)
}
inline void OptionDeletesResp::set_order_group(const char* value, size_t size) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionDeletesResp.order_group)
}
inline ::std::string* OptionDeletesResp::mutable_order_group() {
  set_has_order_group();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionDeletesResp.order_group)
  return order_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionDeletesResp::release_order_group() {
  // @@protoc_insertion_point(field_release:autotrade.OptionDeletesResp.order_group)
  if (!has_order_group()) {
    return NULL;
  }
  clear_has_order_group();
  return order_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionDeletesResp::set_allocated_order_group(::std::string* order_group) {
  if (order_group != NULL) {
    set_has_order_group();
  } else {
    clear_has_order_group();
  }
  order_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_group);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionDeletesResp.order_group)
}

// optional string request_id = 3;
inline bool OptionDeletesResp::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptionDeletesResp::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OptionDeletesResp::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OptionDeletesResp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& OptionDeletesResp::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionDeletesResp.request_id)
  return request_id_.GetNoArena();
}
inline void OptionDeletesResp::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionDeletesResp.request_id)
}
#if LANG_CXX11
inline void OptionDeletesResp::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionDeletesResp.request_id)
}
#endif
inline void OptionDeletesResp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionDeletesResp.request_id)
}
inline void OptionDeletesResp::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionDeletesResp.request_id)
}
inline ::std::string* OptionDeletesResp::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionDeletesResp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionDeletesResp::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.OptionDeletesResp.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionDeletesResp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionDeletesResp.request_id)
}

// -------------------------------------------------------------------

// OptionQueryOrderReqt

// optional int32 funcid = 1 [default = 13002002];
inline bool OptionQueryOrderReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OptionQueryOrderReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OptionQueryOrderReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OptionQueryOrderReqt::clear_funcid() {
  funcid_ = 13002002;
  clear_has_funcid();
}
inline ::google::protobuf::int32 OptionQueryOrderReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrderReqt.funcid)
  return funcid_;
}
inline void OptionQueryOrderReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrderReqt.funcid)
}

// optional string order_group = 2 [default = ""];
inline bool OptionQueryOrderReqt::has_order_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptionQueryOrderReqt::set_has_order_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptionQueryOrderReqt::clear_has_order_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptionQueryOrderReqt::clear_order_group() {
  order_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_group();
}
inline const ::std::string& OptionQueryOrderReqt::order_group() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrderReqt.order_group)
  return order_group_.GetNoArena();
}
inline void OptionQueryOrderReqt::set_order_group(const ::std::string& value) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrderReqt.order_group)
}
#if LANG_CXX11
inline void OptionQueryOrderReqt::set_order_group(::std::string&& value) {
  set_has_order_group();
  order_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionQueryOrderReqt.order_group)
}
#endif
inline void OptionQueryOrderReqt::set_order_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionQueryOrderReqt.order_group)
}
inline void OptionQueryOrderReqt::set_order_group(const char* value, size_t size) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionQueryOrderReqt.order_group)
}
inline ::std::string* OptionQueryOrderReqt::mutable_order_group() {
  set_has_order_group();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionQueryOrderReqt.order_group)
  return order_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionQueryOrderReqt::release_order_group() {
  // @@protoc_insertion_point(field_release:autotrade.OptionQueryOrderReqt.order_group)
  if (!has_order_group()) {
    return NULL;
  }
  clear_has_order_group();
  return order_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionQueryOrderReqt::set_allocated_order_group(::std::string* order_group) {
  if (order_group != NULL) {
    set_has_order_group();
  } else {
    clear_has_order_group();
  }
  order_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_group);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionQueryOrderReqt.order_group)
}

// optional .autotrade.OptionQueryOrderReqt.QueryType query_type = 3 [default = Type_ONCE];
inline bool OptionQueryOrderReqt::has_query_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OptionQueryOrderReqt::set_has_query_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OptionQueryOrderReqt::clear_has_query_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OptionQueryOrderReqt::clear_query_type() {
  query_type_ = 0;
  clear_has_query_type();
}
inline ::autotrade::OptionQueryOrderReqt_QueryType OptionQueryOrderReqt::query_type() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrderReqt.query_type)
  return static_cast< ::autotrade::OptionQueryOrderReqt_QueryType >(query_type_);
}
inline void OptionQueryOrderReqt::set_query_type(::autotrade::OptionQueryOrderReqt_QueryType value) {
  assert(::autotrade::OptionQueryOrderReqt_QueryType_IsValid(value));
  set_has_query_type();
  query_type_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrderReqt.query_type)
}

// optional .autotrade.OptionQueryOrderReqt.QueryFlag query_flag = 4 [default = Type_NO_DELETE];
inline bool OptionQueryOrderReqt::has_query_flag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OptionQueryOrderReqt::set_has_query_flag() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OptionQueryOrderReqt::clear_has_query_flag() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OptionQueryOrderReqt::clear_query_flag() {
  query_flag_ = 1;
  clear_has_query_flag();
}
inline ::autotrade::OptionQueryOrderReqt_QueryFlag OptionQueryOrderReqt::query_flag() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrderReqt.query_flag)
  return static_cast< ::autotrade::OptionQueryOrderReqt_QueryFlag >(query_flag_);
}
inline void OptionQueryOrderReqt::set_query_flag(::autotrade::OptionQueryOrderReqt_QueryFlag value) {
  assert(::autotrade::OptionQueryOrderReqt_QueryFlag_IsValid(value));
  set_has_query_flag();
  query_flag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrderReqt.query_flag)
}

// optional string start_pos = 5 [default = ""];
inline bool OptionQueryOrderReqt::has_start_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptionQueryOrderReqt::set_has_start_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OptionQueryOrderReqt::clear_has_start_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OptionQueryOrderReqt::clear_start_pos() {
  start_pos_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_start_pos();
}
inline const ::std::string& OptionQueryOrderReqt::start_pos() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrderReqt.start_pos)
  return start_pos_.GetNoArena();
}
inline void OptionQueryOrderReqt::set_start_pos(const ::std::string& value) {
  set_has_start_pos();
  start_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrderReqt.start_pos)
}
#if LANG_CXX11
inline void OptionQueryOrderReqt::set_start_pos(::std::string&& value) {
  set_has_start_pos();
  start_pos_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionQueryOrderReqt.start_pos)
}
#endif
inline void OptionQueryOrderReqt::set_start_pos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_start_pos();
  start_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionQueryOrderReqt.start_pos)
}
inline void OptionQueryOrderReqt::set_start_pos(const char* value, size_t size) {
  set_has_start_pos();
  start_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionQueryOrderReqt.start_pos)
}
inline ::std::string* OptionQueryOrderReqt::mutable_start_pos() {
  set_has_start_pos();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionQueryOrderReqt.start_pos)
  return start_pos_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionQueryOrderReqt::release_start_pos() {
  // @@protoc_insertion_point(field_release:autotrade.OptionQueryOrderReqt.start_pos)
  if (!has_start_pos()) {
    return NULL;
  }
  clear_has_start_pos();
  return start_pos_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionQueryOrderReqt::set_allocated_start_pos(::std::string* start_pos) {
  if (start_pos != NULL) {
    set_has_start_pos();
  } else {
    clear_has_start_pos();
  }
  start_pos_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_pos);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionQueryOrderReqt.start_pos)
}

// optional string request_id = 6;
inline bool OptionQueryOrderReqt::has_request_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OptionQueryOrderReqt::set_has_request_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OptionQueryOrderReqt::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OptionQueryOrderReqt::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& OptionQueryOrderReqt::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrderReqt.request_id)
  return request_id_.GetNoArena();
}
inline void OptionQueryOrderReqt::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrderReqt.request_id)
}
#if LANG_CXX11
inline void OptionQueryOrderReqt::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionQueryOrderReqt.request_id)
}
#endif
inline void OptionQueryOrderReqt::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionQueryOrderReqt.request_id)
}
inline void OptionQueryOrderReqt::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionQueryOrderReqt.request_id)
}
inline ::std::string* OptionQueryOrderReqt::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionQueryOrderReqt.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionQueryOrderReqt::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.OptionQueryOrderReqt.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionQueryOrderReqt::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionQueryOrderReqt.request_id)
}

// optional int64 request_time = 10 [default = 0];
inline bool OptionQueryOrderReqt::has_request_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OptionQueryOrderReqt::set_has_request_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OptionQueryOrderReqt::clear_has_request_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OptionQueryOrderReqt::clear_request_time() {
  request_time_ = GOOGLE_LONGLONG(0);
  clear_has_request_time();
}
inline ::google::protobuf::int64 OptionQueryOrderReqt::request_time() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrderReqt.request_time)
  return request_time_;
}
inline void OptionQueryOrderReqt::set_request_time(::google::protobuf::int64 value) {
  set_has_request_time();
  request_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrderReqt.request_time)
}

// optional int64 active_interval = 11 [default = 1000];
inline bool OptionQueryOrderReqt::has_active_interval() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OptionQueryOrderReqt::set_has_active_interval() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OptionQueryOrderReqt::clear_has_active_interval() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OptionQueryOrderReqt::clear_active_interval() {
  active_interval_ = GOOGLE_LONGLONG(1000);
  clear_has_active_interval();
}
inline ::google::protobuf::int64 OptionQueryOrderReqt::active_interval() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrderReqt.active_interval)
  return active_interval_;
}
inline void OptionQueryOrderReqt::set_active_interval(::google::protobuf::int64 value) {
  set_has_active_interval();
  active_interval_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrderReqt.active_interval)
}

// -------------------------------------------------------------------

// OptionQueryOrderResp_OrderDetail

// optional string code = 1;
inline bool OptionQueryOrderResp_OrderDetail::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptionQueryOrderResp_OrderDetail::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& OptionQueryOrderResp_OrderDetail::code() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrderResp.OrderDetail.code)
  return code_.GetNoArena();
}
inline void OptionQueryOrderResp_OrderDetail::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrderResp.OrderDetail.code)
}
#if LANG_CXX11
inline void OptionQueryOrderResp_OrderDetail::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionQueryOrderResp.OrderDetail.code)
}
#endif
inline void OptionQueryOrderResp_OrderDetail::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionQueryOrderResp.OrderDetail.code)
}
inline void OptionQueryOrderResp_OrderDetail::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionQueryOrderResp.OrderDetail.code)
}
inline ::std::string* OptionQueryOrderResp_OrderDetail::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionQueryOrderResp.OrderDetail.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionQueryOrderResp_OrderDetail::release_code() {
  // @@protoc_insertion_point(field_release:autotrade.OptionQueryOrderResp.OrderDetail.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionQueryOrderResp_OrderDetail::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionQueryOrderResp.OrderDetail.code)
}

// optional string name = 2;
inline bool OptionQueryOrderResp_OrderDetail::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptionQueryOrderResp_OrderDetail::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& OptionQueryOrderResp_OrderDetail::name() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrderResp.OrderDetail.name)
  return name_.GetNoArena();
}
inline void OptionQueryOrderResp_OrderDetail::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrderResp.OrderDetail.name)
}
#if LANG_CXX11
inline void OptionQueryOrderResp_OrderDetail::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionQueryOrderResp.OrderDetail.name)
}
#endif
inline void OptionQueryOrderResp_OrderDetail::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionQueryOrderResp.OrderDetail.name)
}
inline void OptionQueryOrderResp_OrderDetail::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionQueryOrderResp.OrderDetail.name)
}
inline ::std::string* OptionQueryOrderResp_OrderDetail::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionQueryOrderResp.OrderDetail.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionQueryOrderResp_OrderDetail::release_name() {
  // @@protoc_insertion_point(field_release:autotrade.OptionQueryOrderResp.OrderDetail.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionQueryOrderResp_OrderDetail::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionQueryOrderResp.OrderDetail.name)
}

// optional double price = 3;
inline bool OptionQueryOrderResp_OrderDetail::has_price() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OptionQueryOrderResp_OrderDetail::set_has_price() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_has_price() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline double OptionQueryOrderResp_OrderDetail::price() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrderResp.OrderDetail.price)
  return price_;
}
inline void OptionQueryOrderResp_OrderDetail::set_price(double value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrderResp.OrderDetail.price)
}

// optional int64 qty = 4;
inline bool OptionQueryOrderResp_OrderDetail::has_qty() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OptionQueryOrderResp_OrderDetail::set_has_qty() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_has_qty() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_qty() {
  qty_ = GOOGLE_LONGLONG(0);
  clear_has_qty();
}
inline ::google::protobuf::int64 OptionQueryOrderResp_OrderDetail::qty() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrderResp.OrderDetail.qty)
  return qty_;
}
inline void OptionQueryOrderResp_OrderDetail::set_qty(::google::protobuf::int64 value) {
  set_has_qty();
  qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrderResp.OrderDetail.qty)
}

// optional int64 bsflag = 5;
inline bool OptionQueryOrderResp_OrderDetail::has_bsflag() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OptionQueryOrderResp_OrderDetail::set_has_bsflag() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_has_bsflag() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_bsflag() {
  bsflag_ = GOOGLE_LONGLONG(0);
  clear_has_bsflag();
}
inline ::google::protobuf::int64 OptionQueryOrderResp_OrderDetail::bsflag() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrderResp.OrderDetail.bsflag)
  return bsflag_;
}
inline void OptionQueryOrderResp_OrderDetail::set_bsflag(::google::protobuf::int64 value) {
  set_has_bsflag();
  bsflag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrderResp.OrderDetail.bsflag)
}

// optional int64 market = 6;
inline bool OptionQueryOrderResp_OrderDetail::has_market() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OptionQueryOrderResp_OrderDetail::set_has_market() {
  _has_bits_[0] |= 0x00001000u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_has_market() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_market() {
  market_ = GOOGLE_LONGLONG(0);
  clear_has_market();
}
inline ::google::protobuf::int64 OptionQueryOrderResp_OrderDetail::market() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrderResp.OrderDetail.market)
  return market_;
}
inline void OptionQueryOrderResp_OrderDetail::set_market(::google::protobuf::int64 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrderResp.OrderDetail.market)
}

// optional string policy_id = 7;
inline bool OptionQueryOrderResp_OrderDetail::has_policy_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OptionQueryOrderResp_OrderDetail::set_has_policy_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_has_policy_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_policy_id() {
  policy_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_policy_id();
}
inline const ::std::string& OptionQueryOrderResp_OrderDetail::policy_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrderResp.OrderDetail.policy_id)
  return policy_id_.GetNoArena();
}
inline void OptionQueryOrderResp_OrderDetail::set_policy_id(const ::std::string& value) {
  set_has_policy_id();
  policy_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrderResp.OrderDetail.policy_id)
}
#if LANG_CXX11
inline void OptionQueryOrderResp_OrderDetail::set_policy_id(::std::string&& value) {
  set_has_policy_id();
  policy_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionQueryOrderResp.OrderDetail.policy_id)
}
#endif
inline void OptionQueryOrderResp_OrderDetail::set_policy_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_policy_id();
  policy_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionQueryOrderResp.OrderDetail.policy_id)
}
inline void OptionQueryOrderResp_OrderDetail::set_policy_id(const char* value, size_t size) {
  set_has_policy_id();
  policy_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionQueryOrderResp.OrderDetail.policy_id)
}
inline ::std::string* OptionQueryOrderResp_OrderDetail::mutable_policy_id() {
  set_has_policy_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionQueryOrderResp.OrderDetail.policy_id)
  return policy_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionQueryOrderResp_OrderDetail::release_policy_id() {
  // @@protoc_insertion_point(field_release:autotrade.OptionQueryOrderResp.OrderDetail.policy_id)
  if (!has_policy_id()) {
    return NULL;
  }
  clear_has_policy_id();
  return policy_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionQueryOrderResp_OrderDetail::set_allocated_policy_id(::std::string* policy_id) {
  if (policy_id != NULL) {
    set_has_policy_id();
  } else {
    clear_has_policy_id();
  }
  policy_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), policy_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionQueryOrderResp.OrderDetail.policy_id)
}

// optional string index_id = 8;
inline bool OptionQueryOrderResp_OrderDetail::has_index_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OptionQueryOrderResp_OrderDetail::set_has_index_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_has_index_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_index_id() {
  index_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_index_id();
}
inline const ::std::string& OptionQueryOrderResp_OrderDetail::index_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrderResp.OrderDetail.index_id)
  return index_id_.GetNoArena();
}
inline void OptionQueryOrderResp_OrderDetail::set_index_id(const ::std::string& value) {
  set_has_index_id();
  index_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrderResp.OrderDetail.index_id)
}
#if LANG_CXX11
inline void OptionQueryOrderResp_OrderDetail::set_index_id(::std::string&& value) {
  set_has_index_id();
  index_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionQueryOrderResp.OrderDetail.index_id)
}
#endif
inline void OptionQueryOrderResp_OrderDetail::set_index_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_index_id();
  index_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionQueryOrderResp.OrderDetail.index_id)
}
inline void OptionQueryOrderResp_OrderDetail::set_index_id(const char* value, size_t size) {
  set_has_index_id();
  index_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionQueryOrderResp.OrderDetail.index_id)
}
inline ::std::string* OptionQueryOrderResp_OrderDetail::mutable_index_id() {
  set_has_index_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionQueryOrderResp.OrderDetail.index_id)
  return index_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionQueryOrderResp_OrderDetail::release_index_id() {
  // @@protoc_insertion_point(field_release:autotrade.OptionQueryOrderResp.OrderDetail.index_id)
  if (!has_index_id()) {
    return NULL;
  }
  clear_has_index_id();
  return index_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionQueryOrderResp_OrderDetail::set_allocated_index_id(::std::string* index_id) {
  if (index_id != NULL) {
    set_has_index_id();
  } else {
    clear_has_index_id();
  }
  index_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), index_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionQueryOrderResp.OrderDetail.index_id)
}

// optional int32 kpcbj = 9;
inline bool OptionQueryOrderResp_OrderDetail::has_kpcbj() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void OptionQueryOrderResp_OrderDetail::set_has_kpcbj() {
  _has_bits_[0] |= 0x00002000u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_has_kpcbj() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_kpcbj() {
  kpcbj_ = 0;
  clear_has_kpcbj();
}
inline ::google::protobuf::int32 OptionQueryOrderResp_OrderDetail::kpcbj() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrderResp.OrderDetail.kpcbj)
  return kpcbj_;
}
inline void OptionQueryOrderResp_OrderDetail::set_kpcbj(::google::protobuf::int32 value) {
  set_has_kpcbj();
  kpcbj_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrderResp.OrderDetail.kpcbj)
}

// optional int32 order_price_type = 10 [default = 0];
inline bool OptionQueryOrderResp_OrderDetail::has_order_price_type() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void OptionQueryOrderResp_OrderDetail::set_has_order_price_type() {
  _has_bits_[0] |= 0x00004000u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_has_order_price_type() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_order_price_type() {
  order_price_type_ = 0;
  clear_has_order_price_type();
}
inline ::google::protobuf::int32 OptionQueryOrderResp_OrderDetail::order_price_type() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrderResp.OrderDetail.order_price_type)
  return order_price_type_;
}
inline void OptionQueryOrderResp_OrderDetail::set_order_price_type(::google::protobuf::int32 value) {
  set_has_order_price_type();
  order_price_type_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrderResp.OrderDetail.order_price_type)
}

// optional int32 covered_flag = 11 [default = 0];
inline bool OptionQueryOrderResp_OrderDetail::has_covered_flag() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void OptionQueryOrderResp_OrderDetail::set_has_covered_flag() {
  _has_bits_[0] |= 0x00008000u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_has_covered_flag() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_covered_flag() {
  covered_flag_ = 0;
  clear_has_covered_flag();
}
inline ::google::protobuf::int32 OptionQueryOrderResp_OrderDetail::covered_flag() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrderResp.OrderDetail.covered_flag)
  return covered_flag_;
}
inline void OptionQueryOrderResp_OrderDetail::set_covered_flag(::google::protobuf::int32 value) {
  set_has_covered_flag();
  covered_flag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrderResp.OrderDetail.covered_flag)
}

// optional string match_condition = 12 [default = "GFD"];
inline bool OptionQueryOrderResp_OrderDetail::has_match_condition() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OptionQueryOrderResp_OrderDetail::set_has_match_condition() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_has_match_condition() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_match_condition() {
  match_condition_.ClearToDefaultNoArena(&::autotrade::OptionQueryOrderResp_OrderDetail::_i_give_permission_to_break_this_code_default_match_condition_.get());
  clear_has_match_condition();
}
inline const ::std::string& OptionQueryOrderResp_OrderDetail::match_condition() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrderResp.OrderDetail.match_condition)
  return match_condition_.GetNoArena();
}
inline void OptionQueryOrderResp_OrderDetail::set_match_condition(const ::std::string& value) {
  set_has_match_condition();
  match_condition_.SetNoArena(&::autotrade::OptionQueryOrderResp_OrderDetail::_i_give_permission_to_break_this_code_default_match_condition_.get(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrderResp.OrderDetail.match_condition)
}
#if LANG_CXX11
inline void OptionQueryOrderResp_OrderDetail::set_match_condition(::std::string&& value) {
  set_has_match_condition();
  match_condition_.SetNoArena(
    &::autotrade::OptionQueryOrderResp_OrderDetail::_i_give_permission_to_break_this_code_default_match_condition_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionQueryOrderResp.OrderDetail.match_condition)
}
#endif
inline void OptionQueryOrderResp_OrderDetail::set_match_condition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_match_condition();
  match_condition_.SetNoArena(&::autotrade::OptionQueryOrderResp_OrderDetail::_i_give_permission_to_break_this_code_default_match_condition_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionQueryOrderResp.OrderDetail.match_condition)
}
inline void OptionQueryOrderResp_OrderDetail::set_match_condition(const char* value, size_t size) {
  set_has_match_condition();
  match_condition_.SetNoArena(&::autotrade::OptionQueryOrderResp_OrderDetail::_i_give_permission_to_break_this_code_default_match_condition_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionQueryOrderResp.OrderDetail.match_condition)
}
inline ::std::string* OptionQueryOrderResp_OrderDetail::mutable_match_condition() {
  set_has_match_condition();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionQueryOrderResp.OrderDetail.match_condition)
  return match_condition_.MutableNoArena(&::autotrade::OptionQueryOrderResp_OrderDetail::_i_give_permission_to_break_this_code_default_match_condition_.get());
}
inline ::std::string* OptionQueryOrderResp_OrderDetail::release_match_condition() {
  // @@protoc_insertion_point(field_release:autotrade.OptionQueryOrderResp.OrderDetail.match_condition)
  if (!has_match_condition()) {
    return NULL;
  }
  clear_has_match_condition();
  return match_condition_.ReleaseNonDefaultNoArena(&::autotrade::OptionQueryOrderResp_OrderDetail::_i_give_permission_to_break_this_code_default_match_condition_.get());
}
inline void OptionQueryOrderResp_OrderDetail::set_allocated_match_condition(::std::string* match_condition) {
  if (match_condition != NULL) {
    set_has_match_condition();
  } else {
    clear_has_match_condition();
  }
  match_condition_.SetAllocatedNoArena(&::autotrade::OptionQueryOrderResp_OrderDetail::_i_give_permission_to_break_this_code_default_match_condition_.get(), match_condition);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionQueryOrderResp.OrderDetail.match_condition)
}

// optional string trader_id = 13;
inline bool OptionQueryOrderResp_OrderDetail::has_trader_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OptionQueryOrderResp_OrderDetail::set_has_trader_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_has_trader_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_trader_id() {
  trader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trader_id();
}
inline const ::std::string& OptionQueryOrderResp_OrderDetail::trader_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrderResp.OrderDetail.trader_id)
  return trader_id_.GetNoArena();
}
inline void OptionQueryOrderResp_OrderDetail::set_trader_id(const ::std::string& value) {
  set_has_trader_id();
  trader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrderResp.OrderDetail.trader_id)
}
#if LANG_CXX11
inline void OptionQueryOrderResp_OrderDetail::set_trader_id(::std::string&& value) {
  set_has_trader_id();
  trader_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionQueryOrderResp.OrderDetail.trader_id)
}
#endif
inline void OptionQueryOrderResp_OrderDetail::set_trader_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trader_id();
  trader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionQueryOrderResp.OrderDetail.trader_id)
}
inline void OptionQueryOrderResp_OrderDetail::set_trader_id(const char* value, size_t size) {
  set_has_trader_id();
  trader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionQueryOrderResp.OrderDetail.trader_id)
}
inline ::std::string* OptionQueryOrderResp_OrderDetail::mutable_trader_id() {
  set_has_trader_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionQueryOrderResp.OrderDetail.trader_id)
  return trader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionQueryOrderResp_OrderDetail::release_trader_id() {
  // @@protoc_insertion_point(field_release:autotrade.OptionQueryOrderResp.OrderDetail.trader_id)
  if (!has_trader_id()) {
    return NULL;
  }
  clear_has_trader_id();
  return trader_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionQueryOrderResp_OrderDetail::set_allocated_trader_id(::std::string* trader_id) {
  if (trader_id != NULL) {
    set_has_trader_id();
  } else {
    clear_has_trader_id();
  }
  trader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trader_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionQueryOrderResp.OrderDetail.trader_id)
}

// optional string orderno = 14;
inline bool OptionQueryOrderResp_OrderDetail::has_orderno() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OptionQueryOrderResp_OrderDetail::set_has_orderno() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_has_orderno() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_orderno() {
  orderno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_orderno();
}
inline const ::std::string& OptionQueryOrderResp_OrderDetail::orderno() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrderResp.OrderDetail.orderno)
  return orderno_.GetNoArena();
}
inline void OptionQueryOrderResp_OrderDetail::set_orderno(const ::std::string& value) {
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrderResp.OrderDetail.orderno)
}
#if LANG_CXX11
inline void OptionQueryOrderResp_OrderDetail::set_orderno(::std::string&& value) {
  set_has_orderno();
  orderno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionQueryOrderResp.OrderDetail.orderno)
}
#endif
inline void OptionQueryOrderResp_OrderDetail::set_orderno(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionQueryOrderResp.OrderDetail.orderno)
}
inline void OptionQueryOrderResp_OrderDetail::set_orderno(const char* value, size_t size) {
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionQueryOrderResp.OrderDetail.orderno)
}
inline ::std::string* OptionQueryOrderResp_OrderDetail::mutable_orderno() {
  set_has_orderno();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionQueryOrderResp.OrderDetail.orderno)
  return orderno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionQueryOrderResp_OrderDetail::release_orderno() {
  // @@protoc_insertion_point(field_release:autotrade.OptionQueryOrderResp.OrderDetail.orderno)
  if (!has_orderno()) {
    return NULL;
  }
  clear_has_orderno();
  return orderno_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionQueryOrderResp_OrderDetail::set_allocated_orderno(::std::string* orderno) {
  if (orderno != NULL) {
    set_has_orderno();
  } else {
    clear_has_orderno();
  }
  orderno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderno);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionQueryOrderResp.OrderDetail.orderno)
}

// optional uint32 order_time = 15;
inline bool OptionQueryOrderResp_OrderDetail::has_order_time() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void OptionQueryOrderResp_OrderDetail::set_has_order_time() {
  _has_bits_[0] |= 0x00010000u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_has_order_time() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_order_time() {
  order_time_ = 0u;
  clear_has_order_time();
}
inline ::google::protobuf::uint32 OptionQueryOrderResp_OrderDetail::order_time() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrderResp.OrderDetail.order_time)
  return order_time_;
}
inline void OptionQueryOrderResp_OrderDetail::set_order_time(::google::protobuf::uint32 value) {
  set_has_order_time();
  order_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrderResp.OrderDetail.order_time)
}

// optional int64 match_qty = 16;
inline bool OptionQueryOrderResp_OrderDetail::has_match_qty() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void OptionQueryOrderResp_OrderDetail::set_has_match_qty() {
  _has_bits_[0] |= 0x00020000u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_has_match_qty() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_match_qty() {
  match_qty_ = GOOGLE_LONGLONG(0);
  clear_has_match_qty();
}
inline ::google::protobuf::int64 OptionQueryOrderResp_OrderDetail::match_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrderResp.OrderDetail.match_qty)
  return match_qty_;
}
inline void OptionQueryOrderResp_OrderDetail::set_match_qty(::google::protobuf::int64 value) {
  set_has_match_qty();
  match_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrderResp.OrderDetail.match_qty)
}

// optional double match_amt = 17;
inline bool OptionQueryOrderResp_OrderDetail::has_match_amt() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void OptionQueryOrderResp_OrderDetail::set_has_match_amt() {
  _has_bits_[0] |= 0x00040000u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_has_match_amt() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_match_amt() {
  match_amt_ = 0;
  clear_has_match_amt();
}
inline double OptionQueryOrderResp_OrderDetail::match_amt() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrderResp.OrderDetail.match_amt)
  return match_amt_;
}
inline void OptionQueryOrderResp_OrderDetail::set_match_amt(double value) {
  set_has_match_amt();
  match_amt_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrderResp.OrderDetail.match_amt)
}

// optional double match_price = 18;
inline bool OptionQueryOrderResp_OrderDetail::has_match_price() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void OptionQueryOrderResp_OrderDetail::set_has_match_price() {
  _has_bits_[0] |= 0x00080000u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_has_match_price() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_match_price() {
  match_price_ = 0;
  clear_has_match_price();
}
inline double OptionQueryOrderResp_OrderDetail::match_price() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrderResp.OrderDetail.match_price)
  return match_price_;
}
inline void OptionQueryOrderResp_OrderDetail::set_match_price(double value) {
  set_has_match_price();
  match_price_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrderResp.OrderDetail.match_price)
}

// optional int64 cancel_qty = 19;
inline bool OptionQueryOrderResp_OrderDetail::has_cancel_qty() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void OptionQueryOrderResp_OrderDetail::set_has_cancel_qty() {
  _has_bits_[0] |= 0x00100000u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_has_cancel_qty() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_cancel_qty() {
  cancel_qty_ = GOOGLE_LONGLONG(0);
  clear_has_cancel_qty();
}
inline ::google::protobuf::int64 OptionQueryOrderResp_OrderDetail::cancel_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrderResp.OrderDetail.cancel_qty)
  return cancel_qty_;
}
inline void OptionQueryOrderResp_OrderDetail::set_cancel_qty(::google::protobuf::int64 value) {
  set_has_cancel_qty();
  cancel_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrderResp.OrderDetail.cancel_qty)
}

// optional int32 state = 20;
inline bool OptionQueryOrderResp_OrderDetail::has_state() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void OptionQueryOrderResp_OrderDetail::set_has_state() {
  _has_bits_[0] |= 0x00200000u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_has_state() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 OptionQueryOrderResp_OrderDetail::state() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrderResp.OrderDetail.state)
  return state_;
}
inline void OptionQueryOrderResp_OrderDetail::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrderResp.OrderDetail.state)
}

// optional string info = 21;
inline bool OptionQueryOrderResp_OrderDetail::has_info() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OptionQueryOrderResp_OrderDetail::set_has_info() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_has_info() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_info();
}
inline const ::std::string& OptionQueryOrderResp_OrderDetail::info() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrderResp.OrderDetail.info)
  return info_.GetNoArena();
}
inline void OptionQueryOrderResp_OrderDetail::set_info(const ::std::string& value) {
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrderResp.OrderDetail.info)
}
#if LANG_CXX11
inline void OptionQueryOrderResp_OrderDetail::set_info(::std::string&& value) {
  set_has_info();
  info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionQueryOrderResp.OrderDetail.info)
}
#endif
inline void OptionQueryOrderResp_OrderDetail::set_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionQueryOrderResp.OrderDetail.info)
}
inline void OptionQueryOrderResp_OrderDetail::set_info(const char* value, size_t size) {
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionQueryOrderResp.OrderDetail.info)
}
inline ::std::string* OptionQueryOrderResp_OrderDetail::mutable_info() {
  set_has_info();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionQueryOrderResp.OrderDetail.info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionQueryOrderResp_OrderDetail::release_info() {
  // @@protoc_insertion_point(field_release:autotrade.OptionQueryOrderResp.OrderDetail.info)
  if (!has_info()) {
    return NULL;
  }
  clear_has_info();
  return info_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionQueryOrderResp_OrderDetail::set_allocated_info(::std::string* info) {
  if (info != NULL) {
    set_has_info();
  } else {
    clear_has_info();
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionQueryOrderResp.OrderDetail.info)
}

// optional string order_id = 22;
inline bool OptionQueryOrderResp_OrderDetail::has_order_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OptionQueryOrderResp_OrderDetail::set_has_order_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OptionQueryOrderResp_OrderDetail::clear_order_id() {
  order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_id();
}
inline const ::std::string& OptionQueryOrderResp_OrderDetail::order_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrderResp.OrderDetail.order_id)
  return order_id_.GetNoArena();
}
inline void OptionQueryOrderResp_OrderDetail::set_order_id(const ::std::string& value) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrderResp.OrderDetail.order_id)
}
#if LANG_CXX11
inline void OptionQueryOrderResp_OrderDetail::set_order_id(::std::string&& value) {
  set_has_order_id();
  order_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionQueryOrderResp.OrderDetail.order_id)
}
#endif
inline void OptionQueryOrderResp_OrderDetail::set_order_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionQueryOrderResp.OrderDetail.order_id)
}
inline void OptionQueryOrderResp_OrderDetail::set_order_id(const char* value, size_t size) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionQueryOrderResp.OrderDetail.order_id)
}
inline ::std::string* OptionQueryOrderResp_OrderDetail::mutable_order_id() {
  set_has_order_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionQueryOrderResp.OrderDetail.order_id)
  return order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionQueryOrderResp_OrderDetail::release_order_id() {
  // @@protoc_insertion_point(field_release:autotrade.OptionQueryOrderResp.OrderDetail.order_id)
  if (!has_order_id()) {
    return NULL;
  }
  clear_has_order_id();
  return order_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionQueryOrderResp_OrderDetail::set_allocated_order_id(::std::string* order_id) {
  if (order_id != NULL) {
    set_has_order_id();
  } else {
    clear_has_order_id();
  }
  order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionQueryOrderResp.OrderDetail.order_id)
}

// -------------------------------------------------------------------

// OptionQueryOrderResp

// optional int32 funcid = 1 [default = 13102002];
inline bool OptionQueryOrderResp::has_funcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OptionQueryOrderResp::set_has_funcid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OptionQueryOrderResp::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OptionQueryOrderResp::clear_funcid() {
  funcid_ = 13102002;
  clear_has_funcid();
}
inline ::google::protobuf::int32 OptionQueryOrderResp::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrderResp.funcid)
  return funcid_;
}
inline void OptionQueryOrderResp::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrderResp.funcid)
}

// repeated .autotrade.OptionQueryOrderResp.OrderDetail detail_list = 2;
inline int OptionQueryOrderResp::detail_list_size() const {
  return detail_list_.size();
}
inline void OptionQueryOrderResp::clear_detail_list() {
  detail_list_.Clear();
}
inline ::autotrade::OptionQueryOrderResp_OrderDetail* OptionQueryOrderResp::mutable_detail_list(int index) {
  // @@protoc_insertion_point(field_mutable:autotrade.OptionQueryOrderResp.detail_list)
  return detail_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::autotrade::OptionQueryOrderResp_OrderDetail >*
OptionQueryOrderResp::mutable_detail_list() {
  // @@protoc_insertion_point(field_mutable_list:autotrade.OptionQueryOrderResp.detail_list)
  return &detail_list_;
}
inline const ::autotrade::OptionQueryOrderResp_OrderDetail& OptionQueryOrderResp::detail_list(int index) const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrderResp.detail_list)
  return detail_list_.Get(index);
}
inline ::autotrade::OptionQueryOrderResp_OrderDetail* OptionQueryOrderResp::add_detail_list() {
  // @@protoc_insertion_point(field_add:autotrade.OptionQueryOrderResp.detail_list)
  return detail_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::autotrade::OptionQueryOrderResp_OrderDetail >&
OptionQueryOrderResp::detail_list() const {
  // @@protoc_insertion_point(field_list:autotrade.OptionQueryOrderResp.detail_list)
  return detail_list_;
}

// optional string last_pos = 3;
inline bool OptionQueryOrderResp::has_last_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptionQueryOrderResp::set_has_last_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptionQueryOrderResp::clear_has_last_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptionQueryOrderResp::clear_last_pos() {
  last_pos_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_last_pos();
}
inline const ::std::string& OptionQueryOrderResp::last_pos() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrderResp.last_pos)
  return last_pos_.GetNoArena();
}
inline void OptionQueryOrderResp::set_last_pos(const ::std::string& value) {
  set_has_last_pos();
  last_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrderResp.last_pos)
}
#if LANG_CXX11
inline void OptionQueryOrderResp::set_last_pos(::std::string&& value) {
  set_has_last_pos();
  last_pos_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionQueryOrderResp.last_pos)
}
#endif
inline void OptionQueryOrderResp::set_last_pos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_last_pos();
  last_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionQueryOrderResp.last_pos)
}
inline void OptionQueryOrderResp::set_last_pos(const char* value, size_t size) {
  set_has_last_pos();
  last_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionQueryOrderResp.last_pos)
}
inline ::std::string* OptionQueryOrderResp::mutable_last_pos() {
  set_has_last_pos();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionQueryOrderResp.last_pos)
  return last_pos_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionQueryOrderResp::release_last_pos() {
  // @@protoc_insertion_point(field_release:autotrade.OptionQueryOrderResp.last_pos)
  if (!has_last_pos()) {
    return NULL;
  }
  clear_has_last_pos();
  return last_pos_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionQueryOrderResp::set_allocated_last_pos(::std::string* last_pos) {
  if (last_pos != NULL) {
    set_has_last_pos();
  } else {
    clear_has_last_pos();
  }
  last_pos_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_pos);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionQueryOrderResp.last_pos)
}

// optional string request_id = 4;
inline bool OptionQueryOrderResp::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptionQueryOrderResp::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OptionQueryOrderResp::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OptionQueryOrderResp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& OptionQueryOrderResp::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrderResp.request_id)
  return request_id_.GetNoArena();
}
inline void OptionQueryOrderResp::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrderResp.request_id)
}
#if LANG_CXX11
inline void OptionQueryOrderResp::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionQueryOrderResp.request_id)
}
#endif
inline void OptionQueryOrderResp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionQueryOrderResp.request_id)
}
inline void OptionQueryOrderResp::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionQueryOrderResp.request_id)
}
inline ::std::string* OptionQueryOrderResp::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionQueryOrderResp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionQueryOrderResp::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.OptionQueryOrderResp.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionQueryOrderResp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionQueryOrderResp.request_id)
}

// -------------------------------------------------------------------

// OptionQueryOrdersReqt

// optional int32 funcid = 1 [default = 13002003];
inline bool OptionQueryOrdersReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OptionQueryOrdersReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OptionQueryOrdersReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OptionQueryOrdersReqt::clear_funcid() {
  funcid_ = 13002003;
  clear_has_funcid();
}
inline ::google::protobuf::int32 OptionQueryOrdersReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrdersReqt.funcid)
  return funcid_;
}
inline void OptionQueryOrdersReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrdersReqt.funcid)
}

// optional string order_group = 2 [default = ""];
inline bool OptionQueryOrdersReqt::has_order_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptionQueryOrdersReqt::set_has_order_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptionQueryOrdersReqt::clear_has_order_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptionQueryOrdersReqt::clear_order_group() {
  order_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_group();
}
inline const ::std::string& OptionQueryOrdersReqt::order_group() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrdersReqt.order_group)
  return order_group_.GetNoArena();
}
inline void OptionQueryOrdersReqt::set_order_group(const ::std::string& value) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrdersReqt.order_group)
}
#if LANG_CXX11
inline void OptionQueryOrdersReqt::set_order_group(::std::string&& value) {
  set_has_order_group();
  order_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionQueryOrdersReqt.order_group)
}
#endif
inline void OptionQueryOrdersReqt::set_order_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionQueryOrdersReqt.order_group)
}
inline void OptionQueryOrdersReqt::set_order_group(const char* value, size_t size) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionQueryOrdersReqt.order_group)
}
inline ::std::string* OptionQueryOrdersReqt::mutable_order_group() {
  set_has_order_group();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionQueryOrdersReqt.order_group)
  return order_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionQueryOrdersReqt::release_order_group() {
  // @@protoc_insertion_point(field_release:autotrade.OptionQueryOrdersReqt.order_group)
  if (!has_order_group()) {
    return NULL;
  }
  clear_has_order_group();
  return order_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionQueryOrdersReqt::set_allocated_order_group(::std::string* order_group) {
  if (order_group != NULL) {
    set_has_order_group();
  } else {
    clear_has_order_group();
  }
  order_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_group);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionQueryOrdersReqt.order_group)
}

// optional string request_id = 3;
inline bool OptionQueryOrdersReqt::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptionQueryOrdersReqt::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OptionQueryOrdersReqt::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OptionQueryOrdersReqt::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& OptionQueryOrdersReqt::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrdersReqt.request_id)
  return request_id_.GetNoArena();
}
inline void OptionQueryOrdersReqt::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrdersReqt.request_id)
}
#if LANG_CXX11
inline void OptionQueryOrdersReqt::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionQueryOrdersReqt.request_id)
}
#endif
inline void OptionQueryOrdersReqt::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionQueryOrdersReqt.request_id)
}
inline void OptionQueryOrdersReqt::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionQueryOrdersReqt.request_id)
}
inline ::std::string* OptionQueryOrdersReqt::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionQueryOrdersReqt.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionQueryOrdersReqt::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.OptionQueryOrdersReqt.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionQueryOrdersReqt::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionQueryOrdersReqt.request_id)
}

// optional int64 request_time = 4 [default = 0];
inline bool OptionQueryOrdersReqt::has_request_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OptionQueryOrdersReqt::set_has_request_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OptionQueryOrdersReqt::clear_has_request_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OptionQueryOrdersReqt::clear_request_time() {
  request_time_ = GOOGLE_LONGLONG(0);
  clear_has_request_time();
}
inline ::google::protobuf::int64 OptionQueryOrdersReqt::request_time() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrdersReqt.request_time)
  return request_time_;
}
inline void OptionQueryOrdersReqt::set_request_time(::google::protobuf::int64 value) {
  set_has_request_time();
  request_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrdersReqt.request_time)
}

// optional int64 active_interval = 5 [default = 1000];
inline bool OptionQueryOrdersReqt::has_active_interval() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OptionQueryOrdersReqt::set_has_active_interval() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OptionQueryOrdersReqt::clear_has_active_interval() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OptionQueryOrdersReqt::clear_active_interval() {
  active_interval_ = GOOGLE_LONGLONG(1000);
  clear_has_active_interval();
}
inline ::google::protobuf::int64 OptionQueryOrdersReqt::active_interval() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrdersReqt.active_interval)
  return active_interval_;
}
inline void OptionQueryOrdersReqt::set_active_interval(::google::protobuf::int64 value) {
  set_has_active_interval();
  active_interval_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrdersReqt.active_interval)
}

// -------------------------------------------------------------------

// OptionQueryOrdersResp_OrderDetail

// optional string code = 1;
inline bool OptionQueryOrdersResp_OrderDetail::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptionQueryOrdersResp_OrderDetail::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& OptionQueryOrdersResp_OrderDetail::code() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrdersResp.OrderDetail.code)
  return code_.GetNoArena();
}
inline void OptionQueryOrdersResp_OrderDetail::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrdersResp.OrderDetail.code)
}
#if LANG_CXX11
inline void OptionQueryOrdersResp_OrderDetail::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionQueryOrdersResp.OrderDetail.code)
}
#endif
inline void OptionQueryOrdersResp_OrderDetail::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionQueryOrdersResp.OrderDetail.code)
}
inline void OptionQueryOrdersResp_OrderDetail::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionQueryOrdersResp.OrderDetail.code)
}
inline ::std::string* OptionQueryOrdersResp_OrderDetail::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionQueryOrdersResp.OrderDetail.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionQueryOrdersResp_OrderDetail::release_code() {
  // @@protoc_insertion_point(field_release:autotrade.OptionQueryOrdersResp.OrderDetail.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionQueryOrdersResp_OrderDetail::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionQueryOrdersResp.OrderDetail.code)
}

// optional string name = 2;
inline bool OptionQueryOrdersResp_OrderDetail::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptionQueryOrdersResp_OrderDetail::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& OptionQueryOrdersResp_OrderDetail::name() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrdersResp.OrderDetail.name)
  return name_.GetNoArena();
}
inline void OptionQueryOrdersResp_OrderDetail::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrdersResp.OrderDetail.name)
}
#if LANG_CXX11
inline void OptionQueryOrdersResp_OrderDetail::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionQueryOrdersResp.OrderDetail.name)
}
#endif
inline void OptionQueryOrdersResp_OrderDetail::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionQueryOrdersResp.OrderDetail.name)
}
inline void OptionQueryOrdersResp_OrderDetail::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionQueryOrdersResp.OrderDetail.name)
}
inline ::std::string* OptionQueryOrdersResp_OrderDetail::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionQueryOrdersResp.OrderDetail.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionQueryOrdersResp_OrderDetail::release_name() {
  // @@protoc_insertion_point(field_release:autotrade.OptionQueryOrdersResp.OrderDetail.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionQueryOrdersResp_OrderDetail::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionQueryOrdersResp.OrderDetail.name)
}

// optional double price = 3;
inline bool OptionQueryOrdersResp_OrderDetail::has_price() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OptionQueryOrdersResp_OrderDetail::set_has_price() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_has_price() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline double OptionQueryOrdersResp_OrderDetail::price() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrdersResp.OrderDetail.price)
  return price_;
}
inline void OptionQueryOrdersResp_OrderDetail::set_price(double value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrdersResp.OrderDetail.price)
}

// optional int64 qty = 4;
inline bool OptionQueryOrdersResp_OrderDetail::has_qty() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OptionQueryOrdersResp_OrderDetail::set_has_qty() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_has_qty() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_qty() {
  qty_ = GOOGLE_LONGLONG(0);
  clear_has_qty();
}
inline ::google::protobuf::int64 OptionQueryOrdersResp_OrderDetail::qty() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrdersResp.OrderDetail.qty)
  return qty_;
}
inline void OptionQueryOrdersResp_OrderDetail::set_qty(::google::protobuf::int64 value) {
  set_has_qty();
  qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrdersResp.OrderDetail.qty)
}

// optional int64 bsflag = 5;
inline bool OptionQueryOrdersResp_OrderDetail::has_bsflag() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OptionQueryOrdersResp_OrderDetail::set_has_bsflag() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_has_bsflag() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_bsflag() {
  bsflag_ = GOOGLE_LONGLONG(0);
  clear_has_bsflag();
}
inline ::google::protobuf::int64 OptionQueryOrdersResp_OrderDetail::bsflag() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrdersResp.OrderDetail.bsflag)
  return bsflag_;
}
inline void OptionQueryOrdersResp_OrderDetail::set_bsflag(::google::protobuf::int64 value) {
  set_has_bsflag();
  bsflag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrdersResp.OrderDetail.bsflag)
}

// optional int64 market = 6;
inline bool OptionQueryOrdersResp_OrderDetail::has_market() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OptionQueryOrdersResp_OrderDetail::set_has_market() {
  _has_bits_[0] |= 0x00001000u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_has_market() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_market() {
  market_ = GOOGLE_LONGLONG(0);
  clear_has_market();
}
inline ::google::protobuf::int64 OptionQueryOrdersResp_OrderDetail::market() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrdersResp.OrderDetail.market)
  return market_;
}
inline void OptionQueryOrdersResp_OrderDetail::set_market(::google::protobuf::int64 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrdersResp.OrderDetail.market)
}

// optional string policy_id = 7;
inline bool OptionQueryOrdersResp_OrderDetail::has_policy_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OptionQueryOrdersResp_OrderDetail::set_has_policy_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_has_policy_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_policy_id() {
  policy_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_policy_id();
}
inline const ::std::string& OptionQueryOrdersResp_OrderDetail::policy_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrdersResp.OrderDetail.policy_id)
  return policy_id_.GetNoArena();
}
inline void OptionQueryOrdersResp_OrderDetail::set_policy_id(const ::std::string& value) {
  set_has_policy_id();
  policy_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrdersResp.OrderDetail.policy_id)
}
#if LANG_CXX11
inline void OptionQueryOrdersResp_OrderDetail::set_policy_id(::std::string&& value) {
  set_has_policy_id();
  policy_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionQueryOrdersResp.OrderDetail.policy_id)
}
#endif
inline void OptionQueryOrdersResp_OrderDetail::set_policy_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_policy_id();
  policy_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionQueryOrdersResp.OrderDetail.policy_id)
}
inline void OptionQueryOrdersResp_OrderDetail::set_policy_id(const char* value, size_t size) {
  set_has_policy_id();
  policy_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionQueryOrdersResp.OrderDetail.policy_id)
}
inline ::std::string* OptionQueryOrdersResp_OrderDetail::mutable_policy_id() {
  set_has_policy_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionQueryOrdersResp.OrderDetail.policy_id)
  return policy_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionQueryOrdersResp_OrderDetail::release_policy_id() {
  // @@protoc_insertion_point(field_release:autotrade.OptionQueryOrdersResp.OrderDetail.policy_id)
  if (!has_policy_id()) {
    return NULL;
  }
  clear_has_policy_id();
  return policy_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionQueryOrdersResp_OrderDetail::set_allocated_policy_id(::std::string* policy_id) {
  if (policy_id != NULL) {
    set_has_policy_id();
  } else {
    clear_has_policy_id();
  }
  policy_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), policy_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionQueryOrdersResp.OrderDetail.policy_id)
}

// optional string index_id = 8;
inline bool OptionQueryOrdersResp_OrderDetail::has_index_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OptionQueryOrdersResp_OrderDetail::set_has_index_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_has_index_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_index_id() {
  index_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_index_id();
}
inline const ::std::string& OptionQueryOrdersResp_OrderDetail::index_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrdersResp.OrderDetail.index_id)
  return index_id_.GetNoArena();
}
inline void OptionQueryOrdersResp_OrderDetail::set_index_id(const ::std::string& value) {
  set_has_index_id();
  index_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrdersResp.OrderDetail.index_id)
}
#if LANG_CXX11
inline void OptionQueryOrdersResp_OrderDetail::set_index_id(::std::string&& value) {
  set_has_index_id();
  index_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionQueryOrdersResp.OrderDetail.index_id)
}
#endif
inline void OptionQueryOrdersResp_OrderDetail::set_index_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_index_id();
  index_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionQueryOrdersResp.OrderDetail.index_id)
}
inline void OptionQueryOrdersResp_OrderDetail::set_index_id(const char* value, size_t size) {
  set_has_index_id();
  index_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionQueryOrdersResp.OrderDetail.index_id)
}
inline ::std::string* OptionQueryOrdersResp_OrderDetail::mutable_index_id() {
  set_has_index_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionQueryOrdersResp.OrderDetail.index_id)
  return index_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionQueryOrdersResp_OrderDetail::release_index_id() {
  // @@protoc_insertion_point(field_release:autotrade.OptionQueryOrdersResp.OrderDetail.index_id)
  if (!has_index_id()) {
    return NULL;
  }
  clear_has_index_id();
  return index_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionQueryOrdersResp_OrderDetail::set_allocated_index_id(::std::string* index_id) {
  if (index_id != NULL) {
    set_has_index_id();
  } else {
    clear_has_index_id();
  }
  index_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), index_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionQueryOrdersResp.OrderDetail.index_id)
}

// optional int32 kpcbj = 9;
inline bool OptionQueryOrdersResp_OrderDetail::has_kpcbj() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void OptionQueryOrdersResp_OrderDetail::set_has_kpcbj() {
  _has_bits_[0] |= 0x00002000u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_has_kpcbj() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_kpcbj() {
  kpcbj_ = 0;
  clear_has_kpcbj();
}
inline ::google::protobuf::int32 OptionQueryOrdersResp_OrderDetail::kpcbj() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrdersResp.OrderDetail.kpcbj)
  return kpcbj_;
}
inline void OptionQueryOrdersResp_OrderDetail::set_kpcbj(::google::protobuf::int32 value) {
  set_has_kpcbj();
  kpcbj_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrdersResp.OrderDetail.kpcbj)
}

// optional int32 order_price_type = 10 [default = 0];
inline bool OptionQueryOrdersResp_OrderDetail::has_order_price_type() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void OptionQueryOrdersResp_OrderDetail::set_has_order_price_type() {
  _has_bits_[0] |= 0x00004000u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_has_order_price_type() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_order_price_type() {
  order_price_type_ = 0;
  clear_has_order_price_type();
}
inline ::google::protobuf::int32 OptionQueryOrdersResp_OrderDetail::order_price_type() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrdersResp.OrderDetail.order_price_type)
  return order_price_type_;
}
inline void OptionQueryOrdersResp_OrderDetail::set_order_price_type(::google::protobuf::int32 value) {
  set_has_order_price_type();
  order_price_type_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrdersResp.OrderDetail.order_price_type)
}

// optional int32 covered_flag = 11 [default = 0];
inline bool OptionQueryOrdersResp_OrderDetail::has_covered_flag() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void OptionQueryOrdersResp_OrderDetail::set_has_covered_flag() {
  _has_bits_[0] |= 0x00008000u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_has_covered_flag() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_covered_flag() {
  covered_flag_ = 0;
  clear_has_covered_flag();
}
inline ::google::protobuf::int32 OptionQueryOrdersResp_OrderDetail::covered_flag() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrdersResp.OrderDetail.covered_flag)
  return covered_flag_;
}
inline void OptionQueryOrdersResp_OrderDetail::set_covered_flag(::google::protobuf::int32 value) {
  set_has_covered_flag();
  covered_flag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrdersResp.OrderDetail.covered_flag)
}

// optional string match_condition = 12 [default = "GFD"];
inline bool OptionQueryOrdersResp_OrderDetail::has_match_condition() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OptionQueryOrdersResp_OrderDetail::set_has_match_condition() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_has_match_condition() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_match_condition() {
  match_condition_.ClearToDefaultNoArena(&::autotrade::OptionQueryOrdersResp_OrderDetail::_i_give_permission_to_break_this_code_default_match_condition_.get());
  clear_has_match_condition();
}
inline const ::std::string& OptionQueryOrdersResp_OrderDetail::match_condition() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrdersResp.OrderDetail.match_condition)
  return match_condition_.GetNoArena();
}
inline void OptionQueryOrdersResp_OrderDetail::set_match_condition(const ::std::string& value) {
  set_has_match_condition();
  match_condition_.SetNoArena(&::autotrade::OptionQueryOrdersResp_OrderDetail::_i_give_permission_to_break_this_code_default_match_condition_.get(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrdersResp.OrderDetail.match_condition)
}
#if LANG_CXX11
inline void OptionQueryOrdersResp_OrderDetail::set_match_condition(::std::string&& value) {
  set_has_match_condition();
  match_condition_.SetNoArena(
    &::autotrade::OptionQueryOrdersResp_OrderDetail::_i_give_permission_to_break_this_code_default_match_condition_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionQueryOrdersResp.OrderDetail.match_condition)
}
#endif
inline void OptionQueryOrdersResp_OrderDetail::set_match_condition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_match_condition();
  match_condition_.SetNoArena(&::autotrade::OptionQueryOrdersResp_OrderDetail::_i_give_permission_to_break_this_code_default_match_condition_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionQueryOrdersResp.OrderDetail.match_condition)
}
inline void OptionQueryOrdersResp_OrderDetail::set_match_condition(const char* value, size_t size) {
  set_has_match_condition();
  match_condition_.SetNoArena(&::autotrade::OptionQueryOrdersResp_OrderDetail::_i_give_permission_to_break_this_code_default_match_condition_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionQueryOrdersResp.OrderDetail.match_condition)
}
inline ::std::string* OptionQueryOrdersResp_OrderDetail::mutable_match_condition() {
  set_has_match_condition();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionQueryOrdersResp.OrderDetail.match_condition)
  return match_condition_.MutableNoArena(&::autotrade::OptionQueryOrdersResp_OrderDetail::_i_give_permission_to_break_this_code_default_match_condition_.get());
}
inline ::std::string* OptionQueryOrdersResp_OrderDetail::release_match_condition() {
  // @@protoc_insertion_point(field_release:autotrade.OptionQueryOrdersResp.OrderDetail.match_condition)
  if (!has_match_condition()) {
    return NULL;
  }
  clear_has_match_condition();
  return match_condition_.ReleaseNonDefaultNoArena(&::autotrade::OptionQueryOrdersResp_OrderDetail::_i_give_permission_to_break_this_code_default_match_condition_.get());
}
inline void OptionQueryOrdersResp_OrderDetail::set_allocated_match_condition(::std::string* match_condition) {
  if (match_condition != NULL) {
    set_has_match_condition();
  } else {
    clear_has_match_condition();
  }
  match_condition_.SetAllocatedNoArena(&::autotrade::OptionQueryOrdersResp_OrderDetail::_i_give_permission_to_break_this_code_default_match_condition_.get(), match_condition);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionQueryOrdersResp.OrderDetail.match_condition)
}

// optional string trader_id = 13;
inline bool OptionQueryOrdersResp_OrderDetail::has_trader_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OptionQueryOrdersResp_OrderDetail::set_has_trader_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_has_trader_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_trader_id() {
  trader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trader_id();
}
inline const ::std::string& OptionQueryOrdersResp_OrderDetail::trader_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrdersResp.OrderDetail.trader_id)
  return trader_id_.GetNoArena();
}
inline void OptionQueryOrdersResp_OrderDetail::set_trader_id(const ::std::string& value) {
  set_has_trader_id();
  trader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrdersResp.OrderDetail.trader_id)
}
#if LANG_CXX11
inline void OptionQueryOrdersResp_OrderDetail::set_trader_id(::std::string&& value) {
  set_has_trader_id();
  trader_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionQueryOrdersResp.OrderDetail.trader_id)
}
#endif
inline void OptionQueryOrdersResp_OrderDetail::set_trader_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trader_id();
  trader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionQueryOrdersResp.OrderDetail.trader_id)
}
inline void OptionQueryOrdersResp_OrderDetail::set_trader_id(const char* value, size_t size) {
  set_has_trader_id();
  trader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionQueryOrdersResp.OrderDetail.trader_id)
}
inline ::std::string* OptionQueryOrdersResp_OrderDetail::mutable_trader_id() {
  set_has_trader_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionQueryOrdersResp.OrderDetail.trader_id)
  return trader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionQueryOrdersResp_OrderDetail::release_trader_id() {
  // @@protoc_insertion_point(field_release:autotrade.OptionQueryOrdersResp.OrderDetail.trader_id)
  if (!has_trader_id()) {
    return NULL;
  }
  clear_has_trader_id();
  return trader_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionQueryOrdersResp_OrderDetail::set_allocated_trader_id(::std::string* trader_id) {
  if (trader_id != NULL) {
    set_has_trader_id();
  } else {
    clear_has_trader_id();
  }
  trader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trader_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionQueryOrdersResp.OrderDetail.trader_id)
}

// optional string orderno = 14;
inline bool OptionQueryOrdersResp_OrderDetail::has_orderno() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OptionQueryOrdersResp_OrderDetail::set_has_orderno() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_has_orderno() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_orderno() {
  orderno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_orderno();
}
inline const ::std::string& OptionQueryOrdersResp_OrderDetail::orderno() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrdersResp.OrderDetail.orderno)
  return orderno_.GetNoArena();
}
inline void OptionQueryOrdersResp_OrderDetail::set_orderno(const ::std::string& value) {
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrdersResp.OrderDetail.orderno)
}
#if LANG_CXX11
inline void OptionQueryOrdersResp_OrderDetail::set_orderno(::std::string&& value) {
  set_has_orderno();
  orderno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionQueryOrdersResp.OrderDetail.orderno)
}
#endif
inline void OptionQueryOrdersResp_OrderDetail::set_orderno(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionQueryOrdersResp.OrderDetail.orderno)
}
inline void OptionQueryOrdersResp_OrderDetail::set_orderno(const char* value, size_t size) {
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionQueryOrdersResp.OrderDetail.orderno)
}
inline ::std::string* OptionQueryOrdersResp_OrderDetail::mutable_orderno() {
  set_has_orderno();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionQueryOrdersResp.OrderDetail.orderno)
  return orderno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionQueryOrdersResp_OrderDetail::release_orderno() {
  // @@protoc_insertion_point(field_release:autotrade.OptionQueryOrdersResp.OrderDetail.orderno)
  if (!has_orderno()) {
    return NULL;
  }
  clear_has_orderno();
  return orderno_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionQueryOrdersResp_OrderDetail::set_allocated_orderno(::std::string* orderno) {
  if (orderno != NULL) {
    set_has_orderno();
  } else {
    clear_has_orderno();
  }
  orderno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderno);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionQueryOrdersResp.OrderDetail.orderno)
}

// optional uint32 order_time = 15;
inline bool OptionQueryOrdersResp_OrderDetail::has_order_time() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void OptionQueryOrdersResp_OrderDetail::set_has_order_time() {
  _has_bits_[0] |= 0x00010000u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_has_order_time() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_order_time() {
  order_time_ = 0u;
  clear_has_order_time();
}
inline ::google::protobuf::uint32 OptionQueryOrdersResp_OrderDetail::order_time() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrdersResp.OrderDetail.order_time)
  return order_time_;
}
inline void OptionQueryOrdersResp_OrderDetail::set_order_time(::google::protobuf::uint32 value) {
  set_has_order_time();
  order_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrdersResp.OrderDetail.order_time)
}

// optional int64 match_qty = 16;
inline bool OptionQueryOrdersResp_OrderDetail::has_match_qty() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void OptionQueryOrdersResp_OrderDetail::set_has_match_qty() {
  _has_bits_[0] |= 0x00020000u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_has_match_qty() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_match_qty() {
  match_qty_ = GOOGLE_LONGLONG(0);
  clear_has_match_qty();
}
inline ::google::protobuf::int64 OptionQueryOrdersResp_OrderDetail::match_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrdersResp.OrderDetail.match_qty)
  return match_qty_;
}
inline void OptionQueryOrdersResp_OrderDetail::set_match_qty(::google::protobuf::int64 value) {
  set_has_match_qty();
  match_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrdersResp.OrderDetail.match_qty)
}

// optional double match_amt = 17;
inline bool OptionQueryOrdersResp_OrderDetail::has_match_amt() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void OptionQueryOrdersResp_OrderDetail::set_has_match_amt() {
  _has_bits_[0] |= 0x00040000u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_has_match_amt() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_match_amt() {
  match_amt_ = 0;
  clear_has_match_amt();
}
inline double OptionQueryOrdersResp_OrderDetail::match_amt() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrdersResp.OrderDetail.match_amt)
  return match_amt_;
}
inline void OptionQueryOrdersResp_OrderDetail::set_match_amt(double value) {
  set_has_match_amt();
  match_amt_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrdersResp.OrderDetail.match_amt)
}

// optional double match_price = 18;
inline bool OptionQueryOrdersResp_OrderDetail::has_match_price() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void OptionQueryOrdersResp_OrderDetail::set_has_match_price() {
  _has_bits_[0] |= 0x00080000u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_has_match_price() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_match_price() {
  match_price_ = 0;
  clear_has_match_price();
}
inline double OptionQueryOrdersResp_OrderDetail::match_price() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrdersResp.OrderDetail.match_price)
  return match_price_;
}
inline void OptionQueryOrdersResp_OrderDetail::set_match_price(double value) {
  set_has_match_price();
  match_price_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrdersResp.OrderDetail.match_price)
}

// optional int64 cancel_qty = 19;
inline bool OptionQueryOrdersResp_OrderDetail::has_cancel_qty() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void OptionQueryOrdersResp_OrderDetail::set_has_cancel_qty() {
  _has_bits_[0] |= 0x00100000u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_has_cancel_qty() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_cancel_qty() {
  cancel_qty_ = GOOGLE_LONGLONG(0);
  clear_has_cancel_qty();
}
inline ::google::protobuf::int64 OptionQueryOrdersResp_OrderDetail::cancel_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrdersResp.OrderDetail.cancel_qty)
  return cancel_qty_;
}
inline void OptionQueryOrdersResp_OrderDetail::set_cancel_qty(::google::protobuf::int64 value) {
  set_has_cancel_qty();
  cancel_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrdersResp.OrderDetail.cancel_qty)
}

// optional int32 state = 20;
inline bool OptionQueryOrdersResp_OrderDetail::has_state() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void OptionQueryOrdersResp_OrderDetail::set_has_state() {
  _has_bits_[0] |= 0x00200000u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_has_state() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 OptionQueryOrdersResp_OrderDetail::state() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrdersResp.OrderDetail.state)
  return state_;
}
inline void OptionQueryOrdersResp_OrderDetail::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrdersResp.OrderDetail.state)
}

// optional string info = 21;
inline bool OptionQueryOrdersResp_OrderDetail::has_info() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OptionQueryOrdersResp_OrderDetail::set_has_info() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_has_info() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_info();
}
inline const ::std::string& OptionQueryOrdersResp_OrderDetail::info() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrdersResp.OrderDetail.info)
  return info_.GetNoArena();
}
inline void OptionQueryOrdersResp_OrderDetail::set_info(const ::std::string& value) {
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrdersResp.OrderDetail.info)
}
#if LANG_CXX11
inline void OptionQueryOrdersResp_OrderDetail::set_info(::std::string&& value) {
  set_has_info();
  info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionQueryOrdersResp.OrderDetail.info)
}
#endif
inline void OptionQueryOrdersResp_OrderDetail::set_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionQueryOrdersResp.OrderDetail.info)
}
inline void OptionQueryOrdersResp_OrderDetail::set_info(const char* value, size_t size) {
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionQueryOrdersResp.OrderDetail.info)
}
inline ::std::string* OptionQueryOrdersResp_OrderDetail::mutable_info() {
  set_has_info();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionQueryOrdersResp.OrderDetail.info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionQueryOrdersResp_OrderDetail::release_info() {
  // @@protoc_insertion_point(field_release:autotrade.OptionQueryOrdersResp.OrderDetail.info)
  if (!has_info()) {
    return NULL;
  }
  clear_has_info();
  return info_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionQueryOrdersResp_OrderDetail::set_allocated_info(::std::string* info) {
  if (info != NULL) {
    set_has_info();
  } else {
    clear_has_info();
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionQueryOrdersResp.OrderDetail.info)
}

// optional string order_id = 22;
inline bool OptionQueryOrdersResp_OrderDetail::has_order_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OptionQueryOrdersResp_OrderDetail::set_has_order_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OptionQueryOrdersResp_OrderDetail::clear_order_id() {
  order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_id();
}
inline const ::std::string& OptionQueryOrdersResp_OrderDetail::order_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrdersResp.OrderDetail.order_id)
  return order_id_.GetNoArena();
}
inline void OptionQueryOrdersResp_OrderDetail::set_order_id(const ::std::string& value) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrdersResp.OrderDetail.order_id)
}
#if LANG_CXX11
inline void OptionQueryOrdersResp_OrderDetail::set_order_id(::std::string&& value) {
  set_has_order_id();
  order_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionQueryOrdersResp.OrderDetail.order_id)
}
#endif
inline void OptionQueryOrdersResp_OrderDetail::set_order_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionQueryOrdersResp.OrderDetail.order_id)
}
inline void OptionQueryOrdersResp_OrderDetail::set_order_id(const char* value, size_t size) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionQueryOrdersResp.OrderDetail.order_id)
}
inline ::std::string* OptionQueryOrdersResp_OrderDetail::mutable_order_id() {
  set_has_order_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionQueryOrdersResp.OrderDetail.order_id)
  return order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionQueryOrdersResp_OrderDetail::release_order_id() {
  // @@protoc_insertion_point(field_release:autotrade.OptionQueryOrdersResp.OrderDetail.order_id)
  if (!has_order_id()) {
    return NULL;
  }
  clear_has_order_id();
  return order_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionQueryOrdersResp_OrderDetail::set_allocated_order_id(::std::string* order_id) {
  if (order_id != NULL) {
    set_has_order_id();
  } else {
    clear_has_order_id();
  }
  order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionQueryOrdersResp.OrderDetail.order_id)
}

// -------------------------------------------------------------------

// OptionQueryOrdersResp

// optional int32 funcid = 1 [default = 13102003];
inline bool OptionQueryOrdersResp::has_funcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptionQueryOrdersResp::set_has_funcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OptionQueryOrdersResp::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OptionQueryOrdersResp::clear_funcid() {
  funcid_ = 13102003;
  clear_has_funcid();
}
inline ::google::protobuf::int32 OptionQueryOrdersResp::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrdersResp.funcid)
  return funcid_;
}
inline void OptionQueryOrdersResp::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrdersResp.funcid)
}

// repeated .autotrade.OptionQueryOrdersResp.OrderDetail detail_list = 2;
inline int OptionQueryOrdersResp::detail_list_size() const {
  return detail_list_.size();
}
inline void OptionQueryOrdersResp::clear_detail_list() {
  detail_list_.Clear();
}
inline ::autotrade::OptionQueryOrdersResp_OrderDetail* OptionQueryOrdersResp::mutable_detail_list(int index) {
  // @@protoc_insertion_point(field_mutable:autotrade.OptionQueryOrdersResp.detail_list)
  return detail_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::autotrade::OptionQueryOrdersResp_OrderDetail >*
OptionQueryOrdersResp::mutable_detail_list() {
  // @@protoc_insertion_point(field_mutable_list:autotrade.OptionQueryOrdersResp.detail_list)
  return &detail_list_;
}
inline const ::autotrade::OptionQueryOrdersResp_OrderDetail& OptionQueryOrdersResp::detail_list(int index) const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrdersResp.detail_list)
  return detail_list_.Get(index);
}
inline ::autotrade::OptionQueryOrdersResp_OrderDetail* OptionQueryOrdersResp::add_detail_list() {
  // @@protoc_insertion_point(field_add:autotrade.OptionQueryOrdersResp.detail_list)
  return detail_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::autotrade::OptionQueryOrdersResp_OrderDetail >&
OptionQueryOrdersResp::detail_list() const {
  // @@protoc_insertion_point(field_list:autotrade.OptionQueryOrdersResp.detail_list)
  return detail_list_;
}

// optional string request_id = 3;
inline bool OptionQueryOrdersResp::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptionQueryOrdersResp::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptionQueryOrdersResp::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptionQueryOrdersResp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& OptionQueryOrdersResp::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryOrdersResp.request_id)
  return request_id_.GetNoArena();
}
inline void OptionQueryOrdersResp::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryOrdersResp.request_id)
}
#if LANG_CXX11
inline void OptionQueryOrdersResp::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionQueryOrdersResp.request_id)
}
#endif
inline void OptionQueryOrdersResp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionQueryOrdersResp.request_id)
}
inline void OptionQueryOrdersResp::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionQueryOrdersResp.request_id)
}
inline ::std::string* OptionQueryOrdersResp::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionQueryOrdersResp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionQueryOrdersResp::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.OptionQueryOrdersResp.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionQueryOrdersResp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionQueryOrdersResp.request_id)
}

// -------------------------------------------------------------------

// OptionQueryCaptialReqt

// optional int32 funcid = 1 [default = 13002010];
inline bool OptionQueryCaptialReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OptionQueryCaptialReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OptionQueryCaptialReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OptionQueryCaptialReqt::clear_funcid() {
  funcid_ = 13002010;
  clear_has_funcid();
}
inline ::google::protobuf::int32 OptionQueryCaptialReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryCaptialReqt.funcid)
  return funcid_;
}
inline void OptionQueryCaptialReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryCaptialReqt.funcid)
}

// optional string moneytype = 2;
inline bool OptionQueryCaptialReqt::has_moneytype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptionQueryCaptialReqt::set_has_moneytype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptionQueryCaptialReqt::clear_has_moneytype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptionQueryCaptialReqt::clear_moneytype() {
  moneytype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_moneytype();
}
inline const ::std::string& OptionQueryCaptialReqt::moneytype() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryCaptialReqt.moneytype)
  return moneytype_.GetNoArena();
}
inline void OptionQueryCaptialReqt::set_moneytype(const ::std::string& value) {
  set_has_moneytype();
  moneytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryCaptialReqt.moneytype)
}
#if LANG_CXX11
inline void OptionQueryCaptialReqt::set_moneytype(::std::string&& value) {
  set_has_moneytype();
  moneytype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionQueryCaptialReqt.moneytype)
}
#endif
inline void OptionQueryCaptialReqt::set_moneytype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_moneytype();
  moneytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionQueryCaptialReqt.moneytype)
}
inline void OptionQueryCaptialReqt::set_moneytype(const char* value, size_t size) {
  set_has_moneytype();
  moneytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionQueryCaptialReqt.moneytype)
}
inline ::std::string* OptionQueryCaptialReqt::mutable_moneytype() {
  set_has_moneytype();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionQueryCaptialReqt.moneytype)
  return moneytype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionQueryCaptialReqt::release_moneytype() {
  // @@protoc_insertion_point(field_release:autotrade.OptionQueryCaptialReqt.moneytype)
  if (!has_moneytype()) {
    return NULL;
  }
  clear_has_moneytype();
  return moneytype_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionQueryCaptialReqt::set_allocated_moneytype(::std::string* moneytype) {
  if (moneytype != NULL) {
    set_has_moneytype();
  } else {
    clear_has_moneytype();
  }
  moneytype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), moneytype);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionQueryCaptialReqt.moneytype)
}

// optional string request_id = 3;
inline bool OptionQueryCaptialReqt::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptionQueryCaptialReqt::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OptionQueryCaptialReqt::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OptionQueryCaptialReqt::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& OptionQueryCaptialReqt::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryCaptialReqt.request_id)
  return request_id_.GetNoArena();
}
inline void OptionQueryCaptialReqt::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryCaptialReqt.request_id)
}
#if LANG_CXX11
inline void OptionQueryCaptialReqt::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionQueryCaptialReqt.request_id)
}
#endif
inline void OptionQueryCaptialReqt::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionQueryCaptialReqt.request_id)
}
inline void OptionQueryCaptialReqt::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionQueryCaptialReqt.request_id)
}
inline ::std::string* OptionQueryCaptialReqt::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionQueryCaptialReqt.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionQueryCaptialReqt::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.OptionQueryCaptialReqt.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionQueryCaptialReqt::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionQueryCaptialReqt.request_id)
}

// optional int64 request_time = 4 [default = 0];
inline bool OptionQueryCaptialReqt::has_request_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OptionQueryCaptialReqt::set_has_request_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OptionQueryCaptialReqt::clear_has_request_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OptionQueryCaptialReqt::clear_request_time() {
  request_time_ = GOOGLE_LONGLONG(0);
  clear_has_request_time();
}
inline ::google::protobuf::int64 OptionQueryCaptialReqt::request_time() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryCaptialReqt.request_time)
  return request_time_;
}
inline void OptionQueryCaptialReqt::set_request_time(::google::protobuf::int64 value) {
  set_has_request_time();
  request_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryCaptialReqt.request_time)
}

// optional int64 active_interval = 5 [default = 1000];
inline bool OptionQueryCaptialReqt::has_active_interval() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OptionQueryCaptialReqt::set_has_active_interval() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OptionQueryCaptialReqt::clear_has_active_interval() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OptionQueryCaptialReqt::clear_active_interval() {
  active_interval_ = GOOGLE_LONGLONG(1000);
  clear_has_active_interval();
}
inline ::google::protobuf::int64 OptionQueryCaptialReqt::active_interval() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryCaptialReqt.active_interval)
  return active_interval_;
}
inline void OptionQueryCaptialReqt::set_active_interval(::google::protobuf::int64 value) {
  set_has_active_interval();
  active_interval_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryCaptialReqt.active_interval)
}

// -------------------------------------------------------------------

// OptionCapital

// optional int32 funcid = 1 [default = 13102010];
inline bool OptionCapital::has_funcid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OptionCapital::set_has_funcid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OptionCapital::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OptionCapital::clear_funcid() {
  funcid_ = 13102010;
  clear_has_funcid();
}
inline ::google::protobuf::int32 OptionCapital::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionCapital.funcid)
  return funcid_;
}
inline void OptionCapital::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionCapital.funcid)
}

// optional string moneytype = 2;
inline bool OptionCapital::has_moneytype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptionCapital::set_has_moneytype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptionCapital::clear_has_moneytype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptionCapital::clear_moneytype() {
  moneytype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_moneytype();
}
inline const ::std::string& OptionCapital::moneytype() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionCapital.moneytype)
  return moneytype_.GetNoArena();
}
inline void OptionCapital::set_moneytype(const ::std::string& value) {
  set_has_moneytype();
  moneytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionCapital.moneytype)
}
#if LANG_CXX11
inline void OptionCapital::set_moneytype(::std::string&& value) {
  set_has_moneytype();
  moneytype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionCapital.moneytype)
}
#endif
inline void OptionCapital::set_moneytype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_moneytype();
  moneytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionCapital.moneytype)
}
inline void OptionCapital::set_moneytype(const char* value, size_t size) {
  set_has_moneytype();
  moneytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionCapital.moneytype)
}
inline ::std::string* OptionCapital::mutable_moneytype() {
  set_has_moneytype();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionCapital.moneytype)
  return moneytype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionCapital::release_moneytype() {
  // @@protoc_insertion_point(field_release:autotrade.OptionCapital.moneytype)
  if (!has_moneytype()) {
    return NULL;
  }
  clear_has_moneytype();
  return moneytype_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionCapital::set_allocated_moneytype(::std::string* moneytype) {
  if (moneytype != NULL) {
    set_has_moneytype();
  } else {
    clear_has_moneytype();
  }
  moneytype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), moneytype);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionCapital.moneytype)
}

// required double fund_bal = 3;
inline bool OptionCapital::has_fund_bal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OptionCapital::set_has_fund_bal() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OptionCapital::clear_has_fund_bal() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OptionCapital::clear_fund_bal() {
  fund_bal_ = 0;
  clear_has_fund_bal();
}
inline double OptionCapital::fund_bal() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionCapital.fund_bal)
  return fund_bal_;
}
inline void OptionCapital::set_fund_bal(double value) {
  set_has_fund_bal();
  fund_bal_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionCapital.fund_bal)
}

// required double fund_ava = 4;
inline bool OptionCapital::has_fund_ava() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OptionCapital::set_has_fund_ava() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OptionCapital::clear_has_fund_ava() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OptionCapital::clear_fund_ava() {
  fund_ava_ = 0;
  clear_has_fund_ava();
}
inline double OptionCapital::fund_ava() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionCapital.fund_ava)
  return fund_ava_;
}
inline void OptionCapital::set_fund_ava(double value) {
  set_has_fund_ava();
  fund_ava_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionCapital.fund_ava)
}

// required double market_value = 5;
inline bool OptionCapital::has_market_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OptionCapital::set_has_market_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OptionCapital::clear_has_market_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OptionCapital::clear_market_value() {
  market_value_ = 0;
  clear_has_market_value();
}
inline double OptionCapital::market_value() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionCapital.market_value)
  return market_value_;
}
inline void OptionCapital::set_market_value(double value) {
  set_has_market_value();
  market_value_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionCapital.market_value)
}

// optional string request_id = 6;
inline bool OptionCapital::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptionCapital::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OptionCapital::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OptionCapital::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& OptionCapital::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionCapital.request_id)
  return request_id_.GetNoArena();
}
inline void OptionCapital::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionCapital.request_id)
}
#if LANG_CXX11
inline void OptionCapital::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionCapital.request_id)
}
#endif
inline void OptionCapital::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionCapital.request_id)
}
inline void OptionCapital::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionCapital.request_id)
}
inline ::std::string* OptionCapital::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionCapital.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionCapital::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.OptionCapital.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionCapital::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionCapital.request_id)
}

// optional double deposit = 7;
inline bool OptionCapital::has_deposit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OptionCapital::set_has_deposit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OptionCapital::clear_has_deposit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OptionCapital::clear_deposit() {
  deposit_ = 0;
  clear_has_deposit();
}
inline double OptionCapital::deposit() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionCapital.deposit)
  return deposit_;
}
inline void OptionCapital::set_deposit(double value) {
  set_has_deposit();
  deposit_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionCapital.deposit)
}

// optional double equity = 8;
inline bool OptionCapital::has_equity() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OptionCapital::set_has_equity() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OptionCapital::clear_has_equity() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OptionCapital::clear_equity() {
  equity_ = 0;
  clear_has_equity();
}
inline double OptionCapital::equity() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionCapital.equity)
  return equity_;
}
inline void OptionCapital::set_equity(double value) {
  set_has_equity();
  equity_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionCapital.equity)
}

// -------------------------------------------------------------------

// OptionQueryPositionReqt

// optional int32 funcid = 1 [default = 13002006];
inline bool OptionQueryPositionReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OptionQueryPositionReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OptionQueryPositionReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OptionQueryPositionReqt::clear_funcid() {
  funcid_ = 13002006;
  clear_has_funcid();
}
inline ::google::protobuf::int32 OptionQueryPositionReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryPositionReqt.funcid)
  return funcid_;
}
inline void OptionQueryPositionReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryPositionReqt.funcid)
}

// optional string code = 2;
inline bool OptionQueryPositionReqt::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptionQueryPositionReqt::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptionQueryPositionReqt::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptionQueryPositionReqt::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& OptionQueryPositionReqt::code() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryPositionReqt.code)
  return code_.GetNoArena();
}
inline void OptionQueryPositionReqt::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryPositionReqt.code)
}
#if LANG_CXX11
inline void OptionQueryPositionReqt::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionQueryPositionReqt.code)
}
#endif
inline void OptionQueryPositionReqt::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionQueryPositionReqt.code)
}
inline void OptionQueryPositionReqt::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionQueryPositionReqt.code)
}
inline ::std::string* OptionQueryPositionReqt::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionQueryPositionReqt.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionQueryPositionReqt::release_code() {
  // @@protoc_insertion_point(field_release:autotrade.OptionQueryPositionReqt.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionQueryPositionReqt::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionQueryPositionReqt.code)
}

// optional int64 market = 3;
inline bool OptionQueryPositionReqt::has_market() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OptionQueryPositionReqt::set_has_market() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OptionQueryPositionReqt::clear_has_market() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OptionQueryPositionReqt::clear_market() {
  market_ = GOOGLE_LONGLONG(0);
  clear_has_market();
}
inline ::google::protobuf::int64 OptionQueryPositionReqt::market() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryPositionReqt.market)
  return market_;
}
inline void OptionQueryPositionReqt::set_market(::google::protobuf::int64 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryPositionReqt.market)
}

// optional uint32 query_count = 4 [default = 500];
inline bool OptionQueryPositionReqt::has_query_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OptionQueryPositionReqt::set_has_query_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OptionQueryPositionReqt::clear_has_query_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OptionQueryPositionReqt::clear_query_count() {
  query_count_ = 500u;
  clear_has_query_count();
}
inline ::google::protobuf::uint32 OptionQueryPositionReqt::query_count() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryPositionReqt.query_count)
  return query_count_;
}
inline void OptionQueryPositionReqt::set_query_count(::google::protobuf::uint32 value) {
  set_has_query_count();
  query_count_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryPositionReqt.query_count)
}

// optional .autotrade.OptionQueryPositionReqt.QueryType query_type = 5 [default = Type_ONCE];
inline bool OptionQueryPositionReqt::has_query_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OptionQueryPositionReqt::set_has_query_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OptionQueryPositionReqt::clear_has_query_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OptionQueryPositionReqt::clear_query_type() {
  query_type_ = 0;
  clear_has_query_type();
}
inline ::autotrade::OptionQueryPositionReqt_QueryType OptionQueryPositionReqt::query_type() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryPositionReqt.query_type)
  return static_cast< ::autotrade::OptionQueryPositionReqt_QueryType >(query_type_);
}
inline void OptionQueryPositionReqt::set_query_type(::autotrade::OptionQueryPositionReqt_QueryType value) {
  assert(::autotrade::OptionQueryPositionReqt_QueryType_IsValid(value));
  set_has_query_type();
  query_type_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryPositionReqt.query_type)
}

// optional string start_pos = 6 [default = ""];
inline bool OptionQueryPositionReqt::has_start_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptionQueryPositionReqt::set_has_start_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OptionQueryPositionReqt::clear_has_start_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OptionQueryPositionReqt::clear_start_pos() {
  start_pos_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_start_pos();
}
inline const ::std::string& OptionQueryPositionReqt::start_pos() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryPositionReqt.start_pos)
  return start_pos_.GetNoArena();
}
inline void OptionQueryPositionReqt::set_start_pos(const ::std::string& value) {
  set_has_start_pos();
  start_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryPositionReqt.start_pos)
}
#if LANG_CXX11
inline void OptionQueryPositionReqt::set_start_pos(::std::string&& value) {
  set_has_start_pos();
  start_pos_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionQueryPositionReqt.start_pos)
}
#endif
inline void OptionQueryPositionReqt::set_start_pos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_start_pos();
  start_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionQueryPositionReqt.start_pos)
}
inline void OptionQueryPositionReqt::set_start_pos(const char* value, size_t size) {
  set_has_start_pos();
  start_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionQueryPositionReqt.start_pos)
}
inline ::std::string* OptionQueryPositionReqt::mutable_start_pos() {
  set_has_start_pos();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionQueryPositionReqt.start_pos)
  return start_pos_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionQueryPositionReqt::release_start_pos() {
  // @@protoc_insertion_point(field_release:autotrade.OptionQueryPositionReqt.start_pos)
  if (!has_start_pos()) {
    return NULL;
  }
  clear_has_start_pos();
  return start_pos_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionQueryPositionReqt::set_allocated_start_pos(::std::string* start_pos) {
  if (start_pos != NULL) {
    set_has_start_pos();
  } else {
    clear_has_start_pos();
  }
  start_pos_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_pos);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionQueryPositionReqt.start_pos)
}

// optional string request_id = 7;
inline bool OptionQueryPositionReqt::has_request_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OptionQueryPositionReqt::set_has_request_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OptionQueryPositionReqt::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OptionQueryPositionReqt::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& OptionQueryPositionReqt::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryPositionReqt.request_id)
  return request_id_.GetNoArena();
}
inline void OptionQueryPositionReqt::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryPositionReqt.request_id)
}
#if LANG_CXX11
inline void OptionQueryPositionReqt::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionQueryPositionReqt.request_id)
}
#endif
inline void OptionQueryPositionReqt::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionQueryPositionReqt.request_id)
}
inline void OptionQueryPositionReqt::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionQueryPositionReqt.request_id)
}
inline ::std::string* OptionQueryPositionReqt::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionQueryPositionReqt.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionQueryPositionReqt::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.OptionQueryPositionReqt.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionQueryPositionReqt::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionQueryPositionReqt.request_id)
}

// optional int64 request_time = 8 [default = 0];
inline bool OptionQueryPositionReqt::has_request_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OptionQueryPositionReqt::set_has_request_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OptionQueryPositionReqt::clear_has_request_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OptionQueryPositionReqt::clear_request_time() {
  request_time_ = GOOGLE_LONGLONG(0);
  clear_has_request_time();
}
inline ::google::protobuf::int64 OptionQueryPositionReqt::request_time() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryPositionReqt.request_time)
  return request_time_;
}
inline void OptionQueryPositionReqt::set_request_time(::google::protobuf::int64 value) {
  set_has_request_time();
  request_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryPositionReqt.request_time)
}

// optional int64 active_interval = 9 [default = 1000];
inline bool OptionQueryPositionReqt::has_active_interval() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OptionQueryPositionReqt::set_has_active_interval() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OptionQueryPositionReqt::clear_has_active_interval() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OptionQueryPositionReqt::clear_active_interval() {
  active_interval_ = GOOGLE_LONGLONG(1000);
  clear_has_active_interval();
}
inline ::google::protobuf::int64 OptionQueryPositionReqt::active_interval() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryPositionReqt.active_interval)
  return active_interval_;
}
inline void OptionQueryPositionReqt::set_active_interval(::google::protobuf::int64 value) {
  set_has_active_interval();
  active_interval_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryPositionReqt.active_interval)
}

// -------------------------------------------------------------------

// OptionPosition_Position

// optional int64 market = 1;
inline bool OptionPosition_Position::has_market() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OptionPosition_Position::set_has_market() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OptionPosition_Position::clear_has_market() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OptionPosition_Position::clear_market() {
  market_ = GOOGLE_LONGLONG(0);
  clear_has_market();
}
inline ::google::protobuf::int64 OptionPosition_Position::market() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionPosition.Position.market)
  return market_;
}
inline void OptionPosition_Position::set_market(::google::protobuf::int64 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionPosition.Position.market)
}

// optional string code = 2;
inline bool OptionPosition_Position::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptionPosition_Position::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptionPosition_Position::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptionPosition_Position::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& OptionPosition_Position::code() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionPosition.Position.code)
  return code_.GetNoArena();
}
inline void OptionPosition_Position::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionPosition.Position.code)
}
#if LANG_CXX11
inline void OptionPosition_Position::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionPosition.Position.code)
}
#endif
inline void OptionPosition_Position::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionPosition.Position.code)
}
inline void OptionPosition_Position::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionPosition.Position.code)
}
inline ::std::string* OptionPosition_Position::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionPosition.Position.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionPosition_Position::release_code() {
  // @@protoc_insertion_point(field_release:autotrade.OptionPosition.Position.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionPosition_Position::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionPosition.Position.code)
}

// optional string name = 3;
inline bool OptionPosition_Position::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptionPosition_Position::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OptionPosition_Position::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OptionPosition_Position::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& OptionPosition_Position::name() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionPosition.Position.name)
  return name_.GetNoArena();
}
inline void OptionPosition_Position::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionPosition.Position.name)
}
#if LANG_CXX11
inline void OptionPosition_Position::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionPosition.Position.name)
}
#endif
inline void OptionPosition_Position::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionPosition.Position.name)
}
inline void OptionPosition_Position::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionPosition.Position.name)
}
inline ::std::string* OptionPosition_Position::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionPosition.Position.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionPosition_Position::release_name() {
  // @@protoc_insertion_point(field_release:autotrade.OptionPosition.Position.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionPosition_Position::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionPosition.Position.name)
}

// optional int64 cp_flag = 4;
inline bool OptionPosition_Position::has_cp_flag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OptionPosition_Position::set_has_cp_flag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OptionPosition_Position::clear_has_cp_flag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OptionPosition_Position::clear_cp_flag() {
  cp_flag_ = GOOGLE_LONGLONG(0);
  clear_has_cp_flag();
}
inline ::google::protobuf::int64 OptionPosition_Position::cp_flag() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionPosition.Position.cp_flag)
  return cp_flag_;
}
inline void OptionPosition_Position::set_cp_flag(::google::protobuf::int64 value) {
  set_has_cp_flag();
  cp_flag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionPosition.Position.cp_flag)
}

// optional int64 buy_covered = 5;
inline bool OptionPosition_Position::has_buy_covered() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OptionPosition_Position::set_has_buy_covered() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OptionPosition_Position::clear_has_buy_covered() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OptionPosition_Position::clear_buy_covered() {
  buy_covered_ = GOOGLE_LONGLONG(0);
  clear_has_buy_covered();
}
inline ::google::protobuf::int64 OptionPosition_Position::buy_covered() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionPosition.Position.buy_covered)
  return buy_covered_;
}
inline void OptionPosition_Position::set_buy_covered(::google::protobuf::int64 value) {
  set_has_buy_covered();
  buy_covered_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionPosition.Position.buy_covered)
}

// optional int64 buy_volume = 6;
inline bool OptionPosition_Position::has_buy_volume() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OptionPosition_Position::set_has_buy_volume() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OptionPosition_Position::clear_has_buy_volume() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OptionPosition_Position::clear_buy_volume() {
  buy_volume_ = GOOGLE_LONGLONG(0);
  clear_has_buy_volume();
}
inline ::google::protobuf::int64 OptionPosition_Position::buy_volume() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionPosition.Position.buy_volume)
  return buy_volume_;
}
inline void OptionPosition_Position::set_buy_volume(::google::protobuf::int64 value) {
  set_has_buy_volume();
  buy_volume_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionPosition.Position.buy_volume)
}

// optional double buy_price = 7;
inline bool OptionPosition_Position::has_buy_price() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OptionPosition_Position::set_has_buy_price() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OptionPosition_Position::clear_has_buy_price() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OptionPosition_Position::clear_buy_price() {
  buy_price_ = 0;
  clear_has_buy_price();
}
inline double OptionPosition_Position::buy_price() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionPosition.Position.buy_price)
  return buy_price_;
}
inline void OptionPosition_Position::set_buy_price(double value) {
  set_has_buy_price();
  buy_price_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionPosition.Position.buy_price)
}

// optional double buy_amount = 8;
inline bool OptionPosition_Position::has_buy_amount() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OptionPosition_Position::set_has_buy_amount() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OptionPosition_Position::clear_has_buy_amount() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OptionPosition_Position::clear_buy_amount() {
  buy_amount_ = 0;
  clear_has_buy_amount();
}
inline double OptionPosition_Position::buy_amount() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionPosition.Position.buy_amount)
  return buy_amount_;
}
inline void OptionPosition_Position::set_buy_amount(double value) {
  set_has_buy_amount();
  buy_amount_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionPosition.Position.buy_amount)
}

// optional int64 buy_can_close_volume = 9;
inline bool OptionPosition_Position::has_buy_can_close_volume() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OptionPosition_Position::set_has_buy_can_close_volume() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OptionPosition_Position::clear_has_buy_can_close_volume() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OptionPosition_Position::clear_buy_can_close_volume() {
  buy_can_close_volume_ = GOOGLE_LONGLONG(0);
  clear_has_buy_can_close_volume();
}
inline ::google::protobuf::int64 OptionPosition_Position::buy_can_close_volume() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionPosition.Position.buy_can_close_volume)
  return buy_can_close_volume_;
}
inline void OptionPosition_Position::set_buy_can_close_volume(::google::protobuf::int64 value) {
  set_has_buy_can_close_volume();
  buy_can_close_volume_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionPosition.Position.buy_can_close_volume)
}

// optional int64 buy_open_freezed_volume = 10;
inline bool OptionPosition_Position::has_buy_open_freezed_volume() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OptionPosition_Position::set_has_buy_open_freezed_volume() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OptionPosition_Position::clear_has_buy_open_freezed_volume() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OptionPosition_Position::clear_buy_open_freezed_volume() {
  buy_open_freezed_volume_ = GOOGLE_LONGLONG(0);
  clear_has_buy_open_freezed_volume();
}
inline ::google::protobuf::int64 OptionPosition_Position::buy_open_freezed_volume() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionPosition.Position.buy_open_freezed_volume)
  return buy_open_freezed_volume_;
}
inline void OptionPosition_Position::set_buy_open_freezed_volume(::google::protobuf::int64 value) {
  set_has_buy_open_freezed_volume();
  buy_open_freezed_volume_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionPosition.Position.buy_open_freezed_volume)
}

// optional int64 buy_close_freezed_volume = 11;
inline bool OptionPosition_Position::has_buy_close_freezed_volume() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OptionPosition_Position::set_has_buy_close_freezed_volume() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OptionPosition_Position::clear_has_buy_close_freezed_volume() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OptionPosition_Position::clear_buy_close_freezed_volume() {
  buy_close_freezed_volume_ = GOOGLE_LONGLONG(0);
  clear_has_buy_close_freezed_volume();
}
inline ::google::protobuf::int64 OptionPosition_Position::buy_close_freezed_volume() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionPosition.Position.buy_close_freezed_volume)
  return buy_close_freezed_volume_;
}
inline void OptionPosition_Position::set_buy_close_freezed_volume(::google::protobuf::int64 value) {
  set_has_buy_close_freezed_volume();
  buy_close_freezed_volume_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionPosition.Position.buy_close_freezed_volume)
}

// optional double buy_deposit_amount = 12;
inline bool OptionPosition_Position::has_buy_deposit_amount() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OptionPosition_Position::set_has_buy_deposit_amount() {
  _has_bits_[0] |= 0x00001000u;
}
inline void OptionPosition_Position::clear_has_buy_deposit_amount() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void OptionPosition_Position::clear_buy_deposit_amount() {
  buy_deposit_amount_ = 0;
  clear_has_buy_deposit_amount();
}
inline double OptionPosition_Position::buy_deposit_amount() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionPosition.Position.buy_deposit_amount)
  return buy_deposit_amount_;
}
inline void OptionPosition_Position::set_buy_deposit_amount(double value) {
  set_has_buy_deposit_amount();
  buy_deposit_amount_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionPosition.Position.buy_deposit_amount)
}

// optional int64 sell_covered = 13;
inline bool OptionPosition_Position::has_sell_covered() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void OptionPosition_Position::set_has_sell_covered() {
  _has_bits_[0] |= 0x00002000u;
}
inline void OptionPosition_Position::clear_has_sell_covered() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void OptionPosition_Position::clear_sell_covered() {
  sell_covered_ = GOOGLE_LONGLONG(0);
  clear_has_sell_covered();
}
inline ::google::protobuf::int64 OptionPosition_Position::sell_covered() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionPosition.Position.sell_covered)
  return sell_covered_;
}
inline void OptionPosition_Position::set_sell_covered(::google::protobuf::int64 value) {
  set_has_sell_covered();
  sell_covered_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionPosition.Position.sell_covered)
}

// optional int64 sell_volume = 14;
inline bool OptionPosition_Position::has_sell_volume() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void OptionPosition_Position::set_has_sell_volume() {
  _has_bits_[0] |= 0x00004000u;
}
inline void OptionPosition_Position::clear_has_sell_volume() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void OptionPosition_Position::clear_sell_volume() {
  sell_volume_ = GOOGLE_LONGLONG(0);
  clear_has_sell_volume();
}
inline ::google::protobuf::int64 OptionPosition_Position::sell_volume() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionPosition.Position.sell_volume)
  return sell_volume_;
}
inline void OptionPosition_Position::set_sell_volume(::google::protobuf::int64 value) {
  set_has_sell_volume();
  sell_volume_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionPosition.Position.sell_volume)
}

// optional double sell_price = 15;
inline bool OptionPosition_Position::has_sell_price() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void OptionPosition_Position::set_has_sell_price() {
  _has_bits_[0] |= 0x00008000u;
}
inline void OptionPosition_Position::clear_has_sell_price() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void OptionPosition_Position::clear_sell_price() {
  sell_price_ = 0;
  clear_has_sell_price();
}
inline double OptionPosition_Position::sell_price() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionPosition.Position.sell_price)
  return sell_price_;
}
inline void OptionPosition_Position::set_sell_price(double value) {
  set_has_sell_price();
  sell_price_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionPosition.Position.sell_price)
}

// optional double sell_amount = 16;
inline bool OptionPosition_Position::has_sell_amount() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void OptionPosition_Position::set_has_sell_amount() {
  _has_bits_[0] |= 0x00010000u;
}
inline void OptionPosition_Position::clear_has_sell_amount() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void OptionPosition_Position::clear_sell_amount() {
  sell_amount_ = 0;
  clear_has_sell_amount();
}
inline double OptionPosition_Position::sell_amount() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionPosition.Position.sell_amount)
  return sell_amount_;
}
inline void OptionPosition_Position::set_sell_amount(double value) {
  set_has_sell_amount();
  sell_amount_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionPosition.Position.sell_amount)
}

// optional int64 sell_can_close_volume = 17;
inline bool OptionPosition_Position::has_sell_can_close_volume() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void OptionPosition_Position::set_has_sell_can_close_volume() {
  _has_bits_[0] |= 0x00020000u;
}
inline void OptionPosition_Position::clear_has_sell_can_close_volume() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void OptionPosition_Position::clear_sell_can_close_volume() {
  sell_can_close_volume_ = GOOGLE_LONGLONG(0);
  clear_has_sell_can_close_volume();
}
inline ::google::protobuf::int64 OptionPosition_Position::sell_can_close_volume() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionPosition.Position.sell_can_close_volume)
  return sell_can_close_volume_;
}
inline void OptionPosition_Position::set_sell_can_close_volume(::google::protobuf::int64 value) {
  set_has_sell_can_close_volume();
  sell_can_close_volume_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionPosition.Position.sell_can_close_volume)
}

// optional int64 sell_open_freezed_volume = 18;
inline bool OptionPosition_Position::has_sell_open_freezed_volume() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void OptionPosition_Position::set_has_sell_open_freezed_volume() {
  _has_bits_[0] |= 0x00040000u;
}
inline void OptionPosition_Position::clear_has_sell_open_freezed_volume() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void OptionPosition_Position::clear_sell_open_freezed_volume() {
  sell_open_freezed_volume_ = GOOGLE_LONGLONG(0);
  clear_has_sell_open_freezed_volume();
}
inline ::google::protobuf::int64 OptionPosition_Position::sell_open_freezed_volume() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionPosition.Position.sell_open_freezed_volume)
  return sell_open_freezed_volume_;
}
inline void OptionPosition_Position::set_sell_open_freezed_volume(::google::protobuf::int64 value) {
  set_has_sell_open_freezed_volume();
  sell_open_freezed_volume_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionPosition.Position.sell_open_freezed_volume)
}

// optional int64 sell_close_freezed_volume = 19;
inline bool OptionPosition_Position::has_sell_close_freezed_volume() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void OptionPosition_Position::set_has_sell_close_freezed_volume() {
  _has_bits_[0] |= 0x00080000u;
}
inline void OptionPosition_Position::clear_has_sell_close_freezed_volume() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void OptionPosition_Position::clear_sell_close_freezed_volume() {
  sell_close_freezed_volume_ = GOOGLE_LONGLONG(0);
  clear_has_sell_close_freezed_volume();
}
inline ::google::protobuf::int64 OptionPosition_Position::sell_close_freezed_volume() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionPosition.Position.sell_close_freezed_volume)
  return sell_close_freezed_volume_;
}
inline void OptionPosition_Position::set_sell_close_freezed_volume(::google::protobuf::int64 value) {
  set_has_sell_close_freezed_volume();
  sell_close_freezed_volume_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionPosition.Position.sell_close_freezed_volume)
}

// optional double sell_deposit_amount = 20;
inline bool OptionPosition_Position::has_sell_deposit_amount() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void OptionPosition_Position::set_has_sell_deposit_amount() {
  _has_bits_[0] |= 0x00100000u;
}
inline void OptionPosition_Position::clear_has_sell_deposit_amount() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void OptionPosition_Position::clear_sell_deposit_amount() {
  sell_deposit_amount_ = 0;
  clear_has_sell_deposit_amount();
}
inline double OptionPosition_Position::sell_deposit_amount() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionPosition.Position.sell_deposit_amount)
  return sell_deposit_amount_;
}
inline void OptionPosition_Position::set_sell_deposit_amount(double value) {
  set_has_sell_deposit_amount();
  sell_deposit_amount_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionPosition.Position.sell_deposit_amount)
}

// optional int64 net_volume = 21;
inline bool OptionPosition_Position::has_net_volume() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void OptionPosition_Position::set_has_net_volume() {
  _has_bits_[0] |= 0x00200000u;
}
inline void OptionPosition_Position::clear_has_net_volume() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void OptionPosition_Position::clear_net_volume() {
  net_volume_ = GOOGLE_LONGLONG(0);
  clear_has_net_volume();
}
inline ::google::protobuf::int64 OptionPosition_Position::net_volume() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionPosition.Position.net_volume)
  return net_volume_;
}
inline void OptionPosition_Position::set_net_volume(::google::protobuf::int64 value) {
  set_has_net_volume();
  net_volume_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionPosition.Position.net_volume)
}

// optional string start_pos = 22;
inline bool OptionPosition_Position::has_start_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OptionPosition_Position::set_has_start_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OptionPosition_Position::clear_has_start_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OptionPosition_Position::clear_start_pos() {
  start_pos_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_start_pos();
}
inline const ::std::string& OptionPosition_Position::start_pos() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionPosition.Position.start_pos)
  return start_pos_.GetNoArena();
}
inline void OptionPosition_Position::set_start_pos(const ::std::string& value) {
  set_has_start_pos();
  start_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionPosition.Position.start_pos)
}
#if LANG_CXX11
inline void OptionPosition_Position::set_start_pos(::std::string&& value) {
  set_has_start_pos();
  start_pos_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionPosition.Position.start_pos)
}
#endif
inline void OptionPosition_Position::set_start_pos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_start_pos();
  start_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionPosition.Position.start_pos)
}
inline void OptionPosition_Position::set_start_pos(const char* value, size_t size) {
  set_has_start_pos();
  start_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionPosition.Position.start_pos)
}
inline ::std::string* OptionPosition_Position::mutable_start_pos() {
  set_has_start_pos();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionPosition.Position.start_pos)
  return start_pos_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionPosition_Position::release_start_pos() {
  // @@protoc_insertion_point(field_release:autotrade.OptionPosition.Position.start_pos)
  if (!has_start_pos()) {
    return NULL;
  }
  clear_has_start_pos();
  return start_pos_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionPosition_Position::set_allocated_start_pos(::std::string* start_pos) {
  if (start_pos != NULL) {
    set_has_start_pos();
  } else {
    clear_has_start_pos();
  }
  start_pos_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_pos);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionPosition.Position.start_pos)
}

// -------------------------------------------------------------------

// OptionPosition

// optional int32 funcid = 1 [default = 13102006];
inline bool OptionPosition::has_funcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OptionPosition::set_has_funcid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OptionPosition::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OptionPosition::clear_funcid() {
  funcid_ = 13102006;
  clear_has_funcid();
}
inline ::google::protobuf::int32 OptionPosition::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionPosition.funcid)
  return funcid_;
}
inline void OptionPosition::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionPosition.funcid)
}

// repeated .autotrade.OptionPosition.Position positions = 2;
inline int OptionPosition::positions_size() const {
  return positions_.size();
}
inline void OptionPosition::clear_positions() {
  positions_.Clear();
}
inline ::autotrade::OptionPosition_Position* OptionPosition::mutable_positions(int index) {
  // @@protoc_insertion_point(field_mutable:autotrade.OptionPosition.positions)
  return positions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::autotrade::OptionPosition_Position >*
OptionPosition::mutable_positions() {
  // @@protoc_insertion_point(field_mutable_list:autotrade.OptionPosition.positions)
  return &positions_;
}
inline const ::autotrade::OptionPosition_Position& OptionPosition::positions(int index) const {
  // @@protoc_insertion_point(field_get:autotrade.OptionPosition.positions)
  return positions_.Get(index);
}
inline ::autotrade::OptionPosition_Position* OptionPosition::add_positions() {
  // @@protoc_insertion_point(field_add:autotrade.OptionPosition.positions)
  return positions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::autotrade::OptionPosition_Position >&
OptionPosition::positions() const {
  // @@protoc_insertion_point(field_list:autotrade.OptionPosition.positions)
  return positions_;
}

// optional string last_pos = 3;
inline bool OptionPosition::has_last_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptionPosition::set_has_last_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptionPosition::clear_has_last_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptionPosition::clear_last_pos() {
  last_pos_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_last_pos();
}
inline const ::std::string& OptionPosition::last_pos() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionPosition.last_pos)
  return last_pos_.GetNoArena();
}
inline void OptionPosition::set_last_pos(const ::std::string& value) {
  set_has_last_pos();
  last_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionPosition.last_pos)
}
#if LANG_CXX11
inline void OptionPosition::set_last_pos(::std::string&& value) {
  set_has_last_pos();
  last_pos_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionPosition.last_pos)
}
#endif
inline void OptionPosition::set_last_pos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_last_pos();
  last_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionPosition.last_pos)
}
inline void OptionPosition::set_last_pos(const char* value, size_t size) {
  set_has_last_pos();
  last_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionPosition.last_pos)
}
inline ::std::string* OptionPosition::mutable_last_pos() {
  set_has_last_pos();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionPosition.last_pos)
  return last_pos_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionPosition::release_last_pos() {
  // @@protoc_insertion_point(field_release:autotrade.OptionPosition.last_pos)
  if (!has_last_pos()) {
    return NULL;
  }
  clear_has_last_pos();
  return last_pos_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionPosition::set_allocated_last_pos(::std::string* last_pos) {
  if (last_pos != NULL) {
    set_has_last_pos();
  } else {
    clear_has_last_pos();
  }
  last_pos_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_pos);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionPosition.last_pos)
}

// optional string request_id = 4;
inline bool OptionPosition::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptionPosition::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OptionPosition::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OptionPosition::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& OptionPosition::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionPosition.request_id)
  return request_id_.GetNoArena();
}
inline void OptionPosition::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionPosition.request_id)
}
#if LANG_CXX11
inline void OptionPosition::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionPosition.request_id)
}
#endif
inline void OptionPosition::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionPosition.request_id)
}
inline void OptionPosition::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionPosition.request_id)
}
inline ::std::string* OptionPosition::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionPosition.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionPosition::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.OptionPosition.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionPosition::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionPosition.request_id)
}

// -------------------------------------------------------------------

// OptionQueryDealDetailReqt

// optional int32 funcid = 1 [default = 13002004];
inline bool OptionQueryDealDetailReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OptionQueryDealDetailReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OptionQueryDealDetailReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OptionQueryDealDetailReqt::clear_funcid() {
  funcid_ = 13002004;
  clear_has_funcid();
}
inline ::google::protobuf::int32 OptionQueryDealDetailReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryDealDetailReqt.funcid)
  return funcid_;
}
inline void OptionQueryDealDetailReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryDealDetailReqt.funcid)
}

// optional string orderno = 2 [default = ""];
inline bool OptionQueryDealDetailReqt::has_orderno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptionQueryDealDetailReqt::set_has_orderno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptionQueryDealDetailReqt::clear_has_orderno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptionQueryDealDetailReqt::clear_orderno() {
  orderno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_orderno();
}
inline const ::std::string& OptionQueryDealDetailReqt::orderno() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryDealDetailReqt.orderno)
  return orderno_.GetNoArena();
}
inline void OptionQueryDealDetailReqt::set_orderno(const ::std::string& value) {
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryDealDetailReqt.orderno)
}
#if LANG_CXX11
inline void OptionQueryDealDetailReqt::set_orderno(::std::string&& value) {
  set_has_orderno();
  orderno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionQueryDealDetailReqt.orderno)
}
#endif
inline void OptionQueryDealDetailReqt::set_orderno(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionQueryDealDetailReqt.orderno)
}
inline void OptionQueryDealDetailReqt::set_orderno(const char* value, size_t size) {
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionQueryDealDetailReqt.orderno)
}
inline ::std::string* OptionQueryDealDetailReqt::mutable_orderno() {
  set_has_orderno();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionQueryDealDetailReqt.orderno)
  return orderno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionQueryDealDetailReqt::release_orderno() {
  // @@protoc_insertion_point(field_release:autotrade.OptionQueryDealDetailReqt.orderno)
  if (!has_orderno()) {
    return NULL;
  }
  clear_has_orderno();
  return orderno_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionQueryDealDetailReqt::set_allocated_orderno(::std::string* orderno) {
  if (orderno != NULL) {
    set_has_orderno();
  } else {
    clear_has_orderno();
  }
  orderno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderno);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionQueryDealDetailReqt.orderno)
}

// optional uint32 query_count = 3 [default = 500];
inline bool OptionQueryDealDetailReqt::has_query_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OptionQueryDealDetailReqt::set_has_query_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OptionQueryDealDetailReqt::clear_has_query_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OptionQueryDealDetailReqt::clear_query_count() {
  query_count_ = 500u;
  clear_has_query_count();
}
inline ::google::protobuf::uint32 OptionQueryDealDetailReqt::query_count() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryDealDetailReqt.query_count)
  return query_count_;
}
inline void OptionQueryDealDetailReqt::set_query_count(::google::protobuf::uint32 value) {
  set_has_query_count();
  query_count_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryDealDetailReqt.query_count)
}

// optional .autotrade.OptionQueryDealDetailReqt.QueryType query_type = 4 [default = Type_ONCE];
inline bool OptionQueryDealDetailReqt::has_query_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OptionQueryDealDetailReqt::set_has_query_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OptionQueryDealDetailReqt::clear_has_query_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OptionQueryDealDetailReqt::clear_query_type() {
  query_type_ = 0;
  clear_has_query_type();
}
inline ::autotrade::OptionQueryDealDetailReqt_QueryType OptionQueryDealDetailReqt::query_type() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryDealDetailReqt.query_type)
  return static_cast< ::autotrade::OptionQueryDealDetailReqt_QueryType >(query_type_);
}
inline void OptionQueryDealDetailReqt::set_query_type(::autotrade::OptionQueryDealDetailReqt_QueryType value) {
  assert(::autotrade::OptionQueryDealDetailReqt_QueryType_IsValid(value));
  set_has_query_type();
  query_type_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryDealDetailReqt.query_type)
}

// optional string start_pos = 5 [default = ""];
inline bool OptionQueryDealDetailReqt::has_start_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptionQueryDealDetailReqt::set_has_start_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OptionQueryDealDetailReqt::clear_has_start_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OptionQueryDealDetailReqt::clear_start_pos() {
  start_pos_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_start_pos();
}
inline const ::std::string& OptionQueryDealDetailReqt::start_pos() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryDealDetailReqt.start_pos)
  return start_pos_.GetNoArena();
}
inline void OptionQueryDealDetailReqt::set_start_pos(const ::std::string& value) {
  set_has_start_pos();
  start_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryDealDetailReqt.start_pos)
}
#if LANG_CXX11
inline void OptionQueryDealDetailReqt::set_start_pos(::std::string&& value) {
  set_has_start_pos();
  start_pos_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionQueryDealDetailReqt.start_pos)
}
#endif
inline void OptionQueryDealDetailReqt::set_start_pos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_start_pos();
  start_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionQueryDealDetailReqt.start_pos)
}
inline void OptionQueryDealDetailReqt::set_start_pos(const char* value, size_t size) {
  set_has_start_pos();
  start_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionQueryDealDetailReqt.start_pos)
}
inline ::std::string* OptionQueryDealDetailReqt::mutable_start_pos() {
  set_has_start_pos();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionQueryDealDetailReqt.start_pos)
  return start_pos_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionQueryDealDetailReqt::release_start_pos() {
  // @@protoc_insertion_point(field_release:autotrade.OptionQueryDealDetailReqt.start_pos)
  if (!has_start_pos()) {
    return NULL;
  }
  clear_has_start_pos();
  return start_pos_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionQueryDealDetailReqt::set_allocated_start_pos(::std::string* start_pos) {
  if (start_pos != NULL) {
    set_has_start_pos();
  } else {
    clear_has_start_pos();
  }
  start_pos_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_pos);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionQueryDealDetailReqt.start_pos)
}

// optional string request_id = 6;
inline bool OptionQueryDealDetailReqt::has_request_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OptionQueryDealDetailReqt::set_has_request_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OptionQueryDealDetailReqt::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OptionQueryDealDetailReqt::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& OptionQueryDealDetailReqt::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryDealDetailReqt.request_id)
  return request_id_.GetNoArena();
}
inline void OptionQueryDealDetailReqt::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryDealDetailReqt.request_id)
}
#if LANG_CXX11
inline void OptionQueryDealDetailReqt::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionQueryDealDetailReqt.request_id)
}
#endif
inline void OptionQueryDealDetailReqt::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionQueryDealDetailReqt.request_id)
}
inline void OptionQueryDealDetailReqt::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionQueryDealDetailReqt.request_id)
}
inline ::std::string* OptionQueryDealDetailReqt::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionQueryDealDetailReqt.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionQueryDealDetailReqt::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.OptionQueryDealDetailReqt.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionQueryDealDetailReqt::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionQueryDealDetailReqt.request_id)
}

// optional int64 request_time = 7 [default = 0];
inline bool OptionQueryDealDetailReqt::has_request_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OptionQueryDealDetailReqt::set_has_request_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OptionQueryDealDetailReqt::clear_has_request_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OptionQueryDealDetailReqt::clear_request_time() {
  request_time_ = GOOGLE_LONGLONG(0);
  clear_has_request_time();
}
inline ::google::protobuf::int64 OptionQueryDealDetailReqt::request_time() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryDealDetailReqt.request_time)
  return request_time_;
}
inline void OptionQueryDealDetailReqt::set_request_time(::google::protobuf::int64 value) {
  set_has_request_time();
  request_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryDealDetailReqt.request_time)
}

// optional int64 active_interval = 8 [default = 1000];
inline bool OptionQueryDealDetailReqt::has_active_interval() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OptionQueryDealDetailReqt::set_has_active_interval() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OptionQueryDealDetailReqt::clear_has_active_interval() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OptionQueryDealDetailReqt::clear_active_interval() {
  active_interval_ = GOOGLE_LONGLONG(1000);
  clear_has_active_interval();
}
inline ::google::protobuf::int64 OptionQueryDealDetailReqt::active_interval() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionQueryDealDetailReqt.active_interval)
  return active_interval_;
}
inline void OptionQueryDealDetailReqt::set_active_interval(::google::protobuf::int64 value) {
  set_has_active_interval();
  active_interval_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionQueryDealDetailReqt.active_interval)
}

// -------------------------------------------------------------------

// OptionDealDetail

// optional int32 funcid = 1 [default = 13102004];
inline bool OptionDealDetail::has_funcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OptionDealDetail::set_has_funcid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OptionDealDetail::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OptionDealDetail::clear_funcid() {
  funcid_ = 13102004;
  clear_has_funcid();
}
inline ::google::protobuf::int32 OptionDealDetail::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionDealDetail.funcid)
  return funcid_;
}
inline void OptionDealDetail::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionDealDetail.funcid)
}

// repeated .autotrade.RawOptionKnock knocks = 2;
inline int OptionDealDetail::knocks_size() const {
  return knocks_.size();
}
inline void OptionDealDetail::clear_knocks() {
  knocks_.Clear();
}
inline ::autotrade::RawOptionKnock* OptionDealDetail::mutable_knocks(int index) {
  // @@protoc_insertion_point(field_mutable:autotrade.OptionDealDetail.knocks)
  return knocks_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::autotrade::RawOptionKnock >*
OptionDealDetail::mutable_knocks() {
  // @@protoc_insertion_point(field_mutable_list:autotrade.OptionDealDetail.knocks)
  return &knocks_;
}
inline const ::autotrade::RawOptionKnock& OptionDealDetail::knocks(int index) const {
  // @@protoc_insertion_point(field_get:autotrade.OptionDealDetail.knocks)
  return knocks_.Get(index);
}
inline ::autotrade::RawOptionKnock* OptionDealDetail::add_knocks() {
  // @@protoc_insertion_point(field_add:autotrade.OptionDealDetail.knocks)
  return knocks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::autotrade::RawOptionKnock >&
OptionDealDetail::knocks() const {
  // @@protoc_insertion_point(field_list:autotrade.OptionDealDetail.knocks)
  return knocks_;
}

// optional string last_pos = 3;
inline bool OptionDealDetail::has_last_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptionDealDetail::set_has_last_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptionDealDetail::clear_has_last_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptionDealDetail::clear_last_pos() {
  last_pos_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_last_pos();
}
inline const ::std::string& OptionDealDetail::last_pos() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionDealDetail.last_pos)
  return last_pos_.GetNoArena();
}
inline void OptionDealDetail::set_last_pos(const ::std::string& value) {
  set_has_last_pos();
  last_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionDealDetail.last_pos)
}
#if LANG_CXX11
inline void OptionDealDetail::set_last_pos(::std::string&& value) {
  set_has_last_pos();
  last_pos_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionDealDetail.last_pos)
}
#endif
inline void OptionDealDetail::set_last_pos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_last_pos();
  last_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionDealDetail.last_pos)
}
inline void OptionDealDetail::set_last_pos(const char* value, size_t size) {
  set_has_last_pos();
  last_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionDealDetail.last_pos)
}
inline ::std::string* OptionDealDetail::mutable_last_pos() {
  set_has_last_pos();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionDealDetail.last_pos)
  return last_pos_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionDealDetail::release_last_pos() {
  // @@protoc_insertion_point(field_release:autotrade.OptionDealDetail.last_pos)
  if (!has_last_pos()) {
    return NULL;
  }
  clear_has_last_pos();
  return last_pos_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionDealDetail::set_allocated_last_pos(::std::string* last_pos) {
  if (last_pos != NULL) {
    set_has_last_pos();
  } else {
    clear_has_last_pos();
  }
  last_pos_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_pos);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionDealDetail.last_pos)
}

// optional string request_id = 4;
inline bool OptionDealDetail::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptionDealDetail::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OptionDealDetail::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OptionDealDetail::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& OptionDealDetail::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionDealDetail.request_id)
  return request_id_.GetNoArena();
}
inline void OptionDealDetail::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionDealDetail.request_id)
}
#if LANG_CXX11
inline void OptionDealDetail::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionDealDetail.request_id)
}
#endif
inline void OptionDealDetail::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionDealDetail.request_id)
}
inline void OptionDealDetail::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionDealDetail.request_id)
}
inline ::std::string* OptionDealDetail::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionDealDetail.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionDealDetail::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.OptionDealDetail.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionDealDetail::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionDealDetail.request_id)
}

// -------------------------------------------------------------------

// RawOptionKnock

// optional int32 funcid = 1 [default = 13003001];
inline bool RawOptionKnock::has_funcid() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void RawOptionKnock::set_has_funcid() {
  _has_bits_[0] |= 0x00200000u;
}
inline void RawOptionKnock::clear_has_funcid() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void RawOptionKnock::clear_funcid() {
  funcid_ = 13003001;
  clear_has_funcid();
}
inline ::google::protobuf::int32 RawOptionKnock::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.RawOptionKnock.funcid)
  return funcid_;
}
inline void RawOptionKnock::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.RawOptionKnock.funcid)
}

// required uint64 stamp = 2;
inline bool RawOptionKnock::has_stamp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RawOptionKnock::set_has_stamp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RawOptionKnock::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RawOptionKnock::clear_stamp() {
  stamp_ = GOOGLE_ULONGLONG(0);
  clear_has_stamp();
}
inline ::google::protobuf::uint64 RawOptionKnock::stamp() const {
  // @@protoc_insertion_point(field_get:autotrade.RawOptionKnock.stamp)
  return stamp_;
}
inline void RawOptionKnock::set_stamp(::google::protobuf::uint64 value) {
  set_has_stamp();
  stamp_ = value;
  // @@protoc_insertion_point(field_set:autotrade.RawOptionKnock.stamp)
}

// optional string order_group = 3;
inline bool RawOptionKnock::has_order_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RawOptionKnock::set_has_order_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RawOptionKnock::clear_has_order_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RawOptionKnock::clear_order_group() {
  order_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_group();
}
inline const ::std::string& RawOptionKnock::order_group() const {
  // @@protoc_insertion_point(field_get:autotrade.RawOptionKnock.order_group)
  return order_group_.GetNoArena();
}
inline void RawOptionKnock::set_order_group(const ::std::string& value) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.RawOptionKnock.order_group)
}
#if LANG_CXX11
inline void RawOptionKnock::set_order_group(::std::string&& value) {
  set_has_order_group();
  order_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.RawOptionKnock.order_group)
}
#endif
inline void RawOptionKnock::set_order_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.RawOptionKnock.order_group)
}
inline void RawOptionKnock::set_order_group(const char* value, size_t size) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.RawOptionKnock.order_group)
}
inline ::std::string* RawOptionKnock::mutable_order_group() {
  set_has_order_group();
  // @@protoc_insertion_point(field_mutable:autotrade.RawOptionKnock.order_group)
  return order_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RawOptionKnock::release_order_group() {
  // @@protoc_insertion_point(field_release:autotrade.RawOptionKnock.order_group)
  if (!has_order_group()) {
    return NULL;
  }
  clear_has_order_group();
  return order_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RawOptionKnock::set_allocated_order_group(::std::string* order_group) {
  if (order_group != NULL) {
    set_has_order_group();
  } else {
    clear_has_order_group();
  }
  order_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_group);
  // @@protoc_insertion_point(field_set_allocated:autotrade.RawOptionKnock.order_group)
}

// required string orderno = 4;
inline bool RawOptionKnock::has_orderno() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RawOptionKnock::set_has_orderno() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RawOptionKnock::clear_has_orderno() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RawOptionKnock::clear_orderno() {
  orderno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_orderno();
}
inline const ::std::string& RawOptionKnock::orderno() const {
  // @@protoc_insertion_point(field_get:autotrade.RawOptionKnock.orderno)
  return orderno_.GetNoArena();
}
inline void RawOptionKnock::set_orderno(const ::std::string& value) {
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.RawOptionKnock.orderno)
}
#if LANG_CXX11
inline void RawOptionKnock::set_orderno(::std::string&& value) {
  set_has_orderno();
  orderno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.RawOptionKnock.orderno)
}
#endif
inline void RawOptionKnock::set_orderno(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.RawOptionKnock.orderno)
}
inline void RawOptionKnock::set_orderno(const char* value, size_t size) {
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.RawOptionKnock.orderno)
}
inline ::std::string* RawOptionKnock::mutable_orderno() {
  set_has_orderno();
  // @@protoc_insertion_point(field_mutable:autotrade.RawOptionKnock.orderno)
  return orderno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RawOptionKnock::release_orderno() {
  // @@protoc_insertion_point(field_release:autotrade.RawOptionKnock.orderno)
  if (!has_orderno()) {
    return NULL;
  }
  clear_has_orderno();
  return orderno_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RawOptionKnock::set_allocated_orderno(::std::string* orderno) {
  if (orderno != NULL) {
    set_has_orderno();
  } else {
    clear_has_orderno();
  }
  orderno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderno);
  // @@protoc_insertion_point(field_set_allocated:autotrade.RawOptionKnock.orderno)
}

// optional uint32 market = 5;
inline bool RawOptionKnock::has_market() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RawOptionKnock::set_has_market() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RawOptionKnock::clear_has_market() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RawOptionKnock::clear_market() {
  market_ = 0u;
  clear_has_market();
}
inline ::google::protobuf::uint32 RawOptionKnock::market() const {
  // @@protoc_insertion_point(field_get:autotrade.RawOptionKnock.market)
  return market_;
}
inline void RawOptionKnock::set_market(::google::protobuf::uint32 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:autotrade.RawOptionKnock.market)
}

// required string code = 6;
inline bool RawOptionKnock::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RawOptionKnock::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RawOptionKnock::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RawOptionKnock::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& RawOptionKnock::code() const {
  // @@protoc_insertion_point(field_get:autotrade.RawOptionKnock.code)
  return code_.GetNoArena();
}
inline void RawOptionKnock::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.RawOptionKnock.code)
}
#if LANG_CXX11
inline void RawOptionKnock::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.RawOptionKnock.code)
}
#endif
inline void RawOptionKnock::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.RawOptionKnock.code)
}
inline void RawOptionKnock::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.RawOptionKnock.code)
}
inline ::std::string* RawOptionKnock::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:autotrade.RawOptionKnock.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RawOptionKnock::release_code() {
  // @@protoc_insertion_point(field_release:autotrade.RawOptionKnock.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RawOptionKnock::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:autotrade.RawOptionKnock.code)
}

// optional int64 order_price = 7;
inline bool RawOptionKnock::has_order_price() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RawOptionKnock::set_has_order_price() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RawOptionKnock::clear_has_order_price() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RawOptionKnock::clear_order_price() {
  order_price_ = GOOGLE_LONGLONG(0);
  clear_has_order_price();
}
inline ::google::protobuf::int64 RawOptionKnock::order_price() const {
  // @@protoc_insertion_point(field_get:autotrade.RawOptionKnock.order_price)
  return order_price_;
}
inline void RawOptionKnock::set_order_price(::google::protobuf::int64 value) {
  set_has_order_price();
  order_price_ = value;
  // @@protoc_insertion_point(field_set:autotrade.RawOptionKnock.order_price)
}

// optional int64 match_qty = 8;
inline bool RawOptionKnock::has_match_qty() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RawOptionKnock::set_has_match_qty() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RawOptionKnock::clear_has_match_qty() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RawOptionKnock::clear_match_qty() {
  match_qty_ = GOOGLE_LONGLONG(0);
  clear_has_match_qty();
}
inline ::google::protobuf::int64 RawOptionKnock::match_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.RawOptionKnock.match_qty)
  return match_qty_;
}
inline void RawOptionKnock::set_match_qty(::google::protobuf::int64 value) {
  set_has_match_qty();
  match_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.RawOptionKnock.match_qty)
}

// optional uint32 order_qty = 9;
inline bool RawOptionKnock::has_order_qty() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RawOptionKnock::set_has_order_qty() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RawOptionKnock::clear_has_order_qty() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RawOptionKnock::clear_order_qty() {
  order_qty_ = 0u;
  clear_has_order_qty();
}
inline ::google::protobuf::uint32 RawOptionKnock::order_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.RawOptionKnock.order_qty)
  return order_qty_;
}
inline void RawOptionKnock::set_order_qty(::google::protobuf::uint32 value) {
  set_has_order_qty();
  order_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.RawOptionKnock.order_qty)
}

// optional uint32 bsflag = 10;
inline bool RawOptionKnock::has_bsflag() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RawOptionKnock::set_has_bsflag() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RawOptionKnock::clear_has_bsflag() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RawOptionKnock::clear_bsflag() {
  bsflag_ = 0u;
  clear_has_bsflag();
}
inline ::google::protobuf::uint32 RawOptionKnock::bsflag() const {
  // @@protoc_insertion_point(field_get:autotrade.RawOptionKnock.bsflag)
  return bsflag_;
}
inline void RawOptionKnock::set_bsflag(::google::protobuf::uint32 value) {
  set_has_bsflag();
  bsflag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.RawOptionKnock.bsflag)
}

// optional int64 open_close_flag = 11;
inline bool RawOptionKnock::has_open_close_flag() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RawOptionKnock::set_has_open_close_flag() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RawOptionKnock::clear_has_open_close_flag() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RawOptionKnock::clear_open_close_flag() {
  open_close_flag_ = GOOGLE_LONGLONG(0);
  clear_has_open_close_flag();
}
inline ::google::protobuf::int64 RawOptionKnock::open_close_flag() const {
  // @@protoc_insertion_point(field_get:autotrade.RawOptionKnock.open_close_flag)
  return open_close_flag_;
}
inline void RawOptionKnock::set_open_close_flag(::google::protobuf::int64 value) {
  set_has_open_close_flag();
  open_close_flag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.RawOptionKnock.open_close_flag)
}

// optional int32 match_type = 12;
inline bool RawOptionKnock::has_match_type() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RawOptionKnock::set_has_match_type() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RawOptionKnock::clear_has_match_type() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RawOptionKnock::clear_match_type() {
  match_type_ = 0;
  clear_has_match_type();
}
inline ::google::protobuf::int32 RawOptionKnock::match_type() const {
  // @@protoc_insertion_point(field_get:autotrade.RawOptionKnock.match_type)
  return match_type_;
}
inline void RawOptionKnock::set_match_type(::google::protobuf::int32 value) {
  set_has_match_type();
  match_type_ = value;
  // @@protoc_insertion_point(field_set:autotrade.RawOptionKnock.match_type)
}

// optional double clear_amt = 13;
inline bool RawOptionKnock::has_clear_amt() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RawOptionKnock::set_has_clear_amt() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RawOptionKnock::clear_has_clear_amt() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RawOptionKnock::clear_clear_amt() {
  clear_amt_ = 0;
  clear_has_clear_amt();
}
inline double RawOptionKnock::clear_amt() const {
  // @@protoc_insertion_point(field_get:autotrade.RawOptionKnock.clear_amt)
  return clear_amt_;
}
inline void RawOptionKnock::set_clear_amt(double value) {
  set_has_clear_amt();
  clear_amt_ = value;
  // @@protoc_insertion_point(field_set:autotrade.RawOptionKnock.clear_amt)
}

// optional double match_amt = 14;
inline bool RawOptionKnock::has_match_amt() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RawOptionKnock::set_has_match_amt() {
  _has_bits_[0] |= 0x00040000u;
}
inline void RawOptionKnock::clear_has_match_amt() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void RawOptionKnock::clear_match_amt() {
  match_amt_ = 0;
  clear_has_match_amt();
}
inline double RawOptionKnock::match_amt() const {
  // @@protoc_insertion_point(field_get:autotrade.RawOptionKnock.match_amt)
  return match_amt_;
}
inline void RawOptionKnock::set_match_amt(double value) {
  set_has_match_amt();
  match_amt_ = value;
  // @@protoc_insertion_point(field_set:autotrade.RawOptionKnock.match_amt)
}

// optional int64 match_price = 15;
inline bool RawOptionKnock::has_match_price() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void RawOptionKnock::set_has_match_price() {
  _has_bits_[0] |= 0x00080000u;
}
inline void RawOptionKnock::clear_has_match_price() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void RawOptionKnock::clear_match_price() {
  match_price_ = GOOGLE_LONGLONG(0);
  clear_has_match_price();
}
inline ::google::protobuf::int64 RawOptionKnock::match_price() const {
  // @@protoc_insertion_point(field_get:autotrade.RawOptionKnock.match_price)
  return match_price_;
}
inline void RawOptionKnock::set_match_price(::google::protobuf::int64 value) {
  set_has_match_price();
  match_price_ = value;
  // @@protoc_insertion_point(field_set:autotrade.RawOptionKnock.match_price)
}

// optional int32 order_type = 16;
inline bool RawOptionKnock::has_order_type() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void RawOptionKnock::set_has_order_type() {
  _has_bits_[0] |= 0x00100000u;
}
inline void RawOptionKnock::clear_has_order_type() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void RawOptionKnock::clear_order_type() {
  order_type_ = 0;
  clear_has_order_type();
}
inline ::google::protobuf::int32 RawOptionKnock::order_type() const {
  // @@protoc_insertion_point(field_get:autotrade.RawOptionKnock.order_type)
  return order_type_;
}
inline void RawOptionKnock::set_order_type(::google::protobuf::int32 value) {
  set_has_order_type();
  order_type_ = value;
  // @@protoc_insertion_point(field_set:autotrade.RawOptionKnock.order_type)
}

// required string match_id = 17;
inline bool RawOptionKnock::has_match_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RawOptionKnock::set_has_match_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RawOptionKnock::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RawOptionKnock::clear_match_id() {
  match_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_match_id();
}
inline const ::std::string& RawOptionKnock::match_id() const {
  // @@protoc_insertion_point(field_get:autotrade.RawOptionKnock.match_id)
  return match_id_.GetNoArena();
}
inline void RawOptionKnock::set_match_id(const ::std::string& value) {
  set_has_match_id();
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.RawOptionKnock.match_id)
}
#if LANG_CXX11
inline void RawOptionKnock::set_match_id(::std::string&& value) {
  set_has_match_id();
  match_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.RawOptionKnock.match_id)
}
#endif
inline void RawOptionKnock::set_match_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_match_id();
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.RawOptionKnock.match_id)
}
inline void RawOptionKnock::set_match_id(const char* value, size_t size) {
  set_has_match_id();
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.RawOptionKnock.match_id)
}
inline ::std::string* RawOptionKnock::mutable_match_id() {
  set_has_match_id();
  // @@protoc_insertion_point(field_mutable:autotrade.RawOptionKnock.match_id)
  return match_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RawOptionKnock::release_match_id() {
  // @@protoc_insertion_point(field_release:autotrade.RawOptionKnock.match_id)
  if (!has_match_id()) {
    return NULL;
  }
  clear_has_match_id();
  return match_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RawOptionKnock::set_allocated_match_id(::std::string* match_id) {
  if (match_id != NULL) {
    set_has_match_id();
  } else {
    clear_has_match_id();
  }
  match_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), match_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.RawOptionKnock.match_id)
}

// optional string stock_account = 18;
inline bool RawOptionKnock::has_stock_account() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RawOptionKnock::set_has_stock_account() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RawOptionKnock::clear_has_stock_account() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RawOptionKnock::clear_stock_account() {
  stock_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stock_account();
}
inline const ::std::string& RawOptionKnock::stock_account() const {
  // @@protoc_insertion_point(field_get:autotrade.RawOptionKnock.stock_account)
  return stock_account_.GetNoArena();
}
inline void RawOptionKnock::set_stock_account(const ::std::string& value) {
  set_has_stock_account();
  stock_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.RawOptionKnock.stock_account)
}
#if LANG_CXX11
inline void RawOptionKnock::set_stock_account(::std::string&& value) {
  set_has_stock_account();
  stock_account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.RawOptionKnock.stock_account)
}
#endif
inline void RawOptionKnock::set_stock_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_stock_account();
  stock_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.RawOptionKnock.stock_account)
}
inline void RawOptionKnock::set_stock_account(const char* value, size_t size) {
  set_has_stock_account();
  stock_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.RawOptionKnock.stock_account)
}
inline ::std::string* RawOptionKnock::mutable_stock_account() {
  set_has_stock_account();
  // @@protoc_insertion_point(field_mutable:autotrade.RawOptionKnock.stock_account)
  return stock_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RawOptionKnock::release_stock_account() {
  // @@protoc_insertion_point(field_release:autotrade.RawOptionKnock.stock_account)
  if (!has_stock_account()) {
    return NULL;
  }
  clear_has_stock_account();
  return stock_account_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RawOptionKnock::set_allocated_stock_account(::std::string* stock_account) {
  if (stock_account != NULL) {
    set_has_stock_account();
  } else {
    clear_has_stock_account();
  }
  stock_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stock_account);
  // @@protoc_insertion_point(field_set_allocated:autotrade.RawOptionKnock.stock_account)
}

// optional string oppo_account = 19;
inline bool RawOptionKnock::has_oppo_account() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RawOptionKnock::set_has_oppo_account() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RawOptionKnock::clear_has_oppo_account() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RawOptionKnock::clear_oppo_account() {
  oppo_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_oppo_account();
}
inline const ::std::string& RawOptionKnock::oppo_account() const {
  // @@protoc_insertion_point(field_get:autotrade.RawOptionKnock.oppo_account)
  return oppo_account_.GetNoArena();
}
inline void RawOptionKnock::set_oppo_account(const ::std::string& value) {
  set_has_oppo_account();
  oppo_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.RawOptionKnock.oppo_account)
}
#if LANG_CXX11
inline void RawOptionKnock::set_oppo_account(::std::string&& value) {
  set_has_oppo_account();
  oppo_account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.RawOptionKnock.oppo_account)
}
#endif
inline void RawOptionKnock::set_oppo_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_oppo_account();
  oppo_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.RawOptionKnock.oppo_account)
}
inline void RawOptionKnock::set_oppo_account(const char* value, size_t size) {
  set_has_oppo_account();
  oppo_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.RawOptionKnock.oppo_account)
}
inline ::std::string* RawOptionKnock::mutable_oppo_account() {
  set_has_oppo_account();
  // @@protoc_insertion_point(field_mutable:autotrade.RawOptionKnock.oppo_account)
  return oppo_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RawOptionKnock::release_oppo_account() {
  // @@protoc_insertion_point(field_release:autotrade.RawOptionKnock.oppo_account)
  if (!has_oppo_account()) {
    return NULL;
  }
  clear_has_oppo_account();
  return oppo_account_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RawOptionKnock::set_allocated_oppo_account(::std::string* oppo_account) {
  if (oppo_account != NULL) {
    set_has_oppo_account();
  } else {
    clear_has_oppo_account();
  }
  oppo_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), oppo_account);
  // @@protoc_insertion_point(field_set_allocated:autotrade.RawOptionKnock.oppo_account)
}

// optional string name = 20;
inline bool RawOptionKnock::has_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RawOptionKnock::set_has_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RawOptionKnock::clear_has_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RawOptionKnock::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& RawOptionKnock::name() const {
  // @@protoc_insertion_point(field_get:autotrade.RawOptionKnock.name)
  return name_.GetNoArena();
}
inline void RawOptionKnock::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.RawOptionKnock.name)
}
#if LANG_CXX11
inline void RawOptionKnock::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.RawOptionKnock.name)
}
#endif
inline void RawOptionKnock::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.RawOptionKnock.name)
}
inline void RawOptionKnock::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.RawOptionKnock.name)
}
inline ::std::string* RawOptionKnock::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:autotrade.RawOptionKnock.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RawOptionKnock::release_name() {
  // @@protoc_insertion_point(field_release:autotrade.RawOptionKnock.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RawOptionKnock::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:autotrade.RawOptionKnock.name)
}

// optional string info = 21;
inline bool RawOptionKnock::has_info() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RawOptionKnock::set_has_info() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RawOptionKnock::clear_has_info() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RawOptionKnock::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_info();
}
inline const ::std::string& RawOptionKnock::info() const {
  // @@protoc_insertion_point(field_get:autotrade.RawOptionKnock.info)
  return info_.GetNoArena();
}
inline void RawOptionKnock::set_info(const ::std::string& value) {
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.RawOptionKnock.info)
}
#if LANG_CXX11
inline void RawOptionKnock::set_info(::std::string&& value) {
  set_has_info();
  info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.RawOptionKnock.info)
}
#endif
inline void RawOptionKnock::set_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.RawOptionKnock.info)
}
inline void RawOptionKnock::set_info(const char* value, size_t size) {
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.RawOptionKnock.info)
}
inline ::std::string* RawOptionKnock::mutable_info() {
  set_has_info();
  // @@protoc_insertion_point(field_mutable:autotrade.RawOptionKnock.info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RawOptionKnock::release_info() {
  // @@protoc_insertion_point(field_release:autotrade.RawOptionKnock.info)
  if (!has_info()) {
    return NULL;
  }
  clear_has_info();
  return info_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RawOptionKnock::set_allocated_info(::std::string* info) {
  if (info != NULL) {
    set_has_info();
  } else {
    clear_has_info();
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:autotrade.RawOptionKnock.info)
}

// optional string start_pos = 22;
inline bool RawOptionKnock::has_start_pos() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RawOptionKnock::set_has_start_pos() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RawOptionKnock::clear_has_start_pos() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RawOptionKnock::clear_start_pos() {
  start_pos_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_start_pos();
}
inline const ::std::string& RawOptionKnock::start_pos() const {
  // @@protoc_insertion_point(field_get:autotrade.RawOptionKnock.start_pos)
  return start_pos_.GetNoArena();
}
inline void RawOptionKnock::set_start_pos(const ::std::string& value) {
  set_has_start_pos();
  start_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.RawOptionKnock.start_pos)
}
#if LANG_CXX11
inline void RawOptionKnock::set_start_pos(::std::string&& value) {
  set_has_start_pos();
  start_pos_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.RawOptionKnock.start_pos)
}
#endif
inline void RawOptionKnock::set_start_pos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_start_pos();
  start_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.RawOptionKnock.start_pos)
}
inline void RawOptionKnock::set_start_pos(const char* value, size_t size) {
  set_has_start_pos();
  start_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.RawOptionKnock.start_pos)
}
inline ::std::string* RawOptionKnock::mutable_start_pos() {
  set_has_start_pos();
  // @@protoc_insertion_point(field_mutable:autotrade.RawOptionKnock.start_pos)
  return start_pos_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RawOptionKnock::release_start_pos() {
  // @@protoc_insertion_point(field_release:autotrade.RawOptionKnock.start_pos)
  if (!has_start_pos()) {
    return NULL;
  }
  clear_has_start_pos();
  return start_pos_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RawOptionKnock::set_allocated_start_pos(::std::string* start_pos) {
  if (start_pos != NULL) {
    set_has_start_pos();
  } else {
    clear_has_start_pos();
  }
  start_pos_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_pos);
  // @@protoc_insertion_point(field_set_allocated:autotrade.RawOptionKnock.start_pos)
}

// -------------------------------------------------------------------

// OptionOrdersCreateResp_OrderList

// required string code = 1;
inline bool OptionOrdersCreateResp_OrderList::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptionOrdersCreateResp_OrderList::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptionOrdersCreateResp_OrderList::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptionOrdersCreateResp_OrderList::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& OptionOrdersCreateResp_OrderList::code() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersCreateResp.OrderList.code)
  return code_.GetNoArena();
}
inline void OptionOrdersCreateResp_OrderList::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersCreateResp.OrderList.code)
}
#if LANG_CXX11
inline void OptionOrdersCreateResp_OrderList::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionOrdersCreateResp.OrderList.code)
}
#endif
inline void OptionOrdersCreateResp_OrderList::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionOrdersCreateResp.OrderList.code)
}
inline void OptionOrdersCreateResp_OrderList::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionOrdersCreateResp.OrderList.code)
}
inline ::std::string* OptionOrdersCreateResp_OrderList::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionOrdersCreateResp.OrderList.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionOrdersCreateResp_OrderList::release_code() {
  // @@protoc_insertion_point(field_release:autotrade.OptionOrdersCreateResp.OrderList.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionOrdersCreateResp_OrderList::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionOrdersCreateResp.OrderList.code)
}

// required int64 price = 2;
inline bool OptionOrdersCreateResp_OrderList::has_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OptionOrdersCreateResp_OrderList::set_has_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OptionOrdersCreateResp_OrderList::clear_has_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OptionOrdersCreateResp_OrderList::clear_price() {
  price_ = GOOGLE_LONGLONG(0);
  clear_has_price();
}
inline ::google::protobuf::int64 OptionOrdersCreateResp_OrderList::price() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersCreateResp.OrderList.price)
  return price_;
}
inline void OptionOrdersCreateResp_OrderList::set_price(::google::protobuf::int64 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersCreateResp.OrderList.price)
}

// required uint32 qty = 3;
inline bool OptionOrdersCreateResp_OrderList::has_qty() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OptionOrdersCreateResp_OrderList::set_has_qty() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OptionOrdersCreateResp_OrderList::clear_has_qty() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OptionOrdersCreateResp_OrderList::clear_qty() {
  qty_ = 0u;
  clear_has_qty();
}
inline ::google::protobuf::uint32 OptionOrdersCreateResp_OrderList::qty() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersCreateResp.OrderList.qty)
  return qty_;
}
inline void OptionOrdersCreateResp_OrderList::set_qty(::google::protobuf::uint32 value) {
  set_has_qty();
  qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersCreateResp.OrderList.qty)
}

// optional string orderno = 4;
inline bool OptionOrdersCreateResp_OrderList::has_orderno() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptionOrdersCreateResp_OrderList::set_has_orderno() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OptionOrdersCreateResp_OrderList::clear_has_orderno() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OptionOrdersCreateResp_OrderList::clear_orderno() {
  orderno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_orderno();
}
inline const ::std::string& OptionOrdersCreateResp_OrderList::orderno() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersCreateResp.OrderList.orderno)
  return orderno_.GetNoArena();
}
inline void OptionOrdersCreateResp_OrderList::set_orderno(const ::std::string& value) {
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersCreateResp.OrderList.orderno)
}
#if LANG_CXX11
inline void OptionOrdersCreateResp_OrderList::set_orderno(::std::string&& value) {
  set_has_orderno();
  orderno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionOrdersCreateResp.OrderList.orderno)
}
#endif
inline void OptionOrdersCreateResp_OrderList::set_orderno(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionOrdersCreateResp.OrderList.orderno)
}
inline void OptionOrdersCreateResp_OrderList::set_orderno(const char* value, size_t size) {
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionOrdersCreateResp.OrderList.orderno)
}
inline ::std::string* OptionOrdersCreateResp_OrderList::mutable_orderno() {
  set_has_orderno();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionOrdersCreateResp.OrderList.orderno)
  return orderno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionOrdersCreateResp_OrderList::release_orderno() {
  // @@protoc_insertion_point(field_release:autotrade.OptionOrdersCreateResp.OrderList.orderno)
  if (!has_orderno()) {
    return NULL;
  }
  clear_has_orderno();
  return orderno_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionOrdersCreateResp_OrderList::set_allocated_orderno(::std::string* orderno) {
  if (orderno != NULL) {
    set_has_orderno();
  } else {
    clear_has_orderno();
  }
  orderno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderno);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionOrdersCreateResp.OrderList.orderno)
}

// optional int64 open_close_flag = 5;
inline bool OptionOrdersCreateResp_OrderList::has_open_close_flag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OptionOrdersCreateResp_OrderList::set_has_open_close_flag() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OptionOrdersCreateResp_OrderList::clear_has_open_close_flag() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OptionOrdersCreateResp_OrderList::clear_open_close_flag() {
  open_close_flag_ = GOOGLE_LONGLONG(0);
  clear_has_open_close_flag();
}
inline ::google::protobuf::int64 OptionOrdersCreateResp_OrderList::open_close_flag() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersCreateResp.OrderList.open_close_flag)
  return open_close_flag_;
}
inline void OptionOrdersCreateResp_OrderList::set_open_close_flag(::google::protobuf::int64 value) {
  set_has_open_close_flag();
  open_close_flag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersCreateResp.OrderList.open_close_flag)
}

// optional int32 ret_code = 6;
inline bool OptionOrdersCreateResp_OrderList::has_ret_code() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OptionOrdersCreateResp_OrderList::set_has_ret_code() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OptionOrdersCreateResp_OrderList::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OptionOrdersCreateResp_OrderList::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 OptionOrdersCreateResp_OrderList::ret_code() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersCreateResp.OrderList.ret_code)
  return ret_code_;
}
inline void OptionOrdersCreateResp_OrderList::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersCreateResp.OrderList.ret_code)
}

// optional string ret_message = 7;
inline bool OptionOrdersCreateResp_OrderList::has_ret_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OptionOrdersCreateResp_OrderList::set_has_ret_message() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OptionOrdersCreateResp_OrderList::clear_has_ret_message() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OptionOrdersCreateResp_OrderList::clear_ret_message() {
  ret_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ret_message();
}
inline const ::std::string& OptionOrdersCreateResp_OrderList::ret_message() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersCreateResp.OrderList.ret_message)
  return ret_message_.GetNoArena();
}
inline void OptionOrdersCreateResp_OrderList::set_ret_message(const ::std::string& value) {
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersCreateResp.OrderList.ret_message)
}
#if LANG_CXX11
inline void OptionOrdersCreateResp_OrderList::set_ret_message(::std::string&& value) {
  set_has_ret_message();
  ret_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionOrdersCreateResp.OrderList.ret_message)
}
#endif
inline void OptionOrdersCreateResp_OrderList::set_ret_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionOrdersCreateResp.OrderList.ret_message)
}
inline void OptionOrdersCreateResp_OrderList::set_ret_message(const char* value, size_t size) {
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionOrdersCreateResp.OrderList.ret_message)
}
inline ::std::string* OptionOrdersCreateResp_OrderList::mutable_ret_message() {
  set_has_ret_message();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionOrdersCreateResp.OrderList.ret_message)
  return ret_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionOrdersCreateResp_OrderList::release_ret_message() {
  // @@protoc_insertion_point(field_release:autotrade.OptionOrdersCreateResp.OrderList.ret_message)
  if (!has_ret_message()) {
    return NULL;
  }
  clear_has_ret_message();
  return ret_message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionOrdersCreateResp_OrderList::set_allocated_ret_message(::std::string* ret_message) {
  if (ret_message != NULL) {
    set_has_ret_message();
  } else {
    clear_has_ret_message();
  }
  ret_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ret_message);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionOrdersCreateResp.OrderList.ret_message)
}

// optional string name = 8;
inline bool OptionOrdersCreateResp_OrderList::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OptionOrdersCreateResp_OrderList::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OptionOrdersCreateResp_OrderList::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OptionOrdersCreateResp_OrderList::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& OptionOrdersCreateResp_OrderList::name() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersCreateResp.OrderList.name)
  return name_.GetNoArena();
}
inline void OptionOrdersCreateResp_OrderList::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersCreateResp.OrderList.name)
}
#if LANG_CXX11
inline void OptionOrdersCreateResp_OrderList::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionOrdersCreateResp.OrderList.name)
}
#endif
inline void OptionOrdersCreateResp_OrderList::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionOrdersCreateResp.OrderList.name)
}
inline void OptionOrdersCreateResp_OrderList::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionOrdersCreateResp.OrderList.name)
}
inline ::std::string* OptionOrdersCreateResp_OrderList::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionOrdersCreateResp.OrderList.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionOrdersCreateResp_OrderList::release_name() {
  // @@protoc_insertion_point(field_release:autotrade.OptionOrdersCreateResp.OrderList.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionOrdersCreateResp_OrderList::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionOrdersCreateResp.OrderList.name)
}

// -------------------------------------------------------------------

// OptionOrdersCreateResp

// optional int32 funcid = 1 [default = 13101014];
inline bool OptionOrdersCreateResp::has_funcid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void OptionOrdersCreateResp::set_has_funcid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void OptionOrdersCreateResp::clear_has_funcid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void OptionOrdersCreateResp::clear_funcid() {
  funcid_ = 13101014;
  clear_has_funcid();
}
inline ::google::protobuf::int32 OptionOrdersCreateResp::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersCreateResp.funcid)
  return funcid_;
}
inline void OptionOrdersCreateResp::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersCreateResp.funcid)
}

// optional string request_id = 2;
inline bool OptionOrdersCreateResp::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptionOrdersCreateResp::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptionOrdersCreateResp::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptionOrdersCreateResp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& OptionOrdersCreateResp::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersCreateResp.request_id)
  return request_id_.GetNoArena();
}
inline void OptionOrdersCreateResp::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersCreateResp.request_id)
}
#if LANG_CXX11
inline void OptionOrdersCreateResp::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionOrdersCreateResp.request_id)
}
#endif
inline void OptionOrdersCreateResp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionOrdersCreateResp.request_id)
}
inline void OptionOrdersCreateResp::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionOrdersCreateResp.request_id)
}
inline ::std::string* OptionOrdersCreateResp::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionOrdersCreateResp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionOrdersCreateResp::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.OptionOrdersCreateResp.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionOrdersCreateResp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionOrdersCreateResp.request_id)
}

// required string order_id = 3;
inline bool OptionOrdersCreateResp::has_order_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptionOrdersCreateResp::set_has_order_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OptionOrdersCreateResp::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OptionOrdersCreateResp::clear_order_id() {
  order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_id();
}
inline const ::std::string& OptionOrdersCreateResp::order_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersCreateResp.order_id)
  return order_id_.GetNoArena();
}
inline void OptionOrdersCreateResp::set_order_id(const ::std::string& value) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersCreateResp.order_id)
}
#if LANG_CXX11
inline void OptionOrdersCreateResp::set_order_id(::std::string&& value) {
  set_has_order_id();
  order_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionOrdersCreateResp.order_id)
}
#endif
inline void OptionOrdersCreateResp::set_order_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionOrdersCreateResp.order_id)
}
inline void OptionOrdersCreateResp::set_order_id(const char* value, size_t size) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionOrdersCreateResp.order_id)
}
inline ::std::string* OptionOrdersCreateResp::mutable_order_id() {
  set_has_order_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionOrdersCreateResp.order_id)
  return order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionOrdersCreateResp::release_order_id() {
  // @@protoc_insertion_point(field_release:autotrade.OptionOrdersCreateResp.order_id)
  if (!has_order_id()) {
    return NULL;
  }
  clear_has_order_id();
  return order_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionOrdersCreateResp::set_allocated_order_id(::std::string* order_id) {
  if (order_id != NULL) {
    set_has_order_id();
  } else {
    clear_has_order_id();
  }
  order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionOrdersCreateResp.order_id)
}

// required string order_group = 4;
inline bool OptionOrdersCreateResp::has_order_group() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OptionOrdersCreateResp::set_has_order_group() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OptionOrdersCreateResp::clear_has_order_group() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OptionOrdersCreateResp::clear_order_group() {
  order_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_group();
}
inline const ::std::string& OptionOrdersCreateResp::order_group() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersCreateResp.order_group)
  return order_group_.GetNoArena();
}
inline void OptionOrdersCreateResp::set_order_group(const ::std::string& value) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersCreateResp.order_group)
}
#if LANG_CXX11
inline void OptionOrdersCreateResp::set_order_group(::std::string&& value) {
  set_has_order_group();
  order_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionOrdersCreateResp.order_group)
}
#endif
inline void OptionOrdersCreateResp::set_order_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionOrdersCreateResp.order_group)
}
inline void OptionOrdersCreateResp::set_order_group(const char* value, size_t size) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionOrdersCreateResp.order_group)
}
inline ::std::string* OptionOrdersCreateResp::mutable_order_group() {
  set_has_order_group();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionOrdersCreateResp.order_group)
  return order_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionOrdersCreateResp::release_order_group() {
  // @@protoc_insertion_point(field_release:autotrade.OptionOrdersCreateResp.order_group)
  if (!has_order_group()) {
    return NULL;
  }
  clear_has_order_group();
  return order_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionOrdersCreateResp::set_allocated_order_group(::std::string* order_group) {
  if (order_group != NULL) {
    set_has_order_group();
  } else {
    clear_has_order_group();
  }
  order_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_group);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionOrdersCreateResp.order_group)
}

// optional string trader_id = 5;
inline bool OptionOrdersCreateResp::has_trader_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OptionOrdersCreateResp::set_has_trader_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OptionOrdersCreateResp::clear_has_trader_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OptionOrdersCreateResp::clear_trader_id() {
  trader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trader_id();
}
inline const ::std::string& OptionOrdersCreateResp::trader_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersCreateResp.trader_id)
  return trader_id_.GetNoArena();
}
inline void OptionOrdersCreateResp::set_trader_id(const ::std::string& value) {
  set_has_trader_id();
  trader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersCreateResp.trader_id)
}
#if LANG_CXX11
inline void OptionOrdersCreateResp::set_trader_id(::std::string&& value) {
  set_has_trader_id();
  trader_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionOrdersCreateResp.trader_id)
}
#endif
inline void OptionOrdersCreateResp::set_trader_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trader_id();
  trader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionOrdersCreateResp.trader_id)
}
inline void OptionOrdersCreateResp::set_trader_id(const char* value, size_t size) {
  set_has_trader_id();
  trader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionOrdersCreateResp.trader_id)
}
inline ::std::string* OptionOrdersCreateResp::mutable_trader_id() {
  set_has_trader_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionOrdersCreateResp.trader_id)
  return trader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionOrdersCreateResp::release_trader_id() {
  // @@protoc_insertion_point(field_release:autotrade.OptionOrdersCreateResp.trader_id)
  if (!has_trader_id()) {
    return NULL;
  }
  clear_has_trader_id();
  return trader_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionOrdersCreateResp::set_allocated_trader_id(::std::string* trader_id) {
  if (trader_id != NULL) {
    set_has_trader_id();
  } else {
    clear_has_trader_id();
  }
  trader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trader_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionOrdersCreateResp.trader_id)
}

// optional string robot_id = 6;
inline bool OptionOrdersCreateResp::has_robot_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OptionOrdersCreateResp::set_has_robot_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OptionOrdersCreateResp::clear_has_robot_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OptionOrdersCreateResp::clear_robot_id() {
  robot_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_robot_id();
}
inline const ::std::string& OptionOrdersCreateResp::robot_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersCreateResp.robot_id)
  return robot_id_.GetNoArena();
}
inline void OptionOrdersCreateResp::set_robot_id(const ::std::string& value) {
  set_has_robot_id();
  robot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersCreateResp.robot_id)
}
#if LANG_CXX11
inline void OptionOrdersCreateResp::set_robot_id(::std::string&& value) {
  set_has_robot_id();
  robot_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionOrdersCreateResp.robot_id)
}
#endif
inline void OptionOrdersCreateResp::set_robot_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_robot_id();
  robot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionOrdersCreateResp.robot_id)
}
inline void OptionOrdersCreateResp::set_robot_id(const char* value, size_t size) {
  set_has_robot_id();
  robot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionOrdersCreateResp.robot_id)
}
inline ::std::string* OptionOrdersCreateResp::mutable_robot_id() {
  set_has_robot_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionOrdersCreateResp.robot_id)
  return robot_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionOrdersCreateResp::release_robot_id() {
  // @@protoc_insertion_point(field_release:autotrade.OptionOrdersCreateResp.robot_id)
  if (!has_robot_id()) {
    return NULL;
  }
  clear_has_robot_id();
  return robot_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionOrdersCreateResp::set_allocated_robot_id(::std::string* robot_id) {
  if (robot_id != NULL) {
    set_has_robot_id();
  } else {
    clear_has_robot_id();
  }
  robot_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), robot_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionOrdersCreateResp.robot_id)
}

// optional uint32 data_date = 7;
inline bool OptionOrdersCreateResp::has_data_date() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OptionOrdersCreateResp::set_has_data_date() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OptionOrdersCreateResp::clear_has_data_date() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OptionOrdersCreateResp::clear_data_date() {
  data_date_ = 0u;
  clear_has_data_date();
}
inline ::google::protobuf::uint32 OptionOrdersCreateResp::data_date() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersCreateResp.data_date)
  return data_date_;
}
inline void OptionOrdersCreateResp::set_data_date(::google::protobuf::uint32 value) {
  set_has_data_date();
  data_date_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersCreateResp.data_date)
}

// optional uint32 data_time = 8;
inline bool OptionOrdersCreateResp::has_data_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OptionOrdersCreateResp::set_has_data_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OptionOrdersCreateResp::clear_has_data_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OptionOrdersCreateResp::clear_data_time() {
  data_time_ = 0u;
  clear_has_data_time();
}
inline ::google::protobuf::uint32 OptionOrdersCreateResp::data_time() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersCreateResp.data_time)
  return data_time_;
}
inline void OptionOrdersCreateResp::set_data_time(::google::protobuf::uint32 value) {
  set_has_data_time();
  data_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersCreateResp.data_time)
}

// optional string fund_id = 9;
inline bool OptionOrdersCreateResp::has_fund_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OptionOrdersCreateResp::set_has_fund_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OptionOrdersCreateResp::clear_has_fund_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OptionOrdersCreateResp::clear_fund_id() {
  fund_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fund_id();
}
inline const ::std::string& OptionOrdersCreateResp::fund_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersCreateResp.fund_id)
  return fund_id_.GetNoArena();
}
inline void OptionOrdersCreateResp::set_fund_id(const ::std::string& value) {
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersCreateResp.fund_id)
}
#if LANG_CXX11
inline void OptionOrdersCreateResp::set_fund_id(::std::string&& value) {
  set_has_fund_id();
  fund_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionOrdersCreateResp.fund_id)
}
#endif
inline void OptionOrdersCreateResp::set_fund_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionOrdersCreateResp.fund_id)
}
inline void OptionOrdersCreateResp::set_fund_id(const char* value, size_t size) {
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionOrdersCreateResp.fund_id)
}
inline ::std::string* OptionOrdersCreateResp::mutable_fund_id() {
  set_has_fund_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionOrdersCreateResp.fund_id)
  return fund_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionOrdersCreateResp::release_fund_id() {
  // @@protoc_insertion_point(field_release:autotrade.OptionOrdersCreateResp.fund_id)
  if (!has_fund_id()) {
    return NULL;
  }
  clear_has_fund_id();
  return fund_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionOrdersCreateResp::set_allocated_fund_id(::std::string* fund_id) {
  if (fund_id != NULL) {
    set_has_fund_id();
  } else {
    clear_has_fund_id();
  }
  fund_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fund_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionOrdersCreateResp.fund_id)
}

// optional int64 market = 10;
inline bool OptionOrdersCreateResp::has_market() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OptionOrdersCreateResp::set_has_market() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OptionOrdersCreateResp::clear_has_market() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OptionOrdersCreateResp::clear_market() {
  market_ = GOOGLE_LONGLONG(0);
  clear_has_market();
}
inline ::google::protobuf::int64 OptionOrdersCreateResp::market() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersCreateResp.market)
  return market_;
}
inline void OptionOrdersCreateResp::set_market(::google::protobuf::int64 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersCreateResp.market)
}

// optional int64 bsflag = 11;
inline bool OptionOrdersCreateResp::has_bsflag() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OptionOrdersCreateResp::set_has_bsflag() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OptionOrdersCreateResp::clear_has_bsflag() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OptionOrdersCreateResp::clear_bsflag() {
  bsflag_ = GOOGLE_LONGLONG(0);
  clear_has_bsflag();
}
inline ::google::protobuf::int64 OptionOrdersCreateResp::bsflag() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersCreateResp.bsflag)
  return bsflag_;
}
inline void OptionOrdersCreateResp::set_bsflag(::google::protobuf::int64 value) {
  set_has_bsflag();
  bsflag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersCreateResp.bsflag)
}

// optional int32 order_price_type = 12 [default = 0];
inline bool OptionOrdersCreateResp::has_order_price_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OptionOrdersCreateResp::set_has_order_price_type() {
  _has_bits_[0] |= 0x00001000u;
}
inline void OptionOrdersCreateResp::clear_has_order_price_type() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void OptionOrdersCreateResp::clear_order_price_type() {
  order_price_type_ = 0;
  clear_has_order_price_type();
}
inline ::google::protobuf::int32 OptionOrdersCreateResp::order_price_type() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersCreateResp.order_price_type)
  return order_price_type_;
}
inline void OptionOrdersCreateResp::set_order_price_type(::google::protobuf::int32 value) {
  set_has_order_price_type();
  order_price_type_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersCreateResp.order_price_type)
}

// optional int32 covered_flag = 13 [default = 0];
inline bool OptionOrdersCreateResp::has_covered_flag() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void OptionOrdersCreateResp::set_has_covered_flag() {
  _has_bits_[0] |= 0x00002000u;
}
inline void OptionOrdersCreateResp::clear_has_covered_flag() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void OptionOrdersCreateResp::clear_covered_flag() {
  covered_flag_ = 0;
  clear_has_covered_flag();
}
inline ::google::protobuf::int32 OptionOrdersCreateResp::covered_flag() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersCreateResp.covered_flag)
  return covered_flag_;
}
inline void OptionOrdersCreateResp::set_covered_flag(::google::protobuf::int32 value) {
  set_has_covered_flag();
  covered_flag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersCreateResp.covered_flag)
}

// optional string match_condition = 14 [default = ""];
inline bool OptionOrdersCreateResp::has_match_condition() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OptionOrdersCreateResp::set_has_match_condition() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OptionOrdersCreateResp::clear_has_match_condition() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OptionOrdersCreateResp::clear_match_condition() {
  match_condition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_match_condition();
}
inline const ::std::string& OptionOrdersCreateResp::match_condition() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersCreateResp.match_condition)
  return match_condition_.GetNoArena();
}
inline void OptionOrdersCreateResp::set_match_condition(const ::std::string& value) {
  set_has_match_condition();
  match_condition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersCreateResp.match_condition)
}
#if LANG_CXX11
inline void OptionOrdersCreateResp::set_match_condition(::std::string&& value) {
  set_has_match_condition();
  match_condition_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionOrdersCreateResp.match_condition)
}
#endif
inline void OptionOrdersCreateResp::set_match_condition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_match_condition();
  match_condition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionOrdersCreateResp.match_condition)
}
inline void OptionOrdersCreateResp::set_match_condition(const char* value, size_t size) {
  set_has_match_condition();
  match_condition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionOrdersCreateResp.match_condition)
}
inline ::std::string* OptionOrdersCreateResp::mutable_match_condition() {
  set_has_match_condition();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionOrdersCreateResp.match_condition)
  return match_condition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionOrdersCreateResp::release_match_condition() {
  // @@protoc_insertion_point(field_release:autotrade.OptionOrdersCreateResp.match_condition)
  if (!has_match_condition()) {
    return NULL;
  }
  clear_has_match_condition();
  return match_condition_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionOrdersCreateResp::set_allocated_match_condition(::std::string* match_condition) {
  if (match_condition != NULL) {
    set_has_match_condition();
  } else {
    clear_has_match_condition();
  }
  match_condition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), match_condition);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionOrdersCreateResp.match_condition)
}

// repeated .autotrade.OptionOrdersCreateResp.OrderList order_list = 15;
inline int OptionOrdersCreateResp::order_list_size() const {
  return order_list_.size();
}
inline void OptionOrdersCreateResp::clear_order_list() {
  order_list_.Clear();
}
inline ::autotrade::OptionOrdersCreateResp_OrderList* OptionOrdersCreateResp::mutable_order_list(int index) {
  // @@protoc_insertion_point(field_mutable:autotrade.OptionOrdersCreateResp.order_list)
  return order_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::autotrade::OptionOrdersCreateResp_OrderList >*
OptionOrdersCreateResp::mutable_order_list() {
  // @@protoc_insertion_point(field_mutable_list:autotrade.OptionOrdersCreateResp.order_list)
  return &order_list_;
}
inline const ::autotrade::OptionOrdersCreateResp_OrderList& OptionOrdersCreateResp::order_list(int index) const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersCreateResp.order_list)
  return order_list_.Get(index);
}
inline ::autotrade::OptionOrdersCreateResp_OrderList* OptionOrdersCreateResp::add_order_list() {
  // @@protoc_insertion_point(field_add:autotrade.OptionOrdersCreateResp.order_list)
  return order_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::autotrade::OptionOrdersCreateResp_OrderList >&
OptionOrdersCreateResp::order_list() const {
  // @@protoc_insertion_point(field_list:autotrade.OptionOrdersCreateResp.order_list)
  return order_list_;
}

// optional string account_name = 16 [default = ""];
inline bool OptionOrdersCreateResp::has_account_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OptionOrdersCreateResp::set_has_account_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OptionOrdersCreateResp::clear_has_account_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OptionOrdersCreateResp::clear_account_name() {
  account_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account_name();
}
inline const ::std::string& OptionOrdersCreateResp::account_name() const {
  // @@protoc_insertion_point(field_get:autotrade.OptionOrdersCreateResp.account_name)
  return account_name_.GetNoArena();
}
inline void OptionOrdersCreateResp::set_account_name(const ::std::string& value) {
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OptionOrdersCreateResp.account_name)
}
#if LANG_CXX11
inline void OptionOrdersCreateResp::set_account_name(::std::string&& value) {
  set_has_account_name();
  account_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OptionOrdersCreateResp.account_name)
}
#endif
inline void OptionOrdersCreateResp::set_account_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OptionOrdersCreateResp.account_name)
}
inline void OptionOrdersCreateResp::set_account_name(const char* value, size_t size) {
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OptionOrdersCreateResp.account_name)
}
inline ::std::string* OptionOrdersCreateResp::mutable_account_name() {
  set_has_account_name();
  // @@protoc_insertion_point(field_mutable:autotrade.OptionOrdersCreateResp.account_name)
  return account_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionOrdersCreateResp::release_account_name() {
  // @@protoc_insertion_point(field_release:autotrade.OptionOrdersCreateResp.account_name)
  if (!has_account_name()) {
    return NULL;
  }
  clear_has_account_name();
  return account_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionOrdersCreateResp::set_allocated_account_name(::std::string* account_name) {
  if (account_name != NULL) {
    set_has_account_name();
  } else {
    clear_has_account_name();
  }
  account_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_name);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OptionOrdersCreateResp.account_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace autotrade

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::autotrade::OptionQueryOrderReqt_QueryType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autotrade::OptionQueryOrderReqt_QueryType>() {
  return ::autotrade::OptionQueryOrderReqt_QueryType_descriptor();
}
template <> struct is_proto_enum< ::autotrade::OptionQueryOrderReqt_QueryFlag> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autotrade::OptionQueryOrderReqt_QueryFlag>() {
  return ::autotrade::OptionQueryOrderReqt_QueryFlag_descriptor();
}
template <> struct is_proto_enum< ::autotrade::OptionQueryPositionReqt_QueryType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autotrade::OptionQueryPositionReqt_QueryType>() {
  return ::autotrade::OptionQueryPositionReqt_QueryType_descriptor();
}
template <> struct is_proto_enum< ::autotrade::OptionQueryDealDetailReqt_QueryType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autotrade::OptionQueryDealDetailReqt_QueryType>() {
  return ::autotrade::OptionQueryDealDetailReqt_QueryType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_protos_2fqoption_5fprotocol_2eproto
