// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/qpolicy_protocol.proto

#ifndef PROTOBUF_INCLUDED_protos_2fqpolicy_5fprotocol_2eproto
#define PROTOBUF_INCLUDED_protos_2fqpolicy_5fprotocol_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fqpolicy_5fprotocol_2eproto 

namespace protobuf_protos_2fqpolicy_5fprotocol_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[12];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_protos_2fqpolicy_5fprotocol_2eproto
namespace autotrade {
class AccountParameters;
class AccountParametersDefaultTypeInternal;
extern AccountParametersDefaultTypeInternal _AccountParameters_default_instance_;
class AlgoPolicyCreateReqt;
class AlgoPolicyCreateReqtDefaultTypeInternal;
extern AlgoPolicyCreateReqtDefaultTypeInternal _AlgoPolicyCreateReqt_default_instance_;
class AlgoPolicyCreateResp;
class AlgoPolicyCreateRespDefaultTypeInternal;
extern AlgoPolicyCreateRespDefaultTypeInternal _AlgoPolicyCreateResp_default_instance_;
class AlgoPolicyDeleteReqt;
class AlgoPolicyDeleteReqtDefaultTypeInternal;
extern AlgoPolicyDeleteReqtDefaultTypeInternal _AlgoPolicyDeleteReqt_default_instance_;
class AlgoPolicyDeleteResp;
class AlgoPolicyDeleteRespDefaultTypeInternal;
extern AlgoPolicyDeleteRespDefaultTypeInternal _AlgoPolicyDeleteResp_default_instance_;
class AlgoPolicyQueryReqt;
class AlgoPolicyQueryReqtDefaultTypeInternal;
extern AlgoPolicyQueryReqtDefaultTypeInternal _AlgoPolicyQueryReqt_default_instance_;
class AlgoPolicyQueryResp;
class AlgoPolicyQueryRespDefaultTypeInternal;
extern AlgoPolicyQueryRespDefaultTypeInternal _AlgoPolicyQueryResp_default_instance_;
class AlgoPolicyQueryResp_SubOrderInfo;
class AlgoPolicyQueryResp_SubOrderInfoDefaultTypeInternal;
extern AlgoPolicyQueryResp_SubOrderInfoDefaultTypeInternal _AlgoPolicyQueryResp_SubOrderInfo_default_instance_;
class AlgoPolicyUpdateReqt;
class AlgoPolicyUpdateReqtDefaultTypeInternal;
extern AlgoPolicyUpdateReqtDefaultTypeInternal _AlgoPolicyUpdateReqt_default_instance_;
class AlgoPolicyUpdateResp;
class AlgoPolicyUpdateRespDefaultTypeInternal;
extern AlgoPolicyUpdateRespDefaultTypeInternal _AlgoPolicyUpdateResp_default_instance_;
class PolicyParameters;
class PolicyParametersDefaultTypeInternal;
extern PolicyParametersDefaultTypeInternal _PolicyParameters_default_instance_;
class TraceParameters;
class TraceParametersDefaultTypeInternal;
extern TraceParametersDefaultTypeInternal _TraceParameters_default_instance_;
}  // namespace autotrade
namespace google {
namespace protobuf {
template<> ::autotrade::AccountParameters* Arena::CreateMaybeMessage<::autotrade::AccountParameters>(Arena*);
template<> ::autotrade::AlgoPolicyCreateReqt* Arena::CreateMaybeMessage<::autotrade::AlgoPolicyCreateReqt>(Arena*);
template<> ::autotrade::AlgoPolicyCreateResp* Arena::CreateMaybeMessage<::autotrade::AlgoPolicyCreateResp>(Arena*);
template<> ::autotrade::AlgoPolicyDeleteReqt* Arena::CreateMaybeMessage<::autotrade::AlgoPolicyDeleteReqt>(Arena*);
template<> ::autotrade::AlgoPolicyDeleteResp* Arena::CreateMaybeMessage<::autotrade::AlgoPolicyDeleteResp>(Arena*);
template<> ::autotrade::AlgoPolicyQueryReqt* Arena::CreateMaybeMessage<::autotrade::AlgoPolicyQueryReqt>(Arena*);
template<> ::autotrade::AlgoPolicyQueryResp* Arena::CreateMaybeMessage<::autotrade::AlgoPolicyQueryResp>(Arena*);
template<> ::autotrade::AlgoPolicyQueryResp_SubOrderInfo* Arena::CreateMaybeMessage<::autotrade::AlgoPolicyQueryResp_SubOrderInfo>(Arena*);
template<> ::autotrade::AlgoPolicyUpdateReqt* Arena::CreateMaybeMessage<::autotrade::AlgoPolicyUpdateReqt>(Arena*);
template<> ::autotrade::AlgoPolicyUpdateResp* Arena::CreateMaybeMessage<::autotrade::AlgoPolicyUpdateResp>(Arena*);
template<> ::autotrade::PolicyParameters* Arena::CreateMaybeMessage<::autotrade::PolicyParameters>(Arena*);
template<> ::autotrade::TraceParameters* Arena::CreateMaybeMessage<::autotrade::TraceParameters>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace autotrade {

// ===================================================================

class PolicyParameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.PolicyParameters) */ {
 public:
  PolicyParameters();
  virtual ~PolicyParameters();

  PolicyParameters(const PolicyParameters& from);

  inline PolicyParameters& operator=(const PolicyParameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PolicyParameters(PolicyParameters&& from) noexcept
    : PolicyParameters() {
    *this = ::std::move(from);
  }

  inline PolicyParameters& operator=(PolicyParameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PolicyParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PolicyParameters* internal_default_instance() {
    return reinterpret_cast<const PolicyParameters*>(
               &_PolicyParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PolicyParameters* other);
  friend void swap(PolicyParameters& a, PolicyParameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PolicyParameters* New() const final {
    return CreateMaybeMessage<PolicyParameters>(NULL);
  }

  PolicyParameters* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PolicyParameters>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PolicyParameters& from);
  void MergeFrom(const PolicyParameters& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PolicyParameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string algono = 1;
  bool has_algono() const;
  void clear_algono();
  static const int kAlgonoFieldNumber = 1;
  const ::std::string& algono() const;
  void set_algono(const ::std::string& value);
  #if LANG_CXX11
  void set_algono(::std::string&& value);
  #endif
  void set_algono(const char* value);
  void set_algono(const char* value, size_t size);
  ::std::string* mutable_algono();
  ::std::string* release_algono();
  void set_allocated_algono(::std::string* algono);

  // required string sec_uid = 2;
  bool has_sec_uid() const;
  void clear_sec_uid();
  static const int kSecUidFieldNumber = 2;
  const ::std::string& sec_uid() const;
  void set_sec_uid(const ::std::string& value);
  #if LANG_CXX11
  void set_sec_uid(::std::string&& value);
  #endif
  void set_sec_uid(const char* value);
  void set_sec_uid(const char* value, size_t size);
  ::std::string* mutable_sec_uid();
  ::std::string* release_sec_uid();
  void set_allocated_sec_uid(::std::string* sec_uid);

  // required string fund_id = 3;
  bool has_fund_id() const;
  void clear_fund_id();
  static const int kFundIdFieldNumber = 3;
  const ::std::string& fund_id() const;
  void set_fund_id(const ::std::string& value);
  #if LANG_CXX11
  void set_fund_id(::std::string&& value);
  #endif
  void set_fund_id(const char* value);
  void set_fund_id(const char* value, size_t size);
  ::std::string* mutable_fund_id();
  ::std::string* release_fund_id();
  void set_allocated_fund_id(::std::string* fund_id);

  // required string stock_code = 5;
  bool has_stock_code() const;
  void clear_stock_code();
  static const int kStockCodeFieldNumber = 5;
  const ::std::string& stock_code() const;
  void set_stock_code(const ::std::string& value);
  #if LANG_CXX11
  void set_stock_code(::std::string&& value);
  #endif
  void set_stock_code(const char* value);
  void set_stock_code(const char* value, size_t size);
  ::std::string* mutable_stock_code();
  ::std::string* release_stock_code();
  void set_allocated_stock_code(::std::string* stock_code);

  // required string bsflag = 8;
  bool has_bsflag() const;
  void clear_bsflag();
  static const int kBsflagFieldNumber = 8;
  const ::std::string& bsflag() const;
  void set_bsflag(const ::std::string& value);
  #if LANG_CXX11
  void set_bsflag(::std::string&& value);
  #endif
  void set_bsflag(const char* value);
  void set_bsflag(const char* value, size_t size);
  ::std::string* mutable_bsflag();
  ::std::string* release_bsflag();
  void set_allocated_bsflag(::std::string* bsflag);

  // required uint32 market = 4;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 4;
  ::google::protobuf::uint32 market() const;
  void set_market(::google::protobuf::uint32 value);

  // optional int32 stock_type = 6;
  bool has_stock_type() const;
  void clear_stock_type();
  static const int kStockTypeFieldNumber = 6;
  ::google::protobuf::int32 stock_type() const;
  void set_stock_type(::google::protobuf::int32 value);

  // required uint32 hedge_flag = 7;
  bool has_hedge_flag() const;
  void clear_hedge_flag();
  static const int kHedgeFlagFieldNumber = 7;
  ::google::protobuf::uint32 hedge_flag() const;
  void set_hedge_flag(::google::protobuf::uint32 value);

  // optional int32 autotradesno = 9;
  bool has_autotradesno() const;
  void clear_autotradesno();
  static const int kAutotradesnoFieldNumber = 9;
  ::google::protobuf::int32 autotradesno() const;
  void set_autotradesno(::google::protobuf::int32 value);

  // required int32 total_type = 10;
  bool has_total_type() const;
  void clear_total_type();
  static const int kTotalTypeFieldNumber = 10;
  ::google::protobuf::int32 total_type() const;
  void set_total_type(::google::protobuf::int32 value);

  // optional int32 total_qty = 11;
  bool has_total_qty() const;
  void clear_total_qty();
  static const int kTotalQtyFieldNumber = 11;
  ::google::protobuf::int32 total_qty() const;
  void set_total_qty(::google::protobuf::int32 value);

  // optional int64 total_amount = 12;
  bool has_total_amount() const;
  void clear_total_amount();
  static const int kTotalAmountFieldNumber = 12;
  ::google::protobuf::int64 total_amount() const;
  void set_total_amount(::google::protobuf::int64 value);

  // optional int64 order_price = 14;
  bool has_order_price() const;
  void clear_order_price();
  static const int kOrderPriceFieldNumber = 14;
  ::google::protobuf::int64 order_price() const;
  void set_order_price(::google::protobuf::int64 value);

  // required int32 order_type = 13;
  bool has_order_type() const;
  void clear_order_type();
  static const int kOrderTypeFieldNumber = 13;
  ::google::protobuf::int32 order_type() const;
  void set_order_type(::google::protobuf::int32 value);

  // optional int32 order_price_level = 15;
  bool has_order_price_level() const;
  void clear_order_price_level();
  static const int kOrderPriceLevelFieldNumber = 15;
  ::google::protobuf::int32 order_price_level() const;
  void set_order_price_level(::google::protobuf::int32 value);

  // required int32 trade_type = 16;
  bool has_trade_type() const;
  void clear_trade_type();
  static const int kTradeTypeFieldNumber = 16;
  ::google::protobuf::int32 trade_type() const;
  void set_trade_type(::google::protobuf::int32 value);

  // optional int32 credit_type = 17;
  bool has_credit_type() const;
  void clear_credit_type();
  static const int kCreditTypeFieldNumber = 17;
  ::google::protobuf::int32 credit_type() const;
  void set_credit_type(::google::protobuf::int32 value);

  // optional int32 suborder_valid_period = 18;
  bool has_suborder_valid_period() const;
  void clear_suborder_valid_period();
  static const int kSuborderValidPeriodFieldNumber = 18;
  ::google::protobuf::int32 suborder_valid_period() const;
  void set_suborder_valid_period(::google::protobuf::int32 value);

  // optional bool radical_reorder = 19;
  bool has_radical_reorder() const;
  void clear_radical_reorder();
  static const int kRadicalReorderFieldNumber = 19;
  bool radical_reorder() const;
  void set_radical_reorder(bool value);

  // optional int32 radical_level = 20;
  bool has_radical_level() const;
  void clear_radical_level();
  static const int kRadicalLevelFieldNumber = 20;
  ::google::protobuf::int32 radical_level() const;
  void set_radical_level(::google::protobuf::int32 value);

  // optional int32 radical_count = 21;
  bool has_radical_count() const;
  void clear_radical_count();
  static const int kRadicalCountFieldNumber = 21;
  ::google::protobuf::int32 radical_count() const;
  void set_radical_count(::google::protobuf::int32 value);

  // optional int32 order_frequency = 22;
  bool has_order_frequency() const;
  void clear_order_frequency();
  static const int kOrderFrequencyFieldNumber = 22;
  ::google::protobuf::int32 order_frequency() const;
  void set_order_frequency(::google::protobuf::int32 value);

  // optional int32 order_limit_price_type = 23;
  bool has_order_limit_price_type() const;
  void clear_order_limit_price_type();
  static const int kOrderLimitPriceTypeFieldNumber = 23;
  ::google::protobuf::int32 order_limit_price_type() const;
  void set_order_limit_price_type(::google::protobuf::int32 value);

  // optional int64 max_price = 24;
  bool has_max_price() const;
  void clear_max_price();
  static const int kMaxPriceFieldNumber = 24;
  ::google::protobuf::int64 max_price() const;
  void set_max_price(::google::protobuf::int64 value);

  // optional int64 min_price = 25;
  bool has_min_price() const;
  void clear_min_price();
  static const int kMinPriceFieldNumber = 25;
  ::google::protobuf::int64 min_price() const;
  void set_min_price(::google::protobuf::int64 value);

  // optional int32 price_float_point = 26;
  bool has_price_float_point() const;
  void clear_price_float_point();
  static const int kPriceFloatPointFieldNumber = 26;
  ::google::protobuf::int32 price_float_point() const;
  void set_price_float_point(::google::protobuf::int32 value);

  // optional int32 min_trade_unit = 27;
  bool has_min_trade_unit() const;
  void clear_min_trade_unit();
  static const int kMinTradeUnitFieldNumber = 27;
  ::google::protobuf::int32 min_trade_unit() const;
  void set_min_trade_unit(::google::protobuf::int32 value);

  // required int32 start_mode = 28;
  bool has_start_mode() const;
  void clear_start_mode();
  static const int kStartModeFieldNumber = 28;
  ::google::protobuf::int32 start_mode() const;
  void set_start_mode(::google::protobuf::int32 value);

  // optional int32 start_time = 29;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 29;
  ::google::protobuf::int32 start_time() const;
  void set_start_time(::google::protobuf::int32 value);

  // optional int32 execute_time = 30;
  bool has_execute_time() const;
  void clear_execute_time();
  static const int kExecuteTimeFieldNumber = 30;
  ::google::protobuf::int32 execute_time() const;
  void set_execute_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.PolicyParameters)
 private:
  void set_has_algono();
  void clear_has_algono();
  void set_has_sec_uid();
  void clear_has_sec_uid();
  void set_has_fund_id();
  void clear_has_fund_id();
  void set_has_market();
  void clear_has_market();
  void set_has_stock_code();
  void clear_has_stock_code();
  void set_has_stock_type();
  void clear_has_stock_type();
  void set_has_hedge_flag();
  void clear_has_hedge_flag();
  void set_has_bsflag();
  void clear_has_bsflag();
  void set_has_autotradesno();
  void clear_has_autotradesno();
  void set_has_total_type();
  void clear_has_total_type();
  void set_has_total_qty();
  void clear_has_total_qty();
  void set_has_total_amount();
  void clear_has_total_amount();
  void set_has_order_type();
  void clear_has_order_type();
  void set_has_order_price();
  void clear_has_order_price();
  void set_has_order_price_level();
  void clear_has_order_price_level();
  void set_has_trade_type();
  void clear_has_trade_type();
  void set_has_credit_type();
  void clear_has_credit_type();
  void set_has_suborder_valid_period();
  void clear_has_suborder_valid_period();
  void set_has_radical_reorder();
  void clear_has_radical_reorder();
  void set_has_radical_level();
  void clear_has_radical_level();
  void set_has_radical_count();
  void clear_has_radical_count();
  void set_has_order_frequency();
  void clear_has_order_frequency();
  void set_has_order_limit_price_type();
  void clear_has_order_limit_price_type();
  void set_has_max_price();
  void clear_has_max_price();
  void set_has_min_price();
  void clear_has_min_price();
  void set_has_price_float_point();
  void clear_has_price_float_point();
  void set_has_min_trade_unit();
  void clear_has_min_trade_unit();
  void set_has_start_mode();
  void clear_has_start_mode();
  void set_has_start_time();
  void clear_has_start_time();
  void set_has_execute_time();
  void clear_has_execute_time();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr algono_;
  ::google::protobuf::internal::ArenaStringPtr sec_uid_;
  ::google::protobuf::internal::ArenaStringPtr fund_id_;
  ::google::protobuf::internal::ArenaStringPtr stock_code_;
  ::google::protobuf::internal::ArenaStringPtr bsflag_;
  ::google::protobuf::uint32 market_;
  ::google::protobuf::int32 stock_type_;
  ::google::protobuf::uint32 hedge_flag_;
  ::google::protobuf::int32 autotradesno_;
  ::google::protobuf::int32 total_type_;
  ::google::protobuf::int32 total_qty_;
  ::google::protobuf::int64 total_amount_;
  ::google::protobuf::int64 order_price_;
  ::google::protobuf::int32 order_type_;
  ::google::protobuf::int32 order_price_level_;
  ::google::protobuf::int32 trade_type_;
  ::google::protobuf::int32 credit_type_;
  ::google::protobuf::int32 suborder_valid_period_;
  bool radical_reorder_;
  ::google::protobuf::int32 radical_level_;
  ::google::protobuf::int32 radical_count_;
  ::google::protobuf::int32 order_frequency_;
  ::google::protobuf::int32 order_limit_price_type_;
  ::google::protobuf::int64 max_price_;
  ::google::protobuf::int64 min_price_;
  ::google::protobuf::int32 price_float_point_;
  ::google::protobuf::int32 min_trade_unit_;
  ::google::protobuf::int32 start_mode_;
  ::google::protobuf::int32 start_time_;
  ::google::protobuf::int32 execute_time_;
  friend struct ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AccountParameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.AccountParameters) */ {
 public:
  AccountParameters();
  virtual ~AccountParameters();

  AccountParameters(const AccountParameters& from);

  inline AccountParameters& operator=(const AccountParameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccountParameters(AccountParameters&& from) noexcept
    : AccountParameters() {
    *this = ::std::move(from);
  }

  inline AccountParameters& operator=(AccountParameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountParameters* internal_default_instance() {
    return reinterpret_cast<const AccountParameters*>(
               &_AccountParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AccountParameters* other);
  friend void swap(AccountParameters& a, AccountParameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccountParameters* New() const final {
    return CreateMaybeMessage<AccountParameters>(NULL);
  }

  AccountParameters* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AccountParameters>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AccountParameters& from);
  void MergeFrom(const AccountParameters& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountParameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string cust_code = 1;
  bool has_cust_code() const;
  void clear_cust_code();
  static const int kCustCodeFieldNumber = 1;
  const ::std::string& cust_code() const;
  void set_cust_code(const ::std::string& value);
  #if LANG_CXX11
  void set_cust_code(::std::string&& value);
  #endif
  void set_cust_code(const char* value);
  void set_cust_code(const char* value, size_t size);
  ::std::string* mutable_cust_code();
  ::std::string* release_cust_code();
  void set_allocated_cust_code(::std::string* cust_code);

  // optional string channel = 3;
  bool has_channel() const;
  void clear_channel();
  static const int kChannelFieldNumber = 3;
  const ::std::string& channel() const;
  void set_channel(const ::std::string& value);
  #if LANG_CXX11
  void set_channel(::std::string&& value);
  #endif
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  ::std::string* mutable_channel();
  ::std::string* release_channel();
  void set_allocated_channel(::std::string* channel);

  // optional string acct_type = 5;
  bool has_acct_type() const;
  void clear_acct_type();
  static const int kAcctTypeFieldNumber = 5;
  const ::std::string& acct_type() const;
  void set_acct_type(const ::std::string& value);
  #if LANG_CXX11
  void set_acct_type(::std::string&& value);
  #endif
  void set_acct_type(const char* value);
  void set_acct_type(const char* value, size_t size);
  ::std::string* mutable_acct_type();
  ::std::string* release_acct_type();
  void set_allocated_acct_type(::std::string* acct_type);

  // optional string encrypt_key = 6;
  bool has_encrypt_key() const;
  void clear_encrypt_key();
  static const int kEncryptKeyFieldNumber = 6;
  const ::std::string& encrypt_key() const;
  void set_encrypt_key(const ::std::string& value);
  #if LANG_CXX11
  void set_encrypt_key(::std::string&& value);
  #endif
  void set_encrypt_key(const char* value);
  void set_encrypt_key(const char* value, size_t size);
  ::std::string* mutable_encrypt_key();
  ::std::string* release_encrypt_key();
  void set_allocated_encrypt_key(::std::string* encrypt_key);

  // optional string auth_data = 7;
  bool has_auth_data() const;
  void clear_auth_data();
  static const int kAuthDataFieldNumber = 7;
  const ::std::string& auth_data() const;
  void set_auth_data(const ::std::string& value);
  #if LANG_CXX11
  void set_auth_data(::std::string&& value);
  #endif
  void set_auth_data(const char* value);
  void set_auth_data(const char* value, size_t size);
  ::std::string* mutable_auth_data();
  ::std::string* release_auth_data();
  void set_allocated_auth_data(::std::string* auth_data);

  // optional int32 int_org = 2;
  bool has_int_org() const;
  void clear_int_org();
  static const int kIntOrgFieldNumber = 2;
  ::google::protobuf::int32 int_org() const;
  void set_int_org(::google::protobuf::int32 value);

  // optional int32 fund_sn = 4;
  bool has_fund_sn() const;
  void clear_fund_sn();
  static const int kFundSnFieldNumber = 4;
  ::google::protobuf::int32 fund_sn() const;
  void set_fund_sn(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.AccountParameters)
 private:
  void set_has_cust_code();
  void clear_has_cust_code();
  void set_has_int_org();
  void clear_has_int_org();
  void set_has_channel();
  void clear_has_channel();
  void set_has_fund_sn();
  void clear_has_fund_sn();
  void set_has_acct_type();
  void clear_has_acct_type();
  void set_has_encrypt_key();
  void clear_has_encrypt_key();
  void set_has_auth_data();
  void clear_has_auth_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr cust_code_;
  ::google::protobuf::internal::ArenaStringPtr channel_;
  ::google::protobuf::internal::ArenaStringPtr acct_type_;
  ::google::protobuf::internal::ArenaStringPtr encrypt_key_;
  ::google::protobuf::internal::ArenaStringPtr auth_data_;
  ::google::protobuf::int32 int_org_;
  ::google::protobuf::int32 fund_sn_;
  friend struct ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TraceParameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.TraceParameters) */ {
 public:
  TraceParameters();
  virtual ~TraceParameters();

  TraceParameters(const TraceParameters& from);

  inline TraceParameters& operator=(const TraceParameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TraceParameters(TraceParameters&& from) noexcept
    : TraceParameters() {
    *this = ::std::move(from);
  }

  inline TraceParameters& operator=(TraceParameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TraceParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TraceParameters* internal_default_instance() {
    return reinterpret_cast<const TraceParameters*>(
               &_TraceParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TraceParameters* other);
  friend void swap(TraceParameters& a, TraceParameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TraceParameters* New() const final {
    return CreateMaybeMessage<TraceParameters>(NULL);
  }

  TraceParameters* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TraceParameters>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TraceParameters& from);
  void MergeFrom(const TraceParameters& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TraceParameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string server = 2;
  bool has_server() const;
  void clear_server();
  static const int kServerFieldNumber = 2;
  const ::std::string& server() const;
  void set_server(const ::std::string& value);
  #if LANG_CXX11
  void set_server(::std::string&& value);
  #endif
  void set_server(const char* value);
  void set_server(const char* value, size_t size);
  ::std::string* mutable_server();
  ::std::string* release_server();
  void set_allocated_server(::std::string* server);

  // optional bool backtest = 3 [default = false];
  bool has_backtest() const;
  void clear_backtest();
  static const int kBacktestFieldNumber = 3;
  bool backtest() const;
  void set_backtest(bool value);

  // optional uint32 playback_day = 5;
  bool has_playback_day() const;
  void clear_playback_day();
  static const int kPlaybackDayFieldNumber = 5;
  ::google::protobuf::uint32 playback_day() const;
  void set_playback_day(::google::protobuf::uint32 value);

  // optional uint32 playback_time = 6;
  bool has_playback_time() const;
  void clear_playback_time();
  static const int kPlaybackTimeFieldNumber = 6;
  ::google::protobuf::uint32 playback_time() const;
  void set_playback_time(::google::protobuf::uint32 value);

  // optional int32 level = 1 [default = 5];
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 1;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // optional int32 playback_speed = 4 [default = 1];
  bool has_playback_speed() const;
  void clear_playback_speed();
  static const int kPlaybackSpeedFieldNumber = 4;
  ::google::protobuf::int32 playback_speed() const;
  void set_playback_speed(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.TraceParameters)
 private:
  void set_has_level();
  void clear_has_level();
  void set_has_server();
  void clear_has_server();
  void set_has_backtest();
  void clear_has_backtest();
  void set_has_playback_speed();
  void clear_has_playback_speed();
  void set_has_playback_day();
  void clear_has_playback_day();
  void set_has_playback_time();
  void clear_has_playback_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr server_;
  bool backtest_;
  ::google::protobuf::uint32 playback_day_;
  ::google::protobuf::uint32 playback_time_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 playback_speed_;
  friend struct ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AlgoPolicyCreateReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.AlgoPolicyCreateReqt) */ {
 public:
  AlgoPolicyCreateReqt();
  virtual ~AlgoPolicyCreateReqt();

  AlgoPolicyCreateReqt(const AlgoPolicyCreateReqt& from);

  inline AlgoPolicyCreateReqt& operator=(const AlgoPolicyCreateReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlgoPolicyCreateReqt(AlgoPolicyCreateReqt&& from) noexcept
    : AlgoPolicyCreateReqt() {
    *this = ::std::move(from);
  }

  inline AlgoPolicyCreateReqt& operator=(AlgoPolicyCreateReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AlgoPolicyCreateReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlgoPolicyCreateReqt* internal_default_instance() {
    return reinterpret_cast<const AlgoPolicyCreateReqt*>(
               &_AlgoPolicyCreateReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(AlgoPolicyCreateReqt* other);
  friend void swap(AlgoPolicyCreateReqt& a, AlgoPolicyCreateReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlgoPolicyCreateReqt* New() const final {
    return CreateMaybeMessage<AlgoPolicyCreateReqt>(NULL);
  }

  AlgoPolicyCreateReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AlgoPolicyCreateReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AlgoPolicyCreateReqt& from);
  void MergeFrom(const AlgoPolicyCreateReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlgoPolicyCreateReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string request_id = 5;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 5;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // required .autotrade.PolicyParameters param = 2;
  bool has_param() const;
  void clear_param();
  static const int kParamFieldNumber = 2;
  private:
  const ::autotrade::PolicyParameters& _internal_param() const;
  public:
  const ::autotrade::PolicyParameters& param() const;
  ::autotrade::PolicyParameters* release_param();
  ::autotrade::PolicyParameters* mutable_param();
  void set_allocated_param(::autotrade::PolicyParameters* param);

  // optional .autotrade.TraceParameters trace = 3;
  bool has_trace() const;
  void clear_trace();
  static const int kTraceFieldNumber = 3;
  private:
  const ::autotrade::TraceParameters& _internal_trace() const;
  public:
  const ::autotrade::TraceParameters& trace() const;
  ::autotrade::TraceParameters* release_trace();
  ::autotrade::TraceParameters* mutable_trace();
  void set_allocated_trace(::autotrade::TraceParameters* trace);

  // optional .autotrade.AccountParameters account = 4;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 4;
  private:
  const ::autotrade::AccountParameters& _internal_account() const;
  public:
  const ::autotrade::AccountParameters& account() const;
  ::autotrade::AccountParameters* release_account();
  ::autotrade::AccountParameters* mutable_account();
  void set_allocated_account(::autotrade::AccountParameters* account);

  // optional int32 funcid = 1 [default = 91000001];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.AlgoPolicyCreateReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_param();
  void clear_has_param();
  void set_has_trace();
  void clear_has_trace();
  void set_has_account();
  void clear_has_account();
  void set_has_request_id();
  void clear_has_request_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::autotrade::PolicyParameters* param_;
  ::autotrade::TraceParameters* trace_;
  ::autotrade::AccountParameters* account_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AlgoPolicyCreateResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.AlgoPolicyCreateResp) */ {
 public:
  AlgoPolicyCreateResp();
  virtual ~AlgoPolicyCreateResp();

  AlgoPolicyCreateResp(const AlgoPolicyCreateResp& from);

  inline AlgoPolicyCreateResp& operator=(const AlgoPolicyCreateResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlgoPolicyCreateResp(AlgoPolicyCreateResp&& from) noexcept
    : AlgoPolicyCreateResp() {
    *this = ::std::move(from);
  }

  inline AlgoPolicyCreateResp& operator=(AlgoPolicyCreateResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AlgoPolicyCreateResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlgoPolicyCreateResp* internal_default_instance() {
    return reinterpret_cast<const AlgoPolicyCreateResp*>(
               &_AlgoPolicyCreateResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(AlgoPolicyCreateResp* other);
  friend void swap(AlgoPolicyCreateResp& a, AlgoPolicyCreateResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlgoPolicyCreateResp* New() const final {
    return CreateMaybeMessage<AlgoPolicyCreateResp>(NULL);
  }

  AlgoPolicyCreateResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AlgoPolicyCreateResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AlgoPolicyCreateResp& from);
  void MergeFrom(const AlgoPolicyCreateResp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlgoPolicyCreateResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string error_msg = 3;
  bool has_error_msg() const;
  void clear_error_msg();
  static const int kErrorMsgFieldNumber = 3;
  const ::std::string& error_msg() const;
  void set_error_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_error_msg(::std::string&& value);
  #endif
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  ::std::string* mutable_error_msg();
  ::std::string* release_error_msg();
  void set_allocated_error_msg(::std::string* error_msg);

  // optional string algo_instance_id = 4;
  bool has_algo_instance_id() const;
  void clear_algo_instance_id();
  static const int kAlgoInstanceIdFieldNumber = 4;
  const ::std::string& algo_instance_id() const;
  void set_algo_instance_id(const ::std::string& value);
  #if LANG_CXX11
  void set_algo_instance_id(::std::string&& value);
  #endif
  void set_algo_instance_id(const char* value);
  void set_algo_instance_id(const char* value, size_t size);
  ::std::string* mutable_algo_instance_id();
  ::std::string* release_algo_instance_id();
  void set_allocated_algo_instance_id(::std::string* algo_instance_id);

  // optional string request_id = 5;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 5;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // required int32 error_code = 2;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 2;
  ::google::protobuf::int32 error_code() const;
  void set_error_code(::google::protobuf::int32 value);

  // optional int32 funcid = 1 [default = 91100001];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.AlgoPolicyCreateResp)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_error_code();
  void clear_has_error_code();
  void set_has_error_msg();
  void clear_has_error_msg();
  void set_has_algo_instance_id();
  void clear_has_algo_instance_id();
  void set_has_request_id();
  void clear_has_request_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr error_msg_;
  ::google::protobuf::internal::ArenaStringPtr algo_instance_id_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::int32 error_code_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AlgoPolicyUpdateReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.AlgoPolicyUpdateReqt) */ {
 public:
  AlgoPolicyUpdateReqt();
  virtual ~AlgoPolicyUpdateReqt();

  AlgoPolicyUpdateReqt(const AlgoPolicyUpdateReqt& from);

  inline AlgoPolicyUpdateReqt& operator=(const AlgoPolicyUpdateReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlgoPolicyUpdateReqt(AlgoPolicyUpdateReqt&& from) noexcept
    : AlgoPolicyUpdateReqt() {
    *this = ::std::move(from);
  }

  inline AlgoPolicyUpdateReqt& operator=(AlgoPolicyUpdateReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AlgoPolicyUpdateReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlgoPolicyUpdateReqt* internal_default_instance() {
    return reinterpret_cast<const AlgoPolicyUpdateReqt*>(
               &_AlgoPolicyUpdateReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(AlgoPolicyUpdateReqt* other);
  friend void swap(AlgoPolicyUpdateReqt& a, AlgoPolicyUpdateReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlgoPolicyUpdateReqt* New() const final {
    return CreateMaybeMessage<AlgoPolicyUpdateReqt>(NULL);
  }

  AlgoPolicyUpdateReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AlgoPolicyUpdateReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AlgoPolicyUpdateReqt& from);
  void MergeFrom(const AlgoPolicyUpdateReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlgoPolicyUpdateReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string algo_instance_id = 3;
  bool has_algo_instance_id() const;
  void clear_algo_instance_id();
  static const int kAlgoInstanceIdFieldNumber = 3;
  const ::std::string& algo_instance_id() const;
  void set_algo_instance_id(const ::std::string& value);
  #if LANG_CXX11
  void set_algo_instance_id(::std::string&& value);
  #endif
  void set_algo_instance_id(const char* value);
  void set_algo_instance_id(const char* value, size_t size);
  ::std::string* mutable_algo_instance_id();
  ::std::string* release_algo_instance_id();
  void set_allocated_algo_instance_id(::std::string* algo_instance_id);

  // optional string request_id = 6;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 6;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional .autotrade.PolicyParameters param = 4;
  bool has_param() const;
  void clear_param();
  static const int kParamFieldNumber = 4;
  private:
  const ::autotrade::PolicyParameters& _internal_param() const;
  public:
  const ::autotrade::PolicyParameters& param() const;
  ::autotrade::PolicyParameters* release_param();
  ::autotrade::PolicyParameters* mutable_param();
  void set_allocated_param(::autotrade::PolicyParameters* param);

  // optional .autotrade.TraceParameters trace = 5;
  bool has_trace() const;
  void clear_trace();
  static const int kTraceFieldNumber = 5;
  private:
  const ::autotrade::TraceParameters& _internal_trace() const;
  public:
  const ::autotrade::TraceParameters& trace() const;
  ::autotrade::TraceParameters* release_trace();
  ::autotrade::TraceParameters* mutable_trace();
  void set_allocated_trace(::autotrade::TraceParameters* trace);

  // required int32 op_code = 2;
  bool has_op_code() const;
  void clear_op_code();
  static const int kOpCodeFieldNumber = 2;
  ::google::protobuf::int32 op_code() const;
  void set_op_code(::google::protobuf::int32 value);

  // optional int32 funcid = 1 [default = 91000002];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.AlgoPolicyUpdateReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_op_code();
  void clear_has_op_code();
  void set_has_algo_instance_id();
  void clear_has_algo_instance_id();
  void set_has_param();
  void clear_has_param();
  void set_has_trace();
  void clear_has_trace();
  void set_has_request_id();
  void clear_has_request_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr algo_instance_id_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::autotrade::PolicyParameters* param_;
  ::autotrade::TraceParameters* trace_;
  ::google::protobuf::int32 op_code_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AlgoPolicyUpdateResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.AlgoPolicyUpdateResp) */ {
 public:
  AlgoPolicyUpdateResp();
  virtual ~AlgoPolicyUpdateResp();

  AlgoPolicyUpdateResp(const AlgoPolicyUpdateResp& from);

  inline AlgoPolicyUpdateResp& operator=(const AlgoPolicyUpdateResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlgoPolicyUpdateResp(AlgoPolicyUpdateResp&& from) noexcept
    : AlgoPolicyUpdateResp() {
    *this = ::std::move(from);
  }

  inline AlgoPolicyUpdateResp& operator=(AlgoPolicyUpdateResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AlgoPolicyUpdateResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlgoPolicyUpdateResp* internal_default_instance() {
    return reinterpret_cast<const AlgoPolicyUpdateResp*>(
               &_AlgoPolicyUpdateResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(AlgoPolicyUpdateResp* other);
  friend void swap(AlgoPolicyUpdateResp& a, AlgoPolicyUpdateResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlgoPolicyUpdateResp* New() const final {
    return CreateMaybeMessage<AlgoPolicyUpdateResp>(NULL);
  }

  AlgoPolicyUpdateResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AlgoPolicyUpdateResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AlgoPolicyUpdateResp& from);
  void MergeFrom(const AlgoPolicyUpdateResp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlgoPolicyUpdateResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string error_msg = 3;
  bool has_error_msg() const;
  void clear_error_msg();
  static const int kErrorMsgFieldNumber = 3;
  const ::std::string& error_msg() const;
  void set_error_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_error_msg(::std::string&& value);
  #endif
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  ::std::string* mutable_error_msg();
  ::std::string* release_error_msg();
  void set_allocated_error_msg(::std::string* error_msg);

  // optional string algo_instance_id = 4;
  bool has_algo_instance_id() const;
  void clear_algo_instance_id();
  static const int kAlgoInstanceIdFieldNumber = 4;
  const ::std::string& algo_instance_id() const;
  void set_algo_instance_id(const ::std::string& value);
  #if LANG_CXX11
  void set_algo_instance_id(::std::string&& value);
  #endif
  void set_algo_instance_id(const char* value);
  void set_algo_instance_id(const char* value, size_t size);
  ::std::string* mutable_algo_instance_id();
  ::std::string* release_algo_instance_id();
  void set_allocated_algo_instance_id(::std::string* algo_instance_id);

  // optional string request_id = 5;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 5;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // required int32 error_code = 2;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 2;
  ::google::protobuf::int32 error_code() const;
  void set_error_code(::google::protobuf::int32 value);

  // optional int32 funcid = 1 [default = 91100002];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.AlgoPolicyUpdateResp)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_error_code();
  void clear_has_error_code();
  void set_has_error_msg();
  void clear_has_error_msg();
  void set_has_algo_instance_id();
  void clear_has_algo_instance_id();
  void set_has_request_id();
  void clear_has_request_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr error_msg_;
  ::google::protobuf::internal::ArenaStringPtr algo_instance_id_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::int32 error_code_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AlgoPolicyDeleteReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.AlgoPolicyDeleteReqt) */ {
 public:
  AlgoPolicyDeleteReqt();
  virtual ~AlgoPolicyDeleteReqt();

  AlgoPolicyDeleteReqt(const AlgoPolicyDeleteReqt& from);

  inline AlgoPolicyDeleteReqt& operator=(const AlgoPolicyDeleteReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlgoPolicyDeleteReqt(AlgoPolicyDeleteReqt&& from) noexcept
    : AlgoPolicyDeleteReqt() {
    *this = ::std::move(from);
  }

  inline AlgoPolicyDeleteReqt& operator=(AlgoPolicyDeleteReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AlgoPolicyDeleteReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlgoPolicyDeleteReqt* internal_default_instance() {
    return reinterpret_cast<const AlgoPolicyDeleteReqt*>(
               &_AlgoPolicyDeleteReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(AlgoPolicyDeleteReqt* other);
  friend void swap(AlgoPolicyDeleteReqt& a, AlgoPolicyDeleteReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlgoPolicyDeleteReqt* New() const final {
    return CreateMaybeMessage<AlgoPolicyDeleteReqt>(NULL);
  }

  AlgoPolicyDeleteReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AlgoPolicyDeleteReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AlgoPolicyDeleteReqt& from);
  void MergeFrom(const AlgoPolicyDeleteReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlgoPolicyDeleteReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string algo_instance_id = 2;
  bool has_algo_instance_id() const;
  void clear_algo_instance_id();
  static const int kAlgoInstanceIdFieldNumber = 2;
  const ::std::string& algo_instance_id() const;
  void set_algo_instance_id(const ::std::string& value);
  #if LANG_CXX11
  void set_algo_instance_id(::std::string&& value);
  #endif
  void set_algo_instance_id(const char* value);
  void set_algo_instance_id(const char* value, size_t size);
  ::std::string* mutable_algo_instance_id();
  ::std::string* release_algo_instance_id();
  void set_allocated_algo_instance_id(::std::string* algo_instance_id);

  // optional string request_id = 3;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional int32 funcid = 1 [default = 91000003];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.AlgoPolicyDeleteReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_algo_instance_id();
  void clear_has_algo_instance_id();
  void set_has_request_id();
  void clear_has_request_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr algo_instance_id_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AlgoPolicyDeleteResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.AlgoPolicyDeleteResp) */ {
 public:
  AlgoPolicyDeleteResp();
  virtual ~AlgoPolicyDeleteResp();

  AlgoPolicyDeleteResp(const AlgoPolicyDeleteResp& from);

  inline AlgoPolicyDeleteResp& operator=(const AlgoPolicyDeleteResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlgoPolicyDeleteResp(AlgoPolicyDeleteResp&& from) noexcept
    : AlgoPolicyDeleteResp() {
    *this = ::std::move(from);
  }

  inline AlgoPolicyDeleteResp& operator=(AlgoPolicyDeleteResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AlgoPolicyDeleteResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlgoPolicyDeleteResp* internal_default_instance() {
    return reinterpret_cast<const AlgoPolicyDeleteResp*>(
               &_AlgoPolicyDeleteResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(AlgoPolicyDeleteResp* other);
  friend void swap(AlgoPolicyDeleteResp& a, AlgoPolicyDeleteResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlgoPolicyDeleteResp* New() const final {
    return CreateMaybeMessage<AlgoPolicyDeleteResp>(NULL);
  }

  AlgoPolicyDeleteResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AlgoPolicyDeleteResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AlgoPolicyDeleteResp& from);
  void MergeFrom(const AlgoPolicyDeleteResp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlgoPolicyDeleteResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string error_msg = 3;
  bool has_error_msg() const;
  void clear_error_msg();
  static const int kErrorMsgFieldNumber = 3;
  const ::std::string& error_msg() const;
  void set_error_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_error_msg(::std::string&& value);
  #endif
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  ::std::string* mutable_error_msg();
  ::std::string* release_error_msg();
  void set_allocated_error_msg(::std::string* error_msg);

  // optional string algo_instance_id = 4;
  bool has_algo_instance_id() const;
  void clear_algo_instance_id();
  static const int kAlgoInstanceIdFieldNumber = 4;
  const ::std::string& algo_instance_id() const;
  void set_algo_instance_id(const ::std::string& value);
  #if LANG_CXX11
  void set_algo_instance_id(::std::string&& value);
  #endif
  void set_algo_instance_id(const char* value);
  void set_algo_instance_id(const char* value, size_t size);
  ::std::string* mutable_algo_instance_id();
  ::std::string* release_algo_instance_id();
  void set_allocated_algo_instance_id(::std::string* algo_instance_id);

  // optional string request_id = 5;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 5;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // required int32 error_code = 2;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 2;
  ::google::protobuf::int32 error_code() const;
  void set_error_code(::google::protobuf::int32 value);

  // optional int32 funcid = 1 [default = 91100003];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.AlgoPolicyDeleteResp)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_error_code();
  void clear_has_error_code();
  void set_has_error_msg();
  void clear_has_error_msg();
  void set_has_algo_instance_id();
  void clear_has_algo_instance_id();
  void set_has_request_id();
  void clear_has_request_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr error_msg_;
  ::google::protobuf::internal::ArenaStringPtr algo_instance_id_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::int32 error_code_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AlgoPolicyQueryReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.AlgoPolicyQueryReqt) */ {
 public:
  AlgoPolicyQueryReqt();
  virtual ~AlgoPolicyQueryReqt();

  AlgoPolicyQueryReqt(const AlgoPolicyQueryReqt& from);

  inline AlgoPolicyQueryReqt& operator=(const AlgoPolicyQueryReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlgoPolicyQueryReqt(AlgoPolicyQueryReqt&& from) noexcept
    : AlgoPolicyQueryReqt() {
    *this = ::std::move(from);
  }

  inline AlgoPolicyQueryReqt& operator=(AlgoPolicyQueryReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AlgoPolicyQueryReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlgoPolicyQueryReqt* internal_default_instance() {
    return reinterpret_cast<const AlgoPolicyQueryReqt*>(
               &_AlgoPolicyQueryReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(AlgoPolicyQueryReqt* other);
  friend void swap(AlgoPolicyQueryReqt& a, AlgoPolicyQueryReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlgoPolicyQueryReqt* New() const final {
    return CreateMaybeMessage<AlgoPolicyQueryReqt>(NULL);
  }

  AlgoPolicyQueryReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AlgoPolicyQueryReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AlgoPolicyQueryReqt& from);
  void MergeFrom(const AlgoPolicyQueryReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlgoPolicyQueryReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string algo_instance_id = 2;
  bool has_algo_instance_id() const;
  void clear_algo_instance_id();
  static const int kAlgoInstanceIdFieldNumber = 2;
  const ::std::string& algo_instance_id() const;
  void set_algo_instance_id(const ::std::string& value);
  #if LANG_CXX11
  void set_algo_instance_id(::std::string&& value);
  #endif
  void set_algo_instance_id(const char* value);
  void set_algo_instance_id(const char* value, size_t size);
  ::std::string* mutable_algo_instance_id();
  ::std::string* release_algo_instance_id();
  void set_allocated_algo_instance_id(::std::string* algo_instance_id);

  // optional string order_id = 3;
  bool has_order_id() const;
  void clear_order_id();
  static const int kOrderIdFieldNumber = 3;
  const ::std::string& order_id() const;
  void set_order_id(const ::std::string& value);
  #if LANG_CXX11
  void set_order_id(::std::string&& value);
  #endif
  void set_order_id(const char* value);
  void set_order_id(const char* value, size_t size);
  ::std::string* mutable_order_id();
  ::std::string* release_order_id();
  void set_allocated_order_id(::std::string* order_id);

  // optional string request_id = 4;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 4;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional int32 funcid = 1 [default = 91000004];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.AlgoPolicyQueryReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_algo_instance_id();
  void clear_has_algo_instance_id();
  void set_has_order_id();
  void clear_has_order_id();
  void set_has_request_id();
  void clear_has_request_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr algo_instance_id_;
  ::google::protobuf::internal::ArenaStringPtr order_id_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AlgoPolicyQueryResp_SubOrderInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.AlgoPolicyQueryResp.SubOrderInfo) */ {
 public:
  AlgoPolicyQueryResp_SubOrderInfo();
  virtual ~AlgoPolicyQueryResp_SubOrderInfo();

  AlgoPolicyQueryResp_SubOrderInfo(const AlgoPolicyQueryResp_SubOrderInfo& from);

  inline AlgoPolicyQueryResp_SubOrderInfo& operator=(const AlgoPolicyQueryResp_SubOrderInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlgoPolicyQueryResp_SubOrderInfo(AlgoPolicyQueryResp_SubOrderInfo&& from) noexcept
    : AlgoPolicyQueryResp_SubOrderInfo() {
    *this = ::std::move(from);
  }

  inline AlgoPolicyQueryResp_SubOrderInfo& operator=(AlgoPolicyQueryResp_SubOrderInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AlgoPolicyQueryResp_SubOrderInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlgoPolicyQueryResp_SubOrderInfo* internal_default_instance() {
    return reinterpret_cast<const AlgoPolicyQueryResp_SubOrderInfo*>(
               &_AlgoPolicyQueryResp_SubOrderInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(AlgoPolicyQueryResp_SubOrderInfo* other);
  friend void swap(AlgoPolicyQueryResp_SubOrderInfo& a, AlgoPolicyQueryResp_SubOrderInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlgoPolicyQueryResp_SubOrderInfo* New() const final {
    return CreateMaybeMessage<AlgoPolicyQueryResp_SubOrderInfo>(NULL);
  }

  AlgoPolicyQueryResp_SubOrderInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AlgoPolicyQueryResp_SubOrderInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AlgoPolicyQueryResp_SubOrderInfo& from);
  void MergeFrom(const AlgoPolicyQueryResp_SubOrderInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlgoPolicyQueryResp_SubOrderInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string orderno = 1;
  bool has_orderno() const;
  void clear_orderno();
  static const int kOrdernoFieldNumber = 1;
  const ::std::string& orderno() const;
  void set_orderno(const ::std::string& value);
  #if LANG_CXX11
  void set_orderno(::std::string&& value);
  #endif
  void set_orderno(const char* value);
  void set_orderno(const char* value, size_t size);
  ::std::string* mutable_orderno();
  ::std::string* release_orderno();
  void set_allocated_orderno(::std::string* orderno);

  // optional string order_id = 2;
  bool has_order_id() const;
  void clear_order_id();
  static const int kOrderIdFieldNumber = 2;
  const ::std::string& order_id() const;
  void set_order_id(const ::std::string& value);
  #if LANG_CXX11
  void set_order_id(::std::string&& value);
  #endif
  void set_order_id(const char* value);
  void set_order_id(const char* value, size_t size);
  ::std::string* mutable_order_id();
  ::std::string* release_order_id();
  void set_allocated_order_id(::std::string* order_id);

  // optional string order_status = 3;
  bool has_order_status() const;
  void clear_order_status();
  static const int kOrderStatusFieldNumber = 3;
  const ::std::string& order_status() const;
  void set_order_status(const ::std::string& value);
  #if LANG_CXX11
  void set_order_status(::std::string&& value);
  #endif
  void set_order_status(const char* value);
  void set_order_status(const char* value, size_t size);
  ::std::string* mutable_order_status();
  ::std::string* release_order_status();
  void set_allocated_order_status(::std::string* order_status);

  // @@protoc_insertion_point(class_scope:autotrade.AlgoPolicyQueryResp.SubOrderInfo)
 private:
  void set_has_orderno();
  void clear_has_orderno();
  void set_has_order_id();
  void clear_has_order_id();
  void set_has_order_status();
  void clear_has_order_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr orderno_;
  ::google::protobuf::internal::ArenaStringPtr order_id_;
  ::google::protobuf::internal::ArenaStringPtr order_status_;
  friend struct ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AlgoPolicyQueryResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.AlgoPolicyQueryResp) */ {
 public:
  AlgoPolicyQueryResp();
  virtual ~AlgoPolicyQueryResp();

  AlgoPolicyQueryResp(const AlgoPolicyQueryResp& from);

  inline AlgoPolicyQueryResp& operator=(const AlgoPolicyQueryResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlgoPolicyQueryResp(AlgoPolicyQueryResp&& from) noexcept
    : AlgoPolicyQueryResp() {
    *this = ::std::move(from);
  }

  inline AlgoPolicyQueryResp& operator=(AlgoPolicyQueryResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AlgoPolicyQueryResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlgoPolicyQueryResp* internal_default_instance() {
    return reinterpret_cast<const AlgoPolicyQueryResp*>(
               &_AlgoPolicyQueryResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(AlgoPolicyQueryResp* other);
  friend void swap(AlgoPolicyQueryResp& a, AlgoPolicyQueryResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlgoPolicyQueryResp* New() const final {
    return CreateMaybeMessage<AlgoPolicyQueryResp>(NULL);
  }

  AlgoPolicyQueryResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AlgoPolicyQueryResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AlgoPolicyQueryResp& from);
  void MergeFrom(const AlgoPolicyQueryResp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlgoPolicyQueryResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AlgoPolicyQueryResp_SubOrderInfo SubOrderInfo;

  // accessors -------------------------------------------------------

  // repeated .autotrade.AlgoPolicyQueryResp.SubOrderInfo order_list = 4;
  int order_list_size() const;
  void clear_order_list();
  static const int kOrderListFieldNumber = 4;
  ::autotrade::AlgoPolicyQueryResp_SubOrderInfo* mutable_order_list(int index);
  ::google::protobuf::RepeatedPtrField< ::autotrade::AlgoPolicyQueryResp_SubOrderInfo >*
      mutable_order_list();
  const ::autotrade::AlgoPolicyQueryResp_SubOrderInfo& order_list(int index) const;
  ::autotrade::AlgoPolicyQueryResp_SubOrderInfo* add_order_list();
  const ::google::protobuf::RepeatedPtrField< ::autotrade::AlgoPolicyQueryResp_SubOrderInfo >&
      order_list() const;

  // optional string error_msg = 3;
  bool has_error_msg() const;
  void clear_error_msg();
  static const int kErrorMsgFieldNumber = 3;
  const ::std::string& error_msg() const;
  void set_error_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_error_msg(::std::string&& value);
  #endif
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  ::std::string* mutable_error_msg();
  ::std::string* release_error_msg();
  void set_allocated_error_msg(::std::string* error_msg);

  // optional string si_trace = 6;
  bool has_si_trace() const;
  void clear_si_trace();
  static const int kSiTraceFieldNumber = 6;
  const ::std::string& si_trace() const;
  void set_si_trace(const ::std::string& value);
  #if LANG_CXX11
  void set_si_trace(::std::string&& value);
  #endif
  void set_si_trace(const char* value);
  void set_si_trace(const char* value, size_t size);
  ::std::string* mutable_si_trace();
  ::std::string* release_si_trace();
  void set_allocated_si_trace(::std::string* si_trace);

  // optional string request_id = 7;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 7;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // required int32 error_code = 2;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 2;
  ::google::protobuf::int32 error_code() const;
  void set_error_code(::google::protobuf::int32 value);

  // optional int32 si_state = 5;
  bool has_si_state() const;
  void clear_si_state();
  static const int kSiStateFieldNumber = 5;
  ::google::protobuf::int32 si_state() const;
  void set_si_state(::google::protobuf::int32 value);

  // optional int32 funcid = 1 [default = 91100004];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.AlgoPolicyQueryResp)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_error_code();
  void clear_has_error_code();
  void set_has_error_msg();
  void clear_has_error_msg();
  void set_has_si_state();
  void clear_has_si_state();
  void set_has_si_trace();
  void clear_has_si_trace();
  void set_has_request_id();
  void clear_has_request_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::autotrade::AlgoPolicyQueryResp_SubOrderInfo > order_list_;
  ::google::protobuf::internal::ArenaStringPtr error_msg_;
  ::google::protobuf::internal::ArenaStringPtr si_trace_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::int32 error_code_;
  ::google::protobuf::int32 si_state_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqpolicy_5fprotocol_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PolicyParameters

// required string algono = 1;
inline bool PolicyParameters::has_algono() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PolicyParameters::set_has_algono() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PolicyParameters::clear_has_algono() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PolicyParameters::clear_algono() {
  algono_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_algono();
}
inline const ::std::string& PolicyParameters::algono() const {
  // @@protoc_insertion_point(field_get:autotrade.PolicyParameters.algono)
  return algono_.GetNoArena();
}
inline void PolicyParameters::set_algono(const ::std::string& value) {
  set_has_algono();
  algono_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.PolicyParameters.algono)
}
#if LANG_CXX11
inline void PolicyParameters::set_algono(::std::string&& value) {
  set_has_algono();
  algono_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.PolicyParameters.algono)
}
#endif
inline void PolicyParameters::set_algono(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_algono();
  algono_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.PolicyParameters.algono)
}
inline void PolicyParameters::set_algono(const char* value, size_t size) {
  set_has_algono();
  algono_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.PolicyParameters.algono)
}
inline ::std::string* PolicyParameters::mutable_algono() {
  set_has_algono();
  // @@protoc_insertion_point(field_mutable:autotrade.PolicyParameters.algono)
  return algono_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyParameters::release_algono() {
  // @@protoc_insertion_point(field_release:autotrade.PolicyParameters.algono)
  if (!has_algono()) {
    return NULL;
  }
  clear_has_algono();
  return algono_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyParameters::set_allocated_algono(::std::string* algono) {
  if (algono != NULL) {
    set_has_algono();
  } else {
    clear_has_algono();
  }
  algono_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), algono);
  // @@protoc_insertion_point(field_set_allocated:autotrade.PolicyParameters.algono)
}

// required string sec_uid = 2;
inline bool PolicyParameters::has_sec_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PolicyParameters::set_has_sec_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PolicyParameters::clear_has_sec_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PolicyParameters::clear_sec_uid() {
  sec_uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sec_uid();
}
inline const ::std::string& PolicyParameters::sec_uid() const {
  // @@protoc_insertion_point(field_get:autotrade.PolicyParameters.sec_uid)
  return sec_uid_.GetNoArena();
}
inline void PolicyParameters::set_sec_uid(const ::std::string& value) {
  set_has_sec_uid();
  sec_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.PolicyParameters.sec_uid)
}
#if LANG_CXX11
inline void PolicyParameters::set_sec_uid(::std::string&& value) {
  set_has_sec_uid();
  sec_uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.PolicyParameters.sec_uid)
}
#endif
inline void PolicyParameters::set_sec_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sec_uid();
  sec_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.PolicyParameters.sec_uid)
}
inline void PolicyParameters::set_sec_uid(const char* value, size_t size) {
  set_has_sec_uid();
  sec_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.PolicyParameters.sec_uid)
}
inline ::std::string* PolicyParameters::mutable_sec_uid() {
  set_has_sec_uid();
  // @@protoc_insertion_point(field_mutable:autotrade.PolicyParameters.sec_uid)
  return sec_uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyParameters::release_sec_uid() {
  // @@protoc_insertion_point(field_release:autotrade.PolicyParameters.sec_uid)
  if (!has_sec_uid()) {
    return NULL;
  }
  clear_has_sec_uid();
  return sec_uid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyParameters::set_allocated_sec_uid(::std::string* sec_uid) {
  if (sec_uid != NULL) {
    set_has_sec_uid();
  } else {
    clear_has_sec_uid();
  }
  sec_uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sec_uid);
  // @@protoc_insertion_point(field_set_allocated:autotrade.PolicyParameters.sec_uid)
}

// required string fund_id = 3;
inline bool PolicyParameters::has_fund_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PolicyParameters::set_has_fund_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PolicyParameters::clear_has_fund_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PolicyParameters::clear_fund_id() {
  fund_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fund_id();
}
inline const ::std::string& PolicyParameters::fund_id() const {
  // @@protoc_insertion_point(field_get:autotrade.PolicyParameters.fund_id)
  return fund_id_.GetNoArena();
}
inline void PolicyParameters::set_fund_id(const ::std::string& value) {
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.PolicyParameters.fund_id)
}
#if LANG_CXX11
inline void PolicyParameters::set_fund_id(::std::string&& value) {
  set_has_fund_id();
  fund_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.PolicyParameters.fund_id)
}
#endif
inline void PolicyParameters::set_fund_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.PolicyParameters.fund_id)
}
inline void PolicyParameters::set_fund_id(const char* value, size_t size) {
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.PolicyParameters.fund_id)
}
inline ::std::string* PolicyParameters::mutable_fund_id() {
  set_has_fund_id();
  // @@protoc_insertion_point(field_mutable:autotrade.PolicyParameters.fund_id)
  return fund_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyParameters::release_fund_id() {
  // @@protoc_insertion_point(field_release:autotrade.PolicyParameters.fund_id)
  if (!has_fund_id()) {
    return NULL;
  }
  clear_has_fund_id();
  return fund_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyParameters::set_allocated_fund_id(::std::string* fund_id) {
  if (fund_id != NULL) {
    set_has_fund_id();
  } else {
    clear_has_fund_id();
  }
  fund_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fund_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.PolicyParameters.fund_id)
}

// required uint32 market = 4;
inline bool PolicyParameters::has_market() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PolicyParameters::set_has_market() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PolicyParameters::clear_has_market() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PolicyParameters::clear_market() {
  market_ = 0u;
  clear_has_market();
}
inline ::google::protobuf::uint32 PolicyParameters::market() const {
  // @@protoc_insertion_point(field_get:autotrade.PolicyParameters.market)
  return market_;
}
inline void PolicyParameters::set_market(::google::protobuf::uint32 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:autotrade.PolicyParameters.market)
}

// required string stock_code = 5;
inline bool PolicyParameters::has_stock_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PolicyParameters::set_has_stock_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PolicyParameters::clear_has_stock_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PolicyParameters::clear_stock_code() {
  stock_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stock_code();
}
inline const ::std::string& PolicyParameters::stock_code() const {
  // @@protoc_insertion_point(field_get:autotrade.PolicyParameters.stock_code)
  return stock_code_.GetNoArena();
}
inline void PolicyParameters::set_stock_code(const ::std::string& value) {
  set_has_stock_code();
  stock_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.PolicyParameters.stock_code)
}
#if LANG_CXX11
inline void PolicyParameters::set_stock_code(::std::string&& value) {
  set_has_stock_code();
  stock_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.PolicyParameters.stock_code)
}
#endif
inline void PolicyParameters::set_stock_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_stock_code();
  stock_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.PolicyParameters.stock_code)
}
inline void PolicyParameters::set_stock_code(const char* value, size_t size) {
  set_has_stock_code();
  stock_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.PolicyParameters.stock_code)
}
inline ::std::string* PolicyParameters::mutable_stock_code() {
  set_has_stock_code();
  // @@protoc_insertion_point(field_mutable:autotrade.PolicyParameters.stock_code)
  return stock_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyParameters::release_stock_code() {
  // @@protoc_insertion_point(field_release:autotrade.PolicyParameters.stock_code)
  if (!has_stock_code()) {
    return NULL;
  }
  clear_has_stock_code();
  return stock_code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyParameters::set_allocated_stock_code(::std::string* stock_code) {
  if (stock_code != NULL) {
    set_has_stock_code();
  } else {
    clear_has_stock_code();
  }
  stock_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stock_code);
  // @@protoc_insertion_point(field_set_allocated:autotrade.PolicyParameters.stock_code)
}

// optional int32 stock_type = 6;
inline bool PolicyParameters::has_stock_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PolicyParameters::set_has_stock_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PolicyParameters::clear_has_stock_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PolicyParameters::clear_stock_type() {
  stock_type_ = 0;
  clear_has_stock_type();
}
inline ::google::protobuf::int32 PolicyParameters::stock_type() const {
  // @@protoc_insertion_point(field_get:autotrade.PolicyParameters.stock_type)
  return stock_type_;
}
inline void PolicyParameters::set_stock_type(::google::protobuf::int32 value) {
  set_has_stock_type();
  stock_type_ = value;
  // @@protoc_insertion_point(field_set:autotrade.PolicyParameters.stock_type)
}

// required uint32 hedge_flag = 7;
inline bool PolicyParameters::has_hedge_flag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PolicyParameters::set_has_hedge_flag() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PolicyParameters::clear_has_hedge_flag() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PolicyParameters::clear_hedge_flag() {
  hedge_flag_ = 0u;
  clear_has_hedge_flag();
}
inline ::google::protobuf::uint32 PolicyParameters::hedge_flag() const {
  // @@protoc_insertion_point(field_get:autotrade.PolicyParameters.hedge_flag)
  return hedge_flag_;
}
inline void PolicyParameters::set_hedge_flag(::google::protobuf::uint32 value) {
  set_has_hedge_flag();
  hedge_flag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.PolicyParameters.hedge_flag)
}

// required string bsflag = 8;
inline bool PolicyParameters::has_bsflag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PolicyParameters::set_has_bsflag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PolicyParameters::clear_has_bsflag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PolicyParameters::clear_bsflag() {
  bsflag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bsflag();
}
inline const ::std::string& PolicyParameters::bsflag() const {
  // @@protoc_insertion_point(field_get:autotrade.PolicyParameters.bsflag)
  return bsflag_.GetNoArena();
}
inline void PolicyParameters::set_bsflag(const ::std::string& value) {
  set_has_bsflag();
  bsflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.PolicyParameters.bsflag)
}
#if LANG_CXX11
inline void PolicyParameters::set_bsflag(::std::string&& value) {
  set_has_bsflag();
  bsflag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.PolicyParameters.bsflag)
}
#endif
inline void PolicyParameters::set_bsflag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bsflag();
  bsflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.PolicyParameters.bsflag)
}
inline void PolicyParameters::set_bsflag(const char* value, size_t size) {
  set_has_bsflag();
  bsflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.PolicyParameters.bsflag)
}
inline ::std::string* PolicyParameters::mutable_bsflag() {
  set_has_bsflag();
  // @@protoc_insertion_point(field_mutable:autotrade.PolicyParameters.bsflag)
  return bsflag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyParameters::release_bsflag() {
  // @@protoc_insertion_point(field_release:autotrade.PolicyParameters.bsflag)
  if (!has_bsflag()) {
    return NULL;
  }
  clear_has_bsflag();
  return bsflag_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyParameters::set_allocated_bsflag(::std::string* bsflag) {
  if (bsflag != NULL) {
    set_has_bsflag();
  } else {
    clear_has_bsflag();
  }
  bsflag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bsflag);
  // @@protoc_insertion_point(field_set_allocated:autotrade.PolicyParameters.bsflag)
}

// optional int32 autotradesno = 9;
inline bool PolicyParameters::has_autotradesno() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PolicyParameters::set_has_autotradesno() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PolicyParameters::clear_has_autotradesno() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PolicyParameters::clear_autotradesno() {
  autotradesno_ = 0;
  clear_has_autotradesno();
}
inline ::google::protobuf::int32 PolicyParameters::autotradesno() const {
  // @@protoc_insertion_point(field_get:autotrade.PolicyParameters.autotradesno)
  return autotradesno_;
}
inline void PolicyParameters::set_autotradesno(::google::protobuf::int32 value) {
  set_has_autotradesno();
  autotradesno_ = value;
  // @@protoc_insertion_point(field_set:autotrade.PolicyParameters.autotradesno)
}

// required int32 total_type = 10;
inline bool PolicyParameters::has_total_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PolicyParameters::set_has_total_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PolicyParameters::clear_has_total_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PolicyParameters::clear_total_type() {
  total_type_ = 0;
  clear_has_total_type();
}
inline ::google::protobuf::int32 PolicyParameters::total_type() const {
  // @@protoc_insertion_point(field_get:autotrade.PolicyParameters.total_type)
  return total_type_;
}
inline void PolicyParameters::set_total_type(::google::protobuf::int32 value) {
  set_has_total_type();
  total_type_ = value;
  // @@protoc_insertion_point(field_set:autotrade.PolicyParameters.total_type)
}

// optional int32 total_qty = 11;
inline bool PolicyParameters::has_total_qty() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PolicyParameters::set_has_total_qty() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PolicyParameters::clear_has_total_qty() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PolicyParameters::clear_total_qty() {
  total_qty_ = 0;
  clear_has_total_qty();
}
inline ::google::protobuf::int32 PolicyParameters::total_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.PolicyParameters.total_qty)
  return total_qty_;
}
inline void PolicyParameters::set_total_qty(::google::protobuf::int32 value) {
  set_has_total_qty();
  total_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.PolicyParameters.total_qty)
}

// optional int64 total_amount = 12;
inline bool PolicyParameters::has_total_amount() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PolicyParameters::set_has_total_amount() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PolicyParameters::clear_has_total_amount() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PolicyParameters::clear_total_amount() {
  total_amount_ = GOOGLE_LONGLONG(0);
  clear_has_total_amount();
}
inline ::google::protobuf::int64 PolicyParameters::total_amount() const {
  // @@protoc_insertion_point(field_get:autotrade.PolicyParameters.total_amount)
  return total_amount_;
}
inline void PolicyParameters::set_total_amount(::google::protobuf::int64 value) {
  set_has_total_amount();
  total_amount_ = value;
  // @@protoc_insertion_point(field_set:autotrade.PolicyParameters.total_amount)
}

// required int32 order_type = 13;
inline bool PolicyParameters::has_order_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PolicyParameters::set_has_order_type() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PolicyParameters::clear_has_order_type() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PolicyParameters::clear_order_type() {
  order_type_ = 0;
  clear_has_order_type();
}
inline ::google::protobuf::int32 PolicyParameters::order_type() const {
  // @@protoc_insertion_point(field_get:autotrade.PolicyParameters.order_type)
  return order_type_;
}
inline void PolicyParameters::set_order_type(::google::protobuf::int32 value) {
  set_has_order_type();
  order_type_ = value;
  // @@protoc_insertion_point(field_set:autotrade.PolicyParameters.order_type)
}

// optional int64 order_price = 14;
inline bool PolicyParameters::has_order_price() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PolicyParameters::set_has_order_price() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PolicyParameters::clear_has_order_price() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PolicyParameters::clear_order_price() {
  order_price_ = GOOGLE_LONGLONG(0);
  clear_has_order_price();
}
inline ::google::protobuf::int64 PolicyParameters::order_price() const {
  // @@protoc_insertion_point(field_get:autotrade.PolicyParameters.order_price)
  return order_price_;
}
inline void PolicyParameters::set_order_price(::google::protobuf::int64 value) {
  set_has_order_price();
  order_price_ = value;
  // @@protoc_insertion_point(field_set:autotrade.PolicyParameters.order_price)
}

// optional int32 order_price_level = 15;
inline bool PolicyParameters::has_order_price_level() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PolicyParameters::set_has_order_price_level() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PolicyParameters::clear_has_order_price_level() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PolicyParameters::clear_order_price_level() {
  order_price_level_ = 0;
  clear_has_order_price_level();
}
inline ::google::protobuf::int32 PolicyParameters::order_price_level() const {
  // @@protoc_insertion_point(field_get:autotrade.PolicyParameters.order_price_level)
  return order_price_level_;
}
inline void PolicyParameters::set_order_price_level(::google::protobuf::int32 value) {
  set_has_order_price_level();
  order_price_level_ = value;
  // @@protoc_insertion_point(field_set:autotrade.PolicyParameters.order_price_level)
}

// required int32 trade_type = 16;
inline bool PolicyParameters::has_trade_type() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PolicyParameters::set_has_trade_type() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PolicyParameters::clear_has_trade_type() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PolicyParameters::clear_trade_type() {
  trade_type_ = 0;
  clear_has_trade_type();
}
inline ::google::protobuf::int32 PolicyParameters::trade_type() const {
  // @@protoc_insertion_point(field_get:autotrade.PolicyParameters.trade_type)
  return trade_type_;
}
inline void PolicyParameters::set_trade_type(::google::protobuf::int32 value) {
  set_has_trade_type();
  trade_type_ = value;
  // @@protoc_insertion_point(field_set:autotrade.PolicyParameters.trade_type)
}

// optional int32 credit_type = 17;
inline bool PolicyParameters::has_credit_type() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PolicyParameters::set_has_credit_type() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PolicyParameters::clear_has_credit_type() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PolicyParameters::clear_credit_type() {
  credit_type_ = 0;
  clear_has_credit_type();
}
inline ::google::protobuf::int32 PolicyParameters::credit_type() const {
  // @@protoc_insertion_point(field_get:autotrade.PolicyParameters.credit_type)
  return credit_type_;
}
inline void PolicyParameters::set_credit_type(::google::protobuf::int32 value) {
  set_has_credit_type();
  credit_type_ = value;
  // @@protoc_insertion_point(field_set:autotrade.PolicyParameters.credit_type)
}

// optional int32 suborder_valid_period = 18;
inline bool PolicyParameters::has_suborder_valid_period() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PolicyParameters::set_has_suborder_valid_period() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PolicyParameters::clear_has_suborder_valid_period() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PolicyParameters::clear_suborder_valid_period() {
  suborder_valid_period_ = 0;
  clear_has_suborder_valid_period();
}
inline ::google::protobuf::int32 PolicyParameters::suborder_valid_period() const {
  // @@protoc_insertion_point(field_get:autotrade.PolicyParameters.suborder_valid_period)
  return suborder_valid_period_;
}
inline void PolicyParameters::set_suborder_valid_period(::google::protobuf::int32 value) {
  set_has_suborder_valid_period();
  suborder_valid_period_ = value;
  // @@protoc_insertion_point(field_set:autotrade.PolicyParameters.suborder_valid_period)
}

// optional bool radical_reorder = 19;
inline bool PolicyParameters::has_radical_reorder() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PolicyParameters::set_has_radical_reorder() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PolicyParameters::clear_has_radical_reorder() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PolicyParameters::clear_radical_reorder() {
  radical_reorder_ = false;
  clear_has_radical_reorder();
}
inline bool PolicyParameters::radical_reorder() const {
  // @@protoc_insertion_point(field_get:autotrade.PolicyParameters.radical_reorder)
  return radical_reorder_;
}
inline void PolicyParameters::set_radical_reorder(bool value) {
  set_has_radical_reorder();
  radical_reorder_ = value;
  // @@protoc_insertion_point(field_set:autotrade.PolicyParameters.radical_reorder)
}

// optional int32 radical_level = 20;
inline bool PolicyParameters::has_radical_level() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void PolicyParameters::set_has_radical_level() {
  _has_bits_[0] |= 0x00080000u;
}
inline void PolicyParameters::clear_has_radical_level() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void PolicyParameters::clear_radical_level() {
  radical_level_ = 0;
  clear_has_radical_level();
}
inline ::google::protobuf::int32 PolicyParameters::radical_level() const {
  // @@protoc_insertion_point(field_get:autotrade.PolicyParameters.radical_level)
  return radical_level_;
}
inline void PolicyParameters::set_radical_level(::google::protobuf::int32 value) {
  set_has_radical_level();
  radical_level_ = value;
  // @@protoc_insertion_point(field_set:autotrade.PolicyParameters.radical_level)
}

// optional int32 radical_count = 21;
inline bool PolicyParameters::has_radical_count() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void PolicyParameters::set_has_radical_count() {
  _has_bits_[0] |= 0x00100000u;
}
inline void PolicyParameters::clear_has_radical_count() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void PolicyParameters::clear_radical_count() {
  radical_count_ = 0;
  clear_has_radical_count();
}
inline ::google::protobuf::int32 PolicyParameters::radical_count() const {
  // @@protoc_insertion_point(field_get:autotrade.PolicyParameters.radical_count)
  return radical_count_;
}
inline void PolicyParameters::set_radical_count(::google::protobuf::int32 value) {
  set_has_radical_count();
  radical_count_ = value;
  // @@protoc_insertion_point(field_set:autotrade.PolicyParameters.radical_count)
}

// optional int32 order_frequency = 22;
inline bool PolicyParameters::has_order_frequency() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void PolicyParameters::set_has_order_frequency() {
  _has_bits_[0] |= 0x00200000u;
}
inline void PolicyParameters::clear_has_order_frequency() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void PolicyParameters::clear_order_frequency() {
  order_frequency_ = 0;
  clear_has_order_frequency();
}
inline ::google::protobuf::int32 PolicyParameters::order_frequency() const {
  // @@protoc_insertion_point(field_get:autotrade.PolicyParameters.order_frequency)
  return order_frequency_;
}
inline void PolicyParameters::set_order_frequency(::google::protobuf::int32 value) {
  set_has_order_frequency();
  order_frequency_ = value;
  // @@protoc_insertion_point(field_set:autotrade.PolicyParameters.order_frequency)
}

// optional int32 order_limit_price_type = 23;
inline bool PolicyParameters::has_order_limit_price_type() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void PolicyParameters::set_has_order_limit_price_type() {
  _has_bits_[0] |= 0x00400000u;
}
inline void PolicyParameters::clear_has_order_limit_price_type() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void PolicyParameters::clear_order_limit_price_type() {
  order_limit_price_type_ = 0;
  clear_has_order_limit_price_type();
}
inline ::google::protobuf::int32 PolicyParameters::order_limit_price_type() const {
  // @@protoc_insertion_point(field_get:autotrade.PolicyParameters.order_limit_price_type)
  return order_limit_price_type_;
}
inline void PolicyParameters::set_order_limit_price_type(::google::protobuf::int32 value) {
  set_has_order_limit_price_type();
  order_limit_price_type_ = value;
  // @@protoc_insertion_point(field_set:autotrade.PolicyParameters.order_limit_price_type)
}

// optional int64 max_price = 24;
inline bool PolicyParameters::has_max_price() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void PolicyParameters::set_has_max_price() {
  _has_bits_[0] |= 0x00800000u;
}
inline void PolicyParameters::clear_has_max_price() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void PolicyParameters::clear_max_price() {
  max_price_ = GOOGLE_LONGLONG(0);
  clear_has_max_price();
}
inline ::google::protobuf::int64 PolicyParameters::max_price() const {
  // @@protoc_insertion_point(field_get:autotrade.PolicyParameters.max_price)
  return max_price_;
}
inline void PolicyParameters::set_max_price(::google::protobuf::int64 value) {
  set_has_max_price();
  max_price_ = value;
  // @@protoc_insertion_point(field_set:autotrade.PolicyParameters.max_price)
}

// optional int64 min_price = 25;
inline bool PolicyParameters::has_min_price() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void PolicyParameters::set_has_min_price() {
  _has_bits_[0] |= 0x01000000u;
}
inline void PolicyParameters::clear_has_min_price() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void PolicyParameters::clear_min_price() {
  min_price_ = GOOGLE_LONGLONG(0);
  clear_has_min_price();
}
inline ::google::protobuf::int64 PolicyParameters::min_price() const {
  // @@protoc_insertion_point(field_get:autotrade.PolicyParameters.min_price)
  return min_price_;
}
inline void PolicyParameters::set_min_price(::google::protobuf::int64 value) {
  set_has_min_price();
  min_price_ = value;
  // @@protoc_insertion_point(field_set:autotrade.PolicyParameters.min_price)
}

// optional int32 price_float_point = 26;
inline bool PolicyParameters::has_price_float_point() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void PolicyParameters::set_has_price_float_point() {
  _has_bits_[0] |= 0x02000000u;
}
inline void PolicyParameters::clear_has_price_float_point() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void PolicyParameters::clear_price_float_point() {
  price_float_point_ = 0;
  clear_has_price_float_point();
}
inline ::google::protobuf::int32 PolicyParameters::price_float_point() const {
  // @@protoc_insertion_point(field_get:autotrade.PolicyParameters.price_float_point)
  return price_float_point_;
}
inline void PolicyParameters::set_price_float_point(::google::protobuf::int32 value) {
  set_has_price_float_point();
  price_float_point_ = value;
  // @@protoc_insertion_point(field_set:autotrade.PolicyParameters.price_float_point)
}

// optional int32 min_trade_unit = 27;
inline bool PolicyParameters::has_min_trade_unit() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void PolicyParameters::set_has_min_trade_unit() {
  _has_bits_[0] |= 0x04000000u;
}
inline void PolicyParameters::clear_has_min_trade_unit() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void PolicyParameters::clear_min_trade_unit() {
  min_trade_unit_ = 0;
  clear_has_min_trade_unit();
}
inline ::google::protobuf::int32 PolicyParameters::min_trade_unit() const {
  // @@protoc_insertion_point(field_get:autotrade.PolicyParameters.min_trade_unit)
  return min_trade_unit_;
}
inline void PolicyParameters::set_min_trade_unit(::google::protobuf::int32 value) {
  set_has_min_trade_unit();
  min_trade_unit_ = value;
  // @@protoc_insertion_point(field_set:autotrade.PolicyParameters.min_trade_unit)
}

// required int32 start_mode = 28;
inline bool PolicyParameters::has_start_mode() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void PolicyParameters::set_has_start_mode() {
  _has_bits_[0] |= 0x08000000u;
}
inline void PolicyParameters::clear_has_start_mode() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void PolicyParameters::clear_start_mode() {
  start_mode_ = 0;
  clear_has_start_mode();
}
inline ::google::protobuf::int32 PolicyParameters::start_mode() const {
  // @@protoc_insertion_point(field_get:autotrade.PolicyParameters.start_mode)
  return start_mode_;
}
inline void PolicyParameters::set_start_mode(::google::protobuf::int32 value) {
  set_has_start_mode();
  start_mode_ = value;
  // @@protoc_insertion_point(field_set:autotrade.PolicyParameters.start_mode)
}

// optional int32 start_time = 29;
inline bool PolicyParameters::has_start_time() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void PolicyParameters::set_has_start_time() {
  _has_bits_[0] |= 0x10000000u;
}
inline void PolicyParameters::clear_has_start_time() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void PolicyParameters::clear_start_time() {
  start_time_ = 0;
  clear_has_start_time();
}
inline ::google::protobuf::int32 PolicyParameters::start_time() const {
  // @@protoc_insertion_point(field_get:autotrade.PolicyParameters.start_time)
  return start_time_;
}
inline void PolicyParameters::set_start_time(::google::protobuf::int32 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.PolicyParameters.start_time)
}

// optional int32 execute_time = 30;
inline bool PolicyParameters::has_execute_time() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void PolicyParameters::set_has_execute_time() {
  _has_bits_[0] |= 0x20000000u;
}
inline void PolicyParameters::clear_has_execute_time() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void PolicyParameters::clear_execute_time() {
  execute_time_ = 0;
  clear_has_execute_time();
}
inline ::google::protobuf::int32 PolicyParameters::execute_time() const {
  // @@protoc_insertion_point(field_get:autotrade.PolicyParameters.execute_time)
  return execute_time_;
}
inline void PolicyParameters::set_execute_time(::google::protobuf::int32 value) {
  set_has_execute_time();
  execute_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.PolicyParameters.execute_time)
}

// -------------------------------------------------------------------

// AccountParameters

// required string cust_code = 1;
inline bool AccountParameters::has_cust_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountParameters::set_has_cust_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountParameters::clear_has_cust_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountParameters::clear_cust_code() {
  cust_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cust_code();
}
inline const ::std::string& AccountParameters::cust_code() const {
  // @@protoc_insertion_point(field_get:autotrade.AccountParameters.cust_code)
  return cust_code_.GetNoArena();
}
inline void AccountParameters::set_cust_code(const ::std::string& value) {
  set_has_cust_code();
  cust_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.AccountParameters.cust_code)
}
#if LANG_CXX11
inline void AccountParameters::set_cust_code(::std::string&& value) {
  set_has_cust_code();
  cust_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.AccountParameters.cust_code)
}
#endif
inline void AccountParameters::set_cust_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cust_code();
  cust_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.AccountParameters.cust_code)
}
inline void AccountParameters::set_cust_code(const char* value, size_t size) {
  set_has_cust_code();
  cust_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.AccountParameters.cust_code)
}
inline ::std::string* AccountParameters::mutable_cust_code() {
  set_has_cust_code();
  // @@protoc_insertion_point(field_mutable:autotrade.AccountParameters.cust_code)
  return cust_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountParameters::release_cust_code() {
  // @@protoc_insertion_point(field_release:autotrade.AccountParameters.cust_code)
  if (!has_cust_code()) {
    return NULL;
  }
  clear_has_cust_code();
  return cust_code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountParameters::set_allocated_cust_code(::std::string* cust_code) {
  if (cust_code != NULL) {
    set_has_cust_code();
  } else {
    clear_has_cust_code();
  }
  cust_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cust_code);
  // @@protoc_insertion_point(field_set_allocated:autotrade.AccountParameters.cust_code)
}

// optional int32 int_org = 2;
inline bool AccountParameters::has_int_org() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AccountParameters::set_has_int_org() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AccountParameters::clear_has_int_org() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AccountParameters::clear_int_org() {
  int_org_ = 0;
  clear_has_int_org();
}
inline ::google::protobuf::int32 AccountParameters::int_org() const {
  // @@protoc_insertion_point(field_get:autotrade.AccountParameters.int_org)
  return int_org_;
}
inline void AccountParameters::set_int_org(::google::protobuf::int32 value) {
  set_has_int_org();
  int_org_ = value;
  // @@protoc_insertion_point(field_set:autotrade.AccountParameters.int_org)
}

// optional string channel = 3;
inline bool AccountParameters::has_channel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountParameters::set_has_channel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountParameters::clear_has_channel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountParameters::clear_channel() {
  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channel();
}
inline const ::std::string& AccountParameters::channel() const {
  // @@protoc_insertion_point(field_get:autotrade.AccountParameters.channel)
  return channel_.GetNoArena();
}
inline void AccountParameters::set_channel(const ::std::string& value) {
  set_has_channel();
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.AccountParameters.channel)
}
#if LANG_CXX11
inline void AccountParameters::set_channel(::std::string&& value) {
  set_has_channel();
  channel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.AccountParameters.channel)
}
#endif
inline void AccountParameters::set_channel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_channel();
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.AccountParameters.channel)
}
inline void AccountParameters::set_channel(const char* value, size_t size) {
  set_has_channel();
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.AccountParameters.channel)
}
inline ::std::string* AccountParameters::mutable_channel() {
  set_has_channel();
  // @@protoc_insertion_point(field_mutable:autotrade.AccountParameters.channel)
  return channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountParameters::release_channel() {
  // @@protoc_insertion_point(field_release:autotrade.AccountParameters.channel)
  if (!has_channel()) {
    return NULL;
  }
  clear_has_channel();
  return channel_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountParameters::set_allocated_channel(::std::string* channel) {
  if (channel != NULL) {
    set_has_channel();
  } else {
    clear_has_channel();
  }
  channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:autotrade.AccountParameters.channel)
}

// optional int32 fund_sn = 4;
inline bool AccountParameters::has_fund_sn() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AccountParameters::set_has_fund_sn() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AccountParameters::clear_has_fund_sn() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AccountParameters::clear_fund_sn() {
  fund_sn_ = 0;
  clear_has_fund_sn();
}
inline ::google::protobuf::int32 AccountParameters::fund_sn() const {
  // @@protoc_insertion_point(field_get:autotrade.AccountParameters.fund_sn)
  return fund_sn_;
}
inline void AccountParameters::set_fund_sn(::google::protobuf::int32 value) {
  set_has_fund_sn();
  fund_sn_ = value;
  // @@protoc_insertion_point(field_set:autotrade.AccountParameters.fund_sn)
}

// optional string acct_type = 5;
inline bool AccountParameters::has_acct_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccountParameters::set_has_acct_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccountParameters::clear_has_acct_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccountParameters::clear_acct_type() {
  acct_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_acct_type();
}
inline const ::std::string& AccountParameters::acct_type() const {
  // @@protoc_insertion_point(field_get:autotrade.AccountParameters.acct_type)
  return acct_type_.GetNoArena();
}
inline void AccountParameters::set_acct_type(const ::std::string& value) {
  set_has_acct_type();
  acct_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.AccountParameters.acct_type)
}
#if LANG_CXX11
inline void AccountParameters::set_acct_type(::std::string&& value) {
  set_has_acct_type();
  acct_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.AccountParameters.acct_type)
}
#endif
inline void AccountParameters::set_acct_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_acct_type();
  acct_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.AccountParameters.acct_type)
}
inline void AccountParameters::set_acct_type(const char* value, size_t size) {
  set_has_acct_type();
  acct_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.AccountParameters.acct_type)
}
inline ::std::string* AccountParameters::mutable_acct_type() {
  set_has_acct_type();
  // @@protoc_insertion_point(field_mutable:autotrade.AccountParameters.acct_type)
  return acct_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountParameters::release_acct_type() {
  // @@protoc_insertion_point(field_release:autotrade.AccountParameters.acct_type)
  if (!has_acct_type()) {
    return NULL;
  }
  clear_has_acct_type();
  return acct_type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountParameters::set_allocated_acct_type(::std::string* acct_type) {
  if (acct_type != NULL) {
    set_has_acct_type();
  } else {
    clear_has_acct_type();
  }
  acct_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), acct_type);
  // @@protoc_insertion_point(field_set_allocated:autotrade.AccountParameters.acct_type)
}

// optional string encrypt_key = 6;
inline bool AccountParameters::has_encrypt_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AccountParameters::set_has_encrypt_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AccountParameters::clear_has_encrypt_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AccountParameters::clear_encrypt_key() {
  encrypt_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_encrypt_key();
}
inline const ::std::string& AccountParameters::encrypt_key() const {
  // @@protoc_insertion_point(field_get:autotrade.AccountParameters.encrypt_key)
  return encrypt_key_.GetNoArena();
}
inline void AccountParameters::set_encrypt_key(const ::std::string& value) {
  set_has_encrypt_key();
  encrypt_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.AccountParameters.encrypt_key)
}
#if LANG_CXX11
inline void AccountParameters::set_encrypt_key(::std::string&& value) {
  set_has_encrypt_key();
  encrypt_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.AccountParameters.encrypt_key)
}
#endif
inline void AccountParameters::set_encrypt_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_encrypt_key();
  encrypt_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.AccountParameters.encrypt_key)
}
inline void AccountParameters::set_encrypt_key(const char* value, size_t size) {
  set_has_encrypt_key();
  encrypt_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.AccountParameters.encrypt_key)
}
inline ::std::string* AccountParameters::mutable_encrypt_key() {
  set_has_encrypt_key();
  // @@protoc_insertion_point(field_mutable:autotrade.AccountParameters.encrypt_key)
  return encrypt_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountParameters::release_encrypt_key() {
  // @@protoc_insertion_point(field_release:autotrade.AccountParameters.encrypt_key)
  if (!has_encrypt_key()) {
    return NULL;
  }
  clear_has_encrypt_key();
  return encrypt_key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountParameters::set_allocated_encrypt_key(::std::string* encrypt_key) {
  if (encrypt_key != NULL) {
    set_has_encrypt_key();
  } else {
    clear_has_encrypt_key();
  }
  encrypt_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encrypt_key);
  // @@protoc_insertion_point(field_set_allocated:autotrade.AccountParameters.encrypt_key)
}

// optional string auth_data = 7;
inline bool AccountParameters::has_auth_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AccountParameters::set_has_auth_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AccountParameters::clear_has_auth_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AccountParameters::clear_auth_data() {
  auth_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_auth_data();
}
inline const ::std::string& AccountParameters::auth_data() const {
  // @@protoc_insertion_point(field_get:autotrade.AccountParameters.auth_data)
  return auth_data_.GetNoArena();
}
inline void AccountParameters::set_auth_data(const ::std::string& value) {
  set_has_auth_data();
  auth_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.AccountParameters.auth_data)
}
#if LANG_CXX11
inline void AccountParameters::set_auth_data(::std::string&& value) {
  set_has_auth_data();
  auth_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.AccountParameters.auth_data)
}
#endif
inline void AccountParameters::set_auth_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_auth_data();
  auth_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.AccountParameters.auth_data)
}
inline void AccountParameters::set_auth_data(const char* value, size_t size) {
  set_has_auth_data();
  auth_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.AccountParameters.auth_data)
}
inline ::std::string* AccountParameters::mutable_auth_data() {
  set_has_auth_data();
  // @@protoc_insertion_point(field_mutable:autotrade.AccountParameters.auth_data)
  return auth_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountParameters::release_auth_data() {
  // @@protoc_insertion_point(field_release:autotrade.AccountParameters.auth_data)
  if (!has_auth_data()) {
    return NULL;
  }
  clear_has_auth_data();
  return auth_data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountParameters::set_allocated_auth_data(::std::string* auth_data) {
  if (auth_data != NULL) {
    set_has_auth_data();
  } else {
    clear_has_auth_data();
  }
  auth_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_data);
  // @@protoc_insertion_point(field_set_allocated:autotrade.AccountParameters.auth_data)
}

// -------------------------------------------------------------------

// TraceParameters

// optional int32 level = 1 [default = 5];
inline bool TraceParameters::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TraceParameters::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TraceParameters::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TraceParameters::clear_level() {
  level_ = 5;
  clear_has_level();
}
inline ::google::protobuf::int32 TraceParameters::level() const {
  // @@protoc_insertion_point(field_get:autotrade.TraceParameters.level)
  return level_;
}
inline void TraceParameters::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:autotrade.TraceParameters.level)
}

// optional string server = 2;
inline bool TraceParameters::has_server() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TraceParameters::set_has_server() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TraceParameters::clear_has_server() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TraceParameters::clear_server() {
  server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server();
}
inline const ::std::string& TraceParameters::server() const {
  // @@protoc_insertion_point(field_get:autotrade.TraceParameters.server)
  return server_.GetNoArena();
}
inline void TraceParameters::set_server(const ::std::string& value) {
  set_has_server();
  server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.TraceParameters.server)
}
#if LANG_CXX11
inline void TraceParameters::set_server(::std::string&& value) {
  set_has_server();
  server_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.TraceParameters.server)
}
#endif
inline void TraceParameters::set_server(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_server();
  server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.TraceParameters.server)
}
inline void TraceParameters::set_server(const char* value, size_t size) {
  set_has_server();
  server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.TraceParameters.server)
}
inline ::std::string* TraceParameters::mutable_server() {
  set_has_server();
  // @@protoc_insertion_point(field_mutable:autotrade.TraceParameters.server)
  return server_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TraceParameters::release_server() {
  // @@protoc_insertion_point(field_release:autotrade.TraceParameters.server)
  if (!has_server()) {
    return NULL;
  }
  clear_has_server();
  return server_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TraceParameters::set_allocated_server(::std::string* server) {
  if (server != NULL) {
    set_has_server();
  } else {
    clear_has_server();
  }
  server_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server);
  // @@protoc_insertion_point(field_set_allocated:autotrade.TraceParameters.server)
}

// optional bool backtest = 3 [default = false];
inline bool TraceParameters::has_backtest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TraceParameters::set_has_backtest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TraceParameters::clear_has_backtest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TraceParameters::clear_backtest() {
  backtest_ = false;
  clear_has_backtest();
}
inline bool TraceParameters::backtest() const {
  // @@protoc_insertion_point(field_get:autotrade.TraceParameters.backtest)
  return backtest_;
}
inline void TraceParameters::set_backtest(bool value) {
  set_has_backtest();
  backtest_ = value;
  // @@protoc_insertion_point(field_set:autotrade.TraceParameters.backtest)
}

// optional int32 playback_speed = 4 [default = 1];
inline bool TraceParameters::has_playback_speed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TraceParameters::set_has_playback_speed() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TraceParameters::clear_has_playback_speed() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TraceParameters::clear_playback_speed() {
  playback_speed_ = 1;
  clear_has_playback_speed();
}
inline ::google::protobuf::int32 TraceParameters::playback_speed() const {
  // @@protoc_insertion_point(field_get:autotrade.TraceParameters.playback_speed)
  return playback_speed_;
}
inline void TraceParameters::set_playback_speed(::google::protobuf::int32 value) {
  set_has_playback_speed();
  playback_speed_ = value;
  // @@protoc_insertion_point(field_set:autotrade.TraceParameters.playback_speed)
}

// optional uint32 playback_day = 5;
inline bool TraceParameters::has_playback_day() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TraceParameters::set_has_playback_day() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TraceParameters::clear_has_playback_day() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TraceParameters::clear_playback_day() {
  playback_day_ = 0u;
  clear_has_playback_day();
}
inline ::google::protobuf::uint32 TraceParameters::playback_day() const {
  // @@protoc_insertion_point(field_get:autotrade.TraceParameters.playback_day)
  return playback_day_;
}
inline void TraceParameters::set_playback_day(::google::protobuf::uint32 value) {
  set_has_playback_day();
  playback_day_ = value;
  // @@protoc_insertion_point(field_set:autotrade.TraceParameters.playback_day)
}

// optional uint32 playback_time = 6;
inline bool TraceParameters::has_playback_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TraceParameters::set_has_playback_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TraceParameters::clear_has_playback_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TraceParameters::clear_playback_time() {
  playback_time_ = 0u;
  clear_has_playback_time();
}
inline ::google::protobuf::uint32 TraceParameters::playback_time() const {
  // @@protoc_insertion_point(field_get:autotrade.TraceParameters.playback_time)
  return playback_time_;
}
inline void TraceParameters::set_playback_time(::google::protobuf::uint32 value) {
  set_has_playback_time();
  playback_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.TraceParameters.playback_time)
}

// -------------------------------------------------------------------

// AlgoPolicyCreateReqt

// optional int32 funcid = 1 [default = 91000001];
inline bool AlgoPolicyCreateReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AlgoPolicyCreateReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AlgoPolicyCreateReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AlgoPolicyCreateReqt::clear_funcid() {
  funcid_ = 91000001;
  clear_has_funcid();
}
inline ::google::protobuf::int32 AlgoPolicyCreateReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyCreateReqt.funcid)
  return funcid_;
}
inline void AlgoPolicyCreateReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.AlgoPolicyCreateReqt.funcid)
}

// required .autotrade.PolicyParameters param = 2;
inline bool AlgoPolicyCreateReqt::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AlgoPolicyCreateReqt::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AlgoPolicyCreateReqt::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AlgoPolicyCreateReqt::clear_param() {
  if (param_ != NULL) param_->Clear();
  clear_has_param();
}
inline const ::autotrade::PolicyParameters& AlgoPolicyCreateReqt::_internal_param() const {
  return *param_;
}
inline const ::autotrade::PolicyParameters& AlgoPolicyCreateReqt::param() const {
  const ::autotrade::PolicyParameters* p = param_;
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyCreateReqt.param)
  return p != NULL ? *p : *reinterpret_cast<const ::autotrade::PolicyParameters*>(
      &::autotrade::_PolicyParameters_default_instance_);
}
inline ::autotrade::PolicyParameters* AlgoPolicyCreateReqt::release_param() {
  // @@protoc_insertion_point(field_release:autotrade.AlgoPolicyCreateReqt.param)
  clear_has_param();
  ::autotrade::PolicyParameters* temp = param_;
  param_ = NULL;
  return temp;
}
inline ::autotrade::PolicyParameters* AlgoPolicyCreateReqt::mutable_param() {
  set_has_param();
  if (param_ == NULL) {
    auto* p = CreateMaybeMessage<::autotrade::PolicyParameters>(GetArenaNoVirtual());
    param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:autotrade.AlgoPolicyCreateReqt.param)
  return param_;
}
inline void AlgoPolicyCreateReqt::set_allocated_param(::autotrade::PolicyParameters* param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete param_;
  }
  if (param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    set_has_param();
  } else {
    clear_has_param();
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:autotrade.AlgoPolicyCreateReqt.param)
}

// optional .autotrade.TraceParameters trace = 3;
inline bool AlgoPolicyCreateReqt::has_trace() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AlgoPolicyCreateReqt::set_has_trace() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AlgoPolicyCreateReqt::clear_has_trace() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AlgoPolicyCreateReqt::clear_trace() {
  if (trace_ != NULL) trace_->Clear();
  clear_has_trace();
}
inline const ::autotrade::TraceParameters& AlgoPolicyCreateReqt::_internal_trace() const {
  return *trace_;
}
inline const ::autotrade::TraceParameters& AlgoPolicyCreateReqt::trace() const {
  const ::autotrade::TraceParameters* p = trace_;
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyCreateReqt.trace)
  return p != NULL ? *p : *reinterpret_cast<const ::autotrade::TraceParameters*>(
      &::autotrade::_TraceParameters_default_instance_);
}
inline ::autotrade::TraceParameters* AlgoPolicyCreateReqt::release_trace() {
  // @@protoc_insertion_point(field_release:autotrade.AlgoPolicyCreateReqt.trace)
  clear_has_trace();
  ::autotrade::TraceParameters* temp = trace_;
  trace_ = NULL;
  return temp;
}
inline ::autotrade::TraceParameters* AlgoPolicyCreateReqt::mutable_trace() {
  set_has_trace();
  if (trace_ == NULL) {
    auto* p = CreateMaybeMessage<::autotrade::TraceParameters>(GetArenaNoVirtual());
    trace_ = p;
  }
  // @@protoc_insertion_point(field_mutable:autotrade.AlgoPolicyCreateReqt.trace)
  return trace_;
}
inline void AlgoPolicyCreateReqt::set_allocated_trace(::autotrade::TraceParameters* trace) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete trace_;
  }
  if (trace) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      trace = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, trace, submessage_arena);
    }
    set_has_trace();
  } else {
    clear_has_trace();
  }
  trace_ = trace;
  // @@protoc_insertion_point(field_set_allocated:autotrade.AlgoPolicyCreateReqt.trace)
}

// optional .autotrade.AccountParameters account = 4;
inline bool AlgoPolicyCreateReqt::has_account() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AlgoPolicyCreateReqt::set_has_account() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AlgoPolicyCreateReqt::clear_has_account() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AlgoPolicyCreateReqt::clear_account() {
  if (account_ != NULL) account_->Clear();
  clear_has_account();
}
inline const ::autotrade::AccountParameters& AlgoPolicyCreateReqt::_internal_account() const {
  return *account_;
}
inline const ::autotrade::AccountParameters& AlgoPolicyCreateReqt::account() const {
  const ::autotrade::AccountParameters* p = account_;
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyCreateReqt.account)
  return p != NULL ? *p : *reinterpret_cast<const ::autotrade::AccountParameters*>(
      &::autotrade::_AccountParameters_default_instance_);
}
inline ::autotrade::AccountParameters* AlgoPolicyCreateReqt::release_account() {
  // @@protoc_insertion_point(field_release:autotrade.AlgoPolicyCreateReqt.account)
  clear_has_account();
  ::autotrade::AccountParameters* temp = account_;
  account_ = NULL;
  return temp;
}
inline ::autotrade::AccountParameters* AlgoPolicyCreateReqt::mutable_account() {
  set_has_account();
  if (account_ == NULL) {
    auto* p = CreateMaybeMessage<::autotrade::AccountParameters>(GetArenaNoVirtual());
    account_ = p;
  }
  // @@protoc_insertion_point(field_mutable:autotrade.AlgoPolicyCreateReqt.account)
  return account_;
}
inline void AlgoPolicyCreateReqt::set_allocated_account(::autotrade::AccountParameters* account) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete account_;
  }
  if (account) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      account = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    set_has_account();
  } else {
    clear_has_account();
  }
  account_ = account;
  // @@protoc_insertion_point(field_set_allocated:autotrade.AlgoPolicyCreateReqt.account)
}

// optional string request_id = 5;
inline bool AlgoPolicyCreateReqt::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlgoPolicyCreateReqt::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AlgoPolicyCreateReqt::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AlgoPolicyCreateReqt::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& AlgoPolicyCreateReqt::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyCreateReqt.request_id)
  return request_id_.GetNoArena();
}
inline void AlgoPolicyCreateReqt::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.AlgoPolicyCreateReqt.request_id)
}
#if LANG_CXX11
inline void AlgoPolicyCreateReqt::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.AlgoPolicyCreateReqt.request_id)
}
#endif
inline void AlgoPolicyCreateReqt::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.AlgoPolicyCreateReqt.request_id)
}
inline void AlgoPolicyCreateReqt::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.AlgoPolicyCreateReqt.request_id)
}
inline ::std::string* AlgoPolicyCreateReqt::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.AlgoPolicyCreateReqt.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlgoPolicyCreateReqt::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.AlgoPolicyCreateReqt.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlgoPolicyCreateReqt::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.AlgoPolicyCreateReqt.request_id)
}

// -------------------------------------------------------------------

// AlgoPolicyCreateResp

// optional int32 funcid = 1 [default = 91100001];
inline bool AlgoPolicyCreateResp::has_funcid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AlgoPolicyCreateResp::set_has_funcid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AlgoPolicyCreateResp::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AlgoPolicyCreateResp::clear_funcid() {
  funcid_ = 91100001;
  clear_has_funcid();
}
inline ::google::protobuf::int32 AlgoPolicyCreateResp::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyCreateResp.funcid)
  return funcid_;
}
inline void AlgoPolicyCreateResp::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.AlgoPolicyCreateResp.funcid)
}

// required int32 error_code = 2;
inline bool AlgoPolicyCreateResp::has_error_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AlgoPolicyCreateResp::set_has_error_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AlgoPolicyCreateResp::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AlgoPolicyCreateResp::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 AlgoPolicyCreateResp::error_code() const {
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyCreateResp.error_code)
  return error_code_;
}
inline void AlgoPolicyCreateResp::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:autotrade.AlgoPolicyCreateResp.error_code)
}

// optional string error_msg = 3;
inline bool AlgoPolicyCreateResp::has_error_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlgoPolicyCreateResp::set_has_error_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AlgoPolicyCreateResp::clear_has_error_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AlgoPolicyCreateResp::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_msg();
}
inline const ::std::string& AlgoPolicyCreateResp::error_msg() const {
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyCreateResp.error_msg)
  return error_msg_.GetNoArena();
}
inline void AlgoPolicyCreateResp::set_error_msg(const ::std::string& value) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.AlgoPolicyCreateResp.error_msg)
}
#if LANG_CXX11
inline void AlgoPolicyCreateResp::set_error_msg(::std::string&& value) {
  set_has_error_msg();
  error_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.AlgoPolicyCreateResp.error_msg)
}
#endif
inline void AlgoPolicyCreateResp::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.AlgoPolicyCreateResp.error_msg)
}
inline void AlgoPolicyCreateResp::set_error_msg(const char* value, size_t size) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.AlgoPolicyCreateResp.error_msg)
}
inline ::std::string* AlgoPolicyCreateResp::mutable_error_msg() {
  set_has_error_msg();
  // @@protoc_insertion_point(field_mutable:autotrade.AlgoPolicyCreateResp.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlgoPolicyCreateResp::release_error_msg() {
  // @@protoc_insertion_point(field_release:autotrade.AlgoPolicyCreateResp.error_msg)
  if (!has_error_msg()) {
    return NULL;
  }
  clear_has_error_msg();
  return error_msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlgoPolicyCreateResp::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    set_has_error_msg();
  } else {
    clear_has_error_msg();
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:autotrade.AlgoPolicyCreateResp.error_msg)
}

// optional string algo_instance_id = 4;
inline bool AlgoPolicyCreateResp::has_algo_instance_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AlgoPolicyCreateResp::set_has_algo_instance_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AlgoPolicyCreateResp::clear_has_algo_instance_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AlgoPolicyCreateResp::clear_algo_instance_id() {
  algo_instance_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_algo_instance_id();
}
inline const ::std::string& AlgoPolicyCreateResp::algo_instance_id() const {
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyCreateResp.algo_instance_id)
  return algo_instance_id_.GetNoArena();
}
inline void AlgoPolicyCreateResp::set_algo_instance_id(const ::std::string& value) {
  set_has_algo_instance_id();
  algo_instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.AlgoPolicyCreateResp.algo_instance_id)
}
#if LANG_CXX11
inline void AlgoPolicyCreateResp::set_algo_instance_id(::std::string&& value) {
  set_has_algo_instance_id();
  algo_instance_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.AlgoPolicyCreateResp.algo_instance_id)
}
#endif
inline void AlgoPolicyCreateResp::set_algo_instance_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_algo_instance_id();
  algo_instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.AlgoPolicyCreateResp.algo_instance_id)
}
inline void AlgoPolicyCreateResp::set_algo_instance_id(const char* value, size_t size) {
  set_has_algo_instance_id();
  algo_instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.AlgoPolicyCreateResp.algo_instance_id)
}
inline ::std::string* AlgoPolicyCreateResp::mutable_algo_instance_id() {
  set_has_algo_instance_id();
  // @@protoc_insertion_point(field_mutable:autotrade.AlgoPolicyCreateResp.algo_instance_id)
  return algo_instance_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlgoPolicyCreateResp::release_algo_instance_id() {
  // @@protoc_insertion_point(field_release:autotrade.AlgoPolicyCreateResp.algo_instance_id)
  if (!has_algo_instance_id()) {
    return NULL;
  }
  clear_has_algo_instance_id();
  return algo_instance_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlgoPolicyCreateResp::set_allocated_algo_instance_id(::std::string* algo_instance_id) {
  if (algo_instance_id != NULL) {
    set_has_algo_instance_id();
  } else {
    clear_has_algo_instance_id();
  }
  algo_instance_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), algo_instance_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.AlgoPolicyCreateResp.algo_instance_id)
}

// optional string request_id = 5;
inline bool AlgoPolicyCreateResp::has_request_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AlgoPolicyCreateResp::set_has_request_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AlgoPolicyCreateResp::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AlgoPolicyCreateResp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& AlgoPolicyCreateResp::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyCreateResp.request_id)
  return request_id_.GetNoArena();
}
inline void AlgoPolicyCreateResp::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.AlgoPolicyCreateResp.request_id)
}
#if LANG_CXX11
inline void AlgoPolicyCreateResp::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.AlgoPolicyCreateResp.request_id)
}
#endif
inline void AlgoPolicyCreateResp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.AlgoPolicyCreateResp.request_id)
}
inline void AlgoPolicyCreateResp::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.AlgoPolicyCreateResp.request_id)
}
inline ::std::string* AlgoPolicyCreateResp::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.AlgoPolicyCreateResp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlgoPolicyCreateResp::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.AlgoPolicyCreateResp.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlgoPolicyCreateResp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.AlgoPolicyCreateResp.request_id)
}

// -------------------------------------------------------------------

// AlgoPolicyUpdateReqt

// optional int32 funcid = 1 [default = 91000002];
inline bool AlgoPolicyUpdateReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AlgoPolicyUpdateReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AlgoPolicyUpdateReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AlgoPolicyUpdateReqt::clear_funcid() {
  funcid_ = 91000002;
  clear_has_funcid();
}
inline ::google::protobuf::int32 AlgoPolicyUpdateReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyUpdateReqt.funcid)
  return funcid_;
}
inline void AlgoPolicyUpdateReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.AlgoPolicyUpdateReqt.funcid)
}

// required int32 op_code = 2;
inline bool AlgoPolicyUpdateReqt::has_op_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AlgoPolicyUpdateReqt::set_has_op_code() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AlgoPolicyUpdateReqt::clear_has_op_code() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AlgoPolicyUpdateReqt::clear_op_code() {
  op_code_ = 0;
  clear_has_op_code();
}
inline ::google::protobuf::int32 AlgoPolicyUpdateReqt::op_code() const {
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyUpdateReqt.op_code)
  return op_code_;
}
inline void AlgoPolicyUpdateReqt::set_op_code(::google::protobuf::int32 value) {
  set_has_op_code();
  op_code_ = value;
  // @@protoc_insertion_point(field_set:autotrade.AlgoPolicyUpdateReqt.op_code)
}

// required string algo_instance_id = 3;
inline bool AlgoPolicyUpdateReqt::has_algo_instance_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlgoPolicyUpdateReqt::set_has_algo_instance_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AlgoPolicyUpdateReqt::clear_has_algo_instance_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AlgoPolicyUpdateReqt::clear_algo_instance_id() {
  algo_instance_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_algo_instance_id();
}
inline const ::std::string& AlgoPolicyUpdateReqt::algo_instance_id() const {
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyUpdateReqt.algo_instance_id)
  return algo_instance_id_.GetNoArena();
}
inline void AlgoPolicyUpdateReqt::set_algo_instance_id(const ::std::string& value) {
  set_has_algo_instance_id();
  algo_instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.AlgoPolicyUpdateReqt.algo_instance_id)
}
#if LANG_CXX11
inline void AlgoPolicyUpdateReqt::set_algo_instance_id(::std::string&& value) {
  set_has_algo_instance_id();
  algo_instance_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.AlgoPolicyUpdateReqt.algo_instance_id)
}
#endif
inline void AlgoPolicyUpdateReqt::set_algo_instance_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_algo_instance_id();
  algo_instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.AlgoPolicyUpdateReqt.algo_instance_id)
}
inline void AlgoPolicyUpdateReqt::set_algo_instance_id(const char* value, size_t size) {
  set_has_algo_instance_id();
  algo_instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.AlgoPolicyUpdateReqt.algo_instance_id)
}
inline ::std::string* AlgoPolicyUpdateReqt::mutable_algo_instance_id() {
  set_has_algo_instance_id();
  // @@protoc_insertion_point(field_mutable:autotrade.AlgoPolicyUpdateReqt.algo_instance_id)
  return algo_instance_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlgoPolicyUpdateReqt::release_algo_instance_id() {
  // @@protoc_insertion_point(field_release:autotrade.AlgoPolicyUpdateReqt.algo_instance_id)
  if (!has_algo_instance_id()) {
    return NULL;
  }
  clear_has_algo_instance_id();
  return algo_instance_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlgoPolicyUpdateReqt::set_allocated_algo_instance_id(::std::string* algo_instance_id) {
  if (algo_instance_id != NULL) {
    set_has_algo_instance_id();
  } else {
    clear_has_algo_instance_id();
  }
  algo_instance_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), algo_instance_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.AlgoPolicyUpdateReqt.algo_instance_id)
}

// optional .autotrade.PolicyParameters param = 4;
inline bool AlgoPolicyUpdateReqt::has_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AlgoPolicyUpdateReqt::set_has_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AlgoPolicyUpdateReqt::clear_has_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AlgoPolicyUpdateReqt::clear_param() {
  if (param_ != NULL) param_->Clear();
  clear_has_param();
}
inline const ::autotrade::PolicyParameters& AlgoPolicyUpdateReqt::_internal_param() const {
  return *param_;
}
inline const ::autotrade::PolicyParameters& AlgoPolicyUpdateReqt::param() const {
  const ::autotrade::PolicyParameters* p = param_;
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyUpdateReqt.param)
  return p != NULL ? *p : *reinterpret_cast<const ::autotrade::PolicyParameters*>(
      &::autotrade::_PolicyParameters_default_instance_);
}
inline ::autotrade::PolicyParameters* AlgoPolicyUpdateReqt::release_param() {
  // @@protoc_insertion_point(field_release:autotrade.AlgoPolicyUpdateReqt.param)
  clear_has_param();
  ::autotrade::PolicyParameters* temp = param_;
  param_ = NULL;
  return temp;
}
inline ::autotrade::PolicyParameters* AlgoPolicyUpdateReqt::mutable_param() {
  set_has_param();
  if (param_ == NULL) {
    auto* p = CreateMaybeMessage<::autotrade::PolicyParameters>(GetArenaNoVirtual());
    param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:autotrade.AlgoPolicyUpdateReqt.param)
  return param_;
}
inline void AlgoPolicyUpdateReqt::set_allocated_param(::autotrade::PolicyParameters* param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete param_;
  }
  if (param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    set_has_param();
  } else {
    clear_has_param();
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:autotrade.AlgoPolicyUpdateReqt.param)
}

// optional .autotrade.TraceParameters trace = 5;
inline bool AlgoPolicyUpdateReqt::has_trace() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AlgoPolicyUpdateReqt::set_has_trace() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AlgoPolicyUpdateReqt::clear_has_trace() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AlgoPolicyUpdateReqt::clear_trace() {
  if (trace_ != NULL) trace_->Clear();
  clear_has_trace();
}
inline const ::autotrade::TraceParameters& AlgoPolicyUpdateReqt::_internal_trace() const {
  return *trace_;
}
inline const ::autotrade::TraceParameters& AlgoPolicyUpdateReqt::trace() const {
  const ::autotrade::TraceParameters* p = trace_;
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyUpdateReqt.trace)
  return p != NULL ? *p : *reinterpret_cast<const ::autotrade::TraceParameters*>(
      &::autotrade::_TraceParameters_default_instance_);
}
inline ::autotrade::TraceParameters* AlgoPolicyUpdateReqt::release_trace() {
  // @@protoc_insertion_point(field_release:autotrade.AlgoPolicyUpdateReqt.trace)
  clear_has_trace();
  ::autotrade::TraceParameters* temp = trace_;
  trace_ = NULL;
  return temp;
}
inline ::autotrade::TraceParameters* AlgoPolicyUpdateReqt::mutable_trace() {
  set_has_trace();
  if (trace_ == NULL) {
    auto* p = CreateMaybeMessage<::autotrade::TraceParameters>(GetArenaNoVirtual());
    trace_ = p;
  }
  // @@protoc_insertion_point(field_mutable:autotrade.AlgoPolicyUpdateReqt.trace)
  return trace_;
}
inline void AlgoPolicyUpdateReqt::set_allocated_trace(::autotrade::TraceParameters* trace) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete trace_;
  }
  if (trace) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      trace = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, trace, submessage_arena);
    }
    set_has_trace();
  } else {
    clear_has_trace();
  }
  trace_ = trace;
  // @@protoc_insertion_point(field_set_allocated:autotrade.AlgoPolicyUpdateReqt.trace)
}

// optional string request_id = 6;
inline bool AlgoPolicyUpdateReqt::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AlgoPolicyUpdateReqt::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AlgoPolicyUpdateReqt::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AlgoPolicyUpdateReqt::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& AlgoPolicyUpdateReqt::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyUpdateReqt.request_id)
  return request_id_.GetNoArena();
}
inline void AlgoPolicyUpdateReqt::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.AlgoPolicyUpdateReqt.request_id)
}
#if LANG_CXX11
inline void AlgoPolicyUpdateReqt::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.AlgoPolicyUpdateReqt.request_id)
}
#endif
inline void AlgoPolicyUpdateReqt::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.AlgoPolicyUpdateReqt.request_id)
}
inline void AlgoPolicyUpdateReqt::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.AlgoPolicyUpdateReqt.request_id)
}
inline ::std::string* AlgoPolicyUpdateReqt::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.AlgoPolicyUpdateReqt.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlgoPolicyUpdateReqt::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.AlgoPolicyUpdateReqt.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlgoPolicyUpdateReqt::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.AlgoPolicyUpdateReqt.request_id)
}

// -------------------------------------------------------------------

// AlgoPolicyUpdateResp

// optional int32 funcid = 1 [default = 91100002];
inline bool AlgoPolicyUpdateResp::has_funcid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AlgoPolicyUpdateResp::set_has_funcid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AlgoPolicyUpdateResp::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AlgoPolicyUpdateResp::clear_funcid() {
  funcid_ = 91100002;
  clear_has_funcid();
}
inline ::google::protobuf::int32 AlgoPolicyUpdateResp::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyUpdateResp.funcid)
  return funcid_;
}
inline void AlgoPolicyUpdateResp::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.AlgoPolicyUpdateResp.funcid)
}

// required int32 error_code = 2;
inline bool AlgoPolicyUpdateResp::has_error_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AlgoPolicyUpdateResp::set_has_error_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AlgoPolicyUpdateResp::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AlgoPolicyUpdateResp::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 AlgoPolicyUpdateResp::error_code() const {
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyUpdateResp.error_code)
  return error_code_;
}
inline void AlgoPolicyUpdateResp::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:autotrade.AlgoPolicyUpdateResp.error_code)
}

// optional string error_msg = 3;
inline bool AlgoPolicyUpdateResp::has_error_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlgoPolicyUpdateResp::set_has_error_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AlgoPolicyUpdateResp::clear_has_error_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AlgoPolicyUpdateResp::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_msg();
}
inline const ::std::string& AlgoPolicyUpdateResp::error_msg() const {
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyUpdateResp.error_msg)
  return error_msg_.GetNoArena();
}
inline void AlgoPolicyUpdateResp::set_error_msg(const ::std::string& value) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.AlgoPolicyUpdateResp.error_msg)
}
#if LANG_CXX11
inline void AlgoPolicyUpdateResp::set_error_msg(::std::string&& value) {
  set_has_error_msg();
  error_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.AlgoPolicyUpdateResp.error_msg)
}
#endif
inline void AlgoPolicyUpdateResp::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.AlgoPolicyUpdateResp.error_msg)
}
inline void AlgoPolicyUpdateResp::set_error_msg(const char* value, size_t size) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.AlgoPolicyUpdateResp.error_msg)
}
inline ::std::string* AlgoPolicyUpdateResp::mutable_error_msg() {
  set_has_error_msg();
  // @@protoc_insertion_point(field_mutable:autotrade.AlgoPolicyUpdateResp.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlgoPolicyUpdateResp::release_error_msg() {
  // @@protoc_insertion_point(field_release:autotrade.AlgoPolicyUpdateResp.error_msg)
  if (!has_error_msg()) {
    return NULL;
  }
  clear_has_error_msg();
  return error_msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlgoPolicyUpdateResp::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    set_has_error_msg();
  } else {
    clear_has_error_msg();
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:autotrade.AlgoPolicyUpdateResp.error_msg)
}

// optional string algo_instance_id = 4;
inline bool AlgoPolicyUpdateResp::has_algo_instance_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AlgoPolicyUpdateResp::set_has_algo_instance_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AlgoPolicyUpdateResp::clear_has_algo_instance_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AlgoPolicyUpdateResp::clear_algo_instance_id() {
  algo_instance_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_algo_instance_id();
}
inline const ::std::string& AlgoPolicyUpdateResp::algo_instance_id() const {
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyUpdateResp.algo_instance_id)
  return algo_instance_id_.GetNoArena();
}
inline void AlgoPolicyUpdateResp::set_algo_instance_id(const ::std::string& value) {
  set_has_algo_instance_id();
  algo_instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.AlgoPolicyUpdateResp.algo_instance_id)
}
#if LANG_CXX11
inline void AlgoPolicyUpdateResp::set_algo_instance_id(::std::string&& value) {
  set_has_algo_instance_id();
  algo_instance_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.AlgoPolicyUpdateResp.algo_instance_id)
}
#endif
inline void AlgoPolicyUpdateResp::set_algo_instance_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_algo_instance_id();
  algo_instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.AlgoPolicyUpdateResp.algo_instance_id)
}
inline void AlgoPolicyUpdateResp::set_algo_instance_id(const char* value, size_t size) {
  set_has_algo_instance_id();
  algo_instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.AlgoPolicyUpdateResp.algo_instance_id)
}
inline ::std::string* AlgoPolicyUpdateResp::mutable_algo_instance_id() {
  set_has_algo_instance_id();
  // @@protoc_insertion_point(field_mutable:autotrade.AlgoPolicyUpdateResp.algo_instance_id)
  return algo_instance_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlgoPolicyUpdateResp::release_algo_instance_id() {
  // @@protoc_insertion_point(field_release:autotrade.AlgoPolicyUpdateResp.algo_instance_id)
  if (!has_algo_instance_id()) {
    return NULL;
  }
  clear_has_algo_instance_id();
  return algo_instance_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlgoPolicyUpdateResp::set_allocated_algo_instance_id(::std::string* algo_instance_id) {
  if (algo_instance_id != NULL) {
    set_has_algo_instance_id();
  } else {
    clear_has_algo_instance_id();
  }
  algo_instance_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), algo_instance_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.AlgoPolicyUpdateResp.algo_instance_id)
}

// optional string request_id = 5;
inline bool AlgoPolicyUpdateResp::has_request_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AlgoPolicyUpdateResp::set_has_request_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AlgoPolicyUpdateResp::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AlgoPolicyUpdateResp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& AlgoPolicyUpdateResp::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyUpdateResp.request_id)
  return request_id_.GetNoArena();
}
inline void AlgoPolicyUpdateResp::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.AlgoPolicyUpdateResp.request_id)
}
#if LANG_CXX11
inline void AlgoPolicyUpdateResp::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.AlgoPolicyUpdateResp.request_id)
}
#endif
inline void AlgoPolicyUpdateResp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.AlgoPolicyUpdateResp.request_id)
}
inline void AlgoPolicyUpdateResp::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.AlgoPolicyUpdateResp.request_id)
}
inline ::std::string* AlgoPolicyUpdateResp::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.AlgoPolicyUpdateResp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlgoPolicyUpdateResp::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.AlgoPolicyUpdateResp.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlgoPolicyUpdateResp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.AlgoPolicyUpdateResp.request_id)
}

// -------------------------------------------------------------------

// AlgoPolicyDeleteReqt

// optional int32 funcid = 1 [default = 91000003];
inline bool AlgoPolicyDeleteReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AlgoPolicyDeleteReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AlgoPolicyDeleteReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AlgoPolicyDeleteReqt::clear_funcid() {
  funcid_ = 91000003;
  clear_has_funcid();
}
inline ::google::protobuf::int32 AlgoPolicyDeleteReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyDeleteReqt.funcid)
  return funcid_;
}
inline void AlgoPolicyDeleteReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.AlgoPolicyDeleteReqt.funcid)
}

// required string algo_instance_id = 2;
inline bool AlgoPolicyDeleteReqt::has_algo_instance_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlgoPolicyDeleteReqt::set_has_algo_instance_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AlgoPolicyDeleteReqt::clear_has_algo_instance_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AlgoPolicyDeleteReqt::clear_algo_instance_id() {
  algo_instance_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_algo_instance_id();
}
inline const ::std::string& AlgoPolicyDeleteReqt::algo_instance_id() const {
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyDeleteReqt.algo_instance_id)
  return algo_instance_id_.GetNoArena();
}
inline void AlgoPolicyDeleteReqt::set_algo_instance_id(const ::std::string& value) {
  set_has_algo_instance_id();
  algo_instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.AlgoPolicyDeleteReqt.algo_instance_id)
}
#if LANG_CXX11
inline void AlgoPolicyDeleteReqt::set_algo_instance_id(::std::string&& value) {
  set_has_algo_instance_id();
  algo_instance_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.AlgoPolicyDeleteReqt.algo_instance_id)
}
#endif
inline void AlgoPolicyDeleteReqt::set_algo_instance_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_algo_instance_id();
  algo_instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.AlgoPolicyDeleteReqt.algo_instance_id)
}
inline void AlgoPolicyDeleteReqt::set_algo_instance_id(const char* value, size_t size) {
  set_has_algo_instance_id();
  algo_instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.AlgoPolicyDeleteReqt.algo_instance_id)
}
inline ::std::string* AlgoPolicyDeleteReqt::mutable_algo_instance_id() {
  set_has_algo_instance_id();
  // @@protoc_insertion_point(field_mutable:autotrade.AlgoPolicyDeleteReqt.algo_instance_id)
  return algo_instance_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlgoPolicyDeleteReqt::release_algo_instance_id() {
  // @@protoc_insertion_point(field_release:autotrade.AlgoPolicyDeleteReqt.algo_instance_id)
  if (!has_algo_instance_id()) {
    return NULL;
  }
  clear_has_algo_instance_id();
  return algo_instance_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlgoPolicyDeleteReqt::set_allocated_algo_instance_id(::std::string* algo_instance_id) {
  if (algo_instance_id != NULL) {
    set_has_algo_instance_id();
  } else {
    clear_has_algo_instance_id();
  }
  algo_instance_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), algo_instance_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.AlgoPolicyDeleteReqt.algo_instance_id)
}

// optional string request_id = 3;
inline bool AlgoPolicyDeleteReqt::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AlgoPolicyDeleteReqt::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AlgoPolicyDeleteReqt::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AlgoPolicyDeleteReqt::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& AlgoPolicyDeleteReqt::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyDeleteReqt.request_id)
  return request_id_.GetNoArena();
}
inline void AlgoPolicyDeleteReqt::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.AlgoPolicyDeleteReqt.request_id)
}
#if LANG_CXX11
inline void AlgoPolicyDeleteReqt::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.AlgoPolicyDeleteReqt.request_id)
}
#endif
inline void AlgoPolicyDeleteReqt::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.AlgoPolicyDeleteReqt.request_id)
}
inline void AlgoPolicyDeleteReqt::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.AlgoPolicyDeleteReqt.request_id)
}
inline ::std::string* AlgoPolicyDeleteReqt::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.AlgoPolicyDeleteReqt.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlgoPolicyDeleteReqt::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.AlgoPolicyDeleteReqt.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlgoPolicyDeleteReqt::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.AlgoPolicyDeleteReqt.request_id)
}

// -------------------------------------------------------------------

// AlgoPolicyDeleteResp

// optional int32 funcid = 1 [default = 91100003];
inline bool AlgoPolicyDeleteResp::has_funcid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AlgoPolicyDeleteResp::set_has_funcid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AlgoPolicyDeleteResp::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AlgoPolicyDeleteResp::clear_funcid() {
  funcid_ = 91100003;
  clear_has_funcid();
}
inline ::google::protobuf::int32 AlgoPolicyDeleteResp::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyDeleteResp.funcid)
  return funcid_;
}
inline void AlgoPolicyDeleteResp::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.AlgoPolicyDeleteResp.funcid)
}

// required int32 error_code = 2;
inline bool AlgoPolicyDeleteResp::has_error_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AlgoPolicyDeleteResp::set_has_error_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AlgoPolicyDeleteResp::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AlgoPolicyDeleteResp::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 AlgoPolicyDeleteResp::error_code() const {
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyDeleteResp.error_code)
  return error_code_;
}
inline void AlgoPolicyDeleteResp::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:autotrade.AlgoPolicyDeleteResp.error_code)
}

// optional string error_msg = 3;
inline bool AlgoPolicyDeleteResp::has_error_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlgoPolicyDeleteResp::set_has_error_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AlgoPolicyDeleteResp::clear_has_error_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AlgoPolicyDeleteResp::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_msg();
}
inline const ::std::string& AlgoPolicyDeleteResp::error_msg() const {
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyDeleteResp.error_msg)
  return error_msg_.GetNoArena();
}
inline void AlgoPolicyDeleteResp::set_error_msg(const ::std::string& value) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.AlgoPolicyDeleteResp.error_msg)
}
#if LANG_CXX11
inline void AlgoPolicyDeleteResp::set_error_msg(::std::string&& value) {
  set_has_error_msg();
  error_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.AlgoPolicyDeleteResp.error_msg)
}
#endif
inline void AlgoPolicyDeleteResp::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.AlgoPolicyDeleteResp.error_msg)
}
inline void AlgoPolicyDeleteResp::set_error_msg(const char* value, size_t size) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.AlgoPolicyDeleteResp.error_msg)
}
inline ::std::string* AlgoPolicyDeleteResp::mutable_error_msg() {
  set_has_error_msg();
  // @@protoc_insertion_point(field_mutable:autotrade.AlgoPolicyDeleteResp.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlgoPolicyDeleteResp::release_error_msg() {
  // @@protoc_insertion_point(field_release:autotrade.AlgoPolicyDeleteResp.error_msg)
  if (!has_error_msg()) {
    return NULL;
  }
  clear_has_error_msg();
  return error_msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlgoPolicyDeleteResp::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    set_has_error_msg();
  } else {
    clear_has_error_msg();
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:autotrade.AlgoPolicyDeleteResp.error_msg)
}

// optional string algo_instance_id = 4;
inline bool AlgoPolicyDeleteResp::has_algo_instance_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AlgoPolicyDeleteResp::set_has_algo_instance_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AlgoPolicyDeleteResp::clear_has_algo_instance_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AlgoPolicyDeleteResp::clear_algo_instance_id() {
  algo_instance_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_algo_instance_id();
}
inline const ::std::string& AlgoPolicyDeleteResp::algo_instance_id() const {
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyDeleteResp.algo_instance_id)
  return algo_instance_id_.GetNoArena();
}
inline void AlgoPolicyDeleteResp::set_algo_instance_id(const ::std::string& value) {
  set_has_algo_instance_id();
  algo_instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.AlgoPolicyDeleteResp.algo_instance_id)
}
#if LANG_CXX11
inline void AlgoPolicyDeleteResp::set_algo_instance_id(::std::string&& value) {
  set_has_algo_instance_id();
  algo_instance_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.AlgoPolicyDeleteResp.algo_instance_id)
}
#endif
inline void AlgoPolicyDeleteResp::set_algo_instance_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_algo_instance_id();
  algo_instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.AlgoPolicyDeleteResp.algo_instance_id)
}
inline void AlgoPolicyDeleteResp::set_algo_instance_id(const char* value, size_t size) {
  set_has_algo_instance_id();
  algo_instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.AlgoPolicyDeleteResp.algo_instance_id)
}
inline ::std::string* AlgoPolicyDeleteResp::mutable_algo_instance_id() {
  set_has_algo_instance_id();
  // @@protoc_insertion_point(field_mutable:autotrade.AlgoPolicyDeleteResp.algo_instance_id)
  return algo_instance_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlgoPolicyDeleteResp::release_algo_instance_id() {
  // @@protoc_insertion_point(field_release:autotrade.AlgoPolicyDeleteResp.algo_instance_id)
  if (!has_algo_instance_id()) {
    return NULL;
  }
  clear_has_algo_instance_id();
  return algo_instance_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlgoPolicyDeleteResp::set_allocated_algo_instance_id(::std::string* algo_instance_id) {
  if (algo_instance_id != NULL) {
    set_has_algo_instance_id();
  } else {
    clear_has_algo_instance_id();
  }
  algo_instance_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), algo_instance_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.AlgoPolicyDeleteResp.algo_instance_id)
}

// optional string request_id = 5;
inline bool AlgoPolicyDeleteResp::has_request_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AlgoPolicyDeleteResp::set_has_request_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AlgoPolicyDeleteResp::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AlgoPolicyDeleteResp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& AlgoPolicyDeleteResp::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyDeleteResp.request_id)
  return request_id_.GetNoArena();
}
inline void AlgoPolicyDeleteResp::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.AlgoPolicyDeleteResp.request_id)
}
#if LANG_CXX11
inline void AlgoPolicyDeleteResp::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.AlgoPolicyDeleteResp.request_id)
}
#endif
inline void AlgoPolicyDeleteResp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.AlgoPolicyDeleteResp.request_id)
}
inline void AlgoPolicyDeleteResp::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.AlgoPolicyDeleteResp.request_id)
}
inline ::std::string* AlgoPolicyDeleteResp::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.AlgoPolicyDeleteResp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlgoPolicyDeleteResp::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.AlgoPolicyDeleteResp.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlgoPolicyDeleteResp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.AlgoPolicyDeleteResp.request_id)
}

// -------------------------------------------------------------------

// AlgoPolicyQueryReqt

// optional int32 funcid = 1 [default = 91000004];
inline bool AlgoPolicyQueryReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AlgoPolicyQueryReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AlgoPolicyQueryReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AlgoPolicyQueryReqt::clear_funcid() {
  funcid_ = 91000004;
  clear_has_funcid();
}
inline ::google::protobuf::int32 AlgoPolicyQueryReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyQueryReqt.funcid)
  return funcid_;
}
inline void AlgoPolicyQueryReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.AlgoPolicyQueryReqt.funcid)
}

// required string algo_instance_id = 2;
inline bool AlgoPolicyQueryReqt::has_algo_instance_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlgoPolicyQueryReqt::set_has_algo_instance_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AlgoPolicyQueryReqt::clear_has_algo_instance_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AlgoPolicyQueryReqt::clear_algo_instance_id() {
  algo_instance_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_algo_instance_id();
}
inline const ::std::string& AlgoPolicyQueryReqt::algo_instance_id() const {
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyQueryReqt.algo_instance_id)
  return algo_instance_id_.GetNoArena();
}
inline void AlgoPolicyQueryReqt::set_algo_instance_id(const ::std::string& value) {
  set_has_algo_instance_id();
  algo_instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.AlgoPolicyQueryReqt.algo_instance_id)
}
#if LANG_CXX11
inline void AlgoPolicyQueryReqt::set_algo_instance_id(::std::string&& value) {
  set_has_algo_instance_id();
  algo_instance_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.AlgoPolicyQueryReqt.algo_instance_id)
}
#endif
inline void AlgoPolicyQueryReqt::set_algo_instance_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_algo_instance_id();
  algo_instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.AlgoPolicyQueryReqt.algo_instance_id)
}
inline void AlgoPolicyQueryReqt::set_algo_instance_id(const char* value, size_t size) {
  set_has_algo_instance_id();
  algo_instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.AlgoPolicyQueryReqt.algo_instance_id)
}
inline ::std::string* AlgoPolicyQueryReqt::mutable_algo_instance_id() {
  set_has_algo_instance_id();
  // @@protoc_insertion_point(field_mutable:autotrade.AlgoPolicyQueryReqt.algo_instance_id)
  return algo_instance_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlgoPolicyQueryReqt::release_algo_instance_id() {
  // @@protoc_insertion_point(field_release:autotrade.AlgoPolicyQueryReqt.algo_instance_id)
  if (!has_algo_instance_id()) {
    return NULL;
  }
  clear_has_algo_instance_id();
  return algo_instance_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlgoPolicyQueryReqt::set_allocated_algo_instance_id(::std::string* algo_instance_id) {
  if (algo_instance_id != NULL) {
    set_has_algo_instance_id();
  } else {
    clear_has_algo_instance_id();
  }
  algo_instance_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), algo_instance_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.AlgoPolicyQueryReqt.algo_instance_id)
}

// optional string order_id = 3;
inline bool AlgoPolicyQueryReqt::has_order_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AlgoPolicyQueryReqt::set_has_order_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AlgoPolicyQueryReqt::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AlgoPolicyQueryReqt::clear_order_id() {
  order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_id();
}
inline const ::std::string& AlgoPolicyQueryReqt::order_id() const {
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyQueryReqt.order_id)
  return order_id_.GetNoArena();
}
inline void AlgoPolicyQueryReqt::set_order_id(const ::std::string& value) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.AlgoPolicyQueryReqt.order_id)
}
#if LANG_CXX11
inline void AlgoPolicyQueryReqt::set_order_id(::std::string&& value) {
  set_has_order_id();
  order_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.AlgoPolicyQueryReqt.order_id)
}
#endif
inline void AlgoPolicyQueryReqt::set_order_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.AlgoPolicyQueryReqt.order_id)
}
inline void AlgoPolicyQueryReqt::set_order_id(const char* value, size_t size) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.AlgoPolicyQueryReqt.order_id)
}
inline ::std::string* AlgoPolicyQueryReqt::mutable_order_id() {
  set_has_order_id();
  // @@protoc_insertion_point(field_mutable:autotrade.AlgoPolicyQueryReqt.order_id)
  return order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlgoPolicyQueryReqt::release_order_id() {
  // @@protoc_insertion_point(field_release:autotrade.AlgoPolicyQueryReqt.order_id)
  if (!has_order_id()) {
    return NULL;
  }
  clear_has_order_id();
  return order_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlgoPolicyQueryReqt::set_allocated_order_id(::std::string* order_id) {
  if (order_id != NULL) {
    set_has_order_id();
  } else {
    clear_has_order_id();
  }
  order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.AlgoPolicyQueryReqt.order_id)
}

// optional string request_id = 4;
inline bool AlgoPolicyQueryReqt::has_request_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AlgoPolicyQueryReqt::set_has_request_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AlgoPolicyQueryReqt::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AlgoPolicyQueryReqt::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& AlgoPolicyQueryReqt::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyQueryReqt.request_id)
  return request_id_.GetNoArena();
}
inline void AlgoPolicyQueryReqt::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.AlgoPolicyQueryReqt.request_id)
}
#if LANG_CXX11
inline void AlgoPolicyQueryReqt::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.AlgoPolicyQueryReqt.request_id)
}
#endif
inline void AlgoPolicyQueryReqt::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.AlgoPolicyQueryReqt.request_id)
}
inline void AlgoPolicyQueryReqt::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.AlgoPolicyQueryReqt.request_id)
}
inline ::std::string* AlgoPolicyQueryReqt::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.AlgoPolicyQueryReqt.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlgoPolicyQueryReqt::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.AlgoPolicyQueryReqt.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlgoPolicyQueryReqt::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.AlgoPolicyQueryReqt.request_id)
}

// -------------------------------------------------------------------

// AlgoPolicyQueryResp_SubOrderInfo

// required string orderno = 1;
inline bool AlgoPolicyQueryResp_SubOrderInfo::has_orderno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlgoPolicyQueryResp_SubOrderInfo::set_has_orderno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AlgoPolicyQueryResp_SubOrderInfo::clear_has_orderno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AlgoPolicyQueryResp_SubOrderInfo::clear_orderno() {
  orderno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_orderno();
}
inline const ::std::string& AlgoPolicyQueryResp_SubOrderInfo::orderno() const {
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyQueryResp.SubOrderInfo.orderno)
  return orderno_.GetNoArena();
}
inline void AlgoPolicyQueryResp_SubOrderInfo::set_orderno(const ::std::string& value) {
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.AlgoPolicyQueryResp.SubOrderInfo.orderno)
}
#if LANG_CXX11
inline void AlgoPolicyQueryResp_SubOrderInfo::set_orderno(::std::string&& value) {
  set_has_orderno();
  orderno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.AlgoPolicyQueryResp.SubOrderInfo.orderno)
}
#endif
inline void AlgoPolicyQueryResp_SubOrderInfo::set_orderno(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.AlgoPolicyQueryResp.SubOrderInfo.orderno)
}
inline void AlgoPolicyQueryResp_SubOrderInfo::set_orderno(const char* value, size_t size) {
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.AlgoPolicyQueryResp.SubOrderInfo.orderno)
}
inline ::std::string* AlgoPolicyQueryResp_SubOrderInfo::mutable_orderno() {
  set_has_orderno();
  // @@protoc_insertion_point(field_mutable:autotrade.AlgoPolicyQueryResp.SubOrderInfo.orderno)
  return orderno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlgoPolicyQueryResp_SubOrderInfo::release_orderno() {
  // @@protoc_insertion_point(field_release:autotrade.AlgoPolicyQueryResp.SubOrderInfo.orderno)
  if (!has_orderno()) {
    return NULL;
  }
  clear_has_orderno();
  return orderno_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlgoPolicyQueryResp_SubOrderInfo::set_allocated_orderno(::std::string* orderno) {
  if (orderno != NULL) {
    set_has_orderno();
  } else {
    clear_has_orderno();
  }
  orderno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderno);
  // @@protoc_insertion_point(field_set_allocated:autotrade.AlgoPolicyQueryResp.SubOrderInfo.orderno)
}

// optional string order_id = 2;
inline bool AlgoPolicyQueryResp_SubOrderInfo::has_order_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AlgoPolicyQueryResp_SubOrderInfo::set_has_order_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AlgoPolicyQueryResp_SubOrderInfo::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AlgoPolicyQueryResp_SubOrderInfo::clear_order_id() {
  order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_id();
}
inline const ::std::string& AlgoPolicyQueryResp_SubOrderInfo::order_id() const {
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyQueryResp.SubOrderInfo.order_id)
  return order_id_.GetNoArena();
}
inline void AlgoPolicyQueryResp_SubOrderInfo::set_order_id(const ::std::string& value) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.AlgoPolicyQueryResp.SubOrderInfo.order_id)
}
#if LANG_CXX11
inline void AlgoPolicyQueryResp_SubOrderInfo::set_order_id(::std::string&& value) {
  set_has_order_id();
  order_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.AlgoPolicyQueryResp.SubOrderInfo.order_id)
}
#endif
inline void AlgoPolicyQueryResp_SubOrderInfo::set_order_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.AlgoPolicyQueryResp.SubOrderInfo.order_id)
}
inline void AlgoPolicyQueryResp_SubOrderInfo::set_order_id(const char* value, size_t size) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.AlgoPolicyQueryResp.SubOrderInfo.order_id)
}
inline ::std::string* AlgoPolicyQueryResp_SubOrderInfo::mutable_order_id() {
  set_has_order_id();
  // @@protoc_insertion_point(field_mutable:autotrade.AlgoPolicyQueryResp.SubOrderInfo.order_id)
  return order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlgoPolicyQueryResp_SubOrderInfo::release_order_id() {
  // @@protoc_insertion_point(field_release:autotrade.AlgoPolicyQueryResp.SubOrderInfo.order_id)
  if (!has_order_id()) {
    return NULL;
  }
  clear_has_order_id();
  return order_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlgoPolicyQueryResp_SubOrderInfo::set_allocated_order_id(::std::string* order_id) {
  if (order_id != NULL) {
    set_has_order_id();
  } else {
    clear_has_order_id();
  }
  order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.AlgoPolicyQueryResp.SubOrderInfo.order_id)
}

// optional string order_status = 3;
inline bool AlgoPolicyQueryResp_SubOrderInfo::has_order_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AlgoPolicyQueryResp_SubOrderInfo::set_has_order_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AlgoPolicyQueryResp_SubOrderInfo::clear_has_order_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AlgoPolicyQueryResp_SubOrderInfo::clear_order_status() {
  order_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_status();
}
inline const ::std::string& AlgoPolicyQueryResp_SubOrderInfo::order_status() const {
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyQueryResp.SubOrderInfo.order_status)
  return order_status_.GetNoArena();
}
inline void AlgoPolicyQueryResp_SubOrderInfo::set_order_status(const ::std::string& value) {
  set_has_order_status();
  order_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.AlgoPolicyQueryResp.SubOrderInfo.order_status)
}
#if LANG_CXX11
inline void AlgoPolicyQueryResp_SubOrderInfo::set_order_status(::std::string&& value) {
  set_has_order_status();
  order_status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.AlgoPolicyQueryResp.SubOrderInfo.order_status)
}
#endif
inline void AlgoPolicyQueryResp_SubOrderInfo::set_order_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_status();
  order_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.AlgoPolicyQueryResp.SubOrderInfo.order_status)
}
inline void AlgoPolicyQueryResp_SubOrderInfo::set_order_status(const char* value, size_t size) {
  set_has_order_status();
  order_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.AlgoPolicyQueryResp.SubOrderInfo.order_status)
}
inline ::std::string* AlgoPolicyQueryResp_SubOrderInfo::mutable_order_status() {
  set_has_order_status();
  // @@protoc_insertion_point(field_mutable:autotrade.AlgoPolicyQueryResp.SubOrderInfo.order_status)
  return order_status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlgoPolicyQueryResp_SubOrderInfo::release_order_status() {
  // @@protoc_insertion_point(field_release:autotrade.AlgoPolicyQueryResp.SubOrderInfo.order_status)
  if (!has_order_status()) {
    return NULL;
  }
  clear_has_order_status();
  return order_status_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlgoPolicyQueryResp_SubOrderInfo::set_allocated_order_status(::std::string* order_status) {
  if (order_status != NULL) {
    set_has_order_status();
  } else {
    clear_has_order_status();
  }
  order_status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_status);
  // @@protoc_insertion_point(field_set_allocated:autotrade.AlgoPolicyQueryResp.SubOrderInfo.order_status)
}

// -------------------------------------------------------------------

// AlgoPolicyQueryResp

// optional int32 funcid = 1 [default = 91100004];
inline bool AlgoPolicyQueryResp::has_funcid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AlgoPolicyQueryResp::set_has_funcid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AlgoPolicyQueryResp::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AlgoPolicyQueryResp::clear_funcid() {
  funcid_ = 91100004;
  clear_has_funcid();
}
inline ::google::protobuf::int32 AlgoPolicyQueryResp::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyQueryResp.funcid)
  return funcid_;
}
inline void AlgoPolicyQueryResp::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.AlgoPolicyQueryResp.funcid)
}

// required int32 error_code = 2;
inline bool AlgoPolicyQueryResp::has_error_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AlgoPolicyQueryResp::set_has_error_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AlgoPolicyQueryResp::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AlgoPolicyQueryResp::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 AlgoPolicyQueryResp::error_code() const {
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyQueryResp.error_code)
  return error_code_;
}
inline void AlgoPolicyQueryResp::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:autotrade.AlgoPolicyQueryResp.error_code)
}

// optional string error_msg = 3;
inline bool AlgoPolicyQueryResp::has_error_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlgoPolicyQueryResp::set_has_error_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AlgoPolicyQueryResp::clear_has_error_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AlgoPolicyQueryResp::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_msg();
}
inline const ::std::string& AlgoPolicyQueryResp::error_msg() const {
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyQueryResp.error_msg)
  return error_msg_.GetNoArena();
}
inline void AlgoPolicyQueryResp::set_error_msg(const ::std::string& value) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.AlgoPolicyQueryResp.error_msg)
}
#if LANG_CXX11
inline void AlgoPolicyQueryResp::set_error_msg(::std::string&& value) {
  set_has_error_msg();
  error_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.AlgoPolicyQueryResp.error_msg)
}
#endif
inline void AlgoPolicyQueryResp::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.AlgoPolicyQueryResp.error_msg)
}
inline void AlgoPolicyQueryResp::set_error_msg(const char* value, size_t size) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.AlgoPolicyQueryResp.error_msg)
}
inline ::std::string* AlgoPolicyQueryResp::mutable_error_msg() {
  set_has_error_msg();
  // @@protoc_insertion_point(field_mutable:autotrade.AlgoPolicyQueryResp.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlgoPolicyQueryResp::release_error_msg() {
  // @@protoc_insertion_point(field_release:autotrade.AlgoPolicyQueryResp.error_msg)
  if (!has_error_msg()) {
    return NULL;
  }
  clear_has_error_msg();
  return error_msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlgoPolicyQueryResp::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    set_has_error_msg();
  } else {
    clear_has_error_msg();
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:autotrade.AlgoPolicyQueryResp.error_msg)
}

// repeated .autotrade.AlgoPolicyQueryResp.SubOrderInfo order_list = 4;
inline int AlgoPolicyQueryResp::order_list_size() const {
  return order_list_.size();
}
inline void AlgoPolicyQueryResp::clear_order_list() {
  order_list_.Clear();
}
inline ::autotrade::AlgoPolicyQueryResp_SubOrderInfo* AlgoPolicyQueryResp::mutable_order_list(int index) {
  // @@protoc_insertion_point(field_mutable:autotrade.AlgoPolicyQueryResp.order_list)
  return order_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::autotrade::AlgoPolicyQueryResp_SubOrderInfo >*
AlgoPolicyQueryResp::mutable_order_list() {
  // @@protoc_insertion_point(field_mutable_list:autotrade.AlgoPolicyQueryResp.order_list)
  return &order_list_;
}
inline const ::autotrade::AlgoPolicyQueryResp_SubOrderInfo& AlgoPolicyQueryResp::order_list(int index) const {
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyQueryResp.order_list)
  return order_list_.Get(index);
}
inline ::autotrade::AlgoPolicyQueryResp_SubOrderInfo* AlgoPolicyQueryResp::add_order_list() {
  // @@protoc_insertion_point(field_add:autotrade.AlgoPolicyQueryResp.order_list)
  return order_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::autotrade::AlgoPolicyQueryResp_SubOrderInfo >&
AlgoPolicyQueryResp::order_list() const {
  // @@protoc_insertion_point(field_list:autotrade.AlgoPolicyQueryResp.order_list)
  return order_list_;
}

// optional int32 si_state = 5;
inline bool AlgoPolicyQueryResp::has_si_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AlgoPolicyQueryResp::set_has_si_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AlgoPolicyQueryResp::clear_has_si_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AlgoPolicyQueryResp::clear_si_state() {
  si_state_ = 0;
  clear_has_si_state();
}
inline ::google::protobuf::int32 AlgoPolicyQueryResp::si_state() const {
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyQueryResp.si_state)
  return si_state_;
}
inline void AlgoPolicyQueryResp::set_si_state(::google::protobuf::int32 value) {
  set_has_si_state();
  si_state_ = value;
  // @@protoc_insertion_point(field_set:autotrade.AlgoPolicyQueryResp.si_state)
}

// optional string si_trace = 6;
inline bool AlgoPolicyQueryResp::has_si_trace() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AlgoPolicyQueryResp::set_has_si_trace() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AlgoPolicyQueryResp::clear_has_si_trace() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AlgoPolicyQueryResp::clear_si_trace() {
  si_trace_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_si_trace();
}
inline const ::std::string& AlgoPolicyQueryResp::si_trace() const {
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyQueryResp.si_trace)
  return si_trace_.GetNoArena();
}
inline void AlgoPolicyQueryResp::set_si_trace(const ::std::string& value) {
  set_has_si_trace();
  si_trace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.AlgoPolicyQueryResp.si_trace)
}
#if LANG_CXX11
inline void AlgoPolicyQueryResp::set_si_trace(::std::string&& value) {
  set_has_si_trace();
  si_trace_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.AlgoPolicyQueryResp.si_trace)
}
#endif
inline void AlgoPolicyQueryResp::set_si_trace(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_si_trace();
  si_trace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.AlgoPolicyQueryResp.si_trace)
}
inline void AlgoPolicyQueryResp::set_si_trace(const char* value, size_t size) {
  set_has_si_trace();
  si_trace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.AlgoPolicyQueryResp.si_trace)
}
inline ::std::string* AlgoPolicyQueryResp::mutable_si_trace() {
  set_has_si_trace();
  // @@protoc_insertion_point(field_mutable:autotrade.AlgoPolicyQueryResp.si_trace)
  return si_trace_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlgoPolicyQueryResp::release_si_trace() {
  // @@protoc_insertion_point(field_release:autotrade.AlgoPolicyQueryResp.si_trace)
  if (!has_si_trace()) {
    return NULL;
  }
  clear_has_si_trace();
  return si_trace_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlgoPolicyQueryResp::set_allocated_si_trace(::std::string* si_trace) {
  if (si_trace != NULL) {
    set_has_si_trace();
  } else {
    clear_has_si_trace();
  }
  si_trace_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), si_trace);
  // @@protoc_insertion_point(field_set_allocated:autotrade.AlgoPolicyQueryResp.si_trace)
}

// optional string request_id = 7;
inline bool AlgoPolicyQueryResp::has_request_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AlgoPolicyQueryResp::set_has_request_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AlgoPolicyQueryResp::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AlgoPolicyQueryResp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& AlgoPolicyQueryResp::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.AlgoPolicyQueryResp.request_id)
  return request_id_.GetNoArena();
}
inline void AlgoPolicyQueryResp::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.AlgoPolicyQueryResp.request_id)
}
#if LANG_CXX11
inline void AlgoPolicyQueryResp::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.AlgoPolicyQueryResp.request_id)
}
#endif
inline void AlgoPolicyQueryResp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.AlgoPolicyQueryResp.request_id)
}
inline void AlgoPolicyQueryResp::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.AlgoPolicyQueryResp.request_id)
}
inline ::std::string* AlgoPolicyQueryResp::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.AlgoPolicyQueryResp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlgoPolicyQueryResp::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.AlgoPolicyQueryResp.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlgoPolicyQueryResp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.AlgoPolicyQueryResp.request_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace autotrade

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_protos_2fqpolicy_5fprotocol_2eproto
