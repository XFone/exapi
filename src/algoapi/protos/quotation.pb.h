// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/quotation.proto

#ifndef PROTOBUF_INCLUDED_protos_2fquotation_2eproto
#define PROTOBUF_INCLUDED_protos_2fquotation_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fquotation_2eproto 

namespace protobuf_protos_2fquotation_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[34];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_protos_2fquotation_2eproto
namespace quotation {
class CircleQuotation;
class CircleQuotationDefaultTypeInternal;
extern CircleQuotationDefaultTypeInternal _CircleQuotation_default_instance_;
class CurrentBasis;
class CurrentBasisDefaultTypeInternal;
extern CurrentBasisDefaultTypeInternal _CurrentBasis_default_instance_;
class EtfConstituentStock;
class EtfConstituentStockDefaultTypeInternal;
extern EtfConstituentStockDefaultTypeInternal _EtfConstituentStock_default_instance_;
class EtfFees;
class EtfFeesDefaultTypeInternal;
extern EtfFeesDefaultTypeInternal _EtfFees_default_instance_;
class EtfFees_EtfFee;
class EtfFees_EtfFeeDefaultTypeInternal;
extern EtfFees_EtfFeeDefaultTypeInternal _EtfFees_EtfFee_default_instance_;
class EtfListInfo;
class EtfListInfoDefaultTypeInternal;
extern EtfListInfoDefaultTypeInternal _EtfListInfo_default_instance_;
class Future;
class FutureDefaultTypeInternal;
extern FutureDefaultTypeInternal _Future_default_instance_;
class GradedFundInfo;
class GradedFundInfoDefaultTypeInternal;
extern GradedFundInfoDefaultTypeInternal _GradedFundInfo_default_instance_;
class GradedFundIopv;
class GradedFundIopvDefaultTypeInternal;
extern GradedFundIopvDefaultTypeInternal _GradedFundIopv_default_instance_;
class Handicap;
class HandicapDefaultTypeInternal;
extern HandicapDefaultTypeInternal _Handicap_default_instance_;
class Handicap_Item;
class Handicap_ItemDefaultTypeInternal;
extern Handicap_ItemDefaultTypeInternal _Handicap_Item_default_instance_;
class Handicap_Queue;
class Handicap_QueueDefaultTypeInternal;
extern Handicap_QueueDefaultTypeInternal _Handicap_Queue_default_instance_;
class Index;
class IndexDefaultTypeInternal;
extern IndexDefaultTypeInternal _Index_default_instance_;
class IndexParam;
class IndexParamDefaultTypeInternal;
extern IndexParamDefaultTypeInternal _IndexParam_default_instance_;
class Option;
class OptionDefaultTypeInternal;
extern OptionDefaultTypeInternal _Option_default_instance_;
class OptionInfo;
class OptionInfoDefaultTypeInternal;
extern OptionInfoDefaultTypeInternal _OptionInfo_default_instance_;
class OptionVolatility;
class OptionVolatilityDefaultTypeInternal;
extern OptionVolatilityDefaultTypeInternal _OptionVolatility_default_instance_;
class OptionVolatilitySurface;
class OptionVolatilitySurfaceDefaultTypeInternal;
extern OptionVolatilitySurfaceDefaultTypeInternal _OptionVolatilitySurface_default_instance_;
class OptionVolatilitySurface_Value;
class OptionVolatilitySurface_ValueDefaultTypeInternal;
extern OptionVolatilitySurface_ValueDefaultTypeInternal _OptionVolatilitySurface_Value_default_instance_;
class OptionVolatilitySurfaces;
class OptionVolatilitySurfacesDefaultTypeInternal;
extern OptionVolatilitySurfacesDefaultTypeInternal _OptionVolatilitySurfaces_default_instance_;
class PublicOrderData;
class PublicOrderDataDefaultTypeInternal;
extern PublicOrderDataDefaultTypeInternal _PublicOrderData_default_instance_;
class PublicOrderQueueData;
class PublicOrderQueueDataDefaultTypeInternal;
extern PublicOrderQueueDataDefaultTypeInternal _PublicOrderQueueData_default_instance_;
class PublicOrderTransaction;
class PublicOrderTransactionDefaultTypeInternal;
extern PublicOrderTransactionDefaultTypeInternal _PublicOrderTransaction_default_instance_;
class SecurityOrderInfo;
class SecurityOrderInfoDefaultTypeInternal;
extern SecurityOrderInfoDefaultTypeInternal _SecurityOrderInfo_default_instance_;
class SecurityState;
class SecurityStateDefaultTypeInternal;
extern SecurityStateDefaultTypeInternal _SecurityState_default_instance_;
class SecurityStateList;
class SecurityStateListDefaultTypeInternal;
extern SecurityStateListDefaultTypeInternal _SecurityStateList_default_instance_;
class SetOptionVolatilitySurfacesRep;
class SetOptionVolatilitySurfacesRepDefaultTypeInternal;
extern SetOptionVolatilitySurfacesRepDefaultTypeInternal _SetOptionVolatilitySurfacesRep_default_instance_;
class SetOptionVolatilitySurfacesReq;
class SetOptionVolatilitySurfacesReqDefaultTypeInternal;
extern SetOptionVolatilitySurfacesReqDefaultTypeInternal _SetOptionVolatilitySurfacesReq_default_instance_;
class Stock;
class StockDefaultTypeInternal;
extern StockDefaultTypeInternal _Stock_default_instance_;
class StockAmendments;
class StockAmendmentsDefaultTypeInternal;
extern StockAmendmentsDefaultTypeInternal _StockAmendments_default_instance_;
class StockAmendments_StockAmendment;
class StockAmendments_StockAmendmentDefaultTypeInternal;
extern StockAmendments_StockAmendmentDefaultTypeInternal _StockAmendments_StockAmendment_default_instance_;
class TradingDay;
class TradingDayDefaultTypeInternal;
extern TradingDayDefaultTypeInternal _TradingDay_default_instance_;
class VIndex;
class VIndexDefaultTypeInternal;
extern VIndexDefaultTypeInternal _VIndex_default_instance_;
class VIndex_StockInfo;
class VIndex_StockInfoDefaultTypeInternal;
extern VIndex_StockInfoDefaultTypeInternal _VIndex_StockInfo_default_instance_;
}  // namespace quotation
namespace google {
namespace protobuf {
template<> ::quotation::CircleQuotation* Arena::CreateMaybeMessage<::quotation::CircleQuotation>(Arena*);
template<> ::quotation::CurrentBasis* Arena::CreateMaybeMessage<::quotation::CurrentBasis>(Arena*);
template<> ::quotation::EtfConstituentStock* Arena::CreateMaybeMessage<::quotation::EtfConstituentStock>(Arena*);
template<> ::quotation::EtfFees* Arena::CreateMaybeMessage<::quotation::EtfFees>(Arena*);
template<> ::quotation::EtfFees_EtfFee* Arena::CreateMaybeMessage<::quotation::EtfFees_EtfFee>(Arena*);
template<> ::quotation::EtfListInfo* Arena::CreateMaybeMessage<::quotation::EtfListInfo>(Arena*);
template<> ::quotation::Future* Arena::CreateMaybeMessage<::quotation::Future>(Arena*);
template<> ::quotation::GradedFundInfo* Arena::CreateMaybeMessage<::quotation::GradedFundInfo>(Arena*);
template<> ::quotation::GradedFundIopv* Arena::CreateMaybeMessage<::quotation::GradedFundIopv>(Arena*);
template<> ::quotation::Handicap* Arena::CreateMaybeMessage<::quotation::Handicap>(Arena*);
template<> ::quotation::Handicap_Item* Arena::CreateMaybeMessage<::quotation::Handicap_Item>(Arena*);
template<> ::quotation::Handicap_Queue* Arena::CreateMaybeMessage<::quotation::Handicap_Queue>(Arena*);
template<> ::quotation::Index* Arena::CreateMaybeMessage<::quotation::Index>(Arena*);
template<> ::quotation::IndexParam* Arena::CreateMaybeMessage<::quotation::IndexParam>(Arena*);
template<> ::quotation::Option* Arena::CreateMaybeMessage<::quotation::Option>(Arena*);
template<> ::quotation::OptionInfo* Arena::CreateMaybeMessage<::quotation::OptionInfo>(Arena*);
template<> ::quotation::OptionVolatility* Arena::CreateMaybeMessage<::quotation::OptionVolatility>(Arena*);
template<> ::quotation::OptionVolatilitySurface* Arena::CreateMaybeMessage<::quotation::OptionVolatilitySurface>(Arena*);
template<> ::quotation::OptionVolatilitySurface_Value* Arena::CreateMaybeMessage<::quotation::OptionVolatilitySurface_Value>(Arena*);
template<> ::quotation::OptionVolatilitySurfaces* Arena::CreateMaybeMessage<::quotation::OptionVolatilitySurfaces>(Arena*);
template<> ::quotation::PublicOrderData* Arena::CreateMaybeMessage<::quotation::PublicOrderData>(Arena*);
template<> ::quotation::PublicOrderQueueData* Arena::CreateMaybeMessage<::quotation::PublicOrderQueueData>(Arena*);
template<> ::quotation::PublicOrderTransaction* Arena::CreateMaybeMessage<::quotation::PublicOrderTransaction>(Arena*);
template<> ::quotation::SecurityOrderInfo* Arena::CreateMaybeMessage<::quotation::SecurityOrderInfo>(Arena*);
template<> ::quotation::SecurityState* Arena::CreateMaybeMessage<::quotation::SecurityState>(Arena*);
template<> ::quotation::SecurityStateList* Arena::CreateMaybeMessage<::quotation::SecurityStateList>(Arena*);
template<> ::quotation::SetOptionVolatilitySurfacesRep* Arena::CreateMaybeMessage<::quotation::SetOptionVolatilitySurfacesRep>(Arena*);
template<> ::quotation::SetOptionVolatilitySurfacesReq* Arena::CreateMaybeMessage<::quotation::SetOptionVolatilitySurfacesReq>(Arena*);
template<> ::quotation::Stock* Arena::CreateMaybeMessage<::quotation::Stock>(Arena*);
template<> ::quotation::StockAmendments* Arena::CreateMaybeMessage<::quotation::StockAmendments>(Arena*);
template<> ::quotation::StockAmendments_StockAmendment* Arena::CreateMaybeMessage<::quotation::StockAmendments_StockAmendment>(Arena*);
template<> ::quotation::TradingDay* Arena::CreateMaybeMessage<::quotation::TradingDay>(Arena*);
template<> ::quotation::VIndex* Arena::CreateMaybeMessage<::quotation::VIndex>(Arena*);
template<> ::quotation::VIndex_StockInfo* Arena::CreateMaybeMessage<::quotation::VIndex_StockInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace quotation {

// ===================================================================

class Stock : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quotation.Stock) */ {
 public:
  Stock();
  virtual ~Stock();

  Stock(const Stock& from);

  inline Stock& operator=(const Stock& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Stock(Stock&& from) noexcept
    : Stock() {
    *this = ::std::move(from);
  }

  inline Stock& operator=(Stock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Stock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Stock* internal_default_instance() {
    return reinterpret_cast<const Stock*>(
               &_Stock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Stock* other);
  friend void swap(Stock& a, Stock& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Stock* New() const final {
    return CreateMaybeMessage<Stock>(NULL);
  }

  Stock* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Stock>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Stock& from);
  void MergeFrom(const Stock& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1 [default = "S"];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required string code = 8;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 8;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string name = 9;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 9;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint32 trading_day = 2;
  bool has_trading_day() const;
  void clear_trading_day();
  static const int kTradingDayFieldNumber = 2;
  ::google::protobuf::uint32 trading_day() const;
  void set_trading_day(::google::protobuf::uint32 value);

  // required uint32 stamp = 3;
  bool has_stamp() const;
  void clear_stamp();
  static const int kStampFieldNumber = 3;
  ::google::protobuf::uint32 stamp() const;
  void set_stamp(::google::protobuf::uint32 value);

  // required int64 new_price = 4;
  bool has_new_price() const;
  void clear_new_price();
  static const int kNewPriceFieldNumber = 4;
  ::google::protobuf::int64 new_price() const;
  void set_new_price(::google::protobuf::int64 value);

  // optional int64 new_volume = 5;
  bool has_new_volume() const;
  void clear_new_volume();
  static const int kNewVolumeFieldNumber = 5;
  ::google::protobuf::int64 new_volume() const;
  void set_new_volume(::google::protobuf::int64 value);

  // optional int64 sum_volume = 6;
  bool has_sum_volume() const;
  void clear_sum_volume();
  static const int kSumVolumeFieldNumber = 6;
  ::google::protobuf::int64 sum_volume() const;
  void set_sum_volume(::google::protobuf::int64 value);

  // optional int64 sum_amount = 7;
  bool has_sum_amount() const;
  void clear_sum_amount();
  static const int kSumAmountFieldNumber = 7;
  ::google::protobuf::int64 sum_amount() const;
  void set_sum_amount(::google::protobuf::int64 value);

  // optional int64 bp1 = 10;
  bool has_bp1() const;
  void clear_bp1();
  static const int kBp1FieldNumber = 10;
  ::google::protobuf::int64 bp1() const;
  void set_bp1(::google::protobuf::int64 value);

  // optional int64 bp2 = 11;
  bool has_bp2() const;
  void clear_bp2();
  static const int kBp2FieldNumber = 11;
  ::google::protobuf::int64 bp2() const;
  void set_bp2(::google::protobuf::int64 value);

  // optional int64 bp3 = 12;
  bool has_bp3() const;
  void clear_bp3();
  static const int kBp3FieldNumber = 12;
  ::google::protobuf::int64 bp3() const;
  void set_bp3(::google::protobuf::int64 value);

  // optional int64 bp4 = 13;
  bool has_bp4() const;
  void clear_bp4();
  static const int kBp4FieldNumber = 13;
  ::google::protobuf::int64 bp4() const;
  void set_bp4(::google::protobuf::int64 value);

  // optional int64 bp5 = 14;
  bool has_bp5() const;
  void clear_bp5();
  static const int kBp5FieldNumber = 14;
  ::google::protobuf::int64 bp5() const;
  void set_bp5(::google::protobuf::int64 value);

  // optional int64 ba1 = 15;
  bool has_ba1() const;
  void clear_ba1();
  static const int kBa1FieldNumber = 15;
  ::google::protobuf::int64 ba1() const;
  void set_ba1(::google::protobuf::int64 value);

  // optional int64 ba2 = 16;
  bool has_ba2() const;
  void clear_ba2();
  static const int kBa2FieldNumber = 16;
  ::google::protobuf::int64 ba2() const;
  void set_ba2(::google::protobuf::int64 value);

  // optional int64 ba3 = 17;
  bool has_ba3() const;
  void clear_ba3();
  static const int kBa3FieldNumber = 17;
  ::google::protobuf::int64 ba3() const;
  void set_ba3(::google::protobuf::int64 value);

  // optional int64 ba4 = 18;
  bool has_ba4() const;
  void clear_ba4();
  static const int kBa4FieldNumber = 18;
  ::google::protobuf::int64 ba4() const;
  void set_ba4(::google::protobuf::int64 value);

  // optional int64 ba5 = 19;
  bool has_ba5() const;
  void clear_ba5();
  static const int kBa5FieldNumber = 19;
  ::google::protobuf::int64 ba5() const;
  void set_ba5(::google::protobuf::int64 value);

  // optional int64 sp1 = 20;
  bool has_sp1() const;
  void clear_sp1();
  static const int kSp1FieldNumber = 20;
  ::google::protobuf::int64 sp1() const;
  void set_sp1(::google::protobuf::int64 value);

  // optional int64 sp2 = 21;
  bool has_sp2() const;
  void clear_sp2();
  static const int kSp2FieldNumber = 21;
  ::google::protobuf::int64 sp2() const;
  void set_sp2(::google::protobuf::int64 value);

  // optional int64 sp3 = 22;
  bool has_sp3() const;
  void clear_sp3();
  static const int kSp3FieldNumber = 22;
  ::google::protobuf::int64 sp3() const;
  void set_sp3(::google::protobuf::int64 value);

  // optional int64 sp4 = 23;
  bool has_sp4() const;
  void clear_sp4();
  static const int kSp4FieldNumber = 23;
  ::google::protobuf::int64 sp4() const;
  void set_sp4(::google::protobuf::int64 value);

  // optional int64 sp5 = 24;
  bool has_sp5() const;
  void clear_sp5();
  static const int kSp5FieldNumber = 24;
  ::google::protobuf::int64 sp5() const;
  void set_sp5(::google::protobuf::int64 value);

  // optional int64 sa1 = 25;
  bool has_sa1() const;
  void clear_sa1();
  static const int kSa1FieldNumber = 25;
  ::google::protobuf::int64 sa1() const;
  void set_sa1(::google::protobuf::int64 value);

  // optional int64 sa2 = 26;
  bool has_sa2() const;
  void clear_sa2();
  static const int kSa2FieldNumber = 26;
  ::google::protobuf::int64 sa2() const;
  void set_sa2(::google::protobuf::int64 value);

  // optional int64 sa3 = 27;
  bool has_sa3() const;
  void clear_sa3();
  static const int kSa3FieldNumber = 27;
  ::google::protobuf::int64 sa3() const;
  void set_sa3(::google::protobuf::int64 value);

  // optional int64 sa4 = 28;
  bool has_sa4() const;
  void clear_sa4();
  static const int kSa4FieldNumber = 28;
  ::google::protobuf::int64 sa4() const;
  void set_sa4(::google::protobuf::int64 value);

  // optional int64 sa5 = 29;
  bool has_sa5() const;
  void clear_sa5();
  static const int kSa5FieldNumber = 29;
  ::google::protobuf::int64 sa5() const;
  void set_sa5(::google::protobuf::int64 value);

  // optional int64 status = 30;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 30;
  ::google::protobuf::int64 status() const;
  void set_status(::google::protobuf::int64 value);

  // optional int64 preclose = 31;
  bool has_preclose() const;
  void clear_preclose();
  static const int kPrecloseFieldNumber = 31;
  ::google::protobuf::int64 preclose() const;
  void set_preclose(::google::protobuf::int64 value);

  // optional int64 open = 32;
  bool has_open() const;
  void clear_open();
  static const int kOpenFieldNumber = 32;
  ::google::protobuf::int64 open() const;
  void set_open(::google::protobuf::int64 value);

  // optional int64 high = 33;
  bool has_high() const;
  void clear_high();
  static const int kHighFieldNumber = 33;
  ::google::protobuf::int64 high() const;
  void set_high(::google::protobuf::int64 value);

  // optional int64 low = 34;
  bool has_low() const;
  void clear_low();
  static const int kLowFieldNumber = 34;
  ::google::protobuf::int64 low() const;
  void set_low(::google::protobuf::int64 value);

  // optional int64 iopv = 35;
  bool has_iopv() const;
  void clear_iopv();
  static const int kIopvFieldNumber = 35;
  ::google::protobuf::int64 iopv() const;
  void set_iopv(::google::protobuf::int64 value);

  // optional int64 bp1_ajust = 36;
  bool has_bp1_ajust() const;
  void clear_bp1_ajust();
  static const int kBp1AjustFieldNumber = 36;
  ::google::protobuf::int64 bp1_ajust() const;
  void set_bp1_ajust(::google::protobuf::int64 value);

  // optional int64 sp1_ajust = 37;
  bool has_sp1_ajust() const;
  void clear_sp1_ajust();
  static const int kSp1AjustFieldNumber = 37;
  ::google::protobuf::int64 sp1_ajust() const;
  void set_sp1_ajust(::google::protobuf::int64 value);

  // optional int64 bought_volume = 38;
  bool has_bought_volume() const;
  void clear_bought_volume();
  static const int kBoughtVolumeFieldNumber = 38;
  ::google::protobuf::int64 bought_volume() const;
  void set_bought_volume(::google::protobuf::int64 value);

  // optional int64 sold_volume = 39;
  bool has_sold_volume() const;
  void clear_sold_volume();
  static const int kSoldVolumeFieldNumber = 39;
  ::google::protobuf::int64 sold_volume() const;
  void set_sold_volume(::google::protobuf::int64 value);

  // optional int64 bp6 = 40;
  bool has_bp6() const;
  void clear_bp6();
  static const int kBp6FieldNumber = 40;
  ::google::protobuf::int64 bp6() const;
  void set_bp6(::google::protobuf::int64 value);

  // optional int64 bp7 = 41;
  bool has_bp7() const;
  void clear_bp7();
  static const int kBp7FieldNumber = 41;
  ::google::protobuf::int64 bp7() const;
  void set_bp7(::google::protobuf::int64 value);

  // optional int64 bp8 = 42;
  bool has_bp8() const;
  void clear_bp8();
  static const int kBp8FieldNumber = 42;
  ::google::protobuf::int64 bp8() const;
  void set_bp8(::google::protobuf::int64 value);

  // optional int64 bp9 = 43;
  bool has_bp9() const;
  void clear_bp9();
  static const int kBp9FieldNumber = 43;
  ::google::protobuf::int64 bp9() const;
  void set_bp9(::google::protobuf::int64 value);

  // optional int64 bp10 = 44;
  bool has_bp10() const;
  void clear_bp10();
  static const int kBp10FieldNumber = 44;
  ::google::protobuf::int64 bp10() const;
  void set_bp10(::google::protobuf::int64 value);

  // optional int64 ba6 = 45;
  bool has_ba6() const;
  void clear_ba6();
  static const int kBa6FieldNumber = 45;
  ::google::protobuf::int64 ba6() const;
  void set_ba6(::google::protobuf::int64 value);

  // optional int64 ba7 = 46;
  bool has_ba7() const;
  void clear_ba7();
  static const int kBa7FieldNumber = 46;
  ::google::protobuf::int64 ba7() const;
  void set_ba7(::google::protobuf::int64 value);

  // optional int64 ba8 = 47;
  bool has_ba8() const;
  void clear_ba8();
  static const int kBa8FieldNumber = 47;
  ::google::protobuf::int64 ba8() const;
  void set_ba8(::google::protobuf::int64 value);

  // optional int64 ba9 = 48;
  bool has_ba9() const;
  void clear_ba9();
  static const int kBa9FieldNumber = 48;
  ::google::protobuf::int64 ba9() const;
  void set_ba9(::google::protobuf::int64 value);

  // optional int64 ba10 = 49;
  bool has_ba10() const;
  void clear_ba10();
  static const int kBa10FieldNumber = 49;
  ::google::protobuf::int64 ba10() const;
  void set_ba10(::google::protobuf::int64 value);

  // optional int64 sp6 = 50;
  bool has_sp6() const;
  void clear_sp6();
  static const int kSp6FieldNumber = 50;
  ::google::protobuf::int64 sp6() const;
  void set_sp6(::google::protobuf::int64 value);

  // optional int64 sp7 = 51;
  bool has_sp7() const;
  void clear_sp7();
  static const int kSp7FieldNumber = 51;
  ::google::protobuf::int64 sp7() const;
  void set_sp7(::google::protobuf::int64 value);

  // optional int64 sp8 = 52;
  bool has_sp8() const;
  void clear_sp8();
  static const int kSp8FieldNumber = 52;
  ::google::protobuf::int64 sp8() const;
  void set_sp8(::google::protobuf::int64 value);

  // optional int64 sp9 = 53;
  bool has_sp9() const;
  void clear_sp9();
  static const int kSp9FieldNumber = 53;
  ::google::protobuf::int64 sp9() const;
  void set_sp9(::google::protobuf::int64 value);

  // optional int64 sp10 = 54;
  bool has_sp10() const;
  void clear_sp10();
  static const int kSp10FieldNumber = 54;
  ::google::protobuf::int64 sp10() const;
  void set_sp10(::google::protobuf::int64 value);

  // optional int64 sa6 = 55;
  bool has_sa6() const;
  void clear_sa6();
  static const int kSa6FieldNumber = 55;
  ::google::protobuf::int64 sa6() const;
  void set_sa6(::google::protobuf::int64 value);

  // optional int64 sa7 = 56;
  bool has_sa7() const;
  void clear_sa7();
  static const int kSa7FieldNumber = 56;
  ::google::protobuf::int64 sa7() const;
  void set_sa7(::google::protobuf::int64 value);

  // optional int64 sa8 = 57;
  bool has_sa8() const;
  void clear_sa8();
  static const int kSa8FieldNumber = 57;
  ::google::protobuf::int64 sa8() const;
  void set_sa8(::google::protobuf::int64 value);

  // optional int64 sa9 = 58;
  bool has_sa9() const;
  void clear_sa9();
  static const int kSa9FieldNumber = 58;
  ::google::protobuf::int64 sa9() const;
  void set_sa9(::google::protobuf::int64 value);

  // optional int64 sa10 = 59;
  bool has_sa10() const;
  void clear_sa10();
  static const int kSa10FieldNumber = 59;
  ::google::protobuf::int64 sa10() const;
  void set_sa10(::google::protobuf::int64 value);

  // optional int64 upperlimit_price = 60;
  bool has_upperlimit_price() const;
  void clear_upperlimit_price();
  static const int kUpperlimitPriceFieldNumber = 60;
  ::google::protobuf::int64 upperlimit_price() const;
  void set_upperlimit_price(::google::protobuf::int64 value);

  // optional int64 lowerlimit_price = 61;
  bool has_lowerlimit_price() const;
  void clear_lowerlimit_price();
  static const int kLowerlimitPriceFieldNumber = 61;
  ::google::protobuf::int64 lowerlimit_price() const;
  void set_lowerlimit_price(::google::protobuf::int64 value);

  // optional int64 market = 62;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 62;
  ::google::protobuf::int64 market() const;
  void set_market(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:quotation.Stock)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_trading_day();
  void clear_has_trading_day();
  void set_has_stamp();
  void clear_has_stamp();
  void set_has_new_price();
  void clear_has_new_price();
  void set_has_new_volume();
  void clear_has_new_volume();
  void set_has_sum_volume();
  void clear_has_sum_volume();
  void set_has_sum_amount();
  void clear_has_sum_amount();
  void set_has_code();
  void clear_has_code();
  void set_has_name();
  void clear_has_name();
  void set_has_bp1();
  void clear_has_bp1();
  void set_has_bp2();
  void clear_has_bp2();
  void set_has_bp3();
  void clear_has_bp3();
  void set_has_bp4();
  void clear_has_bp4();
  void set_has_bp5();
  void clear_has_bp5();
  void set_has_ba1();
  void clear_has_ba1();
  void set_has_ba2();
  void clear_has_ba2();
  void set_has_ba3();
  void clear_has_ba3();
  void set_has_ba4();
  void clear_has_ba4();
  void set_has_ba5();
  void clear_has_ba5();
  void set_has_sp1();
  void clear_has_sp1();
  void set_has_sp2();
  void clear_has_sp2();
  void set_has_sp3();
  void clear_has_sp3();
  void set_has_sp4();
  void clear_has_sp4();
  void set_has_sp5();
  void clear_has_sp5();
  void set_has_sa1();
  void clear_has_sa1();
  void set_has_sa2();
  void clear_has_sa2();
  void set_has_sa3();
  void clear_has_sa3();
  void set_has_sa4();
  void clear_has_sa4();
  void set_has_sa5();
  void clear_has_sa5();
  void set_has_status();
  void clear_has_status();
  void set_has_preclose();
  void clear_has_preclose();
  void set_has_open();
  void clear_has_open();
  void set_has_high();
  void clear_has_high();
  void set_has_low();
  void clear_has_low();
  void set_has_iopv();
  void clear_has_iopv();
  void set_has_bp1_ajust();
  void clear_has_bp1_ajust();
  void set_has_sp1_ajust();
  void clear_has_sp1_ajust();
  void set_has_bought_volume();
  void clear_has_bought_volume();
  void set_has_sold_volume();
  void clear_has_sold_volume();
  void set_has_bp6();
  void clear_has_bp6();
  void set_has_bp7();
  void clear_has_bp7();
  void set_has_bp8();
  void clear_has_bp8();
  void set_has_bp9();
  void clear_has_bp9();
  void set_has_bp10();
  void clear_has_bp10();
  void set_has_ba6();
  void clear_has_ba6();
  void set_has_ba7();
  void clear_has_ba7();
  void set_has_ba8();
  void clear_has_ba8();
  void set_has_ba9();
  void clear_has_ba9();
  void set_has_ba10();
  void clear_has_ba10();
  void set_has_sp6();
  void clear_has_sp6();
  void set_has_sp7();
  void clear_has_sp7();
  void set_has_sp8();
  void clear_has_sp8();
  void set_has_sp9();
  void clear_has_sp9();
  void set_has_sp10();
  void clear_has_sp10();
  void set_has_sa6();
  void clear_has_sa6();
  void set_has_sa7();
  void clear_has_sa7();
  void set_has_sa8();
  void clear_has_sa8();
  void set_has_sa9();
  void clear_has_sa9();
  void set_has_sa10();
  void clear_has_sa10();
  void set_has_upperlimit_price();
  void clear_has_upperlimit_price();
  void set_has_lowerlimit_price();
  void clear_has_lowerlimit_price();
  void set_has_market();
  void clear_has_market();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_type_;
  private:
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 trading_day_;
  ::google::protobuf::uint32 stamp_;
  ::google::protobuf::int64 new_price_;
  ::google::protobuf::int64 new_volume_;
  ::google::protobuf::int64 sum_volume_;
  ::google::protobuf::int64 sum_amount_;
  ::google::protobuf::int64 bp1_;
  ::google::protobuf::int64 bp2_;
  ::google::protobuf::int64 bp3_;
  ::google::protobuf::int64 bp4_;
  ::google::protobuf::int64 bp5_;
  ::google::protobuf::int64 ba1_;
  ::google::protobuf::int64 ba2_;
  ::google::protobuf::int64 ba3_;
  ::google::protobuf::int64 ba4_;
  ::google::protobuf::int64 ba5_;
  ::google::protobuf::int64 sp1_;
  ::google::protobuf::int64 sp2_;
  ::google::protobuf::int64 sp3_;
  ::google::protobuf::int64 sp4_;
  ::google::protobuf::int64 sp5_;
  ::google::protobuf::int64 sa1_;
  ::google::protobuf::int64 sa2_;
  ::google::protobuf::int64 sa3_;
  ::google::protobuf::int64 sa4_;
  ::google::protobuf::int64 sa5_;
  ::google::protobuf::int64 status_;
  ::google::protobuf::int64 preclose_;
  ::google::protobuf::int64 open_;
  ::google::protobuf::int64 high_;
  ::google::protobuf::int64 low_;
  ::google::protobuf::int64 iopv_;
  ::google::protobuf::int64 bp1_ajust_;
  ::google::protobuf::int64 sp1_ajust_;
  ::google::protobuf::int64 bought_volume_;
  ::google::protobuf::int64 sold_volume_;
  ::google::protobuf::int64 bp6_;
  ::google::protobuf::int64 bp7_;
  ::google::protobuf::int64 bp8_;
  ::google::protobuf::int64 bp9_;
  ::google::protobuf::int64 bp10_;
  ::google::protobuf::int64 ba6_;
  ::google::protobuf::int64 ba7_;
  ::google::protobuf::int64 ba8_;
  ::google::protobuf::int64 ba9_;
  ::google::protobuf::int64 ba10_;
  ::google::protobuf::int64 sp6_;
  ::google::protobuf::int64 sp7_;
  ::google::protobuf::int64 sp8_;
  ::google::protobuf::int64 sp9_;
  ::google::protobuf::int64 sp10_;
  ::google::protobuf::int64 sa6_;
  ::google::protobuf::int64 sa7_;
  ::google::protobuf::int64 sa8_;
  ::google::protobuf::int64 sa9_;
  ::google::protobuf::int64 sa10_;
  ::google::protobuf::int64 upperlimit_price_;
  ::google::protobuf::int64 lowerlimit_price_;
  ::google::protobuf::int64 market_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protos_2fquotation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Handicap_Item : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quotation.Handicap.Item) */ {
 public:
  Handicap_Item();
  virtual ~Handicap_Item();

  Handicap_Item(const Handicap_Item& from);

  inline Handicap_Item& operator=(const Handicap_Item& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Handicap_Item(Handicap_Item&& from) noexcept
    : Handicap_Item() {
    *this = ::std::move(from);
  }

  inline Handicap_Item& operator=(Handicap_Item&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Handicap_Item& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Handicap_Item* internal_default_instance() {
    return reinterpret_cast<const Handicap_Item*>(
               &_Handicap_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Handicap_Item* other);
  friend void swap(Handicap_Item& a, Handicap_Item& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Handicap_Item* New() const final {
    return CreateMaybeMessage<Handicap_Item>(NULL);
  }

  Handicap_Item* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Handicap_Item>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Handicap_Item& from);
  void MergeFrom(const Handicap_Item& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Handicap_Item* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string order_no = 2;
  bool has_order_no() const;
  void clear_order_no();
  static const int kOrderNoFieldNumber = 2;
  const ::std::string& order_no() const;
  void set_order_no(const ::std::string& value);
  #if LANG_CXX11
  void set_order_no(::std::string&& value);
  #endif
  void set_order_no(const char* value);
  void set_order_no(const char* value, size_t size);
  ::std::string* mutable_order_no();
  ::std::string* release_order_no();
  void set_allocated_order_no(::std::string* order_no);

  // required int64 volume = 1;
  bool has_volume() const;
  void clear_volume();
  static const int kVolumeFieldNumber = 1;
  ::google::protobuf::int64 volume() const;
  void set_volume(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:quotation.Handicap.Item)
 private:
  void set_has_volume();
  void clear_has_volume();
  void set_has_order_no();
  void clear_has_order_no();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr order_no_;
  ::google::protobuf::int64 volume_;
  friend struct ::protobuf_protos_2fquotation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Handicap_Queue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quotation.Handicap.Queue) */ {
 public:
  Handicap_Queue();
  virtual ~Handicap_Queue();

  Handicap_Queue(const Handicap_Queue& from);

  inline Handicap_Queue& operator=(const Handicap_Queue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Handicap_Queue(Handicap_Queue&& from) noexcept
    : Handicap_Queue() {
    *this = ::std::move(from);
  }

  inline Handicap_Queue& operator=(Handicap_Queue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Handicap_Queue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Handicap_Queue* internal_default_instance() {
    return reinterpret_cast<const Handicap_Queue*>(
               &_Handicap_Queue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Handicap_Queue* other);
  friend void swap(Handicap_Queue& a, Handicap_Queue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Handicap_Queue* New() const final {
    return CreateMaybeMessage<Handicap_Queue>(NULL);
  }

  Handicap_Queue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Handicap_Queue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Handicap_Queue& from);
  void MergeFrom(const Handicap_Queue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Handicap_Queue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .quotation.Handicap.Item items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  ::quotation::Handicap_Item* mutable_items(int index);
  ::google::protobuf::RepeatedPtrField< ::quotation::Handicap_Item >*
      mutable_items();
  const ::quotation::Handicap_Item& items(int index) const;
  ::quotation::Handicap_Item* add_items();
  const ::google::protobuf::RepeatedPtrField< ::quotation::Handicap_Item >&
      items() const;

  // @@protoc_insertion_point(class_scope:quotation.Handicap.Queue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::quotation::Handicap_Item > items_;
  friend struct ::protobuf_protos_2fquotation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Handicap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quotation.Handicap) */ {
 public:
  Handicap();
  virtual ~Handicap();

  Handicap(const Handicap& from);

  inline Handicap& operator=(const Handicap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Handicap(Handicap&& from) noexcept
    : Handicap() {
    *this = ::std::move(from);
  }

  inline Handicap& operator=(Handicap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Handicap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Handicap* internal_default_instance() {
    return reinterpret_cast<const Handicap*>(
               &_Handicap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Handicap* other);
  friend void swap(Handicap& a, Handicap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Handicap* New() const final {
    return CreateMaybeMessage<Handicap>(NULL);
  }

  Handicap* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Handicap>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Handicap& from);
  void MergeFrom(const Handicap& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Handicap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Handicap_Item Item;
  typedef Handicap_Queue Queue;

  // accessors -------------------------------------------------------

  // repeated int64 bp = 18;
  int bp_size() const;
  void clear_bp();
  static const int kBpFieldNumber = 18;
  ::google::protobuf::int64 bp(int index) const;
  void set_bp(int index, ::google::protobuf::int64 value);
  void add_bp(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      bp() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_bp();

  // repeated int64 ba = 19;
  int ba_size() const;
  void clear_ba();
  static const int kBaFieldNumber = 19;
  ::google::protobuf::int64 ba(int index) const;
  void set_ba(int index, ::google::protobuf::int64 value);
  void add_ba(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      ba() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_ba();

  // repeated int64 sp = 20;
  int sp_size() const;
  void clear_sp();
  static const int kSpFieldNumber = 20;
  ::google::protobuf::int64 sp(int index) const;
  void set_sp(int index, ::google::protobuf::int64 value);
  void add_sp(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      sp() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_sp();

  // repeated int64 sa = 21;
  int sa_size() const;
  void clear_sa();
  static const int kSaFieldNumber = 21;
  ::google::protobuf::int64 sa(int index) const;
  void set_sa(int index, ::google::protobuf::int64 value);
  void add_sa(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      sa() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_sa();

  // repeated .quotation.Handicap.Queue ask = 22;
  int ask_size() const;
  void clear_ask();
  static const int kAskFieldNumber = 22;
  ::quotation::Handicap_Queue* mutable_ask(int index);
  ::google::protobuf::RepeatedPtrField< ::quotation::Handicap_Queue >*
      mutable_ask();
  const ::quotation::Handicap_Queue& ask(int index) const;
  ::quotation::Handicap_Queue* add_ask();
  const ::google::protobuf::RepeatedPtrField< ::quotation::Handicap_Queue >&
      ask() const;

  // repeated .quotation.Handicap.Queue bid = 23;
  int bid_size() const;
  void clear_bid();
  static const int kBidFieldNumber = 23;
  ::quotation::Handicap_Queue* mutable_bid(int index);
  ::google::protobuf::RepeatedPtrField< ::quotation::Handicap_Queue >*
      mutable_bid();
  const ::quotation::Handicap_Queue& bid(int index) const;
  ::quotation::Handicap_Queue* add_bid();
  const ::google::protobuf::RepeatedPtrField< ::quotation::Handicap_Queue >&
      bid() const;

  // optional string type = 1 [default = "H"];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required string code = 4;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 4;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string name = 5;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 5;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint32 trading_day = 2;
  bool has_trading_day() const;
  void clear_trading_day();
  static const int kTradingDayFieldNumber = 2;
  ::google::protobuf::uint32 trading_day() const;
  void set_trading_day(::google::protobuf::uint32 value);

  // required uint32 stamp = 3;
  bool has_stamp() const;
  void clear_stamp();
  static const int kStampFieldNumber = 3;
  ::google::protobuf::uint32 stamp() const;
  void set_stamp(::google::protobuf::uint32 value);

  // optional int64 market = 6;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 6;
  ::google::protobuf::int64 market() const;
  void set_market(::google::protobuf::int64 value);

  // optional int64 status = 7;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 7;
  ::google::protobuf::int64 status() const;
  void set_status(::google::protobuf::int64 value);

  // optional int64 upperlimit_price = 8;
  bool has_upperlimit_price() const;
  void clear_upperlimit_price();
  static const int kUpperlimitPriceFieldNumber = 8;
  ::google::protobuf::int64 upperlimit_price() const;
  void set_upperlimit_price(::google::protobuf::int64 value);

  // optional int64 lowerlimit_price = 9;
  bool has_lowerlimit_price() const;
  void clear_lowerlimit_price();
  static const int kLowerlimitPriceFieldNumber = 9;
  ::google::protobuf::int64 lowerlimit_price() const;
  void set_lowerlimit_price(::google::protobuf::int64 value);

  // optional int64 preclose = 10;
  bool has_preclose() const;
  void clear_preclose();
  static const int kPrecloseFieldNumber = 10;
  ::google::protobuf::int64 preclose() const;
  void set_preclose(::google::protobuf::int64 value);

  // optional int64 open = 11;
  bool has_open() const;
  void clear_open();
  static const int kOpenFieldNumber = 11;
  ::google::protobuf::int64 open() const;
  void set_open(::google::protobuf::int64 value);

  // optional int64 high = 12;
  bool has_high() const;
  void clear_high();
  static const int kHighFieldNumber = 12;
  ::google::protobuf::int64 high() const;
  void set_high(::google::protobuf::int64 value);

  // optional int64 low = 13;
  bool has_low() const;
  void clear_low();
  static const int kLowFieldNumber = 13;
  ::google::protobuf::int64 low() const;
  void set_low(::google::protobuf::int64 value);

  // optional int64 new_price = 14;
  bool has_new_price() const;
  void clear_new_price();
  static const int kNewPriceFieldNumber = 14;
  ::google::protobuf::int64 new_price() const;
  void set_new_price(::google::protobuf::int64 value);

  // optional int64 new_volume = 15;
  bool has_new_volume() const;
  void clear_new_volume();
  static const int kNewVolumeFieldNumber = 15;
  ::google::protobuf::int64 new_volume() const;
  void set_new_volume(::google::protobuf::int64 value);

  // optional int64 sum_volume = 16;
  bool has_sum_volume() const;
  void clear_sum_volume();
  static const int kSumVolumeFieldNumber = 16;
  ::google::protobuf::int64 sum_volume() const;
  void set_sum_volume(::google::protobuf::int64 value);

  // optional int64 sum_amount = 17;
  bool has_sum_amount() const;
  void clear_sum_amount();
  static const int kSumAmountFieldNumber = 17;
  ::google::protobuf::int64 sum_amount() const;
  void set_sum_amount(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:quotation.Handicap)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_trading_day();
  void clear_has_trading_day();
  void set_has_stamp();
  void clear_has_stamp();
  void set_has_code();
  void clear_has_code();
  void set_has_name();
  void clear_has_name();
  void set_has_market();
  void clear_has_market();
  void set_has_status();
  void clear_has_status();
  void set_has_upperlimit_price();
  void clear_has_upperlimit_price();
  void set_has_lowerlimit_price();
  void clear_has_lowerlimit_price();
  void set_has_preclose();
  void clear_has_preclose();
  void set_has_open();
  void clear_has_open();
  void set_has_high();
  void clear_has_high();
  void set_has_low();
  void clear_has_low();
  void set_has_new_price();
  void clear_has_new_price();
  void set_has_new_volume();
  void clear_has_new_volume();
  void set_has_sum_volume();
  void clear_has_sum_volume();
  void set_has_sum_amount();
  void clear_has_sum_amount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > bp_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > ba_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > sp_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > sa_;
  ::google::protobuf::RepeatedPtrField< ::quotation::Handicap_Queue > ask_;
  ::google::protobuf::RepeatedPtrField< ::quotation::Handicap_Queue > bid_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_type_;
  private:
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 trading_day_;
  ::google::protobuf::uint32 stamp_;
  ::google::protobuf::int64 market_;
  ::google::protobuf::int64 status_;
  ::google::protobuf::int64 upperlimit_price_;
  ::google::protobuf::int64 lowerlimit_price_;
  ::google::protobuf::int64 preclose_;
  ::google::protobuf::int64 open_;
  ::google::protobuf::int64 high_;
  ::google::protobuf::int64 low_;
  ::google::protobuf::int64 new_price_;
  ::google::protobuf::int64 new_volume_;
  ::google::protobuf::int64 sum_volume_;
  ::google::protobuf::int64 sum_amount_;
  friend struct ::protobuf_protos_2fquotation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Future : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quotation.Future) */ {
 public:
  Future();
  virtual ~Future();

  Future(const Future& from);

  inline Future& operator=(const Future& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Future(Future&& from) noexcept
    : Future() {
    *this = ::std::move(from);
  }

  inline Future& operator=(Future&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Future& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Future* internal_default_instance() {
    return reinterpret_cast<const Future*>(
               &_Future_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Future* other);
  friend void swap(Future& a, Future& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Future* New() const final {
    return CreateMaybeMessage<Future>(NULL);
  }

  Future* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Future>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Future& from);
  void MergeFrom(const Future& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Future* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1 [default = "F"];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required string code = 4;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 4;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string name = 5;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 5;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string exchange_id = 32;
  bool has_exchange_id() const;
  void clear_exchange_id();
  static const int kExchangeIdFieldNumber = 32;
  const ::std::string& exchange_id() const;
  void set_exchange_id(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange_id(::std::string&& value);
  #endif
  void set_exchange_id(const char* value);
  void set_exchange_id(const char* value, size_t size);
  ::std::string* mutable_exchange_id();
  ::std::string* release_exchange_id();
  void set_allocated_exchange_id(::std::string* exchange_id);

  // optional string update_time = 43;
  bool has_update_time() const;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 43;
  const ::std::string& update_time() const;
  void set_update_time(const ::std::string& value);
  #if LANG_CXX11
  void set_update_time(::std::string&& value);
  #endif
  void set_update_time(const char* value);
  void set_update_time(const char* value, size_t size);
  ::std::string* mutable_update_time();
  ::std::string* release_update_time();
  void set_allocated_update_time(::std::string* update_time);

  // optional uint32 trading_day = 2;
  bool has_trading_day() const;
  void clear_trading_day();
  static const int kTradingDayFieldNumber = 2;
  ::google::protobuf::uint32 trading_day() const;
  void set_trading_day(::google::protobuf::uint32 value);

  // required uint32 stamp = 3;
  bool has_stamp() const;
  void clear_stamp();
  static const int kStampFieldNumber = 3;
  ::google::protobuf::uint32 stamp() const;
  void set_stamp(::google::protobuf::uint32 value);

  // required int64 new_price = 6;
  bool has_new_price() const;
  void clear_new_price();
  static const int kNewPriceFieldNumber = 6;
  ::google::protobuf::int64 new_price() const;
  void set_new_price(::google::protobuf::int64 value);

  // required uint64 volume = 7;
  bool has_volume() const;
  void clear_volume();
  static const int kVolumeFieldNumber = 7;
  ::google::protobuf::uint64 volume() const;
  void set_volume(::google::protobuf::uint64 value);

  // required int64 match_amt = 8;
  bool has_match_amt() const;
  void clear_match_amt();
  static const int kMatchAmtFieldNumber = 8;
  ::google::protobuf::int64 match_amt() const;
  void set_match_amt(::google::protobuf::int64 value);

  // optional int64 new_volume = 9;
  bool has_new_volume() const;
  void clear_new_volume();
  static const int kNewVolumeFieldNumber = 9;
  ::google::protobuf::int64 new_volume() const;
  void set_new_volume(::google::protobuf::int64 value);

  // optional int64 total_position = 10;
  bool has_total_position() const;
  void clear_total_position();
  static const int kTotalPositionFieldNumber = 10;
  ::google::protobuf::int64 total_position() const;
  void set_total_position(::google::protobuf::int64 value);

  // optional int64 position_change = 11;
  bool has_position_change() const;
  void clear_position_change();
  static const int kPositionChangeFieldNumber = 11;
  ::google::protobuf::int64 position_change() const;
  void set_position_change(::google::protobuf::int64 value);

  // required int64 bp1 = 12;
  bool has_bp1() const;
  void clear_bp1();
  static const int kBp1FieldNumber = 12;
  ::google::protobuf::int64 bp1() const;
  void set_bp1(::google::protobuf::int64 value);

  // optional int64 bp2 = 13;
  bool has_bp2() const;
  void clear_bp2();
  static const int kBp2FieldNumber = 13;
  ::google::protobuf::int64 bp2() const;
  void set_bp2(::google::protobuf::int64 value);

  // optional int64 bp3 = 14;
  bool has_bp3() const;
  void clear_bp3();
  static const int kBp3FieldNumber = 14;
  ::google::protobuf::int64 bp3() const;
  void set_bp3(::google::protobuf::int64 value);

  // optional int64 bp4 = 15;
  bool has_bp4() const;
  void clear_bp4();
  static const int kBp4FieldNumber = 15;
  ::google::protobuf::int64 bp4() const;
  void set_bp4(::google::protobuf::int64 value);

  // optional int64 bp5 = 16;
  bool has_bp5() const;
  void clear_bp5();
  static const int kBp5FieldNumber = 16;
  ::google::protobuf::int64 bp5() const;
  void set_bp5(::google::protobuf::int64 value);

  // required int64 ba1 = 17;
  bool has_ba1() const;
  void clear_ba1();
  static const int kBa1FieldNumber = 17;
  ::google::protobuf::int64 ba1() const;
  void set_ba1(::google::protobuf::int64 value);

  // optional int64 ba2 = 18;
  bool has_ba2() const;
  void clear_ba2();
  static const int kBa2FieldNumber = 18;
  ::google::protobuf::int64 ba2() const;
  void set_ba2(::google::protobuf::int64 value);

  // optional int64 ba3 = 19;
  bool has_ba3() const;
  void clear_ba3();
  static const int kBa3FieldNumber = 19;
  ::google::protobuf::int64 ba3() const;
  void set_ba3(::google::protobuf::int64 value);

  // optional int64 ba4 = 20;
  bool has_ba4() const;
  void clear_ba4();
  static const int kBa4FieldNumber = 20;
  ::google::protobuf::int64 ba4() const;
  void set_ba4(::google::protobuf::int64 value);

  // optional int64 ba5 = 21;
  bool has_ba5() const;
  void clear_ba5();
  static const int kBa5FieldNumber = 21;
  ::google::protobuf::int64 ba5() const;
  void set_ba5(::google::protobuf::int64 value);

  // required int64 sp1 = 22;
  bool has_sp1() const;
  void clear_sp1();
  static const int kSp1FieldNumber = 22;
  ::google::protobuf::int64 sp1() const;
  void set_sp1(::google::protobuf::int64 value);

  // optional int64 sp2 = 23;
  bool has_sp2() const;
  void clear_sp2();
  static const int kSp2FieldNumber = 23;
  ::google::protobuf::int64 sp2() const;
  void set_sp2(::google::protobuf::int64 value);

  // optional int64 sp3 = 24;
  bool has_sp3() const;
  void clear_sp3();
  static const int kSp3FieldNumber = 24;
  ::google::protobuf::int64 sp3() const;
  void set_sp3(::google::protobuf::int64 value);

  // optional int64 sp4 = 25;
  bool has_sp4() const;
  void clear_sp4();
  static const int kSp4FieldNumber = 25;
  ::google::protobuf::int64 sp4() const;
  void set_sp4(::google::protobuf::int64 value);

  // optional int64 sp5 = 26;
  bool has_sp5() const;
  void clear_sp5();
  static const int kSp5FieldNumber = 26;
  ::google::protobuf::int64 sp5() const;
  void set_sp5(::google::protobuf::int64 value);

  // required int64 sa1 = 27;
  bool has_sa1() const;
  void clear_sa1();
  static const int kSa1FieldNumber = 27;
  ::google::protobuf::int64 sa1() const;
  void set_sa1(::google::protobuf::int64 value);

  // optional int64 sa2 = 28;
  bool has_sa2() const;
  void clear_sa2();
  static const int kSa2FieldNumber = 28;
  ::google::protobuf::int64 sa2() const;
  void set_sa2(::google::protobuf::int64 value);

  // optional int64 sa3 = 29;
  bool has_sa3() const;
  void clear_sa3();
  static const int kSa3FieldNumber = 29;
  ::google::protobuf::int64 sa3() const;
  void set_sa3(::google::protobuf::int64 value);

  // optional int64 sa4 = 30;
  bool has_sa4() const;
  void clear_sa4();
  static const int kSa4FieldNumber = 30;
  ::google::protobuf::int64 sa4() const;
  void set_sa4(::google::protobuf::int64 value);

  // optional int64 sa5 = 31;
  bool has_sa5() const;
  void clear_sa5();
  static const int kSa5FieldNumber = 31;
  ::google::protobuf::int64 sa5() const;
  void set_sa5(::google::protobuf::int64 value);

  // optional int64 presettlement_price = 33;
  bool has_presettlement_price() const;
  void clear_presettlement_price();
  static const int kPresettlementPriceFieldNumber = 33;
  ::google::protobuf::int64 presettlement_price() const;
  void set_presettlement_price(::google::protobuf::int64 value);

  // optional int64 preclose = 34;
  bool has_preclose() const;
  void clear_preclose();
  static const int kPrecloseFieldNumber = 34;
  ::google::protobuf::int64 preclose() const;
  void set_preclose(::google::protobuf::int64 value);

  // optional int64 preposition = 35;
  bool has_preposition() const;
  void clear_preposition();
  static const int kPrepositionFieldNumber = 35;
  ::google::protobuf::int64 preposition() const;
  void set_preposition(::google::protobuf::int64 value);

  // optional int64 open_price = 36;
  bool has_open_price() const;
  void clear_open_price();
  static const int kOpenPriceFieldNumber = 36;
  ::google::protobuf::int64 open_price() const;
  void set_open_price(::google::protobuf::int64 value);

  // optional int64 highest_price = 37;
  bool has_highest_price() const;
  void clear_highest_price();
  static const int kHighestPriceFieldNumber = 37;
  ::google::protobuf::int64 highest_price() const;
  void set_highest_price(::google::protobuf::int64 value);

  // optional int64 lowest_price = 38;
  bool has_lowest_price() const;
  void clear_lowest_price();
  static const int kLowestPriceFieldNumber = 38;
  ::google::protobuf::int64 lowest_price() const;
  void set_lowest_price(::google::protobuf::int64 value);

  // optional int64 close_price = 39;
  bool has_close_price() const;
  void clear_close_price();
  static const int kClosePriceFieldNumber = 39;
  ::google::protobuf::int64 close_price() const;
  void set_close_price(::google::protobuf::int64 value);

  // optional int64 settlement_price = 40;
  bool has_settlement_price() const;
  void clear_settlement_price();
  static const int kSettlementPriceFieldNumber = 40;
  ::google::protobuf::int64 settlement_price() const;
  void set_settlement_price(::google::protobuf::int64 value);

  // optional int64 upperlimit_price = 41;
  bool has_upperlimit_price() const;
  void clear_upperlimit_price();
  static const int kUpperlimitPriceFieldNumber = 41;
  ::google::protobuf::int64 upperlimit_price() const;
  void set_upperlimit_price(::google::protobuf::int64 value);

  // optional int64 lowerlimit_price = 42;
  bool has_lowerlimit_price() const;
  void clear_lowerlimit_price();
  static const int kLowerlimitPriceFieldNumber = 42;
  ::google::protobuf::int64 lowerlimit_price() const;
  void set_lowerlimit_price(::google::protobuf::int64 value);

  // optional int64 average_price = 45;
  bool has_average_price() const;
  void clear_average_price();
  static const int kAveragePriceFieldNumber = 45;
  ::google::protobuf::int64 average_price() const;
  void set_average_price(::google::protobuf::int64 value);

  // optional int64 open_interest = 46;
  bool has_open_interest() const;
  void clear_open_interest();
  static const int kOpenInterestFieldNumber = 46;
  ::google::protobuf::int64 open_interest() const;
  void set_open_interest(::google::protobuf::int64 value);

  // optional int64 bought_volume = 47;
  bool has_bought_volume() const;
  void clear_bought_volume();
  static const int kBoughtVolumeFieldNumber = 47;
  ::google::protobuf::int64 bought_volume() const;
  void set_bought_volume(::google::protobuf::int64 value);

  // optional int64 sold_volume = 48;
  bool has_sold_volume() const;
  void clear_sold_volume();
  static const int kSoldVolumeFieldNumber = 48;
  ::google::protobuf::int64 sold_volume() const;
  void set_sold_volume(::google::protobuf::int64 value);

  // optional int64 market = 49;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 49;
  ::google::protobuf::int64 market() const;
  void set_market(::google::protobuf::int64 value);

  // optional uint32 update_millisec = 44;
  bool has_update_millisec() const;
  void clear_update_millisec();
  static const int kUpdateMillisecFieldNumber = 44;
  ::google::protobuf::uint32 update_millisec() const;
  void set_update_millisec(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:quotation.Future)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_trading_day();
  void clear_has_trading_day();
  void set_has_stamp();
  void clear_has_stamp();
  void set_has_code();
  void clear_has_code();
  void set_has_name();
  void clear_has_name();
  void set_has_new_price();
  void clear_has_new_price();
  void set_has_volume();
  void clear_has_volume();
  void set_has_match_amt();
  void clear_has_match_amt();
  void set_has_new_volume();
  void clear_has_new_volume();
  void set_has_total_position();
  void clear_has_total_position();
  void set_has_position_change();
  void clear_has_position_change();
  void set_has_bp1();
  void clear_has_bp1();
  void set_has_bp2();
  void clear_has_bp2();
  void set_has_bp3();
  void clear_has_bp3();
  void set_has_bp4();
  void clear_has_bp4();
  void set_has_bp5();
  void clear_has_bp5();
  void set_has_ba1();
  void clear_has_ba1();
  void set_has_ba2();
  void clear_has_ba2();
  void set_has_ba3();
  void clear_has_ba3();
  void set_has_ba4();
  void clear_has_ba4();
  void set_has_ba5();
  void clear_has_ba5();
  void set_has_sp1();
  void clear_has_sp1();
  void set_has_sp2();
  void clear_has_sp2();
  void set_has_sp3();
  void clear_has_sp3();
  void set_has_sp4();
  void clear_has_sp4();
  void set_has_sp5();
  void clear_has_sp5();
  void set_has_sa1();
  void clear_has_sa1();
  void set_has_sa2();
  void clear_has_sa2();
  void set_has_sa3();
  void clear_has_sa3();
  void set_has_sa4();
  void clear_has_sa4();
  void set_has_sa5();
  void clear_has_sa5();
  void set_has_exchange_id();
  void clear_has_exchange_id();
  void set_has_presettlement_price();
  void clear_has_presettlement_price();
  void set_has_preclose();
  void clear_has_preclose();
  void set_has_preposition();
  void clear_has_preposition();
  void set_has_open_price();
  void clear_has_open_price();
  void set_has_highest_price();
  void clear_has_highest_price();
  void set_has_lowest_price();
  void clear_has_lowest_price();
  void set_has_close_price();
  void clear_has_close_price();
  void set_has_settlement_price();
  void clear_has_settlement_price();
  void set_has_upperlimit_price();
  void clear_has_upperlimit_price();
  void set_has_lowerlimit_price();
  void clear_has_lowerlimit_price();
  void set_has_update_time();
  void clear_has_update_time();
  void set_has_update_millisec();
  void clear_has_update_millisec();
  void set_has_average_price();
  void clear_has_average_price();
  void set_has_open_interest();
  void clear_has_open_interest();
  void set_has_bought_volume();
  void clear_has_bought_volume();
  void set_has_sold_volume();
  void clear_has_sold_volume();
  void set_has_market();
  void clear_has_market();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_type_;
  private:
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr exchange_id_;
  ::google::protobuf::internal::ArenaStringPtr update_time_;
  ::google::protobuf::uint32 trading_day_;
  ::google::protobuf::uint32 stamp_;
  ::google::protobuf::int64 new_price_;
  ::google::protobuf::uint64 volume_;
  ::google::protobuf::int64 match_amt_;
  ::google::protobuf::int64 new_volume_;
  ::google::protobuf::int64 total_position_;
  ::google::protobuf::int64 position_change_;
  ::google::protobuf::int64 bp1_;
  ::google::protobuf::int64 bp2_;
  ::google::protobuf::int64 bp3_;
  ::google::protobuf::int64 bp4_;
  ::google::protobuf::int64 bp5_;
  ::google::protobuf::int64 ba1_;
  ::google::protobuf::int64 ba2_;
  ::google::protobuf::int64 ba3_;
  ::google::protobuf::int64 ba4_;
  ::google::protobuf::int64 ba5_;
  ::google::protobuf::int64 sp1_;
  ::google::protobuf::int64 sp2_;
  ::google::protobuf::int64 sp3_;
  ::google::protobuf::int64 sp4_;
  ::google::protobuf::int64 sp5_;
  ::google::protobuf::int64 sa1_;
  ::google::protobuf::int64 sa2_;
  ::google::protobuf::int64 sa3_;
  ::google::protobuf::int64 sa4_;
  ::google::protobuf::int64 sa5_;
  ::google::protobuf::int64 presettlement_price_;
  ::google::protobuf::int64 preclose_;
  ::google::protobuf::int64 preposition_;
  ::google::protobuf::int64 open_price_;
  ::google::protobuf::int64 highest_price_;
  ::google::protobuf::int64 lowest_price_;
  ::google::protobuf::int64 close_price_;
  ::google::protobuf::int64 settlement_price_;
  ::google::protobuf::int64 upperlimit_price_;
  ::google::protobuf::int64 lowerlimit_price_;
  ::google::protobuf::int64 average_price_;
  ::google::protobuf::int64 open_interest_;
  ::google::protobuf::int64 bought_volume_;
  ::google::protobuf::int64 sold_volume_;
  ::google::protobuf::int64 market_;
  ::google::protobuf::uint32 update_millisec_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protos_2fquotation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Option : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quotation.Option) */ {
 public:
  Option();
  virtual ~Option();

  Option(const Option& from);

  inline Option& operator=(const Option& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Option(Option&& from) noexcept
    : Option() {
    *this = ::std::move(from);
  }

  inline Option& operator=(Option&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Option& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Option* internal_default_instance() {
    return reinterpret_cast<const Option*>(
               &_Option_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Option* other);
  friend void swap(Option& a, Option& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Option* New() const final {
    return CreateMaybeMessage<Option>(NULL);
  }

  Option* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Option>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Option& from);
  void MergeFrom(const Option& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Option* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1 [default = "O"];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required string code = 4;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 4;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string trade_code = 5;
  bool has_trade_code() const;
  void clear_trade_code();
  static const int kTradeCodeFieldNumber = 5;
  const ::std::string& trade_code() const;
  void set_trade_code(const ::std::string& value);
  #if LANG_CXX11
  void set_trade_code(::std::string&& value);
  #endif
  void set_trade_code(const char* value);
  void set_trade_code(const char* value, size_t size);
  ::std::string* mutable_trade_code();
  ::std::string* release_trade_code();
  void set_allocated_trade_code(::std::string* trade_code);

  // optional string name = 6;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 6;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string underlying_code = 13;
  bool has_underlying_code() const;
  void clear_underlying_code();
  static const int kUnderlyingCodeFieldNumber = 13;
  const ::std::string& underlying_code() const;
  void set_underlying_code(const ::std::string& value);
  #if LANG_CXX11
  void set_underlying_code(::std::string&& value);
  #endif
  void set_underlying_code(const char* value);
  void set_underlying_code(const char* value, size_t size);
  ::std::string* mutable_underlying_code();
  ::std::string* release_underlying_code();
  void set_allocated_underlying_code(::std::string* underlying_code);

  // optional uint32 trading_day = 2;
  bool has_trading_day() const;
  void clear_trading_day();
  static const int kTradingDayFieldNumber = 2;
  ::google::protobuf::uint32 trading_day() const;
  void set_trading_day(::google::protobuf::uint32 value);

  // required uint32 stamp = 3;
  bool has_stamp() const;
  void clear_stamp();
  static const int kStampFieldNumber = 3;
  ::google::protobuf::uint32 stamp() const;
  void set_stamp(::google::protobuf::uint32 value);

  // optional int64 market = 7;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 7;
  ::google::protobuf::int64 market() const;
  void set_market(::google::protobuf::int64 value);

  // optional uint32 start_date = 8;
  bool has_start_date() const;
  void clear_start_date();
  static const int kStartDateFieldNumber = 8;
  ::google::protobuf::uint32 start_date() const;
  void set_start_date(::google::protobuf::uint32 value);

  // optional uint32 end_date = 9;
  bool has_end_date() const;
  void clear_end_date();
  static const int kEndDateFieldNumber = 9;
  ::google::protobuf::uint32 end_date() const;
  void set_end_date(::google::protobuf::uint32 value);

  // optional uint32 expire_date = 10;
  bool has_expire_date() const;
  void clear_expire_date();
  static const int kExpireDateFieldNumber = 10;
  ::google::protobuf::uint32 expire_date() const;
  void set_expire_date(::google::protobuf::uint32 value);

  // optional uint32 exercise_date = 11;
  bool has_exercise_date() const;
  void clear_exercise_date();
  static const int kExerciseDateFieldNumber = 11;
  ::google::protobuf::uint32 exercise_date() const;
  void set_exercise_date(::google::protobuf::uint32 value);

  // optional int64 exercise_price = 12;
  bool has_exercise_price() const;
  void clear_exercise_price();
  static const int kExercisePriceFieldNumber = 12;
  ::google::protobuf::int64 exercise_price() const;
  void set_exercise_price(::google::protobuf::int64 value);

  // optional int32 underlying_type = 14;
  bool has_underlying_type() const;
  void clear_underlying_type();
  static const int kUnderlyingTypeFieldNumber = 14;
  ::google::protobuf::int32 underlying_type() const;
  void set_underlying_type(::google::protobuf::int32 value);

  // optional int32 cp_flag = 15;
  bool has_cp_flag() const;
  void clear_cp_flag();
  static const int kCpFlagFieldNumber = 15;
  ::google::protobuf::int32 cp_flag() const;
  void set_cp_flag(::google::protobuf::int32 value);

  // optional int32 option_type = 16;
  bool has_option_type() const;
  void clear_option_type();
  static const int kOptionTypeFieldNumber = 16;
  ::google::protobuf::int32 option_type() const;
  void set_option_type(::google::protobuf::int32 value);

  // optional int32 preformance_type = 17;
  bool has_preformance_type() const;
  void clear_preformance_type();
  static const int kPreformanceTypeFieldNumber = 17;
  ::google::protobuf::int32 preformance_type() const;
  void set_preformance_type(::google::protobuf::int32 value);

  // optional int64 contract_unit = 19;
  bool has_contract_unit() const;
  void clear_contract_unit();
  static const int kContractUnitFieldNumber = 19;
  ::google::protobuf::int64 contract_unit() const;
  void set_contract_unit(::google::protobuf::int64 value);

  // optional int32 price_limit_type = 18;
  bool has_price_limit_type() const;
  void clear_price_limit_type();
  static const int kPriceLimitTypeFieldNumber = 18;
  ::google::protobuf::int32 price_limit_type() const;
  void set_price_limit_type(::google::protobuf::int32 value);

  // optional uint32 exchange_time = 20;
  bool has_exchange_time() const;
  void clear_exchange_time();
  static const int kExchangeTimeFieldNumber = 20;
  ::google::protobuf::uint32 exchange_time() const;
  void set_exchange_time(::google::protobuf::uint32 value);

  // optional int64 pre_open_interest = 22;
  bool has_pre_open_interest() const;
  void clear_pre_open_interest();
  static const int kPreOpenInterestFieldNumber = 22;
  ::google::protobuf::int64 pre_open_interest() const;
  void set_pre_open_interest(::google::protobuf::int64 value);

  // optional int64 pre_close = 23;
  bool has_pre_close() const;
  void clear_pre_close();
  static const int kPreCloseFieldNumber = 23;
  ::google::protobuf::int64 pre_close() const;
  void set_pre_close(::google::protobuf::int64 value);

  // optional int64 pre_settle = 24;
  bool has_pre_settle() const;
  void clear_pre_settle();
  static const int kPreSettleFieldNumber = 24;
  ::google::protobuf::int64 pre_settle() const;
  void set_pre_settle(::google::protobuf::int64 value);

  // optional int64 open = 25;
  bool has_open() const;
  void clear_open();
  static const int kOpenFieldNumber = 25;
  ::google::protobuf::int64 open() const;
  void set_open(::google::protobuf::int64 value);

  // optional int64 high = 26;
  bool has_high() const;
  void clear_high();
  static const int kHighFieldNumber = 26;
  ::google::protobuf::int64 high() const;
  void set_high(::google::protobuf::int64 value);

  // optional int64 low = 27;
  bool has_low() const;
  void clear_low();
  static const int kLowFieldNumber = 27;
  ::google::protobuf::int64 low() const;
  void set_low(::google::protobuf::int64 value);

  // optional int64 latest = 28;
  bool has_latest() const;
  void clear_latest();
  static const int kLatestFieldNumber = 28;
  ::google::protobuf::int64 latest() const;
  void set_latest(::google::protobuf::int64 value);

  // optional int64 volume = 29;
  bool has_volume() const;
  void clear_volume();
  static const int kVolumeFieldNumber = 29;
  ::google::protobuf::int64 volume() const;
  void set_volume(::google::protobuf::int64 value);

  // optional int64 amount = 30;
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 30;
  ::google::protobuf::int64 amount() const;
  void set_amount(::google::protobuf::int64 value);

  // optional int64 open_interest = 31;
  bool has_open_interest() const;
  void clear_open_interest();
  static const int kOpenInterestFieldNumber = 31;
  ::google::protobuf::int64 open_interest() const;
  void set_open_interest(::google::protobuf::int64 value);

  // optional int64 close = 32;
  bool has_close() const;
  void clear_close();
  static const int kCloseFieldNumber = 32;
  ::google::protobuf::int64 close() const;
  void set_close(::google::protobuf::int64 value);

  // optional int64 settle = 33;
  bool has_settle() const;
  void clear_settle();
  static const int kSettleFieldNumber = 33;
  ::google::protobuf::int64 settle() const;
  void set_settle(::google::protobuf::int64 value);

  // optional int64 high_limit = 34;
  bool has_high_limit() const;
  void clear_high_limit();
  static const int kHighLimitFieldNumber = 34;
  ::google::protobuf::int64 high_limit() const;
  void set_high_limit(::google::protobuf::int64 value);

  // optional int64 low_limit = 35;
  bool has_low_limit() const;
  void clear_low_limit();
  static const int kLowLimitFieldNumber = 35;
  ::google::protobuf::int64 low_limit() const;
  void set_low_limit(::google::protobuf::int64 value);

  // optional int64 pre_delta = 36;
  bool has_pre_delta() const;
  void clear_pre_delta();
  static const int kPreDeltaFieldNumber = 36;
  ::google::protobuf::int64 pre_delta() const;
  void set_pre_delta(::google::protobuf::int64 value);

  // optional int64 delta = 37;
  bool has_delta() const;
  void clear_delta();
  static const int kDeltaFieldNumber = 37;
  ::google::protobuf::int64 delta() const;
  void set_delta(::google::protobuf::int64 value);

  // optional int64 bp1 = 38;
  bool has_bp1() const;
  void clear_bp1();
  static const int kBp1FieldNumber = 38;
  ::google::protobuf::int64 bp1() const;
  void set_bp1(::google::protobuf::int64 value);

  // optional int64 bp2 = 39;
  bool has_bp2() const;
  void clear_bp2();
  static const int kBp2FieldNumber = 39;
  ::google::protobuf::int64 bp2() const;
  void set_bp2(::google::protobuf::int64 value);

  // optional int64 bp3 = 40;
  bool has_bp3() const;
  void clear_bp3();
  static const int kBp3FieldNumber = 40;
  ::google::protobuf::int64 bp3() const;
  void set_bp3(::google::protobuf::int64 value);

  // optional int64 bp4 = 41;
  bool has_bp4() const;
  void clear_bp4();
  static const int kBp4FieldNumber = 41;
  ::google::protobuf::int64 bp4() const;
  void set_bp4(::google::protobuf::int64 value);

  // optional int64 bp5 = 42;
  bool has_bp5() const;
  void clear_bp5();
  static const int kBp5FieldNumber = 42;
  ::google::protobuf::int64 bp5() const;
  void set_bp5(::google::protobuf::int64 value);

  // optional int64 ba1 = 43;
  bool has_ba1() const;
  void clear_ba1();
  static const int kBa1FieldNumber = 43;
  ::google::protobuf::int64 ba1() const;
  void set_ba1(::google::protobuf::int64 value);

  // optional int64 ba2 = 44;
  bool has_ba2() const;
  void clear_ba2();
  static const int kBa2FieldNumber = 44;
  ::google::protobuf::int64 ba2() const;
  void set_ba2(::google::protobuf::int64 value);

  // optional int64 ba3 = 45;
  bool has_ba3() const;
  void clear_ba3();
  static const int kBa3FieldNumber = 45;
  ::google::protobuf::int64 ba3() const;
  void set_ba3(::google::protobuf::int64 value);

  // optional int64 ba4 = 46;
  bool has_ba4() const;
  void clear_ba4();
  static const int kBa4FieldNumber = 46;
  ::google::protobuf::int64 ba4() const;
  void set_ba4(::google::protobuf::int64 value);

  // optional int64 ba5 = 47;
  bool has_ba5() const;
  void clear_ba5();
  static const int kBa5FieldNumber = 47;
  ::google::protobuf::int64 ba5() const;
  void set_ba5(::google::protobuf::int64 value);

  // optional int64 sp1 = 48;
  bool has_sp1() const;
  void clear_sp1();
  static const int kSp1FieldNumber = 48;
  ::google::protobuf::int64 sp1() const;
  void set_sp1(::google::protobuf::int64 value);

  // optional int64 sp2 = 49;
  bool has_sp2() const;
  void clear_sp2();
  static const int kSp2FieldNumber = 49;
  ::google::protobuf::int64 sp2() const;
  void set_sp2(::google::protobuf::int64 value);

  // optional int64 sp3 = 50;
  bool has_sp3() const;
  void clear_sp3();
  static const int kSp3FieldNumber = 50;
  ::google::protobuf::int64 sp3() const;
  void set_sp3(::google::protobuf::int64 value);

  // optional int64 sp4 = 51;
  bool has_sp4() const;
  void clear_sp4();
  static const int kSp4FieldNumber = 51;
  ::google::protobuf::int64 sp4() const;
  void set_sp4(::google::protobuf::int64 value);

  // optional int64 sp5 = 52;
  bool has_sp5() const;
  void clear_sp5();
  static const int kSp5FieldNumber = 52;
  ::google::protobuf::int64 sp5() const;
  void set_sp5(::google::protobuf::int64 value);

  // optional int64 sa1 = 53;
  bool has_sa1() const;
  void clear_sa1();
  static const int kSa1FieldNumber = 53;
  ::google::protobuf::int64 sa1() const;
  void set_sa1(::google::protobuf::int64 value);

  // optional int64 sa2 = 54;
  bool has_sa2() const;
  void clear_sa2();
  static const int kSa2FieldNumber = 54;
  ::google::protobuf::int64 sa2() const;
  void set_sa2(::google::protobuf::int64 value);

  // optional int64 sa3 = 55;
  bool has_sa3() const;
  void clear_sa3();
  static const int kSa3FieldNumber = 55;
  ::google::protobuf::int64 sa3() const;
  void set_sa3(::google::protobuf::int64 value);

  // optional int64 sa4 = 56;
  bool has_sa4() const;
  void clear_sa4();
  static const int kSa4FieldNumber = 56;
  ::google::protobuf::int64 sa4() const;
  void set_sa4(::google::protobuf::int64 value);

  // optional int64 sa5 = 57;
  bool has_sa5() const;
  void clear_sa5();
  static const int kSa5FieldNumber = 57;
  ::google::protobuf::int64 sa5() const;
  void set_sa5(::google::protobuf::int64 value);

  // optional int32 state = 21;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 21;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:quotation.Option)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_trading_day();
  void clear_has_trading_day();
  void set_has_stamp();
  void clear_has_stamp();
  void set_has_code();
  void clear_has_code();
  void set_has_trade_code();
  void clear_has_trade_code();
  void set_has_name();
  void clear_has_name();
  void set_has_market();
  void clear_has_market();
  void set_has_start_date();
  void clear_has_start_date();
  void set_has_end_date();
  void clear_has_end_date();
  void set_has_expire_date();
  void clear_has_expire_date();
  void set_has_exercise_date();
  void clear_has_exercise_date();
  void set_has_exercise_price();
  void clear_has_exercise_price();
  void set_has_underlying_code();
  void clear_has_underlying_code();
  void set_has_underlying_type();
  void clear_has_underlying_type();
  void set_has_cp_flag();
  void clear_has_cp_flag();
  void set_has_option_type();
  void clear_has_option_type();
  void set_has_preformance_type();
  void clear_has_preformance_type();
  void set_has_price_limit_type();
  void clear_has_price_limit_type();
  void set_has_contract_unit();
  void clear_has_contract_unit();
  void set_has_exchange_time();
  void clear_has_exchange_time();
  void set_has_state();
  void clear_has_state();
  void set_has_pre_open_interest();
  void clear_has_pre_open_interest();
  void set_has_pre_close();
  void clear_has_pre_close();
  void set_has_pre_settle();
  void clear_has_pre_settle();
  void set_has_open();
  void clear_has_open();
  void set_has_high();
  void clear_has_high();
  void set_has_low();
  void clear_has_low();
  void set_has_latest();
  void clear_has_latest();
  void set_has_volume();
  void clear_has_volume();
  void set_has_amount();
  void clear_has_amount();
  void set_has_open_interest();
  void clear_has_open_interest();
  void set_has_close();
  void clear_has_close();
  void set_has_settle();
  void clear_has_settle();
  void set_has_high_limit();
  void clear_has_high_limit();
  void set_has_low_limit();
  void clear_has_low_limit();
  void set_has_pre_delta();
  void clear_has_pre_delta();
  void set_has_delta();
  void clear_has_delta();
  void set_has_bp1();
  void clear_has_bp1();
  void set_has_bp2();
  void clear_has_bp2();
  void set_has_bp3();
  void clear_has_bp3();
  void set_has_bp4();
  void clear_has_bp4();
  void set_has_bp5();
  void clear_has_bp5();
  void set_has_ba1();
  void clear_has_ba1();
  void set_has_ba2();
  void clear_has_ba2();
  void set_has_ba3();
  void clear_has_ba3();
  void set_has_ba4();
  void clear_has_ba4();
  void set_has_ba5();
  void clear_has_ba5();
  void set_has_sp1();
  void clear_has_sp1();
  void set_has_sp2();
  void clear_has_sp2();
  void set_has_sp3();
  void clear_has_sp3();
  void set_has_sp4();
  void clear_has_sp4();
  void set_has_sp5();
  void clear_has_sp5();
  void set_has_sa1();
  void clear_has_sa1();
  void set_has_sa2();
  void clear_has_sa2();
  void set_has_sa3();
  void clear_has_sa3();
  void set_has_sa4();
  void clear_has_sa4();
  void set_has_sa5();
  void clear_has_sa5();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_type_;
  private:
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr trade_code_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr underlying_code_;
  ::google::protobuf::uint32 trading_day_;
  ::google::protobuf::uint32 stamp_;
  ::google::protobuf::int64 market_;
  ::google::protobuf::uint32 start_date_;
  ::google::protobuf::uint32 end_date_;
  ::google::protobuf::uint32 expire_date_;
  ::google::protobuf::uint32 exercise_date_;
  ::google::protobuf::int64 exercise_price_;
  ::google::protobuf::int32 underlying_type_;
  ::google::protobuf::int32 cp_flag_;
  ::google::protobuf::int32 option_type_;
  ::google::protobuf::int32 preformance_type_;
  ::google::protobuf::int64 contract_unit_;
  ::google::protobuf::int32 price_limit_type_;
  ::google::protobuf::uint32 exchange_time_;
  ::google::protobuf::int64 pre_open_interest_;
  ::google::protobuf::int64 pre_close_;
  ::google::protobuf::int64 pre_settle_;
  ::google::protobuf::int64 open_;
  ::google::protobuf::int64 high_;
  ::google::protobuf::int64 low_;
  ::google::protobuf::int64 latest_;
  ::google::protobuf::int64 volume_;
  ::google::protobuf::int64 amount_;
  ::google::protobuf::int64 open_interest_;
  ::google::protobuf::int64 close_;
  ::google::protobuf::int64 settle_;
  ::google::protobuf::int64 high_limit_;
  ::google::protobuf::int64 low_limit_;
  ::google::protobuf::int64 pre_delta_;
  ::google::protobuf::int64 delta_;
  ::google::protobuf::int64 bp1_;
  ::google::protobuf::int64 bp2_;
  ::google::protobuf::int64 bp3_;
  ::google::protobuf::int64 bp4_;
  ::google::protobuf::int64 bp5_;
  ::google::protobuf::int64 ba1_;
  ::google::protobuf::int64 ba2_;
  ::google::protobuf::int64 ba3_;
  ::google::protobuf::int64 ba4_;
  ::google::protobuf::int64 ba5_;
  ::google::protobuf::int64 sp1_;
  ::google::protobuf::int64 sp2_;
  ::google::protobuf::int64 sp3_;
  ::google::protobuf::int64 sp4_;
  ::google::protobuf::int64 sp5_;
  ::google::protobuf::int64 sa1_;
  ::google::protobuf::int64 sa2_;
  ::google::protobuf::int64 sa3_;
  ::google::protobuf::int64 sa4_;
  ::google::protobuf::int64 sa5_;
  ::google::protobuf::int32 state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protos_2fquotation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Index : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quotation.Index) */ {
 public:
  Index();
  virtual ~Index();

  Index(const Index& from);

  inline Index& operator=(const Index& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Index(Index&& from) noexcept
    : Index() {
    *this = ::std::move(from);
  }

  inline Index& operator=(Index&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Index& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Index* internal_default_instance() {
    return reinterpret_cast<const Index*>(
               &_Index_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Index* other);
  friend void swap(Index& a, Index& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Index* New() const final {
    return CreateMaybeMessage<Index>(NULL);
  }

  Index* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Index>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Index& from);
  void MergeFrom(const Index& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Index* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1 [default = "I"];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required string code = 8;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 8;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string name = 15;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 15;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint32 trading_day = 2;
  bool has_trading_day() const;
  void clear_trading_day();
  static const int kTradingDayFieldNumber = 2;
  ::google::protobuf::uint32 trading_day() const;
  void set_trading_day(::google::protobuf::uint32 value);

  // required uint32 stamp = 3;
  bool has_stamp() const;
  void clear_stamp();
  static const int kStampFieldNumber = 3;
  ::google::protobuf::uint32 stamp() const;
  void set_stamp(::google::protobuf::uint32 value);

  // optional int64 new_price = 4;
  bool has_new_price() const;
  void clear_new_price();
  static const int kNewPriceFieldNumber = 4;
  ::google::protobuf::int64 new_price() const;
  void set_new_price(::google::protobuf::int64 value);

  // optional int64 amount = 5;
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 5;
  ::google::protobuf::int64 amount() const;
  void set_amount(::google::protobuf::int64 value);

  // optional int64 sum_price = 6;
  bool has_sum_price() const;
  void clear_sum_price();
  static const int kSumPriceFieldNumber = 6;
  ::google::protobuf::int64 sum_price() const;
  void set_sum_price(::google::protobuf::int64 value);

  // optional int64 new_volume = 7;
  bool has_new_volume() const;
  void clear_new_volume();
  static const int kNewVolumeFieldNumber = 7;
  ::google::protobuf::int64 new_volume() const;
  void set_new_volume(::google::protobuf::int64 value);

  // optional int64 bp1 = 9;
  bool has_bp1() const;
  void clear_bp1();
  static const int kBp1FieldNumber = 9;
  ::google::protobuf::int64 bp1() const;
  void set_bp1(::google::protobuf::int64 value);

  // optional int64 sp1 = 10;
  bool has_sp1() const;
  void clear_sp1();
  static const int kSp1FieldNumber = 10;
  ::google::protobuf::int64 sp1() const;
  void set_sp1(::google::protobuf::int64 value);

  // optional int64 preclose = 11;
  bool has_preclose() const;
  void clear_preclose();
  static const int kPrecloseFieldNumber = 11;
  ::google::protobuf::int64 preclose() const;
  void set_preclose(::google::protobuf::int64 value);

  // optional int64 amountofpriceupanddown_new = 12;
  bool has_amountofpriceupanddown_new() const;
  void clear_amountofpriceupanddown_new();
  static const int kAmountofpriceupanddownNewFieldNumber = 12;
  ::google::protobuf::int64 amountofpriceupanddown_new() const;
  void set_amountofpriceupanddown_new(::google::protobuf::int64 value);

  // optional int64 amountofpriceupanddown_bp1 = 13;
  bool has_amountofpriceupanddown_bp1() const;
  void clear_amountofpriceupanddown_bp1();
  static const int kAmountofpriceupanddownBp1FieldNumber = 13;
  ::google::protobuf::int64 amountofpriceupanddown_bp1() const;
  void set_amountofpriceupanddown_bp1(::google::protobuf::int64 value);

  // optional int64 amountofpriceupanddown_sp1 = 14;
  bool has_amountofpriceupanddown_sp1() const;
  void clear_amountofpriceupanddown_sp1();
  static const int kAmountofpriceupanddownSp1FieldNumber = 14;
  ::google::protobuf::int64 amountofpriceupanddown_sp1() const;
  void set_amountofpriceupanddown_sp1(::google::protobuf::int64 value);

  // optional int64 market = 16;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 16;
  ::google::protobuf::int64 market() const;
  void set_market(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:quotation.Index)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_trading_day();
  void clear_has_trading_day();
  void set_has_stamp();
  void clear_has_stamp();
  void set_has_new_price();
  void clear_has_new_price();
  void set_has_amount();
  void clear_has_amount();
  void set_has_sum_price();
  void clear_has_sum_price();
  void set_has_new_volume();
  void clear_has_new_volume();
  void set_has_code();
  void clear_has_code();
  void set_has_bp1();
  void clear_has_bp1();
  void set_has_sp1();
  void clear_has_sp1();
  void set_has_preclose();
  void clear_has_preclose();
  void set_has_amountofpriceupanddown_new();
  void clear_has_amountofpriceupanddown_new();
  void set_has_amountofpriceupanddown_bp1();
  void clear_has_amountofpriceupanddown_bp1();
  void set_has_amountofpriceupanddown_sp1();
  void clear_has_amountofpriceupanddown_sp1();
  void set_has_name();
  void clear_has_name();
  void set_has_market();
  void clear_has_market();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_type_;
  private:
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 trading_day_;
  ::google::protobuf::uint32 stamp_;
  ::google::protobuf::int64 new_price_;
  ::google::protobuf::int64 amount_;
  ::google::protobuf::int64 sum_price_;
  ::google::protobuf::int64 new_volume_;
  ::google::protobuf::int64 bp1_;
  ::google::protobuf::int64 sp1_;
  ::google::protobuf::int64 preclose_;
  ::google::protobuf::int64 amountofpriceupanddown_new_;
  ::google::protobuf::int64 amountofpriceupanddown_bp1_;
  ::google::protobuf::int64 amountofpriceupanddown_sp1_;
  ::google::protobuf::int64 market_;
  friend struct ::protobuf_protos_2fquotation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VIndex_StockInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quotation.VIndex.StockInfo) */ {
 public:
  VIndex_StockInfo();
  virtual ~VIndex_StockInfo();

  VIndex_StockInfo(const VIndex_StockInfo& from);

  inline VIndex_StockInfo& operator=(const VIndex_StockInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VIndex_StockInfo(VIndex_StockInfo&& from) noexcept
    : VIndex_StockInfo() {
    *this = ::std::move(from);
  }

  inline VIndex_StockInfo& operator=(VIndex_StockInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VIndex_StockInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VIndex_StockInfo* internal_default_instance() {
    return reinterpret_cast<const VIndex_StockInfo*>(
               &_VIndex_StockInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(VIndex_StockInfo* other);
  friend void swap(VIndex_StockInfo& a, VIndex_StockInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VIndex_StockInfo* New() const final {
    return CreateMaybeMessage<VIndex_StockInfo>(NULL);
  }

  VIndex_StockInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VIndex_StockInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VIndex_StockInfo& from);
  void MergeFrom(const VIndex_StockInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VIndex_StockInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int64 volume = 3;
  bool has_volume() const;
  void clear_volume();
  static const int kVolumeFieldNumber = 3;
  ::google::protobuf::int64 volume() const;
  void set_volume(::google::protobuf::int64 value);

  // optional double amount = 4;
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 4;
  double amount() const;
  void set_amount(double value);

  // @@protoc_insertion_point(class_scope:quotation.VIndex.StockInfo)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_name();
  void clear_has_name();
  void set_has_volume();
  void clear_has_volume();
  void set_has_amount();
  void clear_has_amount();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int64 volume_;
  double amount_;
  friend struct ::protobuf_protos_2fquotation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VIndex : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quotation.VIndex) */ {
 public:
  VIndex();
  virtual ~VIndex();

  VIndex(const VIndex& from);

  inline VIndex& operator=(const VIndex& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VIndex(VIndex&& from) noexcept
    : VIndex() {
    *this = ::std::move(from);
  }

  inline VIndex& operator=(VIndex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VIndex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VIndex* internal_default_instance() {
    return reinterpret_cast<const VIndex*>(
               &_VIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(VIndex* other);
  friend void swap(VIndex& a, VIndex& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VIndex* New() const final {
    return CreateMaybeMessage<VIndex>(NULL);
  }

  VIndex* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VIndex>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VIndex& from);
  void MergeFrom(const VIndex& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VIndex* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef VIndex_StockInfo StockInfo;

  // accessors -------------------------------------------------------

  // repeated .quotation.VIndex.StockInfo limit_up_stocks = 12;
  int limit_up_stocks_size() const;
  void clear_limit_up_stocks();
  static const int kLimitUpStocksFieldNumber = 12;
  ::quotation::VIndex_StockInfo* mutable_limit_up_stocks(int index);
  ::google::protobuf::RepeatedPtrField< ::quotation::VIndex_StockInfo >*
      mutable_limit_up_stocks();
  const ::quotation::VIndex_StockInfo& limit_up_stocks(int index) const;
  ::quotation::VIndex_StockInfo* add_limit_up_stocks();
  const ::google::protobuf::RepeatedPtrField< ::quotation::VIndex_StockInfo >&
      limit_up_stocks() const;

  // repeated .quotation.VIndex.StockInfo limit_down_stocks = 13;
  int limit_down_stocks_size() const;
  void clear_limit_down_stocks();
  static const int kLimitDownStocksFieldNumber = 13;
  ::quotation::VIndex_StockInfo* mutable_limit_down_stocks(int index);
  ::google::protobuf::RepeatedPtrField< ::quotation::VIndex_StockInfo >*
      mutable_limit_down_stocks();
  const ::quotation::VIndex_StockInfo& limit_down_stocks(int index) const;
  ::quotation::VIndex_StockInfo* add_limit_down_stocks();
  const ::google::protobuf::RepeatedPtrField< ::quotation::VIndex_StockInfo >&
      limit_down_stocks() const;

  // repeated .quotation.VIndex.StockInfo non_must_suspension_stocks = 14;
  int non_must_suspension_stocks_size() const;
  void clear_non_must_suspension_stocks();
  static const int kNonMustSuspensionStocksFieldNumber = 14;
  ::quotation::VIndex_StockInfo* mutable_non_must_suspension_stocks(int index);
  ::google::protobuf::RepeatedPtrField< ::quotation::VIndex_StockInfo >*
      mutable_non_must_suspension_stocks();
  const ::quotation::VIndex_StockInfo& non_must_suspension_stocks(int index) const;
  ::quotation::VIndex_StockInfo* add_non_must_suspension_stocks();
  const ::google::protobuf::RepeatedPtrField< ::quotation::VIndex_StockInfo >&
      non_must_suspension_stocks() const;

  // repeated .quotation.VIndex.StockInfo must_non_suspension_stocks = 15;
  int must_non_suspension_stocks_size() const;
  void clear_must_non_suspension_stocks();
  static const int kMustNonSuspensionStocksFieldNumber = 15;
  ::quotation::VIndex_StockInfo* mutable_must_non_suspension_stocks(int index);
  ::google::protobuf::RepeatedPtrField< ::quotation::VIndex_StockInfo >*
      mutable_must_non_suspension_stocks();
  const ::quotation::VIndex_StockInfo& must_non_suspension_stocks(int index) const;
  ::quotation::VIndex_StockInfo* add_must_non_suspension_stocks();
  const ::google::protobuf::RepeatedPtrField< ::quotation::VIndex_StockInfo >&
      must_non_suspension_stocks() const;

  // optional string type = 1 [default = "V"];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required string code = 5;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 5;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional uint32 trading_day = 2;
  bool has_trading_day() const;
  void clear_trading_day();
  static const int kTradingDayFieldNumber = 2;
  ::google::protobuf::uint32 trading_day() const;
  void set_trading_day(::google::protobuf::uint32 value);

  // required uint32 stamp = 3;
  bool has_stamp() const;
  void clear_stamp();
  static const int kStampFieldNumber = 3;
  ::google::protobuf::uint32 stamp() const;
  void set_stamp(::google::protobuf::uint32 value);

  // required double new_price = 4;
  bool has_new_price() const;
  void clear_new_price();
  static const int kNewPriceFieldNumber = 4;
  double new_price() const;
  void set_new_price(double value);

  // optional double bp1 = 6;
  bool has_bp1() const;
  void clear_bp1();
  static const int kBp1FieldNumber = 6;
  double bp1() const;
  void set_bp1(double value);

  // optional double sp1 = 7;
  bool has_sp1() const;
  void clear_sp1();
  static const int kSp1FieldNumber = 7;
  double sp1() const;
  void set_sp1(double value);

  // optional double limit_up_amount = 8;
  bool has_limit_up_amount() const;
  void clear_limit_up_amount();
  static const int kLimitUpAmountFieldNumber = 8;
  double limit_up_amount() const;
  void set_limit_up_amount(double value);

  // optional double limit_down_amount = 9;
  bool has_limit_down_amount() const;
  void clear_limit_down_amount();
  static const int kLimitDownAmountFieldNumber = 9;
  double limit_down_amount() const;
  void set_limit_down_amount(double value);

  // optional double non_must_suspension_amount = 10;
  bool has_non_must_suspension_amount() const;
  void clear_non_must_suspension_amount();
  static const int kNonMustSuspensionAmountFieldNumber = 10;
  double non_must_suspension_amount() const;
  void set_non_must_suspension_amount(double value);

  // optional double must_non_suspension_amount = 11;
  bool has_must_non_suspension_amount() const;
  void clear_must_non_suspension_amount();
  static const int kMustNonSuspensionAmountFieldNumber = 11;
  double must_non_suspension_amount() const;
  void set_must_non_suspension_amount(double value);

  // optional double etf_bp1 = 16;
  bool has_etf_bp1() const;
  void clear_etf_bp1();
  static const int kEtfBp1FieldNumber = 16;
  double etf_bp1() const;
  void set_etf_bp1(double value);

  // optional double etf_sp1 = 17;
  bool has_etf_sp1() const;
  void clear_etf_sp1();
  static const int kEtfSp1FieldNumber = 17;
  double etf_sp1() const;
  void set_etf_sp1(double value);

  // optional double avg1 = 18;
  bool has_avg1() const;
  void clear_avg1();
  static const int kAvg1FieldNumber = 18;
  double avg1() const;
  void set_avg1(double value);

  // optional double limit_up_rate = 19;
  bool has_limit_up_rate() const;
  void clear_limit_up_rate();
  static const int kLimitUpRateFieldNumber = 19;
  double limit_up_rate() const;
  void set_limit_up_rate(double value);

  // optional double limit_down_rate = 20;
  bool has_limit_down_rate() const;
  void clear_limit_down_rate();
  static const int kLimitDownRateFieldNumber = 20;
  double limit_down_rate() const;
  void set_limit_down_rate(double value);

  // optional double non_must_suspension_rate = 21;
  bool has_non_must_suspension_rate() const;
  void clear_non_must_suspension_rate();
  static const int kNonMustSuspensionRateFieldNumber = 21;
  double non_must_suspension_rate() const;
  void set_non_must_suspension_rate(double value);

  // optional double must_non_suspension_rate = 22;
  bool has_must_non_suspension_rate() const;
  void clear_must_non_suspension_rate();
  static const int kMustNonSuspensionRateFieldNumber = 22;
  double must_non_suspension_rate() const;
  void set_must_non_suspension_rate(double value);

  // optional double must_non_suspension_amendment_value = 23;
  bool has_must_non_suspension_amendment_value() const;
  void clear_must_non_suspension_amendment_value();
  static const int kMustNonSuspensionAmendmentValueFieldNumber = 23;
  double must_non_suspension_amendment_value() const;
  void set_must_non_suspension_amendment_value(double value);

  // optional double must_non_suspension_amendment_rate = 24;
  bool has_must_non_suspension_amendment_rate() const;
  void clear_must_non_suspension_amendment_rate();
  static const int kMustNonSuspensionAmendmentRateFieldNumber = 24;
  double must_non_suspension_amendment_rate() const;
  void set_must_non_suspension_amendment_rate(double value);

  // optional double create_stock_amendment_value = 25;
  bool has_create_stock_amendment_value() const;
  void clear_create_stock_amendment_value();
  static const int kCreateStockAmendmentValueFieldNumber = 25;
  double create_stock_amendment_value() const;
  void set_create_stock_amendment_value(double value);

  // optional double create_stock_amendment_rate = 26;
  bool has_create_stock_amendment_rate() const;
  void clear_create_stock_amendment_rate();
  static const int kCreateStockAmendmentRateFieldNumber = 26;
  double create_stock_amendment_rate() const;
  void set_create_stock_amendment_rate(double value);

  // optional double create_amendment_value = 27;
  bool has_create_amendment_value() const;
  void clear_create_amendment_value();
  static const int kCreateAmendmentValueFieldNumber = 27;
  double create_amendment_value() const;
  void set_create_amendment_value(double value);

  // optional double create_amendment_rate = 28;
  bool has_create_amendment_rate() const;
  void clear_create_amendment_rate();
  static const int kCreateAmendmentRateFieldNumber = 28;
  double create_amendment_rate() const;
  void set_create_amendment_rate(double value);

  // optional double redeem_stock_amendment_value = 29;
  bool has_redeem_stock_amendment_value() const;
  void clear_redeem_stock_amendment_value();
  static const int kRedeemStockAmendmentValueFieldNumber = 29;
  double redeem_stock_amendment_value() const;
  void set_redeem_stock_amendment_value(double value);

  // optional double redeem_stock_amendment_rate = 30;
  bool has_redeem_stock_amendment_rate() const;
  void clear_redeem_stock_amendment_rate();
  static const int kRedeemStockAmendmentRateFieldNumber = 30;
  double redeem_stock_amendment_rate() const;
  void set_redeem_stock_amendment_rate(double value);

  // optional double redeem_amendment_value = 31;
  bool has_redeem_amendment_value() const;
  void clear_redeem_amendment_value();
  static const int kRedeemAmendmentValueFieldNumber = 31;
  double redeem_amendment_value() const;
  void set_redeem_amendment_value(double value);

  // optional double redeem_amendment_rate = 32;
  bool has_redeem_amendment_rate() const;
  void clear_redeem_amendment_rate();
  static const int kRedeemAmendmentRateFieldNumber = 32;
  double redeem_amendment_rate() const;
  void set_redeem_amendment_rate(double value);

  // @@protoc_insertion_point(class_scope:quotation.VIndex)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_trading_day();
  void clear_has_trading_day();
  void set_has_stamp();
  void clear_has_stamp();
  void set_has_new_price();
  void clear_has_new_price();
  void set_has_code();
  void clear_has_code();
  void set_has_bp1();
  void clear_has_bp1();
  void set_has_sp1();
  void clear_has_sp1();
  void set_has_limit_up_amount();
  void clear_has_limit_up_amount();
  void set_has_limit_down_amount();
  void clear_has_limit_down_amount();
  void set_has_non_must_suspension_amount();
  void clear_has_non_must_suspension_amount();
  void set_has_must_non_suspension_amount();
  void clear_has_must_non_suspension_amount();
  void set_has_etf_bp1();
  void clear_has_etf_bp1();
  void set_has_etf_sp1();
  void clear_has_etf_sp1();
  void set_has_avg1();
  void clear_has_avg1();
  void set_has_limit_up_rate();
  void clear_has_limit_up_rate();
  void set_has_limit_down_rate();
  void clear_has_limit_down_rate();
  void set_has_non_must_suspension_rate();
  void clear_has_non_must_suspension_rate();
  void set_has_must_non_suspension_rate();
  void clear_has_must_non_suspension_rate();
  void set_has_must_non_suspension_amendment_value();
  void clear_has_must_non_suspension_amendment_value();
  void set_has_must_non_suspension_amendment_rate();
  void clear_has_must_non_suspension_amendment_rate();
  void set_has_create_stock_amendment_value();
  void clear_has_create_stock_amendment_value();
  void set_has_create_stock_amendment_rate();
  void clear_has_create_stock_amendment_rate();
  void set_has_create_amendment_value();
  void clear_has_create_amendment_value();
  void set_has_create_amendment_rate();
  void clear_has_create_amendment_rate();
  void set_has_redeem_stock_amendment_value();
  void clear_has_redeem_stock_amendment_value();
  void set_has_redeem_stock_amendment_rate();
  void clear_has_redeem_stock_amendment_rate();
  void set_has_redeem_amendment_value();
  void clear_has_redeem_amendment_value();
  void set_has_redeem_amendment_rate();
  void clear_has_redeem_amendment_rate();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::quotation::VIndex_StockInfo > limit_up_stocks_;
  ::google::protobuf::RepeatedPtrField< ::quotation::VIndex_StockInfo > limit_down_stocks_;
  ::google::protobuf::RepeatedPtrField< ::quotation::VIndex_StockInfo > non_must_suspension_stocks_;
  ::google::protobuf::RepeatedPtrField< ::quotation::VIndex_StockInfo > must_non_suspension_stocks_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_type_;
  private:
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::uint32 trading_day_;
  ::google::protobuf::uint32 stamp_;
  double new_price_;
  double bp1_;
  double sp1_;
  double limit_up_amount_;
  double limit_down_amount_;
  double non_must_suspension_amount_;
  double must_non_suspension_amount_;
  double etf_bp1_;
  double etf_sp1_;
  double avg1_;
  double limit_up_rate_;
  double limit_down_rate_;
  double non_must_suspension_rate_;
  double must_non_suspension_rate_;
  double must_non_suspension_amendment_value_;
  double must_non_suspension_amendment_rate_;
  double create_stock_amendment_value_;
  double create_stock_amendment_rate_;
  double create_amendment_value_;
  double create_amendment_rate_;
  double redeem_stock_amendment_value_;
  double redeem_stock_amendment_rate_;
  double redeem_amendment_value_;
  double redeem_amendment_rate_;
  friend struct ::protobuf_protos_2fquotation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GradedFundIopv : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quotation.GradedFundIopv) */ {
 public:
  GradedFundIopv();
  virtual ~GradedFundIopv();

  GradedFundIopv(const GradedFundIopv& from);

  inline GradedFundIopv& operator=(const GradedFundIopv& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GradedFundIopv(GradedFundIopv&& from) noexcept
    : GradedFundIopv() {
    *this = ::std::move(from);
  }

  inline GradedFundIopv& operator=(GradedFundIopv&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GradedFundIopv& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GradedFundIopv* internal_default_instance() {
    return reinterpret_cast<const GradedFundIopv*>(
               &_GradedFundIopv_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(GradedFundIopv* other);
  friend void swap(GradedFundIopv& a, GradedFundIopv& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GradedFundIopv* New() const final {
    return CreateMaybeMessage<GradedFundIopv>(NULL);
  }

  GradedFundIopv* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GradedFundIopv>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GradedFundIopv& from);
  void MergeFrom(const GradedFundIopv& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GradedFundIopv* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1 [default = "C"];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required string fof_code = 4;
  bool has_fof_code() const;
  void clear_fof_code();
  static const int kFofCodeFieldNumber = 4;
  const ::std::string& fof_code() const;
  void set_fof_code(const ::std::string& value);
  #if LANG_CXX11
  void set_fof_code(::std::string&& value);
  #endif
  void set_fof_code(const char* value);
  void set_fof_code(const char* value, size_t size);
  ::std::string* mutable_fof_code();
  ::std::string* release_fof_code();
  void set_allocated_fof_code(::std::string* fof_code);

  // optional string fof_name = 5;
  bool has_fof_name() const;
  void clear_fof_name();
  static const int kFofNameFieldNumber = 5;
  const ::std::string& fof_name() const;
  void set_fof_name(const ::std::string& value);
  #if LANG_CXX11
  void set_fof_name(::std::string&& value);
  #endif
  void set_fof_name(const char* value);
  void set_fof_name(const char* value, size_t size);
  ::std::string* mutable_fof_name();
  ::std::string* release_fof_name();
  void set_allocated_fof_name(::std::string* fof_name);

  // required string a_code = 7;
  bool has_a_code() const;
  void clear_a_code();
  static const int kACodeFieldNumber = 7;
  const ::std::string& a_code() const;
  void set_a_code(const ::std::string& value);
  #if LANG_CXX11
  void set_a_code(::std::string&& value);
  #endif
  void set_a_code(const char* value);
  void set_a_code(const char* value, size_t size);
  ::std::string* mutable_a_code();
  ::std::string* release_a_code();
  void set_allocated_a_code(::std::string* a_code);

  // optional string a_name = 8;
  bool has_a_name() const;
  void clear_a_name();
  static const int kANameFieldNumber = 8;
  const ::std::string& a_name() const;
  void set_a_name(const ::std::string& value);
  #if LANG_CXX11
  void set_a_name(::std::string&& value);
  #endif
  void set_a_name(const char* value);
  void set_a_name(const char* value, size_t size);
  ::std::string* mutable_a_name();
  ::std::string* release_a_name();
  void set_allocated_a_name(::std::string* a_name);

  // required string b_code = 12;
  bool has_b_code() const;
  void clear_b_code();
  static const int kBCodeFieldNumber = 12;
  const ::std::string& b_code() const;
  void set_b_code(const ::std::string& value);
  #if LANG_CXX11
  void set_b_code(::std::string&& value);
  #endif
  void set_b_code(const char* value);
  void set_b_code(const char* value, size_t size);
  ::std::string* mutable_b_code();
  ::std::string* release_b_code();
  void set_allocated_b_code(::std::string* b_code);

  // optional string b_name = 13;
  bool has_b_name() const;
  void clear_b_name();
  static const int kBNameFieldNumber = 13;
  const ::std::string& b_name() const;
  void set_b_name(const ::std::string& value);
  #if LANG_CXX11
  void set_b_name(::std::string&& value);
  #endif
  void set_b_name(const char* value);
  void set_b_name(const char* value, size_t size);
  ::std::string* mutable_b_name();
  ::std::string* release_b_name();
  void set_allocated_b_name(::std::string* b_name);

  // required string underlying_code = 17;
  bool has_underlying_code() const;
  void clear_underlying_code();
  static const int kUnderlyingCodeFieldNumber = 17;
  const ::std::string& underlying_code() const;
  void set_underlying_code(const ::std::string& value);
  #if LANG_CXX11
  void set_underlying_code(::std::string&& value);
  #endif
  void set_underlying_code(const char* value);
  void set_underlying_code(const char* value, size_t size);
  ::std::string* mutable_underlying_code();
  ::std::string* release_underlying_code();
  void set_allocated_underlying_code(::std::string* underlying_code);

  // optional string msg = 42;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 42;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional uint32 trading_day = 2;
  bool has_trading_day() const;
  void clear_trading_day();
  static const int kTradingDayFieldNumber = 2;
  ::google::protobuf::uint32 trading_day() const;
  void set_trading_day(::google::protobuf::uint32 value);

  // required uint32 stamp = 3;
  bool has_stamp() const;
  void clear_stamp();
  static const int kStampFieldNumber = 3;
  ::google::protobuf::uint32 stamp() const;
  void set_stamp(::google::protobuf::uint32 value);

  // optional double fof_pre_nav = 6;
  bool has_fof_pre_nav() const;
  void clear_fof_pre_nav();
  static const int kFofPreNavFieldNumber = 6;
  double fof_pre_nav() const;
  void set_fof_pre_nav(double value);

  // optional double a_bp1 = 9;
  bool has_a_bp1() const;
  void clear_a_bp1();
  static const int kABp1FieldNumber = 9;
  double a_bp1() const;
  void set_a_bp1(double value);

  // optional double a_sp1 = 10;
  bool has_a_sp1() const;
  void clear_a_sp1();
  static const int kASp1FieldNumber = 10;
  double a_sp1() const;
  void set_a_sp1(double value);

  // optional uint32 a_quote_time = 11;
  bool has_a_quote_time() const;
  void clear_a_quote_time();
  static const int kAQuoteTimeFieldNumber = 11;
  ::google::protobuf::uint32 a_quote_time() const;
  void set_a_quote_time(::google::protobuf::uint32 value);

  // optional uint32 b_quote_time = 16;
  bool has_b_quote_time() const;
  void clear_b_quote_time();
  static const int kBQuoteTimeFieldNumber = 16;
  ::google::protobuf::uint32 b_quote_time() const;
  void set_b_quote_time(::google::protobuf::uint32 value);

  // optional double b_bp1 = 14;
  bool has_b_bp1() const;
  void clear_b_bp1();
  static const int kBBp1FieldNumber = 14;
  double b_bp1() const;
  void set_b_bp1(double value);

  // optional double b_sp1 = 15;
  bool has_b_sp1() const;
  void clear_b_sp1();
  static const int kBSp1FieldNumber = 15;
  double b_sp1() const;
  void set_b_sp1(double value);

  // optional double underlying_latest = 18;
  bool has_underlying_latest() const;
  void clear_underlying_latest();
  static const int kUnderlyingLatestFieldNumber = 18;
  double underlying_latest() const;
  void set_underlying_latest(double value);

  // optional double underlying_pre_close = 19;
  bool has_underlying_pre_close() const;
  void clear_underlying_pre_close();
  static const int kUnderlyingPreCloseFieldNumber = 19;
  double underlying_pre_close() const;
  void set_underlying_pre_close(double value);

  // optional double hs300_latest = 21;
  bool has_hs300_latest() const;
  void clear_hs300_latest();
  static const int kHs300LatestFieldNumber = 21;
  double hs300_latest() const;
  void set_hs300_latest(double value);

  // optional uint32 underlying_quote_time = 20;
  bool has_underlying_quote_time() const;
  void clear_underlying_quote_time();
  static const int kUnderlyingQuoteTimeFieldNumber = 20;
  ::google::protobuf::uint32 underlying_quote_time() const;
  void set_underlying_quote_time(::google::protobuf::uint32 value);

  // optional uint32 hs300_quote_time = 23;
  bool has_hs300_quote_time() const;
  void clear_hs300_quote_time();
  static const int kHs300QuoteTimeFieldNumber = 23;
  ::google::protobuf::uint32 hs300_quote_time() const;
  void set_hs300_quote_time(::google::protobuf::uint32 value);

  // optional double hs300_pre_close = 22;
  bool has_hs300_pre_close() const;
  void clear_hs300_pre_close();
  static const int kHs300PreCloseFieldNumber = 22;
  double hs300_pre_close() const;
  void set_hs300_pre_close(double value);

  // optional int64 ratio_a = 24;
  bool has_ratio_a() const;
  void clear_ratio_a();
  static const int kRatioAFieldNumber = 24;
  ::google::protobuf::int64 ratio_a() const;
  void set_ratio_a(::google::protobuf::int64 value);

  // optional int64 ratio_b = 25;
  bool has_ratio_b() const;
  void clear_ratio_b();
  static const int kRatioBFieldNumber = 25;
  ::google::protobuf::int64 ratio_b() const;
  void set_ratio_b(::google::protobuf::int64 value);

  // optional double position_rate = 26;
  bool has_position_rate() const;
  void clear_position_rate();
  static const int kPositionRateFieldNumber = 26;
  double position_rate() const;
  void set_position_rate(double value);

  // optional double discount_fee_rate = 27;
  bool has_discount_fee_rate() const;
  void clear_discount_fee_rate();
  static const int kDiscountFeeRateFieldNumber = 27;
  double discount_fee_rate() const;
  void set_discount_fee_rate(double value);

  // optional double premium_fee_rate = 28;
  bool has_premium_fee_rate() const;
  void clear_premium_fee_rate();
  static const int kPremiumFeeRateFieldNumber = 28;
  double premium_fee_rate() const;
  void set_premium_fee_rate(double value);

  // optional double underlying_amplitude = 29;
  bool has_underlying_amplitude() const;
  void clear_underlying_amplitude();
  static const int kUnderlyingAmplitudeFieldNumber = 29;
  double underlying_amplitude() const;
  void set_underlying_amplitude(double value);

  // optional double hs300_amplitude = 30;
  bool has_hs300_amplitude() const;
  void clear_hs300_amplitude();
  static const int kHs300AmplitudeFieldNumber = 30;
  double hs300_amplitude() const;
  void set_hs300_amplitude(double value);

  // optional double fof_strength = 31;
  bool has_fof_strength() const;
  void clear_fof_strength();
  static const int kFofStrengthFieldNumber = 31;
  double fof_strength() const;
  void set_fof_strength(double value);

  // optional double fof_iopv = 32;
  bool has_fof_iopv() const;
  void clear_fof_iopv();
  static const int kFofIopvFieldNumber = 32;
  double fof_iopv() const;
  void set_fof_iopv(double value);

  // optional double bp1_iopv = 33;
  bool has_bp1_iopv() const;
  void clear_bp1_iopv();
  static const int kBp1IopvFieldNumber = 33;
  double bp1_iopv() const;
  void set_bp1_iopv(double value);

  // optional double sp1_iopv = 34;
  bool has_sp1_iopv() const;
  void clear_sp1_iopv();
  static const int kSp1IopvFieldNumber = 34;
  double sp1_iopv() const;
  void set_sp1_iopv(double value);

  // optional int64 bp1_iopv_state = 35;
  bool has_bp1_iopv_state() const;
  void clear_bp1_iopv_state();
  static const int kBp1IopvStateFieldNumber = 35;
  ::google::protobuf::int64 bp1_iopv_state() const;
  void set_bp1_iopv_state(::google::protobuf::int64 value);

  // optional int64 sp1_iopv_state = 36;
  bool has_sp1_iopv_state() const;
  void clear_sp1_iopv_state();
  static const int kSp1IopvStateFieldNumber = 36;
  ::google::protobuf::int64 sp1_iopv_state() const;
  void set_sp1_iopv_state(::google::protobuf::int64 value);

  // optional double discount_bp1 = 37;
  bool has_discount_bp1() const;
  void clear_discount_bp1();
  static const int kDiscountBp1FieldNumber = 37;
  double discount_bp1() const;
  void set_discount_bp1(double value);

  // optional double discount_sp1 = 38;
  bool has_discount_sp1() const;
  void clear_discount_sp1();
  static const int kDiscountSp1FieldNumber = 38;
  double discount_sp1() const;
  void set_discount_sp1(double value);

  // optional double premium_bp1 = 39;
  bool has_premium_bp1() const;
  void clear_premium_bp1();
  static const int kPremiumBp1FieldNumber = 39;
  double premium_bp1() const;
  void set_premium_bp1(double value);

  // optional double premium_sp1 = 40;
  bool has_premium_sp1() const;
  void clear_premium_sp1();
  static const int kPremiumSp1FieldNumber = 40;
  double premium_sp1() const;
  void set_premium_sp1(double value);

  // optional int64 state = 41;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 41;
  ::google::protobuf::int64 state() const;
  void set_state(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:quotation.GradedFundIopv)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_trading_day();
  void clear_has_trading_day();
  void set_has_stamp();
  void clear_has_stamp();
  void set_has_fof_code();
  void clear_has_fof_code();
  void set_has_fof_name();
  void clear_has_fof_name();
  void set_has_fof_pre_nav();
  void clear_has_fof_pre_nav();
  void set_has_a_code();
  void clear_has_a_code();
  void set_has_a_name();
  void clear_has_a_name();
  void set_has_a_bp1();
  void clear_has_a_bp1();
  void set_has_a_sp1();
  void clear_has_a_sp1();
  void set_has_a_quote_time();
  void clear_has_a_quote_time();
  void set_has_b_code();
  void clear_has_b_code();
  void set_has_b_name();
  void clear_has_b_name();
  void set_has_b_bp1();
  void clear_has_b_bp1();
  void set_has_b_sp1();
  void clear_has_b_sp1();
  void set_has_b_quote_time();
  void clear_has_b_quote_time();
  void set_has_underlying_code();
  void clear_has_underlying_code();
  void set_has_underlying_latest();
  void clear_has_underlying_latest();
  void set_has_underlying_pre_close();
  void clear_has_underlying_pre_close();
  void set_has_underlying_quote_time();
  void clear_has_underlying_quote_time();
  void set_has_hs300_latest();
  void clear_has_hs300_latest();
  void set_has_hs300_pre_close();
  void clear_has_hs300_pre_close();
  void set_has_hs300_quote_time();
  void clear_has_hs300_quote_time();
  void set_has_ratio_a();
  void clear_has_ratio_a();
  void set_has_ratio_b();
  void clear_has_ratio_b();
  void set_has_position_rate();
  void clear_has_position_rate();
  void set_has_discount_fee_rate();
  void clear_has_discount_fee_rate();
  void set_has_premium_fee_rate();
  void clear_has_premium_fee_rate();
  void set_has_underlying_amplitude();
  void clear_has_underlying_amplitude();
  void set_has_hs300_amplitude();
  void clear_has_hs300_amplitude();
  void set_has_fof_strength();
  void clear_has_fof_strength();
  void set_has_fof_iopv();
  void clear_has_fof_iopv();
  void set_has_bp1_iopv();
  void clear_has_bp1_iopv();
  void set_has_sp1_iopv();
  void clear_has_sp1_iopv();
  void set_has_bp1_iopv_state();
  void clear_has_bp1_iopv_state();
  void set_has_sp1_iopv_state();
  void clear_has_sp1_iopv_state();
  void set_has_discount_bp1();
  void clear_has_discount_bp1();
  void set_has_discount_sp1();
  void clear_has_discount_sp1();
  void set_has_premium_bp1();
  void clear_has_premium_bp1();
  void set_has_premium_sp1();
  void clear_has_premium_sp1();
  void set_has_state();
  void clear_has_state();
  void set_has_msg();
  void clear_has_msg();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_type_;
  private:
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr fof_code_;
  ::google::protobuf::internal::ArenaStringPtr fof_name_;
  ::google::protobuf::internal::ArenaStringPtr a_code_;
  ::google::protobuf::internal::ArenaStringPtr a_name_;
  ::google::protobuf::internal::ArenaStringPtr b_code_;
  ::google::protobuf::internal::ArenaStringPtr b_name_;
  ::google::protobuf::internal::ArenaStringPtr underlying_code_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::uint32 trading_day_;
  ::google::protobuf::uint32 stamp_;
  double fof_pre_nav_;
  double a_bp1_;
  double a_sp1_;
  ::google::protobuf::uint32 a_quote_time_;
  ::google::protobuf::uint32 b_quote_time_;
  double b_bp1_;
  double b_sp1_;
  double underlying_latest_;
  double underlying_pre_close_;
  double hs300_latest_;
  ::google::protobuf::uint32 underlying_quote_time_;
  ::google::protobuf::uint32 hs300_quote_time_;
  double hs300_pre_close_;
  ::google::protobuf::int64 ratio_a_;
  ::google::protobuf::int64 ratio_b_;
  double position_rate_;
  double discount_fee_rate_;
  double premium_fee_rate_;
  double underlying_amplitude_;
  double hs300_amplitude_;
  double fof_strength_;
  double fof_iopv_;
  double bp1_iopv_;
  double sp1_iopv_;
  ::google::protobuf::int64 bp1_iopv_state_;
  ::google::protobuf::int64 sp1_iopv_state_;
  double discount_bp1_;
  double discount_sp1_;
  double premium_bp1_;
  double premium_sp1_;
  ::google::protobuf::int64 state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protos_2fquotation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OptionVolatility : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quotation.OptionVolatility) */ {
 public:
  OptionVolatility();
  virtual ~OptionVolatility();

  OptionVolatility(const OptionVolatility& from);

  inline OptionVolatility& operator=(const OptionVolatility& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionVolatility(OptionVolatility&& from) noexcept
    : OptionVolatility() {
    *this = ::std::move(from);
  }

  inline OptionVolatility& operator=(OptionVolatility&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionVolatility& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionVolatility* internal_default_instance() {
    return reinterpret_cast<const OptionVolatility*>(
               &_OptionVolatility_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(OptionVolatility* other);
  friend void swap(OptionVolatility& a, OptionVolatility& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionVolatility* New() const final {
    return CreateMaybeMessage<OptionVolatility>(NULL);
  }

  OptionVolatility* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OptionVolatility>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OptionVolatility& from);
  void MergeFrom(const OptionVolatility& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionVolatility* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1 [default = "P"];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required string code = 4;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 4;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string name = 5;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 5;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string underlying_code = 12;
  bool has_underlying_code() const;
  void clear_underlying_code();
  static const int kUnderlyingCodeFieldNumber = 12;
  const ::std::string& underlying_code() const;
  void set_underlying_code(const ::std::string& value);
  #if LANG_CXX11
  void set_underlying_code(::std::string&& value);
  #endif
  void set_underlying_code(const char* value);
  void set_underlying_code(const char* value, size_t size);
  ::std::string* mutable_underlying_code();
  ::std::string* release_underlying_code();
  void set_allocated_underlying_code(::std::string* underlying_code);

  // optional string msg = 31;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 31;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional uint32 trading_day = 2;
  bool has_trading_day() const;
  void clear_trading_day();
  static const int kTradingDayFieldNumber = 2;
  ::google::protobuf::uint32 trading_day() const;
  void set_trading_day(::google::protobuf::uint32 value);

  // required uint32 stamp = 3;
  bool has_stamp() const;
  void clear_stamp();
  static const int kStampFieldNumber = 3;
  ::google::protobuf::uint32 stamp() const;
  void set_stamp(::google::protobuf::uint32 value);

  // optional int64 price = 6;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 6;
  ::google::protobuf::int64 price() const;
  void set_price(::google::protobuf::int64 value);

  // optional uint32 quote_time = 7;
  bool has_quote_time() const;
  void clear_quote_time();
  static const int kQuoteTimeFieldNumber = 7;
  ::google::protobuf::uint32 quote_time() const;
  void set_quote_time(::google::protobuf::uint32 value);

  // optional int32 cp_flag = 8;
  bool has_cp_flag() const;
  void clear_cp_flag();
  static const int kCpFlagFieldNumber = 8;
  ::google::protobuf::int32 cp_flag() const;
  void set_cp_flag(::google::protobuf::int32 value);

  // optional int64 exercise_price = 10;
  bool has_exercise_price() const;
  void clear_exercise_price();
  static const int kExercisePriceFieldNumber = 10;
  ::google::protobuf::int64 exercise_price() const;
  void set_exercise_price(::google::protobuf::int64 value);

  // optional int64 unit = 11;
  bool has_unit() const;
  void clear_unit();
  static const int kUnitFieldNumber = 11;
  ::google::protobuf::int64 unit() const;
  void set_unit(::google::protobuf::int64 value);

  // optional uint32 expire_date = 9;
  bool has_expire_date() const;
  void clear_expire_date();
  static const int kExpireDateFieldNumber = 9;
  ::google::protobuf::uint32 expire_date() const;
  void set_expire_date(::google::protobuf::uint32 value);

  // optional int32 underlying_type = 13;
  bool has_underlying_type() const;
  void clear_underlying_type();
  static const int kUnderlyingTypeFieldNumber = 13;
  ::google::protobuf::int32 underlying_type() const;
  void set_underlying_type(::google::protobuf::int32 value);

  // optional int64 underlying_price = 14;
  bool has_underlying_price() const;
  void clear_underlying_price();
  static const int kUnderlyingPriceFieldNumber = 14;
  ::google::protobuf::int64 underlying_price() const;
  void set_underlying_price(::google::protobuf::int64 value);

  // optional double interest_rate = 16;
  bool has_interest_rate() const;
  void clear_interest_rate();
  static const int kInterestRateFieldNumber = 16;
  double interest_rate() const;
  void set_interest_rate(double value);

  // optional double volatility = 17;
  bool has_volatility() const;
  void clear_volatility();
  static const int kVolatilityFieldNumber = 17;
  double volatility() const;
  void set_volatility(double value);

  // optional int64 state = 18;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 18;
  ::google::protobuf::int64 state() const;
  void set_state(::google::protobuf::int64 value);

  // optional double implied_value = 19;
  bool has_implied_value() const;
  void clear_implied_value();
  static const int kImpliedValueFieldNumber = 19;
  double implied_value() const;
  void set_implied_value(double value);

  // optional double implied_volatility = 20;
  bool has_implied_volatility() const;
  void clear_implied_volatility();
  static const int kImpliedVolatilityFieldNumber = 20;
  double implied_volatility() const;
  void set_implied_volatility(double value);

  // optional double delta = 21;
  bool has_delta() const;
  void clear_delta();
  static const int kDeltaFieldNumber = 21;
  double delta() const;
  void set_delta(double value);

  // optional double dollar_delta = 22;
  bool has_dollar_delta() const;
  void clear_dollar_delta();
  static const int kDollarDeltaFieldNumber = 22;
  double dollar_delta() const;
  void set_dollar_delta(double value);

  // optional double theta = 23;
  bool has_theta() const;
  void clear_theta();
  static const int kThetaFieldNumber = 23;
  double theta() const;
  void set_theta(double value);

  // optional double dollar_theta = 24;
  bool has_dollar_theta() const;
  void clear_dollar_theta();
  static const int kDollarThetaFieldNumber = 24;
  double dollar_theta() const;
  void set_dollar_theta(double value);

  // optional double gamma = 25;
  bool has_gamma() const;
  void clear_gamma();
  static const int kGammaFieldNumber = 25;
  double gamma() const;
  void set_gamma(double value);

  // optional double dollar_gamma = 26;
  bool has_dollar_gamma() const;
  void clear_dollar_gamma();
  static const int kDollarGammaFieldNumber = 26;
  double dollar_gamma() const;
  void set_dollar_gamma(double value);

  // optional double vega = 27;
  bool has_vega() const;
  void clear_vega();
  static const int kVegaFieldNumber = 27;
  double vega() const;
  void set_vega(double value);

  // optional double dollar_vega = 28;
  bool has_dollar_vega() const;
  void clear_dollar_vega();
  static const int kDollarVegaFieldNumber = 28;
  double dollar_vega() const;
  void set_dollar_vega(double value);

  // optional double rho = 29;
  bool has_rho() const;
  void clear_rho();
  static const int kRhoFieldNumber = 29;
  double rho() const;
  void set_rho(double value);

  // optional double dollar_rho = 30;
  bool has_dollar_rho() const;
  void clear_dollar_rho();
  static const int kDollarRhoFieldNumber = 30;
  double dollar_rho() const;
  void set_dollar_rho(double value);

  // optional uint32 underlying_quote_time = 15;
  bool has_underlying_quote_time() const;
  void clear_underlying_quote_time();
  static const int kUnderlyingQuoteTimeFieldNumber = 15;
  ::google::protobuf::uint32 underlying_quote_time() const;
  void set_underlying_quote_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:quotation.OptionVolatility)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_trading_day();
  void clear_has_trading_day();
  void set_has_stamp();
  void clear_has_stamp();
  void set_has_code();
  void clear_has_code();
  void set_has_name();
  void clear_has_name();
  void set_has_price();
  void clear_has_price();
  void set_has_quote_time();
  void clear_has_quote_time();
  void set_has_cp_flag();
  void clear_has_cp_flag();
  void set_has_expire_date();
  void clear_has_expire_date();
  void set_has_exercise_price();
  void clear_has_exercise_price();
  void set_has_unit();
  void clear_has_unit();
  void set_has_underlying_code();
  void clear_has_underlying_code();
  void set_has_underlying_type();
  void clear_has_underlying_type();
  void set_has_underlying_price();
  void clear_has_underlying_price();
  void set_has_underlying_quote_time();
  void clear_has_underlying_quote_time();
  void set_has_interest_rate();
  void clear_has_interest_rate();
  void set_has_volatility();
  void clear_has_volatility();
  void set_has_state();
  void clear_has_state();
  void set_has_implied_value();
  void clear_has_implied_value();
  void set_has_implied_volatility();
  void clear_has_implied_volatility();
  void set_has_delta();
  void clear_has_delta();
  void set_has_dollar_delta();
  void clear_has_dollar_delta();
  void set_has_theta();
  void clear_has_theta();
  void set_has_dollar_theta();
  void clear_has_dollar_theta();
  void set_has_gamma();
  void clear_has_gamma();
  void set_has_dollar_gamma();
  void clear_has_dollar_gamma();
  void set_has_vega();
  void clear_has_vega();
  void set_has_dollar_vega();
  void clear_has_dollar_vega();
  void set_has_rho();
  void clear_has_rho();
  void set_has_dollar_rho();
  void clear_has_dollar_rho();
  void set_has_msg();
  void clear_has_msg();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_type_;
  private:
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr underlying_code_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::uint32 trading_day_;
  ::google::protobuf::uint32 stamp_;
  ::google::protobuf::int64 price_;
  ::google::protobuf::uint32 quote_time_;
  ::google::protobuf::int32 cp_flag_;
  ::google::protobuf::int64 exercise_price_;
  ::google::protobuf::int64 unit_;
  ::google::protobuf::uint32 expire_date_;
  ::google::protobuf::int32 underlying_type_;
  ::google::protobuf::int64 underlying_price_;
  double interest_rate_;
  double volatility_;
  ::google::protobuf::int64 state_;
  double implied_value_;
  double implied_volatility_;
  double delta_;
  double dollar_delta_;
  double theta_;
  double dollar_theta_;
  double gamma_;
  double dollar_gamma_;
  double vega_;
  double dollar_vega_;
  double rho_;
  double dollar_rho_;
  ::google::protobuf::uint32 underlying_quote_time_;
  friend struct ::protobuf_protos_2fquotation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IndexParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quotation.IndexParam) */ {
 public:
  IndexParam();
  virtual ~IndexParam();

  IndexParam(const IndexParam& from);

  inline IndexParam& operator=(const IndexParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IndexParam(IndexParam&& from) noexcept
    : IndexParam() {
    *this = ::std::move(from);
  }

  inline IndexParam& operator=(IndexParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IndexParam* internal_default_instance() {
    return reinterpret_cast<const IndexParam*>(
               &_IndexParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(IndexParam* other);
  friend void swap(IndexParam& a, IndexParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IndexParam* New() const final {
    return CreateMaybeMessage<IndexParam>(NULL);
  }

  IndexParam* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IndexParam>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IndexParam& from);
  void MergeFrom(const IndexParam& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1 [default = ""];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required string code = 7;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 7;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string effective_date = 8;
  bool has_effective_date() const;
  void clear_effective_date();
  static const int kEffectiveDateFieldNumber = 8;
  const ::std::string& effective_date() const;
  void set_effective_date(const ::std::string& value);
  #if LANG_CXX11
  void set_effective_date(::std::string&& value);
  #endif
  void set_effective_date(const char* value);
  void set_effective_date(const char* value, size_t size);
  ::std::string* mutable_effective_date();
  ::std::string* release_effective_date();
  void set_allocated_effective_date(::std::string* effective_date);

  // optional uint32 trading_day = 2;
  bool has_trading_day() const;
  void clear_trading_day();
  static const int kTradingDayFieldNumber = 2;
  ::google::protobuf::uint32 trading_day() const;
  void set_trading_day(::google::protobuf::uint32 value);

  // required uint32 stamp = 3;
  bool has_stamp() const;
  void clear_stamp();
  static const int kStampFieldNumber = 3;
  ::google::protobuf::uint32 stamp() const;
  void set_stamp(::google::protobuf::uint32 value);

  // optional double weight = 4;
  bool has_weight() const;
  void clear_weight();
  static const int kWeightFieldNumber = 4;
  double weight() const;
  void set_weight(double value);

  // optional int64 calc_shares = 5;
  bool has_calc_shares() const;
  void clear_calc_shares();
  static const int kCalcSharesFieldNumber = 5;
  ::google::protobuf::int64 calc_shares() const;
  void set_calc_shares(::google::protobuf::int64 value);

  // optional int64 total_shares = 6;
  bool has_total_shares() const;
  void clear_total_shares();
  static const int kTotalSharesFieldNumber = 6;
  ::google::protobuf::int64 total_shares() const;
  void set_total_shares(::google::protobuf::int64 value);

  // optional double c_factor = 9;
  bool has_c_factor() const;
  void clear_c_factor();
  static const int kCFactorFieldNumber = 9;
  double c_factor() const;
  void set_c_factor(double value);

  // optional double pre_close = 10;
  bool has_pre_close() const;
  void clear_pre_close();
  static const int kPreCloseFieldNumber = 10;
  double pre_close() const;
  void set_pre_close(double value);

  // optional double adj_pre_close = 11;
  bool has_adj_pre_close() const;
  void clear_adj_pre_close();
  static const int kAdjPreCloseFieldNumber = 11;
  double adj_pre_close() const;
  void set_adj_pre_close(double value);

  // @@protoc_insertion_point(class_scope:quotation.IndexParam)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_trading_day();
  void clear_has_trading_day();
  void set_has_stamp();
  void clear_has_stamp();
  void set_has_weight();
  void clear_has_weight();
  void set_has_calc_shares();
  void clear_has_calc_shares();
  void set_has_total_shares();
  void clear_has_total_shares();
  void set_has_code();
  void clear_has_code();
  void set_has_effective_date();
  void clear_has_effective_date();
  void set_has_c_factor();
  void clear_has_c_factor();
  void set_has_pre_close();
  void clear_has_pre_close();
  void set_has_adj_pre_close();
  void clear_has_adj_pre_close();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr effective_date_;
  ::google::protobuf::uint32 trading_day_;
  ::google::protobuf::uint32 stamp_;
  double weight_;
  ::google::protobuf::int64 calc_shares_;
  ::google::protobuf::int64 total_shares_;
  double c_factor_;
  double pre_close_;
  double adj_pre_close_;
  friend struct ::protobuf_protos_2fquotation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SecurityOrderInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quotation.SecurityOrderInfo) */ {
 public:
  SecurityOrderInfo();
  virtual ~SecurityOrderInfo();

  SecurityOrderInfo(const SecurityOrderInfo& from);

  inline SecurityOrderInfo& operator=(const SecurityOrderInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SecurityOrderInfo(SecurityOrderInfo&& from) noexcept
    : SecurityOrderInfo() {
    *this = ::std::move(from);
  }

  inline SecurityOrderInfo& operator=(SecurityOrderInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SecurityOrderInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecurityOrderInfo* internal_default_instance() {
    return reinterpret_cast<const SecurityOrderInfo*>(
               &_SecurityOrderInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(SecurityOrderInfo* other);
  friend void swap(SecurityOrderInfo& a, SecurityOrderInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SecurityOrderInfo* New() const final {
    return CreateMaybeMessage<SecurityOrderInfo>(NULL);
  }

  SecurityOrderInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SecurityOrderInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SecurityOrderInfo& from);
  void MergeFrom(const SecurityOrderInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecurityOrderInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1 [default = ""];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required string stkcode = 4;
  bool has_stkcode() const;
  void clear_stkcode();
  static const int kStkcodeFieldNumber = 4;
  const ::std::string& stkcode() const;
  void set_stkcode(const ::std::string& value);
  #if LANG_CXX11
  void set_stkcode(::std::string&& value);
  #endif
  void set_stkcode(const char* value);
  void set_stkcode(const char* value, size_t size);
  ::std::string* mutable_stkcode();
  ::std::string* release_stkcode();
  void set_allocated_stkcode(::std::string* stkcode);

  // optional string last_match_id = 11 [default = ""];
  bool has_last_match_id() const;
  void clear_last_match_id();
  static const int kLastMatchIdFieldNumber = 11;
  const ::std::string& last_match_id() const;
  void set_last_match_id(const ::std::string& value);
  #if LANG_CXX11
  void set_last_match_id(::std::string&& value);
  #endif
  void set_last_match_id(const char* value);
  void set_last_match_id(const char* value, size_t size);
  ::std::string* mutable_last_match_id();
  ::std::string* release_last_match_id();
  void set_allocated_last_match_id(::std::string* last_match_id);

  // optional uint32 trading_day = 2;
  bool has_trading_day() const;
  void clear_trading_day();
  static const int kTradingDayFieldNumber = 2;
  ::google::protobuf::uint32 trading_day() const;
  void set_trading_day(::google::protobuf::uint32 value);

  // required uint32 stamp = 3;
  bool has_stamp() const;
  void clear_stamp();
  static const int kStampFieldNumber = 3;
  ::google::protobuf::uint32 stamp() const;
  void set_stamp(::google::protobuf::uint32 value);

  // required int64 order_qty = 5;
  bool has_order_qty() const;
  void clear_order_qty();
  static const int kOrderQtyFieldNumber = 5;
  ::google::protobuf::int64 order_qty() const;
  void set_order_qty(::google::protobuf::int64 value);

  // required int64 match_qty = 6;
  bool has_match_qty() const;
  void clear_match_qty();
  static const int kMatchQtyFieldNumber = 6;
  ::google::protobuf::int64 match_qty() const;
  void set_match_qty(::google::protobuf::int64 value);

  // required int64 order_price = 7;
  bool has_order_price() const;
  void clear_order_price();
  static const int kOrderPriceFieldNumber = 7;
  ::google::protobuf::int64 order_price() const;
  void set_order_price(::google::protobuf::int64 value);

  // required double match_amount = 8 [default = 0];
  bool has_match_amount() const;
  void clear_match_amount();
  static const int kMatchAmountFieldNumber = 8;
  double match_amount() const;
  void set_match_amount(double value);

  // required double clear_amount = 9 [default = 0];
  bool has_clear_amount() const;
  void clear_clear_amount();
  static const int kClearAmountFieldNumber = 9;
  double clear_amount() const;
  void set_clear_amount(double value);

  // optional double match_price = 10 [default = 0];
  bool has_match_price() const;
  void clear_match_price();
  static const int kMatchPriceFieldNumber = 10;
  double match_price() const;
  void set_match_price(double value);

  // @@protoc_insertion_point(class_scope:quotation.SecurityOrderInfo)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_trading_day();
  void clear_has_trading_day();
  void set_has_stamp();
  void clear_has_stamp();
  void set_has_stkcode();
  void clear_has_stkcode();
  void set_has_order_qty();
  void clear_has_order_qty();
  void set_has_match_qty();
  void clear_has_match_qty();
  void set_has_order_price();
  void clear_has_order_price();
  void set_has_match_amount();
  void clear_has_match_amount();
  void set_has_clear_amount();
  void clear_has_clear_amount();
  void set_has_match_price();
  void clear_has_match_price();
  void set_has_last_match_id();
  void clear_has_last_match_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr stkcode_;
  ::google::protobuf::internal::ArenaStringPtr last_match_id_;
  ::google::protobuf::uint32 trading_day_;
  ::google::protobuf::uint32 stamp_;
  ::google::protobuf::int64 order_qty_;
  ::google::protobuf::int64 match_qty_;
  ::google::protobuf::int64 order_price_;
  double match_amount_;
  double clear_amount_;
  double match_price_;
  friend struct ::protobuf_protos_2fquotation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PublicOrderData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quotation.PublicOrderData) */ {
 public:
  PublicOrderData();
  virtual ~PublicOrderData();

  PublicOrderData(const PublicOrderData& from);

  inline PublicOrderData& operator=(const PublicOrderData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PublicOrderData(PublicOrderData&& from) noexcept
    : PublicOrderData() {
    *this = ::std::move(from);
  }

  inline PublicOrderData& operator=(PublicOrderData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PublicOrderData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublicOrderData* internal_default_instance() {
    return reinterpret_cast<const PublicOrderData*>(
               &_PublicOrderData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(PublicOrderData* other);
  friend void swap(PublicOrderData& a, PublicOrderData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PublicOrderData* New() const final {
    return CreateMaybeMessage<PublicOrderData>(NULL);
  }

  PublicOrderData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PublicOrderData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PublicOrderData& from);
  void MergeFrom(const PublicOrderData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublicOrderData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1 [default = "D"];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional string code = 4;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 4;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string order_no = 7;
  bool has_order_no() const;
  void clear_order_no();
  static const int kOrderNoFieldNumber = 7;
  const ::std::string& order_no() const;
  void set_order_no(const ::std::string& value);
  #if LANG_CXX11
  void set_order_no(::std::string&& value);
  #endif
  void set_order_no(const char* value);
  void set_order_no(const char* value, size_t size);
  ::std::string* mutable_order_no();
  ::std::string* release_order_no();
  void set_allocated_order_no(::std::string* order_no);

  // optional string order_type = 10;
  bool has_order_type() const;
  void clear_order_type();
  static const int kOrderTypeFieldNumber = 10;
  const ::std::string& order_type() const;
  void set_order_type(const ::std::string& value);
  #if LANG_CXX11
  void set_order_type(::std::string&& value);
  #endif
  void set_order_type(const char* value);
  void set_order_type(const char* value, size_t size);
  ::std::string* mutable_order_type();
  ::std::string* release_order_type();
  void set_allocated_order_type(::std::string* order_type);

  // optional uint32 trading_day = 2;
  bool has_trading_day() const;
  void clear_trading_day();
  static const int kTradingDayFieldNumber = 2;
  ::google::protobuf::uint32 trading_day() const;
  void set_trading_day(::google::protobuf::uint32 value);

  // required uint32 stamp = 3;
  bool has_stamp() const;
  void clear_stamp();
  static const int kStampFieldNumber = 3;
  ::google::protobuf::uint32 stamp() const;
  void set_stamp(::google::protobuf::uint32 value);

  // optional int64 order_day = 5;
  bool has_order_day() const;
  void clear_order_day();
  static const int kOrderDayFieldNumber = 5;
  ::google::protobuf::int64 order_day() const;
  void set_order_day(::google::protobuf::int64 value);

  // optional int64 order_time = 6;
  bool has_order_time() const;
  void clear_order_time();
  static const int kOrderTimeFieldNumber = 6;
  ::google::protobuf::int64 order_time() const;
  void set_order_time(::google::protobuf::int64 value);

  // optional int64 order_price = 8;
  bool has_order_price() const;
  void clear_order_price();
  static const int kOrderPriceFieldNumber = 8;
  ::google::protobuf::int64 order_price() const;
  void set_order_price(::google::protobuf::int64 value);

  // optional int64 order_qty = 9;
  bool has_order_qty() const;
  void clear_order_qty();
  static const int kOrderQtyFieldNumber = 9;
  ::google::protobuf::int64 order_qty() const;
  void set_order_qty(::google::protobuf::int64 value);

  // optional int64 bs_flag = 11;
  bool has_bs_flag() const;
  void clear_bs_flag();
  static const int kBsFlagFieldNumber = 11;
  ::google::protobuf::int64 bs_flag() const;
  void set_bs_flag(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:quotation.PublicOrderData)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_trading_day();
  void clear_has_trading_day();
  void set_has_stamp();
  void clear_has_stamp();
  void set_has_code();
  void clear_has_code();
  void set_has_order_day();
  void clear_has_order_day();
  void set_has_order_time();
  void clear_has_order_time();
  void set_has_order_no();
  void clear_has_order_no();
  void set_has_order_price();
  void clear_has_order_price();
  void set_has_order_qty();
  void clear_has_order_qty();
  void set_has_order_type();
  void clear_has_order_type();
  void set_has_bs_flag();
  void clear_has_bs_flag();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_type_;
  private:
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr order_no_;
  ::google::protobuf::internal::ArenaStringPtr order_type_;
  ::google::protobuf::uint32 trading_day_;
  ::google::protobuf::uint32 stamp_;
  ::google::protobuf::int64 order_day_;
  ::google::protobuf::int64 order_time_;
  ::google::protobuf::int64 order_price_;
  ::google::protobuf::int64 order_qty_;
  ::google::protobuf::int64 bs_flag_;
  friend struct ::protobuf_protos_2fquotation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PublicOrderQueueData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quotation.PublicOrderQueueData) */ {
 public:
  PublicOrderQueueData();
  virtual ~PublicOrderQueueData();

  PublicOrderQueueData(const PublicOrderQueueData& from);

  inline PublicOrderQueueData& operator=(const PublicOrderQueueData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PublicOrderQueueData(PublicOrderQueueData&& from) noexcept
    : PublicOrderQueueData() {
    *this = ::std::move(from);
  }

  inline PublicOrderQueueData& operator=(PublicOrderQueueData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PublicOrderQueueData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublicOrderQueueData* internal_default_instance() {
    return reinterpret_cast<const PublicOrderQueueData*>(
               &_PublicOrderQueueData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(PublicOrderQueueData* other);
  friend void swap(PublicOrderQueueData& a, PublicOrderQueueData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PublicOrderQueueData* New() const final {
    return CreateMaybeMessage<PublicOrderQueueData>(NULL);
  }

  PublicOrderQueueData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PublicOrderQueueData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PublicOrderQueueData& from);
  void MergeFrom(const PublicOrderQueueData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublicOrderQueueData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 volumes = 10;
  int volumes_size() const;
  void clear_volumes();
  static const int kVolumesFieldNumber = 10;
  ::google::protobuf::int64 volumes(int index) const;
  void set_volumes(int index, ::google::protobuf::int64 value);
  void add_volumes(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      volumes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_volumes();

  // optional string type = 1 [default = "Q"];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional string code = 4;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 4;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional uint32 trading_day = 2;
  bool has_trading_day() const;
  void clear_trading_day();
  static const int kTradingDayFieldNumber = 2;
  ::google::protobuf::uint32 trading_day() const;
  void set_trading_day(::google::protobuf::uint32 value);

  // required uint32 stamp = 3;
  bool has_stamp() const;
  void clear_stamp();
  static const int kStampFieldNumber = 3;
  ::google::protobuf::uint32 stamp() const;
  void set_stamp(::google::protobuf::uint32 value);

  // optional int64 order_day = 5;
  bool has_order_day() const;
  void clear_order_day();
  static const int kOrderDayFieldNumber = 5;
  ::google::protobuf::int64 order_day() const;
  void set_order_day(::google::protobuf::int64 value);

  // optional int64 order_time = 6;
  bool has_order_time() const;
  void clear_order_time();
  static const int kOrderTimeFieldNumber = 6;
  ::google::protobuf::int64 order_time() const;
  void set_order_time(::google::protobuf::int64 value);

  // optional int64 bs_flag = 7;
  bool has_bs_flag() const;
  void clear_bs_flag();
  static const int kBsFlagFieldNumber = 7;
  ::google::protobuf::int64 bs_flag() const;
  void set_bs_flag(::google::protobuf::int64 value);

  // optional int64 order_price = 8;
  bool has_order_price() const;
  void clear_order_price();
  static const int kOrderPriceFieldNumber = 8;
  ::google::protobuf::int64 order_price() const;
  void set_order_price(::google::protobuf::int64 value);

  // optional int64 order_qty = 9;
  bool has_order_qty() const;
  void clear_order_qty();
  static const int kOrderQtyFieldNumber = 9;
  ::google::protobuf::int64 order_qty() const;
  void set_order_qty(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:quotation.PublicOrderQueueData)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_trading_day();
  void clear_has_trading_day();
  void set_has_stamp();
  void clear_has_stamp();
  void set_has_code();
  void clear_has_code();
  void set_has_order_day();
  void clear_has_order_day();
  void set_has_order_time();
  void clear_has_order_time();
  void set_has_bs_flag();
  void clear_has_bs_flag();
  void set_has_order_price();
  void clear_has_order_price();
  void set_has_order_qty();
  void clear_has_order_qty();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > volumes_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_type_;
  private:
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::uint32 trading_day_;
  ::google::protobuf::uint32 stamp_;
  ::google::protobuf::int64 order_day_;
  ::google::protobuf::int64 order_time_;
  ::google::protobuf::int64 bs_flag_;
  ::google::protobuf::int64 order_price_;
  ::google::protobuf::int64 order_qty_;
  friend struct ::protobuf_protos_2fquotation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PublicOrderTransaction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quotation.PublicOrderTransaction) */ {
 public:
  PublicOrderTransaction();
  virtual ~PublicOrderTransaction();

  PublicOrderTransaction(const PublicOrderTransaction& from);

  inline PublicOrderTransaction& operator=(const PublicOrderTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PublicOrderTransaction(PublicOrderTransaction&& from) noexcept
    : PublicOrderTransaction() {
    *this = ::std::move(from);
  }

  inline PublicOrderTransaction& operator=(PublicOrderTransaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PublicOrderTransaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublicOrderTransaction* internal_default_instance() {
    return reinterpret_cast<const PublicOrderTransaction*>(
               &_PublicOrderTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(PublicOrderTransaction* other);
  friend void swap(PublicOrderTransaction& a, PublicOrderTransaction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PublicOrderTransaction* New() const final {
    return CreateMaybeMessage<PublicOrderTransaction>(NULL);
  }

  PublicOrderTransaction* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PublicOrderTransaction>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PublicOrderTransaction& from);
  void MergeFrom(const PublicOrderTransaction& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublicOrderTransaction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1 [default = "T"];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional string code = 4;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 4;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string match_id = 7;
  bool has_match_id() const;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 7;
  const ::std::string& match_id() const;
  void set_match_id(const ::std::string& value);
  #if LANG_CXX11
  void set_match_id(::std::string&& value);
  #endif
  void set_match_id(const char* value);
  void set_match_id(const char* value, size_t size);
  ::std::string* mutable_match_id();
  ::std::string* release_match_id();
  void set_allocated_match_id(::std::string* match_id);

  // optional string match_kind = 12;
  bool has_match_kind() const;
  void clear_match_kind();
  static const int kMatchKindFieldNumber = 12;
  const ::std::string& match_kind() const;
  void set_match_kind(const ::std::string& value);
  #if LANG_CXX11
  void set_match_kind(::std::string&& value);
  #endif
  void set_match_kind(const char* value);
  void set_match_kind(const char* value, size_t size);
  ::std::string* mutable_match_kind();
  ::std::string* release_match_kind();
  void set_allocated_match_kind(::std::string* match_kind);

  // optional string match_code = 13;
  bool has_match_code() const;
  void clear_match_code();
  static const int kMatchCodeFieldNumber = 13;
  const ::std::string& match_code() const;
  void set_match_code(const ::std::string& value);
  #if LANG_CXX11
  void set_match_code(::std::string&& value);
  #endif
  void set_match_code(const char* value);
  void set_match_code(const char* value, size_t size);
  ::std::string* mutable_match_code();
  ::std::string* release_match_code();
  void set_allocated_match_code(::std::string* match_code);

  // optional string ask_order_no = 14;
  bool has_ask_order_no() const;
  void clear_ask_order_no();
  static const int kAskOrderNoFieldNumber = 14;
  const ::std::string& ask_order_no() const;
  void set_ask_order_no(const ::std::string& value);
  #if LANG_CXX11
  void set_ask_order_no(::std::string&& value);
  #endif
  void set_ask_order_no(const char* value);
  void set_ask_order_no(const char* value, size_t size);
  ::std::string* mutable_ask_order_no();
  ::std::string* release_ask_order_no();
  void set_allocated_ask_order_no(::std::string* ask_order_no);

  // optional string bid_order_no = 15;
  bool has_bid_order_no() const;
  void clear_bid_order_no();
  static const int kBidOrderNoFieldNumber = 15;
  const ::std::string& bid_order_no() const;
  void set_bid_order_no(const ::std::string& value);
  #if LANG_CXX11
  void set_bid_order_no(::std::string&& value);
  #endif
  void set_bid_order_no(const char* value);
  void set_bid_order_no(const char* value, size_t size);
  ::std::string* mutable_bid_order_no();
  ::std::string* release_bid_order_no();
  void set_allocated_bid_order_no(::std::string* bid_order_no);

  // optional uint32 trading_day = 2;
  bool has_trading_day() const;
  void clear_trading_day();
  static const int kTradingDayFieldNumber = 2;
  ::google::protobuf::uint32 trading_day() const;
  void set_trading_day(::google::protobuf::uint32 value);

  // required uint32 stamp = 3;
  bool has_stamp() const;
  void clear_stamp();
  static const int kStampFieldNumber = 3;
  ::google::protobuf::uint32 stamp() const;
  void set_stamp(::google::protobuf::uint32 value);

  // optional int64 match_day = 5;
  bool has_match_day() const;
  void clear_match_day();
  static const int kMatchDayFieldNumber = 5;
  ::google::protobuf::int64 match_day() const;
  void set_match_day(::google::protobuf::int64 value);

  // optional int64 match_time = 6;
  bool has_match_time() const;
  void clear_match_time();
  static const int kMatchTimeFieldNumber = 6;
  ::google::protobuf::int64 match_time() const;
  void set_match_time(::google::protobuf::int64 value);

  // optional int64 match_price = 8;
  bool has_match_price() const;
  void clear_match_price();
  static const int kMatchPriceFieldNumber = 8;
  ::google::protobuf::int64 match_price() const;
  void set_match_price(::google::protobuf::int64 value);

  // optional int64 match_qty = 9;
  bool has_match_qty() const;
  void clear_match_qty();
  static const int kMatchQtyFieldNumber = 9;
  ::google::protobuf::int64 match_qty() const;
  void set_match_qty(::google::protobuf::int64 value);

  // optional int64 match_amt = 10;
  bool has_match_amt() const;
  void clear_match_amt();
  static const int kMatchAmtFieldNumber = 10;
  ::google::protobuf::int64 match_amt() const;
  void set_match_amt(::google::protobuf::int64 value);

  // optional int64 bs_flag = 11;
  bool has_bs_flag() const;
  void clear_bs_flag();
  static const int kBsFlagFieldNumber = 11;
  ::google::protobuf::int64 bs_flag() const;
  void set_bs_flag(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:quotation.PublicOrderTransaction)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_trading_day();
  void clear_has_trading_day();
  void set_has_stamp();
  void clear_has_stamp();
  void set_has_code();
  void clear_has_code();
  void set_has_match_day();
  void clear_has_match_day();
  void set_has_match_time();
  void clear_has_match_time();
  void set_has_match_id();
  void clear_has_match_id();
  void set_has_match_price();
  void clear_has_match_price();
  void set_has_match_qty();
  void clear_has_match_qty();
  void set_has_match_amt();
  void clear_has_match_amt();
  void set_has_bs_flag();
  void clear_has_bs_flag();
  void set_has_match_kind();
  void clear_has_match_kind();
  void set_has_match_code();
  void clear_has_match_code();
  void set_has_ask_order_no();
  void clear_has_ask_order_no();
  void set_has_bid_order_no();
  void clear_has_bid_order_no();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_type_;
  private:
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr match_id_;
  ::google::protobuf::internal::ArenaStringPtr match_kind_;
  ::google::protobuf::internal::ArenaStringPtr match_code_;
  ::google::protobuf::internal::ArenaStringPtr ask_order_no_;
  ::google::protobuf::internal::ArenaStringPtr bid_order_no_;
  ::google::protobuf::uint32 trading_day_;
  ::google::protobuf::uint32 stamp_;
  ::google::protobuf::int64 match_day_;
  ::google::protobuf::int64 match_time_;
  ::google::protobuf::int64 match_price_;
  ::google::protobuf::int64 match_qty_;
  ::google::protobuf::int64 match_amt_;
  ::google::protobuf::int64 bs_flag_;
  friend struct ::protobuf_protos_2fquotation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CurrentBasis : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quotation.CurrentBasis) */ {
 public:
  CurrentBasis();
  virtual ~CurrentBasis();

  CurrentBasis(const CurrentBasis& from);

  inline CurrentBasis& operator=(const CurrentBasis& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CurrentBasis(CurrentBasis&& from) noexcept
    : CurrentBasis() {
    *this = ::std::move(from);
  }

  inline CurrentBasis& operator=(CurrentBasis&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CurrentBasis& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CurrentBasis* internal_default_instance() {
    return reinterpret_cast<const CurrentBasis*>(
               &_CurrentBasis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(CurrentBasis* other);
  friend void swap(CurrentBasis& a, CurrentBasis& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CurrentBasis* New() const final {
    return CreateMaybeMessage<CurrentBasis>(NULL);
  }

  CurrentBasis* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CurrentBasis>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CurrentBasis& from);
  void MergeFrom(const CurrentBasis& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CurrentBasis* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1 [default = "B"];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required string code = 5;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 5;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional uint32 trading_day = 2;
  bool has_trading_day() const;
  void clear_trading_day();
  static const int kTradingDayFieldNumber = 2;
  ::google::protobuf::uint32 trading_day() const;
  void set_trading_day(::google::protobuf::uint32 value);

  // required uint32 stamp = 3;
  bool has_stamp() const;
  void clear_stamp();
  static const int kStampFieldNumber = 3;
  ::google::protobuf::uint32 stamp() const;
  void set_stamp(::google::protobuf::uint32 value);

  // required double create = 6;
  bool has_create() const;
  void clear_create();
  static const int kCreateFieldNumber = 6;
  double create() const;
  void set_create(double value);

  // required double buy = 7;
  bool has_buy() const;
  void clear_buy();
  static const int kBuyFieldNumber = 7;
  double buy() const;
  void set_buy(double value);

  // required double sell = 8;
  bool has_sell() const;
  void clear_sell();
  static const int kSellFieldNumber = 8;
  double sell() const;
  void set_sell(double value);

  // required double redeem = 9;
  bool has_redeem() const;
  void clear_redeem();
  static const int kRedeemFieldNumber = 9;
  double redeem() const;
  void set_redeem(double value);

  // required uint32 date_time = 4;
  bool has_date_time() const;
  void clear_date_time();
  static const int kDateTimeFieldNumber = 4;
  ::google::protobuf::uint32 date_time() const;
  void set_date_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:quotation.CurrentBasis)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_trading_day();
  void clear_has_trading_day();
  void set_has_stamp();
  void clear_has_stamp();
  void set_has_date_time();
  void clear_has_date_time();
  void set_has_code();
  void clear_has_code();
  void set_has_create();
  void clear_has_create();
  void set_has_buy();
  void clear_has_buy();
  void set_has_sell();
  void clear_has_sell();
  void set_has_redeem();
  void clear_has_redeem();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_type_;
  private:
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::uint32 trading_day_;
  ::google::protobuf::uint32 stamp_;
  double create_;
  double buy_;
  double sell_;
  double redeem_;
  ::google::protobuf::uint32 date_time_;
  friend struct ::protobuf_protos_2fquotation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CircleQuotation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quotation.CircleQuotation) */ {
 public:
  CircleQuotation();
  virtual ~CircleQuotation();

  CircleQuotation(const CircleQuotation& from);

  inline CircleQuotation& operator=(const CircleQuotation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CircleQuotation(CircleQuotation&& from) noexcept
    : CircleQuotation() {
    *this = ::std::move(from);
  }

  inline CircleQuotation& operator=(CircleQuotation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CircleQuotation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CircleQuotation* internal_default_instance() {
    return reinterpret_cast<const CircleQuotation*>(
               &_CircleQuotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(CircleQuotation* other);
  friend void swap(CircleQuotation& a, CircleQuotation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CircleQuotation* New() const final {
    return CreateMaybeMessage<CircleQuotation>(NULL);
  }

  CircleQuotation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CircleQuotation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CircleQuotation& from);
  void MergeFrom(const CircleQuotation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CircleQuotation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1 [default = "CIRCLE"];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required string code = 5;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 5;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional uint32 trading_day = 2;
  bool has_trading_day() const;
  void clear_trading_day();
  static const int kTradingDayFieldNumber = 2;
  ::google::protobuf::uint32 trading_day() const;
  void set_trading_day(::google::protobuf::uint32 value);

  // required uint32 stamp = 3;
  bool has_stamp() const;
  void clear_stamp();
  static const int kStampFieldNumber = 3;
  ::google::protobuf::uint32 stamp() const;
  void set_stamp(::google::protobuf::uint32 value);

  // required int64 open = 7;
  bool has_open() const;
  void clear_open();
  static const int kOpenFieldNumber = 7;
  ::google::protobuf::int64 open() const;
  void set_open(::google::protobuf::int64 value);

  // required int64 high = 8;
  bool has_high() const;
  void clear_high();
  static const int kHighFieldNumber = 8;
  ::google::protobuf::int64 high() const;
  void set_high(::google::protobuf::int64 value);

  // required int64 low = 9;
  bool has_low() const;
  void clear_low();
  static const int kLowFieldNumber = 9;
  ::google::protobuf::int64 low() const;
  void set_low(::google::protobuf::int64 value);

  // required int64 close = 10;
  bool has_close() const;
  void clear_close();
  static const int kCloseFieldNumber = 10;
  ::google::protobuf::int64 close() const;
  void set_close(::google::protobuf::int64 value);

  // required int32 circle = 6;
  bool has_circle() const;
  void clear_circle();
  static const int kCircleFieldNumber = 6;
  ::google::protobuf::int32 circle() const;
  void set_circle(::google::protobuf::int32 value);

  // optional int32 funcid = 4 [default = 10000004];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 4;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:quotation.CircleQuotation)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_trading_day();
  void clear_has_trading_day();
  void set_has_stamp();
  void clear_has_stamp();
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_code();
  void clear_has_code();
  void set_has_circle();
  void clear_has_circle();
  void set_has_open();
  void clear_has_open();
  void set_has_high();
  void clear_has_high();
  void set_has_low();
  void clear_has_low();
  void set_has_close();
  void clear_has_close();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_type_;
  private:
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::uint32 trading_day_;
  ::google::protobuf::uint32 stamp_;
  ::google::protobuf::int64 open_;
  ::google::protobuf::int64 high_;
  ::google::protobuf::int64 low_;
  ::google::protobuf::int64 close_;
  ::google::protobuf::int32 circle_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fquotation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OptionVolatilitySurface_Value : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quotation.OptionVolatilitySurface.Value) */ {
 public:
  OptionVolatilitySurface_Value();
  virtual ~OptionVolatilitySurface_Value();

  OptionVolatilitySurface_Value(const OptionVolatilitySurface_Value& from);

  inline OptionVolatilitySurface_Value& operator=(const OptionVolatilitySurface_Value& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionVolatilitySurface_Value(OptionVolatilitySurface_Value&& from) noexcept
    : OptionVolatilitySurface_Value() {
    *this = ::std::move(from);
  }

  inline OptionVolatilitySurface_Value& operator=(OptionVolatilitySurface_Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionVolatilitySurface_Value& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionVolatilitySurface_Value* internal_default_instance() {
    return reinterpret_cast<const OptionVolatilitySurface_Value*>(
               &_OptionVolatilitySurface_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(OptionVolatilitySurface_Value* other);
  friend void swap(OptionVolatilitySurface_Value& a, OptionVolatilitySurface_Value& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionVolatilitySurface_Value* New() const final {
    return CreateMaybeMessage<OptionVolatilitySurface_Value>(NULL);
  }

  OptionVolatilitySurface_Value* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OptionVolatilitySurface_Value>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OptionVolatilitySurface_Value& from);
  void MergeFrom(const OptionVolatilitySurface_Value& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionVolatilitySurface_Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double value = 1;
  int value_size() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  double value(int index) const;
  void set_value(int index, double value);
  void add_value(double value);
  const ::google::protobuf::RepeatedField< double >&
      value() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:quotation.OptionVolatilitySurface.Value)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< double > value_;
  friend struct ::protobuf_protos_2fquotation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OptionVolatilitySurface : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quotation.OptionVolatilitySurface) */ {
 public:
  OptionVolatilitySurface();
  virtual ~OptionVolatilitySurface();

  OptionVolatilitySurface(const OptionVolatilitySurface& from);

  inline OptionVolatilitySurface& operator=(const OptionVolatilitySurface& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionVolatilitySurface(OptionVolatilitySurface&& from) noexcept
    : OptionVolatilitySurface() {
    *this = ::std::move(from);
  }

  inline OptionVolatilitySurface& operator=(OptionVolatilitySurface&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionVolatilitySurface& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionVolatilitySurface* internal_default_instance() {
    return reinterpret_cast<const OptionVolatilitySurface*>(
               &_OptionVolatilitySurface_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(OptionVolatilitySurface* other);
  friend void swap(OptionVolatilitySurface& a, OptionVolatilitySurface& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionVolatilitySurface* New() const final {
    return CreateMaybeMessage<OptionVolatilitySurface>(NULL);
  }

  OptionVolatilitySurface* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OptionVolatilitySurface>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OptionVolatilitySurface& from);
  void MergeFrom(const OptionVolatilitySurface& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionVolatilitySurface* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OptionVolatilitySurface_Value Value;

  // accessors -------------------------------------------------------

  // repeated double x = 2;
  int x_size() const;
  void clear_x();
  static const int kXFieldNumber = 2;
  double x(int index) const;
  void set_x(int index, double value);
  void add_x(double value);
  const ::google::protobuf::RepeatedField< double >&
      x() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_x();

  // repeated uint32 y = 3;
  int y_size() const;
  void clear_y();
  static const int kYFieldNumber = 3;
  ::google::protobuf::uint32 y(int index) const;
  void set_y(int index, ::google::protobuf::uint32 value);
  void add_y(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      y() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_y();

  // repeated .quotation.OptionVolatilitySurface.Value v = 4;
  int v_size() const;
  void clear_v();
  static const int kVFieldNumber = 4;
  ::quotation::OptionVolatilitySurface_Value* mutable_v(int index);
  ::google::protobuf::RepeatedPtrField< ::quotation::OptionVolatilitySurface_Value >*
      mutable_v();
  const ::quotation::OptionVolatilitySurface_Value& v(int index) const;
  ::quotation::OptionVolatilitySurface_Value* add_v();
  const ::google::protobuf::RepeatedPtrField< ::quotation::OptionVolatilitySurface_Value >&
      v() const;

  // required string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:quotation.OptionVolatilitySurface)
 private:
  void set_has_id();
  void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< double > x_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > y_;
  ::google::protobuf::RepeatedPtrField< ::quotation::OptionVolatilitySurface_Value > v_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  friend struct ::protobuf_protos_2fquotation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OptionVolatilitySurfaces : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quotation.OptionVolatilitySurfaces) */ {
 public:
  OptionVolatilitySurfaces();
  virtual ~OptionVolatilitySurfaces();

  OptionVolatilitySurfaces(const OptionVolatilitySurfaces& from);

  inline OptionVolatilitySurfaces& operator=(const OptionVolatilitySurfaces& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionVolatilitySurfaces(OptionVolatilitySurfaces&& from) noexcept
    : OptionVolatilitySurfaces() {
    *this = ::std::move(from);
  }

  inline OptionVolatilitySurfaces& operator=(OptionVolatilitySurfaces&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionVolatilitySurfaces& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionVolatilitySurfaces* internal_default_instance() {
    return reinterpret_cast<const OptionVolatilitySurfaces*>(
               &_OptionVolatilitySurfaces_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(OptionVolatilitySurfaces* other);
  friend void swap(OptionVolatilitySurfaces& a, OptionVolatilitySurfaces& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionVolatilitySurfaces* New() const final {
    return CreateMaybeMessage<OptionVolatilitySurfaces>(NULL);
  }

  OptionVolatilitySurfaces* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OptionVolatilitySurfaces>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OptionVolatilitySurfaces& from);
  void MergeFrom(const OptionVolatilitySurfaces& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionVolatilitySurfaces* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .quotation.OptionVolatilitySurface items = 2;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 2;
  ::quotation::OptionVolatilitySurface* mutable_items(int index);
  ::google::protobuf::RepeatedPtrField< ::quotation::OptionVolatilitySurface >*
      mutable_items();
  const ::quotation::OptionVolatilitySurface& items(int index) const;
  ::quotation::OptionVolatilitySurface* add_items();
  const ::google::protobuf::RepeatedPtrField< ::quotation::OptionVolatilitySurface >&
      items() const;

  // required string underlying_code = 1;
  bool has_underlying_code() const;
  void clear_underlying_code();
  static const int kUnderlyingCodeFieldNumber = 1;
  const ::std::string& underlying_code() const;
  void set_underlying_code(const ::std::string& value);
  #if LANG_CXX11
  void set_underlying_code(::std::string&& value);
  #endif
  void set_underlying_code(const char* value);
  void set_underlying_code(const char* value, size_t size);
  ::std::string* mutable_underlying_code();
  ::std::string* release_underlying_code();
  void set_allocated_underlying_code(::std::string* underlying_code);

  // optional string default_id = 3;
  bool has_default_id() const;
  void clear_default_id();
  static const int kDefaultIdFieldNumber = 3;
  const ::std::string& default_id() const;
  void set_default_id(const ::std::string& value);
  #if LANG_CXX11
  void set_default_id(::std::string&& value);
  #endif
  void set_default_id(const char* value);
  void set_default_id(const char* value, size_t size);
  ::std::string* mutable_default_id();
  ::std::string* release_default_id();
  void set_allocated_default_id(::std::string* default_id);

  // @@protoc_insertion_point(class_scope:quotation.OptionVolatilitySurfaces)
 private:
  void set_has_underlying_code();
  void clear_has_underlying_code();
  void set_has_default_id();
  void clear_has_default_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::quotation::OptionVolatilitySurface > items_;
  ::google::protobuf::internal::ArenaStringPtr underlying_code_;
  ::google::protobuf::internal::ArenaStringPtr default_id_;
  friend struct ::protobuf_protos_2fquotation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetOptionVolatilitySurfacesReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quotation.SetOptionVolatilitySurfacesReq) */ {
 public:
  SetOptionVolatilitySurfacesReq();
  virtual ~SetOptionVolatilitySurfacesReq();

  SetOptionVolatilitySurfacesReq(const SetOptionVolatilitySurfacesReq& from);

  inline SetOptionVolatilitySurfacesReq& operator=(const SetOptionVolatilitySurfacesReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetOptionVolatilitySurfacesReq(SetOptionVolatilitySurfacesReq&& from) noexcept
    : SetOptionVolatilitySurfacesReq() {
    *this = ::std::move(from);
  }

  inline SetOptionVolatilitySurfacesReq& operator=(SetOptionVolatilitySurfacesReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetOptionVolatilitySurfacesReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetOptionVolatilitySurfacesReq* internal_default_instance() {
    return reinterpret_cast<const SetOptionVolatilitySurfacesReq*>(
               &_SetOptionVolatilitySurfacesReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(SetOptionVolatilitySurfacesReq* other);
  friend void swap(SetOptionVolatilitySurfacesReq& a, SetOptionVolatilitySurfacesReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetOptionVolatilitySurfacesReq* New() const final {
    return CreateMaybeMessage<SetOptionVolatilitySurfacesReq>(NULL);
  }

  SetOptionVolatilitySurfacesReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetOptionVolatilitySurfacesReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetOptionVolatilitySurfacesReq& from);
  void MergeFrom(const SetOptionVolatilitySurfacesReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetOptionVolatilitySurfacesReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .quotation.OptionVolatilitySurfaces data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  private:
  const ::quotation::OptionVolatilitySurfaces& _internal_data() const;
  public:
  const ::quotation::OptionVolatilitySurfaces& data() const;
  ::quotation::OptionVolatilitySurfaces* release_data();
  ::quotation::OptionVolatilitySurfaces* mutable_data();
  void set_allocated_data(::quotation::OptionVolatilitySurfaces* data);

  // optional int32 funcid = 1 [default = 21000001];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:quotation.SetOptionVolatilitySurfacesReq)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_data();
  void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::quotation::OptionVolatilitySurfaces* data_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fquotation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetOptionVolatilitySurfacesRep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quotation.SetOptionVolatilitySurfacesRep) */ {
 public:
  SetOptionVolatilitySurfacesRep();
  virtual ~SetOptionVolatilitySurfacesRep();

  SetOptionVolatilitySurfacesRep(const SetOptionVolatilitySurfacesRep& from);

  inline SetOptionVolatilitySurfacesRep& operator=(const SetOptionVolatilitySurfacesRep& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetOptionVolatilitySurfacesRep(SetOptionVolatilitySurfacesRep&& from) noexcept
    : SetOptionVolatilitySurfacesRep() {
    *this = ::std::move(from);
  }

  inline SetOptionVolatilitySurfacesRep& operator=(SetOptionVolatilitySurfacesRep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetOptionVolatilitySurfacesRep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetOptionVolatilitySurfacesRep* internal_default_instance() {
    return reinterpret_cast<const SetOptionVolatilitySurfacesRep*>(
               &_SetOptionVolatilitySurfacesRep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(SetOptionVolatilitySurfacesRep* other);
  friend void swap(SetOptionVolatilitySurfacesRep& a, SetOptionVolatilitySurfacesRep& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetOptionVolatilitySurfacesRep* New() const final {
    return CreateMaybeMessage<SetOptionVolatilitySurfacesRep>(NULL);
  }

  SetOptionVolatilitySurfacesRep* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetOptionVolatilitySurfacesRep>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetOptionVolatilitySurfacesRep& from);
  void MergeFrom(const SetOptionVolatilitySurfacesRep& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetOptionVolatilitySurfacesRep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg = 3;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 3;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional int64 rc = 2;
  bool has_rc() const;
  void clear_rc();
  static const int kRcFieldNumber = 2;
  ::google::protobuf::int64 rc() const;
  void set_rc(::google::protobuf::int64 value);

  // optional int32 funcid = 1 [default = 21100001];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:quotation.SetOptionVolatilitySurfacesRep)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_rc();
  void clear_has_rc();
  void set_has_msg();
  void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int64 rc_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fquotation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SecurityState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quotation.SecurityState) */ {
 public:
  SecurityState();
  virtual ~SecurityState();

  SecurityState(const SecurityState& from);

  inline SecurityState& operator=(const SecurityState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SecurityState(SecurityState&& from) noexcept
    : SecurityState() {
    *this = ::std::move(from);
  }

  inline SecurityState& operator=(SecurityState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SecurityState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecurityState* internal_default_instance() {
    return reinterpret_cast<const SecurityState*>(
               &_SecurityState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(SecurityState* other);
  friend void swap(SecurityState& a, SecurityState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SecurityState* New() const final {
    return CreateMaybeMessage<SecurityState>(NULL);
  }

  SecurityState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SecurityState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SecurityState& from);
  void MergeFrom(const SecurityState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecurityState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint32 state = 3;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::google::protobuf::uint32 state() const;
  void set_state(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:quotation.SecurityState)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_name();
  void clear_has_name();
  void set_has_state();
  void clear_has_state();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 state_;
  friend struct ::protobuf_protos_2fquotation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SecurityStateList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quotation.SecurityStateList) */ {
 public:
  SecurityStateList();
  virtual ~SecurityStateList();

  SecurityStateList(const SecurityStateList& from);

  inline SecurityStateList& operator=(const SecurityStateList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SecurityStateList(SecurityStateList&& from) noexcept
    : SecurityStateList() {
    *this = ::std::move(from);
  }

  inline SecurityStateList& operator=(SecurityStateList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SecurityStateList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecurityStateList* internal_default_instance() {
    return reinterpret_cast<const SecurityStateList*>(
               &_SecurityStateList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(SecurityStateList* other);
  friend void swap(SecurityStateList& a, SecurityStateList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SecurityStateList* New() const final {
    return CreateMaybeMessage<SecurityStateList>(NULL);
  }

  SecurityStateList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SecurityStateList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SecurityStateList& from);
  void MergeFrom(const SecurityStateList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecurityStateList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .quotation.SecurityState items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  ::quotation::SecurityState* mutable_items(int index);
  ::google::protobuf::RepeatedPtrField< ::quotation::SecurityState >*
      mutable_items();
  const ::quotation::SecurityState& items(int index) const;
  ::quotation::SecurityState* add_items();
  const ::google::protobuf::RepeatedPtrField< ::quotation::SecurityState >&
      items() const;

  // @@protoc_insertion_point(class_scope:quotation.SecurityStateList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::quotation::SecurityState > items_;
  friend struct ::protobuf_protos_2fquotation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TradingDay : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quotation.TradingDay) */ {
 public:
  TradingDay();
  virtual ~TradingDay();

  TradingDay(const TradingDay& from);

  inline TradingDay& operator=(const TradingDay& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TradingDay(TradingDay&& from) noexcept
    : TradingDay() {
    *this = ::std::move(from);
  }

  inline TradingDay& operator=(TradingDay&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TradingDay& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TradingDay* internal_default_instance() {
    return reinterpret_cast<const TradingDay*>(
               &_TradingDay_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(TradingDay* other);
  friend void swap(TradingDay& a, TradingDay& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TradingDay* New() const final {
    return CreateMaybeMessage<TradingDay>(NULL);
  }

  TradingDay* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TradingDay>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TradingDay& from);
  void MergeFrom(const TradingDay& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradingDay* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 data_date = 1;
  bool has_data_date() const;
  void clear_data_date();
  static const int kDataDateFieldNumber = 1;
  ::google::protobuf::uint32 data_date() const;
  void set_data_date(::google::protobuf::uint32 value);

  // optional int32 weekday = 2;
  bool has_weekday() const;
  void clear_weekday();
  static const int kWeekdayFieldNumber = 2;
  ::google::protobuf::int32 weekday() const;
  void set_weekday(::google::protobuf::int32 value);

  // optional int32 is_trading_day = 3;
  bool has_is_trading_day() const;
  void clear_is_trading_day();
  static const int kIsTradingDayFieldNumber = 3;
  ::google::protobuf::int32 is_trading_day() const;
  void set_is_trading_day(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:quotation.TradingDay)
 private:
  void set_has_data_date();
  void clear_has_data_date();
  void set_has_weekday();
  void clear_has_weekday();
  void set_has_is_trading_day();
  void clear_has_is_trading_day();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 data_date_;
  ::google::protobuf::int32 weekday_;
  ::google::protobuf::int32 is_trading_day_;
  friend struct ::protobuf_protos_2fquotation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EtfConstituentStock : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quotation.EtfConstituentStock) */ {
 public:
  EtfConstituentStock();
  virtual ~EtfConstituentStock();

  EtfConstituentStock(const EtfConstituentStock& from);

  inline EtfConstituentStock& operator=(const EtfConstituentStock& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EtfConstituentStock(EtfConstituentStock&& from) noexcept
    : EtfConstituentStock() {
    *this = ::std::move(from);
  }

  inline EtfConstituentStock& operator=(EtfConstituentStock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EtfConstituentStock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EtfConstituentStock* internal_default_instance() {
    return reinterpret_cast<const EtfConstituentStock*>(
               &_EtfConstituentStock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(EtfConstituentStock* other);
  friend void swap(EtfConstituentStock& a, EtfConstituentStock& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EtfConstituentStock* New() const final {
    return CreateMaybeMessage<EtfConstituentStock>(NULL);
  }

  EtfConstituentStock* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EtfConstituentStock>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EtfConstituentStock& from);
  void MergeFrom(const EtfConstituentStock& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EtfConstituentStock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string stock_id = 1;
  bool has_stock_id() const;
  void clear_stock_id();
  static const int kStockIdFieldNumber = 1;
  const ::std::string& stock_id() const;
  void set_stock_id(const ::std::string& value);
  #if LANG_CXX11
  void set_stock_id(::std::string&& value);
  #endif
  void set_stock_id(const char* value);
  void set_stock_id(const char* value, size_t size);
  ::std::string* mutable_stock_id();
  ::std::string* release_stock_id();
  void set_allocated_stock_id(::std::string* stock_id);

  // optional string stock_name = 2;
  bool has_stock_name() const;
  void clear_stock_name();
  static const int kStockNameFieldNumber = 2;
  const ::std::string& stock_name() const;
  void set_stock_name(const ::std::string& value);
  #if LANG_CXX11
  void set_stock_name(::std::string&& value);
  #endif
  void set_stock_name(const char* value);
  void set_stock_name(const char* value, size_t size);
  ::std::string* mutable_stock_name();
  ::std::string* release_stock_name();
  void set_allocated_stock_name(::std::string* stock_name);

  // optional int64 volume = 4;
  bool has_volume() const;
  void clear_volume();
  static const int kVolumeFieldNumber = 4;
  ::google::protobuf::int64 volume() const;
  void set_volume(::google::protobuf::int64 value);

  // optional int32 market = 3;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 3;
  ::google::protobuf::int32 market() const;
  void set_market(::google::protobuf::int32 value);

  // optional int32 cash_replace_flag = 5;
  bool has_cash_replace_flag() const;
  void clear_cash_replace_flag();
  static const int kCashReplaceFlagFieldNumber = 5;
  ::google::protobuf::int32 cash_replace_flag() const;
  void set_cash_replace_flag(::google::protobuf::int32 value);

  // optional double cash_replace_premium_rate = 6;
  bool has_cash_replace_premium_rate() const;
  void clear_cash_replace_premium_rate();
  static const int kCashReplacePremiumRateFieldNumber = 6;
  double cash_replace_premium_rate() const;
  void set_cash_replace_premium_rate(double value);

  // optional double cash_replace_amount = 7;
  bool has_cash_replace_amount() const;
  void clear_cash_replace_amount();
  static const int kCashReplaceAmountFieldNumber = 7;
  double cash_replace_amount() const;
  void set_cash_replace_amount(double value);

  // @@protoc_insertion_point(class_scope:quotation.EtfConstituentStock)
 private:
  void set_has_stock_id();
  void clear_has_stock_id();
  void set_has_stock_name();
  void clear_has_stock_name();
  void set_has_market();
  void clear_has_market();
  void set_has_volume();
  void clear_has_volume();
  void set_has_cash_replace_flag();
  void clear_has_cash_replace_flag();
  void set_has_cash_replace_premium_rate();
  void clear_has_cash_replace_premium_rate();
  void set_has_cash_replace_amount();
  void clear_has_cash_replace_amount();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr stock_id_;
  ::google::protobuf::internal::ArenaStringPtr stock_name_;
  ::google::protobuf::int64 volume_;
  ::google::protobuf::int32 market_;
  ::google::protobuf::int32 cash_replace_flag_;
  double cash_replace_premium_rate_;
  double cash_replace_amount_;
  friend struct ::protobuf_protos_2fquotation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EtfListInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quotation.EtfListInfo) */ {
 public:
  EtfListInfo();
  virtual ~EtfListInfo();

  EtfListInfo(const EtfListInfo& from);

  inline EtfListInfo& operator=(const EtfListInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EtfListInfo(EtfListInfo&& from) noexcept
    : EtfListInfo() {
    *this = ::std::move(from);
  }

  inline EtfListInfo& operator=(EtfListInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EtfListInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EtfListInfo* internal_default_instance() {
    return reinterpret_cast<const EtfListInfo*>(
               &_EtfListInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(EtfListInfo* other);
  friend void swap(EtfListInfo& a, EtfListInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EtfListInfo* New() const final {
    return CreateMaybeMessage<EtfListInfo>(NULL);
  }

  EtfListInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EtfListInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EtfListInfo& from);
  void MergeFrom(const EtfListInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EtfListInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .quotation.EtfConstituentStock stocks = 22;
  int stocks_size() const;
  void clear_stocks();
  static const int kStocksFieldNumber = 22;
  ::quotation::EtfConstituentStock* mutable_stocks(int index);
  ::google::protobuf::RepeatedPtrField< ::quotation::EtfConstituentStock >*
      mutable_stocks();
  const ::quotation::EtfConstituentStock& stocks(int index) const;
  ::quotation::EtfConstituentStock* add_stocks();
  const ::google::protobuf::RepeatedPtrField< ::quotation::EtfConstituentStock >&
      stocks() const;

  // optional string stock_id = 4;
  bool has_stock_id() const;
  void clear_stock_id();
  static const int kStockIdFieldNumber = 4;
  const ::std::string& stock_id() const;
  void set_stock_id(const ::std::string& value);
  #if LANG_CXX11
  void set_stock_id(::std::string&& value);
  #endif
  void set_stock_id(const char* value);
  void set_stock_id(const char* value, size_t size);
  ::std::string* mutable_stock_id();
  ::std::string* release_stock_id();
  void set_allocated_stock_id(::std::string* stock_id);

  // optional string primary_code = 5;
  bool has_primary_code() const;
  void clear_primary_code();
  static const int kPrimaryCodeFieldNumber = 5;
  const ::std::string& primary_code() const;
  void set_primary_code(const ::std::string& value);
  #if LANG_CXX11
  void set_primary_code(::std::string&& value);
  #endif
  void set_primary_code(const char* value);
  void set_primary_code(const char* value, size_t size);
  ::std::string* mutable_primary_code();
  ::std::string* release_primary_code();
  void set_allocated_primary_code(::std::string* primary_code);

  // optional string underlying_code = 6;
  bool has_underlying_code() const;
  void clear_underlying_code();
  static const int kUnderlyingCodeFieldNumber = 6;
  const ::std::string& underlying_code() const;
  void set_underlying_code(const ::std::string& value);
  #if LANG_CXX11
  void set_underlying_code(::std::string&& value);
  #endif
  void set_underlying_code(const char* value);
  void set_underlying_code(const char* value, size_t size);
  ::std::string* mutable_underlying_code();
  ::std::string* release_underlying_code();
  void set_allocated_underlying_code(::std::string* underlying_code);

  // optional string stock_name = 8;
  bool has_stock_name() const;
  void clear_stock_name();
  static const int kStockNameFieldNumber = 8;
  const ::std::string& stock_name() const;
  void set_stock_name(const ::std::string& value);
  #if LANG_CXX11
  void set_stock_name(::std::string&& value);
  #endif
  void set_stock_name(const char* value);
  void set_stock_name(const char* value, size_t size);
  ::std::string* mutable_stock_name();
  ::std::string* release_stock_name();
  void set_allocated_stock_name(::std::string* stock_name);

  // optional string company_name = 9;
  bool has_company_name() const;
  void clear_company_name();
  static const int kCompanyNameFieldNumber = 9;
  const ::std::string& company_name() const;
  void set_company_name(const ::std::string& value);
  #if LANG_CXX11
  void set_company_name(::std::string&& value);
  #endif
  void set_company_name(const char* value);
  void set_company_name(const char* value, size_t size);
  ::std::string* mutable_company_name();
  ::std::string* release_company_name();
  void set_allocated_company_name(::std::string* company_name);

  // required uint32 data_date = 1;
  bool has_data_date() const;
  void clear_data_date();
  static const int kDataDateFieldNumber = 1;
  ::google::protobuf::uint32 data_date() const;
  void set_data_date(::google::protobuf::uint32 value);

  // required uint32 data_time = 2;
  bool has_data_time() const;
  void clear_data_time();
  static const int kDataTimeFieldNumber = 2;
  ::google::protobuf::uint32 data_time() const;
  void set_data_time(::google::protobuf::uint32 value);

  // optional uint32 pre_trading_day = 3;
  bool has_pre_trading_day() const;
  void clear_pre_trading_day();
  static const int kPreTradingDayFieldNumber = 3;
  ::google::protobuf::uint32 pre_trading_day() const;
  void set_pre_trading_day(::google::protobuf::uint32 value);

  // optional int32 market = 7;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 7;
  ::google::protobuf::int32 market() const;
  void set_market(::google::protobuf::int32 value);

  // optional double pre_cash_diff = 10;
  bool has_pre_cash_diff() const;
  void clear_pre_cash_diff();
  static const int kPreCashDiffFieldNumber = 10;
  double pre_cash_diff() const;
  void set_pre_cash_diff(double value);

  // optional double pre_unit_iopv = 11;
  bool has_pre_unit_iopv() const;
  void clear_pre_unit_iopv();
  static const int kPreUnitIopvFieldNumber = 11;
  double pre_unit_iopv() const;
  void set_pre_unit_iopv(double value);

  // optional double pre_iopv = 12;
  bool has_pre_iopv() const;
  void clear_pre_iopv();
  static const int kPreIopvFieldNumber = 12;
  double pre_iopv() const;
  void set_pre_iopv(double value);

  // optional double estimate_cash = 13;
  bool has_estimate_cash() const;
  void clear_estimate_cash();
  static const int kEstimateCashFieldNumber = 13;
  double estimate_cash() const;
  void set_estimate_cash(double value);

  // optional double max_cash_replace_rate = 14;
  bool has_max_cash_replace_rate() const;
  void clear_max_cash_replace_rate();
  static const int kMaxCashReplaceRateFieldNumber = 14;
  double max_cash_replace_rate() const;
  void set_max_cash_replace_rate(double value);

  // optional int64 max_purchase_volume = 15;
  bool has_max_purchase_volume() const;
  void clear_max_purchase_volume();
  static const int kMaxPurchaseVolumeFieldNumber = 15;
  ::google::protobuf::int64 max_purchase_volume() const;
  void set_max_purchase_volume(::google::protobuf::int64 value);

  // optional int64 max_redeem_volume = 16;
  bool has_max_redeem_volume() const;
  void clear_max_redeem_volume();
  static const int kMaxRedeemVolumeFieldNumber = 16;
  ::google::protobuf::int64 max_redeem_volume() const;
  void set_max_redeem_volume(::google::protobuf::int64 value);

  // optional int64 unit_volume = 18;
  bool has_unit_volume() const;
  void clear_unit_volume();
  static const int kUnitVolumeFieldNumber = 18;
  ::google::protobuf::int64 unit_volume() const;
  void set_unit_volume(::google::protobuf::int64 value);

  // optional int32 is_publish_iopv = 17;
  bool has_is_publish_iopv() const;
  void clear_is_publish_iopv();
  static const int kIsPublishIopvFieldNumber = 17;
  ::google::protobuf::int32 is_publish_iopv() const;
  void set_is_publish_iopv(::google::protobuf::int32 value);

  // optional int32 is_open_purchase = 20;
  bool has_is_open_purchase() const;
  void clear_is_open_purchase();
  static const int kIsOpenPurchaseFieldNumber = 20;
  ::google::protobuf::int32 is_open_purchase() const;
  void set_is_open_purchase(::google::protobuf::int32 value);

  // optional int64 compose_count = 19;
  bool has_compose_count() const;
  void clear_compose_count();
  static const int kComposeCountFieldNumber = 19;
  ::google::protobuf::int64 compose_count() const;
  void set_compose_count(::google::protobuf::int64 value);

  // optional int32 is_open_redeem = 21;
  bool has_is_open_redeem() const;
  void clear_is_open_redeem();
  static const int kIsOpenRedeemFieldNumber = 21;
  ::google::protobuf::int32 is_open_redeem() const;
  void set_is_open_redeem(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:quotation.EtfListInfo)
 private:
  void set_has_data_date();
  void clear_has_data_date();
  void set_has_data_time();
  void clear_has_data_time();
  void set_has_pre_trading_day();
  void clear_has_pre_trading_day();
  void set_has_stock_id();
  void clear_has_stock_id();
  void set_has_primary_code();
  void clear_has_primary_code();
  void set_has_underlying_code();
  void clear_has_underlying_code();
  void set_has_market();
  void clear_has_market();
  void set_has_stock_name();
  void clear_has_stock_name();
  void set_has_company_name();
  void clear_has_company_name();
  void set_has_pre_cash_diff();
  void clear_has_pre_cash_diff();
  void set_has_pre_unit_iopv();
  void clear_has_pre_unit_iopv();
  void set_has_pre_iopv();
  void clear_has_pre_iopv();
  void set_has_estimate_cash();
  void clear_has_estimate_cash();
  void set_has_max_cash_replace_rate();
  void clear_has_max_cash_replace_rate();
  void set_has_max_purchase_volume();
  void clear_has_max_purchase_volume();
  void set_has_max_redeem_volume();
  void clear_has_max_redeem_volume();
  void set_has_is_publish_iopv();
  void clear_has_is_publish_iopv();
  void set_has_unit_volume();
  void clear_has_unit_volume();
  void set_has_compose_count();
  void clear_has_compose_count();
  void set_has_is_open_purchase();
  void clear_has_is_open_purchase();
  void set_has_is_open_redeem();
  void clear_has_is_open_redeem();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::quotation::EtfConstituentStock > stocks_;
  ::google::protobuf::internal::ArenaStringPtr stock_id_;
  ::google::protobuf::internal::ArenaStringPtr primary_code_;
  ::google::protobuf::internal::ArenaStringPtr underlying_code_;
  ::google::protobuf::internal::ArenaStringPtr stock_name_;
  ::google::protobuf::internal::ArenaStringPtr company_name_;
  ::google::protobuf::uint32 data_date_;
  ::google::protobuf::uint32 data_time_;
  ::google::protobuf::uint32 pre_trading_day_;
  ::google::protobuf::int32 market_;
  double pre_cash_diff_;
  double pre_unit_iopv_;
  double pre_iopv_;
  double estimate_cash_;
  double max_cash_replace_rate_;
  ::google::protobuf::int64 max_purchase_volume_;
  ::google::protobuf::int64 max_redeem_volume_;
  ::google::protobuf::int64 unit_volume_;
  ::google::protobuf::int32 is_publish_iopv_;
  ::google::protobuf::int32 is_open_purchase_;
  ::google::protobuf::int64 compose_count_;
  ::google::protobuf::int32 is_open_redeem_;
  friend struct ::protobuf_protos_2fquotation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EtfFees_EtfFee : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quotation.EtfFees.EtfFee) */ {
 public:
  EtfFees_EtfFee();
  virtual ~EtfFees_EtfFee();

  EtfFees_EtfFee(const EtfFees_EtfFee& from);

  inline EtfFees_EtfFee& operator=(const EtfFees_EtfFee& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EtfFees_EtfFee(EtfFees_EtfFee&& from) noexcept
    : EtfFees_EtfFee() {
    *this = ::std::move(from);
  }

  inline EtfFees_EtfFee& operator=(EtfFees_EtfFee&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EtfFees_EtfFee& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EtfFees_EtfFee* internal_default_instance() {
    return reinterpret_cast<const EtfFees_EtfFee*>(
               &_EtfFees_EtfFee_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(EtfFees_EtfFee* other);
  friend void swap(EtfFees_EtfFee& a, EtfFees_EtfFee& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EtfFees_EtfFee* New() const final {
    return CreateMaybeMessage<EtfFees_EtfFee>(NULL);
  }

  EtfFees_EtfFee* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EtfFees_EtfFee>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EtfFees_EtfFee& from);
  void MergeFrom(const EtfFees_EtfFee& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EtfFees_EtfFee* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional double create_fee = 2;
  bool has_create_fee() const;
  void clear_create_fee();
  static const int kCreateFeeFieldNumber = 2;
  double create_fee() const;
  void set_create_fee(double value);

  // optional double redeem_fee = 3;
  bool has_redeem_fee() const;
  void clear_redeem_fee();
  static const int kRedeemFeeFieldNumber = 3;
  double redeem_fee() const;
  void set_redeem_fee(double value);

  // @@protoc_insertion_point(class_scope:quotation.EtfFees.EtfFee)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_create_fee();
  void clear_has_create_fee();
  void set_has_redeem_fee();
  void clear_has_redeem_fee();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  double create_fee_;
  double redeem_fee_;
  friend struct ::protobuf_protos_2fquotation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EtfFees : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quotation.EtfFees) */ {
 public:
  EtfFees();
  virtual ~EtfFees();

  EtfFees(const EtfFees& from);

  inline EtfFees& operator=(const EtfFees& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EtfFees(EtfFees&& from) noexcept
    : EtfFees() {
    *this = ::std::move(from);
  }

  inline EtfFees& operator=(EtfFees&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EtfFees& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EtfFees* internal_default_instance() {
    return reinterpret_cast<const EtfFees*>(
               &_EtfFees_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(EtfFees* other);
  friend void swap(EtfFees& a, EtfFees& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EtfFees* New() const final {
    return CreateMaybeMessage<EtfFees>(NULL);
  }

  EtfFees* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EtfFees>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EtfFees& from);
  void MergeFrom(const EtfFees& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EtfFees* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EtfFees_EtfFee EtfFee;

  // accessors -------------------------------------------------------

  // repeated .quotation.EtfFees.EtfFee items = 2;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 2;
  ::quotation::EtfFees_EtfFee* mutable_items(int index);
  ::google::protobuf::RepeatedPtrField< ::quotation::EtfFees_EtfFee >*
      mutable_items();
  const ::quotation::EtfFees_EtfFee& items(int index) const;
  ::quotation::EtfFees_EtfFee* add_items();
  const ::google::protobuf::RepeatedPtrField< ::quotation::EtfFees_EtfFee >&
      items() const;

  // required uint64 timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:quotation.EtfFees)
 private:
  void set_has_timestamp();
  void clear_has_timestamp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::quotation::EtfFees_EtfFee > items_;
  ::google::protobuf::uint64 timestamp_;
  friend struct ::protobuf_protos_2fquotation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StockAmendments_StockAmendment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quotation.StockAmendments.StockAmendment) */ {
 public:
  StockAmendments_StockAmendment();
  virtual ~StockAmendments_StockAmendment();

  StockAmendments_StockAmendment(const StockAmendments_StockAmendment& from);

  inline StockAmendments_StockAmendment& operator=(const StockAmendments_StockAmendment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StockAmendments_StockAmendment(StockAmendments_StockAmendment&& from) noexcept
    : StockAmendments_StockAmendment() {
    *this = ::std::move(from);
  }

  inline StockAmendments_StockAmendment& operator=(StockAmendments_StockAmendment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockAmendments_StockAmendment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StockAmendments_StockAmendment* internal_default_instance() {
    return reinterpret_cast<const StockAmendments_StockAmendment*>(
               &_StockAmendments_StockAmendment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(StockAmendments_StockAmendment* other);
  friend void swap(StockAmendments_StockAmendment& a, StockAmendments_StockAmendment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StockAmendments_StockAmendment* New() const final {
    return CreateMaybeMessage<StockAmendments_StockAmendment>(NULL);
  }

  StockAmendments_StockAmendment* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StockAmendments_StockAmendment>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StockAmendments_StockAmendment& from);
  void MergeFrom(const StockAmendments_StockAmendment& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StockAmendments_StockAmendment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int64 state = 3;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::google::protobuf::int64 state() const;
  void set_state(::google::protobuf::int64 value);

  // optional double create_change = 4;
  bool has_create_change() const;
  void clear_create_change();
  static const int kCreateChangeFieldNumber = 4;
  double create_change() const;
  void set_create_change(double value);

  // optional double redeem_change = 5;
  bool has_redeem_change() const;
  void clear_redeem_change();
  static const int kRedeemChangeFieldNumber = 5;
  double redeem_change() const;
  void set_redeem_change(double value);

  // @@protoc_insertion_point(class_scope:quotation.StockAmendments.StockAmendment)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_name();
  void clear_has_name();
  void set_has_state();
  void clear_has_state();
  void set_has_create_change();
  void clear_has_create_change();
  void set_has_redeem_change();
  void clear_has_redeem_change();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int64 state_;
  double create_change_;
  double redeem_change_;
  friend struct ::protobuf_protos_2fquotation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StockAmendments : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quotation.StockAmendments) */ {
 public:
  StockAmendments();
  virtual ~StockAmendments();

  StockAmendments(const StockAmendments& from);

  inline StockAmendments& operator=(const StockAmendments& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StockAmendments(StockAmendments&& from) noexcept
    : StockAmendments() {
    *this = ::std::move(from);
  }

  inline StockAmendments& operator=(StockAmendments&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockAmendments& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StockAmendments* internal_default_instance() {
    return reinterpret_cast<const StockAmendments*>(
               &_StockAmendments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(StockAmendments* other);
  friend void swap(StockAmendments& a, StockAmendments& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StockAmendments* New() const final {
    return CreateMaybeMessage<StockAmendments>(NULL);
  }

  StockAmendments* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StockAmendments>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StockAmendments& from);
  void MergeFrom(const StockAmendments& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StockAmendments* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StockAmendments_StockAmendment StockAmendment;

  // accessors -------------------------------------------------------

  // repeated .quotation.StockAmendments.StockAmendment items = 2;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 2;
  ::quotation::StockAmendments_StockAmendment* mutable_items(int index);
  ::google::protobuf::RepeatedPtrField< ::quotation::StockAmendments_StockAmendment >*
      mutable_items();
  const ::quotation::StockAmendments_StockAmendment& items(int index) const;
  ::quotation::StockAmendments_StockAmendment* add_items();
  const ::google::protobuf::RepeatedPtrField< ::quotation::StockAmendments_StockAmendment >&
      items() const;

  // required uint64 timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:quotation.StockAmendments)
 private:
  void set_has_timestamp();
  void clear_has_timestamp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::quotation::StockAmendments_StockAmendment > items_;
  ::google::protobuf::uint64 timestamp_;
  friend struct ::protobuf_protos_2fquotation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GradedFundInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quotation.GradedFundInfo) */ {
 public:
  GradedFundInfo();
  virtual ~GradedFundInfo();

  GradedFundInfo(const GradedFundInfo& from);

  inline GradedFundInfo& operator=(const GradedFundInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GradedFundInfo(GradedFundInfo&& from) noexcept
    : GradedFundInfo() {
    *this = ::std::move(from);
  }

  inline GradedFundInfo& operator=(GradedFundInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GradedFundInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GradedFundInfo* internal_default_instance() {
    return reinterpret_cast<const GradedFundInfo*>(
               &_GradedFundInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(GradedFundInfo* other);
  friend void swap(GradedFundInfo& a, GradedFundInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GradedFundInfo* New() const final {
    return CreateMaybeMessage<GradedFundInfo>(NULL);
  }

  GradedFundInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GradedFundInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GradedFundInfo& from);
  void MergeFrom(const GradedFundInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GradedFundInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string fof_code = 2;
  bool has_fof_code() const;
  void clear_fof_code();
  static const int kFofCodeFieldNumber = 2;
  const ::std::string& fof_code() const;
  void set_fof_code(const ::std::string& value);
  #if LANG_CXX11
  void set_fof_code(::std::string&& value);
  #endif
  void set_fof_code(const char* value);
  void set_fof_code(const char* value, size_t size);
  ::std::string* mutable_fof_code();
  ::std::string* release_fof_code();
  void set_allocated_fof_code(::std::string* fof_code);

  // optional string fof_name = 3;
  bool has_fof_name() const;
  void clear_fof_name();
  static const int kFofNameFieldNumber = 3;
  const ::std::string& fof_name() const;
  void set_fof_name(const ::std::string& value);
  #if LANG_CXX11
  void set_fof_name(::std::string&& value);
  #endif
  void set_fof_name(const char* value);
  void set_fof_name(const char* value, size_t size);
  ::std::string* mutable_fof_name();
  ::std::string* release_fof_name();
  void set_allocated_fof_name(::std::string* fof_name);

  // optional string a_code = 8;
  bool has_a_code() const;
  void clear_a_code();
  static const int kACodeFieldNumber = 8;
  const ::std::string& a_code() const;
  void set_a_code(const ::std::string& value);
  #if LANG_CXX11
  void set_a_code(::std::string&& value);
  #endif
  void set_a_code(const char* value);
  void set_a_code(const char* value, size_t size);
  ::std::string* mutable_a_code();
  ::std::string* release_a_code();
  void set_allocated_a_code(::std::string* a_code);

  // optional string a_name = 9;
  bool has_a_name() const;
  void clear_a_name();
  static const int kANameFieldNumber = 9;
  const ::std::string& a_name() const;
  void set_a_name(const ::std::string& value);
  #if LANG_CXX11
  void set_a_name(::std::string&& value);
  #endif
  void set_a_name(const char* value);
  void set_a_name(const char* value, size_t size);
  ::std::string* mutable_a_name();
  ::std::string* release_a_name();
  void set_allocated_a_name(::std::string* a_name);

  // optional string a_appointed_yield = 16;
  bool has_a_appointed_yield() const;
  void clear_a_appointed_yield();
  static const int kAAppointedYieldFieldNumber = 16;
  const ::std::string& a_appointed_yield() const;
  void set_a_appointed_yield(const ::std::string& value);
  #if LANG_CXX11
  void set_a_appointed_yield(::std::string&& value);
  #endif
  void set_a_appointed_yield(const char* value);
  void set_a_appointed_yield(const char* value, size_t size);
  ::std::string* mutable_a_appointed_yield();
  ::std::string* release_a_appointed_yield();
  void set_allocated_a_appointed_yield(::std::string* a_appointed_yield);

  // optional string b_code = 17;
  bool has_b_code() const;
  void clear_b_code();
  static const int kBCodeFieldNumber = 17;
  const ::std::string& b_code() const;
  void set_b_code(const ::std::string& value);
  #if LANG_CXX11
  void set_b_code(::std::string&& value);
  #endif
  void set_b_code(const char* value);
  void set_b_code(const char* value, size_t size);
  ::std::string* mutable_b_code();
  ::std::string* release_b_code();
  void set_allocated_b_code(::std::string* b_code);

  // optional string b_name = 18;
  bool has_b_name() const;
  void clear_b_name();
  static const int kBNameFieldNumber = 18;
  const ::std::string& b_name() const;
  void set_b_name(const ::std::string& value);
  #if LANG_CXX11
  void set_b_name(::std::string&& value);
  #endif
  void set_b_name(const char* value);
  void set_b_name(const char* value, size_t size);
  ::std::string* mutable_b_name();
  ::std::string* release_b_name();
  void set_allocated_b_name(::std::string* b_name);

  // optional string underlying_code = 28;
  bool has_underlying_code() const;
  void clear_underlying_code();
  static const int kUnderlyingCodeFieldNumber = 28;
  const ::std::string& underlying_code() const;
  void set_underlying_code(const ::std::string& value);
  #if LANG_CXX11
  void set_underlying_code(::std::string&& value);
  #endif
  void set_underlying_code(const char* value);
  void set_underlying_code(const char* value, size_t size);
  ::std::string* mutable_underlying_code();
  ::std::string* release_underlying_code();
  void set_allocated_underlying_code(::std::string* underlying_code);

  // optional string underlying_name = 29;
  bool has_underlying_name() const;
  void clear_underlying_name();
  static const int kUnderlyingNameFieldNumber = 29;
  const ::std::string& underlying_name() const;
  void set_underlying_name(const ::std::string& value);
  #if LANG_CXX11
  void set_underlying_name(::std::string&& value);
  #endif
  void set_underlying_name(const char* value);
  void set_underlying_name(const char* value, size_t size);
  ::std::string* mutable_underlying_name();
  ::std::string* release_underlying_name();
  void set_allocated_underlying_name(::std::string* underlying_name);

  // optional string manager_name = 31;
  bool has_manager_name() const;
  void clear_manager_name();
  static const int kManagerNameFieldNumber = 31;
  const ::std::string& manager_name() const;
  void set_manager_name(const ::std::string& value);
  #if LANG_CXX11
  void set_manager_name(::std::string&& value);
  #endif
  void set_manager_name(const char* value);
  void set_manager_name(const char* value, size_t size);
  ::std::string* mutable_manager_name();
  ::std::string* release_manager_name();
  void set_allocated_manager_name(::std::string* manager_name);

  // optional string up_clause = 34;
  bool has_up_clause() const;
  void clear_up_clause();
  static const int kUpClauseFieldNumber = 34;
  const ::std::string& up_clause() const;
  void set_up_clause(const ::std::string& value);
  #if LANG_CXX11
  void set_up_clause(::std::string&& value);
  #endif
  void set_up_clause(const char* value);
  void set_up_clause(const char* value, size_t size);
  ::std::string* mutable_up_clause();
  ::std::string* release_up_clause();
  void set_allocated_up_clause(::std::string* up_clause);

  // optional string down_clause = 35;
  bool has_down_clause() const;
  void clear_down_clause();
  static const int kDownClauseFieldNumber = 35;
  const ::std::string& down_clause() const;
  void set_down_clause(const ::std::string& value);
  #if LANG_CXX11
  void set_down_clause(::std::string&& value);
  #endif
  void set_down_clause(const char* value);
  void set_down_clause(const char* value, size_t size);
  ::std::string* mutable_down_clause();
  ::std::string* release_down_clause();
  void set_allocated_down_clause(::std::string* down_clause);

  // optional double fof_quota = 4;
  bool has_fof_quota() const;
  void clear_fof_quota();
  static const int kFofQuotaFieldNumber = 4;
  double fof_quota() const;
  void set_fof_quota(double value);

  // optional double fof_pre_nav = 5;
  bool has_fof_pre_nav() const;
  void clear_fof_pre_nav();
  static const int kFofPreNavFieldNumber = 5;
  double fof_pre_nav() const;
  void set_fof_pre_nav(double value);

  // optional double fof_nav = 6;
  bool has_fof_nav() const;
  void clear_fof_nav();
  static const int kFofNavFieldNumber = 6;
  double fof_nav() const;
  void set_fof_nav(double value);

  // optional double fof_market_value = 7;
  bool has_fof_market_value() const;
  void clear_fof_market_value();
  static const int kFofMarketValueFieldNumber = 7;
  double fof_market_value() const;
  void set_fof_market_value(double value);

  // optional double a_quota = 10;
  bool has_a_quota() const;
  void clear_a_quota();
  static const int kAQuotaFieldNumber = 10;
  double a_quota() const;
  void set_a_quota(double value);

  // optional double a_pre_nav = 11;
  bool has_a_pre_nav() const;
  void clear_a_pre_nav();
  static const int kAPreNavFieldNumber = 11;
  double a_pre_nav() const;
  void set_a_pre_nav(double value);

  // optional double a_nav = 12;
  bool has_a_nav() const;
  void clear_a_nav();
  static const int kANavFieldNumber = 12;
  double a_nav() const;
  void set_a_nav(double value);

  // optional double a_market_value = 13;
  bool has_a_market_value() const;
  void clear_a_market_value();
  static const int kAMarketValueFieldNumber = 13;
  double a_market_value() const;
  void set_a_market_value(double value);

  // optional double a_pre_close = 14;
  bool has_a_pre_close() const;
  void clear_a_pre_close();
  static const int kAPreCloseFieldNumber = 14;
  double a_pre_close() const;
  void set_a_pre_close(double value);

  // optional double a_discount_premium_rate = 15;
  bool has_a_discount_premium_rate() const;
  void clear_a_discount_premium_rate();
  static const int kADiscountPremiumRateFieldNumber = 15;
  double a_discount_premium_rate() const;
  void set_a_discount_premium_rate(double value);

  // required uint32 data_date = 1;
  bool has_data_date() const;
  void clear_data_date();
  static const int kDataDateFieldNumber = 1;
  ::google::protobuf::uint32 data_date() const;
  void set_data_date(::google::protobuf::uint32 value);

  // optional uint32 listing_date = 32;
  bool has_listing_date() const;
  void clear_listing_date();
  static const int kListingDateFieldNumber = 32;
  ::google::protobuf::uint32 listing_date() const;
  void set_listing_date(::google::protobuf::uint32 value);

  // optional double b_quota = 19;
  bool has_b_quota() const;
  void clear_b_quota();
  static const int kBQuotaFieldNumber = 19;
  double b_quota() const;
  void set_b_quota(double value);

  // optional double b_pre_nav = 20;
  bool has_b_pre_nav() const;
  void clear_b_pre_nav();
  static const int kBPreNavFieldNumber = 20;
  double b_pre_nav() const;
  void set_b_pre_nav(double value);

  // optional double b_nav = 21;
  bool has_b_nav() const;
  void clear_b_nav();
  static const int kBNavFieldNumber = 21;
  double b_nav() const;
  void set_b_nav(double value);

  // optional double b_market_value = 22;
  bool has_b_market_value() const;
  void clear_b_market_value();
  static const int kBMarketValueFieldNumber = 22;
  double b_market_value() const;
  void set_b_market_value(double value);

  // optional double b_pre_close = 23;
  bool has_b_pre_close() const;
  void clear_b_pre_close();
  static const int kBPreCloseFieldNumber = 23;
  double b_pre_close() const;
  void set_b_pre_close(double value);

  // optional double b_discount_premium_rate = 24;
  bool has_b_discount_premium_rate() const;
  void clear_b_discount_premium_rate();
  static const int kBDiscountPremiumRateFieldNumber = 24;
  double b_discount_premium_rate() const;
  void set_b_discount_premium_rate(double value);

  // optional int64 ratio_a = 25;
  bool has_ratio_a() const;
  void clear_ratio_a();
  static const int kRatioAFieldNumber = 25;
  ::google::protobuf::int64 ratio_a() const;
  void set_ratio_a(::google::protobuf::int64 value);

  // optional int64 ratio_b = 26;
  bool has_ratio_b() const;
  void clear_ratio_b();
  static const int kRatioBFieldNumber = 26;
  ::google::protobuf::int64 ratio_b() const;
  void set_ratio_b(::google::protobuf::int64 value);

  // optional double total_market_value = 27;
  bool has_total_market_value() const;
  void clear_total_market_value();
  static const int kTotalMarketValueFieldNumber = 27;
  double total_market_value() const;
  void set_total_market_value(double value);

  // optional double underlying_factor = 30;
  bool has_underlying_factor() const;
  void clear_underlying_factor();
  static const int kUnderlyingFactorFieldNumber = 30;
  double underlying_factor() const;
  void set_underlying_factor(double value);

  // optional double position_rate = 36;
  bool has_position_rate() const;
  void clear_position_rate();
  static const int kPositionRateFieldNumber = 36;
  double position_rate() const;
  void set_position_rate(double value);

  // optional uint32 translation_date = 33;
  bool has_translation_date() const;
  void clear_translation_date();
  static const int kTranslationDateFieldNumber = 33;
  ::google::protobuf::uint32 translation_date() const;
  void set_translation_date(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:quotation.GradedFundInfo)
 private:
  void set_has_data_date();
  void clear_has_data_date();
  void set_has_fof_code();
  void clear_has_fof_code();
  void set_has_fof_name();
  void clear_has_fof_name();
  void set_has_fof_quota();
  void clear_has_fof_quota();
  void set_has_fof_pre_nav();
  void clear_has_fof_pre_nav();
  void set_has_fof_nav();
  void clear_has_fof_nav();
  void set_has_fof_market_value();
  void clear_has_fof_market_value();
  void set_has_a_code();
  void clear_has_a_code();
  void set_has_a_name();
  void clear_has_a_name();
  void set_has_a_quota();
  void clear_has_a_quota();
  void set_has_a_pre_nav();
  void clear_has_a_pre_nav();
  void set_has_a_nav();
  void clear_has_a_nav();
  void set_has_a_market_value();
  void clear_has_a_market_value();
  void set_has_a_pre_close();
  void clear_has_a_pre_close();
  void set_has_a_discount_premium_rate();
  void clear_has_a_discount_premium_rate();
  void set_has_a_appointed_yield();
  void clear_has_a_appointed_yield();
  void set_has_b_code();
  void clear_has_b_code();
  void set_has_b_name();
  void clear_has_b_name();
  void set_has_b_quota();
  void clear_has_b_quota();
  void set_has_b_pre_nav();
  void clear_has_b_pre_nav();
  void set_has_b_nav();
  void clear_has_b_nav();
  void set_has_b_market_value();
  void clear_has_b_market_value();
  void set_has_b_pre_close();
  void clear_has_b_pre_close();
  void set_has_b_discount_premium_rate();
  void clear_has_b_discount_premium_rate();
  void set_has_ratio_a();
  void clear_has_ratio_a();
  void set_has_ratio_b();
  void clear_has_ratio_b();
  void set_has_total_market_value();
  void clear_has_total_market_value();
  void set_has_underlying_code();
  void clear_has_underlying_code();
  void set_has_underlying_name();
  void clear_has_underlying_name();
  void set_has_underlying_factor();
  void clear_has_underlying_factor();
  void set_has_manager_name();
  void clear_has_manager_name();
  void set_has_listing_date();
  void clear_has_listing_date();
  void set_has_translation_date();
  void clear_has_translation_date();
  void set_has_up_clause();
  void clear_has_up_clause();
  void set_has_down_clause();
  void clear_has_down_clause();
  void set_has_position_rate();
  void clear_has_position_rate();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::internal::ArenaStringPtr fof_code_;
  ::google::protobuf::internal::ArenaStringPtr fof_name_;
  ::google::protobuf::internal::ArenaStringPtr a_code_;
  ::google::protobuf::internal::ArenaStringPtr a_name_;
  ::google::protobuf::internal::ArenaStringPtr a_appointed_yield_;
  ::google::protobuf::internal::ArenaStringPtr b_code_;
  ::google::protobuf::internal::ArenaStringPtr b_name_;
  ::google::protobuf::internal::ArenaStringPtr underlying_code_;
  ::google::protobuf::internal::ArenaStringPtr underlying_name_;
  ::google::protobuf::internal::ArenaStringPtr manager_name_;
  ::google::protobuf::internal::ArenaStringPtr up_clause_;
  ::google::protobuf::internal::ArenaStringPtr down_clause_;
  double fof_quota_;
  double fof_pre_nav_;
  double fof_nav_;
  double fof_market_value_;
  double a_quota_;
  double a_pre_nav_;
  double a_nav_;
  double a_market_value_;
  double a_pre_close_;
  double a_discount_premium_rate_;
  ::google::protobuf::uint32 data_date_;
  ::google::protobuf::uint32 listing_date_;
  double b_quota_;
  double b_pre_nav_;
  double b_nav_;
  double b_market_value_;
  double b_pre_close_;
  double b_discount_premium_rate_;
  ::google::protobuf::int64 ratio_a_;
  ::google::protobuf::int64 ratio_b_;
  double total_market_value_;
  double underlying_factor_;
  double position_rate_;
  ::google::protobuf::uint32 translation_date_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protos_2fquotation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OptionInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quotation.OptionInfo) */ {
 public:
  OptionInfo();
  virtual ~OptionInfo();

  OptionInfo(const OptionInfo& from);

  inline OptionInfo& operator=(const OptionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionInfo(OptionInfo&& from) noexcept
    : OptionInfo() {
    *this = ::std::move(from);
  }

  inline OptionInfo& operator=(OptionInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionInfo* internal_default_instance() {
    return reinterpret_cast<const OptionInfo*>(
               &_OptionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(OptionInfo* other);
  friend void swap(OptionInfo& a, OptionInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionInfo* New() const final {
    return CreateMaybeMessage<OptionInfo>(NULL);
  }

  OptionInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OptionInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OptionInfo& from);
  void MergeFrom(const OptionInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string code = 2;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string type = 4;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional string trade_code = 6;
  bool has_trade_code() const;
  void clear_trade_code();
  static const int kTradeCodeFieldNumber = 6;
  const ::std::string& trade_code() const;
  void set_trade_code(const ::std::string& value);
  #if LANG_CXX11
  void set_trade_code(::std::string&& value);
  #endif
  void set_trade_code(const char* value);
  void set_trade_code(const char* value, size_t size);
  ::std::string* mutable_trade_code();
  ::std::string* release_trade_code();
  void set_allocated_trade_code(::std::string* trade_code);

  // optional string underlying_code = 7;
  bool has_underlying_code() const;
  void clear_underlying_code();
  static const int kUnderlyingCodeFieldNumber = 7;
  const ::std::string& underlying_code() const;
  void set_underlying_code(const ::std::string& value);
  #if LANG_CXX11
  void set_underlying_code(::std::string&& value);
  #endif
  void set_underlying_code(const char* value);
  void set_underlying_code(const char* value, size_t size);
  ::std::string* mutable_underlying_code();
  ::std::string* release_underlying_code();
  void set_allocated_underlying_code(::std::string* underlying_code);

  // optional string underlying_name = 8;
  bool has_underlying_name() const;
  void clear_underlying_name();
  static const int kUnderlyingNameFieldNumber = 8;
  const ::std::string& underlying_name() const;
  void set_underlying_name(const ::std::string& value);
  #if LANG_CXX11
  void set_underlying_name(::std::string&& value);
  #endif
  void set_underlying_name(const char* value);
  void set_underlying_name(const char* value, size_t size);
  ::std::string* mutable_underlying_name();
  ::std::string* release_underlying_name();
  void set_allocated_underlying_name(::std::string* underlying_name);

  // optional int64 market = 5;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 5;
  ::google::protobuf::int64 market() const;
  void set_market(::google::protobuf::int64 value);

  // required uint32 data_date = 1;
  bool has_data_date() const;
  void clear_data_date();
  static const int kDataDateFieldNumber = 1;
  ::google::protobuf::uint32 data_date() const;
  void set_data_date(::google::protobuf::uint32 value);

  // optional uint32 exercise_date = 13;
  bool has_exercise_date() const;
  void clear_exercise_date();
  static const int kExerciseDateFieldNumber = 13;
  ::google::protobuf::uint32 exercise_date() const;
  void set_exercise_date(::google::protobuf::uint32 value);

  // optional int64 underlying_type = 9;
  bool has_underlying_type() const;
  void clear_underlying_type();
  static const int kUnderlyingTypeFieldNumber = 9;
  ::google::protobuf::int64 underlying_type() const;
  void set_underlying_type(::google::protobuf::int64 value);

  // optional double underlying_pre_close = 10;
  bool has_underlying_pre_close() const;
  void clear_underlying_pre_close();
  static const int kUnderlyingPreCloseFieldNumber = 10;
  double underlying_pre_close() const;
  void set_underlying_pre_close(double value);

  // optional int64 cp_flag = 11;
  bool has_cp_flag() const;
  void clear_cp_flag();
  static const int kCpFlagFieldNumber = 11;
  ::google::protobuf::int64 cp_flag() const;
  void set_cp_flag(::google::protobuf::int64 value);

  // optional int64 unit = 12;
  bool has_unit() const;
  void clear_unit();
  static const int kUnitFieldNumber = 12;
  ::google::protobuf::int64 unit() const;
  void set_unit(::google::protobuf::int64 value);

  // optional double exercise_price = 14;
  bool has_exercise_price() const;
  void clear_exercise_price();
  static const int kExercisePriceFieldNumber = 14;
  double exercise_price() const;
  void set_exercise_price(double value);

  // optional uint32 settle_date = 15;
  bool has_settle_date() const;
  void clear_settle_date();
  static const int kSettleDateFieldNumber = 15;
  ::google::protobuf::uint32 settle_date() const;
  void set_settle_date(::google::protobuf::uint32 value);

  // optional uint32 expire_date = 16;
  bool has_expire_date() const;
  void clear_expire_date();
  static const int kExpireDateFieldNumber = 16;
  ::google::protobuf::uint32 expire_date() const;
  void set_expire_date(::google::protobuf::uint32 value);

  // optional int64 is_expired = 17;
  bool has_is_expired() const;
  void clear_is_expired();
  static const int kIsExpiredFieldNumber = 17;
  ::google::protobuf::int64 is_expired() const;
  void set_is_expired(::google::protobuf::int64 value);

  // optional int64 is_new = 18;
  bool has_is_new() const;
  void clear_is_new();
  static const int kIsNewFieldNumber = 18;
  ::google::protobuf::int64 is_new() const;
  void set_is_new(::google::protobuf::int64 value);

  // optional int64 is_adjusted = 19;
  bool has_is_adjusted() const;
  void clear_is_adjusted();
  static const int kIsAdjustedFieldNumber = 19;
  ::google::protobuf::int64 is_adjusted() const;
  void set_is_adjusted(::google::protobuf::int64 value);

  // optional int64 is_open = 20;
  bool has_is_open() const;
  void clear_is_open();
  static const int kIsOpenFieldNumber = 20;
  ::google::protobuf::int64 is_open() const;
  void set_is_open(::google::protobuf::int64 value);

  // optional double high_limit = 21;
  bool has_high_limit() const;
  void clear_high_limit();
  static const int kHighLimitFieldNumber = 21;
  double high_limit() const;
  void set_high_limit(double value);

  // optional double low_limit = 22;
  bool has_low_limit() const;
  void clear_low_limit();
  static const int kLowLimitFieldNumber = 22;
  double low_limit() const;
  void set_low_limit(double value);

  // optional double pre_settle = 23;
  bool has_pre_settle() const;
  void clear_pre_settle();
  static const int kPreSettleFieldNumber = 23;
  double pre_settle() const;
  void set_pre_settle(double value);

  // optional double deposit = 24;
  bool has_deposit() const;
  void clear_deposit();
  static const int kDepositFieldNumber = 24;
  double deposit() const;
  void set_deposit(double value);

  // optional int64 algebra = 25;
  bool has_algebra() const;
  void clear_algebra();
  static const int kAlgebraFieldNumber = 25;
  ::google::protobuf::int64 algebra() const;
  void set_algebra(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:quotation.OptionInfo)
 private:
  void set_has_data_date();
  void clear_has_data_date();
  void set_has_code();
  void clear_has_code();
  void set_has_name();
  void clear_has_name();
  void set_has_type();
  void clear_has_type();
  void set_has_market();
  void clear_has_market();
  void set_has_trade_code();
  void clear_has_trade_code();
  void set_has_underlying_code();
  void clear_has_underlying_code();
  void set_has_underlying_name();
  void clear_has_underlying_name();
  void set_has_underlying_type();
  void clear_has_underlying_type();
  void set_has_underlying_pre_close();
  void clear_has_underlying_pre_close();
  void set_has_cp_flag();
  void clear_has_cp_flag();
  void set_has_unit();
  void clear_has_unit();
  void set_has_exercise_date();
  void clear_has_exercise_date();
  void set_has_exercise_price();
  void clear_has_exercise_price();
  void set_has_settle_date();
  void clear_has_settle_date();
  void set_has_expire_date();
  void clear_has_expire_date();
  void set_has_is_expired();
  void clear_has_is_expired();
  void set_has_is_new();
  void clear_has_is_new();
  void set_has_is_adjusted();
  void clear_has_is_adjusted();
  void set_has_is_open();
  void clear_has_is_open();
  void set_has_high_limit();
  void clear_has_high_limit();
  void set_has_low_limit();
  void clear_has_low_limit();
  void set_has_pre_settle();
  void clear_has_pre_settle();
  void set_has_deposit();
  void clear_has_deposit();
  void set_has_algebra();
  void clear_has_algebra();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr trade_code_;
  ::google::protobuf::internal::ArenaStringPtr underlying_code_;
  ::google::protobuf::internal::ArenaStringPtr underlying_name_;
  ::google::protobuf::int64 market_;
  ::google::protobuf::uint32 data_date_;
  ::google::protobuf::uint32 exercise_date_;
  ::google::protobuf::int64 underlying_type_;
  double underlying_pre_close_;
  ::google::protobuf::int64 cp_flag_;
  ::google::protobuf::int64 unit_;
  double exercise_price_;
  ::google::protobuf::uint32 settle_date_;
  ::google::protobuf::uint32 expire_date_;
  ::google::protobuf::int64 is_expired_;
  ::google::protobuf::int64 is_new_;
  ::google::protobuf::int64 is_adjusted_;
  ::google::protobuf::int64 is_open_;
  double high_limit_;
  double low_limit_;
  double pre_settle_;
  double deposit_;
  ::google::protobuf::int64 algebra_;
  friend struct ::protobuf_protos_2fquotation_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Stock

// optional string type = 1 [default = "S"];
inline bool Stock::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Stock::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Stock::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Stock::clear_type() {
  type_.ClearToDefaultNoArena(&::quotation::Stock::_i_give_permission_to_break_this_code_default_type_.get());
  clear_has_type();
}
inline const ::std::string& Stock::type() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.type)
  return type_.GetNoArena();
}
inline void Stock::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::quotation::Stock::_i_give_permission_to_break_this_code_default_type_.get(), value);
  // @@protoc_insertion_point(field_set:quotation.Stock.type)
}
#if LANG_CXX11
inline void Stock::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::quotation::Stock::_i_give_permission_to_break_this_code_default_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.Stock.type)
}
#endif
inline void Stock::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::quotation::Stock::_i_give_permission_to_break_this_code_default_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.Stock.type)
}
inline void Stock::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::quotation::Stock::_i_give_permission_to_break_this_code_default_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.Stock.type)
}
inline ::std::string* Stock::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:quotation.Stock.type)
  return type_.MutableNoArena(&::quotation::Stock::_i_give_permission_to_break_this_code_default_type_.get());
}
inline ::std::string* Stock::release_type() {
  // @@protoc_insertion_point(field_release:quotation.Stock.type)
  if (!has_type()) {
    return NULL;
  }
  clear_has_type();
  return type_.ReleaseNonDefaultNoArena(&::quotation::Stock::_i_give_permission_to_break_this_code_default_type_.get());
}
inline void Stock::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::quotation::Stock::_i_give_permission_to_break_this_code_default_type_.get(), type);
  // @@protoc_insertion_point(field_set_allocated:quotation.Stock.type)
}

// optional uint32 trading_day = 2;
inline bool Stock::has_trading_day() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Stock::set_has_trading_day() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Stock::clear_has_trading_day() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Stock::clear_trading_day() {
  trading_day_ = 0u;
  clear_has_trading_day();
}
inline ::google::protobuf::uint32 Stock::trading_day() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.trading_day)
  return trading_day_;
}
inline void Stock::set_trading_day(::google::protobuf::uint32 value) {
  set_has_trading_day();
  trading_day_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.trading_day)
}

// required uint32 stamp = 3;
inline bool Stock::has_stamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Stock::set_has_stamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Stock::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Stock::clear_stamp() {
  stamp_ = 0u;
  clear_has_stamp();
}
inline ::google::protobuf::uint32 Stock::stamp() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.stamp)
  return stamp_;
}
inline void Stock::set_stamp(::google::protobuf::uint32 value) {
  set_has_stamp();
  stamp_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.stamp)
}

// required int64 new_price = 4;
inline bool Stock::has_new_price() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Stock::set_has_new_price() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Stock::clear_has_new_price() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Stock::clear_new_price() {
  new_price_ = GOOGLE_LONGLONG(0);
  clear_has_new_price();
}
inline ::google::protobuf::int64 Stock::new_price() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.new_price)
  return new_price_;
}
inline void Stock::set_new_price(::google::protobuf::int64 value) {
  set_has_new_price();
  new_price_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.new_price)
}

// optional int64 new_volume = 5;
inline bool Stock::has_new_volume() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Stock::set_has_new_volume() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Stock::clear_has_new_volume() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Stock::clear_new_volume() {
  new_volume_ = GOOGLE_LONGLONG(0);
  clear_has_new_volume();
}
inline ::google::protobuf::int64 Stock::new_volume() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.new_volume)
  return new_volume_;
}
inline void Stock::set_new_volume(::google::protobuf::int64 value) {
  set_has_new_volume();
  new_volume_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.new_volume)
}

// optional int64 sum_volume = 6;
inline bool Stock::has_sum_volume() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Stock::set_has_sum_volume() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Stock::clear_has_sum_volume() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Stock::clear_sum_volume() {
  sum_volume_ = GOOGLE_LONGLONG(0);
  clear_has_sum_volume();
}
inline ::google::protobuf::int64 Stock::sum_volume() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.sum_volume)
  return sum_volume_;
}
inline void Stock::set_sum_volume(::google::protobuf::int64 value) {
  set_has_sum_volume();
  sum_volume_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.sum_volume)
}

// optional int64 sum_amount = 7;
inline bool Stock::has_sum_amount() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Stock::set_has_sum_amount() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Stock::clear_has_sum_amount() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Stock::clear_sum_amount() {
  sum_amount_ = GOOGLE_LONGLONG(0);
  clear_has_sum_amount();
}
inline ::google::protobuf::int64 Stock::sum_amount() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.sum_amount)
  return sum_amount_;
}
inline void Stock::set_sum_amount(::google::protobuf::int64 value) {
  set_has_sum_amount();
  sum_amount_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.sum_amount)
}

// required string code = 8;
inline bool Stock::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Stock::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Stock::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Stock::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& Stock::code() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.code)
  return code_.GetNoArena();
}
inline void Stock::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.Stock.code)
}
#if LANG_CXX11
inline void Stock::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.Stock.code)
}
#endif
inline void Stock::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.Stock.code)
}
inline void Stock::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.Stock.code)
}
inline ::std::string* Stock::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:quotation.Stock.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Stock::release_code() {
  // @@protoc_insertion_point(field_release:quotation.Stock.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Stock::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:quotation.Stock.code)
}

// optional string name = 9;
inline bool Stock::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Stock::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Stock::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Stock::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Stock::name() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.name)
  return name_.GetNoArena();
}
inline void Stock::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.Stock.name)
}
#if LANG_CXX11
inline void Stock::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.Stock.name)
}
#endif
inline void Stock::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.Stock.name)
}
inline void Stock::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.Stock.name)
}
inline ::std::string* Stock::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:quotation.Stock.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Stock::release_name() {
  // @@protoc_insertion_point(field_release:quotation.Stock.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Stock::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:quotation.Stock.name)
}

// optional int64 bp1 = 10;
inline bool Stock::has_bp1() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Stock::set_has_bp1() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Stock::clear_has_bp1() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Stock::clear_bp1() {
  bp1_ = GOOGLE_LONGLONG(0);
  clear_has_bp1();
}
inline ::google::protobuf::int64 Stock::bp1() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.bp1)
  return bp1_;
}
inline void Stock::set_bp1(::google::protobuf::int64 value) {
  set_has_bp1();
  bp1_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.bp1)
}

// optional int64 bp2 = 11;
inline bool Stock::has_bp2() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Stock::set_has_bp2() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Stock::clear_has_bp2() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Stock::clear_bp2() {
  bp2_ = GOOGLE_LONGLONG(0);
  clear_has_bp2();
}
inline ::google::protobuf::int64 Stock::bp2() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.bp2)
  return bp2_;
}
inline void Stock::set_bp2(::google::protobuf::int64 value) {
  set_has_bp2();
  bp2_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.bp2)
}

// optional int64 bp3 = 12;
inline bool Stock::has_bp3() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Stock::set_has_bp3() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Stock::clear_has_bp3() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Stock::clear_bp3() {
  bp3_ = GOOGLE_LONGLONG(0);
  clear_has_bp3();
}
inline ::google::protobuf::int64 Stock::bp3() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.bp3)
  return bp3_;
}
inline void Stock::set_bp3(::google::protobuf::int64 value) {
  set_has_bp3();
  bp3_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.bp3)
}

// optional int64 bp4 = 13;
inline bool Stock::has_bp4() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Stock::set_has_bp4() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Stock::clear_has_bp4() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Stock::clear_bp4() {
  bp4_ = GOOGLE_LONGLONG(0);
  clear_has_bp4();
}
inline ::google::protobuf::int64 Stock::bp4() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.bp4)
  return bp4_;
}
inline void Stock::set_bp4(::google::protobuf::int64 value) {
  set_has_bp4();
  bp4_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.bp4)
}

// optional int64 bp5 = 14;
inline bool Stock::has_bp5() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Stock::set_has_bp5() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Stock::clear_has_bp5() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Stock::clear_bp5() {
  bp5_ = GOOGLE_LONGLONG(0);
  clear_has_bp5();
}
inline ::google::protobuf::int64 Stock::bp5() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.bp5)
  return bp5_;
}
inline void Stock::set_bp5(::google::protobuf::int64 value) {
  set_has_bp5();
  bp5_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.bp5)
}

// optional int64 ba1 = 15;
inline bool Stock::has_ba1() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Stock::set_has_ba1() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Stock::clear_has_ba1() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Stock::clear_ba1() {
  ba1_ = GOOGLE_LONGLONG(0);
  clear_has_ba1();
}
inline ::google::protobuf::int64 Stock::ba1() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.ba1)
  return ba1_;
}
inline void Stock::set_ba1(::google::protobuf::int64 value) {
  set_has_ba1();
  ba1_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.ba1)
}

// optional int64 ba2 = 16;
inline bool Stock::has_ba2() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Stock::set_has_ba2() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Stock::clear_has_ba2() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Stock::clear_ba2() {
  ba2_ = GOOGLE_LONGLONG(0);
  clear_has_ba2();
}
inline ::google::protobuf::int64 Stock::ba2() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.ba2)
  return ba2_;
}
inline void Stock::set_ba2(::google::protobuf::int64 value) {
  set_has_ba2();
  ba2_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.ba2)
}

// optional int64 ba3 = 17;
inline bool Stock::has_ba3() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Stock::set_has_ba3() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Stock::clear_has_ba3() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Stock::clear_ba3() {
  ba3_ = GOOGLE_LONGLONG(0);
  clear_has_ba3();
}
inline ::google::protobuf::int64 Stock::ba3() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.ba3)
  return ba3_;
}
inline void Stock::set_ba3(::google::protobuf::int64 value) {
  set_has_ba3();
  ba3_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.ba3)
}

// optional int64 ba4 = 18;
inline bool Stock::has_ba4() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Stock::set_has_ba4() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Stock::clear_has_ba4() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Stock::clear_ba4() {
  ba4_ = GOOGLE_LONGLONG(0);
  clear_has_ba4();
}
inline ::google::protobuf::int64 Stock::ba4() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.ba4)
  return ba4_;
}
inline void Stock::set_ba4(::google::protobuf::int64 value) {
  set_has_ba4();
  ba4_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.ba4)
}

// optional int64 ba5 = 19;
inline bool Stock::has_ba5() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Stock::set_has_ba5() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Stock::clear_has_ba5() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Stock::clear_ba5() {
  ba5_ = GOOGLE_LONGLONG(0);
  clear_has_ba5();
}
inline ::google::protobuf::int64 Stock::ba5() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.ba5)
  return ba5_;
}
inline void Stock::set_ba5(::google::protobuf::int64 value) {
  set_has_ba5();
  ba5_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.ba5)
}

// optional int64 sp1 = 20;
inline bool Stock::has_sp1() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Stock::set_has_sp1() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Stock::clear_has_sp1() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Stock::clear_sp1() {
  sp1_ = GOOGLE_LONGLONG(0);
  clear_has_sp1();
}
inline ::google::protobuf::int64 Stock::sp1() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.sp1)
  return sp1_;
}
inline void Stock::set_sp1(::google::protobuf::int64 value) {
  set_has_sp1();
  sp1_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.sp1)
}

// optional int64 sp2 = 21;
inline bool Stock::has_sp2() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Stock::set_has_sp2() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Stock::clear_has_sp2() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Stock::clear_sp2() {
  sp2_ = GOOGLE_LONGLONG(0);
  clear_has_sp2();
}
inline ::google::protobuf::int64 Stock::sp2() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.sp2)
  return sp2_;
}
inline void Stock::set_sp2(::google::protobuf::int64 value) {
  set_has_sp2();
  sp2_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.sp2)
}

// optional int64 sp3 = 22;
inline bool Stock::has_sp3() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Stock::set_has_sp3() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Stock::clear_has_sp3() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Stock::clear_sp3() {
  sp3_ = GOOGLE_LONGLONG(0);
  clear_has_sp3();
}
inline ::google::protobuf::int64 Stock::sp3() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.sp3)
  return sp3_;
}
inline void Stock::set_sp3(::google::protobuf::int64 value) {
  set_has_sp3();
  sp3_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.sp3)
}

// optional int64 sp4 = 23;
inline bool Stock::has_sp4() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Stock::set_has_sp4() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Stock::clear_has_sp4() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Stock::clear_sp4() {
  sp4_ = GOOGLE_LONGLONG(0);
  clear_has_sp4();
}
inline ::google::protobuf::int64 Stock::sp4() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.sp4)
  return sp4_;
}
inline void Stock::set_sp4(::google::protobuf::int64 value) {
  set_has_sp4();
  sp4_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.sp4)
}

// optional int64 sp5 = 24;
inline bool Stock::has_sp5() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Stock::set_has_sp5() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Stock::clear_has_sp5() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Stock::clear_sp5() {
  sp5_ = GOOGLE_LONGLONG(0);
  clear_has_sp5();
}
inline ::google::protobuf::int64 Stock::sp5() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.sp5)
  return sp5_;
}
inline void Stock::set_sp5(::google::protobuf::int64 value) {
  set_has_sp5();
  sp5_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.sp5)
}

// optional int64 sa1 = 25;
inline bool Stock::has_sa1() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Stock::set_has_sa1() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Stock::clear_has_sa1() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Stock::clear_sa1() {
  sa1_ = GOOGLE_LONGLONG(0);
  clear_has_sa1();
}
inline ::google::protobuf::int64 Stock::sa1() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.sa1)
  return sa1_;
}
inline void Stock::set_sa1(::google::protobuf::int64 value) {
  set_has_sa1();
  sa1_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.sa1)
}

// optional int64 sa2 = 26;
inline bool Stock::has_sa2() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Stock::set_has_sa2() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Stock::clear_has_sa2() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Stock::clear_sa2() {
  sa2_ = GOOGLE_LONGLONG(0);
  clear_has_sa2();
}
inline ::google::protobuf::int64 Stock::sa2() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.sa2)
  return sa2_;
}
inline void Stock::set_sa2(::google::protobuf::int64 value) {
  set_has_sa2();
  sa2_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.sa2)
}

// optional int64 sa3 = 27;
inline bool Stock::has_sa3() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Stock::set_has_sa3() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Stock::clear_has_sa3() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Stock::clear_sa3() {
  sa3_ = GOOGLE_LONGLONG(0);
  clear_has_sa3();
}
inline ::google::protobuf::int64 Stock::sa3() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.sa3)
  return sa3_;
}
inline void Stock::set_sa3(::google::protobuf::int64 value) {
  set_has_sa3();
  sa3_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.sa3)
}

// optional int64 sa4 = 28;
inline bool Stock::has_sa4() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Stock::set_has_sa4() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Stock::clear_has_sa4() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Stock::clear_sa4() {
  sa4_ = GOOGLE_LONGLONG(0);
  clear_has_sa4();
}
inline ::google::protobuf::int64 Stock::sa4() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.sa4)
  return sa4_;
}
inline void Stock::set_sa4(::google::protobuf::int64 value) {
  set_has_sa4();
  sa4_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.sa4)
}

// optional int64 sa5 = 29;
inline bool Stock::has_sa5() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Stock::set_has_sa5() {
  _has_bits_[0] |= 0x10000000u;
}
inline void Stock::clear_has_sa5() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void Stock::clear_sa5() {
  sa5_ = GOOGLE_LONGLONG(0);
  clear_has_sa5();
}
inline ::google::protobuf::int64 Stock::sa5() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.sa5)
  return sa5_;
}
inline void Stock::set_sa5(::google::protobuf::int64 value) {
  set_has_sa5();
  sa5_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.sa5)
}

// optional int64 status = 30;
inline bool Stock::has_status() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void Stock::set_has_status() {
  _has_bits_[0] |= 0x20000000u;
}
inline void Stock::clear_has_status() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void Stock::clear_status() {
  status_ = GOOGLE_LONGLONG(0);
  clear_has_status();
}
inline ::google::protobuf::int64 Stock::status() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.status)
  return status_;
}
inline void Stock::set_status(::google::protobuf::int64 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.status)
}

// optional int64 preclose = 31;
inline bool Stock::has_preclose() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void Stock::set_has_preclose() {
  _has_bits_[0] |= 0x40000000u;
}
inline void Stock::clear_has_preclose() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void Stock::clear_preclose() {
  preclose_ = GOOGLE_LONGLONG(0);
  clear_has_preclose();
}
inline ::google::protobuf::int64 Stock::preclose() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.preclose)
  return preclose_;
}
inline void Stock::set_preclose(::google::protobuf::int64 value) {
  set_has_preclose();
  preclose_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.preclose)
}

// optional int64 open = 32;
inline bool Stock::has_open() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void Stock::set_has_open() {
  _has_bits_[0] |= 0x80000000u;
}
inline void Stock::clear_has_open() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void Stock::clear_open() {
  open_ = GOOGLE_LONGLONG(0);
  clear_has_open();
}
inline ::google::protobuf::int64 Stock::open() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.open)
  return open_;
}
inline void Stock::set_open(::google::protobuf::int64 value) {
  set_has_open();
  open_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.open)
}

// optional int64 high = 33;
inline bool Stock::has_high() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void Stock::set_has_high() {
  _has_bits_[1] |= 0x00000001u;
}
inline void Stock::clear_has_high() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void Stock::clear_high() {
  high_ = GOOGLE_LONGLONG(0);
  clear_has_high();
}
inline ::google::protobuf::int64 Stock::high() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.high)
  return high_;
}
inline void Stock::set_high(::google::protobuf::int64 value) {
  set_has_high();
  high_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.high)
}

// optional int64 low = 34;
inline bool Stock::has_low() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void Stock::set_has_low() {
  _has_bits_[1] |= 0x00000002u;
}
inline void Stock::clear_has_low() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void Stock::clear_low() {
  low_ = GOOGLE_LONGLONG(0);
  clear_has_low();
}
inline ::google::protobuf::int64 Stock::low() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.low)
  return low_;
}
inline void Stock::set_low(::google::protobuf::int64 value) {
  set_has_low();
  low_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.low)
}

// optional int64 iopv = 35;
inline bool Stock::has_iopv() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void Stock::set_has_iopv() {
  _has_bits_[1] |= 0x00000004u;
}
inline void Stock::clear_has_iopv() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void Stock::clear_iopv() {
  iopv_ = GOOGLE_LONGLONG(0);
  clear_has_iopv();
}
inline ::google::protobuf::int64 Stock::iopv() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.iopv)
  return iopv_;
}
inline void Stock::set_iopv(::google::protobuf::int64 value) {
  set_has_iopv();
  iopv_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.iopv)
}

// optional int64 bp1_ajust = 36;
inline bool Stock::has_bp1_ajust() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void Stock::set_has_bp1_ajust() {
  _has_bits_[1] |= 0x00000008u;
}
inline void Stock::clear_has_bp1_ajust() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void Stock::clear_bp1_ajust() {
  bp1_ajust_ = GOOGLE_LONGLONG(0);
  clear_has_bp1_ajust();
}
inline ::google::protobuf::int64 Stock::bp1_ajust() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.bp1_ajust)
  return bp1_ajust_;
}
inline void Stock::set_bp1_ajust(::google::protobuf::int64 value) {
  set_has_bp1_ajust();
  bp1_ajust_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.bp1_ajust)
}

// optional int64 sp1_ajust = 37;
inline bool Stock::has_sp1_ajust() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void Stock::set_has_sp1_ajust() {
  _has_bits_[1] |= 0x00000010u;
}
inline void Stock::clear_has_sp1_ajust() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void Stock::clear_sp1_ajust() {
  sp1_ajust_ = GOOGLE_LONGLONG(0);
  clear_has_sp1_ajust();
}
inline ::google::protobuf::int64 Stock::sp1_ajust() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.sp1_ajust)
  return sp1_ajust_;
}
inline void Stock::set_sp1_ajust(::google::protobuf::int64 value) {
  set_has_sp1_ajust();
  sp1_ajust_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.sp1_ajust)
}

// optional int64 bought_volume = 38;
inline bool Stock::has_bought_volume() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void Stock::set_has_bought_volume() {
  _has_bits_[1] |= 0x00000020u;
}
inline void Stock::clear_has_bought_volume() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void Stock::clear_bought_volume() {
  bought_volume_ = GOOGLE_LONGLONG(0);
  clear_has_bought_volume();
}
inline ::google::protobuf::int64 Stock::bought_volume() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.bought_volume)
  return bought_volume_;
}
inline void Stock::set_bought_volume(::google::protobuf::int64 value) {
  set_has_bought_volume();
  bought_volume_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.bought_volume)
}

// optional int64 sold_volume = 39;
inline bool Stock::has_sold_volume() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void Stock::set_has_sold_volume() {
  _has_bits_[1] |= 0x00000040u;
}
inline void Stock::clear_has_sold_volume() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void Stock::clear_sold_volume() {
  sold_volume_ = GOOGLE_LONGLONG(0);
  clear_has_sold_volume();
}
inline ::google::protobuf::int64 Stock::sold_volume() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.sold_volume)
  return sold_volume_;
}
inline void Stock::set_sold_volume(::google::protobuf::int64 value) {
  set_has_sold_volume();
  sold_volume_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.sold_volume)
}

// optional int64 bp6 = 40;
inline bool Stock::has_bp6() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void Stock::set_has_bp6() {
  _has_bits_[1] |= 0x00000080u;
}
inline void Stock::clear_has_bp6() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void Stock::clear_bp6() {
  bp6_ = GOOGLE_LONGLONG(0);
  clear_has_bp6();
}
inline ::google::protobuf::int64 Stock::bp6() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.bp6)
  return bp6_;
}
inline void Stock::set_bp6(::google::protobuf::int64 value) {
  set_has_bp6();
  bp6_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.bp6)
}

// optional int64 bp7 = 41;
inline bool Stock::has_bp7() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void Stock::set_has_bp7() {
  _has_bits_[1] |= 0x00000100u;
}
inline void Stock::clear_has_bp7() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void Stock::clear_bp7() {
  bp7_ = GOOGLE_LONGLONG(0);
  clear_has_bp7();
}
inline ::google::protobuf::int64 Stock::bp7() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.bp7)
  return bp7_;
}
inline void Stock::set_bp7(::google::protobuf::int64 value) {
  set_has_bp7();
  bp7_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.bp7)
}

// optional int64 bp8 = 42;
inline bool Stock::has_bp8() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void Stock::set_has_bp8() {
  _has_bits_[1] |= 0x00000200u;
}
inline void Stock::clear_has_bp8() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void Stock::clear_bp8() {
  bp8_ = GOOGLE_LONGLONG(0);
  clear_has_bp8();
}
inline ::google::protobuf::int64 Stock::bp8() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.bp8)
  return bp8_;
}
inline void Stock::set_bp8(::google::protobuf::int64 value) {
  set_has_bp8();
  bp8_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.bp8)
}

// optional int64 bp9 = 43;
inline bool Stock::has_bp9() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void Stock::set_has_bp9() {
  _has_bits_[1] |= 0x00000400u;
}
inline void Stock::clear_has_bp9() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void Stock::clear_bp9() {
  bp9_ = GOOGLE_LONGLONG(0);
  clear_has_bp9();
}
inline ::google::protobuf::int64 Stock::bp9() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.bp9)
  return bp9_;
}
inline void Stock::set_bp9(::google::protobuf::int64 value) {
  set_has_bp9();
  bp9_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.bp9)
}

// optional int64 bp10 = 44;
inline bool Stock::has_bp10() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void Stock::set_has_bp10() {
  _has_bits_[1] |= 0x00000800u;
}
inline void Stock::clear_has_bp10() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void Stock::clear_bp10() {
  bp10_ = GOOGLE_LONGLONG(0);
  clear_has_bp10();
}
inline ::google::protobuf::int64 Stock::bp10() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.bp10)
  return bp10_;
}
inline void Stock::set_bp10(::google::protobuf::int64 value) {
  set_has_bp10();
  bp10_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.bp10)
}

// optional int64 ba6 = 45;
inline bool Stock::has_ba6() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void Stock::set_has_ba6() {
  _has_bits_[1] |= 0x00001000u;
}
inline void Stock::clear_has_ba6() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void Stock::clear_ba6() {
  ba6_ = GOOGLE_LONGLONG(0);
  clear_has_ba6();
}
inline ::google::protobuf::int64 Stock::ba6() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.ba6)
  return ba6_;
}
inline void Stock::set_ba6(::google::protobuf::int64 value) {
  set_has_ba6();
  ba6_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.ba6)
}

// optional int64 ba7 = 46;
inline bool Stock::has_ba7() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void Stock::set_has_ba7() {
  _has_bits_[1] |= 0x00002000u;
}
inline void Stock::clear_has_ba7() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void Stock::clear_ba7() {
  ba7_ = GOOGLE_LONGLONG(0);
  clear_has_ba7();
}
inline ::google::protobuf::int64 Stock::ba7() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.ba7)
  return ba7_;
}
inline void Stock::set_ba7(::google::protobuf::int64 value) {
  set_has_ba7();
  ba7_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.ba7)
}

// optional int64 ba8 = 47;
inline bool Stock::has_ba8() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void Stock::set_has_ba8() {
  _has_bits_[1] |= 0x00004000u;
}
inline void Stock::clear_has_ba8() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void Stock::clear_ba8() {
  ba8_ = GOOGLE_LONGLONG(0);
  clear_has_ba8();
}
inline ::google::protobuf::int64 Stock::ba8() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.ba8)
  return ba8_;
}
inline void Stock::set_ba8(::google::protobuf::int64 value) {
  set_has_ba8();
  ba8_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.ba8)
}

// optional int64 ba9 = 48;
inline bool Stock::has_ba9() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void Stock::set_has_ba9() {
  _has_bits_[1] |= 0x00008000u;
}
inline void Stock::clear_has_ba9() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void Stock::clear_ba9() {
  ba9_ = GOOGLE_LONGLONG(0);
  clear_has_ba9();
}
inline ::google::protobuf::int64 Stock::ba9() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.ba9)
  return ba9_;
}
inline void Stock::set_ba9(::google::protobuf::int64 value) {
  set_has_ba9();
  ba9_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.ba9)
}

// optional int64 ba10 = 49;
inline bool Stock::has_ba10() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void Stock::set_has_ba10() {
  _has_bits_[1] |= 0x00010000u;
}
inline void Stock::clear_has_ba10() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void Stock::clear_ba10() {
  ba10_ = GOOGLE_LONGLONG(0);
  clear_has_ba10();
}
inline ::google::protobuf::int64 Stock::ba10() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.ba10)
  return ba10_;
}
inline void Stock::set_ba10(::google::protobuf::int64 value) {
  set_has_ba10();
  ba10_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.ba10)
}

// optional int64 sp6 = 50;
inline bool Stock::has_sp6() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void Stock::set_has_sp6() {
  _has_bits_[1] |= 0x00020000u;
}
inline void Stock::clear_has_sp6() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void Stock::clear_sp6() {
  sp6_ = GOOGLE_LONGLONG(0);
  clear_has_sp6();
}
inline ::google::protobuf::int64 Stock::sp6() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.sp6)
  return sp6_;
}
inline void Stock::set_sp6(::google::protobuf::int64 value) {
  set_has_sp6();
  sp6_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.sp6)
}

// optional int64 sp7 = 51;
inline bool Stock::has_sp7() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void Stock::set_has_sp7() {
  _has_bits_[1] |= 0x00040000u;
}
inline void Stock::clear_has_sp7() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void Stock::clear_sp7() {
  sp7_ = GOOGLE_LONGLONG(0);
  clear_has_sp7();
}
inline ::google::protobuf::int64 Stock::sp7() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.sp7)
  return sp7_;
}
inline void Stock::set_sp7(::google::protobuf::int64 value) {
  set_has_sp7();
  sp7_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.sp7)
}

// optional int64 sp8 = 52;
inline bool Stock::has_sp8() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void Stock::set_has_sp8() {
  _has_bits_[1] |= 0x00080000u;
}
inline void Stock::clear_has_sp8() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void Stock::clear_sp8() {
  sp8_ = GOOGLE_LONGLONG(0);
  clear_has_sp8();
}
inline ::google::protobuf::int64 Stock::sp8() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.sp8)
  return sp8_;
}
inline void Stock::set_sp8(::google::protobuf::int64 value) {
  set_has_sp8();
  sp8_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.sp8)
}

// optional int64 sp9 = 53;
inline bool Stock::has_sp9() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void Stock::set_has_sp9() {
  _has_bits_[1] |= 0x00100000u;
}
inline void Stock::clear_has_sp9() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void Stock::clear_sp9() {
  sp9_ = GOOGLE_LONGLONG(0);
  clear_has_sp9();
}
inline ::google::protobuf::int64 Stock::sp9() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.sp9)
  return sp9_;
}
inline void Stock::set_sp9(::google::protobuf::int64 value) {
  set_has_sp9();
  sp9_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.sp9)
}

// optional int64 sp10 = 54;
inline bool Stock::has_sp10() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void Stock::set_has_sp10() {
  _has_bits_[1] |= 0x00200000u;
}
inline void Stock::clear_has_sp10() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void Stock::clear_sp10() {
  sp10_ = GOOGLE_LONGLONG(0);
  clear_has_sp10();
}
inline ::google::protobuf::int64 Stock::sp10() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.sp10)
  return sp10_;
}
inline void Stock::set_sp10(::google::protobuf::int64 value) {
  set_has_sp10();
  sp10_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.sp10)
}

// optional int64 sa6 = 55;
inline bool Stock::has_sa6() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void Stock::set_has_sa6() {
  _has_bits_[1] |= 0x00400000u;
}
inline void Stock::clear_has_sa6() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void Stock::clear_sa6() {
  sa6_ = GOOGLE_LONGLONG(0);
  clear_has_sa6();
}
inline ::google::protobuf::int64 Stock::sa6() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.sa6)
  return sa6_;
}
inline void Stock::set_sa6(::google::protobuf::int64 value) {
  set_has_sa6();
  sa6_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.sa6)
}

// optional int64 sa7 = 56;
inline bool Stock::has_sa7() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void Stock::set_has_sa7() {
  _has_bits_[1] |= 0x00800000u;
}
inline void Stock::clear_has_sa7() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void Stock::clear_sa7() {
  sa7_ = GOOGLE_LONGLONG(0);
  clear_has_sa7();
}
inline ::google::protobuf::int64 Stock::sa7() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.sa7)
  return sa7_;
}
inline void Stock::set_sa7(::google::protobuf::int64 value) {
  set_has_sa7();
  sa7_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.sa7)
}

// optional int64 sa8 = 57;
inline bool Stock::has_sa8() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void Stock::set_has_sa8() {
  _has_bits_[1] |= 0x01000000u;
}
inline void Stock::clear_has_sa8() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void Stock::clear_sa8() {
  sa8_ = GOOGLE_LONGLONG(0);
  clear_has_sa8();
}
inline ::google::protobuf::int64 Stock::sa8() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.sa8)
  return sa8_;
}
inline void Stock::set_sa8(::google::protobuf::int64 value) {
  set_has_sa8();
  sa8_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.sa8)
}

// optional int64 sa9 = 58;
inline bool Stock::has_sa9() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void Stock::set_has_sa9() {
  _has_bits_[1] |= 0x02000000u;
}
inline void Stock::clear_has_sa9() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void Stock::clear_sa9() {
  sa9_ = GOOGLE_LONGLONG(0);
  clear_has_sa9();
}
inline ::google::protobuf::int64 Stock::sa9() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.sa9)
  return sa9_;
}
inline void Stock::set_sa9(::google::protobuf::int64 value) {
  set_has_sa9();
  sa9_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.sa9)
}

// optional int64 sa10 = 59;
inline bool Stock::has_sa10() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void Stock::set_has_sa10() {
  _has_bits_[1] |= 0x04000000u;
}
inline void Stock::clear_has_sa10() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void Stock::clear_sa10() {
  sa10_ = GOOGLE_LONGLONG(0);
  clear_has_sa10();
}
inline ::google::protobuf::int64 Stock::sa10() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.sa10)
  return sa10_;
}
inline void Stock::set_sa10(::google::protobuf::int64 value) {
  set_has_sa10();
  sa10_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.sa10)
}

// optional int64 upperlimit_price = 60;
inline bool Stock::has_upperlimit_price() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void Stock::set_has_upperlimit_price() {
  _has_bits_[1] |= 0x08000000u;
}
inline void Stock::clear_has_upperlimit_price() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void Stock::clear_upperlimit_price() {
  upperlimit_price_ = GOOGLE_LONGLONG(0);
  clear_has_upperlimit_price();
}
inline ::google::protobuf::int64 Stock::upperlimit_price() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.upperlimit_price)
  return upperlimit_price_;
}
inline void Stock::set_upperlimit_price(::google::protobuf::int64 value) {
  set_has_upperlimit_price();
  upperlimit_price_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.upperlimit_price)
}

// optional int64 lowerlimit_price = 61;
inline bool Stock::has_lowerlimit_price() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void Stock::set_has_lowerlimit_price() {
  _has_bits_[1] |= 0x10000000u;
}
inline void Stock::clear_has_lowerlimit_price() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void Stock::clear_lowerlimit_price() {
  lowerlimit_price_ = GOOGLE_LONGLONG(0);
  clear_has_lowerlimit_price();
}
inline ::google::protobuf::int64 Stock::lowerlimit_price() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.lowerlimit_price)
  return lowerlimit_price_;
}
inline void Stock::set_lowerlimit_price(::google::protobuf::int64 value) {
  set_has_lowerlimit_price();
  lowerlimit_price_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.lowerlimit_price)
}

// optional int64 market = 62;
inline bool Stock::has_market() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void Stock::set_has_market() {
  _has_bits_[1] |= 0x20000000u;
}
inline void Stock::clear_has_market() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void Stock::clear_market() {
  market_ = GOOGLE_LONGLONG(0);
  clear_has_market();
}
inline ::google::protobuf::int64 Stock::market() const {
  // @@protoc_insertion_point(field_get:quotation.Stock.market)
  return market_;
}
inline void Stock::set_market(::google::protobuf::int64 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:quotation.Stock.market)
}

// -------------------------------------------------------------------

// Handicap_Item

// required int64 volume = 1;
inline bool Handicap_Item::has_volume() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Handicap_Item::set_has_volume() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Handicap_Item::clear_has_volume() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Handicap_Item::clear_volume() {
  volume_ = GOOGLE_LONGLONG(0);
  clear_has_volume();
}
inline ::google::protobuf::int64 Handicap_Item::volume() const {
  // @@protoc_insertion_point(field_get:quotation.Handicap.Item.volume)
  return volume_;
}
inline void Handicap_Item::set_volume(::google::protobuf::int64 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:quotation.Handicap.Item.volume)
}

// optional string order_no = 2;
inline bool Handicap_Item::has_order_no() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Handicap_Item::set_has_order_no() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Handicap_Item::clear_has_order_no() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Handicap_Item::clear_order_no() {
  order_no_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_no();
}
inline const ::std::string& Handicap_Item::order_no() const {
  // @@protoc_insertion_point(field_get:quotation.Handicap.Item.order_no)
  return order_no_.GetNoArena();
}
inline void Handicap_Item::set_order_no(const ::std::string& value) {
  set_has_order_no();
  order_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.Handicap.Item.order_no)
}
#if LANG_CXX11
inline void Handicap_Item::set_order_no(::std::string&& value) {
  set_has_order_no();
  order_no_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.Handicap.Item.order_no)
}
#endif
inline void Handicap_Item::set_order_no(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_no();
  order_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.Handicap.Item.order_no)
}
inline void Handicap_Item::set_order_no(const char* value, size_t size) {
  set_has_order_no();
  order_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.Handicap.Item.order_no)
}
inline ::std::string* Handicap_Item::mutable_order_no() {
  set_has_order_no();
  // @@protoc_insertion_point(field_mutable:quotation.Handicap.Item.order_no)
  return order_no_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Handicap_Item::release_order_no() {
  // @@protoc_insertion_point(field_release:quotation.Handicap.Item.order_no)
  if (!has_order_no()) {
    return NULL;
  }
  clear_has_order_no();
  return order_no_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Handicap_Item::set_allocated_order_no(::std::string* order_no) {
  if (order_no != NULL) {
    set_has_order_no();
  } else {
    clear_has_order_no();
  }
  order_no_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_no);
  // @@protoc_insertion_point(field_set_allocated:quotation.Handicap.Item.order_no)
}

// -------------------------------------------------------------------

// Handicap_Queue

// repeated .quotation.Handicap.Item items = 1;
inline int Handicap_Queue::items_size() const {
  return items_.size();
}
inline void Handicap_Queue::clear_items() {
  items_.Clear();
}
inline ::quotation::Handicap_Item* Handicap_Queue::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:quotation.Handicap.Queue.items)
  return items_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::quotation::Handicap_Item >*
Handicap_Queue::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:quotation.Handicap.Queue.items)
  return &items_;
}
inline const ::quotation::Handicap_Item& Handicap_Queue::items(int index) const {
  // @@protoc_insertion_point(field_get:quotation.Handicap.Queue.items)
  return items_.Get(index);
}
inline ::quotation::Handicap_Item* Handicap_Queue::add_items() {
  // @@protoc_insertion_point(field_add:quotation.Handicap.Queue.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::quotation::Handicap_Item >&
Handicap_Queue::items() const {
  // @@protoc_insertion_point(field_list:quotation.Handicap.Queue.items)
  return items_;
}

// -------------------------------------------------------------------

// Handicap

// optional string type = 1 [default = "H"];
inline bool Handicap::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Handicap::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Handicap::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Handicap::clear_type() {
  type_.ClearToDefaultNoArena(&::quotation::Handicap::_i_give_permission_to_break_this_code_default_type_.get());
  clear_has_type();
}
inline const ::std::string& Handicap::type() const {
  // @@protoc_insertion_point(field_get:quotation.Handicap.type)
  return type_.GetNoArena();
}
inline void Handicap::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::quotation::Handicap::_i_give_permission_to_break_this_code_default_type_.get(), value);
  // @@protoc_insertion_point(field_set:quotation.Handicap.type)
}
#if LANG_CXX11
inline void Handicap::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::quotation::Handicap::_i_give_permission_to_break_this_code_default_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.Handicap.type)
}
#endif
inline void Handicap::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::quotation::Handicap::_i_give_permission_to_break_this_code_default_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.Handicap.type)
}
inline void Handicap::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::quotation::Handicap::_i_give_permission_to_break_this_code_default_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.Handicap.type)
}
inline ::std::string* Handicap::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:quotation.Handicap.type)
  return type_.MutableNoArena(&::quotation::Handicap::_i_give_permission_to_break_this_code_default_type_.get());
}
inline ::std::string* Handicap::release_type() {
  // @@protoc_insertion_point(field_release:quotation.Handicap.type)
  if (!has_type()) {
    return NULL;
  }
  clear_has_type();
  return type_.ReleaseNonDefaultNoArena(&::quotation::Handicap::_i_give_permission_to_break_this_code_default_type_.get());
}
inline void Handicap::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::quotation::Handicap::_i_give_permission_to_break_this_code_default_type_.get(), type);
  // @@protoc_insertion_point(field_set_allocated:quotation.Handicap.type)
}

// optional uint32 trading_day = 2;
inline bool Handicap::has_trading_day() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Handicap::set_has_trading_day() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Handicap::clear_has_trading_day() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Handicap::clear_trading_day() {
  trading_day_ = 0u;
  clear_has_trading_day();
}
inline ::google::protobuf::uint32 Handicap::trading_day() const {
  // @@protoc_insertion_point(field_get:quotation.Handicap.trading_day)
  return trading_day_;
}
inline void Handicap::set_trading_day(::google::protobuf::uint32 value) {
  set_has_trading_day();
  trading_day_ = value;
  // @@protoc_insertion_point(field_set:quotation.Handicap.trading_day)
}

// required uint32 stamp = 3;
inline bool Handicap::has_stamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Handicap::set_has_stamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Handicap::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Handicap::clear_stamp() {
  stamp_ = 0u;
  clear_has_stamp();
}
inline ::google::protobuf::uint32 Handicap::stamp() const {
  // @@protoc_insertion_point(field_get:quotation.Handicap.stamp)
  return stamp_;
}
inline void Handicap::set_stamp(::google::protobuf::uint32 value) {
  set_has_stamp();
  stamp_ = value;
  // @@protoc_insertion_point(field_set:quotation.Handicap.stamp)
}

// required string code = 4;
inline bool Handicap::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Handicap::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Handicap::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Handicap::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& Handicap::code() const {
  // @@protoc_insertion_point(field_get:quotation.Handicap.code)
  return code_.GetNoArena();
}
inline void Handicap::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.Handicap.code)
}
#if LANG_CXX11
inline void Handicap::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.Handicap.code)
}
#endif
inline void Handicap::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.Handicap.code)
}
inline void Handicap::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.Handicap.code)
}
inline ::std::string* Handicap::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:quotation.Handicap.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Handicap::release_code() {
  // @@protoc_insertion_point(field_release:quotation.Handicap.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Handicap::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:quotation.Handicap.code)
}

// optional string name = 5;
inline bool Handicap::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Handicap::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Handicap::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Handicap::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Handicap::name() const {
  // @@protoc_insertion_point(field_get:quotation.Handicap.name)
  return name_.GetNoArena();
}
inline void Handicap::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.Handicap.name)
}
#if LANG_CXX11
inline void Handicap::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.Handicap.name)
}
#endif
inline void Handicap::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.Handicap.name)
}
inline void Handicap::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.Handicap.name)
}
inline ::std::string* Handicap::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:quotation.Handicap.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Handicap::release_name() {
  // @@protoc_insertion_point(field_release:quotation.Handicap.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Handicap::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:quotation.Handicap.name)
}

// optional int64 market = 6;
inline bool Handicap::has_market() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Handicap::set_has_market() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Handicap::clear_has_market() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Handicap::clear_market() {
  market_ = GOOGLE_LONGLONG(0);
  clear_has_market();
}
inline ::google::protobuf::int64 Handicap::market() const {
  // @@protoc_insertion_point(field_get:quotation.Handicap.market)
  return market_;
}
inline void Handicap::set_market(::google::protobuf::int64 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:quotation.Handicap.market)
}

// optional int64 status = 7;
inline bool Handicap::has_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Handicap::set_has_status() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Handicap::clear_has_status() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Handicap::clear_status() {
  status_ = GOOGLE_LONGLONG(0);
  clear_has_status();
}
inline ::google::protobuf::int64 Handicap::status() const {
  // @@protoc_insertion_point(field_get:quotation.Handicap.status)
  return status_;
}
inline void Handicap::set_status(::google::protobuf::int64 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:quotation.Handicap.status)
}

// optional int64 upperlimit_price = 8;
inline bool Handicap::has_upperlimit_price() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Handicap::set_has_upperlimit_price() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Handicap::clear_has_upperlimit_price() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Handicap::clear_upperlimit_price() {
  upperlimit_price_ = GOOGLE_LONGLONG(0);
  clear_has_upperlimit_price();
}
inline ::google::protobuf::int64 Handicap::upperlimit_price() const {
  // @@protoc_insertion_point(field_get:quotation.Handicap.upperlimit_price)
  return upperlimit_price_;
}
inline void Handicap::set_upperlimit_price(::google::protobuf::int64 value) {
  set_has_upperlimit_price();
  upperlimit_price_ = value;
  // @@protoc_insertion_point(field_set:quotation.Handicap.upperlimit_price)
}

// optional int64 lowerlimit_price = 9;
inline bool Handicap::has_lowerlimit_price() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Handicap::set_has_lowerlimit_price() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Handicap::clear_has_lowerlimit_price() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Handicap::clear_lowerlimit_price() {
  lowerlimit_price_ = GOOGLE_LONGLONG(0);
  clear_has_lowerlimit_price();
}
inline ::google::protobuf::int64 Handicap::lowerlimit_price() const {
  // @@protoc_insertion_point(field_get:quotation.Handicap.lowerlimit_price)
  return lowerlimit_price_;
}
inline void Handicap::set_lowerlimit_price(::google::protobuf::int64 value) {
  set_has_lowerlimit_price();
  lowerlimit_price_ = value;
  // @@protoc_insertion_point(field_set:quotation.Handicap.lowerlimit_price)
}

// optional int64 preclose = 10;
inline bool Handicap::has_preclose() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Handicap::set_has_preclose() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Handicap::clear_has_preclose() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Handicap::clear_preclose() {
  preclose_ = GOOGLE_LONGLONG(0);
  clear_has_preclose();
}
inline ::google::protobuf::int64 Handicap::preclose() const {
  // @@protoc_insertion_point(field_get:quotation.Handicap.preclose)
  return preclose_;
}
inline void Handicap::set_preclose(::google::protobuf::int64 value) {
  set_has_preclose();
  preclose_ = value;
  // @@protoc_insertion_point(field_set:quotation.Handicap.preclose)
}

// optional int64 open = 11;
inline bool Handicap::has_open() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Handicap::set_has_open() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Handicap::clear_has_open() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Handicap::clear_open() {
  open_ = GOOGLE_LONGLONG(0);
  clear_has_open();
}
inline ::google::protobuf::int64 Handicap::open() const {
  // @@protoc_insertion_point(field_get:quotation.Handicap.open)
  return open_;
}
inline void Handicap::set_open(::google::protobuf::int64 value) {
  set_has_open();
  open_ = value;
  // @@protoc_insertion_point(field_set:quotation.Handicap.open)
}

// optional int64 high = 12;
inline bool Handicap::has_high() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Handicap::set_has_high() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Handicap::clear_has_high() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Handicap::clear_high() {
  high_ = GOOGLE_LONGLONG(0);
  clear_has_high();
}
inline ::google::protobuf::int64 Handicap::high() const {
  // @@protoc_insertion_point(field_get:quotation.Handicap.high)
  return high_;
}
inline void Handicap::set_high(::google::protobuf::int64 value) {
  set_has_high();
  high_ = value;
  // @@protoc_insertion_point(field_set:quotation.Handicap.high)
}

// optional int64 low = 13;
inline bool Handicap::has_low() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Handicap::set_has_low() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Handicap::clear_has_low() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Handicap::clear_low() {
  low_ = GOOGLE_LONGLONG(0);
  clear_has_low();
}
inline ::google::protobuf::int64 Handicap::low() const {
  // @@protoc_insertion_point(field_get:quotation.Handicap.low)
  return low_;
}
inline void Handicap::set_low(::google::protobuf::int64 value) {
  set_has_low();
  low_ = value;
  // @@protoc_insertion_point(field_set:quotation.Handicap.low)
}

// optional int64 new_price = 14;
inline bool Handicap::has_new_price() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Handicap::set_has_new_price() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Handicap::clear_has_new_price() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Handicap::clear_new_price() {
  new_price_ = GOOGLE_LONGLONG(0);
  clear_has_new_price();
}
inline ::google::protobuf::int64 Handicap::new_price() const {
  // @@protoc_insertion_point(field_get:quotation.Handicap.new_price)
  return new_price_;
}
inline void Handicap::set_new_price(::google::protobuf::int64 value) {
  set_has_new_price();
  new_price_ = value;
  // @@protoc_insertion_point(field_set:quotation.Handicap.new_price)
}

// optional int64 new_volume = 15;
inline bool Handicap::has_new_volume() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Handicap::set_has_new_volume() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Handicap::clear_has_new_volume() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Handicap::clear_new_volume() {
  new_volume_ = GOOGLE_LONGLONG(0);
  clear_has_new_volume();
}
inline ::google::protobuf::int64 Handicap::new_volume() const {
  // @@protoc_insertion_point(field_get:quotation.Handicap.new_volume)
  return new_volume_;
}
inline void Handicap::set_new_volume(::google::protobuf::int64 value) {
  set_has_new_volume();
  new_volume_ = value;
  // @@protoc_insertion_point(field_set:quotation.Handicap.new_volume)
}

// optional int64 sum_volume = 16;
inline bool Handicap::has_sum_volume() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Handicap::set_has_sum_volume() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Handicap::clear_has_sum_volume() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Handicap::clear_sum_volume() {
  sum_volume_ = GOOGLE_LONGLONG(0);
  clear_has_sum_volume();
}
inline ::google::protobuf::int64 Handicap::sum_volume() const {
  // @@protoc_insertion_point(field_get:quotation.Handicap.sum_volume)
  return sum_volume_;
}
inline void Handicap::set_sum_volume(::google::protobuf::int64 value) {
  set_has_sum_volume();
  sum_volume_ = value;
  // @@protoc_insertion_point(field_set:quotation.Handicap.sum_volume)
}

// optional int64 sum_amount = 17;
inline bool Handicap::has_sum_amount() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Handicap::set_has_sum_amount() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Handicap::clear_has_sum_amount() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Handicap::clear_sum_amount() {
  sum_amount_ = GOOGLE_LONGLONG(0);
  clear_has_sum_amount();
}
inline ::google::protobuf::int64 Handicap::sum_amount() const {
  // @@protoc_insertion_point(field_get:quotation.Handicap.sum_amount)
  return sum_amount_;
}
inline void Handicap::set_sum_amount(::google::protobuf::int64 value) {
  set_has_sum_amount();
  sum_amount_ = value;
  // @@protoc_insertion_point(field_set:quotation.Handicap.sum_amount)
}

// repeated int64 bp = 18;
inline int Handicap::bp_size() const {
  return bp_.size();
}
inline void Handicap::clear_bp() {
  bp_.Clear();
}
inline ::google::protobuf::int64 Handicap::bp(int index) const {
  // @@protoc_insertion_point(field_get:quotation.Handicap.bp)
  return bp_.Get(index);
}
inline void Handicap::set_bp(int index, ::google::protobuf::int64 value) {
  bp_.Set(index, value);
  // @@protoc_insertion_point(field_set:quotation.Handicap.bp)
}
inline void Handicap::add_bp(::google::protobuf::int64 value) {
  bp_.Add(value);
  // @@protoc_insertion_point(field_add:quotation.Handicap.bp)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Handicap::bp() const {
  // @@protoc_insertion_point(field_list:quotation.Handicap.bp)
  return bp_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Handicap::mutable_bp() {
  // @@protoc_insertion_point(field_mutable_list:quotation.Handicap.bp)
  return &bp_;
}

// repeated int64 ba = 19;
inline int Handicap::ba_size() const {
  return ba_.size();
}
inline void Handicap::clear_ba() {
  ba_.Clear();
}
inline ::google::protobuf::int64 Handicap::ba(int index) const {
  // @@protoc_insertion_point(field_get:quotation.Handicap.ba)
  return ba_.Get(index);
}
inline void Handicap::set_ba(int index, ::google::protobuf::int64 value) {
  ba_.Set(index, value);
  // @@protoc_insertion_point(field_set:quotation.Handicap.ba)
}
inline void Handicap::add_ba(::google::protobuf::int64 value) {
  ba_.Add(value);
  // @@protoc_insertion_point(field_add:quotation.Handicap.ba)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Handicap::ba() const {
  // @@protoc_insertion_point(field_list:quotation.Handicap.ba)
  return ba_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Handicap::mutable_ba() {
  // @@protoc_insertion_point(field_mutable_list:quotation.Handicap.ba)
  return &ba_;
}

// repeated int64 sp = 20;
inline int Handicap::sp_size() const {
  return sp_.size();
}
inline void Handicap::clear_sp() {
  sp_.Clear();
}
inline ::google::protobuf::int64 Handicap::sp(int index) const {
  // @@protoc_insertion_point(field_get:quotation.Handicap.sp)
  return sp_.Get(index);
}
inline void Handicap::set_sp(int index, ::google::protobuf::int64 value) {
  sp_.Set(index, value);
  // @@protoc_insertion_point(field_set:quotation.Handicap.sp)
}
inline void Handicap::add_sp(::google::protobuf::int64 value) {
  sp_.Add(value);
  // @@protoc_insertion_point(field_add:quotation.Handicap.sp)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Handicap::sp() const {
  // @@protoc_insertion_point(field_list:quotation.Handicap.sp)
  return sp_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Handicap::mutable_sp() {
  // @@protoc_insertion_point(field_mutable_list:quotation.Handicap.sp)
  return &sp_;
}

// repeated int64 sa = 21;
inline int Handicap::sa_size() const {
  return sa_.size();
}
inline void Handicap::clear_sa() {
  sa_.Clear();
}
inline ::google::protobuf::int64 Handicap::sa(int index) const {
  // @@protoc_insertion_point(field_get:quotation.Handicap.sa)
  return sa_.Get(index);
}
inline void Handicap::set_sa(int index, ::google::protobuf::int64 value) {
  sa_.Set(index, value);
  // @@protoc_insertion_point(field_set:quotation.Handicap.sa)
}
inline void Handicap::add_sa(::google::protobuf::int64 value) {
  sa_.Add(value);
  // @@protoc_insertion_point(field_add:quotation.Handicap.sa)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Handicap::sa() const {
  // @@protoc_insertion_point(field_list:quotation.Handicap.sa)
  return sa_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Handicap::mutable_sa() {
  // @@protoc_insertion_point(field_mutable_list:quotation.Handicap.sa)
  return &sa_;
}

// repeated .quotation.Handicap.Queue ask = 22;
inline int Handicap::ask_size() const {
  return ask_.size();
}
inline void Handicap::clear_ask() {
  ask_.Clear();
}
inline ::quotation::Handicap_Queue* Handicap::mutable_ask(int index) {
  // @@protoc_insertion_point(field_mutable:quotation.Handicap.ask)
  return ask_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::quotation::Handicap_Queue >*
Handicap::mutable_ask() {
  // @@protoc_insertion_point(field_mutable_list:quotation.Handicap.ask)
  return &ask_;
}
inline const ::quotation::Handicap_Queue& Handicap::ask(int index) const {
  // @@protoc_insertion_point(field_get:quotation.Handicap.ask)
  return ask_.Get(index);
}
inline ::quotation::Handicap_Queue* Handicap::add_ask() {
  // @@protoc_insertion_point(field_add:quotation.Handicap.ask)
  return ask_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::quotation::Handicap_Queue >&
Handicap::ask() const {
  // @@protoc_insertion_point(field_list:quotation.Handicap.ask)
  return ask_;
}

// repeated .quotation.Handicap.Queue bid = 23;
inline int Handicap::bid_size() const {
  return bid_.size();
}
inline void Handicap::clear_bid() {
  bid_.Clear();
}
inline ::quotation::Handicap_Queue* Handicap::mutable_bid(int index) {
  // @@protoc_insertion_point(field_mutable:quotation.Handicap.bid)
  return bid_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::quotation::Handicap_Queue >*
Handicap::mutable_bid() {
  // @@protoc_insertion_point(field_mutable_list:quotation.Handicap.bid)
  return &bid_;
}
inline const ::quotation::Handicap_Queue& Handicap::bid(int index) const {
  // @@protoc_insertion_point(field_get:quotation.Handicap.bid)
  return bid_.Get(index);
}
inline ::quotation::Handicap_Queue* Handicap::add_bid() {
  // @@protoc_insertion_point(field_add:quotation.Handicap.bid)
  return bid_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::quotation::Handicap_Queue >&
Handicap::bid() const {
  // @@protoc_insertion_point(field_list:quotation.Handicap.bid)
  return bid_;
}

// -------------------------------------------------------------------

// Future

// optional string type = 1 [default = "F"];
inline bool Future::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Future::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Future::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Future::clear_type() {
  type_.ClearToDefaultNoArena(&::quotation::Future::_i_give_permission_to_break_this_code_default_type_.get());
  clear_has_type();
}
inline const ::std::string& Future::type() const {
  // @@protoc_insertion_point(field_get:quotation.Future.type)
  return type_.GetNoArena();
}
inline void Future::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::quotation::Future::_i_give_permission_to_break_this_code_default_type_.get(), value);
  // @@protoc_insertion_point(field_set:quotation.Future.type)
}
#if LANG_CXX11
inline void Future::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::quotation::Future::_i_give_permission_to_break_this_code_default_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.Future.type)
}
#endif
inline void Future::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::quotation::Future::_i_give_permission_to_break_this_code_default_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.Future.type)
}
inline void Future::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::quotation::Future::_i_give_permission_to_break_this_code_default_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.Future.type)
}
inline ::std::string* Future::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:quotation.Future.type)
  return type_.MutableNoArena(&::quotation::Future::_i_give_permission_to_break_this_code_default_type_.get());
}
inline ::std::string* Future::release_type() {
  // @@protoc_insertion_point(field_release:quotation.Future.type)
  if (!has_type()) {
    return NULL;
  }
  clear_has_type();
  return type_.ReleaseNonDefaultNoArena(&::quotation::Future::_i_give_permission_to_break_this_code_default_type_.get());
}
inline void Future::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::quotation::Future::_i_give_permission_to_break_this_code_default_type_.get(), type);
  // @@protoc_insertion_point(field_set_allocated:quotation.Future.type)
}

// optional uint32 trading_day = 2;
inline bool Future::has_trading_day() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Future::set_has_trading_day() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Future::clear_has_trading_day() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Future::clear_trading_day() {
  trading_day_ = 0u;
  clear_has_trading_day();
}
inline ::google::protobuf::uint32 Future::trading_day() const {
  // @@protoc_insertion_point(field_get:quotation.Future.trading_day)
  return trading_day_;
}
inline void Future::set_trading_day(::google::protobuf::uint32 value) {
  set_has_trading_day();
  trading_day_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.trading_day)
}

// required uint32 stamp = 3;
inline bool Future::has_stamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Future::set_has_stamp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Future::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Future::clear_stamp() {
  stamp_ = 0u;
  clear_has_stamp();
}
inline ::google::protobuf::uint32 Future::stamp() const {
  // @@protoc_insertion_point(field_get:quotation.Future.stamp)
  return stamp_;
}
inline void Future::set_stamp(::google::protobuf::uint32 value) {
  set_has_stamp();
  stamp_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.stamp)
}

// required string code = 4;
inline bool Future::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Future::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Future::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Future::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& Future::code() const {
  // @@protoc_insertion_point(field_get:quotation.Future.code)
  return code_.GetNoArena();
}
inline void Future::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.Future.code)
}
#if LANG_CXX11
inline void Future::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.Future.code)
}
#endif
inline void Future::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.Future.code)
}
inline void Future::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.Future.code)
}
inline ::std::string* Future::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:quotation.Future.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Future::release_code() {
  // @@protoc_insertion_point(field_release:quotation.Future.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Future::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:quotation.Future.code)
}

// optional string name = 5;
inline bool Future::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Future::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Future::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Future::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Future::name() const {
  // @@protoc_insertion_point(field_get:quotation.Future.name)
  return name_.GetNoArena();
}
inline void Future::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.Future.name)
}
#if LANG_CXX11
inline void Future::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.Future.name)
}
#endif
inline void Future::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.Future.name)
}
inline void Future::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.Future.name)
}
inline ::std::string* Future::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:quotation.Future.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Future::release_name() {
  // @@protoc_insertion_point(field_release:quotation.Future.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Future::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:quotation.Future.name)
}

// required int64 new_price = 6;
inline bool Future::has_new_price() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Future::set_has_new_price() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Future::clear_has_new_price() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Future::clear_new_price() {
  new_price_ = GOOGLE_LONGLONG(0);
  clear_has_new_price();
}
inline ::google::protobuf::int64 Future::new_price() const {
  // @@protoc_insertion_point(field_get:quotation.Future.new_price)
  return new_price_;
}
inline void Future::set_new_price(::google::protobuf::int64 value) {
  set_has_new_price();
  new_price_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.new_price)
}

// required uint64 volume = 7;
inline bool Future::has_volume() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Future::set_has_volume() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Future::clear_has_volume() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Future::clear_volume() {
  volume_ = GOOGLE_ULONGLONG(0);
  clear_has_volume();
}
inline ::google::protobuf::uint64 Future::volume() const {
  // @@protoc_insertion_point(field_get:quotation.Future.volume)
  return volume_;
}
inline void Future::set_volume(::google::protobuf::uint64 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.volume)
}

// required int64 match_amt = 8;
inline bool Future::has_match_amt() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Future::set_has_match_amt() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Future::clear_has_match_amt() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Future::clear_match_amt() {
  match_amt_ = GOOGLE_LONGLONG(0);
  clear_has_match_amt();
}
inline ::google::protobuf::int64 Future::match_amt() const {
  // @@protoc_insertion_point(field_get:quotation.Future.match_amt)
  return match_amt_;
}
inline void Future::set_match_amt(::google::protobuf::int64 value) {
  set_has_match_amt();
  match_amt_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.match_amt)
}

// optional int64 new_volume = 9;
inline bool Future::has_new_volume() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Future::set_has_new_volume() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Future::clear_has_new_volume() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Future::clear_new_volume() {
  new_volume_ = GOOGLE_LONGLONG(0);
  clear_has_new_volume();
}
inline ::google::protobuf::int64 Future::new_volume() const {
  // @@protoc_insertion_point(field_get:quotation.Future.new_volume)
  return new_volume_;
}
inline void Future::set_new_volume(::google::protobuf::int64 value) {
  set_has_new_volume();
  new_volume_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.new_volume)
}

// optional int64 total_position = 10;
inline bool Future::has_total_position() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Future::set_has_total_position() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Future::clear_has_total_position() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Future::clear_total_position() {
  total_position_ = GOOGLE_LONGLONG(0);
  clear_has_total_position();
}
inline ::google::protobuf::int64 Future::total_position() const {
  // @@protoc_insertion_point(field_get:quotation.Future.total_position)
  return total_position_;
}
inline void Future::set_total_position(::google::protobuf::int64 value) {
  set_has_total_position();
  total_position_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.total_position)
}

// optional int64 position_change = 11;
inline bool Future::has_position_change() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Future::set_has_position_change() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Future::clear_has_position_change() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Future::clear_position_change() {
  position_change_ = GOOGLE_LONGLONG(0);
  clear_has_position_change();
}
inline ::google::protobuf::int64 Future::position_change() const {
  // @@protoc_insertion_point(field_get:quotation.Future.position_change)
  return position_change_;
}
inline void Future::set_position_change(::google::protobuf::int64 value) {
  set_has_position_change();
  position_change_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.position_change)
}

// required int64 bp1 = 12;
inline bool Future::has_bp1() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Future::set_has_bp1() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Future::clear_has_bp1() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Future::clear_bp1() {
  bp1_ = GOOGLE_LONGLONG(0);
  clear_has_bp1();
}
inline ::google::protobuf::int64 Future::bp1() const {
  // @@protoc_insertion_point(field_get:quotation.Future.bp1)
  return bp1_;
}
inline void Future::set_bp1(::google::protobuf::int64 value) {
  set_has_bp1();
  bp1_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.bp1)
}

// optional int64 bp2 = 13;
inline bool Future::has_bp2() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Future::set_has_bp2() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Future::clear_has_bp2() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Future::clear_bp2() {
  bp2_ = GOOGLE_LONGLONG(0);
  clear_has_bp2();
}
inline ::google::protobuf::int64 Future::bp2() const {
  // @@protoc_insertion_point(field_get:quotation.Future.bp2)
  return bp2_;
}
inline void Future::set_bp2(::google::protobuf::int64 value) {
  set_has_bp2();
  bp2_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.bp2)
}

// optional int64 bp3 = 14;
inline bool Future::has_bp3() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Future::set_has_bp3() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Future::clear_has_bp3() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Future::clear_bp3() {
  bp3_ = GOOGLE_LONGLONG(0);
  clear_has_bp3();
}
inline ::google::protobuf::int64 Future::bp3() const {
  // @@protoc_insertion_point(field_get:quotation.Future.bp3)
  return bp3_;
}
inline void Future::set_bp3(::google::protobuf::int64 value) {
  set_has_bp3();
  bp3_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.bp3)
}

// optional int64 bp4 = 15;
inline bool Future::has_bp4() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Future::set_has_bp4() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Future::clear_has_bp4() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Future::clear_bp4() {
  bp4_ = GOOGLE_LONGLONG(0);
  clear_has_bp4();
}
inline ::google::protobuf::int64 Future::bp4() const {
  // @@protoc_insertion_point(field_get:quotation.Future.bp4)
  return bp4_;
}
inline void Future::set_bp4(::google::protobuf::int64 value) {
  set_has_bp4();
  bp4_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.bp4)
}

// optional int64 bp5 = 16;
inline bool Future::has_bp5() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Future::set_has_bp5() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Future::clear_has_bp5() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Future::clear_bp5() {
  bp5_ = GOOGLE_LONGLONG(0);
  clear_has_bp5();
}
inline ::google::protobuf::int64 Future::bp5() const {
  // @@protoc_insertion_point(field_get:quotation.Future.bp5)
  return bp5_;
}
inline void Future::set_bp5(::google::protobuf::int64 value) {
  set_has_bp5();
  bp5_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.bp5)
}

// required int64 ba1 = 17;
inline bool Future::has_ba1() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Future::set_has_ba1() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Future::clear_has_ba1() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Future::clear_ba1() {
  ba1_ = GOOGLE_LONGLONG(0);
  clear_has_ba1();
}
inline ::google::protobuf::int64 Future::ba1() const {
  // @@protoc_insertion_point(field_get:quotation.Future.ba1)
  return ba1_;
}
inline void Future::set_ba1(::google::protobuf::int64 value) {
  set_has_ba1();
  ba1_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.ba1)
}

// optional int64 ba2 = 18;
inline bool Future::has_ba2() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Future::set_has_ba2() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Future::clear_has_ba2() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Future::clear_ba2() {
  ba2_ = GOOGLE_LONGLONG(0);
  clear_has_ba2();
}
inline ::google::protobuf::int64 Future::ba2() const {
  // @@protoc_insertion_point(field_get:quotation.Future.ba2)
  return ba2_;
}
inline void Future::set_ba2(::google::protobuf::int64 value) {
  set_has_ba2();
  ba2_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.ba2)
}

// optional int64 ba3 = 19;
inline bool Future::has_ba3() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Future::set_has_ba3() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Future::clear_has_ba3() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Future::clear_ba3() {
  ba3_ = GOOGLE_LONGLONG(0);
  clear_has_ba3();
}
inline ::google::protobuf::int64 Future::ba3() const {
  // @@protoc_insertion_point(field_get:quotation.Future.ba3)
  return ba3_;
}
inline void Future::set_ba3(::google::protobuf::int64 value) {
  set_has_ba3();
  ba3_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.ba3)
}

// optional int64 ba4 = 20;
inline bool Future::has_ba4() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Future::set_has_ba4() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Future::clear_has_ba4() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Future::clear_ba4() {
  ba4_ = GOOGLE_LONGLONG(0);
  clear_has_ba4();
}
inline ::google::protobuf::int64 Future::ba4() const {
  // @@protoc_insertion_point(field_get:quotation.Future.ba4)
  return ba4_;
}
inline void Future::set_ba4(::google::protobuf::int64 value) {
  set_has_ba4();
  ba4_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.ba4)
}

// optional int64 ba5 = 21;
inline bool Future::has_ba5() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Future::set_has_ba5() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Future::clear_has_ba5() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Future::clear_ba5() {
  ba5_ = GOOGLE_LONGLONG(0);
  clear_has_ba5();
}
inline ::google::protobuf::int64 Future::ba5() const {
  // @@protoc_insertion_point(field_get:quotation.Future.ba5)
  return ba5_;
}
inline void Future::set_ba5(::google::protobuf::int64 value) {
  set_has_ba5();
  ba5_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.ba5)
}

// required int64 sp1 = 22;
inline bool Future::has_sp1() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Future::set_has_sp1() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Future::clear_has_sp1() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Future::clear_sp1() {
  sp1_ = GOOGLE_LONGLONG(0);
  clear_has_sp1();
}
inline ::google::protobuf::int64 Future::sp1() const {
  // @@protoc_insertion_point(field_get:quotation.Future.sp1)
  return sp1_;
}
inline void Future::set_sp1(::google::protobuf::int64 value) {
  set_has_sp1();
  sp1_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.sp1)
}

// optional int64 sp2 = 23;
inline bool Future::has_sp2() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Future::set_has_sp2() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Future::clear_has_sp2() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Future::clear_sp2() {
  sp2_ = GOOGLE_LONGLONG(0);
  clear_has_sp2();
}
inline ::google::protobuf::int64 Future::sp2() const {
  // @@protoc_insertion_point(field_get:quotation.Future.sp2)
  return sp2_;
}
inline void Future::set_sp2(::google::protobuf::int64 value) {
  set_has_sp2();
  sp2_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.sp2)
}

// optional int64 sp3 = 24;
inline bool Future::has_sp3() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Future::set_has_sp3() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Future::clear_has_sp3() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Future::clear_sp3() {
  sp3_ = GOOGLE_LONGLONG(0);
  clear_has_sp3();
}
inline ::google::protobuf::int64 Future::sp3() const {
  // @@protoc_insertion_point(field_get:quotation.Future.sp3)
  return sp3_;
}
inline void Future::set_sp3(::google::protobuf::int64 value) {
  set_has_sp3();
  sp3_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.sp3)
}

// optional int64 sp4 = 25;
inline bool Future::has_sp4() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Future::set_has_sp4() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Future::clear_has_sp4() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Future::clear_sp4() {
  sp4_ = GOOGLE_LONGLONG(0);
  clear_has_sp4();
}
inline ::google::protobuf::int64 Future::sp4() const {
  // @@protoc_insertion_point(field_get:quotation.Future.sp4)
  return sp4_;
}
inline void Future::set_sp4(::google::protobuf::int64 value) {
  set_has_sp4();
  sp4_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.sp4)
}

// optional int64 sp5 = 26;
inline bool Future::has_sp5() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Future::set_has_sp5() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Future::clear_has_sp5() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Future::clear_sp5() {
  sp5_ = GOOGLE_LONGLONG(0);
  clear_has_sp5();
}
inline ::google::protobuf::int64 Future::sp5() const {
  // @@protoc_insertion_point(field_get:quotation.Future.sp5)
  return sp5_;
}
inline void Future::set_sp5(::google::protobuf::int64 value) {
  set_has_sp5();
  sp5_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.sp5)
}

// required int64 sa1 = 27;
inline bool Future::has_sa1() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Future::set_has_sa1() {
  _has_bits_[0] |= 0x10000000u;
}
inline void Future::clear_has_sa1() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void Future::clear_sa1() {
  sa1_ = GOOGLE_LONGLONG(0);
  clear_has_sa1();
}
inline ::google::protobuf::int64 Future::sa1() const {
  // @@protoc_insertion_point(field_get:quotation.Future.sa1)
  return sa1_;
}
inline void Future::set_sa1(::google::protobuf::int64 value) {
  set_has_sa1();
  sa1_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.sa1)
}

// optional int64 sa2 = 28;
inline bool Future::has_sa2() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void Future::set_has_sa2() {
  _has_bits_[0] |= 0x20000000u;
}
inline void Future::clear_has_sa2() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void Future::clear_sa2() {
  sa2_ = GOOGLE_LONGLONG(0);
  clear_has_sa2();
}
inline ::google::protobuf::int64 Future::sa2() const {
  // @@protoc_insertion_point(field_get:quotation.Future.sa2)
  return sa2_;
}
inline void Future::set_sa2(::google::protobuf::int64 value) {
  set_has_sa2();
  sa2_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.sa2)
}

// optional int64 sa3 = 29;
inline bool Future::has_sa3() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void Future::set_has_sa3() {
  _has_bits_[0] |= 0x40000000u;
}
inline void Future::clear_has_sa3() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void Future::clear_sa3() {
  sa3_ = GOOGLE_LONGLONG(0);
  clear_has_sa3();
}
inline ::google::protobuf::int64 Future::sa3() const {
  // @@protoc_insertion_point(field_get:quotation.Future.sa3)
  return sa3_;
}
inline void Future::set_sa3(::google::protobuf::int64 value) {
  set_has_sa3();
  sa3_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.sa3)
}

// optional int64 sa4 = 30;
inline bool Future::has_sa4() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void Future::set_has_sa4() {
  _has_bits_[0] |= 0x80000000u;
}
inline void Future::clear_has_sa4() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void Future::clear_sa4() {
  sa4_ = GOOGLE_LONGLONG(0);
  clear_has_sa4();
}
inline ::google::protobuf::int64 Future::sa4() const {
  // @@protoc_insertion_point(field_get:quotation.Future.sa4)
  return sa4_;
}
inline void Future::set_sa4(::google::protobuf::int64 value) {
  set_has_sa4();
  sa4_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.sa4)
}

// optional int64 sa5 = 31;
inline bool Future::has_sa5() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void Future::set_has_sa5() {
  _has_bits_[1] |= 0x00000001u;
}
inline void Future::clear_has_sa5() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void Future::clear_sa5() {
  sa5_ = GOOGLE_LONGLONG(0);
  clear_has_sa5();
}
inline ::google::protobuf::int64 Future::sa5() const {
  // @@protoc_insertion_point(field_get:quotation.Future.sa5)
  return sa5_;
}
inline void Future::set_sa5(::google::protobuf::int64 value) {
  set_has_sa5();
  sa5_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.sa5)
}

// optional string exchange_id = 32;
inline bool Future::has_exchange_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Future::set_has_exchange_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Future::clear_has_exchange_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Future::clear_exchange_id() {
  exchange_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exchange_id();
}
inline const ::std::string& Future::exchange_id() const {
  // @@protoc_insertion_point(field_get:quotation.Future.exchange_id)
  return exchange_id_.GetNoArena();
}
inline void Future::set_exchange_id(const ::std::string& value) {
  set_has_exchange_id();
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.Future.exchange_id)
}
#if LANG_CXX11
inline void Future::set_exchange_id(::std::string&& value) {
  set_has_exchange_id();
  exchange_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.Future.exchange_id)
}
#endif
inline void Future::set_exchange_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_exchange_id();
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.Future.exchange_id)
}
inline void Future::set_exchange_id(const char* value, size_t size) {
  set_has_exchange_id();
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.Future.exchange_id)
}
inline ::std::string* Future::mutable_exchange_id() {
  set_has_exchange_id();
  // @@protoc_insertion_point(field_mutable:quotation.Future.exchange_id)
  return exchange_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Future::release_exchange_id() {
  // @@protoc_insertion_point(field_release:quotation.Future.exchange_id)
  if (!has_exchange_id()) {
    return NULL;
  }
  clear_has_exchange_id();
  return exchange_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Future::set_allocated_exchange_id(::std::string* exchange_id) {
  if (exchange_id != NULL) {
    set_has_exchange_id();
  } else {
    clear_has_exchange_id();
  }
  exchange_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_id);
  // @@protoc_insertion_point(field_set_allocated:quotation.Future.exchange_id)
}

// optional int64 presettlement_price = 33;
inline bool Future::has_presettlement_price() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void Future::set_has_presettlement_price() {
  _has_bits_[1] |= 0x00000002u;
}
inline void Future::clear_has_presettlement_price() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void Future::clear_presettlement_price() {
  presettlement_price_ = GOOGLE_LONGLONG(0);
  clear_has_presettlement_price();
}
inline ::google::protobuf::int64 Future::presettlement_price() const {
  // @@protoc_insertion_point(field_get:quotation.Future.presettlement_price)
  return presettlement_price_;
}
inline void Future::set_presettlement_price(::google::protobuf::int64 value) {
  set_has_presettlement_price();
  presettlement_price_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.presettlement_price)
}

// optional int64 preclose = 34;
inline bool Future::has_preclose() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void Future::set_has_preclose() {
  _has_bits_[1] |= 0x00000004u;
}
inline void Future::clear_has_preclose() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void Future::clear_preclose() {
  preclose_ = GOOGLE_LONGLONG(0);
  clear_has_preclose();
}
inline ::google::protobuf::int64 Future::preclose() const {
  // @@protoc_insertion_point(field_get:quotation.Future.preclose)
  return preclose_;
}
inline void Future::set_preclose(::google::protobuf::int64 value) {
  set_has_preclose();
  preclose_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.preclose)
}

// optional int64 preposition = 35;
inline bool Future::has_preposition() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void Future::set_has_preposition() {
  _has_bits_[1] |= 0x00000008u;
}
inline void Future::clear_has_preposition() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void Future::clear_preposition() {
  preposition_ = GOOGLE_LONGLONG(0);
  clear_has_preposition();
}
inline ::google::protobuf::int64 Future::preposition() const {
  // @@protoc_insertion_point(field_get:quotation.Future.preposition)
  return preposition_;
}
inline void Future::set_preposition(::google::protobuf::int64 value) {
  set_has_preposition();
  preposition_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.preposition)
}

// optional int64 open_price = 36;
inline bool Future::has_open_price() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void Future::set_has_open_price() {
  _has_bits_[1] |= 0x00000010u;
}
inline void Future::clear_has_open_price() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void Future::clear_open_price() {
  open_price_ = GOOGLE_LONGLONG(0);
  clear_has_open_price();
}
inline ::google::protobuf::int64 Future::open_price() const {
  // @@protoc_insertion_point(field_get:quotation.Future.open_price)
  return open_price_;
}
inline void Future::set_open_price(::google::protobuf::int64 value) {
  set_has_open_price();
  open_price_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.open_price)
}

// optional int64 highest_price = 37;
inline bool Future::has_highest_price() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void Future::set_has_highest_price() {
  _has_bits_[1] |= 0x00000020u;
}
inline void Future::clear_has_highest_price() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void Future::clear_highest_price() {
  highest_price_ = GOOGLE_LONGLONG(0);
  clear_has_highest_price();
}
inline ::google::protobuf::int64 Future::highest_price() const {
  // @@protoc_insertion_point(field_get:quotation.Future.highest_price)
  return highest_price_;
}
inline void Future::set_highest_price(::google::protobuf::int64 value) {
  set_has_highest_price();
  highest_price_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.highest_price)
}

// optional int64 lowest_price = 38;
inline bool Future::has_lowest_price() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void Future::set_has_lowest_price() {
  _has_bits_[1] |= 0x00000040u;
}
inline void Future::clear_has_lowest_price() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void Future::clear_lowest_price() {
  lowest_price_ = GOOGLE_LONGLONG(0);
  clear_has_lowest_price();
}
inline ::google::protobuf::int64 Future::lowest_price() const {
  // @@protoc_insertion_point(field_get:quotation.Future.lowest_price)
  return lowest_price_;
}
inline void Future::set_lowest_price(::google::protobuf::int64 value) {
  set_has_lowest_price();
  lowest_price_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.lowest_price)
}

// optional int64 close_price = 39;
inline bool Future::has_close_price() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void Future::set_has_close_price() {
  _has_bits_[1] |= 0x00000080u;
}
inline void Future::clear_has_close_price() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void Future::clear_close_price() {
  close_price_ = GOOGLE_LONGLONG(0);
  clear_has_close_price();
}
inline ::google::protobuf::int64 Future::close_price() const {
  // @@protoc_insertion_point(field_get:quotation.Future.close_price)
  return close_price_;
}
inline void Future::set_close_price(::google::protobuf::int64 value) {
  set_has_close_price();
  close_price_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.close_price)
}

// optional int64 settlement_price = 40;
inline bool Future::has_settlement_price() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void Future::set_has_settlement_price() {
  _has_bits_[1] |= 0x00000100u;
}
inline void Future::clear_has_settlement_price() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void Future::clear_settlement_price() {
  settlement_price_ = GOOGLE_LONGLONG(0);
  clear_has_settlement_price();
}
inline ::google::protobuf::int64 Future::settlement_price() const {
  // @@protoc_insertion_point(field_get:quotation.Future.settlement_price)
  return settlement_price_;
}
inline void Future::set_settlement_price(::google::protobuf::int64 value) {
  set_has_settlement_price();
  settlement_price_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.settlement_price)
}

// optional int64 upperlimit_price = 41;
inline bool Future::has_upperlimit_price() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void Future::set_has_upperlimit_price() {
  _has_bits_[1] |= 0x00000200u;
}
inline void Future::clear_has_upperlimit_price() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void Future::clear_upperlimit_price() {
  upperlimit_price_ = GOOGLE_LONGLONG(0);
  clear_has_upperlimit_price();
}
inline ::google::protobuf::int64 Future::upperlimit_price() const {
  // @@protoc_insertion_point(field_get:quotation.Future.upperlimit_price)
  return upperlimit_price_;
}
inline void Future::set_upperlimit_price(::google::protobuf::int64 value) {
  set_has_upperlimit_price();
  upperlimit_price_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.upperlimit_price)
}

// optional int64 lowerlimit_price = 42;
inline bool Future::has_lowerlimit_price() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void Future::set_has_lowerlimit_price() {
  _has_bits_[1] |= 0x00000400u;
}
inline void Future::clear_has_lowerlimit_price() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void Future::clear_lowerlimit_price() {
  lowerlimit_price_ = GOOGLE_LONGLONG(0);
  clear_has_lowerlimit_price();
}
inline ::google::protobuf::int64 Future::lowerlimit_price() const {
  // @@protoc_insertion_point(field_get:quotation.Future.lowerlimit_price)
  return lowerlimit_price_;
}
inline void Future::set_lowerlimit_price(::google::protobuf::int64 value) {
  set_has_lowerlimit_price();
  lowerlimit_price_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.lowerlimit_price)
}

// optional string update_time = 43;
inline bool Future::has_update_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Future::set_has_update_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Future::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Future::clear_update_time() {
  update_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_update_time();
}
inline const ::std::string& Future::update_time() const {
  // @@protoc_insertion_point(field_get:quotation.Future.update_time)
  return update_time_.GetNoArena();
}
inline void Future::set_update_time(const ::std::string& value) {
  set_has_update_time();
  update_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.Future.update_time)
}
#if LANG_CXX11
inline void Future::set_update_time(::std::string&& value) {
  set_has_update_time();
  update_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.Future.update_time)
}
#endif
inline void Future::set_update_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_update_time();
  update_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.Future.update_time)
}
inline void Future::set_update_time(const char* value, size_t size) {
  set_has_update_time();
  update_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.Future.update_time)
}
inline ::std::string* Future::mutable_update_time() {
  set_has_update_time();
  // @@protoc_insertion_point(field_mutable:quotation.Future.update_time)
  return update_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Future::release_update_time() {
  // @@protoc_insertion_point(field_release:quotation.Future.update_time)
  if (!has_update_time()) {
    return NULL;
  }
  clear_has_update_time();
  return update_time_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Future::set_allocated_update_time(::std::string* update_time) {
  if (update_time != NULL) {
    set_has_update_time();
  } else {
    clear_has_update_time();
  }
  update_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), update_time);
  // @@protoc_insertion_point(field_set_allocated:quotation.Future.update_time)
}

// optional uint32 update_millisec = 44;
inline bool Future::has_update_millisec() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void Future::set_has_update_millisec() {
  _has_bits_[1] |= 0x00010000u;
}
inline void Future::clear_has_update_millisec() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void Future::clear_update_millisec() {
  update_millisec_ = 0u;
  clear_has_update_millisec();
}
inline ::google::protobuf::uint32 Future::update_millisec() const {
  // @@protoc_insertion_point(field_get:quotation.Future.update_millisec)
  return update_millisec_;
}
inline void Future::set_update_millisec(::google::protobuf::uint32 value) {
  set_has_update_millisec();
  update_millisec_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.update_millisec)
}

// optional int64 average_price = 45;
inline bool Future::has_average_price() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void Future::set_has_average_price() {
  _has_bits_[1] |= 0x00000800u;
}
inline void Future::clear_has_average_price() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void Future::clear_average_price() {
  average_price_ = GOOGLE_LONGLONG(0);
  clear_has_average_price();
}
inline ::google::protobuf::int64 Future::average_price() const {
  // @@protoc_insertion_point(field_get:quotation.Future.average_price)
  return average_price_;
}
inline void Future::set_average_price(::google::protobuf::int64 value) {
  set_has_average_price();
  average_price_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.average_price)
}

// optional int64 open_interest = 46;
inline bool Future::has_open_interest() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void Future::set_has_open_interest() {
  _has_bits_[1] |= 0x00001000u;
}
inline void Future::clear_has_open_interest() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void Future::clear_open_interest() {
  open_interest_ = GOOGLE_LONGLONG(0);
  clear_has_open_interest();
}
inline ::google::protobuf::int64 Future::open_interest() const {
  // @@protoc_insertion_point(field_get:quotation.Future.open_interest)
  return open_interest_;
}
inline void Future::set_open_interest(::google::protobuf::int64 value) {
  set_has_open_interest();
  open_interest_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.open_interest)
}

// optional int64 bought_volume = 47;
inline bool Future::has_bought_volume() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void Future::set_has_bought_volume() {
  _has_bits_[1] |= 0x00002000u;
}
inline void Future::clear_has_bought_volume() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void Future::clear_bought_volume() {
  bought_volume_ = GOOGLE_LONGLONG(0);
  clear_has_bought_volume();
}
inline ::google::protobuf::int64 Future::bought_volume() const {
  // @@protoc_insertion_point(field_get:quotation.Future.bought_volume)
  return bought_volume_;
}
inline void Future::set_bought_volume(::google::protobuf::int64 value) {
  set_has_bought_volume();
  bought_volume_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.bought_volume)
}

// optional int64 sold_volume = 48;
inline bool Future::has_sold_volume() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void Future::set_has_sold_volume() {
  _has_bits_[1] |= 0x00004000u;
}
inline void Future::clear_has_sold_volume() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void Future::clear_sold_volume() {
  sold_volume_ = GOOGLE_LONGLONG(0);
  clear_has_sold_volume();
}
inline ::google::protobuf::int64 Future::sold_volume() const {
  // @@protoc_insertion_point(field_get:quotation.Future.sold_volume)
  return sold_volume_;
}
inline void Future::set_sold_volume(::google::protobuf::int64 value) {
  set_has_sold_volume();
  sold_volume_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.sold_volume)
}

// optional int64 market = 49;
inline bool Future::has_market() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void Future::set_has_market() {
  _has_bits_[1] |= 0x00008000u;
}
inline void Future::clear_has_market() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void Future::clear_market() {
  market_ = GOOGLE_LONGLONG(0);
  clear_has_market();
}
inline ::google::protobuf::int64 Future::market() const {
  // @@protoc_insertion_point(field_get:quotation.Future.market)
  return market_;
}
inline void Future::set_market(::google::protobuf::int64 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:quotation.Future.market)
}

// -------------------------------------------------------------------

// Option

// optional string type = 1 [default = "O"];
inline bool Option::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Option::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Option::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Option::clear_type() {
  type_.ClearToDefaultNoArena(&::quotation::Option::_i_give_permission_to_break_this_code_default_type_.get());
  clear_has_type();
}
inline const ::std::string& Option::type() const {
  // @@protoc_insertion_point(field_get:quotation.Option.type)
  return type_.GetNoArena();
}
inline void Option::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::quotation::Option::_i_give_permission_to_break_this_code_default_type_.get(), value);
  // @@protoc_insertion_point(field_set:quotation.Option.type)
}
#if LANG_CXX11
inline void Option::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::quotation::Option::_i_give_permission_to_break_this_code_default_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.Option.type)
}
#endif
inline void Option::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::quotation::Option::_i_give_permission_to_break_this_code_default_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.Option.type)
}
inline void Option::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::quotation::Option::_i_give_permission_to_break_this_code_default_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.Option.type)
}
inline ::std::string* Option::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:quotation.Option.type)
  return type_.MutableNoArena(&::quotation::Option::_i_give_permission_to_break_this_code_default_type_.get());
}
inline ::std::string* Option::release_type() {
  // @@protoc_insertion_point(field_release:quotation.Option.type)
  if (!has_type()) {
    return NULL;
  }
  clear_has_type();
  return type_.ReleaseNonDefaultNoArena(&::quotation::Option::_i_give_permission_to_break_this_code_default_type_.get());
}
inline void Option::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::quotation::Option::_i_give_permission_to_break_this_code_default_type_.get(), type);
  // @@protoc_insertion_point(field_set_allocated:quotation.Option.type)
}

// optional uint32 trading_day = 2;
inline bool Option::has_trading_day() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Option::set_has_trading_day() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Option::clear_has_trading_day() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Option::clear_trading_day() {
  trading_day_ = 0u;
  clear_has_trading_day();
}
inline ::google::protobuf::uint32 Option::trading_day() const {
  // @@protoc_insertion_point(field_get:quotation.Option.trading_day)
  return trading_day_;
}
inline void Option::set_trading_day(::google::protobuf::uint32 value) {
  set_has_trading_day();
  trading_day_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.trading_day)
}

// required uint32 stamp = 3;
inline bool Option::has_stamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Option::set_has_stamp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Option::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Option::clear_stamp() {
  stamp_ = 0u;
  clear_has_stamp();
}
inline ::google::protobuf::uint32 Option::stamp() const {
  // @@protoc_insertion_point(field_get:quotation.Option.stamp)
  return stamp_;
}
inline void Option::set_stamp(::google::protobuf::uint32 value) {
  set_has_stamp();
  stamp_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.stamp)
}

// required string code = 4;
inline bool Option::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Option::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Option::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Option::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& Option::code() const {
  // @@protoc_insertion_point(field_get:quotation.Option.code)
  return code_.GetNoArena();
}
inline void Option::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.Option.code)
}
#if LANG_CXX11
inline void Option::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.Option.code)
}
#endif
inline void Option::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.Option.code)
}
inline void Option::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.Option.code)
}
inline ::std::string* Option::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:quotation.Option.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Option::release_code() {
  // @@protoc_insertion_point(field_release:quotation.Option.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Option::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:quotation.Option.code)
}

// optional string trade_code = 5;
inline bool Option::has_trade_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Option::set_has_trade_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Option::clear_has_trade_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Option::clear_trade_code() {
  trade_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trade_code();
}
inline const ::std::string& Option::trade_code() const {
  // @@protoc_insertion_point(field_get:quotation.Option.trade_code)
  return trade_code_.GetNoArena();
}
inline void Option::set_trade_code(const ::std::string& value) {
  set_has_trade_code();
  trade_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.Option.trade_code)
}
#if LANG_CXX11
inline void Option::set_trade_code(::std::string&& value) {
  set_has_trade_code();
  trade_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.Option.trade_code)
}
#endif
inline void Option::set_trade_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trade_code();
  trade_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.Option.trade_code)
}
inline void Option::set_trade_code(const char* value, size_t size) {
  set_has_trade_code();
  trade_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.Option.trade_code)
}
inline ::std::string* Option::mutable_trade_code() {
  set_has_trade_code();
  // @@protoc_insertion_point(field_mutable:quotation.Option.trade_code)
  return trade_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Option::release_trade_code() {
  // @@protoc_insertion_point(field_release:quotation.Option.trade_code)
  if (!has_trade_code()) {
    return NULL;
  }
  clear_has_trade_code();
  return trade_code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Option::set_allocated_trade_code(::std::string* trade_code) {
  if (trade_code != NULL) {
    set_has_trade_code();
  } else {
    clear_has_trade_code();
  }
  trade_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trade_code);
  // @@protoc_insertion_point(field_set_allocated:quotation.Option.trade_code)
}

// optional string name = 6;
inline bool Option::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Option::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Option::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Option::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Option::name() const {
  // @@protoc_insertion_point(field_get:quotation.Option.name)
  return name_.GetNoArena();
}
inline void Option::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.Option.name)
}
#if LANG_CXX11
inline void Option::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.Option.name)
}
#endif
inline void Option::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.Option.name)
}
inline void Option::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.Option.name)
}
inline ::std::string* Option::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:quotation.Option.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Option::release_name() {
  // @@protoc_insertion_point(field_release:quotation.Option.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Option::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:quotation.Option.name)
}

// optional int64 market = 7;
inline bool Option::has_market() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Option::set_has_market() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Option::clear_has_market() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Option::clear_market() {
  market_ = GOOGLE_LONGLONG(0);
  clear_has_market();
}
inline ::google::protobuf::int64 Option::market() const {
  // @@protoc_insertion_point(field_get:quotation.Option.market)
  return market_;
}
inline void Option::set_market(::google::protobuf::int64 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.market)
}

// optional uint32 start_date = 8;
inline bool Option::has_start_date() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Option::set_has_start_date() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Option::clear_has_start_date() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Option::clear_start_date() {
  start_date_ = 0u;
  clear_has_start_date();
}
inline ::google::protobuf::uint32 Option::start_date() const {
  // @@protoc_insertion_point(field_get:quotation.Option.start_date)
  return start_date_;
}
inline void Option::set_start_date(::google::protobuf::uint32 value) {
  set_has_start_date();
  start_date_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.start_date)
}

// optional uint32 end_date = 9;
inline bool Option::has_end_date() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Option::set_has_end_date() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Option::clear_has_end_date() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Option::clear_end_date() {
  end_date_ = 0u;
  clear_has_end_date();
}
inline ::google::protobuf::uint32 Option::end_date() const {
  // @@protoc_insertion_point(field_get:quotation.Option.end_date)
  return end_date_;
}
inline void Option::set_end_date(::google::protobuf::uint32 value) {
  set_has_end_date();
  end_date_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.end_date)
}

// optional uint32 expire_date = 10;
inline bool Option::has_expire_date() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Option::set_has_expire_date() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Option::clear_has_expire_date() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Option::clear_expire_date() {
  expire_date_ = 0u;
  clear_has_expire_date();
}
inline ::google::protobuf::uint32 Option::expire_date() const {
  // @@protoc_insertion_point(field_get:quotation.Option.expire_date)
  return expire_date_;
}
inline void Option::set_expire_date(::google::protobuf::uint32 value) {
  set_has_expire_date();
  expire_date_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.expire_date)
}

// optional uint32 exercise_date = 11;
inline bool Option::has_exercise_date() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Option::set_has_exercise_date() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Option::clear_has_exercise_date() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Option::clear_exercise_date() {
  exercise_date_ = 0u;
  clear_has_exercise_date();
}
inline ::google::protobuf::uint32 Option::exercise_date() const {
  // @@protoc_insertion_point(field_get:quotation.Option.exercise_date)
  return exercise_date_;
}
inline void Option::set_exercise_date(::google::protobuf::uint32 value) {
  set_has_exercise_date();
  exercise_date_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.exercise_date)
}

// optional int64 exercise_price = 12;
inline bool Option::has_exercise_price() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Option::set_has_exercise_price() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Option::clear_has_exercise_price() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Option::clear_exercise_price() {
  exercise_price_ = GOOGLE_LONGLONG(0);
  clear_has_exercise_price();
}
inline ::google::protobuf::int64 Option::exercise_price() const {
  // @@protoc_insertion_point(field_get:quotation.Option.exercise_price)
  return exercise_price_;
}
inline void Option::set_exercise_price(::google::protobuf::int64 value) {
  set_has_exercise_price();
  exercise_price_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.exercise_price)
}

// optional string underlying_code = 13;
inline bool Option::has_underlying_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Option::set_has_underlying_code() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Option::clear_has_underlying_code() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Option::clear_underlying_code() {
  underlying_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_underlying_code();
}
inline const ::std::string& Option::underlying_code() const {
  // @@protoc_insertion_point(field_get:quotation.Option.underlying_code)
  return underlying_code_.GetNoArena();
}
inline void Option::set_underlying_code(const ::std::string& value) {
  set_has_underlying_code();
  underlying_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.Option.underlying_code)
}
#if LANG_CXX11
inline void Option::set_underlying_code(::std::string&& value) {
  set_has_underlying_code();
  underlying_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.Option.underlying_code)
}
#endif
inline void Option::set_underlying_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_underlying_code();
  underlying_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.Option.underlying_code)
}
inline void Option::set_underlying_code(const char* value, size_t size) {
  set_has_underlying_code();
  underlying_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.Option.underlying_code)
}
inline ::std::string* Option::mutable_underlying_code() {
  set_has_underlying_code();
  // @@protoc_insertion_point(field_mutable:quotation.Option.underlying_code)
  return underlying_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Option::release_underlying_code() {
  // @@protoc_insertion_point(field_release:quotation.Option.underlying_code)
  if (!has_underlying_code()) {
    return NULL;
  }
  clear_has_underlying_code();
  return underlying_code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Option::set_allocated_underlying_code(::std::string* underlying_code) {
  if (underlying_code != NULL) {
    set_has_underlying_code();
  } else {
    clear_has_underlying_code();
  }
  underlying_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), underlying_code);
  // @@protoc_insertion_point(field_set_allocated:quotation.Option.underlying_code)
}

// optional int32 underlying_type = 14;
inline bool Option::has_underlying_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Option::set_has_underlying_type() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Option::clear_has_underlying_type() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Option::clear_underlying_type() {
  underlying_type_ = 0;
  clear_has_underlying_type();
}
inline ::google::protobuf::int32 Option::underlying_type() const {
  // @@protoc_insertion_point(field_get:quotation.Option.underlying_type)
  return underlying_type_;
}
inline void Option::set_underlying_type(::google::protobuf::int32 value) {
  set_has_underlying_type();
  underlying_type_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.underlying_type)
}

// optional int32 cp_flag = 15;
inline bool Option::has_cp_flag() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Option::set_has_cp_flag() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Option::clear_has_cp_flag() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Option::clear_cp_flag() {
  cp_flag_ = 0;
  clear_has_cp_flag();
}
inline ::google::protobuf::int32 Option::cp_flag() const {
  // @@protoc_insertion_point(field_get:quotation.Option.cp_flag)
  return cp_flag_;
}
inline void Option::set_cp_flag(::google::protobuf::int32 value) {
  set_has_cp_flag();
  cp_flag_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.cp_flag)
}

// optional int32 option_type = 16;
inline bool Option::has_option_type() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Option::set_has_option_type() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Option::clear_has_option_type() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Option::clear_option_type() {
  option_type_ = 0;
  clear_has_option_type();
}
inline ::google::protobuf::int32 Option::option_type() const {
  // @@protoc_insertion_point(field_get:quotation.Option.option_type)
  return option_type_;
}
inline void Option::set_option_type(::google::protobuf::int32 value) {
  set_has_option_type();
  option_type_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.option_type)
}

// optional int32 preformance_type = 17;
inline bool Option::has_preformance_type() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Option::set_has_preformance_type() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Option::clear_has_preformance_type() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Option::clear_preformance_type() {
  preformance_type_ = 0;
  clear_has_preformance_type();
}
inline ::google::protobuf::int32 Option::preformance_type() const {
  // @@protoc_insertion_point(field_get:quotation.Option.preformance_type)
  return preformance_type_;
}
inline void Option::set_preformance_type(::google::protobuf::int32 value) {
  set_has_preformance_type();
  preformance_type_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.preformance_type)
}

// optional int32 price_limit_type = 18;
inline bool Option::has_price_limit_type() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Option::set_has_price_limit_type() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Option::clear_has_price_limit_type() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Option::clear_price_limit_type() {
  price_limit_type_ = 0;
  clear_has_price_limit_type();
}
inline ::google::protobuf::int32 Option::price_limit_type() const {
  // @@protoc_insertion_point(field_get:quotation.Option.price_limit_type)
  return price_limit_type_;
}
inline void Option::set_price_limit_type(::google::protobuf::int32 value) {
  set_has_price_limit_type();
  price_limit_type_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.price_limit_type)
}

// optional int64 contract_unit = 19;
inline bool Option::has_contract_unit() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Option::set_has_contract_unit() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Option::clear_has_contract_unit() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Option::clear_contract_unit() {
  contract_unit_ = GOOGLE_LONGLONG(0);
  clear_has_contract_unit();
}
inline ::google::protobuf::int64 Option::contract_unit() const {
  // @@protoc_insertion_point(field_get:quotation.Option.contract_unit)
  return contract_unit_;
}
inline void Option::set_contract_unit(::google::protobuf::int64 value) {
  set_has_contract_unit();
  contract_unit_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.contract_unit)
}

// optional uint32 exchange_time = 20;
inline bool Option::has_exchange_time() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Option::set_has_exchange_time() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Option::clear_has_exchange_time() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Option::clear_exchange_time() {
  exchange_time_ = 0u;
  clear_has_exchange_time();
}
inline ::google::protobuf::uint32 Option::exchange_time() const {
  // @@protoc_insertion_point(field_get:quotation.Option.exchange_time)
  return exchange_time_;
}
inline void Option::set_exchange_time(::google::protobuf::uint32 value) {
  set_has_exchange_time();
  exchange_time_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.exchange_time)
}

// optional int32 state = 21;
inline bool Option::has_state() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void Option::set_has_state() {
  _has_bits_[1] |= 0x01000000u;
}
inline void Option::clear_has_state() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void Option::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 Option::state() const {
  // @@protoc_insertion_point(field_get:quotation.Option.state)
  return state_;
}
inline void Option::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.state)
}

// optional int64 pre_open_interest = 22;
inline bool Option::has_pre_open_interest() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Option::set_has_pre_open_interest() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Option::clear_has_pre_open_interest() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Option::clear_pre_open_interest() {
  pre_open_interest_ = GOOGLE_LONGLONG(0);
  clear_has_pre_open_interest();
}
inline ::google::protobuf::int64 Option::pre_open_interest() const {
  // @@protoc_insertion_point(field_get:quotation.Option.pre_open_interest)
  return pre_open_interest_;
}
inline void Option::set_pre_open_interest(::google::protobuf::int64 value) {
  set_has_pre_open_interest();
  pre_open_interest_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.pre_open_interest)
}

// optional int64 pre_close = 23;
inline bool Option::has_pre_close() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Option::set_has_pre_close() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Option::clear_has_pre_close() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Option::clear_pre_close() {
  pre_close_ = GOOGLE_LONGLONG(0);
  clear_has_pre_close();
}
inline ::google::protobuf::int64 Option::pre_close() const {
  // @@protoc_insertion_point(field_get:quotation.Option.pre_close)
  return pre_close_;
}
inline void Option::set_pre_close(::google::protobuf::int64 value) {
  set_has_pre_close();
  pre_close_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.pre_close)
}

// optional int64 pre_settle = 24;
inline bool Option::has_pre_settle() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Option::set_has_pre_settle() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Option::clear_has_pre_settle() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Option::clear_pre_settle() {
  pre_settle_ = GOOGLE_LONGLONG(0);
  clear_has_pre_settle();
}
inline ::google::protobuf::int64 Option::pre_settle() const {
  // @@protoc_insertion_point(field_get:quotation.Option.pre_settle)
  return pre_settle_;
}
inline void Option::set_pre_settle(::google::protobuf::int64 value) {
  set_has_pre_settle();
  pre_settle_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.pre_settle)
}

// optional int64 open = 25;
inline bool Option::has_open() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Option::set_has_open() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Option::clear_has_open() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Option::clear_open() {
  open_ = GOOGLE_LONGLONG(0);
  clear_has_open();
}
inline ::google::protobuf::int64 Option::open() const {
  // @@protoc_insertion_point(field_get:quotation.Option.open)
  return open_;
}
inline void Option::set_open(::google::protobuf::int64 value) {
  set_has_open();
  open_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.open)
}

// optional int64 high = 26;
inline bool Option::has_high() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Option::set_has_high() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Option::clear_has_high() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Option::clear_high() {
  high_ = GOOGLE_LONGLONG(0);
  clear_has_high();
}
inline ::google::protobuf::int64 Option::high() const {
  // @@protoc_insertion_point(field_get:quotation.Option.high)
  return high_;
}
inline void Option::set_high(::google::protobuf::int64 value) {
  set_has_high();
  high_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.high)
}

// optional int64 low = 27;
inline bool Option::has_low() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Option::set_has_low() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Option::clear_has_low() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Option::clear_low() {
  low_ = GOOGLE_LONGLONG(0);
  clear_has_low();
}
inline ::google::protobuf::int64 Option::low() const {
  // @@protoc_insertion_point(field_get:quotation.Option.low)
  return low_;
}
inline void Option::set_low(::google::protobuf::int64 value) {
  set_has_low();
  low_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.low)
}

// optional int64 latest = 28;
inline bool Option::has_latest() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Option::set_has_latest() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Option::clear_has_latest() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Option::clear_latest() {
  latest_ = GOOGLE_LONGLONG(0);
  clear_has_latest();
}
inline ::google::protobuf::int64 Option::latest() const {
  // @@protoc_insertion_point(field_get:quotation.Option.latest)
  return latest_;
}
inline void Option::set_latest(::google::protobuf::int64 value) {
  set_has_latest();
  latest_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.latest)
}

// optional int64 volume = 29;
inline bool Option::has_volume() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Option::set_has_volume() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Option::clear_has_volume() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Option::clear_volume() {
  volume_ = GOOGLE_LONGLONG(0);
  clear_has_volume();
}
inline ::google::protobuf::int64 Option::volume() const {
  // @@protoc_insertion_point(field_get:quotation.Option.volume)
  return volume_;
}
inline void Option::set_volume(::google::protobuf::int64 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.volume)
}

// optional int64 amount = 30;
inline bool Option::has_amount() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Option::set_has_amount() {
  _has_bits_[0] |= 0x10000000u;
}
inline void Option::clear_has_amount() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void Option::clear_amount() {
  amount_ = GOOGLE_LONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::int64 Option::amount() const {
  // @@protoc_insertion_point(field_get:quotation.Option.amount)
  return amount_;
}
inline void Option::set_amount(::google::protobuf::int64 value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.amount)
}

// optional int64 open_interest = 31;
inline bool Option::has_open_interest() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void Option::set_has_open_interest() {
  _has_bits_[0] |= 0x20000000u;
}
inline void Option::clear_has_open_interest() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void Option::clear_open_interest() {
  open_interest_ = GOOGLE_LONGLONG(0);
  clear_has_open_interest();
}
inline ::google::protobuf::int64 Option::open_interest() const {
  // @@protoc_insertion_point(field_get:quotation.Option.open_interest)
  return open_interest_;
}
inline void Option::set_open_interest(::google::protobuf::int64 value) {
  set_has_open_interest();
  open_interest_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.open_interest)
}

// optional int64 close = 32;
inline bool Option::has_close() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void Option::set_has_close() {
  _has_bits_[0] |= 0x40000000u;
}
inline void Option::clear_has_close() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void Option::clear_close() {
  close_ = GOOGLE_LONGLONG(0);
  clear_has_close();
}
inline ::google::protobuf::int64 Option::close() const {
  // @@protoc_insertion_point(field_get:quotation.Option.close)
  return close_;
}
inline void Option::set_close(::google::protobuf::int64 value) {
  set_has_close();
  close_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.close)
}

// optional int64 settle = 33;
inline bool Option::has_settle() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void Option::set_has_settle() {
  _has_bits_[0] |= 0x80000000u;
}
inline void Option::clear_has_settle() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void Option::clear_settle() {
  settle_ = GOOGLE_LONGLONG(0);
  clear_has_settle();
}
inline ::google::protobuf::int64 Option::settle() const {
  // @@protoc_insertion_point(field_get:quotation.Option.settle)
  return settle_;
}
inline void Option::set_settle(::google::protobuf::int64 value) {
  set_has_settle();
  settle_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.settle)
}

// optional int64 high_limit = 34;
inline bool Option::has_high_limit() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void Option::set_has_high_limit() {
  _has_bits_[1] |= 0x00000001u;
}
inline void Option::clear_has_high_limit() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void Option::clear_high_limit() {
  high_limit_ = GOOGLE_LONGLONG(0);
  clear_has_high_limit();
}
inline ::google::protobuf::int64 Option::high_limit() const {
  // @@protoc_insertion_point(field_get:quotation.Option.high_limit)
  return high_limit_;
}
inline void Option::set_high_limit(::google::protobuf::int64 value) {
  set_has_high_limit();
  high_limit_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.high_limit)
}

// optional int64 low_limit = 35;
inline bool Option::has_low_limit() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void Option::set_has_low_limit() {
  _has_bits_[1] |= 0x00000002u;
}
inline void Option::clear_has_low_limit() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void Option::clear_low_limit() {
  low_limit_ = GOOGLE_LONGLONG(0);
  clear_has_low_limit();
}
inline ::google::protobuf::int64 Option::low_limit() const {
  // @@protoc_insertion_point(field_get:quotation.Option.low_limit)
  return low_limit_;
}
inline void Option::set_low_limit(::google::protobuf::int64 value) {
  set_has_low_limit();
  low_limit_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.low_limit)
}

// optional int64 pre_delta = 36;
inline bool Option::has_pre_delta() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void Option::set_has_pre_delta() {
  _has_bits_[1] |= 0x00000004u;
}
inline void Option::clear_has_pre_delta() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void Option::clear_pre_delta() {
  pre_delta_ = GOOGLE_LONGLONG(0);
  clear_has_pre_delta();
}
inline ::google::protobuf::int64 Option::pre_delta() const {
  // @@protoc_insertion_point(field_get:quotation.Option.pre_delta)
  return pre_delta_;
}
inline void Option::set_pre_delta(::google::protobuf::int64 value) {
  set_has_pre_delta();
  pre_delta_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.pre_delta)
}

// optional int64 delta = 37;
inline bool Option::has_delta() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void Option::set_has_delta() {
  _has_bits_[1] |= 0x00000008u;
}
inline void Option::clear_has_delta() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void Option::clear_delta() {
  delta_ = GOOGLE_LONGLONG(0);
  clear_has_delta();
}
inline ::google::protobuf::int64 Option::delta() const {
  // @@protoc_insertion_point(field_get:quotation.Option.delta)
  return delta_;
}
inline void Option::set_delta(::google::protobuf::int64 value) {
  set_has_delta();
  delta_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.delta)
}

// optional int64 bp1 = 38;
inline bool Option::has_bp1() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void Option::set_has_bp1() {
  _has_bits_[1] |= 0x00000010u;
}
inline void Option::clear_has_bp1() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void Option::clear_bp1() {
  bp1_ = GOOGLE_LONGLONG(0);
  clear_has_bp1();
}
inline ::google::protobuf::int64 Option::bp1() const {
  // @@protoc_insertion_point(field_get:quotation.Option.bp1)
  return bp1_;
}
inline void Option::set_bp1(::google::protobuf::int64 value) {
  set_has_bp1();
  bp1_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.bp1)
}

// optional int64 bp2 = 39;
inline bool Option::has_bp2() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void Option::set_has_bp2() {
  _has_bits_[1] |= 0x00000020u;
}
inline void Option::clear_has_bp2() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void Option::clear_bp2() {
  bp2_ = GOOGLE_LONGLONG(0);
  clear_has_bp2();
}
inline ::google::protobuf::int64 Option::bp2() const {
  // @@protoc_insertion_point(field_get:quotation.Option.bp2)
  return bp2_;
}
inline void Option::set_bp2(::google::protobuf::int64 value) {
  set_has_bp2();
  bp2_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.bp2)
}

// optional int64 bp3 = 40;
inline bool Option::has_bp3() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void Option::set_has_bp3() {
  _has_bits_[1] |= 0x00000040u;
}
inline void Option::clear_has_bp3() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void Option::clear_bp3() {
  bp3_ = GOOGLE_LONGLONG(0);
  clear_has_bp3();
}
inline ::google::protobuf::int64 Option::bp3() const {
  // @@protoc_insertion_point(field_get:quotation.Option.bp3)
  return bp3_;
}
inline void Option::set_bp3(::google::protobuf::int64 value) {
  set_has_bp3();
  bp3_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.bp3)
}

// optional int64 bp4 = 41;
inline bool Option::has_bp4() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void Option::set_has_bp4() {
  _has_bits_[1] |= 0x00000080u;
}
inline void Option::clear_has_bp4() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void Option::clear_bp4() {
  bp4_ = GOOGLE_LONGLONG(0);
  clear_has_bp4();
}
inline ::google::protobuf::int64 Option::bp4() const {
  // @@protoc_insertion_point(field_get:quotation.Option.bp4)
  return bp4_;
}
inline void Option::set_bp4(::google::protobuf::int64 value) {
  set_has_bp4();
  bp4_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.bp4)
}

// optional int64 bp5 = 42;
inline bool Option::has_bp5() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void Option::set_has_bp5() {
  _has_bits_[1] |= 0x00000100u;
}
inline void Option::clear_has_bp5() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void Option::clear_bp5() {
  bp5_ = GOOGLE_LONGLONG(0);
  clear_has_bp5();
}
inline ::google::protobuf::int64 Option::bp5() const {
  // @@protoc_insertion_point(field_get:quotation.Option.bp5)
  return bp5_;
}
inline void Option::set_bp5(::google::protobuf::int64 value) {
  set_has_bp5();
  bp5_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.bp5)
}

// optional int64 ba1 = 43;
inline bool Option::has_ba1() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void Option::set_has_ba1() {
  _has_bits_[1] |= 0x00000200u;
}
inline void Option::clear_has_ba1() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void Option::clear_ba1() {
  ba1_ = GOOGLE_LONGLONG(0);
  clear_has_ba1();
}
inline ::google::protobuf::int64 Option::ba1() const {
  // @@protoc_insertion_point(field_get:quotation.Option.ba1)
  return ba1_;
}
inline void Option::set_ba1(::google::protobuf::int64 value) {
  set_has_ba1();
  ba1_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.ba1)
}

// optional int64 ba2 = 44;
inline bool Option::has_ba2() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void Option::set_has_ba2() {
  _has_bits_[1] |= 0x00000400u;
}
inline void Option::clear_has_ba2() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void Option::clear_ba2() {
  ba2_ = GOOGLE_LONGLONG(0);
  clear_has_ba2();
}
inline ::google::protobuf::int64 Option::ba2() const {
  // @@protoc_insertion_point(field_get:quotation.Option.ba2)
  return ba2_;
}
inline void Option::set_ba2(::google::protobuf::int64 value) {
  set_has_ba2();
  ba2_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.ba2)
}

// optional int64 ba3 = 45;
inline bool Option::has_ba3() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void Option::set_has_ba3() {
  _has_bits_[1] |= 0x00000800u;
}
inline void Option::clear_has_ba3() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void Option::clear_ba3() {
  ba3_ = GOOGLE_LONGLONG(0);
  clear_has_ba3();
}
inline ::google::protobuf::int64 Option::ba3() const {
  // @@protoc_insertion_point(field_get:quotation.Option.ba3)
  return ba3_;
}
inline void Option::set_ba3(::google::protobuf::int64 value) {
  set_has_ba3();
  ba3_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.ba3)
}

// optional int64 ba4 = 46;
inline bool Option::has_ba4() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void Option::set_has_ba4() {
  _has_bits_[1] |= 0x00001000u;
}
inline void Option::clear_has_ba4() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void Option::clear_ba4() {
  ba4_ = GOOGLE_LONGLONG(0);
  clear_has_ba4();
}
inline ::google::protobuf::int64 Option::ba4() const {
  // @@protoc_insertion_point(field_get:quotation.Option.ba4)
  return ba4_;
}
inline void Option::set_ba4(::google::protobuf::int64 value) {
  set_has_ba4();
  ba4_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.ba4)
}

// optional int64 ba5 = 47;
inline bool Option::has_ba5() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void Option::set_has_ba5() {
  _has_bits_[1] |= 0x00002000u;
}
inline void Option::clear_has_ba5() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void Option::clear_ba5() {
  ba5_ = GOOGLE_LONGLONG(0);
  clear_has_ba5();
}
inline ::google::protobuf::int64 Option::ba5() const {
  // @@protoc_insertion_point(field_get:quotation.Option.ba5)
  return ba5_;
}
inline void Option::set_ba5(::google::protobuf::int64 value) {
  set_has_ba5();
  ba5_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.ba5)
}

// optional int64 sp1 = 48;
inline bool Option::has_sp1() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void Option::set_has_sp1() {
  _has_bits_[1] |= 0x00004000u;
}
inline void Option::clear_has_sp1() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void Option::clear_sp1() {
  sp1_ = GOOGLE_LONGLONG(0);
  clear_has_sp1();
}
inline ::google::protobuf::int64 Option::sp1() const {
  // @@protoc_insertion_point(field_get:quotation.Option.sp1)
  return sp1_;
}
inline void Option::set_sp1(::google::protobuf::int64 value) {
  set_has_sp1();
  sp1_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.sp1)
}

// optional int64 sp2 = 49;
inline bool Option::has_sp2() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void Option::set_has_sp2() {
  _has_bits_[1] |= 0x00008000u;
}
inline void Option::clear_has_sp2() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void Option::clear_sp2() {
  sp2_ = GOOGLE_LONGLONG(0);
  clear_has_sp2();
}
inline ::google::protobuf::int64 Option::sp2() const {
  // @@protoc_insertion_point(field_get:quotation.Option.sp2)
  return sp2_;
}
inline void Option::set_sp2(::google::protobuf::int64 value) {
  set_has_sp2();
  sp2_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.sp2)
}

// optional int64 sp3 = 50;
inline bool Option::has_sp3() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void Option::set_has_sp3() {
  _has_bits_[1] |= 0x00010000u;
}
inline void Option::clear_has_sp3() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void Option::clear_sp3() {
  sp3_ = GOOGLE_LONGLONG(0);
  clear_has_sp3();
}
inline ::google::protobuf::int64 Option::sp3() const {
  // @@protoc_insertion_point(field_get:quotation.Option.sp3)
  return sp3_;
}
inline void Option::set_sp3(::google::protobuf::int64 value) {
  set_has_sp3();
  sp3_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.sp3)
}

// optional int64 sp4 = 51;
inline bool Option::has_sp4() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void Option::set_has_sp4() {
  _has_bits_[1] |= 0x00020000u;
}
inline void Option::clear_has_sp4() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void Option::clear_sp4() {
  sp4_ = GOOGLE_LONGLONG(0);
  clear_has_sp4();
}
inline ::google::protobuf::int64 Option::sp4() const {
  // @@protoc_insertion_point(field_get:quotation.Option.sp4)
  return sp4_;
}
inline void Option::set_sp4(::google::protobuf::int64 value) {
  set_has_sp4();
  sp4_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.sp4)
}

// optional int64 sp5 = 52;
inline bool Option::has_sp5() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void Option::set_has_sp5() {
  _has_bits_[1] |= 0x00040000u;
}
inline void Option::clear_has_sp5() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void Option::clear_sp5() {
  sp5_ = GOOGLE_LONGLONG(0);
  clear_has_sp5();
}
inline ::google::protobuf::int64 Option::sp5() const {
  // @@protoc_insertion_point(field_get:quotation.Option.sp5)
  return sp5_;
}
inline void Option::set_sp5(::google::protobuf::int64 value) {
  set_has_sp5();
  sp5_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.sp5)
}

// optional int64 sa1 = 53;
inline bool Option::has_sa1() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void Option::set_has_sa1() {
  _has_bits_[1] |= 0x00080000u;
}
inline void Option::clear_has_sa1() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void Option::clear_sa1() {
  sa1_ = GOOGLE_LONGLONG(0);
  clear_has_sa1();
}
inline ::google::protobuf::int64 Option::sa1() const {
  // @@protoc_insertion_point(field_get:quotation.Option.sa1)
  return sa1_;
}
inline void Option::set_sa1(::google::protobuf::int64 value) {
  set_has_sa1();
  sa1_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.sa1)
}

// optional int64 sa2 = 54;
inline bool Option::has_sa2() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void Option::set_has_sa2() {
  _has_bits_[1] |= 0x00100000u;
}
inline void Option::clear_has_sa2() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void Option::clear_sa2() {
  sa2_ = GOOGLE_LONGLONG(0);
  clear_has_sa2();
}
inline ::google::protobuf::int64 Option::sa2() const {
  // @@protoc_insertion_point(field_get:quotation.Option.sa2)
  return sa2_;
}
inline void Option::set_sa2(::google::protobuf::int64 value) {
  set_has_sa2();
  sa2_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.sa2)
}

// optional int64 sa3 = 55;
inline bool Option::has_sa3() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void Option::set_has_sa3() {
  _has_bits_[1] |= 0x00200000u;
}
inline void Option::clear_has_sa3() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void Option::clear_sa3() {
  sa3_ = GOOGLE_LONGLONG(0);
  clear_has_sa3();
}
inline ::google::protobuf::int64 Option::sa3() const {
  // @@protoc_insertion_point(field_get:quotation.Option.sa3)
  return sa3_;
}
inline void Option::set_sa3(::google::protobuf::int64 value) {
  set_has_sa3();
  sa3_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.sa3)
}

// optional int64 sa4 = 56;
inline bool Option::has_sa4() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void Option::set_has_sa4() {
  _has_bits_[1] |= 0x00400000u;
}
inline void Option::clear_has_sa4() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void Option::clear_sa4() {
  sa4_ = GOOGLE_LONGLONG(0);
  clear_has_sa4();
}
inline ::google::protobuf::int64 Option::sa4() const {
  // @@protoc_insertion_point(field_get:quotation.Option.sa4)
  return sa4_;
}
inline void Option::set_sa4(::google::protobuf::int64 value) {
  set_has_sa4();
  sa4_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.sa4)
}

// optional int64 sa5 = 57;
inline bool Option::has_sa5() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void Option::set_has_sa5() {
  _has_bits_[1] |= 0x00800000u;
}
inline void Option::clear_has_sa5() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void Option::clear_sa5() {
  sa5_ = GOOGLE_LONGLONG(0);
  clear_has_sa5();
}
inline ::google::protobuf::int64 Option::sa5() const {
  // @@protoc_insertion_point(field_get:quotation.Option.sa5)
  return sa5_;
}
inline void Option::set_sa5(::google::protobuf::int64 value) {
  set_has_sa5();
  sa5_ = value;
  // @@protoc_insertion_point(field_set:quotation.Option.sa5)
}

// -------------------------------------------------------------------

// Index

// optional string type = 1 [default = "I"];
inline bool Index::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Index::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Index::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Index::clear_type() {
  type_.ClearToDefaultNoArena(&::quotation::Index::_i_give_permission_to_break_this_code_default_type_.get());
  clear_has_type();
}
inline const ::std::string& Index::type() const {
  // @@protoc_insertion_point(field_get:quotation.Index.type)
  return type_.GetNoArena();
}
inline void Index::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::quotation::Index::_i_give_permission_to_break_this_code_default_type_.get(), value);
  // @@protoc_insertion_point(field_set:quotation.Index.type)
}
#if LANG_CXX11
inline void Index::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::quotation::Index::_i_give_permission_to_break_this_code_default_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.Index.type)
}
#endif
inline void Index::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::quotation::Index::_i_give_permission_to_break_this_code_default_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.Index.type)
}
inline void Index::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::quotation::Index::_i_give_permission_to_break_this_code_default_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.Index.type)
}
inline ::std::string* Index::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:quotation.Index.type)
  return type_.MutableNoArena(&::quotation::Index::_i_give_permission_to_break_this_code_default_type_.get());
}
inline ::std::string* Index::release_type() {
  // @@protoc_insertion_point(field_release:quotation.Index.type)
  if (!has_type()) {
    return NULL;
  }
  clear_has_type();
  return type_.ReleaseNonDefaultNoArena(&::quotation::Index::_i_give_permission_to_break_this_code_default_type_.get());
}
inline void Index::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::quotation::Index::_i_give_permission_to_break_this_code_default_type_.get(), type);
  // @@protoc_insertion_point(field_set_allocated:quotation.Index.type)
}

// optional uint32 trading_day = 2;
inline bool Index::has_trading_day() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Index::set_has_trading_day() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Index::clear_has_trading_day() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Index::clear_trading_day() {
  trading_day_ = 0u;
  clear_has_trading_day();
}
inline ::google::protobuf::uint32 Index::trading_day() const {
  // @@protoc_insertion_point(field_get:quotation.Index.trading_day)
  return trading_day_;
}
inline void Index::set_trading_day(::google::protobuf::uint32 value) {
  set_has_trading_day();
  trading_day_ = value;
  // @@protoc_insertion_point(field_set:quotation.Index.trading_day)
}

// required uint32 stamp = 3;
inline bool Index::has_stamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Index::set_has_stamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Index::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Index::clear_stamp() {
  stamp_ = 0u;
  clear_has_stamp();
}
inline ::google::protobuf::uint32 Index::stamp() const {
  // @@protoc_insertion_point(field_get:quotation.Index.stamp)
  return stamp_;
}
inline void Index::set_stamp(::google::protobuf::uint32 value) {
  set_has_stamp();
  stamp_ = value;
  // @@protoc_insertion_point(field_set:quotation.Index.stamp)
}

// optional int64 new_price = 4;
inline bool Index::has_new_price() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Index::set_has_new_price() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Index::clear_has_new_price() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Index::clear_new_price() {
  new_price_ = GOOGLE_LONGLONG(0);
  clear_has_new_price();
}
inline ::google::protobuf::int64 Index::new_price() const {
  // @@protoc_insertion_point(field_get:quotation.Index.new_price)
  return new_price_;
}
inline void Index::set_new_price(::google::protobuf::int64 value) {
  set_has_new_price();
  new_price_ = value;
  // @@protoc_insertion_point(field_set:quotation.Index.new_price)
}

// optional int64 amount = 5;
inline bool Index::has_amount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Index::set_has_amount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Index::clear_has_amount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Index::clear_amount() {
  amount_ = GOOGLE_LONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::int64 Index::amount() const {
  // @@protoc_insertion_point(field_get:quotation.Index.amount)
  return amount_;
}
inline void Index::set_amount(::google::protobuf::int64 value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:quotation.Index.amount)
}

// optional int64 sum_price = 6;
inline bool Index::has_sum_price() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Index::set_has_sum_price() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Index::clear_has_sum_price() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Index::clear_sum_price() {
  sum_price_ = GOOGLE_LONGLONG(0);
  clear_has_sum_price();
}
inline ::google::protobuf::int64 Index::sum_price() const {
  // @@protoc_insertion_point(field_get:quotation.Index.sum_price)
  return sum_price_;
}
inline void Index::set_sum_price(::google::protobuf::int64 value) {
  set_has_sum_price();
  sum_price_ = value;
  // @@protoc_insertion_point(field_set:quotation.Index.sum_price)
}

// optional int64 new_volume = 7;
inline bool Index::has_new_volume() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Index::set_has_new_volume() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Index::clear_has_new_volume() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Index::clear_new_volume() {
  new_volume_ = GOOGLE_LONGLONG(0);
  clear_has_new_volume();
}
inline ::google::protobuf::int64 Index::new_volume() const {
  // @@protoc_insertion_point(field_get:quotation.Index.new_volume)
  return new_volume_;
}
inline void Index::set_new_volume(::google::protobuf::int64 value) {
  set_has_new_volume();
  new_volume_ = value;
  // @@protoc_insertion_point(field_set:quotation.Index.new_volume)
}

// required string code = 8;
inline bool Index::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Index::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Index::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Index::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& Index::code() const {
  // @@protoc_insertion_point(field_get:quotation.Index.code)
  return code_.GetNoArena();
}
inline void Index::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.Index.code)
}
#if LANG_CXX11
inline void Index::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.Index.code)
}
#endif
inline void Index::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.Index.code)
}
inline void Index::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.Index.code)
}
inline ::std::string* Index::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:quotation.Index.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Index::release_code() {
  // @@protoc_insertion_point(field_release:quotation.Index.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Index::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:quotation.Index.code)
}

// optional int64 bp1 = 9;
inline bool Index::has_bp1() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Index::set_has_bp1() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Index::clear_has_bp1() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Index::clear_bp1() {
  bp1_ = GOOGLE_LONGLONG(0);
  clear_has_bp1();
}
inline ::google::protobuf::int64 Index::bp1() const {
  // @@protoc_insertion_point(field_get:quotation.Index.bp1)
  return bp1_;
}
inline void Index::set_bp1(::google::protobuf::int64 value) {
  set_has_bp1();
  bp1_ = value;
  // @@protoc_insertion_point(field_set:quotation.Index.bp1)
}

// optional int64 sp1 = 10;
inline bool Index::has_sp1() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Index::set_has_sp1() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Index::clear_has_sp1() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Index::clear_sp1() {
  sp1_ = GOOGLE_LONGLONG(0);
  clear_has_sp1();
}
inline ::google::protobuf::int64 Index::sp1() const {
  // @@protoc_insertion_point(field_get:quotation.Index.sp1)
  return sp1_;
}
inline void Index::set_sp1(::google::protobuf::int64 value) {
  set_has_sp1();
  sp1_ = value;
  // @@protoc_insertion_point(field_set:quotation.Index.sp1)
}

// optional int64 preclose = 11;
inline bool Index::has_preclose() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Index::set_has_preclose() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Index::clear_has_preclose() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Index::clear_preclose() {
  preclose_ = GOOGLE_LONGLONG(0);
  clear_has_preclose();
}
inline ::google::protobuf::int64 Index::preclose() const {
  // @@protoc_insertion_point(field_get:quotation.Index.preclose)
  return preclose_;
}
inline void Index::set_preclose(::google::protobuf::int64 value) {
  set_has_preclose();
  preclose_ = value;
  // @@protoc_insertion_point(field_set:quotation.Index.preclose)
}

// optional int64 amountofpriceupanddown_new = 12;
inline bool Index::has_amountofpriceupanddown_new() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Index::set_has_amountofpriceupanddown_new() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Index::clear_has_amountofpriceupanddown_new() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Index::clear_amountofpriceupanddown_new() {
  amountofpriceupanddown_new_ = GOOGLE_LONGLONG(0);
  clear_has_amountofpriceupanddown_new();
}
inline ::google::protobuf::int64 Index::amountofpriceupanddown_new() const {
  // @@protoc_insertion_point(field_get:quotation.Index.amountofpriceupanddown_new)
  return amountofpriceupanddown_new_;
}
inline void Index::set_amountofpriceupanddown_new(::google::protobuf::int64 value) {
  set_has_amountofpriceupanddown_new();
  amountofpriceupanddown_new_ = value;
  // @@protoc_insertion_point(field_set:quotation.Index.amountofpriceupanddown_new)
}

// optional int64 amountofpriceupanddown_bp1 = 13;
inline bool Index::has_amountofpriceupanddown_bp1() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Index::set_has_amountofpriceupanddown_bp1() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Index::clear_has_amountofpriceupanddown_bp1() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Index::clear_amountofpriceupanddown_bp1() {
  amountofpriceupanddown_bp1_ = GOOGLE_LONGLONG(0);
  clear_has_amountofpriceupanddown_bp1();
}
inline ::google::protobuf::int64 Index::amountofpriceupanddown_bp1() const {
  // @@protoc_insertion_point(field_get:quotation.Index.amountofpriceupanddown_bp1)
  return amountofpriceupanddown_bp1_;
}
inline void Index::set_amountofpriceupanddown_bp1(::google::protobuf::int64 value) {
  set_has_amountofpriceupanddown_bp1();
  amountofpriceupanddown_bp1_ = value;
  // @@protoc_insertion_point(field_set:quotation.Index.amountofpriceupanddown_bp1)
}

// optional int64 amountofpriceupanddown_sp1 = 14;
inline bool Index::has_amountofpriceupanddown_sp1() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Index::set_has_amountofpriceupanddown_sp1() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Index::clear_has_amountofpriceupanddown_sp1() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Index::clear_amountofpriceupanddown_sp1() {
  amountofpriceupanddown_sp1_ = GOOGLE_LONGLONG(0);
  clear_has_amountofpriceupanddown_sp1();
}
inline ::google::protobuf::int64 Index::amountofpriceupanddown_sp1() const {
  // @@protoc_insertion_point(field_get:quotation.Index.amountofpriceupanddown_sp1)
  return amountofpriceupanddown_sp1_;
}
inline void Index::set_amountofpriceupanddown_sp1(::google::protobuf::int64 value) {
  set_has_amountofpriceupanddown_sp1();
  amountofpriceupanddown_sp1_ = value;
  // @@protoc_insertion_point(field_set:quotation.Index.amountofpriceupanddown_sp1)
}

// optional string name = 15;
inline bool Index::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Index::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Index::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Index::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Index::name() const {
  // @@protoc_insertion_point(field_get:quotation.Index.name)
  return name_.GetNoArena();
}
inline void Index::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.Index.name)
}
#if LANG_CXX11
inline void Index::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.Index.name)
}
#endif
inline void Index::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.Index.name)
}
inline void Index::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.Index.name)
}
inline ::std::string* Index::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:quotation.Index.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Index::release_name() {
  // @@protoc_insertion_point(field_release:quotation.Index.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Index::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:quotation.Index.name)
}

// optional int64 market = 16;
inline bool Index::has_market() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Index::set_has_market() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Index::clear_has_market() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Index::clear_market() {
  market_ = GOOGLE_LONGLONG(0);
  clear_has_market();
}
inline ::google::protobuf::int64 Index::market() const {
  // @@protoc_insertion_point(field_get:quotation.Index.market)
  return market_;
}
inline void Index::set_market(::google::protobuf::int64 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:quotation.Index.market)
}

// -------------------------------------------------------------------

// VIndex_StockInfo

// optional string code = 1;
inline bool VIndex_StockInfo::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VIndex_StockInfo::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VIndex_StockInfo::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VIndex_StockInfo::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& VIndex_StockInfo::code() const {
  // @@protoc_insertion_point(field_get:quotation.VIndex.StockInfo.code)
  return code_.GetNoArena();
}
inline void VIndex_StockInfo::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.VIndex.StockInfo.code)
}
#if LANG_CXX11
inline void VIndex_StockInfo::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.VIndex.StockInfo.code)
}
#endif
inline void VIndex_StockInfo::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.VIndex.StockInfo.code)
}
inline void VIndex_StockInfo::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.VIndex.StockInfo.code)
}
inline ::std::string* VIndex_StockInfo::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:quotation.VIndex.StockInfo.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VIndex_StockInfo::release_code() {
  // @@protoc_insertion_point(field_release:quotation.VIndex.StockInfo.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VIndex_StockInfo::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:quotation.VIndex.StockInfo.code)
}

// optional string name = 2;
inline bool VIndex_StockInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VIndex_StockInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VIndex_StockInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VIndex_StockInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& VIndex_StockInfo::name() const {
  // @@protoc_insertion_point(field_get:quotation.VIndex.StockInfo.name)
  return name_.GetNoArena();
}
inline void VIndex_StockInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.VIndex.StockInfo.name)
}
#if LANG_CXX11
inline void VIndex_StockInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.VIndex.StockInfo.name)
}
#endif
inline void VIndex_StockInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.VIndex.StockInfo.name)
}
inline void VIndex_StockInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.VIndex.StockInfo.name)
}
inline ::std::string* VIndex_StockInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:quotation.VIndex.StockInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VIndex_StockInfo::release_name() {
  // @@protoc_insertion_point(field_release:quotation.VIndex.StockInfo.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VIndex_StockInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:quotation.VIndex.StockInfo.name)
}

// optional int64 volume = 3;
inline bool VIndex_StockInfo::has_volume() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VIndex_StockInfo::set_has_volume() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VIndex_StockInfo::clear_has_volume() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VIndex_StockInfo::clear_volume() {
  volume_ = GOOGLE_LONGLONG(0);
  clear_has_volume();
}
inline ::google::protobuf::int64 VIndex_StockInfo::volume() const {
  // @@protoc_insertion_point(field_get:quotation.VIndex.StockInfo.volume)
  return volume_;
}
inline void VIndex_StockInfo::set_volume(::google::protobuf::int64 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:quotation.VIndex.StockInfo.volume)
}

// optional double amount = 4;
inline bool VIndex_StockInfo::has_amount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VIndex_StockInfo::set_has_amount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VIndex_StockInfo::clear_has_amount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VIndex_StockInfo::clear_amount() {
  amount_ = 0;
  clear_has_amount();
}
inline double VIndex_StockInfo::amount() const {
  // @@protoc_insertion_point(field_get:quotation.VIndex.StockInfo.amount)
  return amount_;
}
inline void VIndex_StockInfo::set_amount(double value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:quotation.VIndex.StockInfo.amount)
}

// -------------------------------------------------------------------

// VIndex

// optional string type = 1 [default = "V"];
inline bool VIndex::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VIndex::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VIndex::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VIndex::clear_type() {
  type_.ClearToDefaultNoArena(&::quotation::VIndex::_i_give_permission_to_break_this_code_default_type_.get());
  clear_has_type();
}
inline const ::std::string& VIndex::type() const {
  // @@protoc_insertion_point(field_get:quotation.VIndex.type)
  return type_.GetNoArena();
}
inline void VIndex::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::quotation::VIndex::_i_give_permission_to_break_this_code_default_type_.get(), value);
  // @@protoc_insertion_point(field_set:quotation.VIndex.type)
}
#if LANG_CXX11
inline void VIndex::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::quotation::VIndex::_i_give_permission_to_break_this_code_default_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.VIndex.type)
}
#endif
inline void VIndex::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::quotation::VIndex::_i_give_permission_to_break_this_code_default_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.VIndex.type)
}
inline void VIndex::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::quotation::VIndex::_i_give_permission_to_break_this_code_default_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.VIndex.type)
}
inline ::std::string* VIndex::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:quotation.VIndex.type)
  return type_.MutableNoArena(&::quotation::VIndex::_i_give_permission_to_break_this_code_default_type_.get());
}
inline ::std::string* VIndex::release_type() {
  // @@protoc_insertion_point(field_release:quotation.VIndex.type)
  if (!has_type()) {
    return NULL;
  }
  clear_has_type();
  return type_.ReleaseNonDefaultNoArena(&::quotation::VIndex::_i_give_permission_to_break_this_code_default_type_.get());
}
inline void VIndex::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::quotation::VIndex::_i_give_permission_to_break_this_code_default_type_.get(), type);
  // @@protoc_insertion_point(field_set_allocated:quotation.VIndex.type)
}

// optional uint32 trading_day = 2;
inline bool VIndex::has_trading_day() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VIndex::set_has_trading_day() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VIndex::clear_has_trading_day() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VIndex::clear_trading_day() {
  trading_day_ = 0u;
  clear_has_trading_day();
}
inline ::google::protobuf::uint32 VIndex::trading_day() const {
  // @@protoc_insertion_point(field_get:quotation.VIndex.trading_day)
  return trading_day_;
}
inline void VIndex::set_trading_day(::google::protobuf::uint32 value) {
  set_has_trading_day();
  trading_day_ = value;
  // @@protoc_insertion_point(field_set:quotation.VIndex.trading_day)
}

// required uint32 stamp = 3;
inline bool VIndex::has_stamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VIndex::set_has_stamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VIndex::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VIndex::clear_stamp() {
  stamp_ = 0u;
  clear_has_stamp();
}
inline ::google::protobuf::uint32 VIndex::stamp() const {
  // @@protoc_insertion_point(field_get:quotation.VIndex.stamp)
  return stamp_;
}
inline void VIndex::set_stamp(::google::protobuf::uint32 value) {
  set_has_stamp();
  stamp_ = value;
  // @@protoc_insertion_point(field_set:quotation.VIndex.stamp)
}

// required double new_price = 4;
inline bool VIndex::has_new_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VIndex::set_has_new_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VIndex::clear_has_new_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VIndex::clear_new_price() {
  new_price_ = 0;
  clear_has_new_price();
}
inline double VIndex::new_price() const {
  // @@protoc_insertion_point(field_get:quotation.VIndex.new_price)
  return new_price_;
}
inline void VIndex::set_new_price(double value) {
  set_has_new_price();
  new_price_ = value;
  // @@protoc_insertion_point(field_set:quotation.VIndex.new_price)
}

// required string code = 5;
inline bool VIndex::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VIndex::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VIndex::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VIndex::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& VIndex::code() const {
  // @@protoc_insertion_point(field_get:quotation.VIndex.code)
  return code_.GetNoArena();
}
inline void VIndex::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.VIndex.code)
}
#if LANG_CXX11
inline void VIndex::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.VIndex.code)
}
#endif
inline void VIndex::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.VIndex.code)
}
inline void VIndex::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.VIndex.code)
}
inline ::std::string* VIndex::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:quotation.VIndex.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VIndex::release_code() {
  // @@protoc_insertion_point(field_release:quotation.VIndex.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VIndex::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:quotation.VIndex.code)
}

// optional double bp1 = 6;
inline bool VIndex::has_bp1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VIndex::set_has_bp1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VIndex::clear_has_bp1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VIndex::clear_bp1() {
  bp1_ = 0;
  clear_has_bp1();
}
inline double VIndex::bp1() const {
  // @@protoc_insertion_point(field_get:quotation.VIndex.bp1)
  return bp1_;
}
inline void VIndex::set_bp1(double value) {
  set_has_bp1();
  bp1_ = value;
  // @@protoc_insertion_point(field_set:quotation.VIndex.bp1)
}

// optional double sp1 = 7;
inline bool VIndex::has_sp1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VIndex::set_has_sp1() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VIndex::clear_has_sp1() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VIndex::clear_sp1() {
  sp1_ = 0;
  clear_has_sp1();
}
inline double VIndex::sp1() const {
  // @@protoc_insertion_point(field_get:quotation.VIndex.sp1)
  return sp1_;
}
inline void VIndex::set_sp1(double value) {
  set_has_sp1();
  sp1_ = value;
  // @@protoc_insertion_point(field_set:quotation.VIndex.sp1)
}

// optional double limit_up_amount = 8;
inline bool VIndex::has_limit_up_amount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VIndex::set_has_limit_up_amount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VIndex::clear_has_limit_up_amount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VIndex::clear_limit_up_amount() {
  limit_up_amount_ = 0;
  clear_has_limit_up_amount();
}
inline double VIndex::limit_up_amount() const {
  // @@protoc_insertion_point(field_get:quotation.VIndex.limit_up_amount)
  return limit_up_amount_;
}
inline void VIndex::set_limit_up_amount(double value) {
  set_has_limit_up_amount();
  limit_up_amount_ = value;
  // @@protoc_insertion_point(field_set:quotation.VIndex.limit_up_amount)
}

// optional double limit_down_amount = 9;
inline bool VIndex::has_limit_down_amount() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VIndex::set_has_limit_down_amount() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VIndex::clear_has_limit_down_amount() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VIndex::clear_limit_down_amount() {
  limit_down_amount_ = 0;
  clear_has_limit_down_amount();
}
inline double VIndex::limit_down_amount() const {
  // @@protoc_insertion_point(field_get:quotation.VIndex.limit_down_amount)
  return limit_down_amount_;
}
inline void VIndex::set_limit_down_amount(double value) {
  set_has_limit_down_amount();
  limit_down_amount_ = value;
  // @@protoc_insertion_point(field_set:quotation.VIndex.limit_down_amount)
}

// optional double non_must_suspension_amount = 10;
inline bool VIndex::has_non_must_suspension_amount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VIndex::set_has_non_must_suspension_amount() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VIndex::clear_has_non_must_suspension_amount() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VIndex::clear_non_must_suspension_amount() {
  non_must_suspension_amount_ = 0;
  clear_has_non_must_suspension_amount();
}
inline double VIndex::non_must_suspension_amount() const {
  // @@protoc_insertion_point(field_get:quotation.VIndex.non_must_suspension_amount)
  return non_must_suspension_amount_;
}
inline void VIndex::set_non_must_suspension_amount(double value) {
  set_has_non_must_suspension_amount();
  non_must_suspension_amount_ = value;
  // @@protoc_insertion_point(field_set:quotation.VIndex.non_must_suspension_amount)
}

// optional double must_non_suspension_amount = 11;
inline bool VIndex::has_must_non_suspension_amount() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VIndex::set_has_must_non_suspension_amount() {
  _has_bits_[0] |= 0x00000400u;
}
inline void VIndex::clear_has_must_non_suspension_amount() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void VIndex::clear_must_non_suspension_amount() {
  must_non_suspension_amount_ = 0;
  clear_has_must_non_suspension_amount();
}
inline double VIndex::must_non_suspension_amount() const {
  // @@protoc_insertion_point(field_get:quotation.VIndex.must_non_suspension_amount)
  return must_non_suspension_amount_;
}
inline void VIndex::set_must_non_suspension_amount(double value) {
  set_has_must_non_suspension_amount();
  must_non_suspension_amount_ = value;
  // @@protoc_insertion_point(field_set:quotation.VIndex.must_non_suspension_amount)
}

// repeated .quotation.VIndex.StockInfo limit_up_stocks = 12;
inline int VIndex::limit_up_stocks_size() const {
  return limit_up_stocks_.size();
}
inline void VIndex::clear_limit_up_stocks() {
  limit_up_stocks_.Clear();
}
inline ::quotation::VIndex_StockInfo* VIndex::mutable_limit_up_stocks(int index) {
  // @@protoc_insertion_point(field_mutable:quotation.VIndex.limit_up_stocks)
  return limit_up_stocks_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::quotation::VIndex_StockInfo >*
VIndex::mutable_limit_up_stocks() {
  // @@protoc_insertion_point(field_mutable_list:quotation.VIndex.limit_up_stocks)
  return &limit_up_stocks_;
}
inline const ::quotation::VIndex_StockInfo& VIndex::limit_up_stocks(int index) const {
  // @@protoc_insertion_point(field_get:quotation.VIndex.limit_up_stocks)
  return limit_up_stocks_.Get(index);
}
inline ::quotation::VIndex_StockInfo* VIndex::add_limit_up_stocks() {
  // @@protoc_insertion_point(field_add:quotation.VIndex.limit_up_stocks)
  return limit_up_stocks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::quotation::VIndex_StockInfo >&
VIndex::limit_up_stocks() const {
  // @@protoc_insertion_point(field_list:quotation.VIndex.limit_up_stocks)
  return limit_up_stocks_;
}

// repeated .quotation.VIndex.StockInfo limit_down_stocks = 13;
inline int VIndex::limit_down_stocks_size() const {
  return limit_down_stocks_.size();
}
inline void VIndex::clear_limit_down_stocks() {
  limit_down_stocks_.Clear();
}
inline ::quotation::VIndex_StockInfo* VIndex::mutable_limit_down_stocks(int index) {
  // @@protoc_insertion_point(field_mutable:quotation.VIndex.limit_down_stocks)
  return limit_down_stocks_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::quotation::VIndex_StockInfo >*
VIndex::mutable_limit_down_stocks() {
  // @@protoc_insertion_point(field_mutable_list:quotation.VIndex.limit_down_stocks)
  return &limit_down_stocks_;
}
inline const ::quotation::VIndex_StockInfo& VIndex::limit_down_stocks(int index) const {
  // @@protoc_insertion_point(field_get:quotation.VIndex.limit_down_stocks)
  return limit_down_stocks_.Get(index);
}
inline ::quotation::VIndex_StockInfo* VIndex::add_limit_down_stocks() {
  // @@protoc_insertion_point(field_add:quotation.VIndex.limit_down_stocks)
  return limit_down_stocks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::quotation::VIndex_StockInfo >&
VIndex::limit_down_stocks() const {
  // @@protoc_insertion_point(field_list:quotation.VIndex.limit_down_stocks)
  return limit_down_stocks_;
}

// repeated .quotation.VIndex.StockInfo non_must_suspension_stocks = 14;
inline int VIndex::non_must_suspension_stocks_size() const {
  return non_must_suspension_stocks_.size();
}
inline void VIndex::clear_non_must_suspension_stocks() {
  non_must_suspension_stocks_.Clear();
}
inline ::quotation::VIndex_StockInfo* VIndex::mutable_non_must_suspension_stocks(int index) {
  // @@protoc_insertion_point(field_mutable:quotation.VIndex.non_must_suspension_stocks)
  return non_must_suspension_stocks_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::quotation::VIndex_StockInfo >*
VIndex::mutable_non_must_suspension_stocks() {
  // @@protoc_insertion_point(field_mutable_list:quotation.VIndex.non_must_suspension_stocks)
  return &non_must_suspension_stocks_;
}
inline const ::quotation::VIndex_StockInfo& VIndex::non_must_suspension_stocks(int index) const {
  // @@protoc_insertion_point(field_get:quotation.VIndex.non_must_suspension_stocks)
  return non_must_suspension_stocks_.Get(index);
}
inline ::quotation::VIndex_StockInfo* VIndex::add_non_must_suspension_stocks() {
  // @@protoc_insertion_point(field_add:quotation.VIndex.non_must_suspension_stocks)
  return non_must_suspension_stocks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::quotation::VIndex_StockInfo >&
VIndex::non_must_suspension_stocks() const {
  // @@protoc_insertion_point(field_list:quotation.VIndex.non_must_suspension_stocks)
  return non_must_suspension_stocks_;
}

// repeated .quotation.VIndex.StockInfo must_non_suspension_stocks = 15;
inline int VIndex::must_non_suspension_stocks_size() const {
  return must_non_suspension_stocks_.size();
}
inline void VIndex::clear_must_non_suspension_stocks() {
  must_non_suspension_stocks_.Clear();
}
inline ::quotation::VIndex_StockInfo* VIndex::mutable_must_non_suspension_stocks(int index) {
  // @@protoc_insertion_point(field_mutable:quotation.VIndex.must_non_suspension_stocks)
  return must_non_suspension_stocks_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::quotation::VIndex_StockInfo >*
VIndex::mutable_must_non_suspension_stocks() {
  // @@protoc_insertion_point(field_mutable_list:quotation.VIndex.must_non_suspension_stocks)
  return &must_non_suspension_stocks_;
}
inline const ::quotation::VIndex_StockInfo& VIndex::must_non_suspension_stocks(int index) const {
  // @@protoc_insertion_point(field_get:quotation.VIndex.must_non_suspension_stocks)
  return must_non_suspension_stocks_.Get(index);
}
inline ::quotation::VIndex_StockInfo* VIndex::add_must_non_suspension_stocks() {
  // @@protoc_insertion_point(field_add:quotation.VIndex.must_non_suspension_stocks)
  return must_non_suspension_stocks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::quotation::VIndex_StockInfo >&
VIndex::must_non_suspension_stocks() const {
  // @@protoc_insertion_point(field_list:quotation.VIndex.must_non_suspension_stocks)
  return must_non_suspension_stocks_;
}

// optional double etf_bp1 = 16;
inline bool VIndex::has_etf_bp1() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void VIndex::set_has_etf_bp1() {
  _has_bits_[0] |= 0x00000800u;
}
inline void VIndex::clear_has_etf_bp1() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void VIndex::clear_etf_bp1() {
  etf_bp1_ = 0;
  clear_has_etf_bp1();
}
inline double VIndex::etf_bp1() const {
  // @@protoc_insertion_point(field_get:quotation.VIndex.etf_bp1)
  return etf_bp1_;
}
inline void VIndex::set_etf_bp1(double value) {
  set_has_etf_bp1();
  etf_bp1_ = value;
  // @@protoc_insertion_point(field_set:quotation.VIndex.etf_bp1)
}

// optional double etf_sp1 = 17;
inline bool VIndex::has_etf_sp1() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void VIndex::set_has_etf_sp1() {
  _has_bits_[0] |= 0x00001000u;
}
inline void VIndex::clear_has_etf_sp1() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void VIndex::clear_etf_sp1() {
  etf_sp1_ = 0;
  clear_has_etf_sp1();
}
inline double VIndex::etf_sp1() const {
  // @@protoc_insertion_point(field_get:quotation.VIndex.etf_sp1)
  return etf_sp1_;
}
inline void VIndex::set_etf_sp1(double value) {
  set_has_etf_sp1();
  etf_sp1_ = value;
  // @@protoc_insertion_point(field_set:quotation.VIndex.etf_sp1)
}

// optional double avg1 = 18;
inline bool VIndex::has_avg1() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void VIndex::set_has_avg1() {
  _has_bits_[0] |= 0x00002000u;
}
inline void VIndex::clear_has_avg1() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void VIndex::clear_avg1() {
  avg1_ = 0;
  clear_has_avg1();
}
inline double VIndex::avg1() const {
  // @@protoc_insertion_point(field_get:quotation.VIndex.avg1)
  return avg1_;
}
inline void VIndex::set_avg1(double value) {
  set_has_avg1();
  avg1_ = value;
  // @@protoc_insertion_point(field_set:quotation.VIndex.avg1)
}

// optional double limit_up_rate = 19;
inline bool VIndex::has_limit_up_rate() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void VIndex::set_has_limit_up_rate() {
  _has_bits_[0] |= 0x00004000u;
}
inline void VIndex::clear_has_limit_up_rate() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void VIndex::clear_limit_up_rate() {
  limit_up_rate_ = 0;
  clear_has_limit_up_rate();
}
inline double VIndex::limit_up_rate() const {
  // @@protoc_insertion_point(field_get:quotation.VIndex.limit_up_rate)
  return limit_up_rate_;
}
inline void VIndex::set_limit_up_rate(double value) {
  set_has_limit_up_rate();
  limit_up_rate_ = value;
  // @@protoc_insertion_point(field_set:quotation.VIndex.limit_up_rate)
}

// optional double limit_down_rate = 20;
inline bool VIndex::has_limit_down_rate() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void VIndex::set_has_limit_down_rate() {
  _has_bits_[0] |= 0x00008000u;
}
inline void VIndex::clear_has_limit_down_rate() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void VIndex::clear_limit_down_rate() {
  limit_down_rate_ = 0;
  clear_has_limit_down_rate();
}
inline double VIndex::limit_down_rate() const {
  // @@protoc_insertion_point(field_get:quotation.VIndex.limit_down_rate)
  return limit_down_rate_;
}
inline void VIndex::set_limit_down_rate(double value) {
  set_has_limit_down_rate();
  limit_down_rate_ = value;
  // @@protoc_insertion_point(field_set:quotation.VIndex.limit_down_rate)
}

// optional double non_must_suspension_rate = 21;
inline bool VIndex::has_non_must_suspension_rate() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void VIndex::set_has_non_must_suspension_rate() {
  _has_bits_[0] |= 0x00010000u;
}
inline void VIndex::clear_has_non_must_suspension_rate() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void VIndex::clear_non_must_suspension_rate() {
  non_must_suspension_rate_ = 0;
  clear_has_non_must_suspension_rate();
}
inline double VIndex::non_must_suspension_rate() const {
  // @@protoc_insertion_point(field_get:quotation.VIndex.non_must_suspension_rate)
  return non_must_suspension_rate_;
}
inline void VIndex::set_non_must_suspension_rate(double value) {
  set_has_non_must_suspension_rate();
  non_must_suspension_rate_ = value;
  // @@protoc_insertion_point(field_set:quotation.VIndex.non_must_suspension_rate)
}

// optional double must_non_suspension_rate = 22;
inline bool VIndex::has_must_non_suspension_rate() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void VIndex::set_has_must_non_suspension_rate() {
  _has_bits_[0] |= 0x00020000u;
}
inline void VIndex::clear_has_must_non_suspension_rate() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void VIndex::clear_must_non_suspension_rate() {
  must_non_suspension_rate_ = 0;
  clear_has_must_non_suspension_rate();
}
inline double VIndex::must_non_suspension_rate() const {
  // @@protoc_insertion_point(field_get:quotation.VIndex.must_non_suspension_rate)
  return must_non_suspension_rate_;
}
inline void VIndex::set_must_non_suspension_rate(double value) {
  set_has_must_non_suspension_rate();
  must_non_suspension_rate_ = value;
  // @@protoc_insertion_point(field_set:quotation.VIndex.must_non_suspension_rate)
}

// optional double must_non_suspension_amendment_value = 23;
inline bool VIndex::has_must_non_suspension_amendment_value() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void VIndex::set_has_must_non_suspension_amendment_value() {
  _has_bits_[0] |= 0x00040000u;
}
inline void VIndex::clear_has_must_non_suspension_amendment_value() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void VIndex::clear_must_non_suspension_amendment_value() {
  must_non_suspension_amendment_value_ = 0;
  clear_has_must_non_suspension_amendment_value();
}
inline double VIndex::must_non_suspension_amendment_value() const {
  // @@protoc_insertion_point(field_get:quotation.VIndex.must_non_suspension_amendment_value)
  return must_non_suspension_amendment_value_;
}
inline void VIndex::set_must_non_suspension_amendment_value(double value) {
  set_has_must_non_suspension_amendment_value();
  must_non_suspension_amendment_value_ = value;
  // @@protoc_insertion_point(field_set:quotation.VIndex.must_non_suspension_amendment_value)
}

// optional double must_non_suspension_amendment_rate = 24;
inline bool VIndex::has_must_non_suspension_amendment_rate() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void VIndex::set_has_must_non_suspension_amendment_rate() {
  _has_bits_[0] |= 0x00080000u;
}
inline void VIndex::clear_has_must_non_suspension_amendment_rate() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void VIndex::clear_must_non_suspension_amendment_rate() {
  must_non_suspension_amendment_rate_ = 0;
  clear_has_must_non_suspension_amendment_rate();
}
inline double VIndex::must_non_suspension_amendment_rate() const {
  // @@protoc_insertion_point(field_get:quotation.VIndex.must_non_suspension_amendment_rate)
  return must_non_suspension_amendment_rate_;
}
inline void VIndex::set_must_non_suspension_amendment_rate(double value) {
  set_has_must_non_suspension_amendment_rate();
  must_non_suspension_amendment_rate_ = value;
  // @@protoc_insertion_point(field_set:quotation.VIndex.must_non_suspension_amendment_rate)
}

// optional double create_stock_amendment_value = 25;
inline bool VIndex::has_create_stock_amendment_value() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void VIndex::set_has_create_stock_amendment_value() {
  _has_bits_[0] |= 0x00100000u;
}
inline void VIndex::clear_has_create_stock_amendment_value() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void VIndex::clear_create_stock_amendment_value() {
  create_stock_amendment_value_ = 0;
  clear_has_create_stock_amendment_value();
}
inline double VIndex::create_stock_amendment_value() const {
  // @@protoc_insertion_point(field_get:quotation.VIndex.create_stock_amendment_value)
  return create_stock_amendment_value_;
}
inline void VIndex::set_create_stock_amendment_value(double value) {
  set_has_create_stock_amendment_value();
  create_stock_amendment_value_ = value;
  // @@protoc_insertion_point(field_set:quotation.VIndex.create_stock_amendment_value)
}

// optional double create_stock_amendment_rate = 26;
inline bool VIndex::has_create_stock_amendment_rate() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void VIndex::set_has_create_stock_amendment_rate() {
  _has_bits_[0] |= 0x00200000u;
}
inline void VIndex::clear_has_create_stock_amendment_rate() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void VIndex::clear_create_stock_amendment_rate() {
  create_stock_amendment_rate_ = 0;
  clear_has_create_stock_amendment_rate();
}
inline double VIndex::create_stock_amendment_rate() const {
  // @@protoc_insertion_point(field_get:quotation.VIndex.create_stock_amendment_rate)
  return create_stock_amendment_rate_;
}
inline void VIndex::set_create_stock_amendment_rate(double value) {
  set_has_create_stock_amendment_rate();
  create_stock_amendment_rate_ = value;
  // @@protoc_insertion_point(field_set:quotation.VIndex.create_stock_amendment_rate)
}

// optional double create_amendment_value = 27;
inline bool VIndex::has_create_amendment_value() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void VIndex::set_has_create_amendment_value() {
  _has_bits_[0] |= 0x00400000u;
}
inline void VIndex::clear_has_create_amendment_value() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void VIndex::clear_create_amendment_value() {
  create_amendment_value_ = 0;
  clear_has_create_amendment_value();
}
inline double VIndex::create_amendment_value() const {
  // @@protoc_insertion_point(field_get:quotation.VIndex.create_amendment_value)
  return create_amendment_value_;
}
inline void VIndex::set_create_amendment_value(double value) {
  set_has_create_amendment_value();
  create_amendment_value_ = value;
  // @@protoc_insertion_point(field_set:quotation.VIndex.create_amendment_value)
}

// optional double create_amendment_rate = 28;
inline bool VIndex::has_create_amendment_rate() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void VIndex::set_has_create_amendment_rate() {
  _has_bits_[0] |= 0x00800000u;
}
inline void VIndex::clear_has_create_amendment_rate() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void VIndex::clear_create_amendment_rate() {
  create_amendment_rate_ = 0;
  clear_has_create_amendment_rate();
}
inline double VIndex::create_amendment_rate() const {
  // @@protoc_insertion_point(field_get:quotation.VIndex.create_amendment_rate)
  return create_amendment_rate_;
}
inline void VIndex::set_create_amendment_rate(double value) {
  set_has_create_amendment_rate();
  create_amendment_rate_ = value;
  // @@protoc_insertion_point(field_set:quotation.VIndex.create_amendment_rate)
}

// optional double redeem_stock_amendment_value = 29;
inline bool VIndex::has_redeem_stock_amendment_value() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void VIndex::set_has_redeem_stock_amendment_value() {
  _has_bits_[0] |= 0x01000000u;
}
inline void VIndex::clear_has_redeem_stock_amendment_value() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void VIndex::clear_redeem_stock_amendment_value() {
  redeem_stock_amendment_value_ = 0;
  clear_has_redeem_stock_amendment_value();
}
inline double VIndex::redeem_stock_amendment_value() const {
  // @@protoc_insertion_point(field_get:quotation.VIndex.redeem_stock_amendment_value)
  return redeem_stock_amendment_value_;
}
inline void VIndex::set_redeem_stock_amendment_value(double value) {
  set_has_redeem_stock_amendment_value();
  redeem_stock_amendment_value_ = value;
  // @@protoc_insertion_point(field_set:quotation.VIndex.redeem_stock_amendment_value)
}

// optional double redeem_stock_amendment_rate = 30;
inline bool VIndex::has_redeem_stock_amendment_rate() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void VIndex::set_has_redeem_stock_amendment_rate() {
  _has_bits_[0] |= 0x02000000u;
}
inline void VIndex::clear_has_redeem_stock_amendment_rate() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void VIndex::clear_redeem_stock_amendment_rate() {
  redeem_stock_amendment_rate_ = 0;
  clear_has_redeem_stock_amendment_rate();
}
inline double VIndex::redeem_stock_amendment_rate() const {
  // @@protoc_insertion_point(field_get:quotation.VIndex.redeem_stock_amendment_rate)
  return redeem_stock_amendment_rate_;
}
inline void VIndex::set_redeem_stock_amendment_rate(double value) {
  set_has_redeem_stock_amendment_rate();
  redeem_stock_amendment_rate_ = value;
  // @@protoc_insertion_point(field_set:quotation.VIndex.redeem_stock_amendment_rate)
}

// optional double redeem_amendment_value = 31;
inline bool VIndex::has_redeem_amendment_value() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void VIndex::set_has_redeem_amendment_value() {
  _has_bits_[0] |= 0x04000000u;
}
inline void VIndex::clear_has_redeem_amendment_value() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void VIndex::clear_redeem_amendment_value() {
  redeem_amendment_value_ = 0;
  clear_has_redeem_amendment_value();
}
inline double VIndex::redeem_amendment_value() const {
  // @@protoc_insertion_point(field_get:quotation.VIndex.redeem_amendment_value)
  return redeem_amendment_value_;
}
inline void VIndex::set_redeem_amendment_value(double value) {
  set_has_redeem_amendment_value();
  redeem_amendment_value_ = value;
  // @@protoc_insertion_point(field_set:quotation.VIndex.redeem_amendment_value)
}

// optional double redeem_amendment_rate = 32;
inline bool VIndex::has_redeem_amendment_rate() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void VIndex::set_has_redeem_amendment_rate() {
  _has_bits_[0] |= 0x08000000u;
}
inline void VIndex::clear_has_redeem_amendment_rate() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void VIndex::clear_redeem_amendment_rate() {
  redeem_amendment_rate_ = 0;
  clear_has_redeem_amendment_rate();
}
inline double VIndex::redeem_amendment_rate() const {
  // @@protoc_insertion_point(field_get:quotation.VIndex.redeem_amendment_rate)
  return redeem_amendment_rate_;
}
inline void VIndex::set_redeem_amendment_rate(double value) {
  set_has_redeem_amendment_rate();
  redeem_amendment_rate_ = value;
  // @@protoc_insertion_point(field_set:quotation.VIndex.redeem_amendment_rate)
}

// -------------------------------------------------------------------

// GradedFundIopv

// optional string type = 1 [default = "C"];
inline bool GradedFundIopv::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GradedFundIopv::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GradedFundIopv::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GradedFundIopv::clear_type() {
  type_.ClearToDefaultNoArena(&::quotation::GradedFundIopv::_i_give_permission_to_break_this_code_default_type_.get());
  clear_has_type();
}
inline const ::std::string& GradedFundIopv::type() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundIopv.type)
  return type_.GetNoArena();
}
inline void GradedFundIopv::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::quotation::GradedFundIopv::_i_give_permission_to_break_this_code_default_type_.get(), value);
  // @@protoc_insertion_point(field_set:quotation.GradedFundIopv.type)
}
#if LANG_CXX11
inline void GradedFundIopv::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::quotation::GradedFundIopv::_i_give_permission_to_break_this_code_default_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.GradedFundIopv.type)
}
#endif
inline void GradedFundIopv::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::quotation::GradedFundIopv::_i_give_permission_to_break_this_code_default_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.GradedFundIopv.type)
}
inline void GradedFundIopv::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::quotation::GradedFundIopv::_i_give_permission_to_break_this_code_default_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.GradedFundIopv.type)
}
inline ::std::string* GradedFundIopv::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:quotation.GradedFundIopv.type)
  return type_.MutableNoArena(&::quotation::GradedFundIopv::_i_give_permission_to_break_this_code_default_type_.get());
}
inline ::std::string* GradedFundIopv::release_type() {
  // @@protoc_insertion_point(field_release:quotation.GradedFundIopv.type)
  if (!has_type()) {
    return NULL;
  }
  clear_has_type();
  return type_.ReleaseNonDefaultNoArena(&::quotation::GradedFundIopv::_i_give_permission_to_break_this_code_default_type_.get());
}
inline void GradedFundIopv::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::quotation::GradedFundIopv::_i_give_permission_to_break_this_code_default_type_.get(), type);
  // @@protoc_insertion_point(field_set_allocated:quotation.GradedFundIopv.type)
}

// optional uint32 trading_day = 2;
inline bool GradedFundIopv::has_trading_day() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GradedFundIopv::set_has_trading_day() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GradedFundIopv::clear_has_trading_day() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GradedFundIopv::clear_trading_day() {
  trading_day_ = 0u;
  clear_has_trading_day();
}
inline ::google::protobuf::uint32 GradedFundIopv::trading_day() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundIopv.trading_day)
  return trading_day_;
}
inline void GradedFundIopv::set_trading_day(::google::protobuf::uint32 value) {
  set_has_trading_day();
  trading_day_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundIopv.trading_day)
}

// required uint32 stamp = 3;
inline bool GradedFundIopv::has_stamp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GradedFundIopv::set_has_stamp() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GradedFundIopv::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GradedFundIopv::clear_stamp() {
  stamp_ = 0u;
  clear_has_stamp();
}
inline ::google::protobuf::uint32 GradedFundIopv::stamp() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundIopv.stamp)
  return stamp_;
}
inline void GradedFundIopv::set_stamp(::google::protobuf::uint32 value) {
  set_has_stamp();
  stamp_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundIopv.stamp)
}

// required string fof_code = 4;
inline bool GradedFundIopv::has_fof_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GradedFundIopv::set_has_fof_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GradedFundIopv::clear_has_fof_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GradedFundIopv::clear_fof_code() {
  fof_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fof_code();
}
inline const ::std::string& GradedFundIopv::fof_code() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundIopv.fof_code)
  return fof_code_.GetNoArena();
}
inline void GradedFundIopv::set_fof_code(const ::std::string& value) {
  set_has_fof_code();
  fof_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.GradedFundIopv.fof_code)
}
#if LANG_CXX11
inline void GradedFundIopv::set_fof_code(::std::string&& value) {
  set_has_fof_code();
  fof_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.GradedFundIopv.fof_code)
}
#endif
inline void GradedFundIopv::set_fof_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fof_code();
  fof_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.GradedFundIopv.fof_code)
}
inline void GradedFundIopv::set_fof_code(const char* value, size_t size) {
  set_has_fof_code();
  fof_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.GradedFundIopv.fof_code)
}
inline ::std::string* GradedFundIopv::mutable_fof_code() {
  set_has_fof_code();
  // @@protoc_insertion_point(field_mutable:quotation.GradedFundIopv.fof_code)
  return fof_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GradedFundIopv::release_fof_code() {
  // @@protoc_insertion_point(field_release:quotation.GradedFundIopv.fof_code)
  if (!has_fof_code()) {
    return NULL;
  }
  clear_has_fof_code();
  return fof_code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GradedFundIopv::set_allocated_fof_code(::std::string* fof_code) {
  if (fof_code != NULL) {
    set_has_fof_code();
  } else {
    clear_has_fof_code();
  }
  fof_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fof_code);
  // @@protoc_insertion_point(field_set_allocated:quotation.GradedFundIopv.fof_code)
}

// optional string fof_name = 5;
inline bool GradedFundIopv::has_fof_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GradedFundIopv::set_has_fof_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GradedFundIopv::clear_has_fof_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GradedFundIopv::clear_fof_name() {
  fof_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fof_name();
}
inline const ::std::string& GradedFundIopv::fof_name() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundIopv.fof_name)
  return fof_name_.GetNoArena();
}
inline void GradedFundIopv::set_fof_name(const ::std::string& value) {
  set_has_fof_name();
  fof_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.GradedFundIopv.fof_name)
}
#if LANG_CXX11
inline void GradedFundIopv::set_fof_name(::std::string&& value) {
  set_has_fof_name();
  fof_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.GradedFundIopv.fof_name)
}
#endif
inline void GradedFundIopv::set_fof_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fof_name();
  fof_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.GradedFundIopv.fof_name)
}
inline void GradedFundIopv::set_fof_name(const char* value, size_t size) {
  set_has_fof_name();
  fof_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.GradedFundIopv.fof_name)
}
inline ::std::string* GradedFundIopv::mutable_fof_name() {
  set_has_fof_name();
  // @@protoc_insertion_point(field_mutable:quotation.GradedFundIopv.fof_name)
  return fof_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GradedFundIopv::release_fof_name() {
  // @@protoc_insertion_point(field_release:quotation.GradedFundIopv.fof_name)
  if (!has_fof_name()) {
    return NULL;
  }
  clear_has_fof_name();
  return fof_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GradedFundIopv::set_allocated_fof_name(::std::string* fof_name) {
  if (fof_name != NULL) {
    set_has_fof_name();
  } else {
    clear_has_fof_name();
  }
  fof_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fof_name);
  // @@protoc_insertion_point(field_set_allocated:quotation.GradedFundIopv.fof_name)
}

// optional double fof_pre_nav = 6;
inline bool GradedFundIopv::has_fof_pre_nav() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GradedFundIopv::set_has_fof_pre_nav() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GradedFundIopv::clear_has_fof_pre_nav() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GradedFundIopv::clear_fof_pre_nav() {
  fof_pre_nav_ = 0;
  clear_has_fof_pre_nav();
}
inline double GradedFundIopv::fof_pre_nav() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundIopv.fof_pre_nav)
  return fof_pre_nav_;
}
inline void GradedFundIopv::set_fof_pre_nav(double value) {
  set_has_fof_pre_nav();
  fof_pre_nav_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundIopv.fof_pre_nav)
}

// required string a_code = 7;
inline bool GradedFundIopv::has_a_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GradedFundIopv::set_has_a_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GradedFundIopv::clear_has_a_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GradedFundIopv::clear_a_code() {
  a_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_a_code();
}
inline const ::std::string& GradedFundIopv::a_code() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundIopv.a_code)
  return a_code_.GetNoArena();
}
inline void GradedFundIopv::set_a_code(const ::std::string& value) {
  set_has_a_code();
  a_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.GradedFundIopv.a_code)
}
#if LANG_CXX11
inline void GradedFundIopv::set_a_code(::std::string&& value) {
  set_has_a_code();
  a_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.GradedFundIopv.a_code)
}
#endif
inline void GradedFundIopv::set_a_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_a_code();
  a_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.GradedFundIopv.a_code)
}
inline void GradedFundIopv::set_a_code(const char* value, size_t size) {
  set_has_a_code();
  a_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.GradedFundIopv.a_code)
}
inline ::std::string* GradedFundIopv::mutable_a_code() {
  set_has_a_code();
  // @@protoc_insertion_point(field_mutable:quotation.GradedFundIopv.a_code)
  return a_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GradedFundIopv::release_a_code() {
  // @@protoc_insertion_point(field_release:quotation.GradedFundIopv.a_code)
  if (!has_a_code()) {
    return NULL;
  }
  clear_has_a_code();
  return a_code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GradedFundIopv::set_allocated_a_code(::std::string* a_code) {
  if (a_code != NULL) {
    set_has_a_code();
  } else {
    clear_has_a_code();
  }
  a_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), a_code);
  // @@protoc_insertion_point(field_set_allocated:quotation.GradedFundIopv.a_code)
}

// optional string a_name = 8;
inline bool GradedFundIopv::has_a_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GradedFundIopv::set_has_a_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GradedFundIopv::clear_has_a_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GradedFundIopv::clear_a_name() {
  a_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_a_name();
}
inline const ::std::string& GradedFundIopv::a_name() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundIopv.a_name)
  return a_name_.GetNoArena();
}
inline void GradedFundIopv::set_a_name(const ::std::string& value) {
  set_has_a_name();
  a_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.GradedFundIopv.a_name)
}
#if LANG_CXX11
inline void GradedFundIopv::set_a_name(::std::string&& value) {
  set_has_a_name();
  a_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.GradedFundIopv.a_name)
}
#endif
inline void GradedFundIopv::set_a_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_a_name();
  a_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.GradedFundIopv.a_name)
}
inline void GradedFundIopv::set_a_name(const char* value, size_t size) {
  set_has_a_name();
  a_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.GradedFundIopv.a_name)
}
inline ::std::string* GradedFundIopv::mutable_a_name() {
  set_has_a_name();
  // @@protoc_insertion_point(field_mutable:quotation.GradedFundIopv.a_name)
  return a_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GradedFundIopv::release_a_name() {
  // @@protoc_insertion_point(field_release:quotation.GradedFundIopv.a_name)
  if (!has_a_name()) {
    return NULL;
  }
  clear_has_a_name();
  return a_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GradedFundIopv::set_allocated_a_name(::std::string* a_name) {
  if (a_name != NULL) {
    set_has_a_name();
  } else {
    clear_has_a_name();
  }
  a_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), a_name);
  // @@protoc_insertion_point(field_set_allocated:quotation.GradedFundIopv.a_name)
}

// optional double a_bp1 = 9;
inline bool GradedFundIopv::has_a_bp1() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GradedFundIopv::set_has_a_bp1() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GradedFundIopv::clear_has_a_bp1() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GradedFundIopv::clear_a_bp1() {
  a_bp1_ = 0;
  clear_has_a_bp1();
}
inline double GradedFundIopv::a_bp1() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundIopv.a_bp1)
  return a_bp1_;
}
inline void GradedFundIopv::set_a_bp1(double value) {
  set_has_a_bp1();
  a_bp1_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundIopv.a_bp1)
}

// optional double a_sp1 = 10;
inline bool GradedFundIopv::has_a_sp1() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GradedFundIopv::set_has_a_sp1() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GradedFundIopv::clear_has_a_sp1() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GradedFundIopv::clear_a_sp1() {
  a_sp1_ = 0;
  clear_has_a_sp1();
}
inline double GradedFundIopv::a_sp1() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundIopv.a_sp1)
  return a_sp1_;
}
inline void GradedFundIopv::set_a_sp1(double value) {
  set_has_a_sp1();
  a_sp1_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundIopv.a_sp1)
}

// optional uint32 a_quote_time = 11;
inline bool GradedFundIopv::has_a_quote_time() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GradedFundIopv::set_has_a_quote_time() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GradedFundIopv::clear_has_a_quote_time() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GradedFundIopv::clear_a_quote_time() {
  a_quote_time_ = 0u;
  clear_has_a_quote_time();
}
inline ::google::protobuf::uint32 GradedFundIopv::a_quote_time() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundIopv.a_quote_time)
  return a_quote_time_;
}
inline void GradedFundIopv::set_a_quote_time(::google::protobuf::uint32 value) {
  set_has_a_quote_time();
  a_quote_time_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundIopv.a_quote_time)
}

// required string b_code = 12;
inline bool GradedFundIopv::has_b_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GradedFundIopv::set_has_b_code() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GradedFundIopv::clear_has_b_code() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GradedFundIopv::clear_b_code() {
  b_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_b_code();
}
inline const ::std::string& GradedFundIopv::b_code() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundIopv.b_code)
  return b_code_.GetNoArena();
}
inline void GradedFundIopv::set_b_code(const ::std::string& value) {
  set_has_b_code();
  b_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.GradedFundIopv.b_code)
}
#if LANG_CXX11
inline void GradedFundIopv::set_b_code(::std::string&& value) {
  set_has_b_code();
  b_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.GradedFundIopv.b_code)
}
#endif
inline void GradedFundIopv::set_b_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_b_code();
  b_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.GradedFundIopv.b_code)
}
inline void GradedFundIopv::set_b_code(const char* value, size_t size) {
  set_has_b_code();
  b_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.GradedFundIopv.b_code)
}
inline ::std::string* GradedFundIopv::mutable_b_code() {
  set_has_b_code();
  // @@protoc_insertion_point(field_mutable:quotation.GradedFundIopv.b_code)
  return b_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GradedFundIopv::release_b_code() {
  // @@protoc_insertion_point(field_release:quotation.GradedFundIopv.b_code)
  if (!has_b_code()) {
    return NULL;
  }
  clear_has_b_code();
  return b_code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GradedFundIopv::set_allocated_b_code(::std::string* b_code) {
  if (b_code != NULL) {
    set_has_b_code();
  } else {
    clear_has_b_code();
  }
  b_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), b_code);
  // @@protoc_insertion_point(field_set_allocated:quotation.GradedFundIopv.b_code)
}

// optional string b_name = 13;
inline bool GradedFundIopv::has_b_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GradedFundIopv::set_has_b_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GradedFundIopv::clear_has_b_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GradedFundIopv::clear_b_name() {
  b_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_b_name();
}
inline const ::std::string& GradedFundIopv::b_name() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundIopv.b_name)
  return b_name_.GetNoArena();
}
inline void GradedFundIopv::set_b_name(const ::std::string& value) {
  set_has_b_name();
  b_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.GradedFundIopv.b_name)
}
#if LANG_CXX11
inline void GradedFundIopv::set_b_name(::std::string&& value) {
  set_has_b_name();
  b_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.GradedFundIopv.b_name)
}
#endif
inline void GradedFundIopv::set_b_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_b_name();
  b_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.GradedFundIopv.b_name)
}
inline void GradedFundIopv::set_b_name(const char* value, size_t size) {
  set_has_b_name();
  b_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.GradedFundIopv.b_name)
}
inline ::std::string* GradedFundIopv::mutable_b_name() {
  set_has_b_name();
  // @@protoc_insertion_point(field_mutable:quotation.GradedFundIopv.b_name)
  return b_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GradedFundIopv::release_b_name() {
  // @@protoc_insertion_point(field_release:quotation.GradedFundIopv.b_name)
  if (!has_b_name()) {
    return NULL;
  }
  clear_has_b_name();
  return b_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GradedFundIopv::set_allocated_b_name(::std::string* b_name) {
  if (b_name != NULL) {
    set_has_b_name();
  } else {
    clear_has_b_name();
  }
  b_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), b_name);
  // @@protoc_insertion_point(field_set_allocated:quotation.GradedFundIopv.b_name)
}

// optional double b_bp1 = 14;
inline bool GradedFundIopv::has_b_bp1() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void GradedFundIopv::set_has_b_bp1() {
  _has_bits_[0] |= 0x00010000u;
}
inline void GradedFundIopv::clear_has_b_bp1() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void GradedFundIopv::clear_b_bp1() {
  b_bp1_ = 0;
  clear_has_b_bp1();
}
inline double GradedFundIopv::b_bp1() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundIopv.b_bp1)
  return b_bp1_;
}
inline void GradedFundIopv::set_b_bp1(double value) {
  set_has_b_bp1();
  b_bp1_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundIopv.b_bp1)
}

// optional double b_sp1 = 15;
inline bool GradedFundIopv::has_b_sp1() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void GradedFundIopv::set_has_b_sp1() {
  _has_bits_[0] |= 0x00020000u;
}
inline void GradedFundIopv::clear_has_b_sp1() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void GradedFundIopv::clear_b_sp1() {
  b_sp1_ = 0;
  clear_has_b_sp1();
}
inline double GradedFundIopv::b_sp1() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundIopv.b_sp1)
  return b_sp1_;
}
inline void GradedFundIopv::set_b_sp1(double value) {
  set_has_b_sp1();
  b_sp1_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundIopv.b_sp1)
}

// optional uint32 b_quote_time = 16;
inline bool GradedFundIopv::has_b_quote_time() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GradedFundIopv::set_has_b_quote_time() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GradedFundIopv::clear_has_b_quote_time() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GradedFundIopv::clear_b_quote_time() {
  b_quote_time_ = 0u;
  clear_has_b_quote_time();
}
inline ::google::protobuf::uint32 GradedFundIopv::b_quote_time() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundIopv.b_quote_time)
  return b_quote_time_;
}
inline void GradedFundIopv::set_b_quote_time(::google::protobuf::uint32 value) {
  set_has_b_quote_time();
  b_quote_time_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundIopv.b_quote_time)
}

// required string underlying_code = 17;
inline bool GradedFundIopv::has_underlying_code() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GradedFundIopv::set_has_underlying_code() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GradedFundIopv::clear_has_underlying_code() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GradedFundIopv::clear_underlying_code() {
  underlying_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_underlying_code();
}
inline const ::std::string& GradedFundIopv::underlying_code() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundIopv.underlying_code)
  return underlying_code_.GetNoArena();
}
inline void GradedFundIopv::set_underlying_code(const ::std::string& value) {
  set_has_underlying_code();
  underlying_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.GradedFundIopv.underlying_code)
}
#if LANG_CXX11
inline void GradedFundIopv::set_underlying_code(::std::string&& value) {
  set_has_underlying_code();
  underlying_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.GradedFundIopv.underlying_code)
}
#endif
inline void GradedFundIopv::set_underlying_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_underlying_code();
  underlying_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.GradedFundIopv.underlying_code)
}
inline void GradedFundIopv::set_underlying_code(const char* value, size_t size) {
  set_has_underlying_code();
  underlying_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.GradedFundIopv.underlying_code)
}
inline ::std::string* GradedFundIopv::mutable_underlying_code() {
  set_has_underlying_code();
  // @@protoc_insertion_point(field_mutable:quotation.GradedFundIopv.underlying_code)
  return underlying_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GradedFundIopv::release_underlying_code() {
  // @@protoc_insertion_point(field_release:quotation.GradedFundIopv.underlying_code)
  if (!has_underlying_code()) {
    return NULL;
  }
  clear_has_underlying_code();
  return underlying_code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GradedFundIopv::set_allocated_underlying_code(::std::string* underlying_code) {
  if (underlying_code != NULL) {
    set_has_underlying_code();
  } else {
    clear_has_underlying_code();
  }
  underlying_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), underlying_code);
  // @@protoc_insertion_point(field_set_allocated:quotation.GradedFundIopv.underlying_code)
}

// optional double underlying_latest = 18;
inline bool GradedFundIopv::has_underlying_latest() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void GradedFundIopv::set_has_underlying_latest() {
  _has_bits_[0] |= 0x00040000u;
}
inline void GradedFundIopv::clear_has_underlying_latest() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void GradedFundIopv::clear_underlying_latest() {
  underlying_latest_ = 0;
  clear_has_underlying_latest();
}
inline double GradedFundIopv::underlying_latest() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundIopv.underlying_latest)
  return underlying_latest_;
}
inline void GradedFundIopv::set_underlying_latest(double value) {
  set_has_underlying_latest();
  underlying_latest_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundIopv.underlying_latest)
}

// optional double underlying_pre_close = 19;
inline bool GradedFundIopv::has_underlying_pre_close() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void GradedFundIopv::set_has_underlying_pre_close() {
  _has_bits_[0] |= 0x00080000u;
}
inline void GradedFundIopv::clear_has_underlying_pre_close() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void GradedFundIopv::clear_underlying_pre_close() {
  underlying_pre_close_ = 0;
  clear_has_underlying_pre_close();
}
inline double GradedFundIopv::underlying_pre_close() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundIopv.underlying_pre_close)
  return underlying_pre_close_;
}
inline void GradedFundIopv::set_underlying_pre_close(double value) {
  set_has_underlying_pre_close();
  underlying_pre_close_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundIopv.underlying_pre_close)
}

// optional uint32 underlying_quote_time = 20;
inline bool GradedFundIopv::has_underlying_quote_time() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void GradedFundIopv::set_has_underlying_quote_time() {
  _has_bits_[0] |= 0x00200000u;
}
inline void GradedFundIopv::clear_has_underlying_quote_time() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void GradedFundIopv::clear_underlying_quote_time() {
  underlying_quote_time_ = 0u;
  clear_has_underlying_quote_time();
}
inline ::google::protobuf::uint32 GradedFundIopv::underlying_quote_time() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundIopv.underlying_quote_time)
  return underlying_quote_time_;
}
inline void GradedFundIopv::set_underlying_quote_time(::google::protobuf::uint32 value) {
  set_has_underlying_quote_time();
  underlying_quote_time_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundIopv.underlying_quote_time)
}

// optional double hs300_latest = 21;
inline bool GradedFundIopv::has_hs300_latest() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void GradedFundIopv::set_has_hs300_latest() {
  _has_bits_[0] |= 0x00100000u;
}
inline void GradedFundIopv::clear_has_hs300_latest() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void GradedFundIopv::clear_hs300_latest() {
  hs300_latest_ = 0;
  clear_has_hs300_latest();
}
inline double GradedFundIopv::hs300_latest() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundIopv.hs300_latest)
  return hs300_latest_;
}
inline void GradedFundIopv::set_hs300_latest(double value) {
  set_has_hs300_latest();
  hs300_latest_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundIopv.hs300_latest)
}

// optional double hs300_pre_close = 22;
inline bool GradedFundIopv::has_hs300_pre_close() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void GradedFundIopv::set_has_hs300_pre_close() {
  _has_bits_[0] |= 0x00800000u;
}
inline void GradedFundIopv::clear_has_hs300_pre_close() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void GradedFundIopv::clear_hs300_pre_close() {
  hs300_pre_close_ = 0;
  clear_has_hs300_pre_close();
}
inline double GradedFundIopv::hs300_pre_close() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundIopv.hs300_pre_close)
  return hs300_pre_close_;
}
inline void GradedFundIopv::set_hs300_pre_close(double value) {
  set_has_hs300_pre_close();
  hs300_pre_close_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundIopv.hs300_pre_close)
}

// optional uint32 hs300_quote_time = 23;
inline bool GradedFundIopv::has_hs300_quote_time() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void GradedFundIopv::set_has_hs300_quote_time() {
  _has_bits_[0] |= 0x00400000u;
}
inline void GradedFundIopv::clear_has_hs300_quote_time() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void GradedFundIopv::clear_hs300_quote_time() {
  hs300_quote_time_ = 0u;
  clear_has_hs300_quote_time();
}
inline ::google::protobuf::uint32 GradedFundIopv::hs300_quote_time() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundIopv.hs300_quote_time)
  return hs300_quote_time_;
}
inline void GradedFundIopv::set_hs300_quote_time(::google::protobuf::uint32 value) {
  set_has_hs300_quote_time();
  hs300_quote_time_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundIopv.hs300_quote_time)
}

// optional int64 ratio_a = 24;
inline bool GradedFundIopv::has_ratio_a() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void GradedFundIopv::set_has_ratio_a() {
  _has_bits_[0] |= 0x01000000u;
}
inline void GradedFundIopv::clear_has_ratio_a() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void GradedFundIopv::clear_ratio_a() {
  ratio_a_ = GOOGLE_LONGLONG(0);
  clear_has_ratio_a();
}
inline ::google::protobuf::int64 GradedFundIopv::ratio_a() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundIopv.ratio_a)
  return ratio_a_;
}
inline void GradedFundIopv::set_ratio_a(::google::protobuf::int64 value) {
  set_has_ratio_a();
  ratio_a_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundIopv.ratio_a)
}

// optional int64 ratio_b = 25;
inline bool GradedFundIopv::has_ratio_b() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void GradedFundIopv::set_has_ratio_b() {
  _has_bits_[0] |= 0x02000000u;
}
inline void GradedFundIopv::clear_has_ratio_b() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void GradedFundIopv::clear_ratio_b() {
  ratio_b_ = GOOGLE_LONGLONG(0);
  clear_has_ratio_b();
}
inline ::google::protobuf::int64 GradedFundIopv::ratio_b() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundIopv.ratio_b)
  return ratio_b_;
}
inline void GradedFundIopv::set_ratio_b(::google::protobuf::int64 value) {
  set_has_ratio_b();
  ratio_b_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundIopv.ratio_b)
}

// optional double position_rate = 26;
inline bool GradedFundIopv::has_position_rate() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void GradedFundIopv::set_has_position_rate() {
  _has_bits_[0] |= 0x04000000u;
}
inline void GradedFundIopv::clear_has_position_rate() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void GradedFundIopv::clear_position_rate() {
  position_rate_ = 0;
  clear_has_position_rate();
}
inline double GradedFundIopv::position_rate() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundIopv.position_rate)
  return position_rate_;
}
inline void GradedFundIopv::set_position_rate(double value) {
  set_has_position_rate();
  position_rate_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundIopv.position_rate)
}

// optional double discount_fee_rate = 27;
inline bool GradedFundIopv::has_discount_fee_rate() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void GradedFundIopv::set_has_discount_fee_rate() {
  _has_bits_[0] |= 0x08000000u;
}
inline void GradedFundIopv::clear_has_discount_fee_rate() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void GradedFundIopv::clear_discount_fee_rate() {
  discount_fee_rate_ = 0;
  clear_has_discount_fee_rate();
}
inline double GradedFundIopv::discount_fee_rate() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundIopv.discount_fee_rate)
  return discount_fee_rate_;
}
inline void GradedFundIopv::set_discount_fee_rate(double value) {
  set_has_discount_fee_rate();
  discount_fee_rate_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundIopv.discount_fee_rate)
}

// optional double premium_fee_rate = 28;
inline bool GradedFundIopv::has_premium_fee_rate() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void GradedFundIopv::set_has_premium_fee_rate() {
  _has_bits_[0] |= 0x10000000u;
}
inline void GradedFundIopv::clear_has_premium_fee_rate() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void GradedFundIopv::clear_premium_fee_rate() {
  premium_fee_rate_ = 0;
  clear_has_premium_fee_rate();
}
inline double GradedFundIopv::premium_fee_rate() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundIopv.premium_fee_rate)
  return premium_fee_rate_;
}
inline void GradedFundIopv::set_premium_fee_rate(double value) {
  set_has_premium_fee_rate();
  premium_fee_rate_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundIopv.premium_fee_rate)
}

// optional double underlying_amplitude = 29;
inline bool GradedFundIopv::has_underlying_amplitude() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void GradedFundIopv::set_has_underlying_amplitude() {
  _has_bits_[0] |= 0x20000000u;
}
inline void GradedFundIopv::clear_has_underlying_amplitude() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void GradedFundIopv::clear_underlying_amplitude() {
  underlying_amplitude_ = 0;
  clear_has_underlying_amplitude();
}
inline double GradedFundIopv::underlying_amplitude() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundIopv.underlying_amplitude)
  return underlying_amplitude_;
}
inline void GradedFundIopv::set_underlying_amplitude(double value) {
  set_has_underlying_amplitude();
  underlying_amplitude_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundIopv.underlying_amplitude)
}

// optional double hs300_amplitude = 30;
inline bool GradedFundIopv::has_hs300_amplitude() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void GradedFundIopv::set_has_hs300_amplitude() {
  _has_bits_[0] |= 0x40000000u;
}
inline void GradedFundIopv::clear_has_hs300_amplitude() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void GradedFundIopv::clear_hs300_amplitude() {
  hs300_amplitude_ = 0;
  clear_has_hs300_amplitude();
}
inline double GradedFundIopv::hs300_amplitude() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundIopv.hs300_amplitude)
  return hs300_amplitude_;
}
inline void GradedFundIopv::set_hs300_amplitude(double value) {
  set_has_hs300_amplitude();
  hs300_amplitude_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundIopv.hs300_amplitude)
}

// optional double fof_strength = 31;
inline bool GradedFundIopv::has_fof_strength() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void GradedFundIopv::set_has_fof_strength() {
  _has_bits_[0] |= 0x80000000u;
}
inline void GradedFundIopv::clear_has_fof_strength() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void GradedFundIopv::clear_fof_strength() {
  fof_strength_ = 0;
  clear_has_fof_strength();
}
inline double GradedFundIopv::fof_strength() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundIopv.fof_strength)
  return fof_strength_;
}
inline void GradedFundIopv::set_fof_strength(double value) {
  set_has_fof_strength();
  fof_strength_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundIopv.fof_strength)
}

// optional double fof_iopv = 32;
inline bool GradedFundIopv::has_fof_iopv() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void GradedFundIopv::set_has_fof_iopv() {
  _has_bits_[1] |= 0x00000001u;
}
inline void GradedFundIopv::clear_has_fof_iopv() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void GradedFundIopv::clear_fof_iopv() {
  fof_iopv_ = 0;
  clear_has_fof_iopv();
}
inline double GradedFundIopv::fof_iopv() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundIopv.fof_iopv)
  return fof_iopv_;
}
inline void GradedFundIopv::set_fof_iopv(double value) {
  set_has_fof_iopv();
  fof_iopv_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundIopv.fof_iopv)
}

// optional double bp1_iopv = 33;
inline bool GradedFundIopv::has_bp1_iopv() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void GradedFundIopv::set_has_bp1_iopv() {
  _has_bits_[1] |= 0x00000002u;
}
inline void GradedFundIopv::clear_has_bp1_iopv() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void GradedFundIopv::clear_bp1_iopv() {
  bp1_iopv_ = 0;
  clear_has_bp1_iopv();
}
inline double GradedFundIopv::bp1_iopv() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundIopv.bp1_iopv)
  return bp1_iopv_;
}
inline void GradedFundIopv::set_bp1_iopv(double value) {
  set_has_bp1_iopv();
  bp1_iopv_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundIopv.bp1_iopv)
}

// optional double sp1_iopv = 34;
inline bool GradedFundIopv::has_sp1_iopv() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void GradedFundIopv::set_has_sp1_iopv() {
  _has_bits_[1] |= 0x00000004u;
}
inline void GradedFundIopv::clear_has_sp1_iopv() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void GradedFundIopv::clear_sp1_iopv() {
  sp1_iopv_ = 0;
  clear_has_sp1_iopv();
}
inline double GradedFundIopv::sp1_iopv() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundIopv.sp1_iopv)
  return sp1_iopv_;
}
inline void GradedFundIopv::set_sp1_iopv(double value) {
  set_has_sp1_iopv();
  sp1_iopv_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundIopv.sp1_iopv)
}

// optional int64 bp1_iopv_state = 35;
inline bool GradedFundIopv::has_bp1_iopv_state() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void GradedFundIopv::set_has_bp1_iopv_state() {
  _has_bits_[1] |= 0x00000008u;
}
inline void GradedFundIopv::clear_has_bp1_iopv_state() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void GradedFundIopv::clear_bp1_iopv_state() {
  bp1_iopv_state_ = GOOGLE_LONGLONG(0);
  clear_has_bp1_iopv_state();
}
inline ::google::protobuf::int64 GradedFundIopv::bp1_iopv_state() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundIopv.bp1_iopv_state)
  return bp1_iopv_state_;
}
inline void GradedFundIopv::set_bp1_iopv_state(::google::protobuf::int64 value) {
  set_has_bp1_iopv_state();
  bp1_iopv_state_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundIopv.bp1_iopv_state)
}

// optional int64 sp1_iopv_state = 36;
inline bool GradedFundIopv::has_sp1_iopv_state() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void GradedFundIopv::set_has_sp1_iopv_state() {
  _has_bits_[1] |= 0x00000010u;
}
inline void GradedFundIopv::clear_has_sp1_iopv_state() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void GradedFundIopv::clear_sp1_iopv_state() {
  sp1_iopv_state_ = GOOGLE_LONGLONG(0);
  clear_has_sp1_iopv_state();
}
inline ::google::protobuf::int64 GradedFundIopv::sp1_iopv_state() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundIopv.sp1_iopv_state)
  return sp1_iopv_state_;
}
inline void GradedFundIopv::set_sp1_iopv_state(::google::protobuf::int64 value) {
  set_has_sp1_iopv_state();
  sp1_iopv_state_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundIopv.sp1_iopv_state)
}

// optional double discount_bp1 = 37;
inline bool GradedFundIopv::has_discount_bp1() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void GradedFundIopv::set_has_discount_bp1() {
  _has_bits_[1] |= 0x00000020u;
}
inline void GradedFundIopv::clear_has_discount_bp1() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void GradedFundIopv::clear_discount_bp1() {
  discount_bp1_ = 0;
  clear_has_discount_bp1();
}
inline double GradedFundIopv::discount_bp1() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundIopv.discount_bp1)
  return discount_bp1_;
}
inline void GradedFundIopv::set_discount_bp1(double value) {
  set_has_discount_bp1();
  discount_bp1_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundIopv.discount_bp1)
}

// optional double discount_sp1 = 38;
inline bool GradedFundIopv::has_discount_sp1() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void GradedFundIopv::set_has_discount_sp1() {
  _has_bits_[1] |= 0x00000040u;
}
inline void GradedFundIopv::clear_has_discount_sp1() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void GradedFundIopv::clear_discount_sp1() {
  discount_sp1_ = 0;
  clear_has_discount_sp1();
}
inline double GradedFundIopv::discount_sp1() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundIopv.discount_sp1)
  return discount_sp1_;
}
inline void GradedFundIopv::set_discount_sp1(double value) {
  set_has_discount_sp1();
  discount_sp1_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundIopv.discount_sp1)
}

// optional double premium_bp1 = 39;
inline bool GradedFundIopv::has_premium_bp1() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void GradedFundIopv::set_has_premium_bp1() {
  _has_bits_[1] |= 0x00000080u;
}
inline void GradedFundIopv::clear_has_premium_bp1() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void GradedFundIopv::clear_premium_bp1() {
  premium_bp1_ = 0;
  clear_has_premium_bp1();
}
inline double GradedFundIopv::premium_bp1() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundIopv.premium_bp1)
  return premium_bp1_;
}
inline void GradedFundIopv::set_premium_bp1(double value) {
  set_has_premium_bp1();
  premium_bp1_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundIopv.premium_bp1)
}

// optional double premium_sp1 = 40;
inline bool GradedFundIopv::has_premium_sp1() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void GradedFundIopv::set_has_premium_sp1() {
  _has_bits_[1] |= 0x00000100u;
}
inline void GradedFundIopv::clear_has_premium_sp1() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void GradedFundIopv::clear_premium_sp1() {
  premium_sp1_ = 0;
  clear_has_premium_sp1();
}
inline double GradedFundIopv::premium_sp1() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundIopv.premium_sp1)
  return premium_sp1_;
}
inline void GradedFundIopv::set_premium_sp1(double value) {
  set_has_premium_sp1();
  premium_sp1_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundIopv.premium_sp1)
}

// optional int64 state = 41;
inline bool GradedFundIopv::has_state() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void GradedFundIopv::set_has_state() {
  _has_bits_[1] |= 0x00000200u;
}
inline void GradedFundIopv::clear_has_state() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void GradedFundIopv::clear_state() {
  state_ = GOOGLE_LONGLONG(0);
  clear_has_state();
}
inline ::google::protobuf::int64 GradedFundIopv::state() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundIopv.state)
  return state_;
}
inline void GradedFundIopv::set_state(::google::protobuf::int64 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundIopv.state)
}

// optional string msg = 42;
inline bool GradedFundIopv::has_msg() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GradedFundIopv::set_has_msg() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GradedFundIopv::clear_has_msg() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GradedFundIopv::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& GradedFundIopv::msg() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundIopv.msg)
  return msg_.GetNoArena();
}
inline void GradedFundIopv::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.GradedFundIopv.msg)
}
#if LANG_CXX11
inline void GradedFundIopv::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.GradedFundIopv.msg)
}
#endif
inline void GradedFundIopv::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.GradedFundIopv.msg)
}
inline void GradedFundIopv::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.GradedFundIopv.msg)
}
inline ::std::string* GradedFundIopv::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:quotation.GradedFundIopv.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GradedFundIopv::release_msg() {
  // @@protoc_insertion_point(field_release:quotation.GradedFundIopv.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GradedFundIopv::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:quotation.GradedFundIopv.msg)
}

// -------------------------------------------------------------------

// OptionVolatility

// optional string type = 1 [default = "P"];
inline bool OptionVolatility::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptionVolatility::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptionVolatility::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptionVolatility::clear_type() {
  type_.ClearToDefaultNoArena(&::quotation::OptionVolatility::_i_give_permission_to_break_this_code_default_type_.get());
  clear_has_type();
}
inline const ::std::string& OptionVolatility::type() const {
  // @@protoc_insertion_point(field_get:quotation.OptionVolatility.type)
  return type_.GetNoArena();
}
inline void OptionVolatility::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::quotation::OptionVolatility::_i_give_permission_to_break_this_code_default_type_.get(), value);
  // @@protoc_insertion_point(field_set:quotation.OptionVolatility.type)
}
#if LANG_CXX11
inline void OptionVolatility::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::quotation::OptionVolatility::_i_give_permission_to_break_this_code_default_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.OptionVolatility.type)
}
#endif
inline void OptionVolatility::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::quotation::OptionVolatility::_i_give_permission_to_break_this_code_default_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.OptionVolatility.type)
}
inline void OptionVolatility::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::quotation::OptionVolatility::_i_give_permission_to_break_this_code_default_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.OptionVolatility.type)
}
inline ::std::string* OptionVolatility::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:quotation.OptionVolatility.type)
  return type_.MutableNoArena(&::quotation::OptionVolatility::_i_give_permission_to_break_this_code_default_type_.get());
}
inline ::std::string* OptionVolatility::release_type() {
  // @@protoc_insertion_point(field_release:quotation.OptionVolatility.type)
  if (!has_type()) {
    return NULL;
  }
  clear_has_type();
  return type_.ReleaseNonDefaultNoArena(&::quotation::OptionVolatility::_i_give_permission_to_break_this_code_default_type_.get());
}
inline void OptionVolatility::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::quotation::OptionVolatility::_i_give_permission_to_break_this_code_default_type_.get(), type);
  // @@protoc_insertion_point(field_set_allocated:quotation.OptionVolatility.type)
}

// optional uint32 trading_day = 2;
inline bool OptionVolatility::has_trading_day() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OptionVolatility::set_has_trading_day() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OptionVolatility::clear_has_trading_day() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OptionVolatility::clear_trading_day() {
  trading_day_ = 0u;
  clear_has_trading_day();
}
inline ::google::protobuf::uint32 OptionVolatility::trading_day() const {
  // @@protoc_insertion_point(field_get:quotation.OptionVolatility.trading_day)
  return trading_day_;
}
inline void OptionVolatility::set_trading_day(::google::protobuf::uint32 value) {
  set_has_trading_day();
  trading_day_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionVolatility.trading_day)
}

// required uint32 stamp = 3;
inline bool OptionVolatility::has_stamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OptionVolatility::set_has_stamp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OptionVolatility::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OptionVolatility::clear_stamp() {
  stamp_ = 0u;
  clear_has_stamp();
}
inline ::google::protobuf::uint32 OptionVolatility::stamp() const {
  // @@protoc_insertion_point(field_get:quotation.OptionVolatility.stamp)
  return stamp_;
}
inline void OptionVolatility::set_stamp(::google::protobuf::uint32 value) {
  set_has_stamp();
  stamp_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionVolatility.stamp)
}

// required string code = 4;
inline bool OptionVolatility::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptionVolatility::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OptionVolatility::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OptionVolatility::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& OptionVolatility::code() const {
  // @@protoc_insertion_point(field_get:quotation.OptionVolatility.code)
  return code_.GetNoArena();
}
inline void OptionVolatility::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.OptionVolatility.code)
}
#if LANG_CXX11
inline void OptionVolatility::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.OptionVolatility.code)
}
#endif
inline void OptionVolatility::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.OptionVolatility.code)
}
inline void OptionVolatility::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.OptionVolatility.code)
}
inline ::std::string* OptionVolatility::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:quotation.OptionVolatility.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionVolatility::release_code() {
  // @@protoc_insertion_point(field_release:quotation.OptionVolatility.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionVolatility::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:quotation.OptionVolatility.code)
}

// optional string name = 5;
inline bool OptionVolatility::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OptionVolatility::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OptionVolatility::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OptionVolatility::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& OptionVolatility::name() const {
  // @@protoc_insertion_point(field_get:quotation.OptionVolatility.name)
  return name_.GetNoArena();
}
inline void OptionVolatility::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.OptionVolatility.name)
}
#if LANG_CXX11
inline void OptionVolatility::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.OptionVolatility.name)
}
#endif
inline void OptionVolatility::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.OptionVolatility.name)
}
inline void OptionVolatility::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.OptionVolatility.name)
}
inline ::std::string* OptionVolatility::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:quotation.OptionVolatility.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionVolatility::release_name() {
  // @@protoc_insertion_point(field_release:quotation.OptionVolatility.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionVolatility::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:quotation.OptionVolatility.name)
}

// optional int64 price = 6;
inline bool OptionVolatility::has_price() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OptionVolatility::set_has_price() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OptionVolatility::clear_has_price() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OptionVolatility::clear_price() {
  price_ = GOOGLE_LONGLONG(0);
  clear_has_price();
}
inline ::google::protobuf::int64 OptionVolatility::price() const {
  // @@protoc_insertion_point(field_get:quotation.OptionVolatility.price)
  return price_;
}
inline void OptionVolatility::set_price(::google::protobuf::int64 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionVolatility.price)
}

// optional uint32 quote_time = 7;
inline bool OptionVolatility::has_quote_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OptionVolatility::set_has_quote_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OptionVolatility::clear_has_quote_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OptionVolatility::clear_quote_time() {
  quote_time_ = 0u;
  clear_has_quote_time();
}
inline ::google::protobuf::uint32 OptionVolatility::quote_time() const {
  // @@protoc_insertion_point(field_get:quotation.OptionVolatility.quote_time)
  return quote_time_;
}
inline void OptionVolatility::set_quote_time(::google::protobuf::uint32 value) {
  set_has_quote_time();
  quote_time_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionVolatility.quote_time)
}

// optional int32 cp_flag = 8;
inline bool OptionVolatility::has_cp_flag() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OptionVolatility::set_has_cp_flag() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OptionVolatility::clear_has_cp_flag() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OptionVolatility::clear_cp_flag() {
  cp_flag_ = 0;
  clear_has_cp_flag();
}
inline ::google::protobuf::int32 OptionVolatility::cp_flag() const {
  // @@protoc_insertion_point(field_get:quotation.OptionVolatility.cp_flag)
  return cp_flag_;
}
inline void OptionVolatility::set_cp_flag(::google::protobuf::int32 value) {
  set_has_cp_flag();
  cp_flag_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionVolatility.cp_flag)
}

// optional uint32 expire_date = 9;
inline bool OptionVolatility::has_expire_date() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OptionVolatility::set_has_expire_date() {
  _has_bits_[0] |= 0x00001000u;
}
inline void OptionVolatility::clear_has_expire_date() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void OptionVolatility::clear_expire_date() {
  expire_date_ = 0u;
  clear_has_expire_date();
}
inline ::google::protobuf::uint32 OptionVolatility::expire_date() const {
  // @@protoc_insertion_point(field_get:quotation.OptionVolatility.expire_date)
  return expire_date_;
}
inline void OptionVolatility::set_expire_date(::google::protobuf::uint32 value) {
  set_has_expire_date();
  expire_date_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionVolatility.expire_date)
}

// optional int64 exercise_price = 10;
inline bool OptionVolatility::has_exercise_price() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OptionVolatility::set_has_exercise_price() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OptionVolatility::clear_has_exercise_price() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OptionVolatility::clear_exercise_price() {
  exercise_price_ = GOOGLE_LONGLONG(0);
  clear_has_exercise_price();
}
inline ::google::protobuf::int64 OptionVolatility::exercise_price() const {
  // @@protoc_insertion_point(field_get:quotation.OptionVolatility.exercise_price)
  return exercise_price_;
}
inline void OptionVolatility::set_exercise_price(::google::protobuf::int64 value) {
  set_has_exercise_price();
  exercise_price_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionVolatility.exercise_price)
}

// optional int64 unit = 11;
inline bool OptionVolatility::has_unit() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OptionVolatility::set_has_unit() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OptionVolatility::clear_has_unit() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OptionVolatility::clear_unit() {
  unit_ = GOOGLE_LONGLONG(0);
  clear_has_unit();
}
inline ::google::protobuf::int64 OptionVolatility::unit() const {
  // @@protoc_insertion_point(field_get:quotation.OptionVolatility.unit)
  return unit_;
}
inline void OptionVolatility::set_unit(::google::protobuf::int64 value) {
  set_has_unit();
  unit_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionVolatility.unit)
}

// optional string underlying_code = 12;
inline bool OptionVolatility::has_underlying_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OptionVolatility::set_has_underlying_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OptionVolatility::clear_has_underlying_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OptionVolatility::clear_underlying_code() {
  underlying_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_underlying_code();
}
inline const ::std::string& OptionVolatility::underlying_code() const {
  // @@protoc_insertion_point(field_get:quotation.OptionVolatility.underlying_code)
  return underlying_code_.GetNoArena();
}
inline void OptionVolatility::set_underlying_code(const ::std::string& value) {
  set_has_underlying_code();
  underlying_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.OptionVolatility.underlying_code)
}
#if LANG_CXX11
inline void OptionVolatility::set_underlying_code(::std::string&& value) {
  set_has_underlying_code();
  underlying_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.OptionVolatility.underlying_code)
}
#endif
inline void OptionVolatility::set_underlying_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_underlying_code();
  underlying_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.OptionVolatility.underlying_code)
}
inline void OptionVolatility::set_underlying_code(const char* value, size_t size) {
  set_has_underlying_code();
  underlying_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.OptionVolatility.underlying_code)
}
inline ::std::string* OptionVolatility::mutable_underlying_code() {
  set_has_underlying_code();
  // @@protoc_insertion_point(field_mutable:quotation.OptionVolatility.underlying_code)
  return underlying_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionVolatility::release_underlying_code() {
  // @@protoc_insertion_point(field_release:quotation.OptionVolatility.underlying_code)
  if (!has_underlying_code()) {
    return NULL;
  }
  clear_has_underlying_code();
  return underlying_code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionVolatility::set_allocated_underlying_code(::std::string* underlying_code) {
  if (underlying_code != NULL) {
    set_has_underlying_code();
  } else {
    clear_has_underlying_code();
  }
  underlying_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), underlying_code);
  // @@protoc_insertion_point(field_set_allocated:quotation.OptionVolatility.underlying_code)
}

// optional int32 underlying_type = 13;
inline bool OptionVolatility::has_underlying_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void OptionVolatility::set_has_underlying_type() {
  _has_bits_[0] |= 0x00002000u;
}
inline void OptionVolatility::clear_has_underlying_type() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void OptionVolatility::clear_underlying_type() {
  underlying_type_ = 0;
  clear_has_underlying_type();
}
inline ::google::protobuf::int32 OptionVolatility::underlying_type() const {
  // @@protoc_insertion_point(field_get:quotation.OptionVolatility.underlying_type)
  return underlying_type_;
}
inline void OptionVolatility::set_underlying_type(::google::protobuf::int32 value) {
  set_has_underlying_type();
  underlying_type_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionVolatility.underlying_type)
}

// optional int64 underlying_price = 14;
inline bool OptionVolatility::has_underlying_price() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void OptionVolatility::set_has_underlying_price() {
  _has_bits_[0] |= 0x00004000u;
}
inline void OptionVolatility::clear_has_underlying_price() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void OptionVolatility::clear_underlying_price() {
  underlying_price_ = GOOGLE_LONGLONG(0);
  clear_has_underlying_price();
}
inline ::google::protobuf::int64 OptionVolatility::underlying_price() const {
  // @@protoc_insertion_point(field_get:quotation.OptionVolatility.underlying_price)
  return underlying_price_;
}
inline void OptionVolatility::set_underlying_price(::google::protobuf::int64 value) {
  set_has_underlying_price();
  underlying_price_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionVolatility.underlying_price)
}

// optional uint32 underlying_quote_time = 15;
inline bool OptionVolatility::has_underlying_quote_time() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void OptionVolatility::set_has_underlying_quote_time() {
  _has_bits_[0] |= 0x40000000u;
}
inline void OptionVolatility::clear_has_underlying_quote_time() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void OptionVolatility::clear_underlying_quote_time() {
  underlying_quote_time_ = 0u;
  clear_has_underlying_quote_time();
}
inline ::google::protobuf::uint32 OptionVolatility::underlying_quote_time() const {
  // @@protoc_insertion_point(field_get:quotation.OptionVolatility.underlying_quote_time)
  return underlying_quote_time_;
}
inline void OptionVolatility::set_underlying_quote_time(::google::protobuf::uint32 value) {
  set_has_underlying_quote_time();
  underlying_quote_time_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionVolatility.underlying_quote_time)
}

// optional double interest_rate = 16;
inline bool OptionVolatility::has_interest_rate() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void OptionVolatility::set_has_interest_rate() {
  _has_bits_[0] |= 0x00008000u;
}
inline void OptionVolatility::clear_has_interest_rate() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void OptionVolatility::clear_interest_rate() {
  interest_rate_ = 0;
  clear_has_interest_rate();
}
inline double OptionVolatility::interest_rate() const {
  // @@protoc_insertion_point(field_get:quotation.OptionVolatility.interest_rate)
  return interest_rate_;
}
inline void OptionVolatility::set_interest_rate(double value) {
  set_has_interest_rate();
  interest_rate_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionVolatility.interest_rate)
}

// optional double volatility = 17;
inline bool OptionVolatility::has_volatility() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void OptionVolatility::set_has_volatility() {
  _has_bits_[0] |= 0x00010000u;
}
inline void OptionVolatility::clear_has_volatility() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void OptionVolatility::clear_volatility() {
  volatility_ = 0;
  clear_has_volatility();
}
inline double OptionVolatility::volatility() const {
  // @@protoc_insertion_point(field_get:quotation.OptionVolatility.volatility)
  return volatility_;
}
inline void OptionVolatility::set_volatility(double value) {
  set_has_volatility();
  volatility_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionVolatility.volatility)
}

// optional int64 state = 18;
inline bool OptionVolatility::has_state() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void OptionVolatility::set_has_state() {
  _has_bits_[0] |= 0x00020000u;
}
inline void OptionVolatility::clear_has_state() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void OptionVolatility::clear_state() {
  state_ = GOOGLE_LONGLONG(0);
  clear_has_state();
}
inline ::google::protobuf::int64 OptionVolatility::state() const {
  // @@protoc_insertion_point(field_get:quotation.OptionVolatility.state)
  return state_;
}
inline void OptionVolatility::set_state(::google::protobuf::int64 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionVolatility.state)
}

// optional double implied_value = 19;
inline bool OptionVolatility::has_implied_value() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void OptionVolatility::set_has_implied_value() {
  _has_bits_[0] |= 0x00040000u;
}
inline void OptionVolatility::clear_has_implied_value() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void OptionVolatility::clear_implied_value() {
  implied_value_ = 0;
  clear_has_implied_value();
}
inline double OptionVolatility::implied_value() const {
  // @@protoc_insertion_point(field_get:quotation.OptionVolatility.implied_value)
  return implied_value_;
}
inline void OptionVolatility::set_implied_value(double value) {
  set_has_implied_value();
  implied_value_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionVolatility.implied_value)
}

// optional double implied_volatility = 20;
inline bool OptionVolatility::has_implied_volatility() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void OptionVolatility::set_has_implied_volatility() {
  _has_bits_[0] |= 0x00080000u;
}
inline void OptionVolatility::clear_has_implied_volatility() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void OptionVolatility::clear_implied_volatility() {
  implied_volatility_ = 0;
  clear_has_implied_volatility();
}
inline double OptionVolatility::implied_volatility() const {
  // @@protoc_insertion_point(field_get:quotation.OptionVolatility.implied_volatility)
  return implied_volatility_;
}
inline void OptionVolatility::set_implied_volatility(double value) {
  set_has_implied_volatility();
  implied_volatility_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionVolatility.implied_volatility)
}

// optional double delta = 21;
inline bool OptionVolatility::has_delta() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void OptionVolatility::set_has_delta() {
  _has_bits_[0] |= 0x00100000u;
}
inline void OptionVolatility::clear_has_delta() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void OptionVolatility::clear_delta() {
  delta_ = 0;
  clear_has_delta();
}
inline double OptionVolatility::delta() const {
  // @@protoc_insertion_point(field_get:quotation.OptionVolatility.delta)
  return delta_;
}
inline void OptionVolatility::set_delta(double value) {
  set_has_delta();
  delta_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionVolatility.delta)
}

// optional double dollar_delta = 22;
inline bool OptionVolatility::has_dollar_delta() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void OptionVolatility::set_has_dollar_delta() {
  _has_bits_[0] |= 0x00200000u;
}
inline void OptionVolatility::clear_has_dollar_delta() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void OptionVolatility::clear_dollar_delta() {
  dollar_delta_ = 0;
  clear_has_dollar_delta();
}
inline double OptionVolatility::dollar_delta() const {
  // @@protoc_insertion_point(field_get:quotation.OptionVolatility.dollar_delta)
  return dollar_delta_;
}
inline void OptionVolatility::set_dollar_delta(double value) {
  set_has_dollar_delta();
  dollar_delta_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionVolatility.dollar_delta)
}

// optional double theta = 23;
inline bool OptionVolatility::has_theta() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void OptionVolatility::set_has_theta() {
  _has_bits_[0] |= 0x00400000u;
}
inline void OptionVolatility::clear_has_theta() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void OptionVolatility::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
inline double OptionVolatility::theta() const {
  // @@protoc_insertion_point(field_get:quotation.OptionVolatility.theta)
  return theta_;
}
inline void OptionVolatility::set_theta(double value) {
  set_has_theta();
  theta_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionVolatility.theta)
}

// optional double dollar_theta = 24;
inline bool OptionVolatility::has_dollar_theta() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void OptionVolatility::set_has_dollar_theta() {
  _has_bits_[0] |= 0x00800000u;
}
inline void OptionVolatility::clear_has_dollar_theta() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void OptionVolatility::clear_dollar_theta() {
  dollar_theta_ = 0;
  clear_has_dollar_theta();
}
inline double OptionVolatility::dollar_theta() const {
  // @@protoc_insertion_point(field_get:quotation.OptionVolatility.dollar_theta)
  return dollar_theta_;
}
inline void OptionVolatility::set_dollar_theta(double value) {
  set_has_dollar_theta();
  dollar_theta_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionVolatility.dollar_theta)
}

// optional double gamma = 25;
inline bool OptionVolatility::has_gamma() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void OptionVolatility::set_has_gamma() {
  _has_bits_[0] |= 0x01000000u;
}
inline void OptionVolatility::clear_has_gamma() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void OptionVolatility::clear_gamma() {
  gamma_ = 0;
  clear_has_gamma();
}
inline double OptionVolatility::gamma() const {
  // @@protoc_insertion_point(field_get:quotation.OptionVolatility.gamma)
  return gamma_;
}
inline void OptionVolatility::set_gamma(double value) {
  set_has_gamma();
  gamma_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionVolatility.gamma)
}

// optional double dollar_gamma = 26;
inline bool OptionVolatility::has_dollar_gamma() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void OptionVolatility::set_has_dollar_gamma() {
  _has_bits_[0] |= 0x02000000u;
}
inline void OptionVolatility::clear_has_dollar_gamma() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void OptionVolatility::clear_dollar_gamma() {
  dollar_gamma_ = 0;
  clear_has_dollar_gamma();
}
inline double OptionVolatility::dollar_gamma() const {
  // @@protoc_insertion_point(field_get:quotation.OptionVolatility.dollar_gamma)
  return dollar_gamma_;
}
inline void OptionVolatility::set_dollar_gamma(double value) {
  set_has_dollar_gamma();
  dollar_gamma_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionVolatility.dollar_gamma)
}

// optional double vega = 27;
inline bool OptionVolatility::has_vega() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void OptionVolatility::set_has_vega() {
  _has_bits_[0] |= 0x04000000u;
}
inline void OptionVolatility::clear_has_vega() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void OptionVolatility::clear_vega() {
  vega_ = 0;
  clear_has_vega();
}
inline double OptionVolatility::vega() const {
  // @@protoc_insertion_point(field_get:quotation.OptionVolatility.vega)
  return vega_;
}
inline void OptionVolatility::set_vega(double value) {
  set_has_vega();
  vega_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionVolatility.vega)
}

// optional double dollar_vega = 28;
inline bool OptionVolatility::has_dollar_vega() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void OptionVolatility::set_has_dollar_vega() {
  _has_bits_[0] |= 0x08000000u;
}
inline void OptionVolatility::clear_has_dollar_vega() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void OptionVolatility::clear_dollar_vega() {
  dollar_vega_ = 0;
  clear_has_dollar_vega();
}
inline double OptionVolatility::dollar_vega() const {
  // @@protoc_insertion_point(field_get:quotation.OptionVolatility.dollar_vega)
  return dollar_vega_;
}
inline void OptionVolatility::set_dollar_vega(double value) {
  set_has_dollar_vega();
  dollar_vega_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionVolatility.dollar_vega)
}

// optional double rho = 29;
inline bool OptionVolatility::has_rho() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void OptionVolatility::set_has_rho() {
  _has_bits_[0] |= 0x10000000u;
}
inline void OptionVolatility::clear_has_rho() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void OptionVolatility::clear_rho() {
  rho_ = 0;
  clear_has_rho();
}
inline double OptionVolatility::rho() const {
  // @@protoc_insertion_point(field_get:quotation.OptionVolatility.rho)
  return rho_;
}
inline void OptionVolatility::set_rho(double value) {
  set_has_rho();
  rho_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionVolatility.rho)
}

// optional double dollar_rho = 30;
inline bool OptionVolatility::has_dollar_rho() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void OptionVolatility::set_has_dollar_rho() {
  _has_bits_[0] |= 0x20000000u;
}
inline void OptionVolatility::clear_has_dollar_rho() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void OptionVolatility::clear_dollar_rho() {
  dollar_rho_ = 0;
  clear_has_dollar_rho();
}
inline double OptionVolatility::dollar_rho() const {
  // @@protoc_insertion_point(field_get:quotation.OptionVolatility.dollar_rho)
  return dollar_rho_;
}
inline void OptionVolatility::set_dollar_rho(double value) {
  set_has_dollar_rho();
  dollar_rho_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionVolatility.dollar_rho)
}

// optional string msg = 31;
inline bool OptionVolatility::has_msg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OptionVolatility::set_has_msg() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OptionVolatility::clear_has_msg() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OptionVolatility::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& OptionVolatility::msg() const {
  // @@protoc_insertion_point(field_get:quotation.OptionVolatility.msg)
  return msg_.GetNoArena();
}
inline void OptionVolatility::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.OptionVolatility.msg)
}
#if LANG_CXX11
inline void OptionVolatility::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.OptionVolatility.msg)
}
#endif
inline void OptionVolatility::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.OptionVolatility.msg)
}
inline void OptionVolatility::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.OptionVolatility.msg)
}
inline ::std::string* OptionVolatility::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:quotation.OptionVolatility.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionVolatility::release_msg() {
  // @@protoc_insertion_point(field_release:quotation.OptionVolatility.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionVolatility::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:quotation.OptionVolatility.msg)
}

// -------------------------------------------------------------------

// IndexParam

// optional string type = 1 [default = ""];
inline bool IndexParam::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndexParam::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndexParam::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndexParam::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& IndexParam::type() const {
  // @@protoc_insertion_point(field_get:quotation.IndexParam.type)
  return type_.GetNoArena();
}
inline void IndexParam::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.IndexParam.type)
}
#if LANG_CXX11
inline void IndexParam::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.IndexParam.type)
}
#endif
inline void IndexParam::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.IndexParam.type)
}
inline void IndexParam::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.IndexParam.type)
}
inline ::std::string* IndexParam::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:quotation.IndexParam.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IndexParam::release_type() {
  // @@protoc_insertion_point(field_release:quotation.IndexParam.type)
  if (!has_type()) {
    return NULL;
  }
  clear_has_type();
  return type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexParam::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:quotation.IndexParam.type)
}

// optional uint32 trading_day = 2;
inline bool IndexParam::has_trading_day() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndexParam::set_has_trading_day() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndexParam::clear_has_trading_day() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndexParam::clear_trading_day() {
  trading_day_ = 0u;
  clear_has_trading_day();
}
inline ::google::protobuf::uint32 IndexParam::trading_day() const {
  // @@protoc_insertion_point(field_get:quotation.IndexParam.trading_day)
  return trading_day_;
}
inline void IndexParam::set_trading_day(::google::protobuf::uint32 value) {
  set_has_trading_day();
  trading_day_ = value;
  // @@protoc_insertion_point(field_set:quotation.IndexParam.trading_day)
}

// required uint32 stamp = 3;
inline bool IndexParam::has_stamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndexParam::set_has_stamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndexParam::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndexParam::clear_stamp() {
  stamp_ = 0u;
  clear_has_stamp();
}
inline ::google::protobuf::uint32 IndexParam::stamp() const {
  // @@protoc_insertion_point(field_get:quotation.IndexParam.stamp)
  return stamp_;
}
inline void IndexParam::set_stamp(::google::protobuf::uint32 value) {
  set_has_stamp();
  stamp_ = value;
  // @@protoc_insertion_point(field_set:quotation.IndexParam.stamp)
}

// optional double weight = 4;
inline bool IndexParam::has_weight() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IndexParam::set_has_weight() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IndexParam::clear_has_weight() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IndexParam::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
inline double IndexParam::weight() const {
  // @@protoc_insertion_point(field_get:quotation.IndexParam.weight)
  return weight_;
}
inline void IndexParam::set_weight(double value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:quotation.IndexParam.weight)
}

// optional int64 calc_shares = 5;
inline bool IndexParam::has_calc_shares() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IndexParam::set_has_calc_shares() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IndexParam::clear_has_calc_shares() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IndexParam::clear_calc_shares() {
  calc_shares_ = GOOGLE_LONGLONG(0);
  clear_has_calc_shares();
}
inline ::google::protobuf::int64 IndexParam::calc_shares() const {
  // @@protoc_insertion_point(field_get:quotation.IndexParam.calc_shares)
  return calc_shares_;
}
inline void IndexParam::set_calc_shares(::google::protobuf::int64 value) {
  set_has_calc_shares();
  calc_shares_ = value;
  // @@protoc_insertion_point(field_set:quotation.IndexParam.calc_shares)
}

// optional int64 total_shares = 6;
inline bool IndexParam::has_total_shares() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IndexParam::set_has_total_shares() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IndexParam::clear_has_total_shares() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IndexParam::clear_total_shares() {
  total_shares_ = GOOGLE_LONGLONG(0);
  clear_has_total_shares();
}
inline ::google::protobuf::int64 IndexParam::total_shares() const {
  // @@protoc_insertion_point(field_get:quotation.IndexParam.total_shares)
  return total_shares_;
}
inline void IndexParam::set_total_shares(::google::protobuf::int64 value) {
  set_has_total_shares();
  total_shares_ = value;
  // @@protoc_insertion_point(field_set:quotation.IndexParam.total_shares)
}

// required string code = 7;
inline bool IndexParam::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndexParam::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndexParam::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndexParam::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& IndexParam::code() const {
  // @@protoc_insertion_point(field_get:quotation.IndexParam.code)
  return code_.GetNoArena();
}
inline void IndexParam::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.IndexParam.code)
}
#if LANG_CXX11
inline void IndexParam::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.IndexParam.code)
}
#endif
inline void IndexParam::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.IndexParam.code)
}
inline void IndexParam::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.IndexParam.code)
}
inline ::std::string* IndexParam::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:quotation.IndexParam.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IndexParam::release_code() {
  // @@protoc_insertion_point(field_release:quotation.IndexParam.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexParam::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:quotation.IndexParam.code)
}

// optional string effective_date = 8;
inline bool IndexParam::has_effective_date() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndexParam::set_has_effective_date() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndexParam::clear_has_effective_date() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndexParam::clear_effective_date() {
  effective_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_effective_date();
}
inline const ::std::string& IndexParam::effective_date() const {
  // @@protoc_insertion_point(field_get:quotation.IndexParam.effective_date)
  return effective_date_.GetNoArena();
}
inline void IndexParam::set_effective_date(const ::std::string& value) {
  set_has_effective_date();
  effective_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.IndexParam.effective_date)
}
#if LANG_CXX11
inline void IndexParam::set_effective_date(::std::string&& value) {
  set_has_effective_date();
  effective_date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.IndexParam.effective_date)
}
#endif
inline void IndexParam::set_effective_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_effective_date();
  effective_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.IndexParam.effective_date)
}
inline void IndexParam::set_effective_date(const char* value, size_t size) {
  set_has_effective_date();
  effective_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.IndexParam.effective_date)
}
inline ::std::string* IndexParam::mutable_effective_date() {
  set_has_effective_date();
  // @@protoc_insertion_point(field_mutable:quotation.IndexParam.effective_date)
  return effective_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IndexParam::release_effective_date() {
  // @@protoc_insertion_point(field_release:quotation.IndexParam.effective_date)
  if (!has_effective_date()) {
    return NULL;
  }
  clear_has_effective_date();
  return effective_date_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexParam::set_allocated_effective_date(::std::string* effective_date) {
  if (effective_date != NULL) {
    set_has_effective_date();
  } else {
    clear_has_effective_date();
  }
  effective_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), effective_date);
  // @@protoc_insertion_point(field_set_allocated:quotation.IndexParam.effective_date)
}

// optional double c_factor = 9;
inline bool IndexParam::has_c_factor() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IndexParam::set_has_c_factor() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IndexParam::clear_has_c_factor() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IndexParam::clear_c_factor() {
  c_factor_ = 0;
  clear_has_c_factor();
}
inline double IndexParam::c_factor() const {
  // @@protoc_insertion_point(field_get:quotation.IndexParam.c_factor)
  return c_factor_;
}
inline void IndexParam::set_c_factor(double value) {
  set_has_c_factor();
  c_factor_ = value;
  // @@protoc_insertion_point(field_set:quotation.IndexParam.c_factor)
}

// optional double pre_close = 10;
inline bool IndexParam::has_pre_close() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IndexParam::set_has_pre_close() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IndexParam::clear_has_pre_close() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IndexParam::clear_pre_close() {
  pre_close_ = 0;
  clear_has_pre_close();
}
inline double IndexParam::pre_close() const {
  // @@protoc_insertion_point(field_get:quotation.IndexParam.pre_close)
  return pre_close_;
}
inline void IndexParam::set_pre_close(double value) {
  set_has_pre_close();
  pre_close_ = value;
  // @@protoc_insertion_point(field_set:quotation.IndexParam.pre_close)
}

// optional double adj_pre_close = 11;
inline bool IndexParam::has_adj_pre_close() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void IndexParam::set_has_adj_pre_close() {
  _has_bits_[0] |= 0x00000400u;
}
inline void IndexParam::clear_has_adj_pre_close() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void IndexParam::clear_adj_pre_close() {
  adj_pre_close_ = 0;
  clear_has_adj_pre_close();
}
inline double IndexParam::adj_pre_close() const {
  // @@protoc_insertion_point(field_get:quotation.IndexParam.adj_pre_close)
  return adj_pre_close_;
}
inline void IndexParam::set_adj_pre_close(double value) {
  set_has_adj_pre_close();
  adj_pre_close_ = value;
  // @@protoc_insertion_point(field_set:quotation.IndexParam.adj_pre_close)
}

// -------------------------------------------------------------------

// SecurityOrderInfo

// optional string type = 1 [default = ""];
inline bool SecurityOrderInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SecurityOrderInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SecurityOrderInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SecurityOrderInfo::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& SecurityOrderInfo::type() const {
  // @@protoc_insertion_point(field_get:quotation.SecurityOrderInfo.type)
  return type_.GetNoArena();
}
inline void SecurityOrderInfo::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.SecurityOrderInfo.type)
}
#if LANG_CXX11
inline void SecurityOrderInfo::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.SecurityOrderInfo.type)
}
#endif
inline void SecurityOrderInfo::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.SecurityOrderInfo.type)
}
inline void SecurityOrderInfo::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.SecurityOrderInfo.type)
}
inline ::std::string* SecurityOrderInfo::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:quotation.SecurityOrderInfo.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SecurityOrderInfo::release_type() {
  // @@protoc_insertion_point(field_release:quotation.SecurityOrderInfo.type)
  if (!has_type()) {
    return NULL;
  }
  clear_has_type();
  return type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SecurityOrderInfo::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:quotation.SecurityOrderInfo.type)
}

// optional uint32 trading_day = 2;
inline bool SecurityOrderInfo::has_trading_day() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SecurityOrderInfo::set_has_trading_day() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SecurityOrderInfo::clear_has_trading_day() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SecurityOrderInfo::clear_trading_day() {
  trading_day_ = 0u;
  clear_has_trading_day();
}
inline ::google::protobuf::uint32 SecurityOrderInfo::trading_day() const {
  // @@protoc_insertion_point(field_get:quotation.SecurityOrderInfo.trading_day)
  return trading_day_;
}
inline void SecurityOrderInfo::set_trading_day(::google::protobuf::uint32 value) {
  set_has_trading_day();
  trading_day_ = value;
  // @@protoc_insertion_point(field_set:quotation.SecurityOrderInfo.trading_day)
}

// required uint32 stamp = 3;
inline bool SecurityOrderInfo::has_stamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SecurityOrderInfo::set_has_stamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SecurityOrderInfo::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SecurityOrderInfo::clear_stamp() {
  stamp_ = 0u;
  clear_has_stamp();
}
inline ::google::protobuf::uint32 SecurityOrderInfo::stamp() const {
  // @@protoc_insertion_point(field_get:quotation.SecurityOrderInfo.stamp)
  return stamp_;
}
inline void SecurityOrderInfo::set_stamp(::google::protobuf::uint32 value) {
  set_has_stamp();
  stamp_ = value;
  // @@protoc_insertion_point(field_set:quotation.SecurityOrderInfo.stamp)
}

// required string stkcode = 4;
inline bool SecurityOrderInfo::has_stkcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SecurityOrderInfo::set_has_stkcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SecurityOrderInfo::clear_has_stkcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SecurityOrderInfo::clear_stkcode() {
  stkcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stkcode();
}
inline const ::std::string& SecurityOrderInfo::stkcode() const {
  // @@protoc_insertion_point(field_get:quotation.SecurityOrderInfo.stkcode)
  return stkcode_.GetNoArena();
}
inline void SecurityOrderInfo::set_stkcode(const ::std::string& value) {
  set_has_stkcode();
  stkcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.SecurityOrderInfo.stkcode)
}
#if LANG_CXX11
inline void SecurityOrderInfo::set_stkcode(::std::string&& value) {
  set_has_stkcode();
  stkcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.SecurityOrderInfo.stkcode)
}
#endif
inline void SecurityOrderInfo::set_stkcode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_stkcode();
  stkcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.SecurityOrderInfo.stkcode)
}
inline void SecurityOrderInfo::set_stkcode(const char* value, size_t size) {
  set_has_stkcode();
  stkcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.SecurityOrderInfo.stkcode)
}
inline ::std::string* SecurityOrderInfo::mutable_stkcode() {
  set_has_stkcode();
  // @@protoc_insertion_point(field_mutable:quotation.SecurityOrderInfo.stkcode)
  return stkcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SecurityOrderInfo::release_stkcode() {
  // @@protoc_insertion_point(field_release:quotation.SecurityOrderInfo.stkcode)
  if (!has_stkcode()) {
    return NULL;
  }
  clear_has_stkcode();
  return stkcode_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SecurityOrderInfo::set_allocated_stkcode(::std::string* stkcode) {
  if (stkcode != NULL) {
    set_has_stkcode();
  } else {
    clear_has_stkcode();
  }
  stkcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stkcode);
  // @@protoc_insertion_point(field_set_allocated:quotation.SecurityOrderInfo.stkcode)
}

// required int64 order_qty = 5;
inline bool SecurityOrderInfo::has_order_qty() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SecurityOrderInfo::set_has_order_qty() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SecurityOrderInfo::clear_has_order_qty() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SecurityOrderInfo::clear_order_qty() {
  order_qty_ = GOOGLE_LONGLONG(0);
  clear_has_order_qty();
}
inline ::google::protobuf::int64 SecurityOrderInfo::order_qty() const {
  // @@protoc_insertion_point(field_get:quotation.SecurityOrderInfo.order_qty)
  return order_qty_;
}
inline void SecurityOrderInfo::set_order_qty(::google::protobuf::int64 value) {
  set_has_order_qty();
  order_qty_ = value;
  // @@protoc_insertion_point(field_set:quotation.SecurityOrderInfo.order_qty)
}

// required int64 match_qty = 6;
inline bool SecurityOrderInfo::has_match_qty() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SecurityOrderInfo::set_has_match_qty() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SecurityOrderInfo::clear_has_match_qty() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SecurityOrderInfo::clear_match_qty() {
  match_qty_ = GOOGLE_LONGLONG(0);
  clear_has_match_qty();
}
inline ::google::protobuf::int64 SecurityOrderInfo::match_qty() const {
  // @@protoc_insertion_point(field_get:quotation.SecurityOrderInfo.match_qty)
  return match_qty_;
}
inline void SecurityOrderInfo::set_match_qty(::google::protobuf::int64 value) {
  set_has_match_qty();
  match_qty_ = value;
  // @@protoc_insertion_point(field_set:quotation.SecurityOrderInfo.match_qty)
}

// required int64 order_price = 7;
inline bool SecurityOrderInfo::has_order_price() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SecurityOrderInfo::set_has_order_price() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SecurityOrderInfo::clear_has_order_price() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SecurityOrderInfo::clear_order_price() {
  order_price_ = GOOGLE_LONGLONG(0);
  clear_has_order_price();
}
inline ::google::protobuf::int64 SecurityOrderInfo::order_price() const {
  // @@protoc_insertion_point(field_get:quotation.SecurityOrderInfo.order_price)
  return order_price_;
}
inline void SecurityOrderInfo::set_order_price(::google::protobuf::int64 value) {
  set_has_order_price();
  order_price_ = value;
  // @@protoc_insertion_point(field_set:quotation.SecurityOrderInfo.order_price)
}

// required double match_amount = 8 [default = 0];
inline bool SecurityOrderInfo::has_match_amount() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SecurityOrderInfo::set_has_match_amount() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SecurityOrderInfo::clear_has_match_amount() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SecurityOrderInfo::clear_match_amount() {
  match_amount_ = 0;
  clear_has_match_amount();
}
inline double SecurityOrderInfo::match_amount() const {
  // @@protoc_insertion_point(field_get:quotation.SecurityOrderInfo.match_amount)
  return match_amount_;
}
inline void SecurityOrderInfo::set_match_amount(double value) {
  set_has_match_amount();
  match_amount_ = value;
  // @@protoc_insertion_point(field_set:quotation.SecurityOrderInfo.match_amount)
}

// required double clear_amount = 9 [default = 0];
inline bool SecurityOrderInfo::has_clear_amount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SecurityOrderInfo::set_has_clear_amount() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SecurityOrderInfo::clear_has_clear_amount() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SecurityOrderInfo::clear_clear_amount() {
  clear_amount_ = 0;
  clear_has_clear_amount();
}
inline double SecurityOrderInfo::clear_amount() const {
  // @@protoc_insertion_point(field_get:quotation.SecurityOrderInfo.clear_amount)
  return clear_amount_;
}
inline void SecurityOrderInfo::set_clear_amount(double value) {
  set_has_clear_amount();
  clear_amount_ = value;
  // @@protoc_insertion_point(field_set:quotation.SecurityOrderInfo.clear_amount)
}

// optional double match_price = 10 [default = 0];
inline bool SecurityOrderInfo::has_match_price() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SecurityOrderInfo::set_has_match_price() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SecurityOrderInfo::clear_has_match_price() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SecurityOrderInfo::clear_match_price() {
  match_price_ = 0;
  clear_has_match_price();
}
inline double SecurityOrderInfo::match_price() const {
  // @@protoc_insertion_point(field_get:quotation.SecurityOrderInfo.match_price)
  return match_price_;
}
inline void SecurityOrderInfo::set_match_price(double value) {
  set_has_match_price();
  match_price_ = value;
  // @@protoc_insertion_point(field_set:quotation.SecurityOrderInfo.match_price)
}

// optional string last_match_id = 11 [default = ""];
inline bool SecurityOrderInfo::has_last_match_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SecurityOrderInfo::set_has_last_match_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SecurityOrderInfo::clear_has_last_match_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SecurityOrderInfo::clear_last_match_id() {
  last_match_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_last_match_id();
}
inline const ::std::string& SecurityOrderInfo::last_match_id() const {
  // @@protoc_insertion_point(field_get:quotation.SecurityOrderInfo.last_match_id)
  return last_match_id_.GetNoArena();
}
inline void SecurityOrderInfo::set_last_match_id(const ::std::string& value) {
  set_has_last_match_id();
  last_match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.SecurityOrderInfo.last_match_id)
}
#if LANG_CXX11
inline void SecurityOrderInfo::set_last_match_id(::std::string&& value) {
  set_has_last_match_id();
  last_match_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.SecurityOrderInfo.last_match_id)
}
#endif
inline void SecurityOrderInfo::set_last_match_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_last_match_id();
  last_match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.SecurityOrderInfo.last_match_id)
}
inline void SecurityOrderInfo::set_last_match_id(const char* value, size_t size) {
  set_has_last_match_id();
  last_match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.SecurityOrderInfo.last_match_id)
}
inline ::std::string* SecurityOrderInfo::mutable_last_match_id() {
  set_has_last_match_id();
  // @@protoc_insertion_point(field_mutable:quotation.SecurityOrderInfo.last_match_id)
  return last_match_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SecurityOrderInfo::release_last_match_id() {
  // @@protoc_insertion_point(field_release:quotation.SecurityOrderInfo.last_match_id)
  if (!has_last_match_id()) {
    return NULL;
  }
  clear_has_last_match_id();
  return last_match_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SecurityOrderInfo::set_allocated_last_match_id(::std::string* last_match_id) {
  if (last_match_id != NULL) {
    set_has_last_match_id();
  } else {
    clear_has_last_match_id();
  }
  last_match_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_match_id);
  // @@protoc_insertion_point(field_set_allocated:quotation.SecurityOrderInfo.last_match_id)
}

// -------------------------------------------------------------------

// PublicOrderData

// optional string type = 1 [default = "D"];
inline bool PublicOrderData::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PublicOrderData::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PublicOrderData::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PublicOrderData::clear_type() {
  type_.ClearToDefaultNoArena(&::quotation::PublicOrderData::_i_give_permission_to_break_this_code_default_type_.get());
  clear_has_type();
}
inline const ::std::string& PublicOrderData::type() const {
  // @@protoc_insertion_point(field_get:quotation.PublicOrderData.type)
  return type_.GetNoArena();
}
inline void PublicOrderData::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::quotation::PublicOrderData::_i_give_permission_to_break_this_code_default_type_.get(), value);
  // @@protoc_insertion_point(field_set:quotation.PublicOrderData.type)
}
#if LANG_CXX11
inline void PublicOrderData::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::quotation::PublicOrderData::_i_give_permission_to_break_this_code_default_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.PublicOrderData.type)
}
#endif
inline void PublicOrderData::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::quotation::PublicOrderData::_i_give_permission_to_break_this_code_default_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.PublicOrderData.type)
}
inline void PublicOrderData::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::quotation::PublicOrderData::_i_give_permission_to_break_this_code_default_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.PublicOrderData.type)
}
inline ::std::string* PublicOrderData::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:quotation.PublicOrderData.type)
  return type_.MutableNoArena(&::quotation::PublicOrderData::_i_give_permission_to_break_this_code_default_type_.get());
}
inline ::std::string* PublicOrderData::release_type() {
  // @@protoc_insertion_point(field_release:quotation.PublicOrderData.type)
  if (!has_type()) {
    return NULL;
  }
  clear_has_type();
  return type_.ReleaseNonDefaultNoArena(&::quotation::PublicOrderData::_i_give_permission_to_break_this_code_default_type_.get());
}
inline void PublicOrderData::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::quotation::PublicOrderData::_i_give_permission_to_break_this_code_default_type_.get(), type);
  // @@protoc_insertion_point(field_set_allocated:quotation.PublicOrderData.type)
}

// optional uint32 trading_day = 2;
inline bool PublicOrderData::has_trading_day() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PublicOrderData::set_has_trading_day() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PublicOrderData::clear_has_trading_day() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PublicOrderData::clear_trading_day() {
  trading_day_ = 0u;
  clear_has_trading_day();
}
inline ::google::protobuf::uint32 PublicOrderData::trading_day() const {
  // @@protoc_insertion_point(field_get:quotation.PublicOrderData.trading_day)
  return trading_day_;
}
inline void PublicOrderData::set_trading_day(::google::protobuf::uint32 value) {
  set_has_trading_day();
  trading_day_ = value;
  // @@protoc_insertion_point(field_set:quotation.PublicOrderData.trading_day)
}

// required uint32 stamp = 3;
inline bool PublicOrderData::has_stamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PublicOrderData::set_has_stamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PublicOrderData::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PublicOrderData::clear_stamp() {
  stamp_ = 0u;
  clear_has_stamp();
}
inline ::google::protobuf::uint32 PublicOrderData::stamp() const {
  // @@protoc_insertion_point(field_get:quotation.PublicOrderData.stamp)
  return stamp_;
}
inline void PublicOrderData::set_stamp(::google::protobuf::uint32 value) {
  set_has_stamp();
  stamp_ = value;
  // @@protoc_insertion_point(field_set:quotation.PublicOrderData.stamp)
}

// optional string code = 4;
inline bool PublicOrderData::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PublicOrderData::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PublicOrderData::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PublicOrderData::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& PublicOrderData::code() const {
  // @@protoc_insertion_point(field_get:quotation.PublicOrderData.code)
  return code_.GetNoArena();
}
inline void PublicOrderData::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.PublicOrderData.code)
}
#if LANG_CXX11
inline void PublicOrderData::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.PublicOrderData.code)
}
#endif
inline void PublicOrderData::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.PublicOrderData.code)
}
inline void PublicOrderData::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.PublicOrderData.code)
}
inline ::std::string* PublicOrderData::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:quotation.PublicOrderData.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PublicOrderData::release_code() {
  // @@protoc_insertion_point(field_release:quotation.PublicOrderData.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PublicOrderData::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:quotation.PublicOrderData.code)
}

// optional int64 order_day = 5;
inline bool PublicOrderData::has_order_day() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PublicOrderData::set_has_order_day() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PublicOrderData::clear_has_order_day() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PublicOrderData::clear_order_day() {
  order_day_ = GOOGLE_LONGLONG(0);
  clear_has_order_day();
}
inline ::google::protobuf::int64 PublicOrderData::order_day() const {
  // @@protoc_insertion_point(field_get:quotation.PublicOrderData.order_day)
  return order_day_;
}
inline void PublicOrderData::set_order_day(::google::protobuf::int64 value) {
  set_has_order_day();
  order_day_ = value;
  // @@protoc_insertion_point(field_set:quotation.PublicOrderData.order_day)
}

// optional int64 order_time = 6;
inline bool PublicOrderData::has_order_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PublicOrderData::set_has_order_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PublicOrderData::clear_has_order_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PublicOrderData::clear_order_time() {
  order_time_ = GOOGLE_LONGLONG(0);
  clear_has_order_time();
}
inline ::google::protobuf::int64 PublicOrderData::order_time() const {
  // @@protoc_insertion_point(field_get:quotation.PublicOrderData.order_time)
  return order_time_;
}
inline void PublicOrderData::set_order_time(::google::protobuf::int64 value) {
  set_has_order_time();
  order_time_ = value;
  // @@protoc_insertion_point(field_set:quotation.PublicOrderData.order_time)
}

// optional string order_no = 7;
inline bool PublicOrderData::has_order_no() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PublicOrderData::set_has_order_no() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PublicOrderData::clear_has_order_no() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PublicOrderData::clear_order_no() {
  order_no_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_no();
}
inline const ::std::string& PublicOrderData::order_no() const {
  // @@protoc_insertion_point(field_get:quotation.PublicOrderData.order_no)
  return order_no_.GetNoArena();
}
inline void PublicOrderData::set_order_no(const ::std::string& value) {
  set_has_order_no();
  order_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.PublicOrderData.order_no)
}
#if LANG_CXX11
inline void PublicOrderData::set_order_no(::std::string&& value) {
  set_has_order_no();
  order_no_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.PublicOrderData.order_no)
}
#endif
inline void PublicOrderData::set_order_no(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_no();
  order_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.PublicOrderData.order_no)
}
inline void PublicOrderData::set_order_no(const char* value, size_t size) {
  set_has_order_no();
  order_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.PublicOrderData.order_no)
}
inline ::std::string* PublicOrderData::mutable_order_no() {
  set_has_order_no();
  // @@protoc_insertion_point(field_mutable:quotation.PublicOrderData.order_no)
  return order_no_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PublicOrderData::release_order_no() {
  // @@protoc_insertion_point(field_release:quotation.PublicOrderData.order_no)
  if (!has_order_no()) {
    return NULL;
  }
  clear_has_order_no();
  return order_no_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PublicOrderData::set_allocated_order_no(::std::string* order_no) {
  if (order_no != NULL) {
    set_has_order_no();
  } else {
    clear_has_order_no();
  }
  order_no_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_no);
  // @@protoc_insertion_point(field_set_allocated:quotation.PublicOrderData.order_no)
}

// optional int64 order_price = 8;
inline bool PublicOrderData::has_order_price() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PublicOrderData::set_has_order_price() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PublicOrderData::clear_has_order_price() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PublicOrderData::clear_order_price() {
  order_price_ = GOOGLE_LONGLONG(0);
  clear_has_order_price();
}
inline ::google::protobuf::int64 PublicOrderData::order_price() const {
  // @@protoc_insertion_point(field_get:quotation.PublicOrderData.order_price)
  return order_price_;
}
inline void PublicOrderData::set_order_price(::google::protobuf::int64 value) {
  set_has_order_price();
  order_price_ = value;
  // @@protoc_insertion_point(field_set:quotation.PublicOrderData.order_price)
}

// optional int64 order_qty = 9;
inline bool PublicOrderData::has_order_qty() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PublicOrderData::set_has_order_qty() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PublicOrderData::clear_has_order_qty() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PublicOrderData::clear_order_qty() {
  order_qty_ = GOOGLE_LONGLONG(0);
  clear_has_order_qty();
}
inline ::google::protobuf::int64 PublicOrderData::order_qty() const {
  // @@protoc_insertion_point(field_get:quotation.PublicOrderData.order_qty)
  return order_qty_;
}
inline void PublicOrderData::set_order_qty(::google::protobuf::int64 value) {
  set_has_order_qty();
  order_qty_ = value;
  // @@protoc_insertion_point(field_set:quotation.PublicOrderData.order_qty)
}

// optional string order_type = 10;
inline bool PublicOrderData::has_order_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PublicOrderData::set_has_order_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PublicOrderData::clear_has_order_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PublicOrderData::clear_order_type() {
  order_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_type();
}
inline const ::std::string& PublicOrderData::order_type() const {
  // @@protoc_insertion_point(field_get:quotation.PublicOrderData.order_type)
  return order_type_.GetNoArena();
}
inline void PublicOrderData::set_order_type(const ::std::string& value) {
  set_has_order_type();
  order_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.PublicOrderData.order_type)
}
#if LANG_CXX11
inline void PublicOrderData::set_order_type(::std::string&& value) {
  set_has_order_type();
  order_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.PublicOrderData.order_type)
}
#endif
inline void PublicOrderData::set_order_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_type();
  order_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.PublicOrderData.order_type)
}
inline void PublicOrderData::set_order_type(const char* value, size_t size) {
  set_has_order_type();
  order_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.PublicOrderData.order_type)
}
inline ::std::string* PublicOrderData::mutable_order_type() {
  set_has_order_type();
  // @@protoc_insertion_point(field_mutable:quotation.PublicOrderData.order_type)
  return order_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PublicOrderData::release_order_type() {
  // @@protoc_insertion_point(field_release:quotation.PublicOrderData.order_type)
  if (!has_order_type()) {
    return NULL;
  }
  clear_has_order_type();
  return order_type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PublicOrderData::set_allocated_order_type(::std::string* order_type) {
  if (order_type != NULL) {
    set_has_order_type();
  } else {
    clear_has_order_type();
  }
  order_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_type);
  // @@protoc_insertion_point(field_set_allocated:quotation.PublicOrderData.order_type)
}

// optional int64 bs_flag = 11;
inline bool PublicOrderData::has_bs_flag() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PublicOrderData::set_has_bs_flag() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PublicOrderData::clear_has_bs_flag() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PublicOrderData::clear_bs_flag() {
  bs_flag_ = GOOGLE_LONGLONG(0);
  clear_has_bs_flag();
}
inline ::google::protobuf::int64 PublicOrderData::bs_flag() const {
  // @@protoc_insertion_point(field_get:quotation.PublicOrderData.bs_flag)
  return bs_flag_;
}
inline void PublicOrderData::set_bs_flag(::google::protobuf::int64 value) {
  set_has_bs_flag();
  bs_flag_ = value;
  // @@protoc_insertion_point(field_set:quotation.PublicOrderData.bs_flag)
}

// -------------------------------------------------------------------

// PublicOrderQueueData

// optional string type = 1 [default = "Q"];
inline bool PublicOrderQueueData::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PublicOrderQueueData::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PublicOrderQueueData::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PublicOrderQueueData::clear_type() {
  type_.ClearToDefaultNoArena(&::quotation::PublicOrderQueueData::_i_give_permission_to_break_this_code_default_type_.get());
  clear_has_type();
}
inline const ::std::string& PublicOrderQueueData::type() const {
  // @@protoc_insertion_point(field_get:quotation.PublicOrderQueueData.type)
  return type_.GetNoArena();
}
inline void PublicOrderQueueData::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::quotation::PublicOrderQueueData::_i_give_permission_to_break_this_code_default_type_.get(), value);
  // @@protoc_insertion_point(field_set:quotation.PublicOrderQueueData.type)
}
#if LANG_CXX11
inline void PublicOrderQueueData::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::quotation::PublicOrderQueueData::_i_give_permission_to_break_this_code_default_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.PublicOrderQueueData.type)
}
#endif
inline void PublicOrderQueueData::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::quotation::PublicOrderQueueData::_i_give_permission_to_break_this_code_default_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.PublicOrderQueueData.type)
}
inline void PublicOrderQueueData::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::quotation::PublicOrderQueueData::_i_give_permission_to_break_this_code_default_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.PublicOrderQueueData.type)
}
inline ::std::string* PublicOrderQueueData::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:quotation.PublicOrderQueueData.type)
  return type_.MutableNoArena(&::quotation::PublicOrderQueueData::_i_give_permission_to_break_this_code_default_type_.get());
}
inline ::std::string* PublicOrderQueueData::release_type() {
  // @@protoc_insertion_point(field_release:quotation.PublicOrderQueueData.type)
  if (!has_type()) {
    return NULL;
  }
  clear_has_type();
  return type_.ReleaseNonDefaultNoArena(&::quotation::PublicOrderQueueData::_i_give_permission_to_break_this_code_default_type_.get());
}
inline void PublicOrderQueueData::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::quotation::PublicOrderQueueData::_i_give_permission_to_break_this_code_default_type_.get(), type);
  // @@protoc_insertion_point(field_set_allocated:quotation.PublicOrderQueueData.type)
}

// optional uint32 trading_day = 2;
inline bool PublicOrderQueueData::has_trading_day() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PublicOrderQueueData::set_has_trading_day() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PublicOrderQueueData::clear_has_trading_day() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PublicOrderQueueData::clear_trading_day() {
  trading_day_ = 0u;
  clear_has_trading_day();
}
inline ::google::protobuf::uint32 PublicOrderQueueData::trading_day() const {
  // @@protoc_insertion_point(field_get:quotation.PublicOrderQueueData.trading_day)
  return trading_day_;
}
inline void PublicOrderQueueData::set_trading_day(::google::protobuf::uint32 value) {
  set_has_trading_day();
  trading_day_ = value;
  // @@protoc_insertion_point(field_set:quotation.PublicOrderQueueData.trading_day)
}

// required uint32 stamp = 3;
inline bool PublicOrderQueueData::has_stamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PublicOrderQueueData::set_has_stamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PublicOrderQueueData::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PublicOrderQueueData::clear_stamp() {
  stamp_ = 0u;
  clear_has_stamp();
}
inline ::google::protobuf::uint32 PublicOrderQueueData::stamp() const {
  // @@protoc_insertion_point(field_get:quotation.PublicOrderQueueData.stamp)
  return stamp_;
}
inline void PublicOrderQueueData::set_stamp(::google::protobuf::uint32 value) {
  set_has_stamp();
  stamp_ = value;
  // @@protoc_insertion_point(field_set:quotation.PublicOrderQueueData.stamp)
}

// optional string code = 4;
inline bool PublicOrderQueueData::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PublicOrderQueueData::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PublicOrderQueueData::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PublicOrderQueueData::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& PublicOrderQueueData::code() const {
  // @@protoc_insertion_point(field_get:quotation.PublicOrderQueueData.code)
  return code_.GetNoArena();
}
inline void PublicOrderQueueData::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.PublicOrderQueueData.code)
}
#if LANG_CXX11
inline void PublicOrderQueueData::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.PublicOrderQueueData.code)
}
#endif
inline void PublicOrderQueueData::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.PublicOrderQueueData.code)
}
inline void PublicOrderQueueData::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.PublicOrderQueueData.code)
}
inline ::std::string* PublicOrderQueueData::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:quotation.PublicOrderQueueData.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PublicOrderQueueData::release_code() {
  // @@protoc_insertion_point(field_release:quotation.PublicOrderQueueData.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PublicOrderQueueData::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:quotation.PublicOrderQueueData.code)
}

// optional int64 order_day = 5;
inline bool PublicOrderQueueData::has_order_day() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PublicOrderQueueData::set_has_order_day() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PublicOrderQueueData::clear_has_order_day() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PublicOrderQueueData::clear_order_day() {
  order_day_ = GOOGLE_LONGLONG(0);
  clear_has_order_day();
}
inline ::google::protobuf::int64 PublicOrderQueueData::order_day() const {
  // @@protoc_insertion_point(field_get:quotation.PublicOrderQueueData.order_day)
  return order_day_;
}
inline void PublicOrderQueueData::set_order_day(::google::protobuf::int64 value) {
  set_has_order_day();
  order_day_ = value;
  // @@protoc_insertion_point(field_set:quotation.PublicOrderQueueData.order_day)
}

// optional int64 order_time = 6;
inline bool PublicOrderQueueData::has_order_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PublicOrderQueueData::set_has_order_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PublicOrderQueueData::clear_has_order_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PublicOrderQueueData::clear_order_time() {
  order_time_ = GOOGLE_LONGLONG(0);
  clear_has_order_time();
}
inline ::google::protobuf::int64 PublicOrderQueueData::order_time() const {
  // @@protoc_insertion_point(field_get:quotation.PublicOrderQueueData.order_time)
  return order_time_;
}
inline void PublicOrderQueueData::set_order_time(::google::protobuf::int64 value) {
  set_has_order_time();
  order_time_ = value;
  // @@protoc_insertion_point(field_set:quotation.PublicOrderQueueData.order_time)
}

// optional int64 bs_flag = 7;
inline bool PublicOrderQueueData::has_bs_flag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PublicOrderQueueData::set_has_bs_flag() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PublicOrderQueueData::clear_has_bs_flag() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PublicOrderQueueData::clear_bs_flag() {
  bs_flag_ = GOOGLE_LONGLONG(0);
  clear_has_bs_flag();
}
inline ::google::protobuf::int64 PublicOrderQueueData::bs_flag() const {
  // @@protoc_insertion_point(field_get:quotation.PublicOrderQueueData.bs_flag)
  return bs_flag_;
}
inline void PublicOrderQueueData::set_bs_flag(::google::protobuf::int64 value) {
  set_has_bs_flag();
  bs_flag_ = value;
  // @@protoc_insertion_point(field_set:quotation.PublicOrderQueueData.bs_flag)
}

// optional int64 order_price = 8;
inline bool PublicOrderQueueData::has_order_price() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PublicOrderQueueData::set_has_order_price() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PublicOrderQueueData::clear_has_order_price() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PublicOrderQueueData::clear_order_price() {
  order_price_ = GOOGLE_LONGLONG(0);
  clear_has_order_price();
}
inline ::google::protobuf::int64 PublicOrderQueueData::order_price() const {
  // @@protoc_insertion_point(field_get:quotation.PublicOrderQueueData.order_price)
  return order_price_;
}
inline void PublicOrderQueueData::set_order_price(::google::protobuf::int64 value) {
  set_has_order_price();
  order_price_ = value;
  // @@protoc_insertion_point(field_set:quotation.PublicOrderQueueData.order_price)
}

// optional int64 order_qty = 9;
inline bool PublicOrderQueueData::has_order_qty() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PublicOrderQueueData::set_has_order_qty() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PublicOrderQueueData::clear_has_order_qty() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PublicOrderQueueData::clear_order_qty() {
  order_qty_ = GOOGLE_LONGLONG(0);
  clear_has_order_qty();
}
inline ::google::protobuf::int64 PublicOrderQueueData::order_qty() const {
  // @@protoc_insertion_point(field_get:quotation.PublicOrderQueueData.order_qty)
  return order_qty_;
}
inline void PublicOrderQueueData::set_order_qty(::google::protobuf::int64 value) {
  set_has_order_qty();
  order_qty_ = value;
  // @@protoc_insertion_point(field_set:quotation.PublicOrderQueueData.order_qty)
}

// repeated int64 volumes = 10;
inline int PublicOrderQueueData::volumes_size() const {
  return volumes_.size();
}
inline void PublicOrderQueueData::clear_volumes() {
  volumes_.Clear();
}
inline ::google::protobuf::int64 PublicOrderQueueData::volumes(int index) const {
  // @@protoc_insertion_point(field_get:quotation.PublicOrderQueueData.volumes)
  return volumes_.Get(index);
}
inline void PublicOrderQueueData::set_volumes(int index, ::google::protobuf::int64 value) {
  volumes_.Set(index, value);
  // @@protoc_insertion_point(field_set:quotation.PublicOrderQueueData.volumes)
}
inline void PublicOrderQueueData::add_volumes(::google::protobuf::int64 value) {
  volumes_.Add(value);
  // @@protoc_insertion_point(field_add:quotation.PublicOrderQueueData.volumes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
PublicOrderQueueData::volumes() const {
  // @@protoc_insertion_point(field_list:quotation.PublicOrderQueueData.volumes)
  return volumes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
PublicOrderQueueData::mutable_volumes() {
  // @@protoc_insertion_point(field_mutable_list:quotation.PublicOrderQueueData.volumes)
  return &volumes_;
}

// -------------------------------------------------------------------

// PublicOrderTransaction

// optional string type = 1 [default = "T"];
inline bool PublicOrderTransaction::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PublicOrderTransaction::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PublicOrderTransaction::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PublicOrderTransaction::clear_type() {
  type_.ClearToDefaultNoArena(&::quotation::PublicOrderTransaction::_i_give_permission_to_break_this_code_default_type_.get());
  clear_has_type();
}
inline const ::std::string& PublicOrderTransaction::type() const {
  // @@protoc_insertion_point(field_get:quotation.PublicOrderTransaction.type)
  return type_.GetNoArena();
}
inline void PublicOrderTransaction::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::quotation::PublicOrderTransaction::_i_give_permission_to_break_this_code_default_type_.get(), value);
  // @@protoc_insertion_point(field_set:quotation.PublicOrderTransaction.type)
}
#if LANG_CXX11
inline void PublicOrderTransaction::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::quotation::PublicOrderTransaction::_i_give_permission_to_break_this_code_default_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.PublicOrderTransaction.type)
}
#endif
inline void PublicOrderTransaction::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::quotation::PublicOrderTransaction::_i_give_permission_to_break_this_code_default_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.PublicOrderTransaction.type)
}
inline void PublicOrderTransaction::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::quotation::PublicOrderTransaction::_i_give_permission_to_break_this_code_default_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.PublicOrderTransaction.type)
}
inline ::std::string* PublicOrderTransaction::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:quotation.PublicOrderTransaction.type)
  return type_.MutableNoArena(&::quotation::PublicOrderTransaction::_i_give_permission_to_break_this_code_default_type_.get());
}
inline ::std::string* PublicOrderTransaction::release_type() {
  // @@protoc_insertion_point(field_release:quotation.PublicOrderTransaction.type)
  if (!has_type()) {
    return NULL;
  }
  clear_has_type();
  return type_.ReleaseNonDefaultNoArena(&::quotation::PublicOrderTransaction::_i_give_permission_to_break_this_code_default_type_.get());
}
inline void PublicOrderTransaction::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::quotation::PublicOrderTransaction::_i_give_permission_to_break_this_code_default_type_.get(), type);
  // @@protoc_insertion_point(field_set_allocated:quotation.PublicOrderTransaction.type)
}

// optional uint32 trading_day = 2;
inline bool PublicOrderTransaction::has_trading_day() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PublicOrderTransaction::set_has_trading_day() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PublicOrderTransaction::clear_has_trading_day() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PublicOrderTransaction::clear_trading_day() {
  trading_day_ = 0u;
  clear_has_trading_day();
}
inline ::google::protobuf::uint32 PublicOrderTransaction::trading_day() const {
  // @@protoc_insertion_point(field_get:quotation.PublicOrderTransaction.trading_day)
  return trading_day_;
}
inline void PublicOrderTransaction::set_trading_day(::google::protobuf::uint32 value) {
  set_has_trading_day();
  trading_day_ = value;
  // @@protoc_insertion_point(field_set:quotation.PublicOrderTransaction.trading_day)
}

// required uint32 stamp = 3;
inline bool PublicOrderTransaction::has_stamp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PublicOrderTransaction::set_has_stamp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PublicOrderTransaction::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PublicOrderTransaction::clear_stamp() {
  stamp_ = 0u;
  clear_has_stamp();
}
inline ::google::protobuf::uint32 PublicOrderTransaction::stamp() const {
  // @@protoc_insertion_point(field_get:quotation.PublicOrderTransaction.stamp)
  return stamp_;
}
inline void PublicOrderTransaction::set_stamp(::google::protobuf::uint32 value) {
  set_has_stamp();
  stamp_ = value;
  // @@protoc_insertion_point(field_set:quotation.PublicOrderTransaction.stamp)
}

// optional string code = 4;
inline bool PublicOrderTransaction::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PublicOrderTransaction::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PublicOrderTransaction::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PublicOrderTransaction::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& PublicOrderTransaction::code() const {
  // @@protoc_insertion_point(field_get:quotation.PublicOrderTransaction.code)
  return code_.GetNoArena();
}
inline void PublicOrderTransaction::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.PublicOrderTransaction.code)
}
#if LANG_CXX11
inline void PublicOrderTransaction::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.PublicOrderTransaction.code)
}
#endif
inline void PublicOrderTransaction::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.PublicOrderTransaction.code)
}
inline void PublicOrderTransaction::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.PublicOrderTransaction.code)
}
inline ::std::string* PublicOrderTransaction::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:quotation.PublicOrderTransaction.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PublicOrderTransaction::release_code() {
  // @@protoc_insertion_point(field_release:quotation.PublicOrderTransaction.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PublicOrderTransaction::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:quotation.PublicOrderTransaction.code)
}

// optional int64 match_day = 5;
inline bool PublicOrderTransaction::has_match_day() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PublicOrderTransaction::set_has_match_day() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PublicOrderTransaction::clear_has_match_day() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PublicOrderTransaction::clear_match_day() {
  match_day_ = GOOGLE_LONGLONG(0);
  clear_has_match_day();
}
inline ::google::protobuf::int64 PublicOrderTransaction::match_day() const {
  // @@protoc_insertion_point(field_get:quotation.PublicOrderTransaction.match_day)
  return match_day_;
}
inline void PublicOrderTransaction::set_match_day(::google::protobuf::int64 value) {
  set_has_match_day();
  match_day_ = value;
  // @@protoc_insertion_point(field_set:quotation.PublicOrderTransaction.match_day)
}

// optional int64 match_time = 6;
inline bool PublicOrderTransaction::has_match_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PublicOrderTransaction::set_has_match_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PublicOrderTransaction::clear_has_match_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PublicOrderTransaction::clear_match_time() {
  match_time_ = GOOGLE_LONGLONG(0);
  clear_has_match_time();
}
inline ::google::protobuf::int64 PublicOrderTransaction::match_time() const {
  // @@protoc_insertion_point(field_get:quotation.PublicOrderTransaction.match_time)
  return match_time_;
}
inline void PublicOrderTransaction::set_match_time(::google::protobuf::int64 value) {
  set_has_match_time();
  match_time_ = value;
  // @@protoc_insertion_point(field_set:quotation.PublicOrderTransaction.match_time)
}

// optional string match_id = 7;
inline bool PublicOrderTransaction::has_match_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PublicOrderTransaction::set_has_match_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PublicOrderTransaction::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PublicOrderTransaction::clear_match_id() {
  match_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_match_id();
}
inline const ::std::string& PublicOrderTransaction::match_id() const {
  // @@protoc_insertion_point(field_get:quotation.PublicOrderTransaction.match_id)
  return match_id_.GetNoArena();
}
inline void PublicOrderTransaction::set_match_id(const ::std::string& value) {
  set_has_match_id();
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.PublicOrderTransaction.match_id)
}
#if LANG_CXX11
inline void PublicOrderTransaction::set_match_id(::std::string&& value) {
  set_has_match_id();
  match_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.PublicOrderTransaction.match_id)
}
#endif
inline void PublicOrderTransaction::set_match_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_match_id();
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.PublicOrderTransaction.match_id)
}
inline void PublicOrderTransaction::set_match_id(const char* value, size_t size) {
  set_has_match_id();
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.PublicOrderTransaction.match_id)
}
inline ::std::string* PublicOrderTransaction::mutable_match_id() {
  set_has_match_id();
  // @@protoc_insertion_point(field_mutable:quotation.PublicOrderTransaction.match_id)
  return match_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PublicOrderTransaction::release_match_id() {
  // @@protoc_insertion_point(field_release:quotation.PublicOrderTransaction.match_id)
  if (!has_match_id()) {
    return NULL;
  }
  clear_has_match_id();
  return match_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PublicOrderTransaction::set_allocated_match_id(::std::string* match_id) {
  if (match_id != NULL) {
    set_has_match_id();
  } else {
    clear_has_match_id();
  }
  match_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), match_id);
  // @@protoc_insertion_point(field_set_allocated:quotation.PublicOrderTransaction.match_id)
}

// optional int64 match_price = 8;
inline bool PublicOrderTransaction::has_match_price() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PublicOrderTransaction::set_has_match_price() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PublicOrderTransaction::clear_has_match_price() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PublicOrderTransaction::clear_match_price() {
  match_price_ = GOOGLE_LONGLONG(0);
  clear_has_match_price();
}
inline ::google::protobuf::int64 PublicOrderTransaction::match_price() const {
  // @@protoc_insertion_point(field_get:quotation.PublicOrderTransaction.match_price)
  return match_price_;
}
inline void PublicOrderTransaction::set_match_price(::google::protobuf::int64 value) {
  set_has_match_price();
  match_price_ = value;
  // @@protoc_insertion_point(field_set:quotation.PublicOrderTransaction.match_price)
}

// optional int64 match_qty = 9;
inline bool PublicOrderTransaction::has_match_qty() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PublicOrderTransaction::set_has_match_qty() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PublicOrderTransaction::clear_has_match_qty() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PublicOrderTransaction::clear_match_qty() {
  match_qty_ = GOOGLE_LONGLONG(0);
  clear_has_match_qty();
}
inline ::google::protobuf::int64 PublicOrderTransaction::match_qty() const {
  // @@protoc_insertion_point(field_get:quotation.PublicOrderTransaction.match_qty)
  return match_qty_;
}
inline void PublicOrderTransaction::set_match_qty(::google::protobuf::int64 value) {
  set_has_match_qty();
  match_qty_ = value;
  // @@protoc_insertion_point(field_set:quotation.PublicOrderTransaction.match_qty)
}

// optional int64 match_amt = 10;
inline bool PublicOrderTransaction::has_match_amt() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PublicOrderTransaction::set_has_match_amt() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PublicOrderTransaction::clear_has_match_amt() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PublicOrderTransaction::clear_match_amt() {
  match_amt_ = GOOGLE_LONGLONG(0);
  clear_has_match_amt();
}
inline ::google::protobuf::int64 PublicOrderTransaction::match_amt() const {
  // @@protoc_insertion_point(field_get:quotation.PublicOrderTransaction.match_amt)
  return match_amt_;
}
inline void PublicOrderTransaction::set_match_amt(::google::protobuf::int64 value) {
  set_has_match_amt();
  match_amt_ = value;
  // @@protoc_insertion_point(field_set:quotation.PublicOrderTransaction.match_amt)
}

// optional int64 bs_flag = 11;
inline bool PublicOrderTransaction::has_bs_flag() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PublicOrderTransaction::set_has_bs_flag() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PublicOrderTransaction::clear_has_bs_flag() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PublicOrderTransaction::clear_bs_flag() {
  bs_flag_ = GOOGLE_LONGLONG(0);
  clear_has_bs_flag();
}
inline ::google::protobuf::int64 PublicOrderTransaction::bs_flag() const {
  // @@protoc_insertion_point(field_get:quotation.PublicOrderTransaction.bs_flag)
  return bs_flag_;
}
inline void PublicOrderTransaction::set_bs_flag(::google::protobuf::int64 value) {
  set_has_bs_flag();
  bs_flag_ = value;
  // @@protoc_insertion_point(field_set:quotation.PublicOrderTransaction.bs_flag)
}

// optional string match_kind = 12;
inline bool PublicOrderTransaction::has_match_kind() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PublicOrderTransaction::set_has_match_kind() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PublicOrderTransaction::clear_has_match_kind() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PublicOrderTransaction::clear_match_kind() {
  match_kind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_match_kind();
}
inline const ::std::string& PublicOrderTransaction::match_kind() const {
  // @@protoc_insertion_point(field_get:quotation.PublicOrderTransaction.match_kind)
  return match_kind_.GetNoArena();
}
inline void PublicOrderTransaction::set_match_kind(const ::std::string& value) {
  set_has_match_kind();
  match_kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.PublicOrderTransaction.match_kind)
}
#if LANG_CXX11
inline void PublicOrderTransaction::set_match_kind(::std::string&& value) {
  set_has_match_kind();
  match_kind_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.PublicOrderTransaction.match_kind)
}
#endif
inline void PublicOrderTransaction::set_match_kind(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_match_kind();
  match_kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.PublicOrderTransaction.match_kind)
}
inline void PublicOrderTransaction::set_match_kind(const char* value, size_t size) {
  set_has_match_kind();
  match_kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.PublicOrderTransaction.match_kind)
}
inline ::std::string* PublicOrderTransaction::mutable_match_kind() {
  set_has_match_kind();
  // @@protoc_insertion_point(field_mutable:quotation.PublicOrderTransaction.match_kind)
  return match_kind_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PublicOrderTransaction::release_match_kind() {
  // @@protoc_insertion_point(field_release:quotation.PublicOrderTransaction.match_kind)
  if (!has_match_kind()) {
    return NULL;
  }
  clear_has_match_kind();
  return match_kind_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PublicOrderTransaction::set_allocated_match_kind(::std::string* match_kind) {
  if (match_kind != NULL) {
    set_has_match_kind();
  } else {
    clear_has_match_kind();
  }
  match_kind_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), match_kind);
  // @@protoc_insertion_point(field_set_allocated:quotation.PublicOrderTransaction.match_kind)
}

// optional string match_code = 13;
inline bool PublicOrderTransaction::has_match_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PublicOrderTransaction::set_has_match_code() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PublicOrderTransaction::clear_has_match_code() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PublicOrderTransaction::clear_match_code() {
  match_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_match_code();
}
inline const ::std::string& PublicOrderTransaction::match_code() const {
  // @@protoc_insertion_point(field_get:quotation.PublicOrderTransaction.match_code)
  return match_code_.GetNoArena();
}
inline void PublicOrderTransaction::set_match_code(const ::std::string& value) {
  set_has_match_code();
  match_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.PublicOrderTransaction.match_code)
}
#if LANG_CXX11
inline void PublicOrderTransaction::set_match_code(::std::string&& value) {
  set_has_match_code();
  match_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.PublicOrderTransaction.match_code)
}
#endif
inline void PublicOrderTransaction::set_match_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_match_code();
  match_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.PublicOrderTransaction.match_code)
}
inline void PublicOrderTransaction::set_match_code(const char* value, size_t size) {
  set_has_match_code();
  match_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.PublicOrderTransaction.match_code)
}
inline ::std::string* PublicOrderTransaction::mutable_match_code() {
  set_has_match_code();
  // @@protoc_insertion_point(field_mutable:quotation.PublicOrderTransaction.match_code)
  return match_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PublicOrderTransaction::release_match_code() {
  // @@protoc_insertion_point(field_release:quotation.PublicOrderTransaction.match_code)
  if (!has_match_code()) {
    return NULL;
  }
  clear_has_match_code();
  return match_code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PublicOrderTransaction::set_allocated_match_code(::std::string* match_code) {
  if (match_code != NULL) {
    set_has_match_code();
  } else {
    clear_has_match_code();
  }
  match_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), match_code);
  // @@protoc_insertion_point(field_set_allocated:quotation.PublicOrderTransaction.match_code)
}

// optional string ask_order_no = 14;
inline bool PublicOrderTransaction::has_ask_order_no() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PublicOrderTransaction::set_has_ask_order_no() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PublicOrderTransaction::clear_has_ask_order_no() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PublicOrderTransaction::clear_ask_order_no() {
  ask_order_no_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ask_order_no();
}
inline const ::std::string& PublicOrderTransaction::ask_order_no() const {
  // @@protoc_insertion_point(field_get:quotation.PublicOrderTransaction.ask_order_no)
  return ask_order_no_.GetNoArena();
}
inline void PublicOrderTransaction::set_ask_order_no(const ::std::string& value) {
  set_has_ask_order_no();
  ask_order_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.PublicOrderTransaction.ask_order_no)
}
#if LANG_CXX11
inline void PublicOrderTransaction::set_ask_order_no(::std::string&& value) {
  set_has_ask_order_no();
  ask_order_no_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.PublicOrderTransaction.ask_order_no)
}
#endif
inline void PublicOrderTransaction::set_ask_order_no(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ask_order_no();
  ask_order_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.PublicOrderTransaction.ask_order_no)
}
inline void PublicOrderTransaction::set_ask_order_no(const char* value, size_t size) {
  set_has_ask_order_no();
  ask_order_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.PublicOrderTransaction.ask_order_no)
}
inline ::std::string* PublicOrderTransaction::mutable_ask_order_no() {
  set_has_ask_order_no();
  // @@protoc_insertion_point(field_mutable:quotation.PublicOrderTransaction.ask_order_no)
  return ask_order_no_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PublicOrderTransaction::release_ask_order_no() {
  // @@protoc_insertion_point(field_release:quotation.PublicOrderTransaction.ask_order_no)
  if (!has_ask_order_no()) {
    return NULL;
  }
  clear_has_ask_order_no();
  return ask_order_no_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PublicOrderTransaction::set_allocated_ask_order_no(::std::string* ask_order_no) {
  if (ask_order_no != NULL) {
    set_has_ask_order_no();
  } else {
    clear_has_ask_order_no();
  }
  ask_order_no_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ask_order_no);
  // @@protoc_insertion_point(field_set_allocated:quotation.PublicOrderTransaction.ask_order_no)
}

// optional string bid_order_no = 15;
inline bool PublicOrderTransaction::has_bid_order_no() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PublicOrderTransaction::set_has_bid_order_no() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PublicOrderTransaction::clear_has_bid_order_no() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PublicOrderTransaction::clear_bid_order_no() {
  bid_order_no_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bid_order_no();
}
inline const ::std::string& PublicOrderTransaction::bid_order_no() const {
  // @@protoc_insertion_point(field_get:quotation.PublicOrderTransaction.bid_order_no)
  return bid_order_no_.GetNoArena();
}
inline void PublicOrderTransaction::set_bid_order_no(const ::std::string& value) {
  set_has_bid_order_no();
  bid_order_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.PublicOrderTransaction.bid_order_no)
}
#if LANG_CXX11
inline void PublicOrderTransaction::set_bid_order_no(::std::string&& value) {
  set_has_bid_order_no();
  bid_order_no_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.PublicOrderTransaction.bid_order_no)
}
#endif
inline void PublicOrderTransaction::set_bid_order_no(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bid_order_no();
  bid_order_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.PublicOrderTransaction.bid_order_no)
}
inline void PublicOrderTransaction::set_bid_order_no(const char* value, size_t size) {
  set_has_bid_order_no();
  bid_order_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.PublicOrderTransaction.bid_order_no)
}
inline ::std::string* PublicOrderTransaction::mutable_bid_order_no() {
  set_has_bid_order_no();
  // @@protoc_insertion_point(field_mutable:quotation.PublicOrderTransaction.bid_order_no)
  return bid_order_no_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PublicOrderTransaction::release_bid_order_no() {
  // @@protoc_insertion_point(field_release:quotation.PublicOrderTransaction.bid_order_no)
  if (!has_bid_order_no()) {
    return NULL;
  }
  clear_has_bid_order_no();
  return bid_order_no_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PublicOrderTransaction::set_allocated_bid_order_no(::std::string* bid_order_no) {
  if (bid_order_no != NULL) {
    set_has_bid_order_no();
  } else {
    clear_has_bid_order_no();
  }
  bid_order_no_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bid_order_no);
  // @@protoc_insertion_point(field_set_allocated:quotation.PublicOrderTransaction.bid_order_no)
}

// -------------------------------------------------------------------

// CurrentBasis

// optional string type = 1 [default = "B"];
inline bool CurrentBasis::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CurrentBasis::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CurrentBasis::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CurrentBasis::clear_type() {
  type_.ClearToDefaultNoArena(&::quotation::CurrentBasis::_i_give_permission_to_break_this_code_default_type_.get());
  clear_has_type();
}
inline const ::std::string& CurrentBasis::type() const {
  // @@protoc_insertion_point(field_get:quotation.CurrentBasis.type)
  return type_.GetNoArena();
}
inline void CurrentBasis::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::quotation::CurrentBasis::_i_give_permission_to_break_this_code_default_type_.get(), value);
  // @@protoc_insertion_point(field_set:quotation.CurrentBasis.type)
}
#if LANG_CXX11
inline void CurrentBasis::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::quotation::CurrentBasis::_i_give_permission_to_break_this_code_default_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.CurrentBasis.type)
}
#endif
inline void CurrentBasis::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::quotation::CurrentBasis::_i_give_permission_to_break_this_code_default_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.CurrentBasis.type)
}
inline void CurrentBasis::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::quotation::CurrentBasis::_i_give_permission_to_break_this_code_default_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.CurrentBasis.type)
}
inline ::std::string* CurrentBasis::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:quotation.CurrentBasis.type)
  return type_.MutableNoArena(&::quotation::CurrentBasis::_i_give_permission_to_break_this_code_default_type_.get());
}
inline ::std::string* CurrentBasis::release_type() {
  // @@protoc_insertion_point(field_release:quotation.CurrentBasis.type)
  if (!has_type()) {
    return NULL;
  }
  clear_has_type();
  return type_.ReleaseNonDefaultNoArena(&::quotation::CurrentBasis::_i_give_permission_to_break_this_code_default_type_.get());
}
inline void CurrentBasis::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::quotation::CurrentBasis::_i_give_permission_to_break_this_code_default_type_.get(), type);
  // @@protoc_insertion_point(field_set_allocated:quotation.CurrentBasis.type)
}

// optional uint32 trading_day = 2;
inline bool CurrentBasis::has_trading_day() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CurrentBasis::set_has_trading_day() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CurrentBasis::clear_has_trading_day() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CurrentBasis::clear_trading_day() {
  trading_day_ = 0u;
  clear_has_trading_day();
}
inline ::google::protobuf::uint32 CurrentBasis::trading_day() const {
  // @@protoc_insertion_point(field_get:quotation.CurrentBasis.trading_day)
  return trading_day_;
}
inline void CurrentBasis::set_trading_day(::google::protobuf::uint32 value) {
  set_has_trading_day();
  trading_day_ = value;
  // @@protoc_insertion_point(field_set:quotation.CurrentBasis.trading_day)
}

// required uint32 stamp = 3;
inline bool CurrentBasis::has_stamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CurrentBasis::set_has_stamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CurrentBasis::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CurrentBasis::clear_stamp() {
  stamp_ = 0u;
  clear_has_stamp();
}
inline ::google::protobuf::uint32 CurrentBasis::stamp() const {
  // @@protoc_insertion_point(field_get:quotation.CurrentBasis.stamp)
  return stamp_;
}
inline void CurrentBasis::set_stamp(::google::protobuf::uint32 value) {
  set_has_stamp();
  stamp_ = value;
  // @@protoc_insertion_point(field_set:quotation.CurrentBasis.stamp)
}

// required uint32 date_time = 4;
inline bool CurrentBasis::has_date_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CurrentBasis::set_has_date_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CurrentBasis::clear_has_date_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CurrentBasis::clear_date_time() {
  date_time_ = 0u;
  clear_has_date_time();
}
inline ::google::protobuf::uint32 CurrentBasis::date_time() const {
  // @@protoc_insertion_point(field_get:quotation.CurrentBasis.date_time)
  return date_time_;
}
inline void CurrentBasis::set_date_time(::google::protobuf::uint32 value) {
  set_has_date_time();
  date_time_ = value;
  // @@protoc_insertion_point(field_set:quotation.CurrentBasis.date_time)
}

// required string code = 5;
inline bool CurrentBasis::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CurrentBasis::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CurrentBasis::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CurrentBasis::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& CurrentBasis::code() const {
  // @@protoc_insertion_point(field_get:quotation.CurrentBasis.code)
  return code_.GetNoArena();
}
inline void CurrentBasis::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.CurrentBasis.code)
}
#if LANG_CXX11
inline void CurrentBasis::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.CurrentBasis.code)
}
#endif
inline void CurrentBasis::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.CurrentBasis.code)
}
inline void CurrentBasis::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.CurrentBasis.code)
}
inline ::std::string* CurrentBasis::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:quotation.CurrentBasis.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CurrentBasis::release_code() {
  // @@protoc_insertion_point(field_release:quotation.CurrentBasis.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CurrentBasis::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:quotation.CurrentBasis.code)
}

// required double create = 6;
inline bool CurrentBasis::has_create() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CurrentBasis::set_has_create() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CurrentBasis::clear_has_create() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CurrentBasis::clear_create() {
  create_ = 0;
  clear_has_create();
}
inline double CurrentBasis::create() const {
  // @@protoc_insertion_point(field_get:quotation.CurrentBasis.create)
  return create_;
}
inline void CurrentBasis::set_create(double value) {
  set_has_create();
  create_ = value;
  // @@protoc_insertion_point(field_set:quotation.CurrentBasis.create)
}

// required double buy = 7;
inline bool CurrentBasis::has_buy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CurrentBasis::set_has_buy() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CurrentBasis::clear_has_buy() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CurrentBasis::clear_buy() {
  buy_ = 0;
  clear_has_buy();
}
inline double CurrentBasis::buy() const {
  // @@protoc_insertion_point(field_get:quotation.CurrentBasis.buy)
  return buy_;
}
inline void CurrentBasis::set_buy(double value) {
  set_has_buy();
  buy_ = value;
  // @@protoc_insertion_point(field_set:quotation.CurrentBasis.buy)
}

// required double sell = 8;
inline bool CurrentBasis::has_sell() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CurrentBasis::set_has_sell() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CurrentBasis::clear_has_sell() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CurrentBasis::clear_sell() {
  sell_ = 0;
  clear_has_sell();
}
inline double CurrentBasis::sell() const {
  // @@protoc_insertion_point(field_get:quotation.CurrentBasis.sell)
  return sell_;
}
inline void CurrentBasis::set_sell(double value) {
  set_has_sell();
  sell_ = value;
  // @@protoc_insertion_point(field_set:quotation.CurrentBasis.sell)
}

// required double redeem = 9;
inline bool CurrentBasis::has_redeem() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CurrentBasis::set_has_redeem() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CurrentBasis::clear_has_redeem() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CurrentBasis::clear_redeem() {
  redeem_ = 0;
  clear_has_redeem();
}
inline double CurrentBasis::redeem() const {
  // @@protoc_insertion_point(field_get:quotation.CurrentBasis.redeem)
  return redeem_;
}
inline void CurrentBasis::set_redeem(double value) {
  set_has_redeem();
  redeem_ = value;
  // @@protoc_insertion_point(field_set:quotation.CurrentBasis.redeem)
}

// -------------------------------------------------------------------

// CircleQuotation

// optional string type = 1 [default = "CIRCLE"];
inline bool CircleQuotation::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CircleQuotation::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CircleQuotation::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CircleQuotation::clear_type() {
  type_.ClearToDefaultNoArena(&::quotation::CircleQuotation::_i_give_permission_to_break_this_code_default_type_.get());
  clear_has_type();
}
inline const ::std::string& CircleQuotation::type() const {
  // @@protoc_insertion_point(field_get:quotation.CircleQuotation.type)
  return type_.GetNoArena();
}
inline void CircleQuotation::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::quotation::CircleQuotation::_i_give_permission_to_break_this_code_default_type_.get(), value);
  // @@protoc_insertion_point(field_set:quotation.CircleQuotation.type)
}
#if LANG_CXX11
inline void CircleQuotation::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::quotation::CircleQuotation::_i_give_permission_to_break_this_code_default_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.CircleQuotation.type)
}
#endif
inline void CircleQuotation::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::quotation::CircleQuotation::_i_give_permission_to_break_this_code_default_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.CircleQuotation.type)
}
inline void CircleQuotation::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::quotation::CircleQuotation::_i_give_permission_to_break_this_code_default_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.CircleQuotation.type)
}
inline ::std::string* CircleQuotation::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:quotation.CircleQuotation.type)
  return type_.MutableNoArena(&::quotation::CircleQuotation::_i_give_permission_to_break_this_code_default_type_.get());
}
inline ::std::string* CircleQuotation::release_type() {
  // @@protoc_insertion_point(field_release:quotation.CircleQuotation.type)
  if (!has_type()) {
    return NULL;
  }
  clear_has_type();
  return type_.ReleaseNonDefaultNoArena(&::quotation::CircleQuotation::_i_give_permission_to_break_this_code_default_type_.get());
}
inline void CircleQuotation::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::quotation::CircleQuotation::_i_give_permission_to_break_this_code_default_type_.get(), type);
  // @@protoc_insertion_point(field_set_allocated:quotation.CircleQuotation.type)
}

// optional uint32 trading_day = 2;
inline bool CircleQuotation::has_trading_day() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CircleQuotation::set_has_trading_day() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CircleQuotation::clear_has_trading_day() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CircleQuotation::clear_trading_day() {
  trading_day_ = 0u;
  clear_has_trading_day();
}
inline ::google::protobuf::uint32 CircleQuotation::trading_day() const {
  // @@protoc_insertion_point(field_get:quotation.CircleQuotation.trading_day)
  return trading_day_;
}
inline void CircleQuotation::set_trading_day(::google::protobuf::uint32 value) {
  set_has_trading_day();
  trading_day_ = value;
  // @@protoc_insertion_point(field_set:quotation.CircleQuotation.trading_day)
}

// required uint32 stamp = 3;
inline bool CircleQuotation::has_stamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CircleQuotation::set_has_stamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CircleQuotation::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CircleQuotation::clear_stamp() {
  stamp_ = 0u;
  clear_has_stamp();
}
inline ::google::protobuf::uint32 CircleQuotation::stamp() const {
  // @@protoc_insertion_point(field_get:quotation.CircleQuotation.stamp)
  return stamp_;
}
inline void CircleQuotation::set_stamp(::google::protobuf::uint32 value) {
  set_has_stamp();
  stamp_ = value;
  // @@protoc_insertion_point(field_set:quotation.CircleQuotation.stamp)
}

// optional int32 funcid = 4 [default = 10000004];
inline bool CircleQuotation::has_funcid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CircleQuotation::set_has_funcid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CircleQuotation::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CircleQuotation::clear_funcid() {
  funcid_ = 10000004;
  clear_has_funcid();
}
inline ::google::protobuf::int32 CircleQuotation::funcid() const {
  // @@protoc_insertion_point(field_get:quotation.CircleQuotation.funcid)
  return funcid_;
}
inline void CircleQuotation::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:quotation.CircleQuotation.funcid)
}

// required string code = 5;
inline bool CircleQuotation::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CircleQuotation::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CircleQuotation::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CircleQuotation::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& CircleQuotation::code() const {
  // @@protoc_insertion_point(field_get:quotation.CircleQuotation.code)
  return code_.GetNoArena();
}
inline void CircleQuotation::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.CircleQuotation.code)
}
#if LANG_CXX11
inline void CircleQuotation::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.CircleQuotation.code)
}
#endif
inline void CircleQuotation::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.CircleQuotation.code)
}
inline void CircleQuotation::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.CircleQuotation.code)
}
inline ::std::string* CircleQuotation::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:quotation.CircleQuotation.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CircleQuotation::release_code() {
  // @@protoc_insertion_point(field_release:quotation.CircleQuotation.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CircleQuotation::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:quotation.CircleQuotation.code)
}

// required int32 circle = 6;
inline bool CircleQuotation::has_circle() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CircleQuotation::set_has_circle() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CircleQuotation::clear_has_circle() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CircleQuotation::clear_circle() {
  circle_ = 0;
  clear_has_circle();
}
inline ::google::protobuf::int32 CircleQuotation::circle() const {
  // @@protoc_insertion_point(field_get:quotation.CircleQuotation.circle)
  return circle_;
}
inline void CircleQuotation::set_circle(::google::protobuf::int32 value) {
  set_has_circle();
  circle_ = value;
  // @@protoc_insertion_point(field_set:quotation.CircleQuotation.circle)
}

// required int64 open = 7;
inline bool CircleQuotation::has_open() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CircleQuotation::set_has_open() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CircleQuotation::clear_has_open() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CircleQuotation::clear_open() {
  open_ = GOOGLE_LONGLONG(0);
  clear_has_open();
}
inline ::google::protobuf::int64 CircleQuotation::open() const {
  // @@protoc_insertion_point(field_get:quotation.CircleQuotation.open)
  return open_;
}
inline void CircleQuotation::set_open(::google::protobuf::int64 value) {
  set_has_open();
  open_ = value;
  // @@protoc_insertion_point(field_set:quotation.CircleQuotation.open)
}

// required int64 high = 8;
inline bool CircleQuotation::has_high() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CircleQuotation::set_has_high() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CircleQuotation::clear_has_high() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CircleQuotation::clear_high() {
  high_ = GOOGLE_LONGLONG(0);
  clear_has_high();
}
inline ::google::protobuf::int64 CircleQuotation::high() const {
  // @@protoc_insertion_point(field_get:quotation.CircleQuotation.high)
  return high_;
}
inline void CircleQuotation::set_high(::google::protobuf::int64 value) {
  set_has_high();
  high_ = value;
  // @@protoc_insertion_point(field_set:quotation.CircleQuotation.high)
}

// required int64 low = 9;
inline bool CircleQuotation::has_low() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CircleQuotation::set_has_low() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CircleQuotation::clear_has_low() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CircleQuotation::clear_low() {
  low_ = GOOGLE_LONGLONG(0);
  clear_has_low();
}
inline ::google::protobuf::int64 CircleQuotation::low() const {
  // @@protoc_insertion_point(field_get:quotation.CircleQuotation.low)
  return low_;
}
inline void CircleQuotation::set_low(::google::protobuf::int64 value) {
  set_has_low();
  low_ = value;
  // @@protoc_insertion_point(field_set:quotation.CircleQuotation.low)
}

// required int64 close = 10;
inline bool CircleQuotation::has_close() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CircleQuotation::set_has_close() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CircleQuotation::clear_has_close() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CircleQuotation::clear_close() {
  close_ = GOOGLE_LONGLONG(0);
  clear_has_close();
}
inline ::google::protobuf::int64 CircleQuotation::close() const {
  // @@protoc_insertion_point(field_get:quotation.CircleQuotation.close)
  return close_;
}
inline void CircleQuotation::set_close(::google::protobuf::int64 value) {
  set_has_close();
  close_ = value;
  // @@protoc_insertion_point(field_set:quotation.CircleQuotation.close)
}

// -------------------------------------------------------------------

// OptionVolatilitySurface_Value

// repeated double value = 1;
inline int OptionVolatilitySurface_Value::value_size() const {
  return value_.size();
}
inline void OptionVolatilitySurface_Value::clear_value() {
  value_.Clear();
}
inline double OptionVolatilitySurface_Value::value(int index) const {
  // @@protoc_insertion_point(field_get:quotation.OptionVolatilitySurface.Value.value)
  return value_.Get(index);
}
inline void OptionVolatilitySurface_Value::set_value(int index, double value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:quotation.OptionVolatilitySurface.Value.value)
}
inline void OptionVolatilitySurface_Value::add_value(double value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:quotation.OptionVolatilitySurface.Value.value)
}
inline const ::google::protobuf::RepeatedField< double >&
OptionVolatilitySurface_Value::value() const {
  // @@protoc_insertion_point(field_list:quotation.OptionVolatilitySurface.Value.value)
  return value_;
}
inline ::google::protobuf::RepeatedField< double >*
OptionVolatilitySurface_Value::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:quotation.OptionVolatilitySurface.Value.value)
  return &value_;
}

// -------------------------------------------------------------------

// OptionVolatilitySurface

// required string id = 1;
inline bool OptionVolatilitySurface::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptionVolatilitySurface::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptionVolatilitySurface::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptionVolatilitySurface::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& OptionVolatilitySurface::id() const {
  // @@protoc_insertion_point(field_get:quotation.OptionVolatilitySurface.id)
  return id_.GetNoArena();
}
inline void OptionVolatilitySurface::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.OptionVolatilitySurface.id)
}
#if LANG_CXX11
inline void OptionVolatilitySurface::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.OptionVolatilitySurface.id)
}
#endif
inline void OptionVolatilitySurface::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.OptionVolatilitySurface.id)
}
inline void OptionVolatilitySurface::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.OptionVolatilitySurface.id)
}
inline ::std::string* OptionVolatilitySurface::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:quotation.OptionVolatilitySurface.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionVolatilitySurface::release_id() {
  // @@protoc_insertion_point(field_release:quotation.OptionVolatilitySurface.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionVolatilitySurface::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:quotation.OptionVolatilitySurface.id)
}

// repeated double x = 2;
inline int OptionVolatilitySurface::x_size() const {
  return x_.size();
}
inline void OptionVolatilitySurface::clear_x() {
  x_.Clear();
}
inline double OptionVolatilitySurface::x(int index) const {
  // @@protoc_insertion_point(field_get:quotation.OptionVolatilitySurface.x)
  return x_.Get(index);
}
inline void OptionVolatilitySurface::set_x(int index, double value) {
  x_.Set(index, value);
  // @@protoc_insertion_point(field_set:quotation.OptionVolatilitySurface.x)
}
inline void OptionVolatilitySurface::add_x(double value) {
  x_.Add(value);
  // @@protoc_insertion_point(field_add:quotation.OptionVolatilitySurface.x)
}
inline const ::google::protobuf::RepeatedField< double >&
OptionVolatilitySurface::x() const {
  // @@protoc_insertion_point(field_list:quotation.OptionVolatilitySurface.x)
  return x_;
}
inline ::google::protobuf::RepeatedField< double >*
OptionVolatilitySurface::mutable_x() {
  // @@protoc_insertion_point(field_mutable_list:quotation.OptionVolatilitySurface.x)
  return &x_;
}

// repeated uint32 y = 3;
inline int OptionVolatilitySurface::y_size() const {
  return y_.size();
}
inline void OptionVolatilitySurface::clear_y() {
  y_.Clear();
}
inline ::google::protobuf::uint32 OptionVolatilitySurface::y(int index) const {
  // @@protoc_insertion_point(field_get:quotation.OptionVolatilitySurface.y)
  return y_.Get(index);
}
inline void OptionVolatilitySurface::set_y(int index, ::google::protobuf::uint32 value) {
  y_.Set(index, value);
  // @@protoc_insertion_point(field_set:quotation.OptionVolatilitySurface.y)
}
inline void OptionVolatilitySurface::add_y(::google::protobuf::uint32 value) {
  y_.Add(value);
  // @@protoc_insertion_point(field_add:quotation.OptionVolatilitySurface.y)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
OptionVolatilitySurface::y() const {
  // @@protoc_insertion_point(field_list:quotation.OptionVolatilitySurface.y)
  return y_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
OptionVolatilitySurface::mutable_y() {
  // @@protoc_insertion_point(field_mutable_list:quotation.OptionVolatilitySurface.y)
  return &y_;
}

// repeated .quotation.OptionVolatilitySurface.Value v = 4;
inline int OptionVolatilitySurface::v_size() const {
  return v_.size();
}
inline void OptionVolatilitySurface::clear_v() {
  v_.Clear();
}
inline ::quotation::OptionVolatilitySurface_Value* OptionVolatilitySurface::mutable_v(int index) {
  // @@protoc_insertion_point(field_mutable:quotation.OptionVolatilitySurface.v)
  return v_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::quotation::OptionVolatilitySurface_Value >*
OptionVolatilitySurface::mutable_v() {
  // @@protoc_insertion_point(field_mutable_list:quotation.OptionVolatilitySurface.v)
  return &v_;
}
inline const ::quotation::OptionVolatilitySurface_Value& OptionVolatilitySurface::v(int index) const {
  // @@protoc_insertion_point(field_get:quotation.OptionVolatilitySurface.v)
  return v_.Get(index);
}
inline ::quotation::OptionVolatilitySurface_Value* OptionVolatilitySurface::add_v() {
  // @@protoc_insertion_point(field_add:quotation.OptionVolatilitySurface.v)
  return v_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::quotation::OptionVolatilitySurface_Value >&
OptionVolatilitySurface::v() const {
  // @@protoc_insertion_point(field_list:quotation.OptionVolatilitySurface.v)
  return v_;
}

// -------------------------------------------------------------------

// OptionVolatilitySurfaces

// required string underlying_code = 1;
inline bool OptionVolatilitySurfaces::has_underlying_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptionVolatilitySurfaces::set_has_underlying_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptionVolatilitySurfaces::clear_has_underlying_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptionVolatilitySurfaces::clear_underlying_code() {
  underlying_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_underlying_code();
}
inline const ::std::string& OptionVolatilitySurfaces::underlying_code() const {
  // @@protoc_insertion_point(field_get:quotation.OptionVolatilitySurfaces.underlying_code)
  return underlying_code_.GetNoArena();
}
inline void OptionVolatilitySurfaces::set_underlying_code(const ::std::string& value) {
  set_has_underlying_code();
  underlying_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.OptionVolatilitySurfaces.underlying_code)
}
#if LANG_CXX11
inline void OptionVolatilitySurfaces::set_underlying_code(::std::string&& value) {
  set_has_underlying_code();
  underlying_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.OptionVolatilitySurfaces.underlying_code)
}
#endif
inline void OptionVolatilitySurfaces::set_underlying_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_underlying_code();
  underlying_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.OptionVolatilitySurfaces.underlying_code)
}
inline void OptionVolatilitySurfaces::set_underlying_code(const char* value, size_t size) {
  set_has_underlying_code();
  underlying_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.OptionVolatilitySurfaces.underlying_code)
}
inline ::std::string* OptionVolatilitySurfaces::mutable_underlying_code() {
  set_has_underlying_code();
  // @@protoc_insertion_point(field_mutable:quotation.OptionVolatilitySurfaces.underlying_code)
  return underlying_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionVolatilitySurfaces::release_underlying_code() {
  // @@protoc_insertion_point(field_release:quotation.OptionVolatilitySurfaces.underlying_code)
  if (!has_underlying_code()) {
    return NULL;
  }
  clear_has_underlying_code();
  return underlying_code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionVolatilitySurfaces::set_allocated_underlying_code(::std::string* underlying_code) {
  if (underlying_code != NULL) {
    set_has_underlying_code();
  } else {
    clear_has_underlying_code();
  }
  underlying_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), underlying_code);
  // @@protoc_insertion_point(field_set_allocated:quotation.OptionVolatilitySurfaces.underlying_code)
}

// repeated .quotation.OptionVolatilitySurface items = 2;
inline int OptionVolatilitySurfaces::items_size() const {
  return items_.size();
}
inline void OptionVolatilitySurfaces::clear_items() {
  items_.Clear();
}
inline ::quotation::OptionVolatilitySurface* OptionVolatilitySurfaces::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:quotation.OptionVolatilitySurfaces.items)
  return items_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::quotation::OptionVolatilitySurface >*
OptionVolatilitySurfaces::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:quotation.OptionVolatilitySurfaces.items)
  return &items_;
}
inline const ::quotation::OptionVolatilitySurface& OptionVolatilitySurfaces::items(int index) const {
  // @@protoc_insertion_point(field_get:quotation.OptionVolatilitySurfaces.items)
  return items_.Get(index);
}
inline ::quotation::OptionVolatilitySurface* OptionVolatilitySurfaces::add_items() {
  // @@protoc_insertion_point(field_add:quotation.OptionVolatilitySurfaces.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::quotation::OptionVolatilitySurface >&
OptionVolatilitySurfaces::items() const {
  // @@protoc_insertion_point(field_list:quotation.OptionVolatilitySurfaces.items)
  return items_;
}

// optional string default_id = 3;
inline bool OptionVolatilitySurfaces::has_default_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptionVolatilitySurfaces::set_has_default_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OptionVolatilitySurfaces::clear_has_default_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OptionVolatilitySurfaces::clear_default_id() {
  default_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_default_id();
}
inline const ::std::string& OptionVolatilitySurfaces::default_id() const {
  // @@protoc_insertion_point(field_get:quotation.OptionVolatilitySurfaces.default_id)
  return default_id_.GetNoArena();
}
inline void OptionVolatilitySurfaces::set_default_id(const ::std::string& value) {
  set_has_default_id();
  default_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.OptionVolatilitySurfaces.default_id)
}
#if LANG_CXX11
inline void OptionVolatilitySurfaces::set_default_id(::std::string&& value) {
  set_has_default_id();
  default_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.OptionVolatilitySurfaces.default_id)
}
#endif
inline void OptionVolatilitySurfaces::set_default_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_default_id();
  default_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.OptionVolatilitySurfaces.default_id)
}
inline void OptionVolatilitySurfaces::set_default_id(const char* value, size_t size) {
  set_has_default_id();
  default_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.OptionVolatilitySurfaces.default_id)
}
inline ::std::string* OptionVolatilitySurfaces::mutable_default_id() {
  set_has_default_id();
  // @@protoc_insertion_point(field_mutable:quotation.OptionVolatilitySurfaces.default_id)
  return default_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionVolatilitySurfaces::release_default_id() {
  // @@protoc_insertion_point(field_release:quotation.OptionVolatilitySurfaces.default_id)
  if (!has_default_id()) {
    return NULL;
  }
  clear_has_default_id();
  return default_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionVolatilitySurfaces::set_allocated_default_id(::std::string* default_id) {
  if (default_id != NULL) {
    set_has_default_id();
  } else {
    clear_has_default_id();
  }
  default_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), default_id);
  // @@protoc_insertion_point(field_set_allocated:quotation.OptionVolatilitySurfaces.default_id)
}

// -------------------------------------------------------------------

// SetOptionVolatilitySurfacesReq

// optional int32 funcid = 1 [default = 21000001];
inline bool SetOptionVolatilitySurfacesReq::has_funcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetOptionVolatilitySurfacesReq::set_has_funcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetOptionVolatilitySurfacesReq::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetOptionVolatilitySurfacesReq::clear_funcid() {
  funcid_ = 21000001;
  clear_has_funcid();
}
inline ::google::protobuf::int32 SetOptionVolatilitySurfacesReq::funcid() const {
  // @@protoc_insertion_point(field_get:quotation.SetOptionVolatilitySurfacesReq.funcid)
  return funcid_;
}
inline void SetOptionVolatilitySurfacesReq::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:quotation.SetOptionVolatilitySurfacesReq.funcid)
}

// required .quotation.OptionVolatilitySurfaces data = 2;
inline bool SetOptionVolatilitySurfacesReq::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetOptionVolatilitySurfacesReq::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetOptionVolatilitySurfacesReq::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetOptionVolatilitySurfacesReq::clear_data() {
  if (data_ != NULL) data_->Clear();
  clear_has_data();
}
inline const ::quotation::OptionVolatilitySurfaces& SetOptionVolatilitySurfacesReq::_internal_data() const {
  return *data_;
}
inline const ::quotation::OptionVolatilitySurfaces& SetOptionVolatilitySurfacesReq::data() const {
  const ::quotation::OptionVolatilitySurfaces* p = data_;
  // @@protoc_insertion_point(field_get:quotation.SetOptionVolatilitySurfacesReq.data)
  return p != NULL ? *p : *reinterpret_cast<const ::quotation::OptionVolatilitySurfaces*>(
      &::quotation::_OptionVolatilitySurfaces_default_instance_);
}
inline ::quotation::OptionVolatilitySurfaces* SetOptionVolatilitySurfacesReq::release_data() {
  // @@protoc_insertion_point(field_release:quotation.SetOptionVolatilitySurfacesReq.data)
  clear_has_data();
  ::quotation::OptionVolatilitySurfaces* temp = data_;
  data_ = NULL;
  return temp;
}
inline ::quotation::OptionVolatilitySurfaces* SetOptionVolatilitySurfacesReq::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    auto* p = CreateMaybeMessage<::quotation::OptionVolatilitySurfaces>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:quotation.SetOptionVolatilitySurfacesReq.data)
  return data_;
}
inline void SetOptionVolatilitySurfacesReq::set_allocated_data(::quotation::OptionVolatilitySurfaces* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete data_;
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    set_has_data();
  } else {
    clear_has_data();
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:quotation.SetOptionVolatilitySurfacesReq.data)
}

// -------------------------------------------------------------------

// SetOptionVolatilitySurfacesRep

// optional int32 funcid = 1 [default = 21100001];
inline bool SetOptionVolatilitySurfacesRep::has_funcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SetOptionVolatilitySurfacesRep::set_has_funcid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SetOptionVolatilitySurfacesRep::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SetOptionVolatilitySurfacesRep::clear_funcid() {
  funcid_ = 21100001;
  clear_has_funcid();
}
inline ::google::protobuf::int32 SetOptionVolatilitySurfacesRep::funcid() const {
  // @@protoc_insertion_point(field_get:quotation.SetOptionVolatilitySurfacesRep.funcid)
  return funcid_;
}
inline void SetOptionVolatilitySurfacesRep::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:quotation.SetOptionVolatilitySurfacesRep.funcid)
}

// optional int64 rc = 2;
inline bool SetOptionVolatilitySurfacesRep::has_rc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetOptionVolatilitySurfacesRep::set_has_rc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetOptionVolatilitySurfacesRep::clear_has_rc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetOptionVolatilitySurfacesRep::clear_rc() {
  rc_ = GOOGLE_LONGLONG(0);
  clear_has_rc();
}
inline ::google::protobuf::int64 SetOptionVolatilitySurfacesRep::rc() const {
  // @@protoc_insertion_point(field_get:quotation.SetOptionVolatilitySurfacesRep.rc)
  return rc_;
}
inline void SetOptionVolatilitySurfacesRep::set_rc(::google::protobuf::int64 value) {
  set_has_rc();
  rc_ = value;
  // @@protoc_insertion_point(field_set:quotation.SetOptionVolatilitySurfacesRep.rc)
}

// optional string msg = 3;
inline bool SetOptionVolatilitySurfacesRep::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetOptionVolatilitySurfacesRep::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetOptionVolatilitySurfacesRep::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetOptionVolatilitySurfacesRep::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& SetOptionVolatilitySurfacesRep::msg() const {
  // @@protoc_insertion_point(field_get:quotation.SetOptionVolatilitySurfacesRep.msg)
  return msg_.GetNoArena();
}
inline void SetOptionVolatilitySurfacesRep::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.SetOptionVolatilitySurfacesRep.msg)
}
#if LANG_CXX11
inline void SetOptionVolatilitySurfacesRep::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.SetOptionVolatilitySurfacesRep.msg)
}
#endif
inline void SetOptionVolatilitySurfacesRep::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.SetOptionVolatilitySurfacesRep.msg)
}
inline void SetOptionVolatilitySurfacesRep::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.SetOptionVolatilitySurfacesRep.msg)
}
inline ::std::string* SetOptionVolatilitySurfacesRep::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:quotation.SetOptionVolatilitySurfacesRep.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetOptionVolatilitySurfacesRep::release_msg() {
  // @@protoc_insertion_point(field_release:quotation.SetOptionVolatilitySurfacesRep.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetOptionVolatilitySurfacesRep::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:quotation.SetOptionVolatilitySurfacesRep.msg)
}

// -------------------------------------------------------------------

// SecurityState

// required string code = 1;
inline bool SecurityState::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SecurityState::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SecurityState::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SecurityState::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& SecurityState::code() const {
  // @@protoc_insertion_point(field_get:quotation.SecurityState.code)
  return code_.GetNoArena();
}
inline void SecurityState::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.SecurityState.code)
}
#if LANG_CXX11
inline void SecurityState::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.SecurityState.code)
}
#endif
inline void SecurityState::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.SecurityState.code)
}
inline void SecurityState::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.SecurityState.code)
}
inline ::std::string* SecurityState::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:quotation.SecurityState.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SecurityState::release_code() {
  // @@protoc_insertion_point(field_release:quotation.SecurityState.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SecurityState::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:quotation.SecurityState.code)
}

// optional string name = 2;
inline bool SecurityState::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SecurityState::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SecurityState::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SecurityState::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& SecurityState::name() const {
  // @@protoc_insertion_point(field_get:quotation.SecurityState.name)
  return name_.GetNoArena();
}
inline void SecurityState::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.SecurityState.name)
}
#if LANG_CXX11
inline void SecurityState::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.SecurityState.name)
}
#endif
inline void SecurityState::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.SecurityState.name)
}
inline void SecurityState::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.SecurityState.name)
}
inline ::std::string* SecurityState::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:quotation.SecurityState.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SecurityState::release_name() {
  // @@protoc_insertion_point(field_release:quotation.SecurityState.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SecurityState::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:quotation.SecurityState.name)
}

// optional uint32 state = 3;
inline bool SecurityState::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SecurityState::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SecurityState::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SecurityState::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 SecurityState::state() const {
  // @@protoc_insertion_point(field_get:quotation.SecurityState.state)
  return state_;
}
inline void SecurityState::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:quotation.SecurityState.state)
}

// -------------------------------------------------------------------

// SecurityStateList

// repeated .quotation.SecurityState items = 1;
inline int SecurityStateList::items_size() const {
  return items_.size();
}
inline void SecurityStateList::clear_items() {
  items_.Clear();
}
inline ::quotation::SecurityState* SecurityStateList::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:quotation.SecurityStateList.items)
  return items_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::quotation::SecurityState >*
SecurityStateList::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:quotation.SecurityStateList.items)
  return &items_;
}
inline const ::quotation::SecurityState& SecurityStateList::items(int index) const {
  // @@protoc_insertion_point(field_get:quotation.SecurityStateList.items)
  return items_.Get(index);
}
inline ::quotation::SecurityState* SecurityStateList::add_items() {
  // @@protoc_insertion_point(field_add:quotation.SecurityStateList.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::quotation::SecurityState >&
SecurityStateList::items() const {
  // @@protoc_insertion_point(field_list:quotation.SecurityStateList.items)
  return items_;
}

// -------------------------------------------------------------------

// TradingDay

// required uint32 data_date = 1;
inline bool TradingDay::has_data_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TradingDay::set_has_data_date() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TradingDay::clear_has_data_date() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TradingDay::clear_data_date() {
  data_date_ = 0u;
  clear_has_data_date();
}
inline ::google::protobuf::uint32 TradingDay::data_date() const {
  // @@protoc_insertion_point(field_get:quotation.TradingDay.data_date)
  return data_date_;
}
inline void TradingDay::set_data_date(::google::protobuf::uint32 value) {
  set_has_data_date();
  data_date_ = value;
  // @@protoc_insertion_point(field_set:quotation.TradingDay.data_date)
}

// optional int32 weekday = 2;
inline bool TradingDay::has_weekday() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TradingDay::set_has_weekday() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TradingDay::clear_has_weekday() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TradingDay::clear_weekday() {
  weekday_ = 0;
  clear_has_weekday();
}
inline ::google::protobuf::int32 TradingDay::weekday() const {
  // @@protoc_insertion_point(field_get:quotation.TradingDay.weekday)
  return weekday_;
}
inline void TradingDay::set_weekday(::google::protobuf::int32 value) {
  set_has_weekday();
  weekday_ = value;
  // @@protoc_insertion_point(field_set:quotation.TradingDay.weekday)
}

// optional int32 is_trading_day = 3;
inline bool TradingDay::has_is_trading_day() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TradingDay::set_has_is_trading_day() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TradingDay::clear_has_is_trading_day() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TradingDay::clear_is_trading_day() {
  is_trading_day_ = 0;
  clear_has_is_trading_day();
}
inline ::google::protobuf::int32 TradingDay::is_trading_day() const {
  // @@protoc_insertion_point(field_get:quotation.TradingDay.is_trading_day)
  return is_trading_day_;
}
inline void TradingDay::set_is_trading_day(::google::protobuf::int32 value) {
  set_has_is_trading_day();
  is_trading_day_ = value;
  // @@protoc_insertion_point(field_set:quotation.TradingDay.is_trading_day)
}

// -------------------------------------------------------------------

// EtfConstituentStock

// required string stock_id = 1;
inline bool EtfConstituentStock::has_stock_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EtfConstituentStock::set_has_stock_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EtfConstituentStock::clear_has_stock_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EtfConstituentStock::clear_stock_id() {
  stock_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stock_id();
}
inline const ::std::string& EtfConstituentStock::stock_id() const {
  // @@protoc_insertion_point(field_get:quotation.EtfConstituentStock.stock_id)
  return stock_id_.GetNoArena();
}
inline void EtfConstituentStock::set_stock_id(const ::std::string& value) {
  set_has_stock_id();
  stock_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.EtfConstituentStock.stock_id)
}
#if LANG_CXX11
inline void EtfConstituentStock::set_stock_id(::std::string&& value) {
  set_has_stock_id();
  stock_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.EtfConstituentStock.stock_id)
}
#endif
inline void EtfConstituentStock::set_stock_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_stock_id();
  stock_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.EtfConstituentStock.stock_id)
}
inline void EtfConstituentStock::set_stock_id(const char* value, size_t size) {
  set_has_stock_id();
  stock_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.EtfConstituentStock.stock_id)
}
inline ::std::string* EtfConstituentStock::mutable_stock_id() {
  set_has_stock_id();
  // @@protoc_insertion_point(field_mutable:quotation.EtfConstituentStock.stock_id)
  return stock_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EtfConstituentStock::release_stock_id() {
  // @@protoc_insertion_point(field_release:quotation.EtfConstituentStock.stock_id)
  if (!has_stock_id()) {
    return NULL;
  }
  clear_has_stock_id();
  return stock_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EtfConstituentStock::set_allocated_stock_id(::std::string* stock_id) {
  if (stock_id != NULL) {
    set_has_stock_id();
  } else {
    clear_has_stock_id();
  }
  stock_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stock_id);
  // @@protoc_insertion_point(field_set_allocated:quotation.EtfConstituentStock.stock_id)
}

// optional string stock_name = 2;
inline bool EtfConstituentStock::has_stock_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EtfConstituentStock::set_has_stock_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EtfConstituentStock::clear_has_stock_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EtfConstituentStock::clear_stock_name() {
  stock_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stock_name();
}
inline const ::std::string& EtfConstituentStock::stock_name() const {
  // @@protoc_insertion_point(field_get:quotation.EtfConstituentStock.stock_name)
  return stock_name_.GetNoArena();
}
inline void EtfConstituentStock::set_stock_name(const ::std::string& value) {
  set_has_stock_name();
  stock_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.EtfConstituentStock.stock_name)
}
#if LANG_CXX11
inline void EtfConstituentStock::set_stock_name(::std::string&& value) {
  set_has_stock_name();
  stock_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.EtfConstituentStock.stock_name)
}
#endif
inline void EtfConstituentStock::set_stock_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_stock_name();
  stock_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.EtfConstituentStock.stock_name)
}
inline void EtfConstituentStock::set_stock_name(const char* value, size_t size) {
  set_has_stock_name();
  stock_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.EtfConstituentStock.stock_name)
}
inline ::std::string* EtfConstituentStock::mutable_stock_name() {
  set_has_stock_name();
  // @@protoc_insertion_point(field_mutable:quotation.EtfConstituentStock.stock_name)
  return stock_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EtfConstituentStock::release_stock_name() {
  // @@protoc_insertion_point(field_release:quotation.EtfConstituentStock.stock_name)
  if (!has_stock_name()) {
    return NULL;
  }
  clear_has_stock_name();
  return stock_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EtfConstituentStock::set_allocated_stock_name(::std::string* stock_name) {
  if (stock_name != NULL) {
    set_has_stock_name();
  } else {
    clear_has_stock_name();
  }
  stock_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stock_name);
  // @@protoc_insertion_point(field_set_allocated:quotation.EtfConstituentStock.stock_name)
}

// optional int32 market = 3;
inline bool EtfConstituentStock::has_market() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EtfConstituentStock::set_has_market() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EtfConstituentStock::clear_has_market() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EtfConstituentStock::clear_market() {
  market_ = 0;
  clear_has_market();
}
inline ::google::protobuf::int32 EtfConstituentStock::market() const {
  // @@protoc_insertion_point(field_get:quotation.EtfConstituentStock.market)
  return market_;
}
inline void EtfConstituentStock::set_market(::google::protobuf::int32 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:quotation.EtfConstituentStock.market)
}

// optional int64 volume = 4;
inline bool EtfConstituentStock::has_volume() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EtfConstituentStock::set_has_volume() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EtfConstituentStock::clear_has_volume() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EtfConstituentStock::clear_volume() {
  volume_ = GOOGLE_LONGLONG(0);
  clear_has_volume();
}
inline ::google::protobuf::int64 EtfConstituentStock::volume() const {
  // @@protoc_insertion_point(field_get:quotation.EtfConstituentStock.volume)
  return volume_;
}
inline void EtfConstituentStock::set_volume(::google::protobuf::int64 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:quotation.EtfConstituentStock.volume)
}

// optional int32 cash_replace_flag = 5;
inline bool EtfConstituentStock::has_cash_replace_flag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EtfConstituentStock::set_has_cash_replace_flag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EtfConstituentStock::clear_has_cash_replace_flag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EtfConstituentStock::clear_cash_replace_flag() {
  cash_replace_flag_ = 0;
  clear_has_cash_replace_flag();
}
inline ::google::protobuf::int32 EtfConstituentStock::cash_replace_flag() const {
  // @@protoc_insertion_point(field_get:quotation.EtfConstituentStock.cash_replace_flag)
  return cash_replace_flag_;
}
inline void EtfConstituentStock::set_cash_replace_flag(::google::protobuf::int32 value) {
  set_has_cash_replace_flag();
  cash_replace_flag_ = value;
  // @@protoc_insertion_point(field_set:quotation.EtfConstituentStock.cash_replace_flag)
}

// optional double cash_replace_premium_rate = 6;
inline bool EtfConstituentStock::has_cash_replace_premium_rate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EtfConstituentStock::set_has_cash_replace_premium_rate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EtfConstituentStock::clear_has_cash_replace_premium_rate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EtfConstituentStock::clear_cash_replace_premium_rate() {
  cash_replace_premium_rate_ = 0;
  clear_has_cash_replace_premium_rate();
}
inline double EtfConstituentStock::cash_replace_premium_rate() const {
  // @@protoc_insertion_point(field_get:quotation.EtfConstituentStock.cash_replace_premium_rate)
  return cash_replace_premium_rate_;
}
inline void EtfConstituentStock::set_cash_replace_premium_rate(double value) {
  set_has_cash_replace_premium_rate();
  cash_replace_premium_rate_ = value;
  // @@protoc_insertion_point(field_set:quotation.EtfConstituentStock.cash_replace_premium_rate)
}

// optional double cash_replace_amount = 7;
inline bool EtfConstituentStock::has_cash_replace_amount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EtfConstituentStock::set_has_cash_replace_amount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EtfConstituentStock::clear_has_cash_replace_amount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EtfConstituentStock::clear_cash_replace_amount() {
  cash_replace_amount_ = 0;
  clear_has_cash_replace_amount();
}
inline double EtfConstituentStock::cash_replace_amount() const {
  // @@protoc_insertion_point(field_get:quotation.EtfConstituentStock.cash_replace_amount)
  return cash_replace_amount_;
}
inline void EtfConstituentStock::set_cash_replace_amount(double value) {
  set_has_cash_replace_amount();
  cash_replace_amount_ = value;
  // @@protoc_insertion_point(field_set:quotation.EtfConstituentStock.cash_replace_amount)
}

// -------------------------------------------------------------------

// EtfListInfo

// required uint32 data_date = 1;
inline bool EtfListInfo::has_data_date() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EtfListInfo::set_has_data_date() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EtfListInfo::clear_has_data_date() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EtfListInfo::clear_data_date() {
  data_date_ = 0u;
  clear_has_data_date();
}
inline ::google::protobuf::uint32 EtfListInfo::data_date() const {
  // @@protoc_insertion_point(field_get:quotation.EtfListInfo.data_date)
  return data_date_;
}
inline void EtfListInfo::set_data_date(::google::protobuf::uint32 value) {
  set_has_data_date();
  data_date_ = value;
  // @@protoc_insertion_point(field_set:quotation.EtfListInfo.data_date)
}

// required uint32 data_time = 2;
inline bool EtfListInfo::has_data_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EtfListInfo::set_has_data_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EtfListInfo::clear_has_data_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EtfListInfo::clear_data_time() {
  data_time_ = 0u;
  clear_has_data_time();
}
inline ::google::protobuf::uint32 EtfListInfo::data_time() const {
  // @@protoc_insertion_point(field_get:quotation.EtfListInfo.data_time)
  return data_time_;
}
inline void EtfListInfo::set_data_time(::google::protobuf::uint32 value) {
  set_has_data_time();
  data_time_ = value;
  // @@protoc_insertion_point(field_set:quotation.EtfListInfo.data_time)
}

// optional uint32 pre_trading_day = 3;
inline bool EtfListInfo::has_pre_trading_day() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EtfListInfo::set_has_pre_trading_day() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EtfListInfo::clear_has_pre_trading_day() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EtfListInfo::clear_pre_trading_day() {
  pre_trading_day_ = 0u;
  clear_has_pre_trading_day();
}
inline ::google::protobuf::uint32 EtfListInfo::pre_trading_day() const {
  // @@protoc_insertion_point(field_get:quotation.EtfListInfo.pre_trading_day)
  return pre_trading_day_;
}
inline void EtfListInfo::set_pre_trading_day(::google::protobuf::uint32 value) {
  set_has_pre_trading_day();
  pre_trading_day_ = value;
  // @@protoc_insertion_point(field_set:quotation.EtfListInfo.pre_trading_day)
}

// optional string stock_id = 4;
inline bool EtfListInfo::has_stock_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EtfListInfo::set_has_stock_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EtfListInfo::clear_has_stock_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EtfListInfo::clear_stock_id() {
  stock_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stock_id();
}
inline const ::std::string& EtfListInfo::stock_id() const {
  // @@protoc_insertion_point(field_get:quotation.EtfListInfo.stock_id)
  return stock_id_.GetNoArena();
}
inline void EtfListInfo::set_stock_id(const ::std::string& value) {
  set_has_stock_id();
  stock_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.EtfListInfo.stock_id)
}
#if LANG_CXX11
inline void EtfListInfo::set_stock_id(::std::string&& value) {
  set_has_stock_id();
  stock_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.EtfListInfo.stock_id)
}
#endif
inline void EtfListInfo::set_stock_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_stock_id();
  stock_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.EtfListInfo.stock_id)
}
inline void EtfListInfo::set_stock_id(const char* value, size_t size) {
  set_has_stock_id();
  stock_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.EtfListInfo.stock_id)
}
inline ::std::string* EtfListInfo::mutable_stock_id() {
  set_has_stock_id();
  // @@protoc_insertion_point(field_mutable:quotation.EtfListInfo.stock_id)
  return stock_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EtfListInfo::release_stock_id() {
  // @@protoc_insertion_point(field_release:quotation.EtfListInfo.stock_id)
  if (!has_stock_id()) {
    return NULL;
  }
  clear_has_stock_id();
  return stock_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EtfListInfo::set_allocated_stock_id(::std::string* stock_id) {
  if (stock_id != NULL) {
    set_has_stock_id();
  } else {
    clear_has_stock_id();
  }
  stock_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stock_id);
  // @@protoc_insertion_point(field_set_allocated:quotation.EtfListInfo.stock_id)
}

// optional string primary_code = 5;
inline bool EtfListInfo::has_primary_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EtfListInfo::set_has_primary_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EtfListInfo::clear_has_primary_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EtfListInfo::clear_primary_code() {
  primary_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_primary_code();
}
inline const ::std::string& EtfListInfo::primary_code() const {
  // @@protoc_insertion_point(field_get:quotation.EtfListInfo.primary_code)
  return primary_code_.GetNoArena();
}
inline void EtfListInfo::set_primary_code(const ::std::string& value) {
  set_has_primary_code();
  primary_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.EtfListInfo.primary_code)
}
#if LANG_CXX11
inline void EtfListInfo::set_primary_code(::std::string&& value) {
  set_has_primary_code();
  primary_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.EtfListInfo.primary_code)
}
#endif
inline void EtfListInfo::set_primary_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_primary_code();
  primary_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.EtfListInfo.primary_code)
}
inline void EtfListInfo::set_primary_code(const char* value, size_t size) {
  set_has_primary_code();
  primary_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.EtfListInfo.primary_code)
}
inline ::std::string* EtfListInfo::mutable_primary_code() {
  set_has_primary_code();
  // @@protoc_insertion_point(field_mutable:quotation.EtfListInfo.primary_code)
  return primary_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EtfListInfo::release_primary_code() {
  // @@protoc_insertion_point(field_release:quotation.EtfListInfo.primary_code)
  if (!has_primary_code()) {
    return NULL;
  }
  clear_has_primary_code();
  return primary_code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EtfListInfo::set_allocated_primary_code(::std::string* primary_code) {
  if (primary_code != NULL) {
    set_has_primary_code();
  } else {
    clear_has_primary_code();
  }
  primary_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primary_code);
  // @@protoc_insertion_point(field_set_allocated:quotation.EtfListInfo.primary_code)
}

// optional string underlying_code = 6;
inline bool EtfListInfo::has_underlying_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EtfListInfo::set_has_underlying_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EtfListInfo::clear_has_underlying_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EtfListInfo::clear_underlying_code() {
  underlying_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_underlying_code();
}
inline const ::std::string& EtfListInfo::underlying_code() const {
  // @@protoc_insertion_point(field_get:quotation.EtfListInfo.underlying_code)
  return underlying_code_.GetNoArena();
}
inline void EtfListInfo::set_underlying_code(const ::std::string& value) {
  set_has_underlying_code();
  underlying_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.EtfListInfo.underlying_code)
}
#if LANG_CXX11
inline void EtfListInfo::set_underlying_code(::std::string&& value) {
  set_has_underlying_code();
  underlying_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.EtfListInfo.underlying_code)
}
#endif
inline void EtfListInfo::set_underlying_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_underlying_code();
  underlying_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.EtfListInfo.underlying_code)
}
inline void EtfListInfo::set_underlying_code(const char* value, size_t size) {
  set_has_underlying_code();
  underlying_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.EtfListInfo.underlying_code)
}
inline ::std::string* EtfListInfo::mutable_underlying_code() {
  set_has_underlying_code();
  // @@protoc_insertion_point(field_mutable:quotation.EtfListInfo.underlying_code)
  return underlying_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EtfListInfo::release_underlying_code() {
  // @@protoc_insertion_point(field_release:quotation.EtfListInfo.underlying_code)
  if (!has_underlying_code()) {
    return NULL;
  }
  clear_has_underlying_code();
  return underlying_code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EtfListInfo::set_allocated_underlying_code(::std::string* underlying_code) {
  if (underlying_code != NULL) {
    set_has_underlying_code();
  } else {
    clear_has_underlying_code();
  }
  underlying_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), underlying_code);
  // @@protoc_insertion_point(field_set_allocated:quotation.EtfListInfo.underlying_code)
}

// optional int32 market = 7;
inline bool EtfListInfo::has_market() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void EtfListInfo::set_has_market() {
  _has_bits_[0] |= 0x00000100u;
}
inline void EtfListInfo::clear_has_market() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void EtfListInfo::clear_market() {
  market_ = 0;
  clear_has_market();
}
inline ::google::protobuf::int32 EtfListInfo::market() const {
  // @@protoc_insertion_point(field_get:quotation.EtfListInfo.market)
  return market_;
}
inline void EtfListInfo::set_market(::google::protobuf::int32 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:quotation.EtfListInfo.market)
}

// optional string stock_name = 8;
inline bool EtfListInfo::has_stock_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EtfListInfo::set_has_stock_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EtfListInfo::clear_has_stock_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EtfListInfo::clear_stock_name() {
  stock_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stock_name();
}
inline const ::std::string& EtfListInfo::stock_name() const {
  // @@protoc_insertion_point(field_get:quotation.EtfListInfo.stock_name)
  return stock_name_.GetNoArena();
}
inline void EtfListInfo::set_stock_name(const ::std::string& value) {
  set_has_stock_name();
  stock_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.EtfListInfo.stock_name)
}
#if LANG_CXX11
inline void EtfListInfo::set_stock_name(::std::string&& value) {
  set_has_stock_name();
  stock_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.EtfListInfo.stock_name)
}
#endif
inline void EtfListInfo::set_stock_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_stock_name();
  stock_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.EtfListInfo.stock_name)
}
inline void EtfListInfo::set_stock_name(const char* value, size_t size) {
  set_has_stock_name();
  stock_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.EtfListInfo.stock_name)
}
inline ::std::string* EtfListInfo::mutable_stock_name() {
  set_has_stock_name();
  // @@protoc_insertion_point(field_mutable:quotation.EtfListInfo.stock_name)
  return stock_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EtfListInfo::release_stock_name() {
  // @@protoc_insertion_point(field_release:quotation.EtfListInfo.stock_name)
  if (!has_stock_name()) {
    return NULL;
  }
  clear_has_stock_name();
  return stock_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EtfListInfo::set_allocated_stock_name(::std::string* stock_name) {
  if (stock_name != NULL) {
    set_has_stock_name();
  } else {
    clear_has_stock_name();
  }
  stock_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stock_name);
  // @@protoc_insertion_point(field_set_allocated:quotation.EtfListInfo.stock_name)
}

// optional string company_name = 9;
inline bool EtfListInfo::has_company_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EtfListInfo::set_has_company_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EtfListInfo::clear_has_company_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EtfListInfo::clear_company_name() {
  company_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_company_name();
}
inline const ::std::string& EtfListInfo::company_name() const {
  // @@protoc_insertion_point(field_get:quotation.EtfListInfo.company_name)
  return company_name_.GetNoArena();
}
inline void EtfListInfo::set_company_name(const ::std::string& value) {
  set_has_company_name();
  company_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.EtfListInfo.company_name)
}
#if LANG_CXX11
inline void EtfListInfo::set_company_name(::std::string&& value) {
  set_has_company_name();
  company_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.EtfListInfo.company_name)
}
#endif
inline void EtfListInfo::set_company_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_company_name();
  company_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.EtfListInfo.company_name)
}
inline void EtfListInfo::set_company_name(const char* value, size_t size) {
  set_has_company_name();
  company_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.EtfListInfo.company_name)
}
inline ::std::string* EtfListInfo::mutable_company_name() {
  set_has_company_name();
  // @@protoc_insertion_point(field_mutable:quotation.EtfListInfo.company_name)
  return company_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EtfListInfo::release_company_name() {
  // @@protoc_insertion_point(field_release:quotation.EtfListInfo.company_name)
  if (!has_company_name()) {
    return NULL;
  }
  clear_has_company_name();
  return company_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EtfListInfo::set_allocated_company_name(::std::string* company_name) {
  if (company_name != NULL) {
    set_has_company_name();
  } else {
    clear_has_company_name();
  }
  company_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), company_name);
  // @@protoc_insertion_point(field_set_allocated:quotation.EtfListInfo.company_name)
}

// optional double pre_cash_diff = 10;
inline bool EtfListInfo::has_pre_cash_diff() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void EtfListInfo::set_has_pre_cash_diff() {
  _has_bits_[0] |= 0x00000200u;
}
inline void EtfListInfo::clear_has_pre_cash_diff() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void EtfListInfo::clear_pre_cash_diff() {
  pre_cash_diff_ = 0;
  clear_has_pre_cash_diff();
}
inline double EtfListInfo::pre_cash_diff() const {
  // @@protoc_insertion_point(field_get:quotation.EtfListInfo.pre_cash_diff)
  return pre_cash_diff_;
}
inline void EtfListInfo::set_pre_cash_diff(double value) {
  set_has_pre_cash_diff();
  pre_cash_diff_ = value;
  // @@protoc_insertion_point(field_set:quotation.EtfListInfo.pre_cash_diff)
}

// optional double pre_unit_iopv = 11;
inline bool EtfListInfo::has_pre_unit_iopv() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void EtfListInfo::set_has_pre_unit_iopv() {
  _has_bits_[0] |= 0x00000400u;
}
inline void EtfListInfo::clear_has_pre_unit_iopv() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void EtfListInfo::clear_pre_unit_iopv() {
  pre_unit_iopv_ = 0;
  clear_has_pre_unit_iopv();
}
inline double EtfListInfo::pre_unit_iopv() const {
  // @@protoc_insertion_point(field_get:quotation.EtfListInfo.pre_unit_iopv)
  return pre_unit_iopv_;
}
inline void EtfListInfo::set_pre_unit_iopv(double value) {
  set_has_pre_unit_iopv();
  pre_unit_iopv_ = value;
  // @@protoc_insertion_point(field_set:quotation.EtfListInfo.pre_unit_iopv)
}

// optional double pre_iopv = 12;
inline bool EtfListInfo::has_pre_iopv() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void EtfListInfo::set_has_pre_iopv() {
  _has_bits_[0] |= 0x00000800u;
}
inline void EtfListInfo::clear_has_pre_iopv() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void EtfListInfo::clear_pre_iopv() {
  pre_iopv_ = 0;
  clear_has_pre_iopv();
}
inline double EtfListInfo::pre_iopv() const {
  // @@protoc_insertion_point(field_get:quotation.EtfListInfo.pre_iopv)
  return pre_iopv_;
}
inline void EtfListInfo::set_pre_iopv(double value) {
  set_has_pre_iopv();
  pre_iopv_ = value;
  // @@protoc_insertion_point(field_set:quotation.EtfListInfo.pre_iopv)
}

// optional double estimate_cash = 13;
inline bool EtfListInfo::has_estimate_cash() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void EtfListInfo::set_has_estimate_cash() {
  _has_bits_[0] |= 0x00001000u;
}
inline void EtfListInfo::clear_has_estimate_cash() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void EtfListInfo::clear_estimate_cash() {
  estimate_cash_ = 0;
  clear_has_estimate_cash();
}
inline double EtfListInfo::estimate_cash() const {
  // @@protoc_insertion_point(field_get:quotation.EtfListInfo.estimate_cash)
  return estimate_cash_;
}
inline void EtfListInfo::set_estimate_cash(double value) {
  set_has_estimate_cash();
  estimate_cash_ = value;
  // @@protoc_insertion_point(field_set:quotation.EtfListInfo.estimate_cash)
}

// optional double max_cash_replace_rate = 14;
inline bool EtfListInfo::has_max_cash_replace_rate() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void EtfListInfo::set_has_max_cash_replace_rate() {
  _has_bits_[0] |= 0x00002000u;
}
inline void EtfListInfo::clear_has_max_cash_replace_rate() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void EtfListInfo::clear_max_cash_replace_rate() {
  max_cash_replace_rate_ = 0;
  clear_has_max_cash_replace_rate();
}
inline double EtfListInfo::max_cash_replace_rate() const {
  // @@protoc_insertion_point(field_get:quotation.EtfListInfo.max_cash_replace_rate)
  return max_cash_replace_rate_;
}
inline void EtfListInfo::set_max_cash_replace_rate(double value) {
  set_has_max_cash_replace_rate();
  max_cash_replace_rate_ = value;
  // @@protoc_insertion_point(field_set:quotation.EtfListInfo.max_cash_replace_rate)
}

// optional int64 max_purchase_volume = 15;
inline bool EtfListInfo::has_max_purchase_volume() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void EtfListInfo::set_has_max_purchase_volume() {
  _has_bits_[0] |= 0x00004000u;
}
inline void EtfListInfo::clear_has_max_purchase_volume() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void EtfListInfo::clear_max_purchase_volume() {
  max_purchase_volume_ = GOOGLE_LONGLONG(0);
  clear_has_max_purchase_volume();
}
inline ::google::protobuf::int64 EtfListInfo::max_purchase_volume() const {
  // @@protoc_insertion_point(field_get:quotation.EtfListInfo.max_purchase_volume)
  return max_purchase_volume_;
}
inline void EtfListInfo::set_max_purchase_volume(::google::protobuf::int64 value) {
  set_has_max_purchase_volume();
  max_purchase_volume_ = value;
  // @@protoc_insertion_point(field_set:quotation.EtfListInfo.max_purchase_volume)
}

// optional int64 max_redeem_volume = 16;
inline bool EtfListInfo::has_max_redeem_volume() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void EtfListInfo::set_has_max_redeem_volume() {
  _has_bits_[0] |= 0x00008000u;
}
inline void EtfListInfo::clear_has_max_redeem_volume() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void EtfListInfo::clear_max_redeem_volume() {
  max_redeem_volume_ = GOOGLE_LONGLONG(0);
  clear_has_max_redeem_volume();
}
inline ::google::protobuf::int64 EtfListInfo::max_redeem_volume() const {
  // @@protoc_insertion_point(field_get:quotation.EtfListInfo.max_redeem_volume)
  return max_redeem_volume_;
}
inline void EtfListInfo::set_max_redeem_volume(::google::protobuf::int64 value) {
  set_has_max_redeem_volume();
  max_redeem_volume_ = value;
  // @@protoc_insertion_point(field_set:quotation.EtfListInfo.max_redeem_volume)
}

// optional int32 is_publish_iopv = 17;
inline bool EtfListInfo::has_is_publish_iopv() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void EtfListInfo::set_has_is_publish_iopv() {
  _has_bits_[0] |= 0x00020000u;
}
inline void EtfListInfo::clear_has_is_publish_iopv() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void EtfListInfo::clear_is_publish_iopv() {
  is_publish_iopv_ = 0;
  clear_has_is_publish_iopv();
}
inline ::google::protobuf::int32 EtfListInfo::is_publish_iopv() const {
  // @@protoc_insertion_point(field_get:quotation.EtfListInfo.is_publish_iopv)
  return is_publish_iopv_;
}
inline void EtfListInfo::set_is_publish_iopv(::google::protobuf::int32 value) {
  set_has_is_publish_iopv();
  is_publish_iopv_ = value;
  // @@protoc_insertion_point(field_set:quotation.EtfListInfo.is_publish_iopv)
}

// optional int64 unit_volume = 18;
inline bool EtfListInfo::has_unit_volume() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void EtfListInfo::set_has_unit_volume() {
  _has_bits_[0] |= 0x00010000u;
}
inline void EtfListInfo::clear_has_unit_volume() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void EtfListInfo::clear_unit_volume() {
  unit_volume_ = GOOGLE_LONGLONG(0);
  clear_has_unit_volume();
}
inline ::google::protobuf::int64 EtfListInfo::unit_volume() const {
  // @@protoc_insertion_point(field_get:quotation.EtfListInfo.unit_volume)
  return unit_volume_;
}
inline void EtfListInfo::set_unit_volume(::google::protobuf::int64 value) {
  set_has_unit_volume();
  unit_volume_ = value;
  // @@protoc_insertion_point(field_set:quotation.EtfListInfo.unit_volume)
}

// optional int64 compose_count = 19;
inline bool EtfListInfo::has_compose_count() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void EtfListInfo::set_has_compose_count() {
  _has_bits_[0] |= 0x00080000u;
}
inline void EtfListInfo::clear_has_compose_count() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void EtfListInfo::clear_compose_count() {
  compose_count_ = GOOGLE_LONGLONG(0);
  clear_has_compose_count();
}
inline ::google::protobuf::int64 EtfListInfo::compose_count() const {
  // @@protoc_insertion_point(field_get:quotation.EtfListInfo.compose_count)
  return compose_count_;
}
inline void EtfListInfo::set_compose_count(::google::protobuf::int64 value) {
  set_has_compose_count();
  compose_count_ = value;
  // @@protoc_insertion_point(field_set:quotation.EtfListInfo.compose_count)
}

// optional int32 is_open_purchase = 20;
inline bool EtfListInfo::has_is_open_purchase() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void EtfListInfo::set_has_is_open_purchase() {
  _has_bits_[0] |= 0x00040000u;
}
inline void EtfListInfo::clear_has_is_open_purchase() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void EtfListInfo::clear_is_open_purchase() {
  is_open_purchase_ = 0;
  clear_has_is_open_purchase();
}
inline ::google::protobuf::int32 EtfListInfo::is_open_purchase() const {
  // @@protoc_insertion_point(field_get:quotation.EtfListInfo.is_open_purchase)
  return is_open_purchase_;
}
inline void EtfListInfo::set_is_open_purchase(::google::protobuf::int32 value) {
  set_has_is_open_purchase();
  is_open_purchase_ = value;
  // @@protoc_insertion_point(field_set:quotation.EtfListInfo.is_open_purchase)
}

// optional int32 is_open_redeem = 21;
inline bool EtfListInfo::has_is_open_redeem() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void EtfListInfo::set_has_is_open_redeem() {
  _has_bits_[0] |= 0x00100000u;
}
inline void EtfListInfo::clear_has_is_open_redeem() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void EtfListInfo::clear_is_open_redeem() {
  is_open_redeem_ = 0;
  clear_has_is_open_redeem();
}
inline ::google::protobuf::int32 EtfListInfo::is_open_redeem() const {
  // @@protoc_insertion_point(field_get:quotation.EtfListInfo.is_open_redeem)
  return is_open_redeem_;
}
inline void EtfListInfo::set_is_open_redeem(::google::protobuf::int32 value) {
  set_has_is_open_redeem();
  is_open_redeem_ = value;
  // @@protoc_insertion_point(field_set:quotation.EtfListInfo.is_open_redeem)
}

// repeated .quotation.EtfConstituentStock stocks = 22;
inline int EtfListInfo::stocks_size() const {
  return stocks_.size();
}
inline void EtfListInfo::clear_stocks() {
  stocks_.Clear();
}
inline ::quotation::EtfConstituentStock* EtfListInfo::mutable_stocks(int index) {
  // @@protoc_insertion_point(field_mutable:quotation.EtfListInfo.stocks)
  return stocks_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::quotation::EtfConstituentStock >*
EtfListInfo::mutable_stocks() {
  // @@protoc_insertion_point(field_mutable_list:quotation.EtfListInfo.stocks)
  return &stocks_;
}
inline const ::quotation::EtfConstituentStock& EtfListInfo::stocks(int index) const {
  // @@protoc_insertion_point(field_get:quotation.EtfListInfo.stocks)
  return stocks_.Get(index);
}
inline ::quotation::EtfConstituentStock* EtfListInfo::add_stocks() {
  // @@protoc_insertion_point(field_add:quotation.EtfListInfo.stocks)
  return stocks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::quotation::EtfConstituentStock >&
EtfListInfo::stocks() const {
  // @@protoc_insertion_point(field_list:quotation.EtfListInfo.stocks)
  return stocks_;
}

// -------------------------------------------------------------------

// EtfFees_EtfFee

// required string code = 1;
inline bool EtfFees_EtfFee::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EtfFees_EtfFee::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EtfFees_EtfFee::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EtfFees_EtfFee::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& EtfFees_EtfFee::code() const {
  // @@protoc_insertion_point(field_get:quotation.EtfFees.EtfFee.code)
  return code_.GetNoArena();
}
inline void EtfFees_EtfFee::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.EtfFees.EtfFee.code)
}
#if LANG_CXX11
inline void EtfFees_EtfFee::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.EtfFees.EtfFee.code)
}
#endif
inline void EtfFees_EtfFee::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.EtfFees.EtfFee.code)
}
inline void EtfFees_EtfFee::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.EtfFees.EtfFee.code)
}
inline ::std::string* EtfFees_EtfFee::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:quotation.EtfFees.EtfFee.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EtfFees_EtfFee::release_code() {
  // @@protoc_insertion_point(field_release:quotation.EtfFees.EtfFee.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EtfFees_EtfFee::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:quotation.EtfFees.EtfFee.code)
}

// optional double create_fee = 2;
inline bool EtfFees_EtfFee::has_create_fee() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EtfFees_EtfFee::set_has_create_fee() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EtfFees_EtfFee::clear_has_create_fee() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EtfFees_EtfFee::clear_create_fee() {
  create_fee_ = 0;
  clear_has_create_fee();
}
inline double EtfFees_EtfFee::create_fee() const {
  // @@protoc_insertion_point(field_get:quotation.EtfFees.EtfFee.create_fee)
  return create_fee_;
}
inline void EtfFees_EtfFee::set_create_fee(double value) {
  set_has_create_fee();
  create_fee_ = value;
  // @@protoc_insertion_point(field_set:quotation.EtfFees.EtfFee.create_fee)
}

// optional double redeem_fee = 3;
inline bool EtfFees_EtfFee::has_redeem_fee() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EtfFees_EtfFee::set_has_redeem_fee() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EtfFees_EtfFee::clear_has_redeem_fee() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EtfFees_EtfFee::clear_redeem_fee() {
  redeem_fee_ = 0;
  clear_has_redeem_fee();
}
inline double EtfFees_EtfFee::redeem_fee() const {
  // @@protoc_insertion_point(field_get:quotation.EtfFees.EtfFee.redeem_fee)
  return redeem_fee_;
}
inline void EtfFees_EtfFee::set_redeem_fee(double value) {
  set_has_redeem_fee();
  redeem_fee_ = value;
  // @@protoc_insertion_point(field_set:quotation.EtfFees.EtfFee.redeem_fee)
}

// -------------------------------------------------------------------

// EtfFees

// required uint64 timestamp = 1;
inline bool EtfFees::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EtfFees::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EtfFees::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EtfFees::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 EtfFees::timestamp() const {
  // @@protoc_insertion_point(field_get:quotation.EtfFees.timestamp)
  return timestamp_;
}
inline void EtfFees::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:quotation.EtfFees.timestamp)
}

// repeated .quotation.EtfFees.EtfFee items = 2;
inline int EtfFees::items_size() const {
  return items_.size();
}
inline void EtfFees::clear_items() {
  items_.Clear();
}
inline ::quotation::EtfFees_EtfFee* EtfFees::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:quotation.EtfFees.items)
  return items_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::quotation::EtfFees_EtfFee >*
EtfFees::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:quotation.EtfFees.items)
  return &items_;
}
inline const ::quotation::EtfFees_EtfFee& EtfFees::items(int index) const {
  // @@protoc_insertion_point(field_get:quotation.EtfFees.items)
  return items_.Get(index);
}
inline ::quotation::EtfFees_EtfFee* EtfFees::add_items() {
  // @@protoc_insertion_point(field_add:quotation.EtfFees.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::quotation::EtfFees_EtfFee >&
EtfFees::items() const {
  // @@protoc_insertion_point(field_list:quotation.EtfFees.items)
  return items_;
}

// -------------------------------------------------------------------

// StockAmendments_StockAmendment

// required string code = 1;
inline bool StockAmendments_StockAmendment::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockAmendments_StockAmendment::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockAmendments_StockAmendment::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockAmendments_StockAmendment::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& StockAmendments_StockAmendment::code() const {
  // @@protoc_insertion_point(field_get:quotation.StockAmendments.StockAmendment.code)
  return code_.GetNoArena();
}
inline void StockAmendments_StockAmendment::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.StockAmendments.StockAmendment.code)
}
#if LANG_CXX11
inline void StockAmendments_StockAmendment::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.StockAmendments.StockAmendment.code)
}
#endif
inline void StockAmendments_StockAmendment::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.StockAmendments.StockAmendment.code)
}
inline void StockAmendments_StockAmendment::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.StockAmendments.StockAmendment.code)
}
inline ::std::string* StockAmendments_StockAmendment::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:quotation.StockAmendments.StockAmendment.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockAmendments_StockAmendment::release_code() {
  // @@protoc_insertion_point(field_release:quotation.StockAmendments.StockAmendment.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockAmendments_StockAmendment::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:quotation.StockAmendments.StockAmendment.code)
}

// required string name = 2;
inline bool StockAmendments_StockAmendment::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockAmendments_StockAmendment::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockAmendments_StockAmendment::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockAmendments_StockAmendment::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& StockAmendments_StockAmendment::name() const {
  // @@protoc_insertion_point(field_get:quotation.StockAmendments.StockAmendment.name)
  return name_.GetNoArena();
}
inline void StockAmendments_StockAmendment::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.StockAmendments.StockAmendment.name)
}
#if LANG_CXX11
inline void StockAmendments_StockAmendment::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.StockAmendments.StockAmendment.name)
}
#endif
inline void StockAmendments_StockAmendment::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.StockAmendments.StockAmendment.name)
}
inline void StockAmendments_StockAmendment::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.StockAmendments.StockAmendment.name)
}
inline ::std::string* StockAmendments_StockAmendment::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:quotation.StockAmendments.StockAmendment.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockAmendments_StockAmendment::release_name() {
  // @@protoc_insertion_point(field_release:quotation.StockAmendments.StockAmendment.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockAmendments_StockAmendment::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:quotation.StockAmendments.StockAmendment.name)
}

// optional int64 state = 3;
inline bool StockAmendments_StockAmendment::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StockAmendments_StockAmendment::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StockAmendments_StockAmendment::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StockAmendments_StockAmendment::clear_state() {
  state_ = GOOGLE_LONGLONG(0);
  clear_has_state();
}
inline ::google::protobuf::int64 StockAmendments_StockAmendment::state() const {
  // @@protoc_insertion_point(field_get:quotation.StockAmendments.StockAmendment.state)
  return state_;
}
inline void StockAmendments_StockAmendment::set_state(::google::protobuf::int64 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:quotation.StockAmendments.StockAmendment.state)
}

// optional double create_change = 4;
inline bool StockAmendments_StockAmendment::has_create_change() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StockAmendments_StockAmendment::set_has_create_change() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StockAmendments_StockAmendment::clear_has_create_change() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StockAmendments_StockAmendment::clear_create_change() {
  create_change_ = 0;
  clear_has_create_change();
}
inline double StockAmendments_StockAmendment::create_change() const {
  // @@protoc_insertion_point(field_get:quotation.StockAmendments.StockAmendment.create_change)
  return create_change_;
}
inline void StockAmendments_StockAmendment::set_create_change(double value) {
  set_has_create_change();
  create_change_ = value;
  // @@protoc_insertion_point(field_set:quotation.StockAmendments.StockAmendment.create_change)
}

// optional double redeem_change = 5;
inline bool StockAmendments_StockAmendment::has_redeem_change() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StockAmendments_StockAmendment::set_has_redeem_change() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StockAmendments_StockAmendment::clear_has_redeem_change() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StockAmendments_StockAmendment::clear_redeem_change() {
  redeem_change_ = 0;
  clear_has_redeem_change();
}
inline double StockAmendments_StockAmendment::redeem_change() const {
  // @@protoc_insertion_point(field_get:quotation.StockAmendments.StockAmendment.redeem_change)
  return redeem_change_;
}
inline void StockAmendments_StockAmendment::set_redeem_change(double value) {
  set_has_redeem_change();
  redeem_change_ = value;
  // @@protoc_insertion_point(field_set:quotation.StockAmendments.StockAmendment.redeem_change)
}

// -------------------------------------------------------------------

// StockAmendments

// required uint64 timestamp = 1;
inline bool StockAmendments::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockAmendments::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockAmendments::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockAmendments::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 StockAmendments::timestamp() const {
  // @@protoc_insertion_point(field_get:quotation.StockAmendments.timestamp)
  return timestamp_;
}
inline void StockAmendments::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:quotation.StockAmendments.timestamp)
}

// repeated .quotation.StockAmendments.StockAmendment items = 2;
inline int StockAmendments::items_size() const {
  return items_.size();
}
inline void StockAmendments::clear_items() {
  items_.Clear();
}
inline ::quotation::StockAmendments_StockAmendment* StockAmendments::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:quotation.StockAmendments.items)
  return items_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::quotation::StockAmendments_StockAmendment >*
StockAmendments::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:quotation.StockAmendments.items)
  return &items_;
}
inline const ::quotation::StockAmendments_StockAmendment& StockAmendments::items(int index) const {
  // @@protoc_insertion_point(field_get:quotation.StockAmendments.items)
  return items_.Get(index);
}
inline ::quotation::StockAmendments_StockAmendment* StockAmendments::add_items() {
  // @@protoc_insertion_point(field_add:quotation.StockAmendments.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::quotation::StockAmendments_StockAmendment >&
StockAmendments::items() const {
  // @@protoc_insertion_point(field_list:quotation.StockAmendments.items)
  return items_;
}

// -------------------------------------------------------------------

// GradedFundInfo

// required uint32 data_date = 1;
inline bool GradedFundInfo::has_data_date() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void GradedFundInfo::set_has_data_date() {
  _has_bits_[0] |= 0x00400000u;
}
inline void GradedFundInfo::clear_has_data_date() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void GradedFundInfo::clear_data_date() {
  data_date_ = 0u;
  clear_has_data_date();
}
inline ::google::protobuf::uint32 GradedFundInfo::data_date() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundInfo.data_date)
  return data_date_;
}
inline void GradedFundInfo::set_data_date(::google::protobuf::uint32 value) {
  set_has_data_date();
  data_date_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundInfo.data_date)
}

// optional string fof_code = 2;
inline bool GradedFundInfo::has_fof_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GradedFundInfo::set_has_fof_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GradedFundInfo::clear_has_fof_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GradedFundInfo::clear_fof_code() {
  fof_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fof_code();
}
inline const ::std::string& GradedFundInfo::fof_code() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundInfo.fof_code)
  return fof_code_.GetNoArena();
}
inline void GradedFundInfo::set_fof_code(const ::std::string& value) {
  set_has_fof_code();
  fof_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.GradedFundInfo.fof_code)
}
#if LANG_CXX11
inline void GradedFundInfo::set_fof_code(::std::string&& value) {
  set_has_fof_code();
  fof_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.GradedFundInfo.fof_code)
}
#endif
inline void GradedFundInfo::set_fof_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fof_code();
  fof_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.GradedFundInfo.fof_code)
}
inline void GradedFundInfo::set_fof_code(const char* value, size_t size) {
  set_has_fof_code();
  fof_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.GradedFundInfo.fof_code)
}
inline ::std::string* GradedFundInfo::mutable_fof_code() {
  set_has_fof_code();
  // @@protoc_insertion_point(field_mutable:quotation.GradedFundInfo.fof_code)
  return fof_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GradedFundInfo::release_fof_code() {
  // @@protoc_insertion_point(field_release:quotation.GradedFundInfo.fof_code)
  if (!has_fof_code()) {
    return NULL;
  }
  clear_has_fof_code();
  return fof_code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GradedFundInfo::set_allocated_fof_code(::std::string* fof_code) {
  if (fof_code != NULL) {
    set_has_fof_code();
  } else {
    clear_has_fof_code();
  }
  fof_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fof_code);
  // @@protoc_insertion_point(field_set_allocated:quotation.GradedFundInfo.fof_code)
}

// optional string fof_name = 3;
inline bool GradedFundInfo::has_fof_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GradedFundInfo::set_has_fof_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GradedFundInfo::clear_has_fof_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GradedFundInfo::clear_fof_name() {
  fof_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fof_name();
}
inline const ::std::string& GradedFundInfo::fof_name() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundInfo.fof_name)
  return fof_name_.GetNoArena();
}
inline void GradedFundInfo::set_fof_name(const ::std::string& value) {
  set_has_fof_name();
  fof_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.GradedFundInfo.fof_name)
}
#if LANG_CXX11
inline void GradedFundInfo::set_fof_name(::std::string&& value) {
  set_has_fof_name();
  fof_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.GradedFundInfo.fof_name)
}
#endif
inline void GradedFundInfo::set_fof_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fof_name();
  fof_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.GradedFundInfo.fof_name)
}
inline void GradedFundInfo::set_fof_name(const char* value, size_t size) {
  set_has_fof_name();
  fof_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.GradedFundInfo.fof_name)
}
inline ::std::string* GradedFundInfo::mutable_fof_name() {
  set_has_fof_name();
  // @@protoc_insertion_point(field_mutable:quotation.GradedFundInfo.fof_name)
  return fof_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GradedFundInfo::release_fof_name() {
  // @@protoc_insertion_point(field_release:quotation.GradedFundInfo.fof_name)
  if (!has_fof_name()) {
    return NULL;
  }
  clear_has_fof_name();
  return fof_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GradedFundInfo::set_allocated_fof_name(::std::string* fof_name) {
  if (fof_name != NULL) {
    set_has_fof_name();
  } else {
    clear_has_fof_name();
  }
  fof_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fof_name);
  // @@protoc_insertion_point(field_set_allocated:quotation.GradedFundInfo.fof_name)
}

// optional double fof_quota = 4;
inline bool GradedFundInfo::has_fof_quota() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GradedFundInfo::set_has_fof_quota() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GradedFundInfo::clear_has_fof_quota() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GradedFundInfo::clear_fof_quota() {
  fof_quota_ = 0;
  clear_has_fof_quota();
}
inline double GradedFundInfo::fof_quota() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundInfo.fof_quota)
  return fof_quota_;
}
inline void GradedFundInfo::set_fof_quota(double value) {
  set_has_fof_quota();
  fof_quota_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundInfo.fof_quota)
}

// optional double fof_pre_nav = 5;
inline bool GradedFundInfo::has_fof_pre_nav() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GradedFundInfo::set_has_fof_pre_nav() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GradedFundInfo::clear_has_fof_pre_nav() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GradedFundInfo::clear_fof_pre_nav() {
  fof_pre_nav_ = 0;
  clear_has_fof_pre_nav();
}
inline double GradedFundInfo::fof_pre_nav() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundInfo.fof_pre_nav)
  return fof_pre_nav_;
}
inline void GradedFundInfo::set_fof_pre_nav(double value) {
  set_has_fof_pre_nav();
  fof_pre_nav_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundInfo.fof_pre_nav)
}

// optional double fof_nav = 6;
inline bool GradedFundInfo::has_fof_nav() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GradedFundInfo::set_has_fof_nav() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GradedFundInfo::clear_has_fof_nav() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GradedFundInfo::clear_fof_nav() {
  fof_nav_ = 0;
  clear_has_fof_nav();
}
inline double GradedFundInfo::fof_nav() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundInfo.fof_nav)
  return fof_nav_;
}
inline void GradedFundInfo::set_fof_nav(double value) {
  set_has_fof_nav();
  fof_nav_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundInfo.fof_nav)
}

// optional double fof_market_value = 7;
inline bool GradedFundInfo::has_fof_market_value() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GradedFundInfo::set_has_fof_market_value() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GradedFundInfo::clear_has_fof_market_value() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GradedFundInfo::clear_fof_market_value() {
  fof_market_value_ = 0;
  clear_has_fof_market_value();
}
inline double GradedFundInfo::fof_market_value() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundInfo.fof_market_value)
  return fof_market_value_;
}
inline void GradedFundInfo::set_fof_market_value(double value) {
  set_has_fof_market_value();
  fof_market_value_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundInfo.fof_market_value)
}

// optional string a_code = 8;
inline bool GradedFundInfo::has_a_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GradedFundInfo::set_has_a_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GradedFundInfo::clear_has_a_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GradedFundInfo::clear_a_code() {
  a_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_a_code();
}
inline const ::std::string& GradedFundInfo::a_code() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundInfo.a_code)
  return a_code_.GetNoArena();
}
inline void GradedFundInfo::set_a_code(const ::std::string& value) {
  set_has_a_code();
  a_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.GradedFundInfo.a_code)
}
#if LANG_CXX11
inline void GradedFundInfo::set_a_code(::std::string&& value) {
  set_has_a_code();
  a_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.GradedFundInfo.a_code)
}
#endif
inline void GradedFundInfo::set_a_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_a_code();
  a_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.GradedFundInfo.a_code)
}
inline void GradedFundInfo::set_a_code(const char* value, size_t size) {
  set_has_a_code();
  a_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.GradedFundInfo.a_code)
}
inline ::std::string* GradedFundInfo::mutable_a_code() {
  set_has_a_code();
  // @@protoc_insertion_point(field_mutable:quotation.GradedFundInfo.a_code)
  return a_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GradedFundInfo::release_a_code() {
  // @@protoc_insertion_point(field_release:quotation.GradedFundInfo.a_code)
  if (!has_a_code()) {
    return NULL;
  }
  clear_has_a_code();
  return a_code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GradedFundInfo::set_allocated_a_code(::std::string* a_code) {
  if (a_code != NULL) {
    set_has_a_code();
  } else {
    clear_has_a_code();
  }
  a_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), a_code);
  // @@protoc_insertion_point(field_set_allocated:quotation.GradedFundInfo.a_code)
}

// optional string a_name = 9;
inline bool GradedFundInfo::has_a_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GradedFundInfo::set_has_a_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GradedFundInfo::clear_has_a_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GradedFundInfo::clear_a_name() {
  a_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_a_name();
}
inline const ::std::string& GradedFundInfo::a_name() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundInfo.a_name)
  return a_name_.GetNoArena();
}
inline void GradedFundInfo::set_a_name(const ::std::string& value) {
  set_has_a_name();
  a_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.GradedFundInfo.a_name)
}
#if LANG_CXX11
inline void GradedFundInfo::set_a_name(::std::string&& value) {
  set_has_a_name();
  a_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.GradedFundInfo.a_name)
}
#endif
inline void GradedFundInfo::set_a_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_a_name();
  a_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.GradedFundInfo.a_name)
}
inline void GradedFundInfo::set_a_name(const char* value, size_t size) {
  set_has_a_name();
  a_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.GradedFundInfo.a_name)
}
inline ::std::string* GradedFundInfo::mutable_a_name() {
  set_has_a_name();
  // @@protoc_insertion_point(field_mutable:quotation.GradedFundInfo.a_name)
  return a_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GradedFundInfo::release_a_name() {
  // @@protoc_insertion_point(field_release:quotation.GradedFundInfo.a_name)
  if (!has_a_name()) {
    return NULL;
  }
  clear_has_a_name();
  return a_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GradedFundInfo::set_allocated_a_name(::std::string* a_name) {
  if (a_name != NULL) {
    set_has_a_name();
  } else {
    clear_has_a_name();
  }
  a_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), a_name);
  // @@protoc_insertion_point(field_set_allocated:quotation.GradedFundInfo.a_name)
}

// optional double a_quota = 10;
inline bool GradedFundInfo::has_a_quota() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void GradedFundInfo::set_has_a_quota() {
  _has_bits_[0] |= 0x00010000u;
}
inline void GradedFundInfo::clear_has_a_quota() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void GradedFundInfo::clear_a_quota() {
  a_quota_ = 0;
  clear_has_a_quota();
}
inline double GradedFundInfo::a_quota() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundInfo.a_quota)
  return a_quota_;
}
inline void GradedFundInfo::set_a_quota(double value) {
  set_has_a_quota();
  a_quota_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundInfo.a_quota)
}

// optional double a_pre_nav = 11;
inline bool GradedFundInfo::has_a_pre_nav() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void GradedFundInfo::set_has_a_pre_nav() {
  _has_bits_[0] |= 0x00020000u;
}
inline void GradedFundInfo::clear_has_a_pre_nav() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void GradedFundInfo::clear_a_pre_nav() {
  a_pre_nav_ = 0;
  clear_has_a_pre_nav();
}
inline double GradedFundInfo::a_pre_nav() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundInfo.a_pre_nav)
  return a_pre_nav_;
}
inline void GradedFundInfo::set_a_pre_nav(double value) {
  set_has_a_pre_nav();
  a_pre_nav_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundInfo.a_pre_nav)
}

// optional double a_nav = 12;
inline bool GradedFundInfo::has_a_nav() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void GradedFundInfo::set_has_a_nav() {
  _has_bits_[0] |= 0x00040000u;
}
inline void GradedFundInfo::clear_has_a_nav() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void GradedFundInfo::clear_a_nav() {
  a_nav_ = 0;
  clear_has_a_nav();
}
inline double GradedFundInfo::a_nav() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundInfo.a_nav)
  return a_nav_;
}
inline void GradedFundInfo::set_a_nav(double value) {
  set_has_a_nav();
  a_nav_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundInfo.a_nav)
}

// optional double a_market_value = 13;
inline bool GradedFundInfo::has_a_market_value() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void GradedFundInfo::set_has_a_market_value() {
  _has_bits_[0] |= 0x00080000u;
}
inline void GradedFundInfo::clear_has_a_market_value() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void GradedFundInfo::clear_a_market_value() {
  a_market_value_ = 0;
  clear_has_a_market_value();
}
inline double GradedFundInfo::a_market_value() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundInfo.a_market_value)
  return a_market_value_;
}
inline void GradedFundInfo::set_a_market_value(double value) {
  set_has_a_market_value();
  a_market_value_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundInfo.a_market_value)
}

// optional double a_pre_close = 14;
inline bool GradedFundInfo::has_a_pre_close() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void GradedFundInfo::set_has_a_pre_close() {
  _has_bits_[0] |= 0x00100000u;
}
inline void GradedFundInfo::clear_has_a_pre_close() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void GradedFundInfo::clear_a_pre_close() {
  a_pre_close_ = 0;
  clear_has_a_pre_close();
}
inline double GradedFundInfo::a_pre_close() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundInfo.a_pre_close)
  return a_pre_close_;
}
inline void GradedFundInfo::set_a_pre_close(double value) {
  set_has_a_pre_close();
  a_pre_close_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundInfo.a_pre_close)
}

// optional double a_discount_premium_rate = 15;
inline bool GradedFundInfo::has_a_discount_premium_rate() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void GradedFundInfo::set_has_a_discount_premium_rate() {
  _has_bits_[0] |= 0x00200000u;
}
inline void GradedFundInfo::clear_has_a_discount_premium_rate() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void GradedFundInfo::clear_a_discount_premium_rate() {
  a_discount_premium_rate_ = 0;
  clear_has_a_discount_premium_rate();
}
inline double GradedFundInfo::a_discount_premium_rate() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundInfo.a_discount_premium_rate)
  return a_discount_premium_rate_;
}
inline void GradedFundInfo::set_a_discount_premium_rate(double value) {
  set_has_a_discount_premium_rate();
  a_discount_premium_rate_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundInfo.a_discount_premium_rate)
}

// optional string a_appointed_yield = 16;
inline bool GradedFundInfo::has_a_appointed_yield() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GradedFundInfo::set_has_a_appointed_yield() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GradedFundInfo::clear_has_a_appointed_yield() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GradedFundInfo::clear_a_appointed_yield() {
  a_appointed_yield_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_a_appointed_yield();
}
inline const ::std::string& GradedFundInfo::a_appointed_yield() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundInfo.a_appointed_yield)
  return a_appointed_yield_.GetNoArena();
}
inline void GradedFundInfo::set_a_appointed_yield(const ::std::string& value) {
  set_has_a_appointed_yield();
  a_appointed_yield_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.GradedFundInfo.a_appointed_yield)
}
#if LANG_CXX11
inline void GradedFundInfo::set_a_appointed_yield(::std::string&& value) {
  set_has_a_appointed_yield();
  a_appointed_yield_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.GradedFundInfo.a_appointed_yield)
}
#endif
inline void GradedFundInfo::set_a_appointed_yield(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_a_appointed_yield();
  a_appointed_yield_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.GradedFundInfo.a_appointed_yield)
}
inline void GradedFundInfo::set_a_appointed_yield(const char* value, size_t size) {
  set_has_a_appointed_yield();
  a_appointed_yield_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.GradedFundInfo.a_appointed_yield)
}
inline ::std::string* GradedFundInfo::mutable_a_appointed_yield() {
  set_has_a_appointed_yield();
  // @@protoc_insertion_point(field_mutable:quotation.GradedFundInfo.a_appointed_yield)
  return a_appointed_yield_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GradedFundInfo::release_a_appointed_yield() {
  // @@protoc_insertion_point(field_release:quotation.GradedFundInfo.a_appointed_yield)
  if (!has_a_appointed_yield()) {
    return NULL;
  }
  clear_has_a_appointed_yield();
  return a_appointed_yield_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GradedFundInfo::set_allocated_a_appointed_yield(::std::string* a_appointed_yield) {
  if (a_appointed_yield != NULL) {
    set_has_a_appointed_yield();
  } else {
    clear_has_a_appointed_yield();
  }
  a_appointed_yield_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), a_appointed_yield);
  // @@protoc_insertion_point(field_set_allocated:quotation.GradedFundInfo.a_appointed_yield)
}

// optional string b_code = 17;
inline bool GradedFundInfo::has_b_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GradedFundInfo::set_has_b_code() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GradedFundInfo::clear_has_b_code() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GradedFundInfo::clear_b_code() {
  b_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_b_code();
}
inline const ::std::string& GradedFundInfo::b_code() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundInfo.b_code)
  return b_code_.GetNoArena();
}
inline void GradedFundInfo::set_b_code(const ::std::string& value) {
  set_has_b_code();
  b_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.GradedFundInfo.b_code)
}
#if LANG_CXX11
inline void GradedFundInfo::set_b_code(::std::string&& value) {
  set_has_b_code();
  b_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.GradedFundInfo.b_code)
}
#endif
inline void GradedFundInfo::set_b_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_b_code();
  b_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.GradedFundInfo.b_code)
}
inline void GradedFundInfo::set_b_code(const char* value, size_t size) {
  set_has_b_code();
  b_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.GradedFundInfo.b_code)
}
inline ::std::string* GradedFundInfo::mutable_b_code() {
  set_has_b_code();
  // @@protoc_insertion_point(field_mutable:quotation.GradedFundInfo.b_code)
  return b_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GradedFundInfo::release_b_code() {
  // @@protoc_insertion_point(field_release:quotation.GradedFundInfo.b_code)
  if (!has_b_code()) {
    return NULL;
  }
  clear_has_b_code();
  return b_code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GradedFundInfo::set_allocated_b_code(::std::string* b_code) {
  if (b_code != NULL) {
    set_has_b_code();
  } else {
    clear_has_b_code();
  }
  b_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), b_code);
  // @@protoc_insertion_point(field_set_allocated:quotation.GradedFundInfo.b_code)
}

// optional string b_name = 18;
inline bool GradedFundInfo::has_b_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GradedFundInfo::set_has_b_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GradedFundInfo::clear_has_b_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GradedFundInfo::clear_b_name() {
  b_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_b_name();
}
inline const ::std::string& GradedFundInfo::b_name() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundInfo.b_name)
  return b_name_.GetNoArena();
}
inline void GradedFundInfo::set_b_name(const ::std::string& value) {
  set_has_b_name();
  b_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.GradedFundInfo.b_name)
}
#if LANG_CXX11
inline void GradedFundInfo::set_b_name(::std::string&& value) {
  set_has_b_name();
  b_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.GradedFundInfo.b_name)
}
#endif
inline void GradedFundInfo::set_b_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_b_name();
  b_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.GradedFundInfo.b_name)
}
inline void GradedFundInfo::set_b_name(const char* value, size_t size) {
  set_has_b_name();
  b_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.GradedFundInfo.b_name)
}
inline ::std::string* GradedFundInfo::mutable_b_name() {
  set_has_b_name();
  // @@protoc_insertion_point(field_mutable:quotation.GradedFundInfo.b_name)
  return b_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GradedFundInfo::release_b_name() {
  // @@protoc_insertion_point(field_release:quotation.GradedFundInfo.b_name)
  if (!has_b_name()) {
    return NULL;
  }
  clear_has_b_name();
  return b_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GradedFundInfo::set_allocated_b_name(::std::string* b_name) {
  if (b_name != NULL) {
    set_has_b_name();
  } else {
    clear_has_b_name();
  }
  b_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), b_name);
  // @@protoc_insertion_point(field_set_allocated:quotation.GradedFundInfo.b_name)
}

// optional double b_quota = 19;
inline bool GradedFundInfo::has_b_quota() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void GradedFundInfo::set_has_b_quota() {
  _has_bits_[0] |= 0x01000000u;
}
inline void GradedFundInfo::clear_has_b_quota() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void GradedFundInfo::clear_b_quota() {
  b_quota_ = 0;
  clear_has_b_quota();
}
inline double GradedFundInfo::b_quota() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundInfo.b_quota)
  return b_quota_;
}
inline void GradedFundInfo::set_b_quota(double value) {
  set_has_b_quota();
  b_quota_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundInfo.b_quota)
}

// optional double b_pre_nav = 20;
inline bool GradedFundInfo::has_b_pre_nav() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void GradedFundInfo::set_has_b_pre_nav() {
  _has_bits_[0] |= 0x02000000u;
}
inline void GradedFundInfo::clear_has_b_pre_nav() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void GradedFundInfo::clear_b_pre_nav() {
  b_pre_nav_ = 0;
  clear_has_b_pre_nav();
}
inline double GradedFundInfo::b_pre_nav() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundInfo.b_pre_nav)
  return b_pre_nav_;
}
inline void GradedFundInfo::set_b_pre_nav(double value) {
  set_has_b_pre_nav();
  b_pre_nav_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundInfo.b_pre_nav)
}

// optional double b_nav = 21;
inline bool GradedFundInfo::has_b_nav() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void GradedFundInfo::set_has_b_nav() {
  _has_bits_[0] |= 0x04000000u;
}
inline void GradedFundInfo::clear_has_b_nav() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void GradedFundInfo::clear_b_nav() {
  b_nav_ = 0;
  clear_has_b_nav();
}
inline double GradedFundInfo::b_nav() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundInfo.b_nav)
  return b_nav_;
}
inline void GradedFundInfo::set_b_nav(double value) {
  set_has_b_nav();
  b_nav_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundInfo.b_nav)
}

// optional double b_market_value = 22;
inline bool GradedFundInfo::has_b_market_value() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void GradedFundInfo::set_has_b_market_value() {
  _has_bits_[0] |= 0x08000000u;
}
inline void GradedFundInfo::clear_has_b_market_value() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void GradedFundInfo::clear_b_market_value() {
  b_market_value_ = 0;
  clear_has_b_market_value();
}
inline double GradedFundInfo::b_market_value() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundInfo.b_market_value)
  return b_market_value_;
}
inline void GradedFundInfo::set_b_market_value(double value) {
  set_has_b_market_value();
  b_market_value_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundInfo.b_market_value)
}

// optional double b_pre_close = 23;
inline bool GradedFundInfo::has_b_pre_close() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void GradedFundInfo::set_has_b_pre_close() {
  _has_bits_[0] |= 0x10000000u;
}
inline void GradedFundInfo::clear_has_b_pre_close() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void GradedFundInfo::clear_b_pre_close() {
  b_pre_close_ = 0;
  clear_has_b_pre_close();
}
inline double GradedFundInfo::b_pre_close() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundInfo.b_pre_close)
  return b_pre_close_;
}
inline void GradedFundInfo::set_b_pre_close(double value) {
  set_has_b_pre_close();
  b_pre_close_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundInfo.b_pre_close)
}

// optional double b_discount_premium_rate = 24;
inline bool GradedFundInfo::has_b_discount_premium_rate() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void GradedFundInfo::set_has_b_discount_premium_rate() {
  _has_bits_[0] |= 0x20000000u;
}
inline void GradedFundInfo::clear_has_b_discount_premium_rate() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void GradedFundInfo::clear_b_discount_premium_rate() {
  b_discount_premium_rate_ = 0;
  clear_has_b_discount_premium_rate();
}
inline double GradedFundInfo::b_discount_premium_rate() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundInfo.b_discount_premium_rate)
  return b_discount_premium_rate_;
}
inline void GradedFundInfo::set_b_discount_premium_rate(double value) {
  set_has_b_discount_premium_rate();
  b_discount_premium_rate_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundInfo.b_discount_premium_rate)
}

// optional int64 ratio_a = 25;
inline bool GradedFundInfo::has_ratio_a() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void GradedFundInfo::set_has_ratio_a() {
  _has_bits_[0] |= 0x40000000u;
}
inline void GradedFundInfo::clear_has_ratio_a() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void GradedFundInfo::clear_ratio_a() {
  ratio_a_ = GOOGLE_LONGLONG(0);
  clear_has_ratio_a();
}
inline ::google::protobuf::int64 GradedFundInfo::ratio_a() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundInfo.ratio_a)
  return ratio_a_;
}
inline void GradedFundInfo::set_ratio_a(::google::protobuf::int64 value) {
  set_has_ratio_a();
  ratio_a_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundInfo.ratio_a)
}

// optional int64 ratio_b = 26;
inline bool GradedFundInfo::has_ratio_b() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void GradedFundInfo::set_has_ratio_b() {
  _has_bits_[0] |= 0x80000000u;
}
inline void GradedFundInfo::clear_has_ratio_b() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void GradedFundInfo::clear_ratio_b() {
  ratio_b_ = GOOGLE_LONGLONG(0);
  clear_has_ratio_b();
}
inline ::google::protobuf::int64 GradedFundInfo::ratio_b() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundInfo.ratio_b)
  return ratio_b_;
}
inline void GradedFundInfo::set_ratio_b(::google::protobuf::int64 value) {
  set_has_ratio_b();
  ratio_b_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundInfo.ratio_b)
}

// optional double total_market_value = 27;
inline bool GradedFundInfo::has_total_market_value() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void GradedFundInfo::set_has_total_market_value() {
  _has_bits_[1] |= 0x00000001u;
}
inline void GradedFundInfo::clear_has_total_market_value() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void GradedFundInfo::clear_total_market_value() {
  total_market_value_ = 0;
  clear_has_total_market_value();
}
inline double GradedFundInfo::total_market_value() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundInfo.total_market_value)
  return total_market_value_;
}
inline void GradedFundInfo::set_total_market_value(double value) {
  set_has_total_market_value();
  total_market_value_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundInfo.total_market_value)
}

// optional string underlying_code = 28;
inline bool GradedFundInfo::has_underlying_code() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GradedFundInfo::set_has_underlying_code() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GradedFundInfo::clear_has_underlying_code() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GradedFundInfo::clear_underlying_code() {
  underlying_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_underlying_code();
}
inline const ::std::string& GradedFundInfo::underlying_code() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundInfo.underlying_code)
  return underlying_code_.GetNoArena();
}
inline void GradedFundInfo::set_underlying_code(const ::std::string& value) {
  set_has_underlying_code();
  underlying_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.GradedFundInfo.underlying_code)
}
#if LANG_CXX11
inline void GradedFundInfo::set_underlying_code(::std::string&& value) {
  set_has_underlying_code();
  underlying_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.GradedFundInfo.underlying_code)
}
#endif
inline void GradedFundInfo::set_underlying_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_underlying_code();
  underlying_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.GradedFundInfo.underlying_code)
}
inline void GradedFundInfo::set_underlying_code(const char* value, size_t size) {
  set_has_underlying_code();
  underlying_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.GradedFundInfo.underlying_code)
}
inline ::std::string* GradedFundInfo::mutable_underlying_code() {
  set_has_underlying_code();
  // @@protoc_insertion_point(field_mutable:quotation.GradedFundInfo.underlying_code)
  return underlying_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GradedFundInfo::release_underlying_code() {
  // @@protoc_insertion_point(field_release:quotation.GradedFundInfo.underlying_code)
  if (!has_underlying_code()) {
    return NULL;
  }
  clear_has_underlying_code();
  return underlying_code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GradedFundInfo::set_allocated_underlying_code(::std::string* underlying_code) {
  if (underlying_code != NULL) {
    set_has_underlying_code();
  } else {
    clear_has_underlying_code();
  }
  underlying_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), underlying_code);
  // @@protoc_insertion_point(field_set_allocated:quotation.GradedFundInfo.underlying_code)
}

// optional string underlying_name = 29;
inline bool GradedFundInfo::has_underlying_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GradedFundInfo::set_has_underlying_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GradedFundInfo::clear_has_underlying_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GradedFundInfo::clear_underlying_name() {
  underlying_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_underlying_name();
}
inline const ::std::string& GradedFundInfo::underlying_name() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundInfo.underlying_name)
  return underlying_name_.GetNoArena();
}
inline void GradedFundInfo::set_underlying_name(const ::std::string& value) {
  set_has_underlying_name();
  underlying_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.GradedFundInfo.underlying_name)
}
#if LANG_CXX11
inline void GradedFundInfo::set_underlying_name(::std::string&& value) {
  set_has_underlying_name();
  underlying_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.GradedFundInfo.underlying_name)
}
#endif
inline void GradedFundInfo::set_underlying_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_underlying_name();
  underlying_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.GradedFundInfo.underlying_name)
}
inline void GradedFundInfo::set_underlying_name(const char* value, size_t size) {
  set_has_underlying_name();
  underlying_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.GradedFundInfo.underlying_name)
}
inline ::std::string* GradedFundInfo::mutable_underlying_name() {
  set_has_underlying_name();
  // @@protoc_insertion_point(field_mutable:quotation.GradedFundInfo.underlying_name)
  return underlying_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GradedFundInfo::release_underlying_name() {
  // @@protoc_insertion_point(field_release:quotation.GradedFundInfo.underlying_name)
  if (!has_underlying_name()) {
    return NULL;
  }
  clear_has_underlying_name();
  return underlying_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GradedFundInfo::set_allocated_underlying_name(::std::string* underlying_name) {
  if (underlying_name != NULL) {
    set_has_underlying_name();
  } else {
    clear_has_underlying_name();
  }
  underlying_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), underlying_name);
  // @@protoc_insertion_point(field_set_allocated:quotation.GradedFundInfo.underlying_name)
}

// optional double underlying_factor = 30;
inline bool GradedFundInfo::has_underlying_factor() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void GradedFundInfo::set_has_underlying_factor() {
  _has_bits_[1] |= 0x00000002u;
}
inline void GradedFundInfo::clear_has_underlying_factor() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void GradedFundInfo::clear_underlying_factor() {
  underlying_factor_ = 0;
  clear_has_underlying_factor();
}
inline double GradedFundInfo::underlying_factor() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundInfo.underlying_factor)
  return underlying_factor_;
}
inline void GradedFundInfo::set_underlying_factor(double value) {
  set_has_underlying_factor();
  underlying_factor_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundInfo.underlying_factor)
}

// optional string manager_name = 31;
inline bool GradedFundInfo::has_manager_name() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GradedFundInfo::set_has_manager_name() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GradedFundInfo::clear_has_manager_name() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GradedFundInfo::clear_manager_name() {
  manager_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_manager_name();
}
inline const ::std::string& GradedFundInfo::manager_name() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundInfo.manager_name)
  return manager_name_.GetNoArena();
}
inline void GradedFundInfo::set_manager_name(const ::std::string& value) {
  set_has_manager_name();
  manager_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.GradedFundInfo.manager_name)
}
#if LANG_CXX11
inline void GradedFundInfo::set_manager_name(::std::string&& value) {
  set_has_manager_name();
  manager_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.GradedFundInfo.manager_name)
}
#endif
inline void GradedFundInfo::set_manager_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_manager_name();
  manager_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.GradedFundInfo.manager_name)
}
inline void GradedFundInfo::set_manager_name(const char* value, size_t size) {
  set_has_manager_name();
  manager_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.GradedFundInfo.manager_name)
}
inline ::std::string* GradedFundInfo::mutable_manager_name() {
  set_has_manager_name();
  // @@protoc_insertion_point(field_mutable:quotation.GradedFundInfo.manager_name)
  return manager_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GradedFundInfo::release_manager_name() {
  // @@protoc_insertion_point(field_release:quotation.GradedFundInfo.manager_name)
  if (!has_manager_name()) {
    return NULL;
  }
  clear_has_manager_name();
  return manager_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GradedFundInfo::set_allocated_manager_name(::std::string* manager_name) {
  if (manager_name != NULL) {
    set_has_manager_name();
  } else {
    clear_has_manager_name();
  }
  manager_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), manager_name);
  // @@protoc_insertion_point(field_set_allocated:quotation.GradedFundInfo.manager_name)
}

// optional uint32 listing_date = 32;
inline bool GradedFundInfo::has_listing_date() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void GradedFundInfo::set_has_listing_date() {
  _has_bits_[0] |= 0x00800000u;
}
inline void GradedFundInfo::clear_has_listing_date() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void GradedFundInfo::clear_listing_date() {
  listing_date_ = 0u;
  clear_has_listing_date();
}
inline ::google::protobuf::uint32 GradedFundInfo::listing_date() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundInfo.listing_date)
  return listing_date_;
}
inline void GradedFundInfo::set_listing_date(::google::protobuf::uint32 value) {
  set_has_listing_date();
  listing_date_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundInfo.listing_date)
}

// optional uint32 translation_date = 33;
inline bool GradedFundInfo::has_translation_date() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void GradedFundInfo::set_has_translation_date() {
  _has_bits_[1] |= 0x00000008u;
}
inline void GradedFundInfo::clear_has_translation_date() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void GradedFundInfo::clear_translation_date() {
  translation_date_ = 0u;
  clear_has_translation_date();
}
inline ::google::protobuf::uint32 GradedFundInfo::translation_date() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundInfo.translation_date)
  return translation_date_;
}
inline void GradedFundInfo::set_translation_date(::google::protobuf::uint32 value) {
  set_has_translation_date();
  translation_date_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundInfo.translation_date)
}

// optional string up_clause = 34;
inline bool GradedFundInfo::has_up_clause() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GradedFundInfo::set_has_up_clause() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GradedFundInfo::clear_has_up_clause() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GradedFundInfo::clear_up_clause() {
  up_clause_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_up_clause();
}
inline const ::std::string& GradedFundInfo::up_clause() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundInfo.up_clause)
  return up_clause_.GetNoArena();
}
inline void GradedFundInfo::set_up_clause(const ::std::string& value) {
  set_has_up_clause();
  up_clause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.GradedFundInfo.up_clause)
}
#if LANG_CXX11
inline void GradedFundInfo::set_up_clause(::std::string&& value) {
  set_has_up_clause();
  up_clause_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.GradedFundInfo.up_clause)
}
#endif
inline void GradedFundInfo::set_up_clause(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_up_clause();
  up_clause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.GradedFundInfo.up_clause)
}
inline void GradedFundInfo::set_up_clause(const char* value, size_t size) {
  set_has_up_clause();
  up_clause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.GradedFundInfo.up_clause)
}
inline ::std::string* GradedFundInfo::mutable_up_clause() {
  set_has_up_clause();
  // @@protoc_insertion_point(field_mutable:quotation.GradedFundInfo.up_clause)
  return up_clause_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GradedFundInfo::release_up_clause() {
  // @@protoc_insertion_point(field_release:quotation.GradedFundInfo.up_clause)
  if (!has_up_clause()) {
    return NULL;
  }
  clear_has_up_clause();
  return up_clause_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GradedFundInfo::set_allocated_up_clause(::std::string* up_clause) {
  if (up_clause != NULL) {
    set_has_up_clause();
  } else {
    clear_has_up_clause();
  }
  up_clause_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), up_clause);
  // @@protoc_insertion_point(field_set_allocated:quotation.GradedFundInfo.up_clause)
}

// optional string down_clause = 35;
inline bool GradedFundInfo::has_down_clause() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GradedFundInfo::set_has_down_clause() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GradedFundInfo::clear_has_down_clause() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GradedFundInfo::clear_down_clause() {
  down_clause_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_down_clause();
}
inline const ::std::string& GradedFundInfo::down_clause() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundInfo.down_clause)
  return down_clause_.GetNoArena();
}
inline void GradedFundInfo::set_down_clause(const ::std::string& value) {
  set_has_down_clause();
  down_clause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.GradedFundInfo.down_clause)
}
#if LANG_CXX11
inline void GradedFundInfo::set_down_clause(::std::string&& value) {
  set_has_down_clause();
  down_clause_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.GradedFundInfo.down_clause)
}
#endif
inline void GradedFundInfo::set_down_clause(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_down_clause();
  down_clause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.GradedFundInfo.down_clause)
}
inline void GradedFundInfo::set_down_clause(const char* value, size_t size) {
  set_has_down_clause();
  down_clause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.GradedFundInfo.down_clause)
}
inline ::std::string* GradedFundInfo::mutable_down_clause() {
  set_has_down_clause();
  // @@protoc_insertion_point(field_mutable:quotation.GradedFundInfo.down_clause)
  return down_clause_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GradedFundInfo::release_down_clause() {
  // @@protoc_insertion_point(field_release:quotation.GradedFundInfo.down_clause)
  if (!has_down_clause()) {
    return NULL;
  }
  clear_has_down_clause();
  return down_clause_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GradedFundInfo::set_allocated_down_clause(::std::string* down_clause) {
  if (down_clause != NULL) {
    set_has_down_clause();
  } else {
    clear_has_down_clause();
  }
  down_clause_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), down_clause);
  // @@protoc_insertion_point(field_set_allocated:quotation.GradedFundInfo.down_clause)
}

// optional double position_rate = 36;
inline bool GradedFundInfo::has_position_rate() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void GradedFundInfo::set_has_position_rate() {
  _has_bits_[1] |= 0x00000004u;
}
inline void GradedFundInfo::clear_has_position_rate() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void GradedFundInfo::clear_position_rate() {
  position_rate_ = 0;
  clear_has_position_rate();
}
inline double GradedFundInfo::position_rate() const {
  // @@protoc_insertion_point(field_get:quotation.GradedFundInfo.position_rate)
  return position_rate_;
}
inline void GradedFundInfo::set_position_rate(double value) {
  set_has_position_rate();
  position_rate_ = value;
  // @@protoc_insertion_point(field_set:quotation.GradedFundInfo.position_rate)
}

// -------------------------------------------------------------------

// OptionInfo

// required uint32 data_date = 1;
inline bool OptionInfo::has_data_date() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OptionInfo::set_has_data_date() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OptionInfo::clear_has_data_date() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OptionInfo::clear_data_date() {
  data_date_ = 0u;
  clear_has_data_date();
}
inline ::google::protobuf::uint32 OptionInfo::data_date() const {
  // @@protoc_insertion_point(field_get:quotation.OptionInfo.data_date)
  return data_date_;
}
inline void OptionInfo::set_data_date(::google::protobuf::uint32 value) {
  set_has_data_date();
  data_date_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionInfo.data_date)
}

// required string code = 2;
inline bool OptionInfo::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptionInfo::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptionInfo::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptionInfo::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& OptionInfo::code() const {
  // @@protoc_insertion_point(field_get:quotation.OptionInfo.code)
  return code_.GetNoArena();
}
inline void OptionInfo::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.OptionInfo.code)
}
#if LANG_CXX11
inline void OptionInfo::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.OptionInfo.code)
}
#endif
inline void OptionInfo::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.OptionInfo.code)
}
inline void OptionInfo::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.OptionInfo.code)
}
inline ::std::string* OptionInfo::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:quotation.OptionInfo.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionInfo::release_code() {
  // @@protoc_insertion_point(field_release:quotation.OptionInfo.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionInfo::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:quotation.OptionInfo.code)
}

// optional string name = 3;
inline bool OptionInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptionInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OptionInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OptionInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& OptionInfo::name() const {
  // @@protoc_insertion_point(field_get:quotation.OptionInfo.name)
  return name_.GetNoArena();
}
inline void OptionInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.OptionInfo.name)
}
#if LANG_CXX11
inline void OptionInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.OptionInfo.name)
}
#endif
inline void OptionInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.OptionInfo.name)
}
inline void OptionInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.OptionInfo.name)
}
inline ::std::string* OptionInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:quotation.OptionInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionInfo::release_name() {
  // @@protoc_insertion_point(field_release:quotation.OptionInfo.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:quotation.OptionInfo.name)
}

// optional string type = 4;
inline bool OptionInfo::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OptionInfo::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OptionInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OptionInfo::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& OptionInfo::type() const {
  // @@protoc_insertion_point(field_get:quotation.OptionInfo.type)
  return type_.GetNoArena();
}
inline void OptionInfo::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.OptionInfo.type)
}
#if LANG_CXX11
inline void OptionInfo::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.OptionInfo.type)
}
#endif
inline void OptionInfo::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.OptionInfo.type)
}
inline void OptionInfo::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.OptionInfo.type)
}
inline ::std::string* OptionInfo::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:quotation.OptionInfo.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionInfo::release_type() {
  // @@protoc_insertion_point(field_release:quotation.OptionInfo.type)
  if (!has_type()) {
    return NULL;
  }
  clear_has_type();
  return type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionInfo::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:quotation.OptionInfo.type)
}

// optional int64 market = 5;
inline bool OptionInfo::has_market() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OptionInfo::set_has_market() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OptionInfo::clear_has_market() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OptionInfo::clear_market() {
  market_ = GOOGLE_LONGLONG(0);
  clear_has_market();
}
inline ::google::protobuf::int64 OptionInfo::market() const {
  // @@protoc_insertion_point(field_get:quotation.OptionInfo.market)
  return market_;
}
inline void OptionInfo::set_market(::google::protobuf::int64 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionInfo.market)
}

// optional string trade_code = 6;
inline bool OptionInfo::has_trade_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OptionInfo::set_has_trade_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OptionInfo::clear_has_trade_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OptionInfo::clear_trade_code() {
  trade_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trade_code();
}
inline const ::std::string& OptionInfo::trade_code() const {
  // @@protoc_insertion_point(field_get:quotation.OptionInfo.trade_code)
  return trade_code_.GetNoArena();
}
inline void OptionInfo::set_trade_code(const ::std::string& value) {
  set_has_trade_code();
  trade_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.OptionInfo.trade_code)
}
#if LANG_CXX11
inline void OptionInfo::set_trade_code(::std::string&& value) {
  set_has_trade_code();
  trade_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.OptionInfo.trade_code)
}
#endif
inline void OptionInfo::set_trade_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trade_code();
  trade_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.OptionInfo.trade_code)
}
inline void OptionInfo::set_trade_code(const char* value, size_t size) {
  set_has_trade_code();
  trade_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.OptionInfo.trade_code)
}
inline ::std::string* OptionInfo::mutable_trade_code() {
  set_has_trade_code();
  // @@protoc_insertion_point(field_mutable:quotation.OptionInfo.trade_code)
  return trade_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionInfo::release_trade_code() {
  // @@protoc_insertion_point(field_release:quotation.OptionInfo.trade_code)
  if (!has_trade_code()) {
    return NULL;
  }
  clear_has_trade_code();
  return trade_code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionInfo::set_allocated_trade_code(::std::string* trade_code) {
  if (trade_code != NULL) {
    set_has_trade_code();
  } else {
    clear_has_trade_code();
  }
  trade_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trade_code);
  // @@protoc_insertion_point(field_set_allocated:quotation.OptionInfo.trade_code)
}

// optional string underlying_code = 7;
inline bool OptionInfo::has_underlying_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OptionInfo::set_has_underlying_code() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OptionInfo::clear_has_underlying_code() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OptionInfo::clear_underlying_code() {
  underlying_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_underlying_code();
}
inline const ::std::string& OptionInfo::underlying_code() const {
  // @@protoc_insertion_point(field_get:quotation.OptionInfo.underlying_code)
  return underlying_code_.GetNoArena();
}
inline void OptionInfo::set_underlying_code(const ::std::string& value) {
  set_has_underlying_code();
  underlying_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.OptionInfo.underlying_code)
}
#if LANG_CXX11
inline void OptionInfo::set_underlying_code(::std::string&& value) {
  set_has_underlying_code();
  underlying_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.OptionInfo.underlying_code)
}
#endif
inline void OptionInfo::set_underlying_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_underlying_code();
  underlying_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.OptionInfo.underlying_code)
}
inline void OptionInfo::set_underlying_code(const char* value, size_t size) {
  set_has_underlying_code();
  underlying_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.OptionInfo.underlying_code)
}
inline ::std::string* OptionInfo::mutable_underlying_code() {
  set_has_underlying_code();
  // @@protoc_insertion_point(field_mutable:quotation.OptionInfo.underlying_code)
  return underlying_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionInfo::release_underlying_code() {
  // @@protoc_insertion_point(field_release:quotation.OptionInfo.underlying_code)
  if (!has_underlying_code()) {
    return NULL;
  }
  clear_has_underlying_code();
  return underlying_code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionInfo::set_allocated_underlying_code(::std::string* underlying_code) {
  if (underlying_code != NULL) {
    set_has_underlying_code();
  } else {
    clear_has_underlying_code();
  }
  underlying_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), underlying_code);
  // @@protoc_insertion_point(field_set_allocated:quotation.OptionInfo.underlying_code)
}

// optional string underlying_name = 8;
inline bool OptionInfo::has_underlying_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OptionInfo::set_has_underlying_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OptionInfo::clear_has_underlying_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OptionInfo::clear_underlying_name() {
  underlying_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_underlying_name();
}
inline const ::std::string& OptionInfo::underlying_name() const {
  // @@protoc_insertion_point(field_get:quotation.OptionInfo.underlying_name)
  return underlying_name_.GetNoArena();
}
inline void OptionInfo::set_underlying_name(const ::std::string& value) {
  set_has_underlying_name();
  underlying_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quotation.OptionInfo.underlying_name)
}
#if LANG_CXX11
inline void OptionInfo::set_underlying_name(::std::string&& value) {
  set_has_underlying_name();
  underlying_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quotation.OptionInfo.underlying_name)
}
#endif
inline void OptionInfo::set_underlying_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_underlying_name();
  underlying_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quotation.OptionInfo.underlying_name)
}
inline void OptionInfo::set_underlying_name(const char* value, size_t size) {
  set_has_underlying_name();
  underlying_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quotation.OptionInfo.underlying_name)
}
inline ::std::string* OptionInfo::mutable_underlying_name() {
  set_has_underlying_name();
  // @@protoc_insertion_point(field_mutable:quotation.OptionInfo.underlying_name)
  return underlying_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionInfo::release_underlying_name() {
  // @@protoc_insertion_point(field_release:quotation.OptionInfo.underlying_name)
  if (!has_underlying_name()) {
    return NULL;
  }
  clear_has_underlying_name();
  return underlying_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionInfo::set_allocated_underlying_name(::std::string* underlying_name) {
  if (underlying_name != NULL) {
    set_has_underlying_name();
  } else {
    clear_has_underlying_name();
  }
  underlying_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), underlying_name);
  // @@protoc_insertion_point(field_set_allocated:quotation.OptionInfo.underlying_name)
}

// optional int64 underlying_type = 9;
inline bool OptionInfo::has_underlying_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OptionInfo::set_has_underlying_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OptionInfo::clear_has_underlying_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OptionInfo::clear_underlying_type() {
  underlying_type_ = GOOGLE_LONGLONG(0);
  clear_has_underlying_type();
}
inline ::google::protobuf::int64 OptionInfo::underlying_type() const {
  // @@protoc_insertion_point(field_get:quotation.OptionInfo.underlying_type)
  return underlying_type_;
}
inline void OptionInfo::set_underlying_type(::google::protobuf::int64 value) {
  set_has_underlying_type();
  underlying_type_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionInfo.underlying_type)
}

// optional double underlying_pre_close = 10;
inline bool OptionInfo::has_underlying_pre_close() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OptionInfo::set_has_underlying_pre_close() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OptionInfo::clear_has_underlying_pre_close() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OptionInfo::clear_underlying_pre_close() {
  underlying_pre_close_ = 0;
  clear_has_underlying_pre_close();
}
inline double OptionInfo::underlying_pre_close() const {
  // @@protoc_insertion_point(field_get:quotation.OptionInfo.underlying_pre_close)
  return underlying_pre_close_;
}
inline void OptionInfo::set_underlying_pre_close(double value) {
  set_has_underlying_pre_close();
  underlying_pre_close_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionInfo.underlying_pre_close)
}

// optional int64 cp_flag = 11;
inline bool OptionInfo::has_cp_flag() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OptionInfo::set_has_cp_flag() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OptionInfo::clear_has_cp_flag() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OptionInfo::clear_cp_flag() {
  cp_flag_ = GOOGLE_LONGLONG(0);
  clear_has_cp_flag();
}
inline ::google::protobuf::int64 OptionInfo::cp_flag() const {
  // @@protoc_insertion_point(field_get:quotation.OptionInfo.cp_flag)
  return cp_flag_;
}
inline void OptionInfo::set_cp_flag(::google::protobuf::int64 value) {
  set_has_cp_flag();
  cp_flag_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionInfo.cp_flag)
}

// optional int64 unit = 12;
inline bool OptionInfo::has_unit() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OptionInfo::set_has_unit() {
  _has_bits_[0] |= 0x00001000u;
}
inline void OptionInfo::clear_has_unit() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void OptionInfo::clear_unit() {
  unit_ = GOOGLE_LONGLONG(0);
  clear_has_unit();
}
inline ::google::protobuf::int64 OptionInfo::unit() const {
  // @@protoc_insertion_point(field_get:quotation.OptionInfo.unit)
  return unit_;
}
inline void OptionInfo::set_unit(::google::protobuf::int64 value) {
  set_has_unit();
  unit_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionInfo.unit)
}

// optional uint32 exercise_date = 13;
inline bool OptionInfo::has_exercise_date() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OptionInfo::set_has_exercise_date() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OptionInfo::clear_has_exercise_date() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OptionInfo::clear_exercise_date() {
  exercise_date_ = 0u;
  clear_has_exercise_date();
}
inline ::google::protobuf::uint32 OptionInfo::exercise_date() const {
  // @@protoc_insertion_point(field_get:quotation.OptionInfo.exercise_date)
  return exercise_date_;
}
inline void OptionInfo::set_exercise_date(::google::protobuf::uint32 value) {
  set_has_exercise_date();
  exercise_date_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionInfo.exercise_date)
}

// optional double exercise_price = 14;
inline bool OptionInfo::has_exercise_price() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void OptionInfo::set_has_exercise_price() {
  _has_bits_[0] |= 0x00002000u;
}
inline void OptionInfo::clear_has_exercise_price() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void OptionInfo::clear_exercise_price() {
  exercise_price_ = 0;
  clear_has_exercise_price();
}
inline double OptionInfo::exercise_price() const {
  // @@protoc_insertion_point(field_get:quotation.OptionInfo.exercise_price)
  return exercise_price_;
}
inline void OptionInfo::set_exercise_price(double value) {
  set_has_exercise_price();
  exercise_price_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionInfo.exercise_price)
}

// optional uint32 settle_date = 15;
inline bool OptionInfo::has_settle_date() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void OptionInfo::set_has_settle_date() {
  _has_bits_[0] |= 0x00004000u;
}
inline void OptionInfo::clear_has_settle_date() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void OptionInfo::clear_settle_date() {
  settle_date_ = 0u;
  clear_has_settle_date();
}
inline ::google::protobuf::uint32 OptionInfo::settle_date() const {
  // @@protoc_insertion_point(field_get:quotation.OptionInfo.settle_date)
  return settle_date_;
}
inline void OptionInfo::set_settle_date(::google::protobuf::uint32 value) {
  set_has_settle_date();
  settle_date_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionInfo.settle_date)
}

// optional uint32 expire_date = 16;
inline bool OptionInfo::has_expire_date() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void OptionInfo::set_has_expire_date() {
  _has_bits_[0] |= 0x00008000u;
}
inline void OptionInfo::clear_has_expire_date() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void OptionInfo::clear_expire_date() {
  expire_date_ = 0u;
  clear_has_expire_date();
}
inline ::google::protobuf::uint32 OptionInfo::expire_date() const {
  // @@protoc_insertion_point(field_get:quotation.OptionInfo.expire_date)
  return expire_date_;
}
inline void OptionInfo::set_expire_date(::google::protobuf::uint32 value) {
  set_has_expire_date();
  expire_date_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionInfo.expire_date)
}

// optional int64 is_expired = 17;
inline bool OptionInfo::has_is_expired() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void OptionInfo::set_has_is_expired() {
  _has_bits_[0] |= 0x00010000u;
}
inline void OptionInfo::clear_has_is_expired() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void OptionInfo::clear_is_expired() {
  is_expired_ = GOOGLE_LONGLONG(0);
  clear_has_is_expired();
}
inline ::google::protobuf::int64 OptionInfo::is_expired() const {
  // @@protoc_insertion_point(field_get:quotation.OptionInfo.is_expired)
  return is_expired_;
}
inline void OptionInfo::set_is_expired(::google::protobuf::int64 value) {
  set_has_is_expired();
  is_expired_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionInfo.is_expired)
}

// optional int64 is_new = 18;
inline bool OptionInfo::has_is_new() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void OptionInfo::set_has_is_new() {
  _has_bits_[0] |= 0x00020000u;
}
inline void OptionInfo::clear_has_is_new() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void OptionInfo::clear_is_new() {
  is_new_ = GOOGLE_LONGLONG(0);
  clear_has_is_new();
}
inline ::google::protobuf::int64 OptionInfo::is_new() const {
  // @@protoc_insertion_point(field_get:quotation.OptionInfo.is_new)
  return is_new_;
}
inline void OptionInfo::set_is_new(::google::protobuf::int64 value) {
  set_has_is_new();
  is_new_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionInfo.is_new)
}

// optional int64 is_adjusted = 19;
inline bool OptionInfo::has_is_adjusted() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void OptionInfo::set_has_is_adjusted() {
  _has_bits_[0] |= 0x00040000u;
}
inline void OptionInfo::clear_has_is_adjusted() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void OptionInfo::clear_is_adjusted() {
  is_adjusted_ = GOOGLE_LONGLONG(0);
  clear_has_is_adjusted();
}
inline ::google::protobuf::int64 OptionInfo::is_adjusted() const {
  // @@protoc_insertion_point(field_get:quotation.OptionInfo.is_adjusted)
  return is_adjusted_;
}
inline void OptionInfo::set_is_adjusted(::google::protobuf::int64 value) {
  set_has_is_adjusted();
  is_adjusted_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionInfo.is_adjusted)
}

// optional int64 is_open = 20;
inline bool OptionInfo::has_is_open() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void OptionInfo::set_has_is_open() {
  _has_bits_[0] |= 0x00080000u;
}
inline void OptionInfo::clear_has_is_open() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void OptionInfo::clear_is_open() {
  is_open_ = GOOGLE_LONGLONG(0);
  clear_has_is_open();
}
inline ::google::protobuf::int64 OptionInfo::is_open() const {
  // @@protoc_insertion_point(field_get:quotation.OptionInfo.is_open)
  return is_open_;
}
inline void OptionInfo::set_is_open(::google::protobuf::int64 value) {
  set_has_is_open();
  is_open_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionInfo.is_open)
}

// optional double high_limit = 21;
inline bool OptionInfo::has_high_limit() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void OptionInfo::set_has_high_limit() {
  _has_bits_[0] |= 0x00100000u;
}
inline void OptionInfo::clear_has_high_limit() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void OptionInfo::clear_high_limit() {
  high_limit_ = 0;
  clear_has_high_limit();
}
inline double OptionInfo::high_limit() const {
  // @@protoc_insertion_point(field_get:quotation.OptionInfo.high_limit)
  return high_limit_;
}
inline void OptionInfo::set_high_limit(double value) {
  set_has_high_limit();
  high_limit_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionInfo.high_limit)
}

// optional double low_limit = 22;
inline bool OptionInfo::has_low_limit() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void OptionInfo::set_has_low_limit() {
  _has_bits_[0] |= 0x00200000u;
}
inline void OptionInfo::clear_has_low_limit() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void OptionInfo::clear_low_limit() {
  low_limit_ = 0;
  clear_has_low_limit();
}
inline double OptionInfo::low_limit() const {
  // @@protoc_insertion_point(field_get:quotation.OptionInfo.low_limit)
  return low_limit_;
}
inline void OptionInfo::set_low_limit(double value) {
  set_has_low_limit();
  low_limit_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionInfo.low_limit)
}

// optional double pre_settle = 23;
inline bool OptionInfo::has_pre_settle() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void OptionInfo::set_has_pre_settle() {
  _has_bits_[0] |= 0x00400000u;
}
inline void OptionInfo::clear_has_pre_settle() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void OptionInfo::clear_pre_settle() {
  pre_settle_ = 0;
  clear_has_pre_settle();
}
inline double OptionInfo::pre_settle() const {
  // @@protoc_insertion_point(field_get:quotation.OptionInfo.pre_settle)
  return pre_settle_;
}
inline void OptionInfo::set_pre_settle(double value) {
  set_has_pre_settle();
  pre_settle_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionInfo.pre_settle)
}

// optional double deposit = 24;
inline bool OptionInfo::has_deposit() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void OptionInfo::set_has_deposit() {
  _has_bits_[0] |= 0x00800000u;
}
inline void OptionInfo::clear_has_deposit() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void OptionInfo::clear_deposit() {
  deposit_ = 0;
  clear_has_deposit();
}
inline double OptionInfo::deposit() const {
  // @@protoc_insertion_point(field_get:quotation.OptionInfo.deposit)
  return deposit_;
}
inline void OptionInfo::set_deposit(double value) {
  set_has_deposit();
  deposit_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionInfo.deposit)
}

// optional int64 algebra = 25;
inline bool OptionInfo::has_algebra() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void OptionInfo::set_has_algebra() {
  _has_bits_[0] |= 0x01000000u;
}
inline void OptionInfo::clear_has_algebra() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void OptionInfo::clear_algebra() {
  algebra_ = GOOGLE_LONGLONG(0);
  clear_has_algebra();
}
inline ::google::protobuf::int64 OptionInfo::algebra() const {
  // @@protoc_insertion_point(field_get:quotation.OptionInfo.algebra)
  return algebra_;
}
inline void OptionInfo::set_algebra(::google::protobuf::int64 value) {
  set_has_algebra();
  algebra_ = value;
  // @@protoc_insertion_point(field_set:quotation.OptionInfo.algebra)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace quotation

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_protos_2fquotation_2eproto
