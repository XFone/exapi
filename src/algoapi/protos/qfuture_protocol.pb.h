// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/qfuture_protocol.proto

#ifndef PROTOBUF_INCLUDED_protos_2fqfuture_5fprotocol_2eproto
#define PROTOBUF_INCLUDED_protos_2fqfuture_5fprotocol_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fqfuture_5fprotocol_2eproto 

namespace protobuf_protos_2fqfuture_5fprotocol_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[39];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_protos_2fqfuture_5fprotocol_2eproto
namespace autotrade {
class FutureCapital;
class FutureCapitalDefaultTypeInternal;
extern FutureCapitalDefaultTypeInternal _FutureCapital_default_instance_;
class FutureConfirmSettlementReqt;
class FutureConfirmSettlementReqtDefaultTypeInternal;
extern FutureConfirmSettlementReqtDefaultTypeInternal _FutureConfirmSettlementReqt_default_instance_;
class FutureConfirmSettlementResp;
class FutureConfirmSettlementRespDefaultTypeInternal;
extern FutureConfirmSettlementRespDefaultTypeInternal _FutureConfirmSettlementResp_default_instance_;
class FutureDealDetail;
class FutureDealDetailDefaultTypeInternal;
extern FutureDealDetailDefaultTypeInternal _FutureDealDetail_default_instance_;
class FutureDealDetail_DealDetail;
class FutureDealDetail_DealDetailDefaultTypeInternal;
extern FutureDealDetail_DealDetailDefaultTypeInternal _FutureDealDetail_DealDetail_default_instance_;
class FutureDeleteReqt;
class FutureDeleteReqtDefaultTypeInternal;
extern FutureDeleteReqtDefaultTypeInternal _FutureDeleteReqt_default_instance_;
class FutureDeleteResp;
class FutureDeleteRespDefaultTypeInternal;
extern FutureDeleteRespDefaultTypeInternal _FutureDeleteResp_default_instance_;
class FutureLoginReqt;
class FutureLoginReqtDefaultTypeInternal;
extern FutureLoginReqtDefaultTypeInternal _FutureLoginReqt_default_instance_;
class FutureLoginResp;
class FutureLoginRespDefaultTypeInternal;
extern FutureLoginRespDefaultTypeInternal _FutureLoginResp_default_instance_;
class FutureLogoutReqt;
class FutureLogoutReqtDefaultTypeInternal;
extern FutureLogoutReqtDefaultTypeInternal _FutureLogoutReqt_default_instance_;
class FutureLogoutResp;
class FutureLogoutRespDefaultTypeInternal;
extern FutureLogoutRespDefaultTypeInternal _FutureLogoutResp_default_instance_;
class FutureOrderActionResp;
class FutureOrderActionRespDefaultTypeInternal;
extern FutureOrderActionRespDefaultTypeInternal _FutureOrderActionResp_default_instance_;
class FutureOrderInfo;
class FutureOrderInfoDefaultTypeInternal;
extern FutureOrderInfoDefaultTypeInternal _FutureOrderInfo_default_instance_;
class FutureOrderInfo_OrderDetail;
class FutureOrderInfo_OrderDetailDefaultTypeInternal;
extern FutureOrderInfo_OrderDetailDefaultTypeInternal _FutureOrderInfo_OrderDetail_default_instance_;
class FutureOrderInsertResp;
class FutureOrderInsertRespDefaultTypeInternal;
extern FutureOrderInsertRespDefaultTypeInternal _FutureOrderInsertResp_default_instance_;
class FutureOrderReqt;
class FutureOrderReqtDefaultTypeInternal;
extern FutureOrderReqtDefaultTypeInternal _FutureOrderReqt_default_instance_;
class FutureOrderResp;
class FutureOrderRespDefaultTypeInternal;
extern FutureOrderRespDefaultTypeInternal _FutureOrderResp_default_instance_;
class FuturePosition;
class FuturePositionDefaultTypeInternal;
extern FuturePositionDefaultTypeInternal _FuturePosition_default_instance_;
class FutureQueryCaptialReqt;
class FutureQueryCaptialReqtDefaultTypeInternal;
extern FutureQueryCaptialReqtDefaultTypeInternal _FutureQueryCaptialReqt_default_instance_;
class FutureQueryDealDetailReqt;
class FutureQueryDealDetailReqtDefaultTypeInternal;
extern FutureQueryDealDetailReqtDefaultTypeInternal _FutureQueryDealDetailReqt_default_instance_;
class FutureQueryOrderReqt;
class FutureQueryOrderReqtDefaultTypeInternal;
extern FutureQueryOrderReqtDefaultTypeInternal _FutureQueryOrderReqt_default_instance_;
class FutureQueryPositionReqt;
class FutureQueryPositionReqtDefaultTypeInternal;
extern FutureQueryPositionReqtDefaultTypeInternal _FutureQueryPositionReqt_default_instance_;
class FutureQuerySettlementConfirmReqt;
class FutureQuerySettlementConfirmReqtDefaultTypeInternal;
extern FutureQuerySettlementConfirmReqtDefaultTypeInternal _FutureQuerySettlementConfirmReqt_default_instance_;
class FutureQuerySettlementConfirmResp;
class FutureQuerySettlementConfirmRespDefaultTypeInternal;
extern FutureQuerySettlementConfirmRespDefaultTypeInternal _FutureQuerySettlementConfirmResp_default_instance_;
class FutureQuerySettlementReqt;
class FutureQuerySettlementReqtDefaultTypeInternal;
extern FutureQuerySettlementReqtDefaultTypeInternal _FutureQuerySettlementReqt_default_instance_;
class FutureQuerySettlementResp;
class FutureQuerySettlementRespDefaultTypeInternal;
extern FutureQuerySettlementRespDefaultTypeInternal _FutureQuerySettlementResp_default_instance_;
class FutureRtnOrder;
class FutureRtnOrderDefaultTypeInternal;
extern FutureRtnOrderDefaultTypeInternal _FutureRtnOrder_default_instance_;
class FutureRtnOrderActionErr;
class FutureRtnOrderActionErrDefaultTypeInternal;
extern FutureRtnOrderActionErrDefaultTypeInternal _FutureRtnOrderActionErr_default_instance_;
class FutureRtnOrderInsertErr;
class FutureRtnOrderInsertErrDefaultTypeInternal;
extern FutureRtnOrderInsertErrDefaultTypeInternal _FutureRtnOrderInsertErr_default_instance_;
class FutureRtnTrade;
class FutureRtnTradeDefaultTypeInternal;
extern FutureRtnTradeDefaultTypeInternal _FutureRtnTrade_default_instance_;
class FutureSystemConnected;
class FutureSystemConnectedDefaultTypeInternal;
extern FutureSystemConnectedDefaultTypeInternal _FutureSystemConnected_default_instance_;
class FutureSystemDisconnected;
class FutureSystemDisconnectedDefaultTypeInternal;
extern FutureSystemDisconnectedDefaultTypeInternal _FutureSystemDisconnected_default_instance_;
class InnerFutureQueryOrderResp;
class InnerFutureQueryOrderRespDefaultTypeInternal;
extern InnerFutureQueryOrderRespDefaultTypeInternal _InnerFutureQueryOrderResp_default_instance_;
class InnerFutureQueryTradeResp;
class InnerFutureQueryTradeRespDefaultTypeInternal;
extern InnerFutureQueryTradeRespDefaultTypeInternal _InnerFutureQueryTradeResp_default_instance_;
class InnerQueryOrderReqt;
class InnerQueryOrderReqtDefaultTypeInternal;
extern InnerQueryOrderReqtDefaultTypeInternal _InnerQueryOrderReqt_default_instance_;
class InnerQueryTradeReqt;
class InnerQueryTradeReqtDefaultTypeInternal;
extern InnerQueryTradeReqtDefaultTypeInternal _InnerQueryTradeReqt_default_instance_;
class OneFutureKnock;
class OneFutureKnockDefaultTypeInternal;
extern OneFutureKnockDefaultTypeInternal _OneFutureKnock_default_instance_;
class OneFuturePosition;
class OneFuturePositionDefaultTypeInternal;
extern OneFuturePositionDefaultTypeInternal _OneFuturePosition_default_instance_;
class SumFutureKnock;
class SumFutureKnockDefaultTypeInternal;
extern SumFutureKnockDefaultTypeInternal _SumFutureKnock_default_instance_;
}  // namespace autotrade
namespace google {
namespace protobuf {
template<> ::autotrade::FutureCapital* Arena::CreateMaybeMessage<::autotrade::FutureCapital>(Arena*);
template<> ::autotrade::FutureConfirmSettlementReqt* Arena::CreateMaybeMessage<::autotrade::FutureConfirmSettlementReqt>(Arena*);
template<> ::autotrade::FutureConfirmSettlementResp* Arena::CreateMaybeMessage<::autotrade::FutureConfirmSettlementResp>(Arena*);
template<> ::autotrade::FutureDealDetail* Arena::CreateMaybeMessage<::autotrade::FutureDealDetail>(Arena*);
template<> ::autotrade::FutureDealDetail_DealDetail* Arena::CreateMaybeMessage<::autotrade::FutureDealDetail_DealDetail>(Arena*);
template<> ::autotrade::FutureDeleteReqt* Arena::CreateMaybeMessage<::autotrade::FutureDeleteReqt>(Arena*);
template<> ::autotrade::FutureDeleteResp* Arena::CreateMaybeMessage<::autotrade::FutureDeleteResp>(Arena*);
template<> ::autotrade::FutureLoginReqt* Arena::CreateMaybeMessage<::autotrade::FutureLoginReqt>(Arena*);
template<> ::autotrade::FutureLoginResp* Arena::CreateMaybeMessage<::autotrade::FutureLoginResp>(Arena*);
template<> ::autotrade::FutureLogoutReqt* Arena::CreateMaybeMessage<::autotrade::FutureLogoutReqt>(Arena*);
template<> ::autotrade::FutureLogoutResp* Arena::CreateMaybeMessage<::autotrade::FutureLogoutResp>(Arena*);
template<> ::autotrade::FutureOrderActionResp* Arena::CreateMaybeMessage<::autotrade::FutureOrderActionResp>(Arena*);
template<> ::autotrade::FutureOrderInfo* Arena::CreateMaybeMessage<::autotrade::FutureOrderInfo>(Arena*);
template<> ::autotrade::FutureOrderInfo_OrderDetail* Arena::CreateMaybeMessage<::autotrade::FutureOrderInfo_OrderDetail>(Arena*);
template<> ::autotrade::FutureOrderInsertResp* Arena::CreateMaybeMessage<::autotrade::FutureOrderInsertResp>(Arena*);
template<> ::autotrade::FutureOrderReqt* Arena::CreateMaybeMessage<::autotrade::FutureOrderReqt>(Arena*);
template<> ::autotrade::FutureOrderResp* Arena::CreateMaybeMessage<::autotrade::FutureOrderResp>(Arena*);
template<> ::autotrade::FuturePosition* Arena::CreateMaybeMessage<::autotrade::FuturePosition>(Arena*);
template<> ::autotrade::FutureQueryCaptialReqt* Arena::CreateMaybeMessage<::autotrade::FutureQueryCaptialReqt>(Arena*);
template<> ::autotrade::FutureQueryDealDetailReqt* Arena::CreateMaybeMessage<::autotrade::FutureQueryDealDetailReqt>(Arena*);
template<> ::autotrade::FutureQueryOrderReqt* Arena::CreateMaybeMessage<::autotrade::FutureQueryOrderReqt>(Arena*);
template<> ::autotrade::FutureQueryPositionReqt* Arena::CreateMaybeMessage<::autotrade::FutureQueryPositionReqt>(Arena*);
template<> ::autotrade::FutureQuerySettlementConfirmReqt* Arena::CreateMaybeMessage<::autotrade::FutureQuerySettlementConfirmReqt>(Arena*);
template<> ::autotrade::FutureQuerySettlementConfirmResp* Arena::CreateMaybeMessage<::autotrade::FutureQuerySettlementConfirmResp>(Arena*);
template<> ::autotrade::FutureQuerySettlementReqt* Arena::CreateMaybeMessage<::autotrade::FutureQuerySettlementReqt>(Arena*);
template<> ::autotrade::FutureQuerySettlementResp* Arena::CreateMaybeMessage<::autotrade::FutureQuerySettlementResp>(Arena*);
template<> ::autotrade::FutureRtnOrder* Arena::CreateMaybeMessage<::autotrade::FutureRtnOrder>(Arena*);
template<> ::autotrade::FutureRtnOrderActionErr* Arena::CreateMaybeMessage<::autotrade::FutureRtnOrderActionErr>(Arena*);
template<> ::autotrade::FutureRtnOrderInsertErr* Arena::CreateMaybeMessage<::autotrade::FutureRtnOrderInsertErr>(Arena*);
template<> ::autotrade::FutureRtnTrade* Arena::CreateMaybeMessage<::autotrade::FutureRtnTrade>(Arena*);
template<> ::autotrade::FutureSystemConnected* Arena::CreateMaybeMessage<::autotrade::FutureSystemConnected>(Arena*);
template<> ::autotrade::FutureSystemDisconnected* Arena::CreateMaybeMessage<::autotrade::FutureSystemDisconnected>(Arena*);
template<> ::autotrade::InnerFutureQueryOrderResp* Arena::CreateMaybeMessage<::autotrade::InnerFutureQueryOrderResp>(Arena*);
template<> ::autotrade::InnerFutureQueryTradeResp* Arena::CreateMaybeMessage<::autotrade::InnerFutureQueryTradeResp>(Arena*);
template<> ::autotrade::InnerQueryOrderReqt* Arena::CreateMaybeMessage<::autotrade::InnerQueryOrderReqt>(Arena*);
template<> ::autotrade::InnerQueryTradeReqt* Arena::CreateMaybeMessage<::autotrade::InnerQueryTradeReqt>(Arena*);
template<> ::autotrade::OneFutureKnock* Arena::CreateMaybeMessage<::autotrade::OneFutureKnock>(Arena*);
template<> ::autotrade::OneFuturePosition* Arena::CreateMaybeMessage<::autotrade::OneFuturePosition>(Arena*);
template<> ::autotrade::SumFutureKnock* Arena::CreateMaybeMessage<::autotrade::SumFutureKnock>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace autotrade {

// ===================================================================

class FutureLoginReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.FutureLoginReqt) */ {
 public:
  FutureLoginReqt();
  virtual ~FutureLoginReqt();

  FutureLoginReqt(const FutureLoginReqt& from);

  inline FutureLoginReqt& operator=(const FutureLoginReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FutureLoginReqt(FutureLoginReqt&& from) noexcept
    : FutureLoginReqt() {
    *this = ::std::move(from);
  }

  inline FutureLoginReqt& operator=(FutureLoginReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FutureLoginReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FutureLoginReqt* internal_default_instance() {
    return reinterpret_cast<const FutureLoginReqt*>(
               &_FutureLoginReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(FutureLoginReqt* other);
  friend void swap(FutureLoginReqt& a, FutureLoginReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FutureLoginReqt* New() const final {
    return CreateMaybeMessage<FutureLoginReqt>(NULL);
  }

  FutureLoginReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FutureLoginReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FutureLoginReqt& from);
  void MergeFrom(const FutureLoginReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FutureLoginReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string trading_day = 2;
  bool has_trading_day() const;
  void clear_trading_day();
  static const int kTradingDayFieldNumber = 2;
  const ::std::string& trading_day() const;
  void set_trading_day(const ::std::string& value);
  #if LANG_CXX11
  void set_trading_day(::std::string&& value);
  #endif
  void set_trading_day(const char* value);
  void set_trading_day(const char* value, size_t size);
  ::std::string* mutable_trading_day();
  ::std::string* release_trading_day();
  void set_allocated_trading_day(::std::string* trading_day);

  // optional string broker_id = 3;
  bool has_broker_id() const;
  void clear_broker_id();
  static const int kBrokerIdFieldNumber = 3;
  const ::std::string& broker_id() const;
  void set_broker_id(const ::std::string& value);
  #if LANG_CXX11
  void set_broker_id(::std::string&& value);
  #endif
  void set_broker_id(const char* value);
  void set_broker_id(const char* value, size_t size);
  ::std::string* mutable_broker_id();
  ::std::string* release_broker_id();
  void set_allocated_broker_id(::std::string* broker_id);

  // optional string future_account = 4;
  bool has_future_account() const;
  void clear_future_account();
  static const int kFutureAccountFieldNumber = 4;
  const ::std::string& future_account() const;
  void set_future_account(const ::std::string& value);
  #if LANG_CXX11
  void set_future_account(::std::string&& value);
  #endif
  void set_future_account(const char* value);
  void set_future_account(const char* value, size_t size);
  ::std::string* mutable_future_account();
  ::std::string* release_future_account();
  void set_allocated_future_account(::std::string* future_account);

  // optional string pwd = 5;
  bool has_pwd() const;
  void clear_pwd();
  static const int kPwdFieldNumber = 5;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd(::std::string&& value);
  #endif
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);

  // optional string request_id = 6;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 6;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional int32 funcid = 1 [default = 12000001];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.FutureLoginReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_trading_day();
  void clear_has_trading_day();
  void set_has_broker_id();
  void clear_has_broker_id();
  void set_has_future_account();
  void clear_has_future_account();
  void set_has_pwd();
  void clear_has_pwd();
  void set_has_request_id();
  void clear_has_request_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr trading_day_;
  ::google::protobuf::internal::ArenaStringPtr broker_id_;
  ::google::protobuf::internal::ArenaStringPtr future_account_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqfuture_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FutureLoginResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.FutureLoginResp) */ {
 public:
  FutureLoginResp();
  virtual ~FutureLoginResp();

  FutureLoginResp(const FutureLoginResp& from);

  inline FutureLoginResp& operator=(const FutureLoginResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FutureLoginResp(FutureLoginResp&& from) noexcept
    : FutureLoginResp() {
    *this = ::std::move(from);
  }

  inline FutureLoginResp& operator=(FutureLoginResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FutureLoginResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FutureLoginResp* internal_default_instance() {
    return reinterpret_cast<const FutureLoginResp*>(
               &_FutureLoginResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(FutureLoginResp* other);
  friend void swap(FutureLoginResp& a, FutureLoginResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FutureLoginResp* New() const final {
    return CreateMaybeMessage<FutureLoginResp>(NULL);
  }

  FutureLoginResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FutureLoginResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FutureLoginResp& from);
  void MergeFrom(const FutureLoginResp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FutureLoginResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string future_account = 2;
  bool has_future_account() const;
  void clear_future_account();
  static const int kFutureAccountFieldNumber = 2;
  const ::std::string& future_account() const;
  void set_future_account(const ::std::string& value);
  #if LANG_CXX11
  void set_future_account(::std::string&& value);
  #endif
  void set_future_account(const char* value);
  void set_future_account(const char* value, size_t size);
  ::std::string* mutable_future_account();
  ::std::string* release_future_account();
  void set_allocated_future_account(::std::string* future_account);

  // optional string trading_day = 3;
  bool has_trading_day() const;
  void clear_trading_day();
  static const int kTradingDayFieldNumber = 3;
  const ::std::string& trading_day() const;
  void set_trading_day(const ::std::string& value);
  #if LANG_CXX11
  void set_trading_day(::std::string&& value);
  #endif
  void set_trading_day(const char* value);
  void set_trading_day(const char* value, size_t size);
  ::std::string* mutable_trading_day();
  ::std::string* release_trading_day();
  void set_allocated_trading_day(::std::string* trading_day);

  // optional string login_time = 4;
  bool has_login_time() const;
  void clear_login_time();
  static const int kLoginTimeFieldNumber = 4;
  const ::std::string& login_time() const;
  void set_login_time(const ::std::string& value);
  #if LANG_CXX11
  void set_login_time(::std::string&& value);
  #endif
  void set_login_time(const char* value);
  void set_login_time(const char* value, size_t size);
  ::std::string* mutable_login_time();
  ::std::string* release_login_time();
  void set_allocated_login_time(::std::string* login_time);

  // optional string broker_id = 5;
  bool has_broker_id() const;
  void clear_broker_id();
  static const int kBrokerIdFieldNumber = 5;
  const ::std::string& broker_id() const;
  void set_broker_id(const ::std::string& value);
  #if LANG_CXX11
  void set_broker_id(::std::string&& value);
  #endif
  void set_broker_id(const char* value);
  void set_broker_id(const char* value, size_t size);
  ::std::string* mutable_broker_id();
  ::std::string* release_broker_id();
  void set_allocated_broker_id(::std::string* broker_id);

  // optional string system_name = 6;
  bool has_system_name() const;
  void clear_system_name();
  static const int kSystemNameFieldNumber = 6;
  const ::std::string& system_name() const;
  void set_system_name(const ::std::string& value);
  #if LANG_CXX11
  void set_system_name(::std::string&& value);
  #endif
  void set_system_name(const char* value);
  void set_system_name(const char* value, size_t size);
  ::std::string* mutable_system_name();
  ::std::string* release_system_name();
  void set_allocated_system_name(::std::string* system_name);

  // optional string max_order_ref = 9;
  bool has_max_order_ref() const;
  void clear_max_order_ref();
  static const int kMaxOrderRefFieldNumber = 9;
  const ::std::string& max_order_ref() const;
  void set_max_order_ref(const ::std::string& value);
  #if LANG_CXX11
  void set_max_order_ref(::std::string&& value);
  #endif
  void set_max_order_ref(const char* value);
  void set_max_order_ref(const char* value, size_t size);
  ::std::string* mutable_max_order_ref();
  ::std::string* release_max_order_ref();
  void set_allocated_max_order_ref(::std::string* max_order_ref);

  // optional string shfe_time = 10;
  bool has_shfe_time() const;
  void clear_shfe_time();
  static const int kShfeTimeFieldNumber = 10;
  const ::std::string& shfe_time() const;
  void set_shfe_time(const ::std::string& value);
  #if LANG_CXX11
  void set_shfe_time(::std::string&& value);
  #endif
  void set_shfe_time(const char* value);
  void set_shfe_time(const char* value, size_t size);
  ::std::string* mutable_shfe_time();
  ::std::string* release_shfe_time();
  void set_allocated_shfe_time(::std::string* shfe_time);

  // optional string dce_time = 11;
  bool has_dce_time() const;
  void clear_dce_time();
  static const int kDceTimeFieldNumber = 11;
  const ::std::string& dce_time() const;
  void set_dce_time(const ::std::string& value);
  #if LANG_CXX11
  void set_dce_time(::std::string&& value);
  #endif
  void set_dce_time(const char* value);
  void set_dce_time(const char* value, size_t size);
  ::std::string* mutable_dce_time();
  ::std::string* release_dce_time();
  void set_allocated_dce_time(::std::string* dce_time);

  // optional string czce_time = 12;
  bool has_czce_time() const;
  void clear_czce_time();
  static const int kCzceTimeFieldNumber = 12;
  const ::std::string& czce_time() const;
  void set_czce_time(const ::std::string& value);
  #if LANG_CXX11
  void set_czce_time(::std::string&& value);
  #endif
  void set_czce_time(const char* value);
  void set_czce_time(const char* value, size_t size);
  ::std::string* mutable_czce_time();
  ::std::string* release_czce_time();
  void set_allocated_czce_time(::std::string* czce_time);

  // optional string ffex_time = 13;
  bool has_ffex_time() const;
  void clear_ffex_time();
  static const int kFfexTimeFieldNumber = 13;
  const ::std::string& ffex_time() const;
  void set_ffex_time(const ::std::string& value);
  #if LANG_CXX11
  void set_ffex_time(::std::string&& value);
  #endif
  void set_ffex_time(const char* value);
  void set_ffex_time(const char* value, size_t size);
  ::std::string* mutable_ffex_time();
  ::std::string* release_ffex_time();
  void set_allocated_ffex_time(::std::string* ffex_time);

  // optional string request_id = 14;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 14;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional string ret_message = 16;
  bool has_ret_message() const;
  void clear_ret_message();
  static const int kRetMessageFieldNumber = 16;
  const ::std::string& ret_message() const;
  void set_ret_message(const ::std::string& value);
  #if LANG_CXX11
  void set_ret_message(::std::string&& value);
  #endif
  void set_ret_message(const char* value);
  void set_ret_message(const char* value, size_t size);
  ::std::string* mutable_ret_message();
  ::std::string* release_ret_message();
  void set_allocated_ret_message(::std::string* ret_message);

  // optional int32 front_id = 7;
  bool has_front_id() const;
  void clear_front_id();
  static const int kFrontIdFieldNumber = 7;
  ::google::protobuf::int32 front_id() const;
  void set_front_id(::google::protobuf::int32 value);

  // optional int32 session_id = 8;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 8;
  ::google::protobuf::int32 session_id() const;
  void set_session_id(::google::protobuf::int32 value);

  // required int32 ret_code = 15;
  bool has_ret_code() const;
  void clear_ret_code();
  static const int kRetCodeFieldNumber = 15;
  ::google::protobuf::int32 ret_code() const;
  void set_ret_code(::google::protobuf::int32 value);

  // optional int32 funcid = 1 [default = 12100001];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.FutureLoginResp)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_future_account();
  void clear_has_future_account();
  void set_has_trading_day();
  void clear_has_trading_day();
  void set_has_login_time();
  void clear_has_login_time();
  void set_has_broker_id();
  void clear_has_broker_id();
  void set_has_system_name();
  void clear_has_system_name();
  void set_has_front_id();
  void clear_has_front_id();
  void set_has_session_id();
  void clear_has_session_id();
  void set_has_max_order_ref();
  void clear_has_max_order_ref();
  void set_has_shfe_time();
  void clear_has_shfe_time();
  void set_has_dce_time();
  void clear_has_dce_time();
  void set_has_czce_time();
  void clear_has_czce_time();
  void set_has_ffex_time();
  void clear_has_ffex_time();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_ret_code();
  void clear_has_ret_code();
  void set_has_ret_message();
  void clear_has_ret_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr future_account_;
  ::google::protobuf::internal::ArenaStringPtr trading_day_;
  ::google::protobuf::internal::ArenaStringPtr login_time_;
  ::google::protobuf::internal::ArenaStringPtr broker_id_;
  ::google::protobuf::internal::ArenaStringPtr system_name_;
  ::google::protobuf::internal::ArenaStringPtr max_order_ref_;
  ::google::protobuf::internal::ArenaStringPtr shfe_time_;
  ::google::protobuf::internal::ArenaStringPtr dce_time_;
  ::google::protobuf::internal::ArenaStringPtr czce_time_;
  ::google::protobuf::internal::ArenaStringPtr ffex_time_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr ret_message_;
  ::google::protobuf::int32 front_id_;
  ::google::protobuf::int32 session_id_;
  ::google::protobuf::int32 ret_code_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqfuture_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FutureLogoutReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.FutureLogoutReqt) */ {
 public:
  FutureLogoutReqt();
  virtual ~FutureLogoutReqt();

  FutureLogoutReqt(const FutureLogoutReqt& from);

  inline FutureLogoutReqt& operator=(const FutureLogoutReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FutureLogoutReqt(FutureLogoutReqt&& from) noexcept
    : FutureLogoutReqt() {
    *this = ::std::move(from);
  }

  inline FutureLogoutReqt& operator=(FutureLogoutReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FutureLogoutReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FutureLogoutReqt* internal_default_instance() {
    return reinterpret_cast<const FutureLogoutReqt*>(
               &_FutureLogoutReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(FutureLogoutReqt* other);
  friend void swap(FutureLogoutReqt& a, FutureLogoutReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FutureLogoutReqt* New() const final {
    return CreateMaybeMessage<FutureLogoutReqt>(NULL);
  }

  FutureLogoutReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FutureLogoutReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FutureLogoutReqt& from);
  void MergeFrom(const FutureLogoutReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FutureLogoutReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string broker_id = 2;
  bool has_broker_id() const;
  void clear_broker_id();
  static const int kBrokerIdFieldNumber = 2;
  const ::std::string& broker_id() const;
  void set_broker_id(const ::std::string& value);
  #if LANG_CXX11
  void set_broker_id(::std::string&& value);
  #endif
  void set_broker_id(const char* value);
  void set_broker_id(const char* value, size_t size);
  ::std::string* mutable_broker_id();
  ::std::string* release_broker_id();
  void set_allocated_broker_id(::std::string* broker_id);

  // optional string future_account = 3;
  bool has_future_account() const;
  void clear_future_account();
  static const int kFutureAccountFieldNumber = 3;
  const ::std::string& future_account() const;
  void set_future_account(const ::std::string& value);
  #if LANG_CXX11
  void set_future_account(::std::string&& value);
  #endif
  void set_future_account(const char* value);
  void set_future_account(const char* value, size_t size);
  ::std::string* mutable_future_account();
  ::std::string* release_future_account();
  void set_allocated_future_account(::std::string* future_account);

  // optional string request_id = 4;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 4;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional string ret_message = 6;
  bool has_ret_message() const;
  void clear_ret_message();
  static const int kRetMessageFieldNumber = 6;
  const ::std::string& ret_message() const;
  void set_ret_message(const ::std::string& value);
  #if LANG_CXX11
  void set_ret_message(::std::string&& value);
  #endif
  void set_ret_message(const char* value);
  void set_ret_message(const char* value, size_t size);
  ::std::string* mutable_ret_message();
  ::std::string* release_ret_message();
  void set_allocated_ret_message(::std::string* ret_message);

  // required int32 ret_code = 5;
  bool has_ret_code() const;
  void clear_ret_code();
  static const int kRetCodeFieldNumber = 5;
  ::google::protobuf::int32 ret_code() const;
  void set_ret_code(::google::protobuf::int32 value);

  // optional int32 funcid = 1 [default = 12000002];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.FutureLogoutReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_broker_id();
  void clear_has_broker_id();
  void set_has_future_account();
  void clear_has_future_account();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_ret_code();
  void clear_has_ret_code();
  void set_has_ret_message();
  void clear_has_ret_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr broker_id_;
  ::google::protobuf::internal::ArenaStringPtr future_account_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr ret_message_;
  ::google::protobuf::int32 ret_code_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqfuture_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FutureLogoutResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.FutureLogoutResp) */ {
 public:
  FutureLogoutResp();
  virtual ~FutureLogoutResp();

  FutureLogoutResp(const FutureLogoutResp& from);

  inline FutureLogoutResp& operator=(const FutureLogoutResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FutureLogoutResp(FutureLogoutResp&& from) noexcept
    : FutureLogoutResp() {
    *this = ::std::move(from);
  }

  inline FutureLogoutResp& operator=(FutureLogoutResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FutureLogoutResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FutureLogoutResp* internal_default_instance() {
    return reinterpret_cast<const FutureLogoutResp*>(
               &_FutureLogoutResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(FutureLogoutResp* other);
  friend void swap(FutureLogoutResp& a, FutureLogoutResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FutureLogoutResp* New() const final {
    return CreateMaybeMessage<FutureLogoutResp>(NULL);
  }

  FutureLogoutResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FutureLogoutResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FutureLogoutResp& from);
  void MergeFrom(const FutureLogoutResp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FutureLogoutResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string broker_id = 2;
  bool has_broker_id() const;
  void clear_broker_id();
  static const int kBrokerIdFieldNumber = 2;
  const ::std::string& broker_id() const;
  void set_broker_id(const ::std::string& value);
  #if LANG_CXX11
  void set_broker_id(::std::string&& value);
  #endif
  void set_broker_id(const char* value);
  void set_broker_id(const char* value, size_t size);
  ::std::string* mutable_broker_id();
  ::std::string* release_broker_id();
  void set_allocated_broker_id(::std::string* broker_id);

  // optional string future_account = 3;
  bool has_future_account() const;
  void clear_future_account();
  static const int kFutureAccountFieldNumber = 3;
  const ::std::string& future_account() const;
  void set_future_account(const ::std::string& value);
  #if LANG_CXX11
  void set_future_account(::std::string&& value);
  #endif
  void set_future_account(const char* value);
  void set_future_account(const char* value, size_t size);
  ::std::string* mutable_future_account();
  ::std::string* release_future_account();
  void set_allocated_future_account(::std::string* future_account);

  // optional string request_id = 4;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 4;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional string ret_message = 6;
  bool has_ret_message() const;
  void clear_ret_message();
  static const int kRetMessageFieldNumber = 6;
  const ::std::string& ret_message() const;
  void set_ret_message(const ::std::string& value);
  #if LANG_CXX11
  void set_ret_message(::std::string&& value);
  #endif
  void set_ret_message(const char* value);
  void set_ret_message(const char* value, size_t size);
  ::std::string* mutable_ret_message();
  ::std::string* release_ret_message();
  void set_allocated_ret_message(::std::string* ret_message);

  // required int32 ret_code = 5;
  bool has_ret_code() const;
  void clear_ret_code();
  static const int kRetCodeFieldNumber = 5;
  ::google::protobuf::int32 ret_code() const;
  void set_ret_code(::google::protobuf::int32 value);

  // optional int32 funcid = 1 [default = 12100002];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.FutureLogoutResp)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_broker_id();
  void clear_has_broker_id();
  void set_has_future_account();
  void clear_has_future_account();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_ret_code();
  void clear_has_ret_code();
  void set_has_ret_message();
  void clear_has_ret_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr broker_id_;
  ::google::protobuf::internal::ArenaStringPtr future_account_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr ret_message_;
  ::google::protobuf::int32 ret_code_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqfuture_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FutureOrderReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.FutureOrderReqt) */ {
 public:
  FutureOrderReqt();
  virtual ~FutureOrderReqt();

  FutureOrderReqt(const FutureOrderReqt& from);

  inline FutureOrderReqt& operator=(const FutureOrderReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FutureOrderReqt(FutureOrderReqt&& from) noexcept
    : FutureOrderReqt() {
    *this = ::std::move(from);
  }

  inline FutureOrderReqt& operator=(FutureOrderReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FutureOrderReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FutureOrderReqt* internal_default_instance() {
    return reinterpret_cast<const FutureOrderReqt*>(
               &_FutureOrderReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(FutureOrderReqt* other);
  friend void swap(FutureOrderReqt& a, FutureOrderReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FutureOrderReqt* New() const final {
    return CreateMaybeMessage<FutureOrderReqt>(NULL);
  }

  FutureOrderReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FutureOrderReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FutureOrderReqt& from);
  void MergeFrom(const FutureOrderReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FutureOrderReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string code = 2;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string request_id = 9;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 9;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // required string order_id = 10;
  bool has_order_id() const;
  void clear_order_id();
  static const int kOrderIdFieldNumber = 10;
  const ::std::string& order_id() const;
  void set_order_id(const ::std::string& value);
  #if LANG_CXX11
  void set_order_id(::std::string&& value);
  #endif
  void set_order_id(const char* value);
  void set_order_id(const char* value, size_t size);
  ::std::string* mutable_order_id();
  ::std::string* release_order_id();
  void set_allocated_order_id(::std::string* order_id);

  // optional string order_type = 11;
  bool has_order_type() const;
  void clear_order_type();
  static const int kOrderTypeFieldNumber = 11;
  const ::std::string& order_type() const;
  void set_order_type(const ::std::string& value);
  #if LANG_CXX11
  void set_order_type(::std::string&& value);
  #endif
  void set_order_type(const char* value);
  void set_order_type(const char* value, size_t size);
  ::std::string* mutable_order_type();
  ::std::string* release_order_type();
  void set_allocated_order_type(::std::string* order_type);

  // optional string parent_id = 12;
  bool has_parent_id() const;
  void clear_parent_id();
  static const int kParentIdFieldNumber = 12;
  const ::std::string& parent_id() const;
  void set_parent_id(const ::std::string& value);
  #if LANG_CXX11
  void set_parent_id(::std::string&& value);
  #endif
  void set_parent_id(const char* value);
  void set_parent_id(const char* value, size_t size);
  ::std::string* mutable_parent_id();
  ::std::string* release_parent_id();
  void set_allocated_parent_id(::std::string* parent_id);

  // optional string parent_type = 13;
  bool has_parent_type() const;
  void clear_parent_type();
  static const int kParentTypeFieldNumber = 13;
  const ::std::string& parent_type() const;
  void set_parent_type(const ::std::string& value);
  #if LANG_CXX11
  void set_parent_type(::std::string&& value);
  #endif
  void set_parent_type(const char* value);
  void set_parent_type(const char* value, size_t size);
  ::std::string* mutable_parent_type();
  ::std::string* release_parent_type();
  void set_allocated_parent_type(::std::string* parent_type);

  // optional string name = 19;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 19;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string fund_id = 20;
  bool has_fund_id() const;
  void clear_fund_id();
  static const int kFundIdFieldNumber = 20;
  const ::std::string& fund_id() const;
  void set_fund_id(const ::std::string& value);
  #if LANG_CXX11
  void set_fund_id(::std::string&& value);
  #endif
  void set_fund_id(const char* value);
  void set_fund_id(const char* value, size_t size);
  ::std::string* mutable_fund_id();
  ::std::string* release_fund_id();
  void set_allocated_fund_id(::std::string* fund_id);

  // optional string trader_id = 21;
  bool has_trader_id() const;
  void clear_trader_id();
  static const int kTraderIdFieldNumber = 21;
  const ::std::string& trader_id() const;
  void set_trader_id(const ::std::string& value);
  #if LANG_CXX11
  void set_trader_id(::std::string&& value);
  #endif
  void set_trader_id(const char* value);
  void set_trader_id(const char* value, size_t size);
  ::std::string* mutable_trader_id();
  ::std::string* release_trader_id();
  void set_allocated_trader_id(::std::string* trader_id);

  // optional string session_id = 22;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 22;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // required int64 price = 3;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 3;
  ::google::protobuf::int64 price() const;
  void set_price(::google::protobuf::int64 value);

  // required uint32 qty = 4;
  bool has_qty() const;
  void clear_qty();
  static const int kQtyFieldNumber = 4;
  ::google::protobuf::uint32 qty() const;
  void set_qty(::google::protobuf::uint32 value);

  // required uint32 bsflag = 5;
  bool has_bsflag() const;
  void clear_bsflag();
  static const int kBsflagFieldNumber = 5;
  ::google::protobuf::uint32 bsflag() const;
  void set_bsflag(::google::protobuf::uint32 value);

  // optional int64 stop_price = 7 [default = 0];
  bool has_stop_price() const;
  void clear_stop_price();
  static const int kStopPriceFieldNumber = 7;
  ::google::protobuf::int64 stop_price() const;
  void set_stop_price(::google::protobuf::int64 value);

  // optional int32 kpcbj = 6 [default = 0];
  bool has_kpcbj() const;
  void clear_kpcbj();
  static const int kKpcbjFieldNumber = 6;
  ::google::protobuf::int32 kpcbj() const;
  void set_kpcbj(::google::protobuf::int32 value);

  // optional int32 hedge_flag = 8 [default = 0];
  bool has_hedge_flag() const;
  void clear_hedge_flag();
  static const int kHedgeFlagFieldNumber = 8;
  ::google::protobuf::int32 hedge_flag() const;
  void set_hedge_flag(::google::protobuf::int32 value);

  // optional int64 request_time = 15 [default = 0];
  bool has_request_time() const;
  void clear_request_time();
  static const int kRequestTimeFieldNumber = 15;
  ::google::protobuf::int64 request_time() const;
  void set_request_time(::google::protobuf::int64 value);

  // optional int64 request_date = 17 [default = 0];
  bool has_request_date() const;
  void clear_request_date();
  static const int kRequestDateFieldNumber = 17;
  ::google::protobuf::int64 request_date() const;
  void set_request_date(::google::protobuf::int64 value);

  // optional int64 market = 18;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 18;
  ::google::protobuf::int64 market() const;
  void set_market(::google::protobuf::int64 value);

  // optional int32 price_type = 14 [default = 0];
  bool has_price_type() const;
  void clear_price_type();
  static const int kPriceTypeFieldNumber = 14;
  ::google::protobuf::int32 price_type() const;
  void set_price_type(::google::protobuf::int32 value);

  // optional int32 funcid = 1 [default = 12001001];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // optional int64 active_interval = 16 [default = 1000];
  bool has_active_interval() const;
  void clear_active_interval();
  static const int kActiveIntervalFieldNumber = 16;
  ::google::protobuf::int64 active_interval() const;
  void set_active_interval(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:autotrade.FutureOrderReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_code();
  void clear_has_code();
  void set_has_price();
  void clear_has_price();
  void set_has_qty();
  void clear_has_qty();
  void set_has_bsflag();
  void clear_has_bsflag();
  void set_has_kpcbj();
  void clear_has_kpcbj();
  void set_has_stop_price();
  void clear_has_stop_price();
  void set_has_hedge_flag();
  void clear_has_hedge_flag();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_order_id();
  void clear_has_order_id();
  void set_has_order_type();
  void clear_has_order_type();
  void set_has_parent_id();
  void clear_has_parent_id();
  void set_has_parent_type();
  void clear_has_parent_type();
  void set_has_price_type();
  void clear_has_price_type();
  void set_has_request_time();
  void clear_has_request_time();
  void set_has_active_interval();
  void clear_has_active_interval();
  void set_has_request_date();
  void clear_has_request_date();
  void set_has_market();
  void clear_has_market();
  void set_has_name();
  void clear_has_name();
  void set_has_fund_id();
  void clear_has_fund_id();
  void set_has_trader_id();
  void clear_has_trader_id();
  void set_has_session_id();
  void clear_has_session_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr order_id_;
  ::google::protobuf::internal::ArenaStringPtr order_type_;
  ::google::protobuf::internal::ArenaStringPtr parent_id_;
  ::google::protobuf::internal::ArenaStringPtr parent_type_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr fund_id_;
  ::google::protobuf::internal::ArenaStringPtr trader_id_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::int64 price_;
  ::google::protobuf::uint32 qty_;
  ::google::protobuf::uint32 bsflag_;
  ::google::protobuf::int64 stop_price_;
  ::google::protobuf::int32 kpcbj_;
  ::google::protobuf::int32 hedge_flag_;
  ::google::protobuf::int64 request_time_;
  ::google::protobuf::int64 request_date_;
  ::google::protobuf::int64 market_;
  ::google::protobuf::int32 price_type_;
  ::google::protobuf::int32 funcid_;
  ::google::protobuf::int64 active_interval_;
  friend struct ::protobuf_protos_2fqfuture_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FutureOrderResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.FutureOrderResp) */ {
 public:
  FutureOrderResp();
  virtual ~FutureOrderResp();

  FutureOrderResp(const FutureOrderResp& from);

  inline FutureOrderResp& operator=(const FutureOrderResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FutureOrderResp(FutureOrderResp&& from) noexcept
    : FutureOrderResp() {
    *this = ::std::move(from);
  }

  inline FutureOrderResp& operator=(FutureOrderResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FutureOrderResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FutureOrderResp* internal_default_instance() {
    return reinterpret_cast<const FutureOrderResp*>(
               &_FutureOrderResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(FutureOrderResp* other);
  friend void swap(FutureOrderResp& a, FutureOrderResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FutureOrderResp* New() const final {
    return CreateMaybeMessage<FutureOrderResp>(NULL);
  }

  FutureOrderResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FutureOrderResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FutureOrderResp& from);
  void MergeFrom(const FutureOrderResp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FutureOrderResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string order_group = 2;
  bool has_order_group() const;
  void clear_order_group();
  static const int kOrderGroupFieldNumber = 2;
  const ::std::string& order_group() const;
  void set_order_group(const ::std::string& value);
  #if LANG_CXX11
  void set_order_group(::std::string&& value);
  #endif
  void set_order_group(const char* value);
  void set_order_group(const char* value, size_t size);
  ::std::string* mutable_order_group();
  ::std::string* release_order_group();
  void set_allocated_order_group(::std::string* order_group);

  // optional string request_id = 3;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // required string order_id = 4;
  bool has_order_id() const;
  void clear_order_id();
  static const int kOrderIdFieldNumber = 4;
  const ::std::string& order_id() const;
  void set_order_id(const ::std::string& value);
  #if LANG_CXX11
  void set_order_id(::std::string&& value);
  #endif
  void set_order_id(const char* value);
  void set_order_id(const char* value, size_t size);
  ::std::string* mutable_order_id();
  ::std::string* release_order_id();
  void set_allocated_order_id(::std::string* order_id);

  // optional int32 funcid = 1 [default = 12101001];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.FutureOrderResp)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_order_group();
  void clear_has_order_group();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_order_id();
  void clear_has_order_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr order_group_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr order_id_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqfuture_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FutureDeleteReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.FutureDeleteReqt) */ {
 public:
  FutureDeleteReqt();
  virtual ~FutureDeleteReqt();

  FutureDeleteReqt(const FutureDeleteReqt& from);

  inline FutureDeleteReqt& operator=(const FutureDeleteReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FutureDeleteReqt(FutureDeleteReqt&& from) noexcept
    : FutureDeleteReqt() {
    *this = ::std::move(from);
  }

  inline FutureDeleteReqt& operator=(FutureDeleteReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FutureDeleteReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FutureDeleteReqt* internal_default_instance() {
    return reinterpret_cast<const FutureDeleteReqt*>(
               &_FutureDeleteReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(FutureDeleteReqt* other);
  friend void swap(FutureDeleteReqt& a, FutureDeleteReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FutureDeleteReqt* New() const final {
    return CreateMaybeMessage<FutureDeleteReqt>(NULL);
  }

  FutureDeleteReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FutureDeleteReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FutureDeleteReqt& from);
  void MergeFrom(const FutureDeleteReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FutureDeleteReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string order_group = 2;
  bool has_order_group() const;
  void clear_order_group();
  static const int kOrderGroupFieldNumber = 2;
  const ::std::string& order_group() const;
  void set_order_group(const ::std::string& value);
  #if LANG_CXX11
  void set_order_group(::std::string&& value);
  #endif
  void set_order_group(const char* value);
  void set_order_group(const char* value, size_t size);
  ::std::string* mutable_order_group();
  ::std::string* release_order_group();
  void set_allocated_order_group(::std::string* order_group);

  // optional string request_id = 4;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 4;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional string fund_id = 5;
  bool has_fund_id() const;
  void clear_fund_id();
  static const int kFundIdFieldNumber = 5;
  const ::std::string& fund_id() const;
  void set_fund_id(const ::std::string& value);
  #if LANG_CXX11
  void set_fund_id(::std::string&& value);
  #endif
  void set_fund_id(const char* value);
  void set_fund_id(const char* value, size_t size);
  ::std::string* mutable_fund_id();
  ::std::string* release_fund_id();
  void set_allocated_fund_id(::std::string* fund_id);

  // optional string trader_id = 6;
  bool has_trader_id() const;
  void clear_trader_id();
  static const int kTraderIdFieldNumber = 6;
  const ::std::string& trader_id() const;
  void set_trader_id(const ::std::string& value);
  #if LANG_CXX11
  void set_trader_id(::std::string&& value);
  #endif
  void set_trader_id(const char* value);
  void set_trader_id(const char* value, size_t size);
  ::std::string* mutable_trader_id();
  ::std::string* release_trader_id();
  void set_allocated_trader_id(::std::string* trader_id);

  // optional string session_id = 7;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 7;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // optional uint32 market = 3 [default = 0];
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 3;
  ::google::protobuf::uint32 market() const;
  void set_market(::google::protobuf::uint32 value);

  // optional int32 funcid = 1 [default = 12001002];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.FutureDeleteReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_order_group();
  void clear_has_order_group();
  void set_has_market();
  void clear_has_market();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_fund_id();
  void clear_has_fund_id();
  void set_has_trader_id();
  void clear_has_trader_id();
  void set_has_session_id();
  void clear_has_session_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr order_group_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr fund_id_;
  ::google::protobuf::internal::ArenaStringPtr trader_id_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::uint32 market_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqfuture_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FutureDeleteResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.FutureDeleteResp) */ {
 public:
  FutureDeleteResp();
  virtual ~FutureDeleteResp();

  FutureDeleteResp(const FutureDeleteResp& from);

  inline FutureDeleteResp& operator=(const FutureDeleteResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FutureDeleteResp(FutureDeleteResp&& from) noexcept
    : FutureDeleteResp() {
    *this = ::std::move(from);
  }

  inline FutureDeleteResp& operator=(FutureDeleteResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FutureDeleteResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FutureDeleteResp* internal_default_instance() {
    return reinterpret_cast<const FutureDeleteResp*>(
               &_FutureDeleteResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(FutureDeleteResp* other);
  friend void swap(FutureDeleteResp& a, FutureDeleteResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FutureDeleteResp* New() const final {
    return CreateMaybeMessage<FutureDeleteResp>(NULL);
  }

  FutureDeleteResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FutureDeleteResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FutureDeleteResp& from);
  void MergeFrom(const FutureDeleteResp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FutureDeleteResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string request_id = 2;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 2;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional int32 funcid = 1 [default = 12101002];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.FutureDeleteResp)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_request_id();
  void clear_has_request_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqfuture_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FutureQueryOrderReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.FutureQueryOrderReqt) */ {
 public:
  FutureQueryOrderReqt();
  virtual ~FutureQueryOrderReqt();

  FutureQueryOrderReqt(const FutureQueryOrderReqt& from);

  inline FutureQueryOrderReqt& operator=(const FutureQueryOrderReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FutureQueryOrderReqt(FutureQueryOrderReqt&& from) noexcept
    : FutureQueryOrderReqt() {
    *this = ::std::move(from);
  }

  inline FutureQueryOrderReqt& operator=(FutureQueryOrderReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FutureQueryOrderReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FutureQueryOrderReqt* internal_default_instance() {
    return reinterpret_cast<const FutureQueryOrderReqt*>(
               &_FutureQueryOrderReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(FutureQueryOrderReqt* other);
  friend void swap(FutureQueryOrderReqt& a, FutureQueryOrderReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FutureQueryOrderReqt* New() const final {
    return CreateMaybeMessage<FutureQueryOrderReqt>(NULL);
  }

  FutureQueryOrderReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FutureQueryOrderReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FutureQueryOrderReqt& from);
  void MergeFrom(const FutureQueryOrderReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FutureQueryOrderReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string orderno = 2 [default = ""];
  bool has_orderno() const;
  void clear_orderno();
  static const int kOrdernoFieldNumber = 2;
  const ::std::string& orderno() const;
  void set_orderno(const ::std::string& value);
  #if LANG_CXX11
  void set_orderno(::std::string&& value);
  #endif
  void set_orderno(const char* value);
  void set_orderno(const char* value, size_t size);
  ::std::string* mutable_orderno();
  ::std::string* release_orderno();
  void set_allocated_orderno(::std::string* orderno);

  // optional string start_pos = 3 [default = ""];
  bool has_start_pos() const;
  void clear_start_pos();
  static const int kStartPosFieldNumber = 3;
  const ::std::string& start_pos() const;
  void set_start_pos(const ::std::string& value);
  #if LANG_CXX11
  void set_start_pos(::std::string&& value);
  #endif
  void set_start_pos(const char* value);
  void set_start_pos(const char* value, size_t size);
  ::std::string* mutable_start_pos();
  ::std::string* release_start_pos();
  void set_allocated_start_pos(::std::string* start_pos);

  // optional string request_id = 4;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 4;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional int64 request_date = 5;
  bool has_request_date() const;
  void clear_request_date();
  static const int kRequestDateFieldNumber = 5;
  ::google::protobuf::int64 request_date() const;
  void set_request_date(::google::protobuf::int64 value);

  // optional int64 request_time = 6;
  bool has_request_time() const;
  void clear_request_time();
  static const int kRequestTimeFieldNumber = 6;
  ::google::protobuf::int64 request_time() const;
  void set_request_time(::google::protobuf::int64 value);

  // optional int32 funcid = 1 [default = 12002002];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // optional int64 active_interval = 7 [default = 10000];
  bool has_active_interval() const;
  void clear_active_interval();
  static const int kActiveIntervalFieldNumber = 7;
  ::google::protobuf::int64 active_interval() const;
  void set_active_interval(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:autotrade.FutureQueryOrderReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_orderno();
  void clear_has_orderno();
  void set_has_start_pos();
  void clear_has_start_pos();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_request_date();
  void clear_has_request_date();
  void set_has_request_time();
  void clear_has_request_time();
  void set_has_active_interval();
  void clear_has_active_interval();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr orderno_;
  ::google::protobuf::internal::ArenaStringPtr start_pos_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::int64 request_date_;
  ::google::protobuf::int64 request_time_;
  ::google::protobuf::int32 funcid_;
  ::google::protobuf::int64 active_interval_;
  friend struct ::protobuf_protos_2fqfuture_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FutureOrderInfo_OrderDetail : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.FutureOrderInfo.OrderDetail) */ {
 public:
  FutureOrderInfo_OrderDetail();
  virtual ~FutureOrderInfo_OrderDetail();

  FutureOrderInfo_OrderDetail(const FutureOrderInfo_OrderDetail& from);

  inline FutureOrderInfo_OrderDetail& operator=(const FutureOrderInfo_OrderDetail& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FutureOrderInfo_OrderDetail(FutureOrderInfo_OrderDetail&& from) noexcept
    : FutureOrderInfo_OrderDetail() {
    *this = ::std::move(from);
  }

  inline FutureOrderInfo_OrderDetail& operator=(FutureOrderInfo_OrderDetail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FutureOrderInfo_OrderDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FutureOrderInfo_OrderDetail* internal_default_instance() {
    return reinterpret_cast<const FutureOrderInfo_OrderDetail*>(
               &_FutureOrderInfo_OrderDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(FutureOrderInfo_OrderDetail* other);
  friend void swap(FutureOrderInfo_OrderDetail& a, FutureOrderInfo_OrderDetail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FutureOrderInfo_OrderDetail* New() const final {
    return CreateMaybeMessage<FutureOrderInfo_OrderDetail>(NULL);
  }

  FutureOrderInfo_OrderDetail* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FutureOrderInfo_OrderDetail>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FutureOrderInfo_OrderDetail& from);
  void MergeFrom(const FutureOrderInfo_OrderDetail& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FutureOrderInfo_OrderDetail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string orderno = 2;
  bool has_orderno() const;
  void clear_orderno();
  static const int kOrdernoFieldNumber = 2;
  const ::std::string& orderno() const;
  void set_orderno(const ::std::string& value);
  #if LANG_CXX11
  void set_orderno(::std::string&& value);
  #endif
  void set_orderno(const char* value);
  void set_orderno(const char* value, size_t size);
  ::std::string* mutable_orderno();
  ::std::string* release_orderno();
  void set_allocated_orderno(::std::string* orderno);

  // required string code = 8;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 8;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string name = 16;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 16;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint64 match_time = 1;
  bool has_match_time() const;
  void clear_match_time();
  static const int kMatchTimeFieldNumber = 1;
  ::google::protobuf::uint64 match_time() const;
  void set_match_time(::google::protobuf::uint64 value);

  // optional uint64 sumbit_time = 5;
  bool has_sumbit_time() const;
  void clear_sumbit_time();
  static const int kSumbitTimeFieldNumber = 5;
  ::google::protobuf::uint64 sumbit_time() const;
  void set_sumbit_time(::google::protobuf::uint64 value);

  // required uint64 order_time = 6;
  bool has_order_time() const;
  void clear_order_time();
  static const int kOrderTimeFieldNumber = 6;
  ::google::protobuf::uint64 order_time() const;
  void set_order_time(::google::protobuf::uint64 value);

  // required uint32 bsflag = 3;
  bool has_bsflag() const;
  void clear_bsflag();
  static const int kBsflagFieldNumber = 3;
  ::google::protobuf::uint32 bsflag() const;
  void set_bsflag(::google::protobuf::uint32 value);

  // required uint32 order_qty = 10;
  bool has_order_qty() const;
  void clear_order_qty();
  static const int kOrderQtyFieldNumber = 10;
  ::google::protobuf::uint32 order_qty() const;
  void set_order_qty(::google::protobuf::uint32 value);

  // required int64 order_price = 9;
  bool has_order_price() const;
  void clear_order_price();
  static const int kOrderPriceFieldNumber = 9;
  ::google::protobuf::int64 order_price() const;
  void set_order_price(::google::protobuf::int64 value);

  // required double order_frz_amt = 11;
  bool has_order_frz_amt() const;
  void clear_order_frz_amt();
  static const int kOrderFrzAmtFieldNumber = 11;
  double order_frz_amt() const;
  void set_order_frz_amt(double value);

  // required double match_amt = 12;
  bool has_match_amt() const;
  void clear_match_amt();
  static const int kMatchAmtFieldNumber = 12;
  double match_amt() const;
  void set_match_amt(double value);

  // required uint32 match_qty = 13;
  bool has_match_qty() const;
  void clear_match_qty();
  static const int kMatchQtyFieldNumber = 13;
  ::google::protobuf::uint32 match_qty() const;
  void set_match_qty(::google::protobuf::uint32 value);

  // required uint32 unmatch_qty = 14;
  bool has_unmatch_qty() const;
  void clear_unmatch_qty();
  static const int kUnmatchQtyFieldNumber = 14;
  ::google::protobuf::uint32 unmatch_qty() const;
  void set_unmatch_qty(::google::protobuf::uint32 value);

  // required uint32 order_status = 15;
  bool has_order_status() const;
  void clear_order_status();
  static const int kOrderStatusFieldNumber = 15;
  ::google::protobuf::uint32 order_status() const;
  void set_order_status(::google::protobuf::uint32 value);

  // optional uint32 market = 18;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 18;
  ::google::protobuf::uint32 market() const;
  void set_market(::google::protobuf::uint32 value);

  // required int64 match_avg_price = 17;
  bool has_match_avg_price() const;
  void clear_match_avg_price();
  static const int kMatchAvgPriceFieldNumber = 17;
  ::google::protobuf::int64 match_avg_price() const;
  void set_match_avg_price(::google::protobuf::int64 value);

  // optional int64 cancel_qty = 19;
  bool has_cancel_qty() const;
  void clear_cancel_qty();
  static const int kCancelQtyFieldNumber = 19;
  ::google::protobuf::int64 cancel_qty() const;
  void set_cancel_qty(::google::protobuf::int64 value);

  // optional int64 hedge_flag = 20;
  bool has_hedge_flag() const;
  void clear_hedge_flag();
  static const int kHedgeFlagFieldNumber = 20;
  ::google::protobuf::int64 hedge_flag() const;
  void set_hedge_flag(::google::protobuf::int64 value);

  // optional int64 kpcbj = 21;
  bool has_kpcbj() const;
  void clear_kpcbj();
  static const int kKpcbjFieldNumber = 21;
  ::google::protobuf::int64 kpcbj() const;
  void set_kpcbj(::google::protobuf::int64 value);

  // optional int64 price_type = 22;
  bool has_price_type() const;
  void clear_price_type();
  static const int kPriceTypeFieldNumber = 22;
  ::google::protobuf::int64 price_type() const;
  void set_price_type(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:autotrade.FutureOrderInfo.OrderDetail)
 private:
  void set_has_match_time();
  void clear_has_match_time();
  void set_has_orderno();
  void clear_has_orderno();
  void set_has_bsflag();
  void clear_has_bsflag();
  void set_has_sumbit_time();
  void clear_has_sumbit_time();
  void set_has_order_time();
  void clear_has_order_time();
  void set_has_code();
  void clear_has_code();
  void set_has_order_price();
  void clear_has_order_price();
  void set_has_order_qty();
  void clear_has_order_qty();
  void set_has_order_frz_amt();
  void clear_has_order_frz_amt();
  void set_has_match_amt();
  void clear_has_match_amt();
  void set_has_match_qty();
  void clear_has_match_qty();
  void set_has_unmatch_qty();
  void clear_has_unmatch_qty();
  void set_has_order_status();
  void clear_has_order_status();
  void set_has_name();
  void clear_has_name();
  void set_has_match_avg_price();
  void clear_has_match_avg_price();
  void set_has_market();
  void clear_has_market();
  void set_has_cancel_qty();
  void clear_has_cancel_qty();
  void set_has_hedge_flag();
  void clear_has_hedge_flag();
  void set_has_kpcbj();
  void clear_has_kpcbj();
  void set_has_price_type();
  void clear_has_price_type();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr orderno_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 match_time_;
  ::google::protobuf::uint64 sumbit_time_;
  ::google::protobuf::uint64 order_time_;
  ::google::protobuf::uint32 bsflag_;
  ::google::protobuf::uint32 order_qty_;
  ::google::protobuf::int64 order_price_;
  double order_frz_amt_;
  double match_amt_;
  ::google::protobuf::uint32 match_qty_;
  ::google::protobuf::uint32 unmatch_qty_;
  ::google::protobuf::uint32 order_status_;
  ::google::protobuf::uint32 market_;
  ::google::protobuf::int64 match_avg_price_;
  ::google::protobuf::int64 cancel_qty_;
  ::google::protobuf::int64 hedge_flag_;
  ::google::protobuf::int64 kpcbj_;
  ::google::protobuf::int64 price_type_;
  friend struct ::protobuf_protos_2fqfuture_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FutureOrderInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.FutureOrderInfo) */ {
 public:
  FutureOrderInfo();
  virtual ~FutureOrderInfo();

  FutureOrderInfo(const FutureOrderInfo& from);

  inline FutureOrderInfo& operator=(const FutureOrderInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FutureOrderInfo(FutureOrderInfo&& from) noexcept
    : FutureOrderInfo() {
    *this = ::std::move(from);
  }

  inline FutureOrderInfo& operator=(FutureOrderInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FutureOrderInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FutureOrderInfo* internal_default_instance() {
    return reinterpret_cast<const FutureOrderInfo*>(
               &_FutureOrderInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(FutureOrderInfo* other);
  friend void swap(FutureOrderInfo& a, FutureOrderInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FutureOrderInfo* New() const final {
    return CreateMaybeMessage<FutureOrderInfo>(NULL);
  }

  FutureOrderInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FutureOrderInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FutureOrderInfo& from);
  void MergeFrom(const FutureOrderInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FutureOrderInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FutureOrderInfo_OrderDetail OrderDetail;

  // accessors -------------------------------------------------------

  // repeated .autotrade.FutureOrderInfo.OrderDetail detail_list = 2;
  int detail_list_size() const;
  void clear_detail_list();
  static const int kDetailListFieldNumber = 2;
  ::autotrade::FutureOrderInfo_OrderDetail* mutable_detail_list(int index);
  ::google::protobuf::RepeatedPtrField< ::autotrade::FutureOrderInfo_OrderDetail >*
      mutable_detail_list();
  const ::autotrade::FutureOrderInfo_OrderDetail& detail_list(int index) const;
  ::autotrade::FutureOrderInfo_OrderDetail* add_detail_list();
  const ::google::protobuf::RepeatedPtrField< ::autotrade::FutureOrderInfo_OrderDetail >&
      detail_list() const;

  // optional string request_id = 3;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional string last_pos = 4;
  bool has_last_pos() const;
  void clear_last_pos();
  static const int kLastPosFieldNumber = 4;
  const ::std::string& last_pos() const;
  void set_last_pos(const ::std::string& value);
  #if LANG_CXX11
  void set_last_pos(::std::string&& value);
  #endif
  void set_last_pos(const char* value);
  void set_last_pos(const char* value, size_t size);
  ::std::string* mutable_last_pos();
  ::std::string* release_last_pos();
  void set_allocated_last_pos(::std::string* last_pos);

  // optional int32 funcid = 1 [default = 12102002];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.FutureOrderInfo)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_last_pos();
  void clear_has_last_pos();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::autotrade::FutureOrderInfo_OrderDetail > detail_list_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr last_pos_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqfuture_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FutureQueryCaptialReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.FutureQueryCaptialReqt) */ {
 public:
  FutureQueryCaptialReqt();
  virtual ~FutureQueryCaptialReqt();

  FutureQueryCaptialReqt(const FutureQueryCaptialReqt& from);

  inline FutureQueryCaptialReqt& operator=(const FutureQueryCaptialReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FutureQueryCaptialReqt(FutureQueryCaptialReqt&& from) noexcept
    : FutureQueryCaptialReqt() {
    *this = ::std::move(from);
  }

  inline FutureQueryCaptialReqt& operator=(FutureQueryCaptialReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FutureQueryCaptialReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FutureQueryCaptialReqt* internal_default_instance() {
    return reinterpret_cast<const FutureQueryCaptialReqt*>(
               &_FutureQueryCaptialReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(FutureQueryCaptialReqt* other);
  friend void swap(FutureQueryCaptialReqt& a, FutureQueryCaptialReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FutureQueryCaptialReqt* New() const final {
    return CreateMaybeMessage<FutureQueryCaptialReqt>(NULL);
  }

  FutureQueryCaptialReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FutureQueryCaptialReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FutureQueryCaptialReqt& from);
  void MergeFrom(const FutureQueryCaptialReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FutureQueryCaptialReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string moneytype = 2;
  bool has_moneytype() const;
  void clear_moneytype();
  static const int kMoneytypeFieldNumber = 2;
  const ::std::string& moneytype() const;
  void set_moneytype(const ::std::string& value);
  #if LANG_CXX11
  void set_moneytype(::std::string&& value);
  #endif
  void set_moneytype(const char* value);
  void set_moneytype(const char* value, size_t size);
  ::std::string* mutable_moneytype();
  ::std::string* release_moneytype();
  void set_allocated_moneytype(::std::string* moneytype);

  // optional string request_id = 3;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional int64 request_date = 4;
  bool has_request_date() const;
  void clear_request_date();
  static const int kRequestDateFieldNumber = 4;
  ::google::protobuf::int64 request_date() const;
  void set_request_date(::google::protobuf::int64 value);

  // optional int64 request_time = 5;
  bool has_request_time() const;
  void clear_request_time();
  static const int kRequestTimeFieldNumber = 5;
  ::google::protobuf::int64 request_time() const;
  void set_request_time(::google::protobuf::int64 value);

  // optional int32 funcid = 1 [default = 12002001];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // optional int64 active_interval = 6 [default = 10000];
  bool has_active_interval() const;
  void clear_active_interval();
  static const int kActiveIntervalFieldNumber = 6;
  ::google::protobuf::int64 active_interval() const;
  void set_active_interval(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:autotrade.FutureQueryCaptialReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_moneytype();
  void clear_has_moneytype();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_request_date();
  void clear_has_request_date();
  void set_has_request_time();
  void clear_has_request_time();
  void set_has_active_interval();
  void clear_has_active_interval();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr moneytype_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::int64 request_date_;
  ::google::protobuf::int64 request_time_;
  ::google::protobuf::int32 funcid_;
  ::google::protobuf::int64 active_interval_;
  friend struct ::protobuf_protos_2fqfuture_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FutureCapital : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.FutureCapital) */ {
 public:
  FutureCapital();
  virtual ~FutureCapital();

  FutureCapital(const FutureCapital& from);

  inline FutureCapital& operator=(const FutureCapital& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FutureCapital(FutureCapital&& from) noexcept
    : FutureCapital() {
    *this = ::std::move(from);
  }

  inline FutureCapital& operator=(FutureCapital&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FutureCapital& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FutureCapital* internal_default_instance() {
    return reinterpret_cast<const FutureCapital*>(
               &_FutureCapital_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(FutureCapital* other);
  friend void swap(FutureCapital& a, FutureCapital& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FutureCapital* New() const final {
    return CreateMaybeMessage<FutureCapital>(NULL);
  }

  FutureCapital* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FutureCapital>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FutureCapital& from);
  void MergeFrom(const FutureCapital& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FutureCapital* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string moneytype = 2;
  bool has_moneytype() const;
  void clear_moneytype();
  static const int kMoneytypeFieldNumber = 2;
  const ::std::string& moneytype() const;
  void set_moneytype(const ::std::string& value);
  #if LANG_CXX11
  void set_moneytype(::std::string&& value);
  #endif
  void set_moneytype(const char* value);
  void set_moneytype(const char* value, size_t size);
  ::std::string* mutable_moneytype();
  ::std::string* release_moneytype();
  void set_allocated_moneytype(::std::string* moneytype);

  // optional string request_id = 6;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 6;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional string ret_message = 12;
  bool has_ret_message() const;
  void clear_ret_message();
  static const int kRetMessageFieldNumber = 12;
  const ::std::string& ret_message() const;
  void set_ret_message(const ::std::string& value);
  #if LANG_CXX11
  void set_ret_message(::std::string&& value);
  #endif
  void set_ret_message(const char* value);
  void set_ret_message(const char* value, size_t size);
  ::std::string* mutable_ret_message();
  ::std::string* release_ret_message();
  void set_allocated_ret_message(::std::string* ret_message);

  // required double fund_bal = 3;
  bool has_fund_bal() const;
  void clear_fund_bal();
  static const int kFundBalFieldNumber = 3;
  double fund_bal() const;
  void set_fund_bal(double value);

  // required double fund_ava = 4;
  bool has_fund_ava() const;
  void clear_fund_ava();
  static const int kFundAvaFieldNumber = 4;
  double fund_ava() const;
  void set_fund_ava(double value);

  // required double market_value = 5;
  bool has_market_value() const;
  void clear_market_value();
  static const int kMarketValueFieldNumber = 5;
  double market_value() const;
  void set_market_value(double value);

  // optional double exchage_margin = 7;
  bool has_exchage_margin() const;
  void clear_exchage_margin();
  static const int kExchageMarginFieldNumber = 7;
  double exchage_margin() const;
  void set_exchage_margin(double value);

  // optional double delivery_margin = 8;
  bool has_delivery_margin() const;
  void clear_delivery_margin();
  static const int kDeliveryMarginFieldNumber = 8;
  double delivery_margin() const;
  void set_delivery_margin(double value);

  // optional double exchage_delivery_margin = 9;
  bool has_exchage_delivery_margin() const;
  void clear_exchage_delivery_margin();
  static const int kExchageDeliveryMarginFieldNumber = 9;
  double exchage_delivery_margin() const;
  void set_exchage_delivery_margin(double value);

  // optional bool islast = 10;
  bool has_islast() const;
  void clear_islast();
  static const int kIslastFieldNumber = 10;
  bool islast() const;
  void set_islast(bool value);

  // optional int32 ret_code = 11;
  bool has_ret_code() const;
  void clear_ret_code();
  static const int kRetCodeFieldNumber = 11;
  ::google::protobuf::int32 ret_code() const;
  void set_ret_code(::google::protobuf::int32 value);

  // optional double curr_margin = 13;
  bool has_curr_margin() const;
  void clear_curr_margin();
  static const int kCurrMarginFieldNumber = 13;
  double curr_margin() const;
  void set_curr_margin(double value);

  // optional int32 funcid = 1 [default = 12102001];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.FutureCapital)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_moneytype();
  void clear_has_moneytype();
  void set_has_fund_bal();
  void clear_has_fund_bal();
  void set_has_fund_ava();
  void clear_has_fund_ava();
  void set_has_market_value();
  void clear_has_market_value();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_exchage_margin();
  void clear_has_exchage_margin();
  void set_has_delivery_margin();
  void clear_has_delivery_margin();
  void set_has_exchage_delivery_margin();
  void clear_has_exchage_delivery_margin();
  void set_has_islast();
  void clear_has_islast();
  void set_has_ret_code();
  void clear_has_ret_code();
  void set_has_ret_message();
  void clear_has_ret_message();
  void set_has_curr_margin();
  void clear_has_curr_margin();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr moneytype_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr ret_message_;
  double fund_bal_;
  double fund_ava_;
  double market_value_;
  double exchage_margin_;
  double delivery_margin_;
  double exchage_delivery_margin_;
  bool islast_;
  ::google::protobuf::int32 ret_code_;
  double curr_margin_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqfuture_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FutureQueryPositionReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.FutureQueryPositionReqt) */ {
 public:
  FutureQueryPositionReqt();
  virtual ~FutureQueryPositionReqt();

  FutureQueryPositionReqt(const FutureQueryPositionReqt& from);

  inline FutureQueryPositionReqt& operator=(const FutureQueryPositionReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FutureQueryPositionReqt(FutureQueryPositionReqt&& from) noexcept
    : FutureQueryPositionReqt() {
    *this = ::std::move(from);
  }

  inline FutureQueryPositionReqt& operator=(FutureQueryPositionReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FutureQueryPositionReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FutureQueryPositionReqt* internal_default_instance() {
    return reinterpret_cast<const FutureQueryPositionReqt*>(
               &_FutureQueryPositionReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(FutureQueryPositionReqt* other);
  friend void swap(FutureQueryPositionReqt& a, FutureQueryPositionReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FutureQueryPositionReqt* New() const final {
    return CreateMaybeMessage<FutureQueryPositionReqt>(NULL);
  }

  FutureQueryPositionReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FutureQueryPositionReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FutureQueryPositionReqt& from);
  void MergeFrom(const FutureQueryPositionReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FutureQueryPositionReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string code = 2;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string request_id = 3;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional int64 request_date = 4;
  bool has_request_date() const;
  void clear_request_date();
  static const int kRequestDateFieldNumber = 4;
  ::google::protobuf::int64 request_date() const;
  void set_request_date(::google::protobuf::int64 value);

  // optional int64 request_time = 5;
  bool has_request_time() const;
  void clear_request_time();
  static const int kRequestTimeFieldNumber = 5;
  ::google::protobuf::int64 request_time() const;
  void set_request_time(::google::protobuf::int64 value);

  // optional int32 funcid = 1 [default = 12002005];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // optional int64 active_interval = 6 [default = 10000];
  bool has_active_interval() const;
  void clear_active_interval();
  static const int kActiveIntervalFieldNumber = 6;
  ::google::protobuf::int64 active_interval() const;
  void set_active_interval(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:autotrade.FutureQueryPositionReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_code();
  void clear_has_code();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_request_date();
  void clear_has_request_date();
  void set_has_request_time();
  void clear_has_request_time();
  void set_has_active_interval();
  void clear_has_active_interval();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::int64 request_date_;
  ::google::protobuf::int64 request_time_;
  ::google::protobuf::int32 funcid_;
  ::google::protobuf::int64 active_interval_;
  friend struct ::protobuf_protos_2fqfuture_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FuturePosition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.FuturePosition) */ {
 public:
  FuturePosition();
  virtual ~FuturePosition();

  FuturePosition(const FuturePosition& from);

  inline FuturePosition& operator=(const FuturePosition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FuturePosition(FuturePosition&& from) noexcept
    : FuturePosition() {
    *this = ::std::move(from);
  }

  inline FuturePosition& operator=(FuturePosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FuturePosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FuturePosition* internal_default_instance() {
    return reinterpret_cast<const FuturePosition*>(
               &_FuturePosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(FuturePosition* other);
  friend void swap(FuturePosition& a, FuturePosition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FuturePosition* New() const final {
    return CreateMaybeMessage<FuturePosition>(NULL);
  }

  FuturePosition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FuturePosition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FuturePosition& from);
  void MergeFrom(const FuturePosition& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FuturePosition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .autotrade.OneFuturePosition one_positions = 2;
  int one_positions_size() const;
  void clear_one_positions();
  static const int kOnePositionsFieldNumber = 2;
  ::autotrade::OneFuturePosition* mutable_one_positions(int index);
  ::google::protobuf::RepeatedPtrField< ::autotrade::OneFuturePosition >*
      mutable_one_positions();
  const ::autotrade::OneFuturePosition& one_positions(int index) const;
  ::autotrade::OneFuturePosition* add_one_positions();
  const ::google::protobuf::RepeatedPtrField< ::autotrade::OneFuturePosition >&
      one_positions() const;

  // optional string request_id = 3;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional int32 funcid = 1 [default = 12102005];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.FuturePosition)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_request_id();
  void clear_has_request_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::autotrade::OneFuturePosition > one_positions_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqfuture_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OneFuturePosition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.OneFuturePosition) */ {
 public:
  OneFuturePosition();
  virtual ~OneFuturePosition();

  OneFuturePosition(const OneFuturePosition& from);

  inline OneFuturePosition& operator=(const OneFuturePosition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OneFuturePosition(OneFuturePosition&& from) noexcept
    : OneFuturePosition() {
    *this = ::std::move(from);
  }

  inline OneFuturePosition& operator=(OneFuturePosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OneFuturePosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OneFuturePosition* internal_default_instance() {
    return reinterpret_cast<const OneFuturePosition*>(
               &_OneFuturePosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(OneFuturePosition* other);
  friend void swap(OneFuturePosition& a, OneFuturePosition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OneFuturePosition* New() const final {
    return CreateMaybeMessage<OneFuturePosition>(NULL);
  }

  OneFuturePosition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OneFuturePosition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OneFuturePosition& from);
  void MergeFrom(const OneFuturePosition& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OneFuturePosition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string code = 2;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string account_name = 10;
  bool has_account_name() const;
  void clear_account_name();
  static const int kAccountNameFieldNumber = 10;
  const ::std::string& account_name() const;
  void set_account_name(const ::std::string& value);
  #if LANG_CXX11
  void set_account_name(::std::string&& value);
  #endif
  void set_account_name(const char* value);
  void set_account_name(const char* value, size_t size);
  ::std::string* mutable_account_name();
  ::std::string* release_account_name();
  void set_allocated_account_name(::std::string* account_name);

  // optional string ret_message = 14 [default = ""];
  bool has_ret_message() const;
  void clear_ret_message();
  static const int kRetMessageFieldNumber = 14;
  const ::std::string& ret_message() const;
  void set_ret_message(const ::std::string& value);
  #if LANG_CXX11
  void set_ret_message(::std::string&& value);
  #endif
  void set_ret_message(const char* value);
  void set_ret_message(const char* value, size_t size);
  ::std::string* mutable_ret_message();
  ::std::string* release_ret_message();
  void set_allocated_ret_message(::std::string* ret_message);

  // optional uint32 market = 1;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 1;
  ::google::protobuf::uint32 market() const;
  void set_market(::google::protobuf::uint32 value);

  // optional uint32 bsflag = 4;
  bool has_bsflag() const;
  void clear_bsflag();
  static const int kBsflagFieldNumber = 4;
  ::google::protobuf::uint32 bsflag() const;
  void set_bsflag(::google::protobuf::uint32 value);

  // optional int64 yd_position = 5 [default = 0];
  bool has_yd_position() const;
  void clear_yd_position();
  static const int kYdPositionFieldNumber = 5;
  ::google::protobuf::int64 yd_position() const;
  void set_yd_position(::google::protobuf::int64 value);

  // optional int64 today_position = 6 [default = 0];
  bool has_today_position() const;
  void clear_today_position();
  static const int kTodayPositionFieldNumber = 6;
  ::google::protobuf::int64 today_position() const;
  void set_today_position(::google::protobuf::int64 value);

  // optional int64 position = 7 [default = 0];
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 7;
  ::google::protobuf::int64 position() const;
  void set_position(::google::protobuf::int64 value);

  // optional double open_cost = 9 [default = 0];
  bool has_open_cost() const;
  void clear_open_cost();
  static const int kOpenCostFieldNumber = 9;
  double open_cost() const;
  void set_open_cost(double value);

  // optional int32 hedge_flag = 8;
  bool has_hedge_flag() const;
  void clear_hedge_flag();
  static const int kHedgeFlagFieldNumber = 8;
  ::google::protobuf::int32 hedge_flag() const;
  void set_hedge_flag(::google::protobuf::int32 value);

  // optional bool islast = 11;
  bool has_islast() const;
  void clear_islast();
  static const int kIslastFieldNumber = 11;
  bool islast() const;
  void set_islast(bool value);

  // optional int64 can_close_qty = 15 [default = 0];
  bool has_can_close_qty() const;
  void clear_can_close_qty();
  static const int kCanCloseQtyFieldNumber = 15;
  ::google::protobuf::int64 can_close_qty() const;
  void set_can_close_qty(::google::protobuf::int64 value);

  // optional int64 pending_close_qty = 16 [default = 0];
  bool has_pending_close_qty() const;
  void clear_pending_close_qty();
  static const int kPendingCloseQtyFieldNumber = 16;
  ::google::protobuf::int64 pending_close_qty() const;
  void set_pending_close_qty(::google::protobuf::int64 value);

  // optional int64 today_open_volume = 17 [default = 0];
  bool has_today_open_volume() const;
  void clear_today_open_volume();
  static const int kTodayOpenVolumeFieldNumber = 17;
  ::google::protobuf::int64 today_open_volume() const;
  void set_today_open_volume(::google::protobuf::int64 value);

  // optional int64 today_close_volume = 18 [default = 0];
  bool has_today_close_volume() const;
  void clear_today_close_volume();
  static const int kTodayCloseVolumeFieldNumber = 18;
  ::google::protobuf::int64 today_close_volume() const;
  void set_today_close_volume(::google::protobuf::int64 value);

  // optional int64 today_opening_volume = 19 [default = 0];
  bool has_today_opening_volume() const;
  void clear_today_opening_volume();
  static const int kTodayOpeningVolumeFieldNumber = 19;
  ::google::protobuf::int64 today_opening_volume() const;
  void set_today_opening_volume(::google::protobuf::int64 value);

  // optional int64 today_closing_volume = 20 [default = 0];
  bool has_today_closing_volume() const;
  void clear_today_closing_volume();
  static const int kTodayClosingVolumeFieldNumber = 20;
  ::google::protobuf::int64 today_closing_volume() const;
  void set_today_closing_volume(::google::protobuf::int64 value);

  // optional int64 yd_closing_volume = 21 [default = 0];
  bool has_yd_closing_volume() const;
  void clear_yd_closing_volume();
  static const int kYdClosingVolumeFieldNumber = 21;
  ::google::protobuf::int64 yd_closing_volume() const;
  void set_yd_closing_volume(::google::protobuf::int64 value);

  // optional int32 ret_code = 13 [default = 0];
  bool has_ret_code() const;
  void clear_ret_code();
  static const int kRetCodeFieldNumber = 13;
  ::google::protobuf::int32 ret_code() const;
  void set_ret_code(::google::protobuf::int32 value);

  // optional int32 funcid = 12 [default = 12002009];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 12;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.OneFuturePosition)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_market();
  void clear_has_market();
  void set_has_code();
  void clear_has_code();
  void set_has_name();
  void clear_has_name();
  void set_has_bsflag();
  void clear_has_bsflag();
  void set_has_yd_position();
  void clear_has_yd_position();
  void set_has_today_position();
  void clear_has_today_position();
  void set_has_position();
  void clear_has_position();
  void set_has_hedge_flag();
  void clear_has_hedge_flag();
  void set_has_open_cost();
  void clear_has_open_cost();
  void set_has_account_name();
  void clear_has_account_name();
  void set_has_islast();
  void clear_has_islast();
  void set_has_ret_code();
  void clear_has_ret_code();
  void set_has_ret_message();
  void clear_has_ret_message();
  void set_has_can_close_qty();
  void clear_has_can_close_qty();
  void set_has_pending_close_qty();
  void clear_has_pending_close_qty();
  void set_has_today_open_volume();
  void clear_has_today_open_volume();
  void set_has_today_close_volume();
  void clear_has_today_close_volume();
  void set_has_today_opening_volume();
  void clear_has_today_opening_volume();
  void set_has_today_closing_volume();
  void clear_has_today_closing_volume();
  void set_has_yd_closing_volume();
  void clear_has_yd_closing_volume();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr account_name_;
  ::google::protobuf::internal::ArenaStringPtr ret_message_;
  ::google::protobuf::uint32 market_;
  ::google::protobuf::uint32 bsflag_;
  ::google::protobuf::int64 yd_position_;
  ::google::protobuf::int64 today_position_;
  ::google::protobuf::int64 position_;
  double open_cost_;
  ::google::protobuf::int32 hedge_flag_;
  bool islast_;
  ::google::protobuf::int64 can_close_qty_;
  ::google::protobuf::int64 pending_close_qty_;
  ::google::protobuf::int64 today_open_volume_;
  ::google::protobuf::int64 today_close_volume_;
  ::google::protobuf::int64 today_opening_volume_;
  ::google::protobuf::int64 today_closing_volume_;
  ::google::protobuf::int64 yd_closing_volume_;
  ::google::protobuf::int32 ret_code_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqfuture_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FutureQueryDealDetailReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.FutureQueryDealDetailReqt) */ {
 public:
  FutureQueryDealDetailReqt();
  virtual ~FutureQueryDealDetailReqt();

  FutureQueryDealDetailReqt(const FutureQueryDealDetailReqt& from);

  inline FutureQueryDealDetailReqt& operator=(const FutureQueryDealDetailReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FutureQueryDealDetailReqt(FutureQueryDealDetailReqt&& from) noexcept
    : FutureQueryDealDetailReqt() {
    *this = ::std::move(from);
  }

  inline FutureQueryDealDetailReqt& operator=(FutureQueryDealDetailReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FutureQueryDealDetailReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FutureQueryDealDetailReqt* internal_default_instance() {
    return reinterpret_cast<const FutureQueryDealDetailReqt*>(
               &_FutureQueryDealDetailReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(FutureQueryDealDetailReqt* other);
  friend void swap(FutureQueryDealDetailReqt& a, FutureQueryDealDetailReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FutureQueryDealDetailReqt* New() const final {
    return CreateMaybeMessage<FutureQueryDealDetailReqt>(NULL);
  }

  FutureQueryDealDetailReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FutureQueryDealDetailReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FutureQueryDealDetailReqt& from);
  void MergeFrom(const FutureQueryDealDetailReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FutureQueryDealDetailReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string order_group = 2 [default = ""];
  bool has_order_group() const;
  void clear_order_group();
  static const int kOrderGroupFieldNumber = 2;
  const ::std::string& order_group() const;
  void set_order_group(const ::std::string& value);
  #if LANG_CXX11
  void set_order_group(::std::string&& value);
  #endif
  void set_order_group(const char* value);
  void set_order_group(const char* value, size_t size);
  ::std::string* mutable_order_group();
  ::std::string* release_order_group();
  void set_allocated_order_group(::std::string* order_group);

  // optional string start_pos = 3 [default = ""];
  bool has_start_pos() const;
  void clear_start_pos();
  static const int kStartPosFieldNumber = 3;
  const ::std::string& start_pos() const;
  void set_start_pos(const ::std::string& value);
  #if LANG_CXX11
  void set_start_pos(::std::string&& value);
  #endif
  void set_start_pos(const char* value);
  void set_start_pos(const char* value, size_t size);
  ::std::string* mutable_start_pos();
  ::std::string* release_start_pos();
  void set_allocated_start_pos(::std::string* start_pos);

  // optional string request_id = 4;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 4;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional int64 request_date = 5;
  bool has_request_date() const;
  void clear_request_date();
  static const int kRequestDateFieldNumber = 5;
  ::google::protobuf::int64 request_date() const;
  void set_request_date(::google::protobuf::int64 value);

  // optional int64 request_time = 6;
  bool has_request_time() const;
  void clear_request_time();
  static const int kRequestTimeFieldNumber = 6;
  ::google::protobuf::int64 request_time() const;
  void set_request_time(::google::protobuf::int64 value);

  // optional int32 funcid = 1 [default = 12002003];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // optional int64 active_interval = 7 [default = 10000];
  bool has_active_interval() const;
  void clear_active_interval();
  static const int kActiveIntervalFieldNumber = 7;
  ::google::protobuf::int64 active_interval() const;
  void set_active_interval(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:autotrade.FutureQueryDealDetailReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_order_group();
  void clear_has_order_group();
  void set_has_start_pos();
  void clear_has_start_pos();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_request_date();
  void clear_has_request_date();
  void set_has_request_time();
  void clear_has_request_time();
  void set_has_active_interval();
  void clear_has_active_interval();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr order_group_;
  ::google::protobuf::internal::ArenaStringPtr start_pos_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::int64 request_date_;
  ::google::protobuf::int64 request_time_;
  ::google::protobuf::int32 funcid_;
  ::google::protobuf::int64 active_interval_;
  friend struct ::protobuf_protos_2fqfuture_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FutureDealDetail_DealDetail : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.FutureDealDetail.DealDetail) */ {
 public:
  FutureDealDetail_DealDetail();
  virtual ~FutureDealDetail_DealDetail();

  FutureDealDetail_DealDetail(const FutureDealDetail_DealDetail& from);

  inline FutureDealDetail_DealDetail& operator=(const FutureDealDetail_DealDetail& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FutureDealDetail_DealDetail(FutureDealDetail_DealDetail&& from) noexcept
    : FutureDealDetail_DealDetail() {
    *this = ::std::move(from);
  }

  inline FutureDealDetail_DealDetail& operator=(FutureDealDetail_DealDetail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FutureDealDetail_DealDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FutureDealDetail_DealDetail* internal_default_instance() {
    return reinterpret_cast<const FutureDealDetail_DealDetail*>(
               &_FutureDealDetail_DealDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(FutureDealDetail_DealDetail* other);
  friend void swap(FutureDealDetail_DealDetail& a, FutureDealDetail_DealDetail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FutureDealDetail_DealDetail* New() const final {
    return CreateMaybeMessage<FutureDealDetail_DealDetail>(NULL);
  }

  FutureDealDetail_DealDetail* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FutureDealDetail_DealDetail>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FutureDealDetail_DealDetail& from);
  void MergeFrom(const FutureDealDetail_DealDetail& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FutureDealDetail_DealDetail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string match_id = 1;
  bool has_match_id() const;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 1;
  const ::std::string& match_id() const;
  void set_match_id(const ::std::string& value);
  #if LANG_CXX11
  void set_match_id(::std::string&& value);
  #endif
  void set_match_id(const char* value);
  void set_match_id(const char* value, size_t size);
  ::std::string* mutable_match_id();
  ::std::string* release_match_id();
  void set_allocated_match_id(::std::string* match_id);

  // required string orderno = 3;
  bool has_orderno() const;
  void clear_orderno();
  static const int kOrdernoFieldNumber = 3;
  const ::std::string& orderno() const;
  void set_orderno(const ::std::string& value);
  #if LANG_CXX11
  void set_orderno(::std::string&& value);
  #endif
  void set_orderno(const char* value);
  void set_orderno(const char* value, size_t size);
  ::std::string* mutable_orderno();
  ::std::string* release_orderno();
  void set_allocated_orderno(::std::string* orderno);

  // required string code = 5;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 5;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string name = 6;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 6;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required uint32 bsflag = 2;
  bool has_bsflag() const;
  void clear_bsflag();
  static const int kBsflagFieldNumber = 2;
  ::google::protobuf::uint32 bsflag() const;
  void set_bsflag(::google::protobuf::uint32 value);

  // optional uint32 market = 4;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 4;
  ::google::protobuf::uint32 market() const;
  void set_market(::google::protobuf::uint32 value);

  // optional uint64 match_time = 7;
  bool has_match_time() const;
  void clear_match_time();
  static const int kMatchTimeFieldNumber = 7;
  ::google::protobuf::uint64 match_time() const;
  void set_match_time(::google::protobuf::uint64 value);

  // required int64 match_price = 9;
  bool has_match_price() const;
  void clear_match_price();
  static const int kMatchPriceFieldNumber = 9;
  ::google::protobuf::int64 match_price() const;
  void set_match_price(::google::protobuf::int64 value);

  // required int64 match_amt = 10;
  bool has_match_amt() const;
  void clear_match_amt();
  static const int kMatchAmtFieldNumber = 10;
  ::google::protobuf::int64 match_amt() const;
  void set_match_amt(::google::protobuf::int64 value);

  // required uint32 match_qty = 8;
  bool has_match_qty() const;
  void clear_match_qty();
  static const int kMatchQtyFieldNumber = 8;
  ::google::protobuf::uint32 match_qty() const;
  void set_match_qty(::google::protobuf::uint32 value);

  // required uint32 order_qty = 13;
  bool has_order_qty() const;
  void clear_order_qty();
  static const int kOrderQtyFieldNumber = 13;
  ::google::protobuf::uint32 order_qty() const;
  void set_order_qty(::google::protobuf::uint32 value);

  // required double clear_amt = 11;
  bool has_clear_amt() const;
  void clear_clear_amt();
  static const int kClearAmtFieldNumber = 11;
  double clear_amt() const;
  void set_clear_amt(double value);

  // required int64 match_type = 12;
  bool has_match_type() const;
  void clear_match_type();
  static const int kMatchTypeFieldNumber = 12;
  ::google::protobuf::int64 match_type() const;
  void set_match_type(::google::protobuf::int64 value);

  // required int64 order_price = 14;
  bool has_order_price() const;
  void clear_order_price();
  static const int kOrderPriceFieldNumber = 14;
  ::google::protobuf::int64 order_price() const;
  void set_order_price(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:autotrade.FutureDealDetail.DealDetail)
 private:
  void set_has_match_id();
  void clear_has_match_id();
  void set_has_bsflag();
  void clear_has_bsflag();
  void set_has_orderno();
  void clear_has_orderno();
  void set_has_market();
  void clear_has_market();
  void set_has_code();
  void clear_has_code();
  void set_has_name();
  void clear_has_name();
  void set_has_match_time();
  void clear_has_match_time();
  void set_has_match_qty();
  void clear_has_match_qty();
  void set_has_match_price();
  void clear_has_match_price();
  void set_has_match_amt();
  void clear_has_match_amt();
  void set_has_clear_amt();
  void clear_has_clear_amt();
  void set_has_match_type();
  void clear_has_match_type();
  void set_has_order_qty();
  void clear_has_order_qty();
  void set_has_order_price();
  void clear_has_order_price();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr match_id_;
  ::google::protobuf::internal::ArenaStringPtr orderno_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 bsflag_;
  ::google::protobuf::uint32 market_;
  ::google::protobuf::uint64 match_time_;
  ::google::protobuf::int64 match_price_;
  ::google::protobuf::int64 match_amt_;
  ::google::protobuf::uint32 match_qty_;
  ::google::protobuf::uint32 order_qty_;
  double clear_amt_;
  ::google::protobuf::int64 match_type_;
  ::google::protobuf::int64 order_price_;
  friend struct ::protobuf_protos_2fqfuture_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FutureDealDetail : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.FutureDealDetail) */ {
 public:
  FutureDealDetail();
  virtual ~FutureDealDetail();

  FutureDealDetail(const FutureDealDetail& from);

  inline FutureDealDetail& operator=(const FutureDealDetail& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FutureDealDetail(FutureDealDetail&& from) noexcept
    : FutureDealDetail() {
    *this = ::std::move(from);
  }

  inline FutureDealDetail& operator=(FutureDealDetail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FutureDealDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FutureDealDetail* internal_default_instance() {
    return reinterpret_cast<const FutureDealDetail*>(
               &_FutureDealDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(FutureDealDetail* other);
  friend void swap(FutureDealDetail& a, FutureDealDetail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FutureDealDetail* New() const final {
    return CreateMaybeMessage<FutureDealDetail>(NULL);
  }

  FutureDealDetail* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FutureDealDetail>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FutureDealDetail& from);
  void MergeFrom(const FutureDealDetail& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FutureDealDetail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FutureDealDetail_DealDetail DealDetail;

  // accessors -------------------------------------------------------

  // repeated .autotrade.FutureDealDetail.DealDetail deal_details = 2;
  int deal_details_size() const;
  void clear_deal_details();
  static const int kDealDetailsFieldNumber = 2;
  ::autotrade::FutureDealDetail_DealDetail* mutable_deal_details(int index);
  ::google::protobuf::RepeatedPtrField< ::autotrade::FutureDealDetail_DealDetail >*
      mutable_deal_details();
  const ::autotrade::FutureDealDetail_DealDetail& deal_details(int index) const;
  ::autotrade::FutureDealDetail_DealDetail* add_deal_details();
  const ::google::protobuf::RepeatedPtrField< ::autotrade::FutureDealDetail_DealDetail >&
      deal_details() const;

  // optional string request_id = 3;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional string last_pos = 4;
  bool has_last_pos() const;
  void clear_last_pos();
  static const int kLastPosFieldNumber = 4;
  const ::std::string& last_pos() const;
  void set_last_pos(const ::std::string& value);
  #if LANG_CXX11
  void set_last_pos(::std::string&& value);
  #endif
  void set_last_pos(const char* value);
  void set_last_pos(const char* value, size_t size);
  ::std::string* mutable_last_pos();
  ::std::string* release_last_pos();
  void set_allocated_last_pos(::std::string* last_pos);

  // optional int32 funcid = 1 [default = 12102003];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.FutureDealDetail)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_last_pos();
  void clear_has_last_pos();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::autotrade::FutureDealDetail_DealDetail > deal_details_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr last_pos_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqfuture_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OneFutureKnock : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.OneFutureKnock) */ {
 public:
  OneFutureKnock();
  virtual ~OneFutureKnock();

  OneFutureKnock(const OneFutureKnock& from);

  inline OneFutureKnock& operator=(const OneFutureKnock& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OneFutureKnock(OneFutureKnock&& from) noexcept
    : OneFutureKnock() {
    *this = ::std::move(from);
  }

  inline OneFutureKnock& operator=(OneFutureKnock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OneFutureKnock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OneFutureKnock* internal_default_instance() {
    return reinterpret_cast<const OneFutureKnock*>(
               &_OneFutureKnock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(OneFutureKnock* other);
  friend void swap(OneFutureKnock& a, OneFutureKnock& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OneFutureKnock* New() const final {
    return CreateMaybeMessage<OneFutureKnock>(NULL);
  }

  OneFutureKnock* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OneFutureKnock>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OneFutureKnock& from);
  void MergeFrom(const OneFutureKnock& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OneFutureKnock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string code = 3;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 3;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // required string order_group = 4;
  bool has_order_group() const;
  void clear_order_group();
  static const int kOrderGroupFieldNumber = 4;
  const ::std::string& order_group() const;
  void set_order_group(const ::std::string& value);
  #if LANG_CXX11
  void set_order_group(::std::string&& value);
  #endif
  void set_order_group(const char* value);
  void set_order_group(const char* value, size_t size);
  ::std::string* mutable_order_group();
  ::std::string* release_order_group();
  void set_allocated_order_group(::std::string* order_group);

  // optional string order_no = 5;
  bool has_order_no() const;
  void clear_order_no();
  static const int kOrderNoFieldNumber = 5;
  const ::std::string& order_no() const;
  void set_order_no(const ::std::string& value);
  #if LANG_CXX11
  void set_order_no(::std::string&& value);
  #endif
  void set_order_no(const char* value);
  void set_order_no(const char* value, size_t size);
  ::std::string* mutable_order_no();
  ::std::string* release_order_no();
  void set_allocated_order_no(::std::string* order_no);

  // optional string match_id = 6;
  bool has_match_id() const;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 6;
  const ::std::string& match_id() const;
  void set_match_id(const ::std::string& value);
  #if LANG_CXX11
  void set_match_id(::std::string&& value);
  #endif
  void set_match_id(const char* value);
  void set_match_id(const char* value, size_t size);
  ::std::string* mutable_match_id();
  ::std::string* release_match_id();
  void set_allocated_match_id(::std::string* match_id);

  // optional string account_name = 13;
  bool has_account_name() const;
  void clear_account_name();
  static const int kAccountNameFieldNumber = 13;
  const ::std::string& account_name() const;
  void set_account_name(const ::std::string& value);
  #if LANG_CXX11
  void set_account_name(::std::string&& value);
  #endif
  void set_account_name(const char* value);
  void set_account_name(const char* value, size_t size);
  ::std::string* mutable_account_name();
  ::std::string* release_account_name();
  void set_allocated_account_name(::std::string* account_name);

  // required uint64 stamp = 2;
  bool has_stamp() const;
  void clear_stamp();
  static const int kStampFieldNumber = 2;
  ::google::protobuf::uint64 stamp() const;
  void set_stamp(::google::protobuf::uint64 value);

  // required int64 order_price = 7;
  bool has_order_price() const;
  void clear_order_price();
  static const int kOrderPriceFieldNumber = 7;
  ::google::protobuf::int64 order_price() const;
  void set_order_price(::google::protobuf::int64 value);

  // required int64 match_price = 8;
  bool has_match_price() const;
  void clear_match_price();
  static const int kMatchPriceFieldNumber = 8;
  ::google::protobuf::int64 match_price() const;
  void set_match_price(::google::protobuf::int64 value);

  // required uint64 order_qty = 9;
  bool has_order_qty() const;
  void clear_order_qty();
  static const int kOrderQtyFieldNumber = 9;
  ::google::protobuf::uint64 order_qty() const;
  void set_order_qty(::google::protobuf::uint64 value);

  // required uint64 match_qty = 10;
  bool has_match_qty() const;
  void clear_match_qty();
  static const int kMatchQtyFieldNumber = 10;
  ::google::protobuf::uint64 match_qty() const;
  void set_match_qty(::google::protobuf::uint64 value);

  // optional double match_amt = 11;
  bool has_match_amt() const;
  void clear_match_amt();
  static const int kMatchAmtFieldNumber = 11;
  double match_amt() const;
  void set_match_amt(double value);

  // optional uint32 bsflag = 12;
  bool has_bsflag() const;
  void clear_bsflag();
  static const int kBsflagFieldNumber = 12;
  ::google::protobuf::uint32 bsflag() const;
  void set_bsflag(::google::protobuf::uint32 value);

  // optional int32 funcid = 1 [default = 12003002];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.OneFutureKnock)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_stamp();
  void clear_has_stamp();
  void set_has_code();
  void clear_has_code();
  void set_has_order_group();
  void clear_has_order_group();
  void set_has_order_no();
  void clear_has_order_no();
  void set_has_match_id();
  void clear_has_match_id();
  void set_has_order_price();
  void clear_has_order_price();
  void set_has_match_price();
  void clear_has_match_price();
  void set_has_order_qty();
  void clear_has_order_qty();
  void set_has_match_qty();
  void clear_has_match_qty();
  void set_has_match_amt();
  void clear_has_match_amt();
  void set_has_bsflag();
  void clear_has_bsflag();
  void set_has_account_name();
  void clear_has_account_name();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr order_group_;
  ::google::protobuf::internal::ArenaStringPtr order_no_;
  ::google::protobuf::internal::ArenaStringPtr match_id_;
  ::google::protobuf::internal::ArenaStringPtr account_name_;
  ::google::protobuf::uint64 stamp_;
  ::google::protobuf::int64 order_price_;
  ::google::protobuf::int64 match_price_;
  ::google::protobuf::uint64 order_qty_;
  ::google::protobuf::uint64 match_qty_;
  double match_amt_;
  ::google::protobuf::uint32 bsflag_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqfuture_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SumFutureKnock : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.SumFutureKnock) */ {
 public:
  SumFutureKnock();
  virtual ~SumFutureKnock();

  SumFutureKnock(const SumFutureKnock& from);

  inline SumFutureKnock& operator=(const SumFutureKnock& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SumFutureKnock(SumFutureKnock&& from) noexcept
    : SumFutureKnock() {
    *this = ::std::move(from);
  }

  inline SumFutureKnock& operator=(SumFutureKnock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SumFutureKnock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SumFutureKnock* internal_default_instance() {
    return reinterpret_cast<const SumFutureKnock*>(
               &_SumFutureKnock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(SumFutureKnock* other);
  friend void swap(SumFutureKnock& a, SumFutureKnock& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SumFutureKnock* New() const final {
    return CreateMaybeMessage<SumFutureKnock>(NULL);
  }

  SumFutureKnock* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SumFutureKnock>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SumFutureKnock& from);
  void MergeFrom(const SumFutureKnock& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SumFutureKnock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .autotrade.OneFutureKnock one_knocks = 11;
  int one_knocks_size() const;
  void clear_one_knocks();
  static const int kOneKnocksFieldNumber = 11;
  ::autotrade::OneFutureKnock* mutable_one_knocks(int index);
  ::google::protobuf::RepeatedPtrField< ::autotrade::OneFutureKnock >*
      mutable_one_knocks();
  const ::autotrade::OneFutureKnock& one_knocks(int index) const;
  ::autotrade::OneFutureKnock* add_one_knocks();
  const ::google::protobuf::RepeatedPtrField< ::autotrade::OneFutureKnock >&
      one_knocks() const;

  // optional string type = 3 [default = "F"];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required string order_group = 4;
  bool has_order_group() const;
  void clear_order_group();
  static const int kOrderGroupFieldNumber = 4;
  const ::std::string& order_group() const;
  void set_order_group(const ::std::string& value);
  #if LANG_CXX11
  void set_order_group(::std::string&& value);
  #endif
  void set_order_group(const char* value);
  void set_order_group(const char* value, size_t size);
  ::std::string* mutable_order_group();
  ::std::string* release_order_group();
  void set_allocated_order_group(::std::string* order_group);

  // required string order_id = 10;
  bool has_order_id() const;
  void clear_order_id();
  static const int kOrderIdFieldNumber = 10;
  const ::std::string& order_id() const;
  void set_order_id(const ::std::string& value);
  #if LANG_CXX11
  void set_order_id(::std::string&& value);
  #endif
  void set_order_id(const char* value);
  void set_order_id(const char* value, size_t size);
  ::std::string* mutable_order_id();
  ::std::string* release_order_id();
  void set_allocated_order_id(::std::string* order_id);

  // optional string account_name = 12 [default = ""];
  bool has_account_name() const;
  void clear_account_name();
  static const int kAccountNameFieldNumber = 12;
  const ::std::string& account_name() const;
  void set_account_name(const ::std::string& value);
  #if LANG_CXX11
  void set_account_name(::std::string&& value);
  #endif
  void set_account_name(const char* value);
  void set_account_name(const char* value, size_t size);
  ::std::string* mutable_account_name();
  ::std::string* release_account_name();
  void set_allocated_account_name(::std::string* account_name);

  // required uint64 stamp = 2;
  bool has_stamp() const;
  void clear_stamp();
  static const int kStampFieldNumber = 2;
  ::google::protobuf::uint64 stamp() const;
  void set_stamp(::google::protobuf::uint64 value);

  // required uint64 order_qty = 5;
  bool has_order_qty() const;
  void clear_order_qty();
  static const int kOrderQtyFieldNumber = 5;
  ::google::protobuf::uint64 order_qty() const;
  void set_order_qty(::google::protobuf::uint64 value);

  // required uint64 match_qty = 6;
  bool has_match_qty() const;
  void clear_match_qty();
  static const int kMatchQtyFieldNumber = 6;
  ::google::protobuf::uint64 match_qty() const;
  void set_match_qty(::google::protobuf::uint64 value);

  // optional double match_amt = 7;
  bool has_match_amt() const;
  void clear_match_amt();
  static const int kMatchAmtFieldNumber = 7;
  double match_amt() const;
  void set_match_amt(double value);

  // required uint64 cancel_qty = 8 [default = 0];
  bool has_cancel_qty() const;
  void clear_cancel_qty();
  static const int kCancelQtyFieldNumber = 8;
  ::google::protobuf::uint64 cancel_qty() const;
  void set_cancel_qty(::google::protobuf::uint64 value);

  // required bool finished = 9 [default = false];
  bool has_finished() const;
  void clear_finished();
  static const int kFinishedFieldNumber = 9;
  bool finished() const;
  void set_finished(bool value);

  // optional int32 funcid = 1 [default = 12003003];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.SumFutureKnock)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_stamp();
  void clear_has_stamp();
  void set_has_type();
  void clear_has_type();
  void set_has_order_group();
  void clear_has_order_group();
  void set_has_order_qty();
  void clear_has_order_qty();
  void set_has_match_qty();
  void clear_has_match_qty();
  void set_has_match_amt();
  void clear_has_match_amt();
  void set_has_cancel_qty();
  void clear_has_cancel_qty();
  void set_has_finished();
  void clear_has_finished();
  void set_has_order_id();
  void clear_has_order_id();
  void set_has_account_name();
  void clear_has_account_name();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::autotrade::OneFutureKnock > one_knocks_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_type_;
  private:
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr order_group_;
  ::google::protobuf::internal::ArenaStringPtr order_id_;
  ::google::protobuf::internal::ArenaStringPtr account_name_;
  ::google::protobuf::uint64 stamp_;
  ::google::protobuf::uint64 order_qty_;
  ::google::protobuf::uint64 match_qty_;
  double match_amt_;
  ::google::protobuf::uint64 cancel_qty_;
  bool finished_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqfuture_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FutureQuerySettlementReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.FutureQuerySettlementReqt) */ {
 public:
  FutureQuerySettlementReqt();
  virtual ~FutureQuerySettlementReqt();

  FutureQuerySettlementReqt(const FutureQuerySettlementReqt& from);

  inline FutureQuerySettlementReqt& operator=(const FutureQuerySettlementReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FutureQuerySettlementReqt(FutureQuerySettlementReqt&& from) noexcept
    : FutureQuerySettlementReqt() {
    *this = ::std::move(from);
  }

  inline FutureQuerySettlementReqt& operator=(FutureQuerySettlementReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FutureQuerySettlementReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FutureQuerySettlementReqt* internal_default_instance() {
    return reinterpret_cast<const FutureQuerySettlementReqt*>(
               &_FutureQuerySettlementReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(FutureQuerySettlementReqt* other);
  friend void swap(FutureQuerySettlementReqt& a, FutureQuerySettlementReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FutureQuerySettlementReqt* New() const final {
    return CreateMaybeMessage<FutureQuerySettlementReqt>(NULL);
  }

  FutureQuerySettlementReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FutureQuerySettlementReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FutureQuerySettlementReqt& from);
  void MergeFrom(const FutureQuerySettlementReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FutureQuerySettlementReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string broker_id = 2;
  bool has_broker_id() const;
  void clear_broker_id();
  static const int kBrokerIdFieldNumber = 2;
  const ::std::string& broker_id() const;
  void set_broker_id(const ::std::string& value);
  #if LANG_CXX11
  void set_broker_id(::std::string&& value);
  #endif
  void set_broker_id(const char* value);
  void set_broker_id(const char* value, size_t size);
  ::std::string* mutable_broker_id();
  ::std::string* release_broker_id();
  void set_allocated_broker_id(::std::string* broker_id);

  // optional string future_account = 3;
  bool has_future_account() const;
  void clear_future_account();
  static const int kFutureAccountFieldNumber = 3;
  const ::std::string& future_account() const;
  void set_future_account(const ::std::string& value);
  #if LANG_CXX11
  void set_future_account(::std::string&& value);
  #endif
  void set_future_account(const char* value);
  void set_future_account(const char* value, size_t size);
  ::std::string* mutable_future_account();
  ::std::string* release_future_account();
  void set_allocated_future_account(::std::string* future_account);

  // optional string request_id = 4;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 4;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional string trading_day = 5;
  bool has_trading_day() const;
  void clear_trading_day();
  static const int kTradingDayFieldNumber = 5;
  const ::std::string& trading_day() const;
  void set_trading_day(const ::std::string& value);
  #if LANG_CXX11
  void set_trading_day(::std::string&& value);
  #endif
  void set_trading_day(const char* value);
  void set_trading_day(const char* value, size_t size);
  ::std::string* mutable_trading_day();
  ::std::string* release_trading_day();
  void set_allocated_trading_day(::std::string* trading_day);

  // optional int32 funcid = 1 [default = 12002006];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.FutureQuerySettlementReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_broker_id();
  void clear_has_broker_id();
  void set_has_future_account();
  void clear_has_future_account();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_trading_day();
  void clear_has_trading_day();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr broker_id_;
  ::google::protobuf::internal::ArenaStringPtr future_account_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr trading_day_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqfuture_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FutureQuerySettlementResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.FutureQuerySettlementResp) */ {
 public:
  FutureQuerySettlementResp();
  virtual ~FutureQuerySettlementResp();

  FutureQuerySettlementResp(const FutureQuerySettlementResp& from);

  inline FutureQuerySettlementResp& operator=(const FutureQuerySettlementResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FutureQuerySettlementResp(FutureQuerySettlementResp&& from) noexcept
    : FutureQuerySettlementResp() {
    *this = ::std::move(from);
  }

  inline FutureQuerySettlementResp& operator=(FutureQuerySettlementResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FutureQuerySettlementResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FutureQuerySettlementResp* internal_default_instance() {
    return reinterpret_cast<const FutureQuerySettlementResp*>(
               &_FutureQuerySettlementResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(FutureQuerySettlementResp* other);
  friend void swap(FutureQuerySettlementResp& a, FutureQuerySettlementResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FutureQuerySettlementResp* New() const final {
    return CreateMaybeMessage<FutureQuerySettlementResp>(NULL);
  }

  FutureQuerySettlementResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FutureQuerySettlementResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FutureQuerySettlementResp& from);
  void MergeFrom(const FutureQuerySettlementResp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FutureQuerySettlementResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string broker_id = 2;
  bool has_broker_id() const;
  void clear_broker_id();
  static const int kBrokerIdFieldNumber = 2;
  const ::std::string& broker_id() const;
  void set_broker_id(const ::std::string& value);
  #if LANG_CXX11
  void set_broker_id(::std::string&& value);
  #endif
  void set_broker_id(const char* value);
  void set_broker_id(const char* value, size_t size);
  ::std::string* mutable_broker_id();
  ::std::string* release_broker_id();
  void set_allocated_broker_id(::std::string* broker_id);

  // optional string future_account = 3;
  bool has_future_account() const;
  void clear_future_account();
  static const int kFutureAccountFieldNumber = 3;
  const ::std::string& future_account() const;
  void set_future_account(const ::std::string& value);
  #if LANG_CXX11
  void set_future_account(::std::string&& value);
  #endif
  void set_future_account(const char* value);
  void set_future_account(const char* value, size_t size);
  ::std::string* mutable_future_account();
  ::std::string* release_future_account();
  void set_allocated_future_account(::std::string* future_account);

  // optional string request_id = 4;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 4;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional string trading_day = 5;
  bool has_trading_day() const;
  void clear_trading_day();
  static const int kTradingDayFieldNumber = 5;
  const ::std::string& trading_day() const;
  void set_trading_day(const ::std::string& value);
  #if LANG_CXX11
  void set_trading_day(::std::string&& value);
  #endif
  void set_trading_day(const char* value);
  void set_trading_day(const char* value, size_t size);
  ::std::string* mutable_trading_day();
  ::std::string* release_trading_day();
  void set_allocated_trading_day(::std::string* trading_day);

  // optional string settlement_content = 8;
  bool has_settlement_content() const;
  void clear_settlement_content();
  static const int kSettlementContentFieldNumber = 8;
  const ::std::string& settlement_content() const;
  void set_settlement_content(const ::std::string& value);
  #if LANG_CXX11
  void set_settlement_content(::std::string&& value);
  #endif
  void set_settlement_content(const char* value);
  void set_settlement_content(const char* value, size_t size);
  ::std::string* mutable_settlement_content();
  ::std::string* release_settlement_content();
  void set_allocated_settlement_content(::std::string* settlement_content);

  // optional string ret_message = 10;
  bool has_ret_message() const;
  void clear_ret_message();
  static const int kRetMessageFieldNumber = 10;
  const ::std::string& ret_message() const;
  void set_ret_message(const ::std::string& value);
  #if LANG_CXX11
  void set_ret_message(::std::string&& value);
  #endif
  void set_ret_message(const char* value);
  void set_ret_message(const char* value, size_t size);
  ::std::string* mutable_ret_message();
  ::std::string* release_ret_message();
  void set_allocated_ret_message(::std::string* ret_message);

  // optional int32 sequence_no = 6;
  bool has_sequence_no() const;
  void clear_sequence_no();
  static const int kSequenceNoFieldNumber = 6;
  ::google::protobuf::int32 sequence_no() const;
  void set_sequence_no(::google::protobuf::int32 value);

  // optional int32 settlement_id = 7;
  bool has_settlement_id() const;
  void clear_settlement_id();
  static const int kSettlementIdFieldNumber = 7;
  ::google::protobuf::int32 settlement_id() const;
  void set_settlement_id(::google::protobuf::int32 value);

  // required int32 ret_code = 9;
  bool has_ret_code() const;
  void clear_ret_code();
  static const int kRetCodeFieldNumber = 9;
  ::google::protobuf::int32 ret_code() const;
  void set_ret_code(::google::protobuf::int32 value);

  // optional int32 funcid = 1 [default = 12102006];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.FutureQuerySettlementResp)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_broker_id();
  void clear_has_broker_id();
  void set_has_future_account();
  void clear_has_future_account();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_trading_day();
  void clear_has_trading_day();
  void set_has_sequence_no();
  void clear_has_sequence_no();
  void set_has_settlement_id();
  void clear_has_settlement_id();
  void set_has_settlement_content();
  void clear_has_settlement_content();
  void set_has_ret_code();
  void clear_has_ret_code();
  void set_has_ret_message();
  void clear_has_ret_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr broker_id_;
  ::google::protobuf::internal::ArenaStringPtr future_account_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr trading_day_;
  ::google::protobuf::internal::ArenaStringPtr settlement_content_;
  ::google::protobuf::internal::ArenaStringPtr ret_message_;
  ::google::protobuf::int32 sequence_no_;
  ::google::protobuf::int32 settlement_id_;
  ::google::protobuf::int32 ret_code_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqfuture_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FutureConfirmSettlementReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.FutureConfirmSettlementReqt) */ {
 public:
  FutureConfirmSettlementReqt();
  virtual ~FutureConfirmSettlementReqt();

  FutureConfirmSettlementReqt(const FutureConfirmSettlementReqt& from);

  inline FutureConfirmSettlementReqt& operator=(const FutureConfirmSettlementReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FutureConfirmSettlementReqt(FutureConfirmSettlementReqt&& from) noexcept
    : FutureConfirmSettlementReqt() {
    *this = ::std::move(from);
  }

  inline FutureConfirmSettlementReqt& operator=(FutureConfirmSettlementReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FutureConfirmSettlementReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FutureConfirmSettlementReqt* internal_default_instance() {
    return reinterpret_cast<const FutureConfirmSettlementReqt*>(
               &_FutureConfirmSettlementReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(FutureConfirmSettlementReqt* other);
  friend void swap(FutureConfirmSettlementReqt& a, FutureConfirmSettlementReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FutureConfirmSettlementReqt* New() const final {
    return CreateMaybeMessage<FutureConfirmSettlementReqt>(NULL);
  }

  FutureConfirmSettlementReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FutureConfirmSettlementReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FutureConfirmSettlementReqt& from);
  void MergeFrom(const FutureConfirmSettlementReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FutureConfirmSettlementReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string broker_id = 2;
  bool has_broker_id() const;
  void clear_broker_id();
  static const int kBrokerIdFieldNumber = 2;
  const ::std::string& broker_id() const;
  void set_broker_id(const ::std::string& value);
  #if LANG_CXX11
  void set_broker_id(::std::string&& value);
  #endif
  void set_broker_id(const char* value);
  void set_broker_id(const char* value, size_t size);
  ::std::string* mutable_broker_id();
  ::std::string* release_broker_id();
  void set_allocated_broker_id(::std::string* broker_id);

  // optional string future_account = 3;
  bool has_future_account() const;
  void clear_future_account();
  static const int kFutureAccountFieldNumber = 3;
  const ::std::string& future_account() const;
  void set_future_account(const ::std::string& value);
  #if LANG_CXX11
  void set_future_account(::std::string&& value);
  #endif
  void set_future_account(const char* value);
  void set_future_account(const char* value, size_t size);
  ::std::string* mutable_future_account();
  ::std::string* release_future_account();
  void set_allocated_future_account(::std::string* future_account);

  // optional string request_id = 4;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 4;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional string confirm_date = 5;
  bool has_confirm_date() const;
  void clear_confirm_date();
  static const int kConfirmDateFieldNumber = 5;
  const ::std::string& confirm_date() const;
  void set_confirm_date(const ::std::string& value);
  #if LANG_CXX11
  void set_confirm_date(::std::string&& value);
  #endif
  void set_confirm_date(const char* value);
  void set_confirm_date(const char* value, size_t size);
  ::std::string* mutable_confirm_date();
  ::std::string* release_confirm_date();
  void set_allocated_confirm_date(::std::string* confirm_date);

  // optional string confirm_time = 6;
  bool has_confirm_time() const;
  void clear_confirm_time();
  static const int kConfirmTimeFieldNumber = 6;
  const ::std::string& confirm_time() const;
  void set_confirm_time(const ::std::string& value);
  #if LANG_CXX11
  void set_confirm_time(::std::string&& value);
  #endif
  void set_confirm_time(const char* value);
  void set_confirm_time(const char* value, size_t size);
  ::std::string* mutable_confirm_time();
  ::std::string* release_confirm_time();
  void set_allocated_confirm_time(::std::string* confirm_time);

  // optional int32 funcid = 1 [default = 12102007];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.FutureConfirmSettlementReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_broker_id();
  void clear_has_broker_id();
  void set_has_future_account();
  void clear_has_future_account();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_confirm_date();
  void clear_has_confirm_date();
  void set_has_confirm_time();
  void clear_has_confirm_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr broker_id_;
  ::google::protobuf::internal::ArenaStringPtr future_account_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr confirm_date_;
  ::google::protobuf::internal::ArenaStringPtr confirm_time_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqfuture_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FutureConfirmSettlementResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.FutureConfirmSettlementResp) */ {
 public:
  FutureConfirmSettlementResp();
  virtual ~FutureConfirmSettlementResp();

  FutureConfirmSettlementResp(const FutureConfirmSettlementResp& from);

  inline FutureConfirmSettlementResp& operator=(const FutureConfirmSettlementResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FutureConfirmSettlementResp(FutureConfirmSettlementResp&& from) noexcept
    : FutureConfirmSettlementResp() {
    *this = ::std::move(from);
  }

  inline FutureConfirmSettlementResp& operator=(FutureConfirmSettlementResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FutureConfirmSettlementResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FutureConfirmSettlementResp* internal_default_instance() {
    return reinterpret_cast<const FutureConfirmSettlementResp*>(
               &_FutureConfirmSettlementResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(FutureConfirmSettlementResp* other);
  friend void swap(FutureConfirmSettlementResp& a, FutureConfirmSettlementResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FutureConfirmSettlementResp* New() const final {
    return CreateMaybeMessage<FutureConfirmSettlementResp>(NULL);
  }

  FutureConfirmSettlementResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FutureConfirmSettlementResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FutureConfirmSettlementResp& from);
  void MergeFrom(const FutureConfirmSettlementResp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FutureConfirmSettlementResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string broker_id = 2;
  bool has_broker_id() const;
  void clear_broker_id();
  static const int kBrokerIdFieldNumber = 2;
  const ::std::string& broker_id() const;
  void set_broker_id(const ::std::string& value);
  #if LANG_CXX11
  void set_broker_id(::std::string&& value);
  #endif
  void set_broker_id(const char* value);
  void set_broker_id(const char* value, size_t size);
  ::std::string* mutable_broker_id();
  ::std::string* release_broker_id();
  void set_allocated_broker_id(::std::string* broker_id);

  // optional string future_account = 3;
  bool has_future_account() const;
  void clear_future_account();
  static const int kFutureAccountFieldNumber = 3;
  const ::std::string& future_account() const;
  void set_future_account(const ::std::string& value);
  #if LANG_CXX11
  void set_future_account(::std::string&& value);
  #endif
  void set_future_account(const char* value);
  void set_future_account(const char* value, size_t size);
  ::std::string* mutable_future_account();
  ::std::string* release_future_account();
  void set_allocated_future_account(::std::string* future_account);

  // optional string request_id = 4;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 4;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional string confirm_date = 5;
  bool has_confirm_date() const;
  void clear_confirm_date();
  static const int kConfirmDateFieldNumber = 5;
  const ::std::string& confirm_date() const;
  void set_confirm_date(const ::std::string& value);
  #if LANG_CXX11
  void set_confirm_date(::std::string&& value);
  #endif
  void set_confirm_date(const char* value);
  void set_confirm_date(const char* value, size_t size);
  ::std::string* mutable_confirm_date();
  ::std::string* release_confirm_date();
  void set_allocated_confirm_date(::std::string* confirm_date);

  // optional string confirm_time = 6;
  bool has_confirm_time() const;
  void clear_confirm_time();
  static const int kConfirmTimeFieldNumber = 6;
  const ::std::string& confirm_time() const;
  void set_confirm_time(const ::std::string& value);
  #if LANG_CXX11
  void set_confirm_time(::std::string&& value);
  #endif
  void set_confirm_time(const char* value);
  void set_confirm_time(const char* value, size_t size);
  ::std::string* mutable_confirm_time();
  ::std::string* release_confirm_time();
  void set_allocated_confirm_time(::std::string* confirm_time);

  // optional string ret_message = 8;
  bool has_ret_message() const;
  void clear_ret_message();
  static const int kRetMessageFieldNumber = 8;
  const ::std::string& ret_message() const;
  void set_ret_message(const ::std::string& value);
  #if LANG_CXX11
  void set_ret_message(::std::string&& value);
  #endif
  void set_ret_message(const char* value);
  void set_ret_message(const char* value, size_t size);
  ::std::string* mutable_ret_message();
  ::std::string* release_ret_message();
  void set_allocated_ret_message(::std::string* ret_message);

  // required int32 ret_code = 7;
  bool has_ret_code() const;
  void clear_ret_code();
  static const int kRetCodeFieldNumber = 7;
  ::google::protobuf::int32 ret_code() const;
  void set_ret_code(::google::protobuf::int32 value);

  // optional bool islast = 9 [default = false];
  bool has_islast() const;
  void clear_islast();
  static const int kIslastFieldNumber = 9;
  bool islast() const;
  void set_islast(bool value);

  // optional int32 funcid = 1 [default = 12102007];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.FutureConfirmSettlementResp)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_broker_id();
  void clear_has_broker_id();
  void set_has_future_account();
  void clear_has_future_account();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_confirm_date();
  void clear_has_confirm_date();
  void set_has_confirm_time();
  void clear_has_confirm_time();
  void set_has_ret_code();
  void clear_has_ret_code();
  void set_has_ret_message();
  void clear_has_ret_message();
  void set_has_islast();
  void clear_has_islast();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr broker_id_;
  ::google::protobuf::internal::ArenaStringPtr future_account_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr confirm_date_;
  ::google::protobuf::internal::ArenaStringPtr confirm_time_;
  ::google::protobuf::internal::ArenaStringPtr ret_message_;
  ::google::protobuf::int32 ret_code_;
  bool islast_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqfuture_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FutureQuerySettlementConfirmReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.FutureQuerySettlementConfirmReqt) */ {
 public:
  FutureQuerySettlementConfirmReqt();
  virtual ~FutureQuerySettlementConfirmReqt();

  FutureQuerySettlementConfirmReqt(const FutureQuerySettlementConfirmReqt& from);

  inline FutureQuerySettlementConfirmReqt& operator=(const FutureQuerySettlementConfirmReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FutureQuerySettlementConfirmReqt(FutureQuerySettlementConfirmReqt&& from) noexcept
    : FutureQuerySettlementConfirmReqt() {
    *this = ::std::move(from);
  }

  inline FutureQuerySettlementConfirmReqt& operator=(FutureQuerySettlementConfirmReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FutureQuerySettlementConfirmReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FutureQuerySettlementConfirmReqt* internal_default_instance() {
    return reinterpret_cast<const FutureQuerySettlementConfirmReqt*>(
               &_FutureQuerySettlementConfirmReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(FutureQuerySettlementConfirmReqt* other);
  friend void swap(FutureQuerySettlementConfirmReqt& a, FutureQuerySettlementConfirmReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FutureQuerySettlementConfirmReqt* New() const final {
    return CreateMaybeMessage<FutureQuerySettlementConfirmReqt>(NULL);
  }

  FutureQuerySettlementConfirmReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FutureQuerySettlementConfirmReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FutureQuerySettlementConfirmReqt& from);
  void MergeFrom(const FutureQuerySettlementConfirmReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FutureQuerySettlementConfirmReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string broker_id = 2;
  bool has_broker_id() const;
  void clear_broker_id();
  static const int kBrokerIdFieldNumber = 2;
  const ::std::string& broker_id() const;
  void set_broker_id(const ::std::string& value);
  #if LANG_CXX11
  void set_broker_id(::std::string&& value);
  #endif
  void set_broker_id(const char* value);
  void set_broker_id(const char* value, size_t size);
  ::std::string* mutable_broker_id();
  ::std::string* release_broker_id();
  void set_allocated_broker_id(::std::string* broker_id);

  // optional string future_account = 3;
  bool has_future_account() const;
  void clear_future_account();
  static const int kFutureAccountFieldNumber = 3;
  const ::std::string& future_account() const;
  void set_future_account(const ::std::string& value);
  #if LANG_CXX11
  void set_future_account(::std::string&& value);
  #endif
  void set_future_account(const char* value);
  void set_future_account(const char* value, size_t size);
  ::std::string* mutable_future_account();
  ::std::string* release_future_account();
  void set_allocated_future_account(::std::string* future_account);

  // optional string request_id = 4;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 4;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional int32 funcid = 1 [default = 12102008];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.FutureQuerySettlementConfirmReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_broker_id();
  void clear_has_broker_id();
  void set_has_future_account();
  void clear_has_future_account();
  void set_has_request_id();
  void clear_has_request_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr broker_id_;
  ::google::protobuf::internal::ArenaStringPtr future_account_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqfuture_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FutureQuerySettlementConfirmResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.FutureQuerySettlementConfirmResp) */ {
 public:
  FutureQuerySettlementConfirmResp();
  virtual ~FutureQuerySettlementConfirmResp();

  FutureQuerySettlementConfirmResp(const FutureQuerySettlementConfirmResp& from);

  inline FutureQuerySettlementConfirmResp& operator=(const FutureQuerySettlementConfirmResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FutureQuerySettlementConfirmResp(FutureQuerySettlementConfirmResp&& from) noexcept
    : FutureQuerySettlementConfirmResp() {
    *this = ::std::move(from);
  }

  inline FutureQuerySettlementConfirmResp& operator=(FutureQuerySettlementConfirmResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FutureQuerySettlementConfirmResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FutureQuerySettlementConfirmResp* internal_default_instance() {
    return reinterpret_cast<const FutureQuerySettlementConfirmResp*>(
               &_FutureQuerySettlementConfirmResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(FutureQuerySettlementConfirmResp* other);
  friend void swap(FutureQuerySettlementConfirmResp& a, FutureQuerySettlementConfirmResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FutureQuerySettlementConfirmResp* New() const final {
    return CreateMaybeMessage<FutureQuerySettlementConfirmResp>(NULL);
  }

  FutureQuerySettlementConfirmResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FutureQuerySettlementConfirmResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FutureQuerySettlementConfirmResp& from);
  void MergeFrom(const FutureQuerySettlementConfirmResp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FutureQuerySettlementConfirmResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string broker_id = 2;
  bool has_broker_id() const;
  void clear_broker_id();
  static const int kBrokerIdFieldNumber = 2;
  const ::std::string& broker_id() const;
  void set_broker_id(const ::std::string& value);
  #if LANG_CXX11
  void set_broker_id(::std::string&& value);
  #endif
  void set_broker_id(const char* value);
  void set_broker_id(const char* value, size_t size);
  ::std::string* mutable_broker_id();
  ::std::string* release_broker_id();
  void set_allocated_broker_id(::std::string* broker_id);

  // optional string future_account = 3;
  bool has_future_account() const;
  void clear_future_account();
  static const int kFutureAccountFieldNumber = 3;
  const ::std::string& future_account() const;
  void set_future_account(const ::std::string& value);
  #if LANG_CXX11
  void set_future_account(::std::string&& value);
  #endif
  void set_future_account(const char* value);
  void set_future_account(const char* value, size_t size);
  ::std::string* mutable_future_account();
  ::std::string* release_future_account();
  void set_allocated_future_account(::std::string* future_account);

  // optional string request_id = 4;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 4;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional string confirm_date = 5;
  bool has_confirm_date() const;
  void clear_confirm_date();
  static const int kConfirmDateFieldNumber = 5;
  const ::std::string& confirm_date() const;
  void set_confirm_date(const ::std::string& value);
  #if LANG_CXX11
  void set_confirm_date(::std::string&& value);
  #endif
  void set_confirm_date(const char* value);
  void set_confirm_date(const char* value, size_t size);
  ::std::string* mutable_confirm_date();
  ::std::string* release_confirm_date();
  void set_allocated_confirm_date(::std::string* confirm_date);

  // optional string confirm_time = 6;
  bool has_confirm_time() const;
  void clear_confirm_time();
  static const int kConfirmTimeFieldNumber = 6;
  const ::std::string& confirm_time() const;
  void set_confirm_time(const ::std::string& value);
  #if LANG_CXX11
  void set_confirm_time(::std::string&& value);
  #endif
  void set_confirm_time(const char* value);
  void set_confirm_time(const char* value, size_t size);
  ::std::string* mutable_confirm_time();
  ::std::string* release_confirm_time();
  void set_allocated_confirm_time(::std::string* confirm_time);

  // optional string ret_message = 8;
  bool has_ret_message() const;
  void clear_ret_message();
  static const int kRetMessageFieldNumber = 8;
  const ::std::string& ret_message() const;
  void set_ret_message(const ::std::string& value);
  #if LANG_CXX11
  void set_ret_message(::std::string&& value);
  #endif
  void set_ret_message(const char* value);
  void set_ret_message(const char* value, size_t size);
  ::std::string* mutable_ret_message();
  ::std::string* release_ret_message();
  void set_allocated_ret_message(::std::string* ret_message);

  // required int32 ret_code = 7;
  bool has_ret_code() const;
  void clear_ret_code();
  static const int kRetCodeFieldNumber = 7;
  ::google::protobuf::int32 ret_code() const;
  void set_ret_code(::google::protobuf::int32 value);

  // optional int32 funcid = 1 [default = 12102008];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.FutureQuerySettlementConfirmResp)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_broker_id();
  void clear_has_broker_id();
  void set_has_future_account();
  void clear_has_future_account();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_confirm_date();
  void clear_has_confirm_date();
  void set_has_confirm_time();
  void clear_has_confirm_time();
  void set_has_ret_code();
  void clear_has_ret_code();
  void set_has_ret_message();
  void clear_has_ret_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr broker_id_;
  ::google::protobuf::internal::ArenaStringPtr future_account_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr confirm_date_;
  ::google::protobuf::internal::ArenaStringPtr confirm_time_;
  ::google::protobuf::internal::ArenaStringPtr ret_message_;
  ::google::protobuf::int32 ret_code_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqfuture_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FutureSystemConnected : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.FutureSystemConnected) */ {
 public:
  FutureSystemConnected();
  virtual ~FutureSystemConnected();

  FutureSystemConnected(const FutureSystemConnected& from);

  inline FutureSystemConnected& operator=(const FutureSystemConnected& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FutureSystemConnected(FutureSystemConnected&& from) noexcept
    : FutureSystemConnected() {
    *this = ::std::move(from);
  }

  inline FutureSystemConnected& operator=(FutureSystemConnected&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FutureSystemConnected& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FutureSystemConnected* internal_default_instance() {
    return reinterpret_cast<const FutureSystemConnected*>(
               &_FutureSystemConnected_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(FutureSystemConnected* other);
  friend void swap(FutureSystemConnected& a, FutureSystemConnected& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FutureSystemConnected* New() const final {
    return CreateMaybeMessage<FutureSystemConnected>(NULL);
  }

  FutureSystemConnected* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FutureSystemConnected>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FutureSystemConnected& from);
  void MergeFrom(const FutureSystemConnected& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FutureSystemConnected* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 funcid = 1 [default = 12003004];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.FutureSystemConnected)
 private:
  void set_has_funcid();
  void clear_has_funcid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqfuture_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FutureSystemDisconnected : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.FutureSystemDisconnected) */ {
 public:
  FutureSystemDisconnected();
  virtual ~FutureSystemDisconnected();

  FutureSystemDisconnected(const FutureSystemDisconnected& from);

  inline FutureSystemDisconnected& operator=(const FutureSystemDisconnected& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FutureSystemDisconnected(FutureSystemDisconnected&& from) noexcept
    : FutureSystemDisconnected() {
    *this = ::std::move(from);
  }

  inline FutureSystemDisconnected& operator=(FutureSystemDisconnected&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FutureSystemDisconnected& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FutureSystemDisconnected* internal_default_instance() {
    return reinterpret_cast<const FutureSystemDisconnected*>(
               &_FutureSystemDisconnected_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(FutureSystemDisconnected* other);
  friend void swap(FutureSystemDisconnected& a, FutureSystemDisconnected& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FutureSystemDisconnected* New() const final {
    return CreateMaybeMessage<FutureSystemDisconnected>(NULL);
  }

  FutureSystemDisconnected* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FutureSystemDisconnected>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FutureSystemDisconnected& from);
  void MergeFrom(const FutureSystemDisconnected& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FutureSystemDisconnected* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 reason = 2;
  bool has_reason() const;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  ::google::protobuf::int32 reason() const;
  void set_reason(::google::protobuf::int32 value);

  // optional int32 funcid = 1 [default = 12003005];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.FutureSystemDisconnected)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_reason();
  void clear_has_reason();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 reason_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqfuture_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FutureOrderInsertResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.FutureOrderInsertResp) */ {
 public:
  FutureOrderInsertResp();
  virtual ~FutureOrderInsertResp();

  FutureOrderInsertResp(const FutureOrderInsertResp& from);

  inline FutureOrderInsertResp& operator=(const FutureOrderInsertResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FutureOrderInsertResp(FutureOrderInsertResp&& from) noexcept
    : FutureOrderInsertResp() {
    *this = ::std::move(from);
  }

  inline FutureOrderInsertResp& operator=(FutureOrderInsertResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FutureOrderInsertResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FutureOrderInsertResp* internal_default_instance() {
    return reinterpret_cast<const FutureOrderInsertResp*>(
               &_FutureOrderInsertResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(FutureOrderInsertResp* other);
  friend void swap(FutureOrderInsertResp& a, FutureOrderInsertResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FutureOrderInsertResp* New() const final {
    return CreateMaybeMessage<FutureOrderInsertResp>(NULL);
  }

  FutureOrderInsertResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FutureOrderInsertResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FutureOrderInsertResp& from);
  void MergeFrom(const FutureOrderInsertResp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FutureOrderInsertResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ret_message = 3;
  bool has_ret_message() const;
  void clear_ret_message();
  static const int kRetMessageFieldNumber = 3;
  const ::std::string& ret_message() const;
  void set_ret_message(const ::std::string& value);
  #if LANG_CXX11
  void set_ret_message(::std::string&& value);
  #endif
  void set_ret_message(const char* value);
  void set_ret_message(const char* value, size_t size);
  ::std::string* mutable_ret_message();
  ::std::string* release_ret_message();
  void set_allocated_ret_message(::std::string* ret_message);

  // optional string order_group = 4;
  bool has_order_group() const;
  void clear_order_group();
  static const int kOrderGroupFieldNumber = 4;
  const ::std::string& order_group() const;
  void set_order_group(const ::std::string& value);
  #if LANG_CXX11
  void set_order_group(::std::string&& value);
  #endif
  void set_order_group(const char* value);
  void set_order_group(const char* value, size_t size);
  ::std::string* mutable_order_group();
  ::std::string* release_order_group();
  void set_allocated_order_group(::std::string* order_group);

  // optional string code = 5;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 5;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string account_name = 9;
  bool has_account_name() const;
  void clear_account_name();
  static const int kAccountNameFieldNumber = 9;
  const ::std::string& account_name() const;
  void set_account_name(const ::std::string& value);
  #if LANG_CXX11
  void set_account_name(::std::string&& value);
  #endif
  void set_account_name(const char* value);
  void set_account_name(const char* value, size_t size);
  ::std::string* mutable_account_name();
  ::std::string* release_account_name();
  void set_allocated_account_name(::std::string* account_name);

  // required int32 ret_code = 2;
  bool has_ret_code() const;
  void clear_ret_code();
  static const int kRetCodeFieldNumber = 2;
  ::google::protobuf::int32 ret_code() const;
  void set_ret_code(::google::protobuf::int32 value);

  // optional int32 bsflag = 6;
  bool has_bsflag() const;
  void clear_bsflag();
  static const int kBsflagFieldNumber = 6;
  ::google::protobuf::int32 bsflag() const;
  void set_bsflag(::google::protobuf::int32 value);

  // optional int32 kpcbj = 7;
  bool has_kpcbj() const;
  void clear_kpcbj();
  static const int kKpcbjFieldNumber = 7;
  ::google::protobuf::int32 kpcbj() const;
  void set_kpcbj(::google::protobuf::int32 value);

  // optional int32 hedge_flag = 8;
  bool has_hedge_flag() const;
  void clear_hedge_flag();
  static const int kHedgeFlagFieldNumber = 8;
  ::google::protobuf::int32 hedge_flag() const;
  void set_hedge_flag(::google::protobuf::int32 value);

  // optional int32 front_id = 10;
  bool has_front_id() const;
  void clear_front_id();
  static const int kFrontIdFieldNumber = 10;
  ::google::protobuf::int32 front_id() const;
  void set_front_id(::google::protobuf::int32 value);

  // optional int32 session_id = 11;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 11;
  ::google::protobuf::int32 session_id() const;
  void set_session_id(::google::protobuf::int32 value);

  // optional int32 funcid = 1 [default = 12003006];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.FutureOrderInsertResp)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_ret_code();
  void clear_has_ret_code();
  void set_has_ret_message();
  void clear_has_ret_message();
  void set_has_order_group();
  void clear_has_order_group();
  void set_has_code();
  void clear_has_code();
  void set_has_bsflag();
  void clear_has_bsflag();
  void set_has_kpcbj();
  void clear_has_kpcbj();
  void set_has_hedge_flag();
  void clear_has_hedge_flag();
  void set_has_account_name();
  void clear_has_account_name();
  void set_has_front_id();
  void clear_has_front_id();
  void set_has_session_id();
  void clear_has_session_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ret_message_;
  ::google::protobuf::internal::ArenaStringPtr order_group_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr account_name_;
  ::google::protobuf::int32 ret_code_;
  ::google::protobuf::int32 bsflag_;
  ::google::protobuf::int32 kpcbj_;
  ::google::protobuf::int32 hedge_flag_;
  ::google::protobuf::int32 front_id_;
  ::google::protobuf::int32 session_id_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqfuture_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FutureOrderActionResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.FutureOrderActionResp) */ {
 public:
  FutureOrderActionResp();
  virtual ~FutureOrderActionResp();

  FutureOrderActionResp(const FutureOrderActionResp& from);

  inline FutureOrderActionResp& operator=(const FutureOrderActionResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FutureOrderActionResp(FutureOrderActionResp&& from) noexcept
    : FutureOrderActionResp() {
    *this = ::std::move(from);
  }

  inline FutureOrderActionResp& operator=(FutureOrderActionResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FutureOrderActionResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FutureOrderActionResp* internal_default_instance() {
    return reinterpret_cast<const FutureOrderActionResp*>(
               &_FutureOrderActionResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(FutureOrderActionResp* other);
  friend void swap(FutureOrderActionResp& a, FutureOrderActionResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FutureOrderActionResp* New() const final {
    return CreateMaybeMessage<FutureOrderActionResp>(NULL);
  }

  FutureOrderActionResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FutureOrderActionResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FutureOrderActionResp& from);
  void MergeFrom(const FutureOrderActionResp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FutureOrderActionResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ret_message = 3;
  bool has_ret_message() const;
  void clear_ret_message();
  static const int kRetMessageFieldNumber = 3;
  const ::std::string& ret_message() const;
  void set_ret_message(const ::std::string& value);
  #if LANG_CXX11
  void set_ret_message(::std::string&& value);
  #endif
  void set_ret_message(const char* value);
  void set_ret_message(const char* value, size_t size);
  ::std::string* mutable_ret_message();
  ::std::string* release_ret_message();
  void set_allocated_ret_message(::std::string* ret_message);

  // optional string order_group = 4;
  bool has_order_group() const;
  void clear_order_group();
  static const int kOrderGroupFieldNumber = 4;
  const ::std::string& order_group() const;
  void set_order_group(const ::std::string& value);
  #if LANG_CXX11
  void set_order_group(::std::string&& value);
  #endif
  void set_order_group(const char* value);
  void set_order_group(const char* value, size_t size);
  ::std::string* mutable_order_group();
  ::std::string* release_order_group();
  void set_allocated_order_group(::std::string* order_group);

  // optional string code = 5;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 5;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string account_name = 6;
  bool has_account_name() const;
  void clear_account_name();
  static const int kAccountNameFieldNumber = 6;
  const ::std::string& account_name() const;
  void set_account_name(const ::std::string& value);
  #if LANG_CXX11
  void set_account_name(::std::string&& value);
  #endif
  void set_account_name(const char* value);
  void set_account_name(const char* value, size_t size);
  ::std::string* mutable_account_name();
  ::std::string* release_account_name();
  void set_allocated_account_name(::std::string* account_name);

  // required int32 ret_code = 2;
  bool has_ret_code() const;
  void clear_ret_code();
  static const int kRetCodeFieldNumber = 2;
  ::google::protobuf::int32 ret_code() const;
  void set_ret_code(::google::protobuf::int32 value);

  // optional int32 front_id = 7;
  bool has_front_id() const;
  void clear_front_id();
  static const int kFrontIdFieldNumber = 7;
  ::google::protobuf::int32 front_id() const;
  void set_front_id(::google::protobuf::int32 value);

  // optional int32 session_id = 8;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 8;
  ::google::protobuf::int32 session_id() const;
  void set_session_id(::google::protobuf::int32 value);

  // optional int32 funcid = 1 [default = 12003007];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.FutureOrderActionResp)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_ret_code();
  void clear_has_ret_code();
  void set_has_ret_message();
  void clear_has_ret_message();
  void set_has_order_group();
  void clear_has_order_group();
  void set_has_code();
  void clear_has_code();
  void set_has_account_name();
  void clear_has_account_name();
  void set_has_front_id();
  void clear_has_front_id();
  void set_has_session_id();
  void clear_has_session_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ret_message_;
  ::google::protobuf::internal::ArenaStringPtr order_group_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr account_name_;
  ::google::protobuf::int32 ret_code_;
  ::google::protobuf::int32 front_id_;
  ::google::protobuf::int32 session_id_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqfuture_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FutureRtnOrderInsertErr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.FutureRtnOrderInsertErr) */ {
 public:
  FutureRtnOrderInsertErr();
  virtual ~FutureRtnOrderInsertErr();

  FutureRtnOrderInsertErr(const FutureRtnOrderInsertErr& from);

  inline FutureRtnOrderInsertErr& operator=(const FutureRtnOrderInsertErr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FutureRtnOrderInsertErr(FutureRtnOrderInsertErr&& from) noexcept
    : FutureRtnOrderInsertErr() {
    *this = ::std::move(from);
  }

  inline FutureRtnOrderInsertErr& operator=(FutureRtnOrderInsertErr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FutureRtnOrderInsertErr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FutureRtnOrderInsertErr* internal_default_instance() {
    return reinterpret_cast<const FutureRtnOrderInsertErr*>(
               &_FutureRtnOrderInsertErr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(FutureRtnOrderInsertErr* other);
  friend void swap(FutureRtnOrderInsertErr& a, FutureRtnOrderInsertErr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FutureRtnOrderInsertErr* New() const final {
    return CreateMaybeMessage<FutureRtnOrderInsertErr>(NULL);
  }

  FutureRtnOrderInsertErr* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FutureRtnOrderInsertErr>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FutureRtnOrderInsertErr& from);
  void MergeFrom(const FutureRtnOrderInsertErr& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FutureRtnOrderInsertErr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ret_message = 3;
  bool has_ret_message() const;
  void clear_ret_message();
  static const int kRetMessageFieldNumber = 3;
  const ::std::string& ret_message() const;
  void set_ret_message(const ::std::string& value);
  #if LANG_CXX11
  void set_ret_message(::std::string&& value);
  #endif
  void set_ret_message(const char* value);
  void set_ret_message(const char* value, size_t size);
  ::std::string* mutable_ret_message();
  ::std::string* release_ret_message();
  void set_allocated_ret_message(::std::string* ret_message);

  // optional string order_group = 4;
  bool has_order_group() const;
  void clear_order_group();
  static const int kOrderGroupFieldNumber = 4;
  const ::std::string& order_group() const;
  void set_order_group(const ::std::string& value);
  #if LANG_CXX11
  void set_order_group(::std::string&& value);
  #endif
  void set_order_group(const char* value);
  void set_order_group(const char* value, size_t size);
  ::std::string* mutable_order_group();
  ::std::string* release_order_group();
  void set_allocated_order_group(::std::string* order_group);

  // optional string code = 5;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 5;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string account_name = 9;
  bool has_account_name() const;
  void clear_account_name();
  static const int kAccountNameFieldNumber = 9;
  const ::std::string& account_name() const;
  void set_account_name(const ::std::string& value);
  #if LANG_CXX11
  void set_account_name(::std::string&& value);
  #endif
  void set_account_name(const char* value);
  void set_account_name(const char* value, size_t size);
  ::std::string* mutable_account_name();
  ::std::string* release_account_name();
  void set_allocated_account_name(::std::string* account_name);

  // optional string order_status = 12;
  bool has_order_status() const;
  void clear_order_status();
  static const int kOrderStatusFieldNumber = 12;
  const ::std::string& order_status() const;
  void set_order_status(const ::std::string& value);
  #if LANG_CXX11
  void set_order_status(::std::string&& value);
  #endif
  void set_order_status(const char* value);
  void set_order_status(const char* value, size_t size);
  ::std::string* mutable_order_status();
  ::std::string* release_order_status();
  void set_allocated_order_status(::std::string* order_status);

  // required int32 ret_code = 2;
  bool has_ret_code() const;
  void clear_ret_code();
  static const int kRetCodeFieldNumber = 2;
  ::google::protobuf::int32 ret_code() const;
  void set_ret_code(::google::protobuf::int32 value);

  // optional int32 bsflag = 6;
  bool has_bsflag() const;
  void clear_bsflag();
  static const int kBsflagFieldNumber = 6;
  ::google::protobuf::int32 bsflag() const;
  void set_bsflag(::google::protobuf::int32 value);

  // optional int32 kpcbj = 7;
  bool has_kpcbj() const;
  void clear_kpcbj();
  static const int kKpcbjFieldNumber = 7;
  ::google::protobuf::int32 kpcbj() const;
  void set_kpcbj(::google::protobuf::int32 value);

  // optional int32 hedge_flag = 8;
  bool has_hedge_flag() const;
  void clear_hedge_flag();
  static const int kHedgeFlagFieldNumber = 8;
  ::google::protobuf::int32 hedge_flag() const;
  void set_hedge_flag(::google::protobuf::int32 value);

  // optional int32 front_id = 10;
  bool has_front_id() const;
  void clear_front_id();
  static const int kFrontIdFieldNumber = 10;
  ::google::protobuf::int32 front_id() const;
  void set_front_id(::google::protobuf::int32 value);

  // optional int32 session_id = 11;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 11;
  ::google::protobuf::int32 session_id() const;
  void set_session_id(::google::protobuf::int32 value);

  // optional int32 funcid = 1 [default = 12003008];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.FutureRtnOrderInsertErr)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_ret_code();
  void clear_has_ret_code();
  void set_has_ret_message();
  void clear_has_ret_message();
  void set_has_order_group();
  void clear_has_order_group();
  void set_has_code();
  void clear_has_code();
  void set_has_bsflag();
  void clear_has_bsflag();
  void set_has_kpcbj();
  void clear_has_kpcbj();
  void set_has_hedge_flag();
  void clear_has_hedge_flag();
  void set_has_account_name();
  void clear_has_account_name();
  void set_has_front_id();
  void clear_has_front_id();
  void set_has_session_id();
  void clear_has_session_id();
  void set_has_order_status();
  void clear_has_order_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ret_message_;
  ::google::protobuf::internal::ArenaStringPtr order_group_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr account_name_;
  ::google::protobuf::internal::ArenaStringPtr order_status_;
  ::google::protobuf::int32 ret_code_;
  ::google::protobuf::int32 bsflag_;
  ::google::protobuf::int32 kpcbj_;
  ::google::protobuf::int32 hedge_flag_;
  ::google::protobuf::int32 front_id_;
  ::google::protobuf::int32 session_id_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqfuture_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FutureRtnOrderActionErr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.FutureRtnOrderActionErr) */ {
 public:
  FutureRtnOrderActionErr();
  virtual ~FutureRtnOrderActionErr();

  FutureRtnOrderActionErr(const FutureRtnOrderActionErr& from);

  inline FutureRtnOrderActionErr& operator=(const FutureRtnOrderActionErr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FutureRtnOrderActionErr(FutureRtnOrderActionErr&& from) noexcept
    : FutureRtnOrderActionErr() {
    *this = ::std::move(from);
  }

  inline FutureRtnOrderActionErr& operator=(FutureRtnOrderActionErr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FutureRtnOrderActionErr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FutureRtnOrderActionErr* internal_default_instance() {
    return reinterpret_cast<const FutureRtnOrderActionErr*>(
               &_FutureRtnOrderActionErr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(FutureRtnOrderActionErr* other);
  friend void swap(FutureRtnOrderActionErr& a, FutureRtnOrderActionErr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FutureRtnOrderActionErr* New() const final {
    return CreateMaybeMessage<FutureRtnOrderActionErr>(NULL);
  }

  FutureRtnOrderActionErr* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FutureRtnOrderActionErr>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FutureRtnOrderActionErr& from);
  void MergeFrom(const FutureRtnOrderActionErr& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FutureRtnOrderActionErr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ret_message = 3;
  bool has_ret_message() const;
  void clear_ret_message();
  static const int kRetMessageFieldNumber = 3;
  const ::std::string& ret_message() const;
  void set_ret_message(const ::std::string& value);
  #if LANG_CXX11
  void set_ret_message(::std::string&& value);
  #endif
  void set_ret_message(const char* value);
  void set_ret_message(const char* value, size_t size);
  ::std::string* mutable_ret_message();
  ::std::string* release_ret_message();
  void set_allocated_ret_message(::std::string* ret_message);

  // optional string order_group = 4;
  bool has_order_group() const;
  void clear_order_group();
  static const int kOrderGroupFieldNumber = 4;
  const ::std::string& order_group() const;
  void set_order_group(const ::std::string& value);
  #if LANG_CXX11
  void set_order_group(::std::string&& value);
  #endif
  void set_order_group(const char* value);
  void set_order_group(const char* value, size_t size);
  ::std::string* mutable_order_group();
  ::std::string* release_order_group();
  void set_allocated_order_group(::std::string* order_group);

  // optional string code = 5;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 5;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string account_name = 6;
  bool has_account_name() const;
  void clear_account_name();
  static const int kAccountNameFieldNumber = 6;
  const ::std::string& account_name() const;
  void set_account_name(const ::std::string& value);
  #if LANG_CXX11
  void set_account_name(::std::string&& value);
  #endif
  void set_account_name(const char* value);
  void set_account_name(const char* value, size_t size);
  ::std::string* mutable_account_name();
  ::std::string* release_account_name();
  void set_allocated_account_name(::std::string* account_name);

  // required int32 ret_code = 2;
  bool has_ret_code() const;
  void clear_ret_code();
  static const int kRetCodeFieldNumber = 2;
  ::google::protobuf::int32 ret_code() const;
  void set_ret_code(::google::protobuf::int32 value);

  // optional int32 front_id = 7;
  bool has_front_id() const;
  void clear_front_id();
  static const int kFrontIdFieldNumber = 7;
  ::google::protobuf::int32 front_id() const;
  void set_front_id(::google::protobuf::int32 value);

  // optional int32 session_id = 8;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 8;
  ::google::protobuf::int32 session_id() const;
  void set_session_id(::google::protobuf::int32 value);

  // optional int32 funcid = 1 [default = 12003009];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.FutureRtnOrderActionErr)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_ret_code();
  void clear_has_ret_code();
  void set_has_ret_message();
  void clear_has_ret_message();
  void set_has_order_group();
  void clear_has_order_group();
  void set_has_code();
  void clear_has_code();
  void set_has_account_name();
  void clear_has_account_name();
  void set_has_front_id();
  void clear_has_front_id();
  void set_has_session_id();
  void clear_has_session_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ret_message_;
  ::google::protobuf::internal::ArenaStringPtr order_group_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr account_name_;
  ::google::protobuf::int32 ret_code_;
  ::google::protobuf::int32 front_id_;
  ::google::protobuf::int32 session_id_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqfuture_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FutureRtnOrder : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.FutureRtnOrder) */ {
 public:
  FutureRtnOrder();
  virtual ~FutureRtnOrder();

  FutureRtnOrder(const FutureRtnOrder& from);

  inline FutureRtnOrder& operator=(const FutureRtnOrder& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FutureRtnOrder(FutureRtnOrder&& from) noexcept
    : FutureRtnOrder() {
    *this = ::std::move(from);
  }

  inline FutureRtnOrder& operator=(FutureRtnOrder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FutureRtnOrder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FutureRtnOrder* internal_default_instance() {
    return reinterpret_cast<const FutureRtnOrder*>(
               &_FutureRtnOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(FutureRtnOrder* other);
  friend void swap(FutureRtnOrder& a, FutureRtnOrder& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FutureRtnOrder* New() const final {
    return CreateMaybeMessage<FutureRtnOrder>(NULL);
  }

  FutureRtnOrder* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FutureRtnOrder>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FutureRtnOrder& from);
  void MergeFrom(const FutureRtnOrder& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FutureRtnOrder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string exchange_id = 4;
  bool has_exchange_id() const;
  void clear_exchange_id();
  static const int kExchangeIdFieldNumber = 4;
  const ::std::string& exchange_id() const;
  void set_exchange_id(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange_id(::std::string&& value);
  #endif
  void set_exchange_id(const char* value);
  void set_exchange_id(const char* value, size_t size);
  ::std::string* mutable_exchange_id();
  ::std::string* release_exchange_id();
  void set_allocated_exchange_id(::std::string* exchange_id);

  // optional string account_name = 5;
  bool has_account_name() const;
  void clear_account_name();
  static const int kAccountNameFieldNumber = 5;
  const ::std::string& account_name() const;
  void set_account_name(const ::std::string& value);
  #if LANG_CXX11
  void set_account_name(::std::string&& value);
  #endif
  void set_account_name(const char* value);
  void set_account_name(const char* value, size_t size);
  ::std::string* mutable_account_name();
  ::std::string* release_account_name();
  void set_allocated_account_name(::std::string* account_name);

  // optional string order_group = 6;
  bool has_order_group() const;
  void clear_order_group();
  static const int kOrderGroupFieldNumber = 6;
  const ::std::string& order_group() const;
  void set_order_group(const ::std::string& value);
  #if LANG_CXX11
  void set_order_group(::std::string&& value);
  #endif
  void set_order_group(const char* value);
  void set_order_group(const char* value, size_t size);
  ::std::string* mutable_order_group();
  ::std::string* release_order_group();
  void set_allocated_order_group(::std::string* order_group);

  // optional string code = 7;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 7;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string order_sys_id = 8;
  bool has_order_sys_id() const;
  void clear_order_sys_id();
  static const int kOrderSysIdFieldNumber = 8;
  const ::std::string& order_sys_id() const;
  void set_order_sys_id(const ::std::string& value);
  #if LANG_CXX11
  void set_order_sys_id(::std::string&& value);
  #endif
  void set_order_sys_id(const char* value);
  void set_order_sys_id(const char* value, size_t size);
  ::std::string* mutable_order_sys_id();
  ::std::string* release_order_sys_id();
  void set_allocated_order_sys_id(::std::string* order_sys_id);

  // optional string order_submit_status = 9;
  bool has_order_submit_status() const;
  void clear_order_submit_status();
  static const int kOrderSubmitStatusFieldNumber = 9;
  const ::std::string& order_submit_status() const;
  void set_order_submit_status(const ::std::string& value);
  #if LANG_CXX11
  void set_order_submit_status(::std::string&& value);
  #endif
  void set_order_submit_status(const char* value);
  void set_order_submit_status(const char* value, size_t size);
  ::std::string* mutable_order_submit_status();
  ::std::string* release_order_submit_status();
  void set_allocated_order_submit_status(::std::string* order_submit_status);

  // optional string order_local_id = 10;
  bool has_order_local_id() const;
  void clear_order_local_id();
  static const int kOrderLocalIdFieldNumber = 10;
  const ::std::string& order_local_id() const;
  void set_order_local_id(const ::std::string& value);
  #if LANG_CXX11
  void set_order_local_id(::std::string&& value);
  #endif
  void set_order_local_id(const char* value);
  void set_order_local_id(const char* value, size_t size);
  ::std::string* mutable_order_local_id();
  ::std::string* release_order_local_id();
  void set_allocated_order_local_id(::std::string* order_local_id);

  // optional string order_status = 11;
  bool has_order_status() const;
  void clear_order_status();
  static const int kOrderStatusFieldNumber = 11;
  const ::std::string& order_status() const;
  void set_order_status(const ::std::string& value);
  #if LANG_CXX11
  void set_order_status(::std::string&& value);
  #endif
  void set_order_status(const char* value);
  void set_order_status(const char* value, size_t size);
  ::std::string* mutable_order_status();
  ::std::string* release_order_status();
  void set_allocated_order_status(::std::string* order_status);

  // optional int32 front_id = 2;
  bool has_front_id() const;
  void clear_front_id();
  static const int kFrontIdFieldNumber = 2;
  ::google::protobuf::int32 front_id() const;
  void set_front_id(::google::protobuf::int32 value);

  // optional int32 session_id = 3;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  ::google::protobuf::int32 session_id() const;
  void set_session_id(::google::protobuf::int32 value);

  // optional int64 order_qty = 12;
  bool has_order_qty() const;
  void clear_order_qty();
  static const int kOrderQtyFieldNumber = 12;
  ::google::protobuf::int64 order_qty() const;
  void set_order_qty(::google::protobuf::int64 value);

  // optional int64 match_qty = 13;
  bool has_match_qty() const;
  void clear_match_qty();
  static const int kMatchQtyFieldNumber = 13;
  ::google::protobuf::int64 match_qty() const;
  void set_match_qty(::google::protobuf::int64 value);

  // optional int64 unmatch_qty = 14;
  bool has_unmatch_qty() const;
  void clear_unmatch_qty();
  static const int kUnmatchQtyFieldNumber = 14;
  ::google::protobuf::int64 unmatch_qty() const;
  void set_unmatch_qty(::google::protobuf::int64 value);

  // optional int32 bsflag = 15;
  bool has_bsflag() const;
  void clear_bsflag();
  static const int kBsflagFieldNumber = 15;
  ::google::protobuf::int32 bsflag() const;
  void set_bsflag(::google::protobuf::int32 value);

  // optional int32 hedge_flag = 16;
  bool has_hedge_flag() const;
  void clear_hedge_flag();
  static const int kHedgeFlagFieldNumber = 16;
  ::google::protobuf::int32 hedge_flag() const;
  void set_hedge_flag(::google::protobuf::int32 value);

  // optional int32 kpcbj = 17;
  bool has_kpcbj() const;
  void clear_kpcbj();
  static const int kKpcbjFieldNumber = 17;
  ::google::protobuf::int32 kpcbj() const;
  void set_kpcbj(::google::protobuf::int32 value);

  // optional int32 cancel_time = 23 [default = -1];
  bool has_cancel_time() const;
  void clear_cancel_time();
  static const int kCancelTimeFieldNumber = 23;
  ::google::protobuf::int32 cancel_time() const;
  void set_cancel_time(::google::protobuf::int32 value);

  // optional int32 funcid = 1 [default = 12003010];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // optional int32 insert_date = 18 [default = -1];
  bool has_insert_date() const;
  void clear_insert_date();
  static const int kInsertDateFieldNumber = 18;
  ::google::protobuf::int32 insert_date() const;
  void set_insert_date(::google::protobuf::int32 value);

  // optional int32 insert_time = 19 [default = -1];
  bool has_insert_time() const;
  void clear_insert_time();
  static const int kInsertTimeFieldNumber = 19;
  ::google::protobuf::int32 insert_time() const;
  void set_insert_time(::google::protobuf::int32 value);

  // optional int32 active_time = 20 [default = -1];
  bool has_active_time() const;
  void clear_active_time();
  static const int kActiveTimeFieldNumber = 20;
  ::google::protobuf::int32 active_time() const;
  void set_active_time(::google::protobuf::int32 value);

  // optional int32 suspend_time = 21 [default = -1];
  bool has_suspend_time() const;
  void clear_suspend_time();
  static const int kSuspendTimeFieldNumber = 21;
  ::google::protobuf::int32 suspend_time() const;
  void set_suspend_time(::google::protobuf::int32 value);

  // optional int32 update_time = 22 [default = -1];
  bool has_update_time() const;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 22;
  ::google::protobuf::int32 update_time() const;
  void set_update_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.FutureRtnOrder)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_front_id();
  void clear_has_front_id();
  void set_has_session_id();
  void clear_has_session_id();
  void set_has_exchange_id();
  void clear_has_exchange_id();
  void set_has_account_name();
  void clear_has_account_name();
  void set_has_order_group();
  void clear_has_order_group();
  void set_has_code();
  void clear_has_code();
  void set_has_order_sys_id();
  void clear_has_order_sys_id();
  void set_has_order_submit_status();
  void clear_has_order_submit_status();
  void set_has_order_local_id();
  void clear_has_order_local_id();
  void set_has_order_status();
  void clear_has_order_status();
  void set_has_order_qty();
  void clear_has_order_qty();
  void set_has_match_qty();
  void clear_has_match_qty();
  void set_has_unmatch_qty();
  void clear_has_unmatch_qty();
  void set_has_bsflag();
  void clear_has_bsflag();
  void set_has_hedge_flag();
  void clear_has_hedge_flag();
  void set_has_kpcbj();
  void clear_has_kpcbj();
  void set_has_insert_date();
  void clear_has_insert_date();
  void set_has_insert_time();
  void clear_has_insert_time();
  void set_has_active_time();
  void clear_has_active_time();
  void set_has_suspend_time();
  void clear_has_suspend_time();
  void set_has_update_time();
  void clear_has_update_time();
  void set_has_cancel_time();
  void clear_has_cancel_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr exchange_id_;
  ::google::protobuf::internal::ArenaStringPtr account_name_;
  ::google::protobuf::internal::ArenaStringPtr order_group_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr order_sys_id_;
  ::google::protobuf::internal::ArenaStringPtr order_submit_status_;
  ::google::protobuf::internal::ArenaStringPtr order_local_id_;
  ::google::protobuf::internal::ArenaStringPtr order_status_;
  ::google::protobuf::int32 front_id_;
  ::google::protobuf::int32 session_id_;
  ::google::protobuf::int64 order_qty_;
  ::google::protobuf::int64 match_qty_;
  ::google::protobuf::int64 unmatch_qty_;
  ::google::protobuf::int32 bsflag_;
  ::google::protobuf::int32 hedge_flag_;
  ::google::protobuf::int32 kpcbj_;
  ::google::protobuf::int32 cancel_time_;
  ::google::protobuf::int32 funcid_;
  ::google::protobuf::int32 insert_date_;
  ::google::protobuf::int32 insert_time_;
  ::google::protobuf::int32 active_time_;
  ::google::protobuf::int32 suspend_time_;
  ::google::protobuf::int32 update_time_;
  friend struct ::protobuf_protos_2fqfuture_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FutureRtnTrade : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.FutureRtnTrade) */ {
 public:
  FutureRtnTrade();
  virtual ~FutureRtnTrade();

  FutureRtnTrade(const FutureRtnTrade& from);

  inline FutureRtnTrade& operator=(const FutureRtnTrade& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FutureRtnTrade(FutureRtnTrade&& from) noexcept
    : FutureRtnTrade() {
    *this = ::std::move(from);
  }

  inline FutureRtnTrade& operator=(FutureRtnTrade&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FutureRtnTrade& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FutureRtnTrade* internal_default_instance() {
    return reinterpret_cast<const FutureRtnTrade*>(
               &_FutureRtnTrade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(FutureRtnTrade* other);
  friend void swap(FutureRtnTrade& a, FutureRtnTrade& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FutureRtnTrade* New() const final {
    return CreateMaybeMessage<FutureRtnTrade>(NULL);
  }

  FutureRtnTrade* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FutureRtnTrade>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FutureRtnTrade& from);
  void MergeFrom(const FutureRtnTrade& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FutureRtnTrade* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string exchange_id = 4;
  bool has_exchange_id() const;
  void clear_exchange_id();
  static const int kExchangeIdFieldNumber = 4;
  const ::std::string& exchange_id() const;
  void set_exchange_id(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange_id(::std::string&& value);
  #endif
  void set_exchange_id(const char* value);
  void set_exchange_id(const char* value, size_t size);
  ::std::string* mutable_exchange_id();
  ::std::string* release_exchange_id();
  void set_allocated_exchange_id(::std::string* exchange_id);

  // optional string account_name = 5;
  bool has_account_name() const;
  void clear_account_name();
  static const int kAccountNameFieldNumber = 5;
  const ::std::string& account_name() const;
  void set_account_name(const ::std::string& value);
  #if LANG_CXX11
  void set_account_name(::std::string&& value);
  #endif
  void set_account_name(const char* value);
  void set_account_name(const char* value, size_t size);
  ::std::string* mutable_account_name();
  ::std::string* release_account_name();
  void set_allocated_account_name(::std::string* account_name);

  // optional string order_group = 6;
  bool has_order_group() const;
  void clear_order_group();
  static const int kOrderGroupFieldNumber = 6;
  const ::std::string& order_group() const;
  void set_order_group(const ::std::string& value);
  #if LANG_CXX11
  void set_order_group(::std::string&& value);
  #endif
  void set_order_group(const char* value);
  void set_order_group(const char* value, size_t size);
  ::std::string* mutable_order_group();
  ::std::string* release_order_group();
  void set_allocated_order_group(::std::string* order_group);

  // optional string code = 7;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 7;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string match_id = 8;
  bool has_match_id() const;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 8;
  const ::std::string& match_id() const;
  void set_match_id(const ::std::string& value);
  #if LANG_CXX11
  void set_match_id(::std::string&& value);
  #endif
  void set_match_id(const char* value);
  void set_match_id(const char* value, size_t size);
  ::std::string* mutable_match_id();
  ::std::string* release_match_id();
  void set_allocated_match_id(::std::string* match_id);

  // optional string order_sys_id = 16;
  bool has_order_sys_id() const;
  void clear_order_sys_id();
  static const int kOrderSysIdFieldNumber = 16;
  const ::std::string& order_sys_id() const;
  void set_order_sys_id(const ::std::string& value);
  #if LANG_CXX11
  void set_order_sys_id(::std::string&& value);
  #endif
  void set_order_sys_id(const char* value);
  void set_order_sys_id(const char* value, size_t size);
  ::std::string* mutable_order_sys_id();
  ::std::string* release_order_sys_id();
  void set_allocated_order_sys_id(::std::string* order_sys_id);

  // optional int32 front_id = 2;
  bool has_front_id() const;
  void clear_front_id();
  static const int kFrontIdFieldNumber = 2;
  ::google::protobuf::int32 front_id() const;
  void set_front_id(::google::protobuf::int32 value);

  // optional int32 session_id = 3;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  ::google::protobuf::int32 session_id() const;
  void set_session_id(::google::protobuf::int32 value);

  // optional int64 match_qty = 9;
  bool has_match_qty() const;
  void clear_match_qty();
  static const int kMatchQtyFieldNumber = 9;
  ::google::protobuf::int64 match_qty() const;
  void set_match_qty(::google::protobuf::int64 value);

  // optional double match_amt = 10;
  bool has_match_amt() const;
  void clear_match_amt();
  static const int kMatchAmtFieldNumber = 10;
  double match_amt() const;
  void set_match_amt(double value);

  // optional int32 bsflag = 11;
  bool has_bsflag() const;
  void clear_bsflag();
  static const int kBsflagFieldNumber = 11;
  ::google::protobuf::int32 bsflag() const;
  void set_bsflag(::google::protobuf::int32 value);

  // optional int32 kpcbj = 12;
  bool has_kpcbj() const;
  void clear_kpcbj();
  static const int kKpcbjFieldNumber = 12;
  ::google::protobuf::int32 kpcbj() const;
  void set_kpcbj(::google::protobuf::int32 value);

  // optional int64 stamp = 14;
  bool has_stamp() const;
  void clear_stamp();
  static const int kStampFieldNumber = 14;
  ::google::protobuf::int64 stamp() const;
  void set_stamp(::google::protobuf::int64 value);

  // optional int64 match_price = 15;
  bool has_match_price() const;
  void clear_match_price();
  static const int kMatchPriceFieldNumber = 15;
  ::google::protobuf::int64 match_price() const;
  void set_match_price(::google::protobuf::int64 value);

  // optional int32 hedge_flag = 13;
  bool has_hedge_flag() const;
  void clear_hedge_flag();
  static const int kHedgeFlagFieldNumber = 13;
  ::google::protobuf::int32 hedge_flag() const;
  void set_hedge_flag(::google::protobuf::int32 value);

  // optional int32 funcid = 1 [default = 12003011];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.FutureRtnTrade)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_front_id();
  void clear_has_front_id();
  void set_has_session_id();
  void clear_has_session_id();
  void set_has_exchange_id();
  void clear_has_exchange_id();
  void set_has_account_name();
  void clear_has_account_name();
  void set_has_order_group();
  void clear_has_order_group();
  void set_has_code();
  void clear_has_code();
  void set_has_match_id();
  void clear_has_match_id();
  void set_has_match_qty();
  void clear_has_match_qty();
  void set_has_match_amt();
  void clear_has_match_amt();
  void set_has_bsflag();
  void clear_has_bsflag();
  void set_has_kpcbj();
  void clear_has_kpcbj();
  void set_has_hedge_flag();
  void clear_has_hedge_flag();
  void set_has_stamp();
  void clear_has_stamp();
  void set_has_match_price();
  void clear_has_match_price();
  void set_has_order_sys_id();
  void clear_has_order_sys_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr exchange_id_;
  ::google::protobuf::internal::ArenaStringPtr account_name_;
  ::google::protobuf::internal::ArenaStringPtr order_group_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr match_id_;
  ::google::protobuf::internal::ArenaStringPtr order_sys_id_;
  ::google::protobuf::int32 front_id_;
  ::google::protobuf::int32 session_id_;
  ::google::protobuf::int64 match_qty_;
  double match_amt_;
  ::google::protobuf::int32 bsflag_;
  ::google::protobuf::int32 kpcbj_;
  ::google::protobuf::int64 stamp_;
  ::google::protobuf::int64 match_price_;
  ::google::protobuf::int32 hedge_flag_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqfuture_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InnerQueryOrderReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.InnerQueryOrderReqt) */ {
 public:
  InnerQueryOrderReqt();
  virtual ~InnerQueryOrderReqt();

  InnerQueryOrderReqt(const InnerQueryOrderReqt& from);

  inline InnerQueryOrderReqt& operator=(const InnerQueryOrderReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InnerQueryOrderReqt(InnerQueryOrderReqt&& from) noexcept
    : InnerQueryOrderReqt() {
    *this = ::std::move(from);
  }

  inline InnerQueryOrderReqt& operator=(InnerQueryOrderReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InnerQueryOrderReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InnerQueryOrderReqt* internal_default_instance() {
    return reinterpret_cast<const InnerQueryOrderReqt*>(
               &_InnerQueryOrderReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(InnerQueryOrderReqt* other);
  friend void swap(InnerQueryOrderReqt& a, InnerQueryOrderReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InnerQueryOrderReqt* New() const final {
    return CreateMaybeMessage<InnerQueryOrderReqt>(NULL);
  }

  InnerQueryOrderReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InnerQueryOrderReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InnerQueryOrderReqt& from);
  void MergeFrom(const InnerQueryOrderReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerQueryOrderReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string broker_id = 2;
  bool has_broker_id() const;
  void clear_broker_id();
  static const int kBrokerIdFieldNumber = 2;
  const ::std::string& broker_id() const;
  void set_broker_id(const ::std::string& value);
  #if LANG_CXX11
  void set_broker_id(::std::string&& value);
  #endif
  void set_broker_id(const char* value);
  void set_broker_id(const char* value, size_t size);
  ::std::string* mutable_broker_id();
  ::std::string* release_broker_id();
  void set_allocated_broker_id(::std::string* broker_id);

  // optional string future_account = 3;
  bool has_future_account() const;
  void clear_future_account();
  static const int kFutureAccountFieldNumber = 3;
  const ::std::string& future_account() const;
  void set_future_account(const ::std::string& value);
  #if LANG_CXX11
  void set_future_account(::std::string&& value);
  #endif
  void set_future_account(const char* value);
  void set_future_account(const char* value, size_t size);
  ::std::string* mutable_future_account();
  ::std::string* release_future_account();
  void set_allocated_future_account(::std::string* future_account);

  // optional string exchange_id = 4;
  bool has_exchange_id() const;
  void clear_exchange_id();
  static const int kExchangeIdFieldNumber = 4;
  const ::std::string& exchange_id() const;
  void set_exchange_id(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange_id(::std::string&& value);
  #endif
  void set_exchange_id(const char* value);
  void set_exchange_id(const char* value, size_t size);
  ::std::string* mutable_exchange_id();
  ::std::string* release_exchange_id();
  void set_allocated_exchange_id(::std::string* exchange_id);

  // optional string order_sys_id = 5;
  bool has_order_sys_id() const;
  void clear_order_sys_id();
  static const int kOrderSysIdFieldNumber = 5;
  const ::std::string& order_sys_id() const;
  void set_order_sys_id(const ::std::string& value);
  #if LANG_CXX11
  void set_order_sys_id(::std::string&& value);
  #endif
  void set_order_sys_id(const char* value);
  void set_order_sys_id(const char* value, size_t size);
  ::std::string* mutable_order_sys_id();
  ::std::string* release_order_sys_id();
  void set_allocated_order_sys_id(::std::string* order_sys_id);

  // optional string insert_time_start = 6;
  bool has_insert_time_start() const;
  void clear_insert_time_start();
  static const int kInsertTimeStartFieldNumber = 6;
  const ::std::string& insert_time_start() const;
  void set_insert_time_start(const ::std::string& value);
  #if LANG_CXX11
  void set_insert_time_start(::std::string&& value);
  #endif
  void set_insert_time_start(const char* value);
  void set_insert_time_start(const char* value, size_t size);
  ::std::string* mutable_insert_time_start();
  ::std::string* release_insert_time_start();
  void set_allocated_insert_time_start(::std::string* insert_time_start);

  // optional string insert_time_end = 7;
  bool has_insert_time_end() const;
  void clear_insert_time_end();
  static const int kInsertTimeEndFieldNumber = 7;
  const ::std::string& insert_time_end() const;
  void set_insert_time_end(const ::std::string& value);
  #if LANG_CXX11
  void set_insert_time_end(::std::string&& value);
  #endif
  void set_insert_time_end(const char* value);
  void set_insert_time_end(const char* value, size_t size);
  ::std::string* mutable_insert_time_end();
  ::std::string* release_insert_time_end();
  void set_allocated_insert_time_end(::std::string* insert_time_end);

  // optional int32 funcid = 1 [default = 12003012];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.InnerQueryOrderReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_broker_id();
  void clear_has_broker_id();
  void set_has_future_account();
  void clear_has_future_account();
  void set_has_exchange_id();
  void clear_has_exchange_id();
  void set_has_order_sys_id();
  void clear_has_order_sys_id();
  void set_has_insert_time_start();
  void clear_has_insert_time_start();
  void set_has_insert_time_end();
  void clear_has_insert_time_end();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr broker_id_;
  ::google::protobuf::internal::ArenaStringPtr future_account_;
  ::google::protobuf::internal::ArenaStringPtr exchange_id_;
  ::google::protobuf::internal::ArenaStringPtr order_sys_id_;
  ::google::protobuf::internal::ArenaStringPtr insert_time_start_;
  ::google::protobuf::internal::ArenaStringPtr insert_time_end_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqfuture_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InnerFutureQueryOrderResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.InnerFutureQueryOrderResp) */ {
 public:
  InnerFutureQueryOrderResp();
  virtual ~InnerFutureQueryOrderResp();

  InnerFutureQueryOrderResp(const InnerFutureQueryOrderResp& from);

  inline InnerFutureQueryOrderResp& operator=(const InnerFutureQueryOrderResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InnerFutureQueryOrderResp(InnerFutureQueryOrderResp&& from) noexcept
    : InnerFutureQueryOrderResp() {
    *this = ::std::move(from);
  }

  inline InnerFutureQueryOrderResp& operator=(InnerFutureQueryOrderResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InnerFutureQueryOrderResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InnerFutureQueryOrderResp* internal_default_instance() {
    return reinterpret_cast<const InnerFutureQueryOrderResp*>(
               &_InnerFutureQueryOrderResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(InnerFutureQueryOrderResp* other);
  friend void swap(InnerFutureQueryOrderResp& a, InnerFutureQueryOrderResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InnerFutureQueryOrderResp* New() const final {
    return CreateMaybeMessage<InnerFutureQueryOrderResp>(NULL);
  }

  InnerFutureQueryOrderResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InnerFutureQueryOrderResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InnerFutureQueryOrderResp& from);
  void MergeFrom(const InnerFutureQueryOrderResp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerFutureQueryOrderResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string broker_id = 2;
  bool has_broker_id() const;
  void clear_broker_id();
  static const int kBrokerIdFieldNumber = 2;
  const ::std::string& broker_id() const;
  void set_broker_id(const ::std::string& value);
  #if LANG_CXX11
  void set_broker_id(::std::string&& value);
  #endif
  void set_broker_id(const char* value);
  void set_broker_id(const char* value, size_t size);
  ::std::string* mutable_broker_id();
  ::std::string* release_broker_id();
  void set_allocated_broker_id(::std::string* broker_id);

  // optional string future_account = 3;
  bool has_future_account() const;
  void clear_future_account();
  static const int kFutureAccountFieldNumber = 3;
  const ::std::string& future_account() const;
  void set_future_account(const ::std::string& value);
  #if LANG_CXX11
  void set_future_account(::std::string&& value);
  #endif
  void set_future_account(const char* value);
  void set_future_account(const char* value, size_t size);
  ::std::string* mutable_future_account();
  ::std::string* release_future_account();
  void set_allocated_future_account(::std::string* future_account);

  // optional string request_id = 4;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 4;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional string ret_message = 8;
  bool has_ret_message() const;
  void clear_ret_message();
  static const int kRetMessageFieldNumber = 8;
  const ::std::string& ret_message() const;
  void set_ret_message(const ::std::string& value);
  #if LANG_CXX11
  void set_ret_message(::std::string&& value);
  #endif
  void set_ret_message(const char* value);
  void set_ret_message(const char* value, size_t size);
  ::std::string* mutable_ret_message();
  ::std::string* release_ret_message();
  void set_allocated_ret_message(::std::string* ret_message);

  // optional string order_group = 10;
  bool has_order_group() const;
  void clear_order_group();
  static const int kOrderGroupFieldNumber = 10;
  const ::std::string& order_group() const;
  void set_order_group(const ::std::string& value);
  #if LANG_CXX11
  void set_order_group(::std::string&& value);
  #endif
  void set_order_group(const char* value);
  void set_order_group(const char* value, size_t size);
  ::std::string* mutable_order_group();
  ::std::string* release_order_group();
  void set_allocated_order_group(::std::string* order_group);

  // optional string user_id = 11;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 11;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // optional string order_local_id = 25;
  bool has_order_local_id() const;
  void clear_order_local_id();
  static const int kOrderLocalIdFieldNumber = 25;
  const ::std::string& order_local_id() const;
  void set_order_local_id(const ::std::string& value);
  #if LANG_CXX11
  void set_order_local_id(::std::string&& value);
  #endif
  void set_order_local_id(const char* value);
  void set_order_local_id(const char* value, size_t size);
  ::std::string* mutable_order_local_id();
  ::std::string* release_order_local_id();
  void set_allocated_order_local_id(::std::string* order_local_id);

  // optional string exchange_id = 26;
  bool has_exchange_id() const;
  void clear_exchange_id();
  static const int kExchangeIdFieldNumber = 26;
  const ::std::string& exchange_id() const;
  void set_exchange_id(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange_id(::std::string&& value);
  #endif
  void set_exchange_id(const char* value);
  void set_exchange_id(const char* value, size_t size);
  ::std::string* mutable_exchange_id();
  ::std::string* release_exchange_id();
  void set_allocated_exchange_id(::std::string* exchange_id);

  // optional string participant_id = 27;
  bool has_participant_id() const;
  void clear_participant_id();
  static const int kParticipantIdFieldNumber = 27;
  const ::std::string& participant_id() const;
  void set_participant_id(const ::std::string& value);
  #if LANG_CXX11
  void set_participant_id(::std::string&& value);
  #endif
  void set_participant_id(const char* value);
  void set_participant_id(const char* value, size_t size);
  ::std::string* mutable_participant_id();
  ::std::string* release_participant_id();
  void set_allocated_participant_id(::std::string* participant_id);

  // optional string client_id = 28;
  bool has_client_id() const;
  void clear_client_id();
  static const int kClientIdFieldNumber = 28;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  #if LANG_CXX11
  void set_client_id(::std::string&& value);
  #endif
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);

  // optional string order_submit_status = 29;
  bool has_order_submit_status() const;
  void clear_order_submit_status();
  static const int kOrderSubmitStatusFieldNumber = 29;
  const ::std::string& order_submit_status() const;
  void set_order_submit_status(const ::std::string& value);
  #if LANG_CXX11
  void set_order_submit_status(::std::string&& value);
  #endif
  void set_order_submit_status(const char* value);
  void set_order_submit_status(const char* value, size_t size);
  ::std::string* mutable_order_submit_status();
  ::std::string* release_order_submit_status();
  void set_allocated_order_submit_status(::std::string* order_submit_status);

  // optional string trading_day = 30;
  bool has_trading_day() const;
  void clear_trading_day();
  static const int kTradingDayFieldNumber = 30;
  const ::std::string& trading_day() const;
  void set_trading_day(const ::std::string& value);
  #if LANG_CXX11
  void set_trading_day(::std::string&& value);
  #endif
  void set_trading_day(const char* value);
  void set_trading_day(const char* value, size_t size);
  ::std::string* mutable_trading_day();
  ::std::string* release_trading_day();
  void set_allocated_trading_day(::std::string* trading_day);

  // optional string settlement_id = 31;
  bool has_settlement_id() const;
  void clear_settlement_id();
  static const int kSettlementIdFieldNumber = 31;
  const ::std::string& settlement_id() const;
  void set_settlement_id(const ::std::string& value);
  #if LANG_CXX11
  void set_settlement_id(::std::string&& value);
  #endif
  void set_settlement_id(const char* value);
  void set_settlement_id(const char* value, size_t size);
  ::std::string* mutable_settlement_id();
  ::std::string* release_settlement_id();
  void set_allocated_settlement_id(::std::string* settlement_id);

  // optional string order_sys_id = 32;
  bool has_order_sys_id() const;
  void clear_order_sys_id();
  static const int kOrderSysIdFieldNumber = 32;
  const ::std::string& order_sys_id() const;
  void set_order_sys_id(const ::std::string& value);
  #if LANG_CXX11
  void set_order_sys_id(::std::string&& value);
  #endif
  void set_order_sys_id(const char* value);
  void set_order_sys_id(const char* value, size_t size);
  ::std::string* mutable_order_sys_id();
  ::std::string* release_order_sys_id();
  void set_allocated_order_sys_id(::std::string* order_sys_id);

  // optional string order_source = 33;
  bool has_order_source() const;
  void clear_order_source();
  static const int kOrderSourceFieldNumber = 33;
  const ::std::string& order_source() const;
  void set_order_source(const ::std::string& value);
  #if LANG_CXX11
  void set_order_source(::std::string&& value);
  #endif
  void set_order_source(const char* value);
  void set_order_source(const char* value, size_t size);
  ::std::string* mutable_order_source();
  ::std::string* release_order_source();
  void set_allocated_order_source(::std::string* order_source);

  // optional string order_status = 34;
  bool has_order_status() const;
  void clear_order_status();
  static const int kOrderStatusFieldNumber = 34;
  const ::std::string& order_status() const;
  void set_order_status(const ::std::string& value);
  #if LANG_CXX11
  void set_order_status(::std::string&& value);
  #endif
  void set_order_status(const char* value);
  void set_order_status(const char* value, size_t size);
  ::std::string* mutable_order_status();
  ::std::string* release_order_status();
  void set_allocated_order_status(::std::string* order_status);

  // optional string order_type = 35;
  bool has_order_type() const;
  void clear_order_type();
  static const int kOrderTypeFieldNumber = 35;
  const ::std::string& order_type() const;
  void set_order_type(const ::std::string& value);
  #if LANG_CXX11
  void set_order_type(::std::string&& value);
  #endif
  void set_order_type(const char* value);
  void set_order_type(const char* value, size_t size);
  ::std::string* mutable_order_type();
  ::std::string* release_order_type();
  void set_allocated_order_type(::std::string* order_type);

  // optional string instrument_id = 44;
  bool has_instrument_id() const;
  void clear_instrument_id();
  static const int kInstrumentIdFieldNumber = 44;
  const ::std::string& instrument_id() const;
  void set_instrument_id(const ::std::string& value);
  #if LANG_CXX11
  void set_instrument_id(::std::string&& value);
  #endif
  void set_instrument_id(const char* value);
  void set_instrument_id(const char* value, size_t size);
  ::std::string* mutable_instrument_id();
  ::std::string* release_instrument_id();
  void set_allocated_instrument_id(::std::string* instrument_id);

  // optional int32 front_id = 5;
  bool has_front_id() const;
  void clear_front_id();
  static const int kFrontIdFieldNumber = 5;
  ::google::protobuf::int32 front_id() const;
  void set_front_id(::google::protobuf::int32 value);

  // optional int32 session_id = 6;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 6;
  ::google::protobuf::int32 session_id() const;
  void set_session_id(::google::protobuf::int32 value);

  // optional int32 ret_code = 7 [default = 0];
  bool has_ret_code() const;
  void clear_ret_code();
  static const int kRetCodeFieldNumber = 7;
  ::google::protobuf::int32 ret_code() const;
  void set_ret_code(::google::protobuf::int32 value);

  // optional bool islast = 9 [default = false];
  bool has_islast() const;
  void clear_islast();
  static const int kIslastFieldNumber = 9;
  bool islast() const;
  void set_islast(bool value);

  // optional int32 order_price_type = 12;
  bool has_order_price_type() const;
  void clear_order_price_type();
  static const int kOrderPriceTypeFieldNumber = 12;
  ::google::protobuf::int32 order_price_type() const;
  void set_order_price_type(::google::protobuf::int32 value);

  // optional int32 bsflag = 13;
  bool has_bsflag() const;
  void clear_bsflag();
  static const int kBsflagFieldNumber = 13;
  ::google::protobuf::int32 bsflag() const;
  void set_bsflag(::google::protobuf::int32 value);

  // optional int32 kpcbj = 14;
  bool has_kpcbj() const;
  void clear_kpcbj();
  static const int kKpcbjFieldNumber = 14;
  ::google::protobuf::int32 kpcbj() const;
  void set_kpcbj(::google::protobuf::int32 value);

  // optional int32 hedge_flag = 15;
  bool has_hedge_flag() const;
  void clear_hedge_flag();
  static const int kHedgeFlagFieldNumber = 15;
  ::google::protobuf::int32 hedge_flag() const;
  void set_hedge_flag(::google::protobuf::int32 value);

  // optional int64 order_price = 16;
  bool has_order_price() const;
  void clear_order_price();
  static const int kOrderPriceFieldNumber = 16;
  ::google::protobuf::int64 order_price() const;
  void set_order_price(::google::protobuf::int64 value);

  // optional int32 order_qty = 17;
  bool has_order_qty() const;
  void clear_order_qty();
  static const int kOrderQtyFieldNumber = 17;
  ::google::protobuf::int32 order_qty() const;
  void set_order_qty(::google::protobuf::int32 value);

  // optional int32 time_condition = 18;
  bool has_time_condition() const;
  void clear_time_condition();
  static const int kTimeConditionFieldNumber = 18;
  ::google::protobuf::int32 time_condition() const;
  void set_time_condition(::google::protobuf::int32 value);

  // optional int32 order_date = 19;
  bool has_order_date() const;
  void clear_order_date();
  static const int kOrderDateFieldNumber = 19;
  ::google::protobuf::int32 order_date() const;
  void set_order_date(::google::protobuf::int32 value);

  // optional int32 volume_condition = 20;
  bool has_volume_condition() const;
  void clear_volume_condition();
  static const int kVolumeConditionFieldNumber = 20;
  ::google::protobuf::int32 volume_condition() const;
  void set_volume_condition(::google::protobuf::int32 value);

  // optional int32 min_match_volume = 21;
  bool has_min_match_volume() const;
  void clear_min_match_volume();
  static const int kMinMatchVolumeFieldNumber = 21;
  ::google::protobuf::int32 min_match_volume() const;
  void set_min_match_volume(::google::protobuf::int32 value);

  // optional int32 contingent_condition = 22;
  bool has_contingent_condition() const;
  void clear_contingent_condition();
  static const int kContingentConditionFieldNumber = 22;
  ::google::protobuf::int32 contingent_condition() const;
  void set_contingent_condition(::google::protobuf::int32 value);

  // optional int64 stop_price = 23;
  bool has_stop_price() const;
  void clear_stop_price();
  static const int kStopPriceFieldNumber = 23;
  ::google::protobuf::int64 stop_price() const;
  void set_stop_price(::google::protobuf::int64 value);

  // optional int32 force_close_reason = 24;
  bool has_force_close_reason() const;
  void clear_force_close_reason();
  static const int kForceCloseReasonFieldNumber = 24;
  ::google::protobuf::int32 force_close_reason() const;
  void set_force_close_reason(::google::protobuf::int32 value);

  // optional int32 match_qty = 36;
  bool has_match_qty() const;
  void clear_match_qty();
  static const int kMatchQtyFieldNumber = 36;
  ::google::protobuf::int32 match_qty() const;
  void set_match_qty(::google::protobuf::int32 value);

  // optional int32 remain_qty = 37;
  bool has_remain_qty() const;
  void clear_remain_qty();
  static const int kRemainQtyFieldNumber = 37;
  ::google::protobuf::int32 remain_qty() const;
  void set_remain_qty(::google::protobuf::int32 value);

  // optional int32 cancel_time = 43 [default = -1];
  bool has_cancel_time() const;
  void clear_cancel_time();
  static const int kCancelTimeFieldNumber = 43;
  ::google::protobuf::int32 cancel_time() const;
  void set_cancel_time(::google::protobuf::int32 value);

  // optional int32 funcid = 1 [default = 12103012];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // optional int32 insert_date = 38 [default = -1];
  bool has_insert_date() const;
  void clear_insert_date();
  static const int kInsertDateFieldNumber = 38;
  ::google::protobuf::int32 insert_date() const;
  void set_insert_date(::google::protobuf::int32 value);

  // optional int32 insert_time = 39 [default = -1];
  bool has_insert_time() const;
  void clear_insert_time();
  static const int kInsertTimeFieldNumber = 39;
  ::google::protobuf::int32 insert_time() const;
  void set_insert_time(::google::protobuf::int32 value);

  // optional int32 active_time = 40 [default = -1];
  bool has_active_time() const;
  void clear_active_time();
  static const int kActiveTimeFieldNumber = 40;
  ::google::protobuf::int32 active_time() const;
  void set_active_time(::google::protobuf::int32 value);

  // optional int32 suspend_time = 41 [default = -1];
  bool has_suspend_time() const;
  void clear_suspend_time();
  static const int kSuspendTimeFieldNumber = 41;
  ::google::protobuf::int32 suspend_time() const;
  void set_suspend_time(::google::protobuf::int32 value);

  // optional int32 update_time = 42 [default = -1];
  bool has_update_time() const;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 42;
  ::google::protobuf::int32 update_time() const;
  void set_update_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.InnerFutureQueryOrderResp)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_broker_id();
  void clear_has_broker_id();
  void set_has_future_account();
  void clear_has_future_account();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_front_id();
  void clear_has_front_id();
  void set_has_session_id();
  void clear_has_session_id();
  void set_has_ret_code();
  void clear_has_ret_code();
  void set_has_ret_message();
  void clear_has_ret_message();
  void set_has_islast();
  void clear_has_islast();
  void set_has_order_group();
  void clear_has_order_group();
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_order_price_type();
  void clear_has_order_price_type();
  void set_has_bsflag();
  void clear_has_bsflag();
  void set_has_kpcbj();
  void clear_has_kpcbj();
  void set_has_hedge_flag();
  void clear_has_hedge_flag();
  void set_has_order_price();
  void clear_has_order_price();
  void set_has_order_qty();
  void clear_has_order_qty();
  void set_has_time_condition();
  void clear_has_time_condition();
  void set_has_order_date();
  void clear_has_order_date();
  void set_has_volume_condition();
  void clear_has_volume_condition();
  void set_has_min_match_volume();
  void clear_has_min_match_volume();
  void set_has_contingent_condition();
  void clear_has_contingent_condition();
  void set_has_stop_price();
  void clear_has_stop_price();
  void set_has_force_close_reason();
  void clear_has_force_close_reason();
  void set_has_order_local_id();
  void clear_has_order_local_id();
  void set_has_exchange_id();
  void clear_has_exchange_id();
  void set_has_participant_id();
  void clear_has_participant_id();
  void set_has_client_id();
  void clear_has_client_id();
  void set_has_order_submit_status();
  void clear_has_order_submit_status();
  void set_has_trading_day();
  void clear_has_trading_day();
  void set_has_settlement_id();
  void clear_has_settlement_id();
  void set_has_order_sys_id();
  void clear_has_order_sys_id();
  void set_has_order_source();
  void clear_has_order_source();
  void set_has_order_status();
  void clear_has_order_status();
  void set_has_order_type();
  void clear_has_order_type();
  void set_has_match_qty();
  void clear_has_match_qty();
  void set_has_remain_qty();
  void clear_has_remain_qty();
  void set_has_insert_date();
  void clear_has_insert_date();
  void set_has_insert_time();
  void clear_has_insert_time();
  void set_has_active_time();
  void clear_has_active_time();
  void set_has_suspend_time();
  void clear_has_suspend_time();
  void set_has_update_time();
  void clear_has_update_time();
  void set_has_cancel_time();
  void clear_has_cancel_time();
  void set_has_instrument_id();
  void clear_has_instrument_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::internal::ArenaStringPtr broker_id_;
  ::google::protobuf::internal::ArenaStringPtr future_account_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr ret_message_;
  ::google::protobuf::internal::ArenaStringPtr order_group_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr order_local_id_;
  ::google::protobuf::internal::ArenaStringPtr exchange_id_;
  ::google::protobuf::internal::ArenaStringPtr participant_id_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::google::protobuf::internal::ArenaStringPtr order_submit_status_;
  ::google::protobuf::internal::ArenaStringPtr trading_day_;
  ::google::protobuf::internal::ArenaStringPtr settlement_id_;
  ::google::protobuf::internal::ArenaStringPtr order_sys_id_;
  ::google::protobuf::internal::ArenaStringPtr order_source_;
  ::google::protobuf::internal::ArenaStringPtr order_status_;
  ::google::protobuf::internal::ArenaStringPtr order_type_;
  ::google::protobuf::internal::ArenaStringPtr instrument_id_;
  ::google::protobuf::int32 front_id_;
  ::google::protobuf::int32 session_id_;
  ::google::protobuf::int32 ret_code_;
  bool islast_;
  ::google::protobuf::int32 order_price_type_;
  ::google::protobuf::int32 bsflag_;
  ::google::protobuf::int32 kpcbj_;
  ::google::protobuf::int32 hedge_flag_;
  ::google::protobuf::int64 order_price_;
  ::google::protobuf::int32 order_qty_;
  ::google::protobuf::int32 time_condition_;
  ::google::protobuf::int32 order_date_;
  ::google::protobuf::int32 volume_condition_;
  ::google::protobuf::int32 min_match_volume_;
  ::google::protobuf::int32 contingent_condition_;
  ::google::protobuf::int64 stop_price_;
  ::google::protobuf::int32 force_close_reason_;
  ::google::protobuf::int32 match_qty_;
  ::google::protobuf::int32 remain_qty_;
  ::google::protobuf::int32 cancel_time_;
  ::google::protobuf::int32 funcid_;
  ::google::protobuf::int32 insert_date_;
  ::google::protobuf::int32 insert_time_;
  ::google::protobuf::int32 active_time_;
  ::google::protobuf::int32 suspend_time_;
  ::google::protobuf::int32 update_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protos_2fqfuture_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InnerQueryTradeReqt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.InnerQueryTradeReqt) */ {
 public:
  InnerQueryTradeReqt();
  virtual ~InnerQueryTradeReqt();

  InnerQueryTradeReqt(const InnerQueryTradeReqt& from);

  inline InnerQueryTradeReqt& operator=(const InnerQueryTradeReqt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InnerQueryTradeReqt(InnerQueryTradeReqt&& from) noexcept
    : InnerQueryTradeReqt() {
    *this = ::std::move(from);
  }

  inline InnerQueryTradeReqt& operator=(InnerQueryTradeReqt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InnerQueryTradeReqt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InnerQueryTradeReqt* internal_default_instance() {
    return reinterpret_cast<const InnerQueryTradeReqt*>(
               &_InnerQueryTradeReqt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(InnerQueryTradeReqt* other);
  friend void swap(InnerQueryTradeReqt& a, InnerQueryTradeReqt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InnerQueryTradeReqt* New() const final {
    return CreateMaybeMessage<InnerQueryTradeReqt>(NULL);
  }

  InnerQueryTradeReqt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InnerQueryTradeReqt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InnerQueryTradeReqt& from);
  void MergeFrom(const InnerQueryTradeReqt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerQueryTradeReqt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string broker_id = 2;
  bool has_broker_id() const;
  void clear_broker_id();
  static const int kBrokerIdFieldNumber = 2;
  const ::std::string& broker_id() const;
  void set_broker_id(const ::std::string& value);
  #if LANG_CXX11
  void set_broker_id(::std::string&& value);
  #endif
  void set_broker_id(const char* value);
  void set_broker_id(const char* value, size_t size);
  ::std::string* mutable_broker_id();
  ::std::string* release_broker_id();
  void set_allocated_broker_id(::std::string* broker_id);

  // optional string future_account = 3;
  bool has_future_account() const;
  void clear_future_account();
  static const int kFutureAccountFieldNumber = 3;
  const ::std::string& future_account() const;
  void set_future_account(const ::std::string& value);
  #if LANG_CXX11
  void set_future_account(::std::string&& value);
  #endif
  void set_future_account(const char* value);
  void set_future_account(const char* value, size_t size);
  ::std::string* mutable_future_account();
  ::std::string* release_future_account();
  void set_allocated_future_account(::std::string* future_account);

  // optional string instrument_id = 4;
  bool has_instrument_id() const;
  void clear_instrument_id();
  static const int kInstrumentIdFieldNumber = 4;
  const ::std::string& instrument_id() const;
  void set_instrument_id(const ::std::string& value);
  #if LANG_CXX11
  void set_instrument_id(::std::string&& value);
  #endif
  void set_instrument_id(const char* value);
  void set_instrument_id(const char* value, size_t size);
  ::std::string* mutable_instrument_id();
  ::std::string* release_instrument_id();
  void set_allocated_instrument_id(::std::string* instrument_id);

  // optional string exchange_id = 5;
  bool has_exchange_id() const;
  void clear_exchange_id();
  static const int kExchangeIdFieldNumber = 5;
  const ::std::string& exchange_id() const;
  void set_exchange_id(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange_id(::std::string&& value);
  #endif
  void set_exchange_id(const char* value);
  void set_exchange_id(const char* value, size_t size);
  ::std::string* mutable_exchange_id();
  ::std::string* release_exchange_id();
  void set_allocated_exchange_id(::std::string* exchange_id);

  // optional string order_sys_id = 6;
  bool has_order_sys_id() const;
  void clear_order_sys_id();
  static const int kOrderSysIdFieldNumber = 6;
  const ::std::string& order_sys_id() const;
  void set_order_sys_id(const ::std::string& value);
  #if LANG_CXX11
  void set_order_sys_id(::std::string&& value);
  #endif
  void set_order_sys_id(const char* value);
  void set_order_sys_id(const char* value, size_t size);
  ::std::string* mutable_order_sys_id();
  ::std::string* release_order_sys_id();
  void set_allocated_order_sys_id(::std::string* order_sys_id);

  // optional string insert_time_start = 7;
  bool has_insert_time_start() const;
  void clear_insert_time_start();
  static const int kInsertTimeStartFieldNumber = 7;
  const ::std::string& insert_time_start() const;
  void set_insert_time_start(const ::std::string& value);
  #if LANG_CXX11
  void set_insert_time_start(::std::string&& value);
  #endif
  void set_insert_time_start(const char* value);
  void set_insert_time_start(const char* value, size_t size);
  ::std::string* mutable_insert_time_start();
  ::std::string* release_insert_time_start();
  void set_allocated_insert_time_start(::std::string* insert_time_start);

  // optional string insert_time_end = 8;
  bool has_insert_time_end() const;
  void clear_insert_time_end();
  static const int kInsertTimeEndFieldNumber = 8;
  const ::std::string& insert_time_end() const;
  void set_insert_time_end(const ::std::string& value);
  #if LANG_CXX11
  void set_insert_time_end(::std::string&& value);
  #endif
  void set_insert_time_end(const char* value);
  void set_insert_time_end(const char* value, size_t size);
  ::std::string* mutable_insert_time_end();
  ::std::string* release_insert_time_end();
  void set_allocated_insert_time_end(::std::string* insert_time_end);

  // optional int32 funcid = 1 [default = 12003013];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.InnerQueryTradeReqt)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_broker_id();
  void clear_has_broker_id();
  void set_has_future_account();
  void clear_has_future_account();
  void set_has_instrument_id();
  void clear_has_instrument_id();
  void set_has_exchange_id();
  void clear_has_exchange_id();
  void set_has_order_sys_id();
  void clear_has_order_sys_id();
  void set_has_insert_time_start();
  void clear_has_insert_time_start();
  void set_has_insert_time_end();
  void clear_has_insert_time_end();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr broker_id_;
  ::google::protobuf::internal::ArenaStringPtr future_account_;
  ::google::protobuf::internal::ArenaStringPtr instrument_id_;
  ::google::protobuf::internal::ArenaStringPtr exchange_id_;
  ::google::protobuf::internal::ArenaStringPtr order_sys_id_;
  ::google::protobuf::internal::ArenaStringPtr insert_time_start_;
  ::google::protobuf::internal::ArenaStringPtr insert_time_end_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqfuture_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InnerFutureQueryTradeResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autotrade.InnerFutureQueryTradeResp) */ {
 public:
  InnerFutureQueryTradeResp();
  virtual ~InnerFutureQueryTradeResp();

  InnerFutureQueryTradeResp(const InnerFutureQueryTradeResp& from);

  inline InnerFutureQueryTradeResp& operator=(const InnerFutureQueryTradeResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InnerFutureQueryTradeResp(InnerFutureQueryTradeResp&& from) noexcept
    : InnerFutureQueryTradeResp() {
    *this = ::std::move(from);
  }

  inline InnerFutureQueryTradeResp& operator=(InnerFutureQueryTradeResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InnerFutureQueryTradeResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InnerFutureQueryTradeResp* internal_default_instance() {
    return reinterpret_cast<const InnerFutureQueryTradeResp*>(
               &_InnerFutureQueryTradeResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(InnerFutureQueryTradeResp* other);
  friend void swap(InnerFutureQueryTradeResp& a, InnerFutureQueryTradeResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InnerFutureQueryTradeResp* New() const final {
    return CreateMaybeMessage<InnerFutureQueryTradeResp>(NULL);
  }

  InnerFutureQueryTradeResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InnerFutureQueryTradeResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InnerFutureQueryTradeResp& from);
  void MergeFrom(const InnerFutureQueryTradeResp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerFutureQueryTradeResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string broker_id = 2;
  bool has_broker_id() const;
  void clear_broker_id();
  static const int kBrokerIdFieldNumber = 2;
  const ::std::string& broker_id() const;
  void set_broker_id(const ::std::string& value);
  #if LANG_CXX11
  void set_broker_id(::std::string&& value);
  #endif
  void set_broker_id(const char* value);
  void set_broker_id(const char* value, size_t size);
  ::std::string* mutable_broker_id();
  ::std::string* release_broker_id();
  void set_allocated_broker_id(::std::string* broker_id);

  // optional string future_account = 3;
  bool has_future_account() const;
  void clear_future_account();
  static const int kFutureAccountFieldNumber = 3;
  const ::std::string& future_account() const;
  void set_future_account(const ::std::string& value);
  #if LANG_CXX11
  void set_future_account(::std::string&& value);
  #endif
  void set_future_account(const char* value);
  void set_future_account(const char* value, size_t size);
  ::std::string* mutable_future_account();
  ::std::string* release_future_account();
  void set_allocated_future_account(::std::string* future_account);

  // optional string instrument_id = 4;
  bool has_instrument_id() const;
  void clear_instrument_id();
  static const int kInstrumentIdFieldNumber = 4;
  const ::std::string& instrument_id() const;
  void set_instrument_id(const ::std::string& value);
  #if LANG_CXX11
  void set_instrument_id(::std::string&& value);
  #endif
  void set_instrument_id(const char* value);
  void set_instrument_id(const char* value, size_t size);
  ::std::string* mutable_instrument_id();
  ::std::string* release_instrument_id();
  void set_allocated_instrument_id(::std::string* instrument_id);

  // optional string order_group = 5;
  bool has_order_group() const;
  void clear_order_group();
  static const int kOrderGroupFieldNumber = 5;
  const ::std::string& order_group() const;
  void set_order_group(const ::std::string& value);
  #if LANG_CXX11
  void set_order_group(::std::string&& value);
  #endif
  void set_order_group(const char* value);
  void set_order_group(const char* value, size_t size);
  ::std::string* mutable_order_group();
  ::std::string* release_order_group();
  void set_allocated_order_group(::std::string* order_group);

  // optional string user_id = 6;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 6;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // optional string exchange_id = 7;
  bool has_exchange_id() const;
  void clear_exchange_id();
  static const int kExchangeIdFieldNumber = 7;
  const ::std::string& exchange_id() const;
  void set_exchange_id(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange_id(::std::string&& value);
  #endif
  void set_exchange_id(const char* value);
  void set_exchange_id(const char* value, size_t size);
  ::std::string* mutable_exchange_id();
  ::std::string* release_exchange_id();
  void set_allocated_exchange_id(::std::string* exchange_id);

  // optional string match_id = 8;
  bool has_match_id() const;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 8;
  const ::std::string& match_id() const;
  void set_match_id(const ::std::string& value);
  #if LANG_CXX11
  void set_match_id(::std::string&& value);
  #endif
  void set_match_id(const char* value);
  void set_match_id(const char* value, size_t size);
  ::std::string* mutable_match_id();
  ::std::string* release_match_id();
  void set_allocated_match_id(::std::string* match_id);

  // optional string order_sys_id = 10;
  bool has_order_sys_id() const;
  void clear_order_sys_id();
  static const int kOrderSysIdFieldNumber = 10;
  const ::std::string& order_sys_id() const;
  void set_order_sys_id(const ::std::string& value);
  #if LANG_CXX11
  void set_order_sys_id(::std::string&& value);
  #endif
  void set_order_sys_id(const char* value);
  void set_order_sys_id(const char* value, size_t size);
  ::std::string* mutable_order_sys_id();
  ::std::string* release_order_sys_id();
  void set_allocated_order_sys_id(::std::string* order_sys_id);

  // optional string exchange_instrument_id = 11;
  bool has_exchange_instrument_id() const;
  void clear_exchange_instrument_id();
  static const int kExchangeInstrumentIdFieldNumber = 11;
  const ::std::string& exchange_instrument_id() const;
  void set_exchange_instrument_id(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange_instrument_id(::std::string&& value);
  #endif
  void set_exchange_instrument_id(const char* value);
  void set_exchange_instrument_id(const char* value, size_t size);
  ::std::string* mutable_exchange_instrument_id();
  ::std::string* release_exchange_instrument_id();
  void set_allocated_exchange_instrument_id(::std::string* exchange_instrument_id);

  // optional string order_local_id = 19;
  bool has_order_local_id() const;
  void clear_order_local_id();
  static const int kOrderLocalIdFieldNumber = 19;
  const ::std::string& order_local_id() const;
  void set_order_local_id(const ::std::string& value);
  #if LANG_CXX11
  void set_order_local_id(::std::string&& value);
  #endif
  void set_order_local_id(const char* value);
  void set_order_local_id(const char* value, size_t size);
  ::std::string* mutable_order_local_id();
  ::std::string* release_order_local_id();
  void set_allocated_order_local_id(::std::string* order_local_id);

  // optional string clearing_part_id = 20;
  bool has_clearing_part_id() const;
  void clear_clearing_part_id();
  static const int kClearingPartIdFieldNumber = 20;
  const ::std::string& clearing_part_id() const;
  void set_clearing_part_id(const ::std::string& value);
  #if LANG_CXX11
  void set_clearing_part_id(::std::string&& value);
  #endif
  void set_clearing_part_id(const char* value);
  void set_clearing_part_id(const char* value, size_t size);
  ::std::string* mutable_clearing_part_id();
  ::std::string* release_clearing_part_id();
  void set_allocated_clearing_part_id(::std::string* clearing_part_id);

  // optional string sequence_no = 21;
  bool has_sequence_no() const;
  void clear_sequence_no();
  static const int kSequenceNoFieldNumber = 21;
  const ::std::string& sequence_no() const;
  void set_sequence_no(const ::std::string& value);
  #if LANG_CXX11
  void set_sequence_no(::std::string&& value);
  #endif
  void set_sequence_no(const char* value);
  void set_sequence_no(const char* value, size_t size);
  ::std::string* mutable_sequence_no();
  ::std::string* release_sequence_no();
  void set_allocated_sequence_no(::std::string* sequence_no);

  // optional string ret_message = 25;
  bool has_ret_message() const;
  void clear_ret_message();
  static const int kRetMessageFieldNumber = 25;
  const ::std::string& ret_message() const;
  void set_ret_message(const ::std::string& value);
  #if LANG_CXX11
  void set_ret_message(::std::string&& value);
  #endif
  void set_ret_message(const char* value);
  void set_ret_message(const char* value, size_t size);
  ::std::string* mutable_ret_message();
  ::std::string* release_ret_message();
  void set_allocated_ret_message(::std::string* ret_message);

  // optional int32 bsflag = 9;
  bool has_bsflag() const;
  void clear_bsflag();
  static const int kBsflagFieldNumber = 9;
  ::google::protobuf::int32 bsflag() const;
  void set_bsflag(::google::protobuf::int32 value);

  // optional int32 kpcbj = 12;
  bool has_kpcbj() const;
  void clear_kpcbj();
  static const int kKpcbjFieldNumber = 12;
  ::google::protobuf::int32 kpcbj() const;
  void set_kpcbj(::google::protobuf::int32 value);

  // optional int64 match_price = 14;
  bool has_match_price() const;
  void clear_match_price();
  static const int kMatchPriceFieldNumber = 14;
  ::google::protobuf::int64 match_price() const;
  void set_match_price(::google::protobuf::int64 value);

  // optional int32 hedge_flag = 13;
  bool has_hedge_flag() const;
  void clear_hedge_flag();
  static const int kHedgeFlagFieldNumber = 13;
  ::google::protobuf::int32 hedge_flag() const;
  void set_hedge_flag(::google::protobuf::int32 value);

  // optional int32 match_qty = 15;
  bool has_match_qty() const;
  void clear_match_qty();
  static const int kMatchQtyFieldNumber = 15;
  ::google::protobuf::int32 match_qty() const;
  void set_match_qty(::google::protobuf::int32 value);

  // optional int32 match_date = 16;
  bool has_match_date() const;
  void clear_match_date();
  static const int kMatchDateFieldNumber = 16;
  ::google::protobuf::int32 match_date() const;
  void set_match_date(::google::protobuf::int32 value);

  // optional int32 match_time = 17;
  bool has_match_time() const;
  void clear_match_time();
  static const int kMatchTimeFieldNumber = 17;
  ::google::protobuf::int32 match_time() const;
  void set_match_time(::google::protobuf::int32 value);

  // optional int32 match_type = 18;
  bool has_match_type() const;
  void clear_match_type();
  static const int kMatchTypeFieldNumber = 18;
  ::google::protobuf::int32 match_type() const;
  void set_match_type(::google::protobuf::int32 value);

  // optional int32 trading_day = 22;
  bool has_trading_day() const;
  void clear_trading_day();
  static const int kTradingDayFieldNumber = 22;
  ::google::protobuf::int32 trading_day() const;
  void set_trading_day(::google::protobuf::int32 value);

  // optional int32 settlement_id = 23;
  bool has_settlement_id() const;
  void clear_settlement_id();
  static const int kSettlementIdFieldNumber = 23;
  ::google::protobuf::int32 settlement_id() const;
  void set_settlement_id(::google::protobuf::int32 value);

  // optional int32 ret_code = 24 [default = 0];
  bool has_ret_code() const;
  void clear_ret_code();
  static const int kRetCodeFieldNumber = 24;
  ::google::protobuf::int32 ret_code() const;
  void set_ret_code(::google::protobuf::int32 value);

  // optional bool islast = 26 [default = false];
  bool has_islast() const;
  void clear_islast();
  static const int kIslastFieldNumber = 26;
  bool islast() const;
  void set_islast(bool value);

  // optional int32 funcid = 1 [default = 12103013];
  bool has_funcid() const;
  void clear_funcid();
  static const int kFuncidFieldNumber = 1;
  ::google::protobuf::int32 funcid() const;
  void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autotrade.InnerFutureQueryTradeResp)
 private:
  void set_has_funcid();
  void clear_has_funcid();
  void set_has_broker_id();
  void clear_has_broker_id();
  void set_has_future_account();
  void clear_has_future_account();
  void set_has_instrument_id();
  void clear_has_instrument_id();
  void set_has_order_group();
  void clear_has_order_group();
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_exchange_id();
  void clear_has_exchange_id();
  void set_has_match_id();
  void clear_has_match_id();
  void set_has_bsflag();
  void clear_has_bsflag();
  void set_has_order_sys_id();
  void clear_has_order_sys_id();
  void set_has_exchange_instrument_id();
  void clear_has_exchange_instrument_id();
  void set_has_kpcbj();
  void clear_has_kpcbj();
  void set_has_hedge_flag();
  void clear_has_hedge_flag();
  void set_has_match_price();
  void clear_has_match_price();
  void set_has_match_qty();
  void clear_has_match_qty();
  void set_has_match_date();
  void clear_has_match_date();
  void set_has_match_time();
  void clear_has_match_time();
  void set_has_match_type();
  void clear_has_match_type();
  void set_has_order_local_id();
  void clear_has_order_local_id();
  void set_has_clearing_part_id();
  void clear_has_clearing_part_id();
  void set_has_sequence_no();
  void clear_has_sequence_no();
  void set_has_trading_day();
  void clear_has_trading_day();
  void set_has_settlement_id();
  void clear_has_settlement_id();
  void set_has_ret_code();
  void clear_has_ret_code();
  void set_has_ret_message();
  void clear_has_ret_message();
  void set_has_islast();
  void clear_has_islast();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr broker_id_;
  ::google::protobuf::internal::ArenaStringPtr future_account_;
  ::google::protobuf::internal::ArenaStringPtr instrument_id_;
  ::google::protobuf::internal::ArenaStringPtr order_group_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr exchange_id_;
  ::google::protobuf::internal::ArenaStringPtr match_id_;
  ::google::protobuf::internal::ArenaStringPtr order_sys_id_;
  ::google::protobuf::internal::ArenaStringPtr exchange_instrument_id_;
  ::google::protobuf::internal::ArenaStringPtr order_local_id_;
  ::google::protobuf::internal::ArenaStringPtr clearing_part_id_;
  ::google::protobuf::internal::ArenaStringPtr sequence_no_;
  ::google::protobuf::internal::ArenaStringPtr ret_message_;
  ::google::protobuf::int32 bsflag_;
  ::google::protobuf::int32 kpcbj_;
  ::google::protobuf::int64 match_price_;
  ::google::protobuf::int32 hedge_flag_;
  ::google::protobuf::int32 match_qty_;
  ::google::protobuf::int32 match_date_;
  ::google::protobuf::int32 match_time_;
  ::google::protobuf::int32 match_type_;
  ::google::protobuf::int32 trading_day_;
  ::google::protobuf::int32 settlement_id_;
  ::google::protobuf::int32 ret_code_;
  bool islast_;
  ::google::protobuf::int32 funcid_;
  friend struct ::protobuf_protos_2fqfuture_5fprotocol_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FutureLoginReqt

// optional int32 funcid = 1 [default = 12000001];
inline bool FutureLoginReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FutureLoginReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FutureLoginReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FutureLoginReqt::clear_funcid() {
  funcid_ = 12000001;
  clear_has_funcid();
}
inline ::google::protobuf::int32 FutureLoginReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureLoginReqt.funcid)
  return funcid_;
}
inline void FutureLoginReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureLoginReqt.funcid)
}

// optional string trading_day = 2;
inline bool FutureLoginReqt::has_trading_day() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FutureLoginReqt::set_has_trading_day() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FutureLoginReqt::clear_has_trading_day() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FutureLoginReqt::clear_trading_day() {
  trading_day_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trading_day();
}
inline const ::std::string& FutureLoginReqt::trading_day() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureLoginReqt.trading_day)
  return trading_day_.GetNoArena();
}
inline void FutureLoginReqt::set_trading_day(const ::std::string& value) {
  set_has_trading_day();
  trading_day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureLoginReqt.trading_day)
}
#if LANG_CXX11
inline void FutureLoginReqt::set_trading_day(::std::string&& value) {
  set_has_trading_day();
  trading_day_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureLoginReqt.trading_day)
}
#endif
inline void FutureLoginReqt::set_trading_day(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trading_day();
  trading_day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureLoginReqt.trading_day)
}
inline void FutureLoginReqt::set_trading_day(const char* value, size_t size) {
  set_has_trading_day();
  trading_day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureLoginReqt.trading_day)
}
inline ::std::string* FutureLoginReqt::mutable_trading_day() {
  set_has_trading_day();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureLoginReqt.trading_day)
  return trading_day_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureLoginReqt::release_trading_day() {
  // @@protoc_insertion_point(field_release:autotrade.FutureLoginReqt.trading_day)
  if (!has_trading_day()) {
    return NULL;
  }
  clear_has_trading_day();
  return trading_day_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureLoginReqt::set_allocated_trading_day(::std::string* trading_day) {
  if (trading_day != NULL) {
    set_has_trading_day();
  } else {
    clear_has_trading_day();
  }
  trading_day_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trading_day);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureLoginReqt.trading_day)
}

// optional string broker_id = 3;
inline bool FutureLoginReqt::has_broker_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FutureLoginReqt::set_has_broker_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FutureLoginReqt::clear_has_broker_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FutureLoginReqt::clear_broker_id() {
  broker_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_broker_id();
}
inline const ::std::string& FutureLoginReqt::broker_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureLoginReqt.broker_id)
  return broker_id_.GetNoArena();
}
inline void FutureLoginReqt::set_broker_id(const ::std::string& value) {
  set_has_broker_id();
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureLoginReqt.broker_id)
}
#if LANG_CXX11
inline void FutureLoginReqt::set_broker_id(::std::string&& value) {
  set_has_broker_id();
  broker_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureLoginReqt.broker_id)
}
#endif
inline void FutureLoginReqt::set_broker_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_broker_id();
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureLoginReqt.broker_id)
}
inline void FutureLoginReqt::set_broker_id(const char* value, size_t size) {
  set_has_broker_id();
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureLoginReqt.broker_id)
}
inline ::std::string* FutureLoginReqt::mutable_broker_id() {
  set_has_broker_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureLoginReqt.broker_id)
  return broker_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureLoginReqt::release_broker_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureLoginReqt.broker_id)
  if (!has_broker_id()) {
    return NULL;
  }
  clear_has_broker_id();
  return broker_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureLoginReqt::set_allocated_broker_id(::std::string* broker_id) {
  if (broker_id != NULL) {
    set_has_broker_id();
  } else {
    clear_has_broker_id();
  }
  broker_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), broker_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureLoginReqt.broker_id)
}

// optional string future_account = 4;
inline bool FutureLoginReqt::has_future_account() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FutureLoginReqt::set_has_future_account() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FutureLoginReqt::clear_has_future_account() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FutureLoginReqt::clear_future_account() {
  future_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_future_account();
}
inline const ::std::string& FutureLoginReqt::future_account() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureLoginReqt.future_account)
  return future_account_.GetNoArena();
}
inline void FutureLoginReqt::set_future_account(const ::std::string& value) {
  set_has_future_account();
  future_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureLoginReqt.future_account)
}
#if LANG_CXX11
inline void FutureLoginReqt::set_future_account(::std::string&& value) {
  set_has_future_account();
  future_account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureLoginReqt.future_account)
}
#endif
inline void FutureLoginReqt::set_future_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_future_account();
  future_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureLoginReqt.future_account)
}
inline void FutureLoginReqt::set_future_account(const char* value, size_t size) {
  set_has_future_account();
  future_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureLoginReqt.future_account)
}
inline ::std::string* FutureLoginReqt::mutable_future_account() {
  set_has_future_account();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureLoginReqt.future_account)
  return future_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureLoginReqt::release_future_account() {
  // @@protoc_insertion_point(field_release:autotrade.FutureLoginReqt.future_account)
  if (!has_future_account()) {
    return NULL;
  }
  clear_has_future_account();
  return future_account_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureLoginReqt::set_allocated_future_account(::std::string* future_account) {
  if (future_account != NULL) {
    set_has_future_account();
  } else {
    clear_has_future_account();
  }
  future_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), future_account);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureLoginReqt.future_account)
}

// optional string pwd = 5;
inline bool FutureLoginReqt::has_pwd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FutureLoginReqt::set_has_pwd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FutureLoginReqt::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FutureLoginReqt::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pwd();
}
inline const ::std::string& FutureLoginReqt::pwd() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureLoginReqt.pwd)
  return pwd_.GetNoArena();
}
inline void FutureLoginReqt::set_pwd(const ::std::string& value) {
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureLoginReqt.pwd)
}
#if LANG_CXX11
inline void FutureLoginReqt::set_pwd(::std::string&& value) {
  set_has_pwd();
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureLoginReqt.pwd)
}
#endif
inline void FutureLoginReqt::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureLoginReqt.pwd)
}
inline void FutureLoginReqt::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureLoginReqt.pwd)
}
inline ::std::string* FutureLoginReqt::mutable_pwd() {
  set_has_pwd();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureLoginReqt.pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureLoginReqt::release_pwd() {
  // @@protoc_insertion_point(field_release:autotrade.FutureLoginReqt.pwd)
  if (!has_pwd()) {
    return NULL;
  }
  clear_has_pwd();
  return pwd_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureLoginReqt::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    set_has_pwd();
  } else {
    clear_has_pwd();
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureLoginReqt.pwd)
}

// optional string request_id = 6;
inline bool FutureLoginReqt::has_request_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FutureLoginReqt::set_has_request_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FutureLoginReqt::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FutureLoginReqt::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& FutureLoginReqt::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureLoginReqt.request_id)
  return request_id_.GetNoArena();
}
inline void FutureLoginReqt::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureLoginReqt.request_id)
}
#if LANG_CXX11
inline void FutureLoginReqt::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureLoginReqt.request_id)
}
#endif
inline void FutureLoginReqt::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureLoginReqt.request_id)
}
inline void FutureLoginReqt::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureLoginReqt.request_id)
}
inline ::std::string* FutureLoginReqt::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureLoginReqt.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureLoginReqt::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureLoginReqt.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureLoginReqt::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureLoginReqt.request_id)
}

// -------------------------------------------------------------------

// FutureLoginResp

// optional int32 funcid = 1 [default = 12100001];
inline bool FutureLoginResp::has_funcid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void FutureLoginResp::set_has_funcid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void FutureLoginResp::clear_has_funcid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void FutureLoginResp::clear_funcid() {
  funcid_ = 12100001;
  clear_has_funcid();
}
inline ::google::protobuf::int32 FutureLoginResp::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureLoginResp.funcid)
  return funcid_;
}
inline void FutureLoginResp::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureLoginResp.funcid)
}

// optional string future_account = 2;
inline bool FutureLoginResp::has_future_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FutureLoginResp::set_has_future_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FutureLoginResp::clear_has_future_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FutureLoginResp::clear_future_account() {
  future_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_future_account();
}
inline const ::std::string& FutureLoginResp::future_account() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureLoginResp.future_account)
  return future_account_.GetNoArena();
}
inline void FutureLoginResp::set_future_account(const ::std::string& value) {
  set_has_future_account();
  future_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureLoginResp.future_account)
}
#if LANG_CXX11
inline void FutureLoginResp::set_future_account(::std::string&& value) {
  set_has_future_account();
  future_account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureLoginResp.future_account)
}
#endif
inline void FutureLoginResp::set_future_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_future_account();
  future_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureLoginResp.future_account)
}
inline void FutureLoginResp::set_future_account(const char* value, size_t size) {
  set_has_future_account();
  future_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureLoginResp.future_account)
}
inline ::std::string* FutureLoginResp::mutable_future_account() {
  set_has_future_account();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureLoginResp.future_account)
  return future_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureLoginResp::release_future_account() {
  // @@protoc_insertion_point(field_release:autotrade.FutureLoginResp.future_account)
  if (!has_future_account()) {
    return NULL;
  }
  clear_has_future_account();
  return future_account_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureLoginResp::set_allocated_future_account(::std::string* future_account) {
  if (future_account != NULL) {
    set_has_future_account();
  } else {
    clear_has_future_account();
  }
  future_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), future_account);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureLoginResp.future_account)
}

// optional string trading_day = 3;
inline bool FutureLoginResp::has_trading_day() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FutureLoginResp::set_has_trading_day() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FutureLoginResp::clear_has_trading_day() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FutureLoginResp::clear_trading_day() {
  trading_day_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trading_day();
}
inline const ::std::string& FutureLoginResp::trading_day() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureLoginResp.trading_day)
  return trading_day_.GetNoArena();
}
inline void FutureLoginResp::set_trading_day(const ::std::string& value) {
  set_has_trading_day();
  trading_day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureLoginResp.trading_day)
}
#if LANG_CXX11
inline void FutureLoginResp::set_trading_day(::std::string&& value) {
  set_has_trading_day();
  trading_day_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureLoginResp.trading_day)
}
#endif
inline void FutureLoginResp::set_trading_day(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trading_day();
  trading_day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureLoginResp.trading_day)
}
inline void FutureLoginResp::set_trading_day(const char* value, size_t size) {
  set_has_trading_day();
  trading_day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureLoginResp.trading_day)
}
inline ::std::string* FutureLoginResp::mutable_trading_day() {
  set_has_trading_day();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureLoginResp.trading_day)
  return trading_day_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureLoginResp::release_trading_day() {
  // @@protoc_insertion_point(field_release:autotrade.FutureLoginResp.trading_day)
  if (!has_trading_day()) {
    return NULL;
  }
  clear_has_trading_day();
  return trading_day_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureLoginResp::set_allocated_trading_day(::std::string* trading_day) {
  if (trading_day != NULL) {
    set_has_trading_day();
  } else {
    clear_has_trading_day();
  }
  trading_day_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trading_day);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureLoginResp.trading_day)
}

// optional string login_time = 4;
inline bool FutureLoginResp::has_login_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FutureLoginResp::set_has_login_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FutureLoginResp::clear_has_login_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FutureLoginResp::clear_login_time() {
  login_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_login_time();
}
inline const ::std::string& FutureLoginResp::login_time() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureLoginResp.login_time)
  return login_time_.GetNoArena();
}
inline void FutureLoginResp::set_login_time(const ::std::string& value) {
  set_has_login_time();
  login_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureLoginResp.login_time)
}
#if LANG_CXX11
inline void FutureLoginResp::set_login_time(::std::string&& value) {
  set_has_login_time();
  login_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureLoginResp.login_time)
}
#endif
inline void FutureLoginResp::set_login_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_login_time();
  login_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureLoginResp.login_time)
}
inline void FutureLoginResp::set_login_time(const char* value, size_t size) {
  set_has_login_time();
  login_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureLoginResp.login_time)
}
inline ::std::string* FutureLoginResp::mutable_login_time() {
  set_has_login_time();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureLoginResp.login_time)
  return login_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureLoginResp::release_login_time() {
  // @@protoc_insertion_point(field_release:autotrade.FutureLoginResp.login_time)
  if (!has_login_time()) {
    return NULL;
  }
  clear_has_login_time();
  return login_time_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureLoginResp::set_allocated_login_time(::std::string* login_time) {
  if (login_time != NULL) {
    set_has_login_time();
  } else {
    clear_has_login_time();
  }
  login_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login_time);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureLoginResp.login_time)
}

// optional string broker_id = 5;
inline bool FutureLoginResp::has_broker_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FutureLoginResp::set_has_broker_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FutureLoginResp::clear_has_broker_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FutureLoginResp::clear_broker_id() {
  broker_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_broker_id();
}
inline const ::std::string& FutureLoginResp::broker_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureLoginResp.broker_id)
  return broker_id_.GetNoArena();
}
inline void FutureLoginResp::set_broker_id(const ::std::string& value) {
  set_has_broker_id();
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureLoginResp.broker_id)
}
#if LANG_CXX11
inline void FutureLoginResp::set_broker_id(::std::string&& value) {
  set_has_broker_id();
  broker_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureLoginResp.broker_id)
}
#endif
inline void FutureLoginResp::set_broker_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_broker_id();
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureLoginResp.broker_id)
}
inline void FutureLoginResp::set_broker_id(const char* value, size_t size) {
  set_has_broker_id();
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureLoginResp.broker_id)
}
inline ::std::string* FutureLoginResp::mutable_broker_id() {
  set_has_broker_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureLoginResp.broker_id)
  return broker_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureLoginResp::release_broker_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureLoginResp.broker_id)
  if (!has_broker_id()) {
    return NULL;
  }
  clear_has_broker_id();
  return broker_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureLoginResp::set_allocated_broker_id(::std::string* broker_id) {
  if (broker_id != NULL) {
    set_has_broker_id();
  } else {
    clear_has_broker_id();
  }
  broker_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), broker_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureLoginResp.broker_id)
}

// optional string system_name = 6;
inline bool FutureLoginResp::has_system_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FutureLoginResp::set_has_system_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FutureLoginResp::clear_has_system_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FutureLoginResp::clear_system_name() {
  system_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_system_name();
}
inline const ::std::string& FutureLoginResp::system_name() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureLoginResp.system_name)
  return system_name_.GetNoArena();
}
inline void FutureLoginResp::set_system_name(const ::std::string& value) {
  set_has_system_name();
  system_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureLoginResp.system_name)
}
#if LANG_CXX11
inline void FutureLoginResp::set_system_name(::std::string&& value) {
  set_has_system_name();
  system_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureLoginResp.system_name)
}
#endif
inline void FutureLoginResp::set_system_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_system_name();
  system_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureLoginResp.system_name)
}
inline void FutureLoginResp::set_system_name(const char* value, size_t size) {
  set_has_system_name();
  system_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureLoginResp.system_name)
}
inline ::std::string* FutureLoginResp::mutable_system_name() {
  set_has_system_name();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureLoginResp.system_name)
  return system_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureLoginResp::release_system_name() {
  // @@protoc_insertion_point(field_release:autotrade.FutureLoginResp.system_name)
  if (!has_system_name()) {
    return NULL;
  }
  clear_has_system_name();
  return system_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureLoginResp::set_allocated_system_name(::std::string* system_name) {
  if (system_name != NULL) {
    set_has_system_name();
  } else {
    clear_has_system_name();
  }
  system_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), system_name);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureLoginResp.system_name)
}

// optional int32 front_id = 7;
inline bool FutureLoginResp::has_front_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FutureLoginResp::set_has_front_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FutureLoginResp::clear_has_front_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FutureLoginResp::clear_front_id() {
  front_id_ = 0;
  clear_has_front_id();
}
inline ::google::protobuf::int32 FutureLoginResp::front_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureLoginResp.front_id)
  return front_id_;
}
inline void FutureLoginResp::set_front_id(::google::protobuf::int32 value) {
  set_has_front_id();
  front_id_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureLoginResp.front_id)
}

// optional int32 session_id = 8;
inline bool FutureLoginResp::has_session_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void FutureLoginResp::set_has_session_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void FutureLoginResp::clear_has_session_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void FutureLoginResp::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
inline ::google::protobuf::int32 FutureLoginResp::session_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureLoginResp.session_id)
  return session_id_;
}
inline void FutureLoginResp::set_session_id(::google::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureLoginResp.session_id)
}

// optional string max_order_ref = 9;
inline bool FutureLoginResp::has_max_order_ref() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FutureLoginResp::set_has_max_order_ref() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FutureLoginResp::clear_has_max_order_ref() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FutureLoginResp::clear_max_order_ref() {
  max_order_ref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_max_order_ref();
}
inline const ::std::string& FutureLoginResp::max_order_ref() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureLoginResp.max_order_ref)
  return max_order_ref_.GetNoArena();
}
inline void FutureLoginResp::set_max_order_ref(const ::std::string& value) {
  set_has_max_order_ref();
  max_order_ref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureLoginResp.max_order_ref)
}
#if LANG_CXX11
inline void FutureLoginResp::set_max_order_ref(::std::string&& value) {
  set_has_max_order_ref();
  max_order_ref_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureLoginResp.max_order_ref)
}
#endif
inline void FutureLoginResp::set_max_order_ref(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_max_order_ref();
  max_order_ref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureLoginResp.max_order_ref)
}
inline void FutureLoginResp::set_max_order_ref(const char* value, size_t size) {
  set_has_max_order_ref();
  max_order_ref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureLoginResp.max_order_ref)
}
inline ::std::string* FutureLoginResp::mutable_max_order_ref() {
  set_has_max_order_ref();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureLoginResp.max_order_ref)
  return max_order_ref_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureLoginResp::release_max_order_ref() {
  // @@protoc_insertion_point(field_release:autotrade.FutureLoginResp.max_order_ref)
  if (!has_max_order_ref()) {
    return NULL;
  }
  clear_has_max_order_ref();
  return max_order_ref_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureLoginResp::set_allocated_max_order_ref(::std::string* max_order_ref) {
  if (max_order_ref != NULL) {
    set_has_max_order_ref();
  } else {
    clear_has_max_order_ref();
  }
  max_order_ref_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), max_order_ref);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureLoginResp.max_order_ref)
}

// optional string shfe_time = 10;
inline bool FutureLoginResp::has_shfe_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FutureLoginResp::set_has_shfe_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FutureLoginResp::clear_has_shfe_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FutureLoginResp::clear_shfe_time() {
  shfe_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_shfe_time();
}
inline const ::std::string& FutureLoginResp::shfe_time() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureLoginResp.shfe_time)
  return shfe_time_.GetNoArena();
}
inline void FutureLoginResp::set_shfe_time(const ::std::string& value) {
  set_has_shfe_time();
  shfe_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureLoginResp.shfe_time)
}
#if LANG_CXX11
inline void FutureLoginResp::set_shfe_time(::std::string&& value) {
  set_has_shfe_time();
  shfe_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureLoginResp.shfe_time)
}
#endif
inline void FutureLoginResp::set_shfe_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_shfe_time();
  shfe_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureLoginResp.shfe_time)
}
inline void FutureLoginResp::set_shfe_time(const char* value, size_t size) {
  set_has_shfe_time();
  shfe_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureLoginResp.shfe_time)
}
inline ::std::string* FutureLoginResp::mutable_shfe_time() {
  set_has_shfe_time();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureLoginResp.shfe_time)
  return shfe_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureLoginResp::release_shfe_time() {
  // @@protoc_insertion_point(field_release:autotrade.FutureLoginResp.shfe_time)
  if (!has_shfe_time()) {
    return NULL;
  }
  clear_has_shfe_time();
  return shfe_time_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureLoginResp::set_allocated_shfe_time(::std::string* shfe_time) {
  if (shfe_time != NULL) {
    set_has_shfe_time();
  } else {
    clear_has_shfe_time();
  }
  shfe_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), shfe_time);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureLoginResp.shfe_time)
}

// optional string dce_time = 11;
inline bool FutureLoginResp::has_dce_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FutureLoginResp::set_has_dce_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FutureLoginResp::clear_has_dce_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FutureLoginResp::clear_dce_time() {
  dce_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dce_time();
}
inline const ::std::string& FutureLoginResp::dce_time() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureLoginResp.dce_time)
  return dce_time_.GetNoArena();
}
inline void FutureLoginResp::set_dce_time(const ::std::string& value) {
  set_has_dce_time();
  dce_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureLoginResp.dce_time)
}
#if LANG_CXX11
inline void FutureLoginResp::set_dce_time(::std::string&& value) {
  set_has_dce_time();
  dce_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureLoginResp.dce_time)
}
#endif
inline void FutureLoginResp::set_dce_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dce_time();
  dce_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureLoginResp.dce_time)
}
inline void FutureLoginResp::set_dce_time(const char* value, size_t size) {
  set_has_dce_time();
  dce_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureLoginResp.dce_time)
}
inline ::std::string* FutureLoginResp::mutable_dce_time() {
  set_has_dce_time();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureLoginResp.dce_time)
  return dce_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureLoginResp::release_dce_time() {
  // @@protoc_insertion_point(field_release:autotrade.FutureLoginResp.dce_time)
  if (!has_dce_time()) {
    return NULL;
  }
  clear_has_dce_time();
  return dce_time_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureLoginResp::set_allocated_dce_time(::std::string* dce_time) {
  if (dce_time != NULL) {
    set_has_dce_time();
  } else {
    clear_has_dce_time();
  }
  dce_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dce_time);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureLoginResp.dce_time)
}

// optional string czce_time = 12;
inline bool FutureLoginResp::has_czce_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FutureLoginResp::set_has_czce_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FutureLoginResp::clear_has_czce_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FutureLoginResp::clear_czce_time() {
  czce_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_czce_time();
}
inline const ::std::string& FutureLoginResp::czce_time() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureLoginResp.czce_time)
  return czce_time_.GetNoArena();
}
inline void FutureLoginResp::set_czce_time(const ::std::string& value) {
  set_has_czce_time();
  czce_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureLoginResp.czce_time)
}
#if LANG_CXX11
inline void FutureLoginResp::set_czce_time(::std::string&& value) {
  set_has_czce_time();
  czce_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureLoginResp.czce_time)
}
#endif
inline void FutureLoginResp::set_czce_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_czce_time();
  czce_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureLoginResp.czce_time)
}
inline void FutureLoginResp::set_czce_time(const char* value, size_t size) {
  set_has_czce_time();
  czce_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureLoginResp.czce_time)
}
inline ::std::string* FutureLoginResp::mutable_czce_time() {
  set_has_czce_time();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureLoginResp.czce_time)
  return czce_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureLoginResp::release_czce_time() {
  // @@protoc_insertion_point(field_release:autotrade.FutureLoginResp.czce_time)
  if (!has_czce_time()) {
    return NULL;
  }
  clear_has_czce_time();
  return czce_time_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureLoginResp::set_allocated_czce_time(::std::string* czce_time) {
  if (czce_time != NULL) {
    set_has_czce_time();
  } else {
    clear_has_czce_time();
  }
  czce_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), czce_time);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureLoginResp.czce_time)
}

// optional string ffex_time = 13;
inline bool FutureLoginResp::has_ffex_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FutureLoginResp::set_has_ffex_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FutureLoginResp::clear_has_ffex_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FutureLoginResp::clear_ffex_time() {
  ffex_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ffex_time();
}
inline const ::std::string& FutureLoginResp::ffex_time() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureLoginResp.ffex_time)
  return ffex_time_.GetNoArena();
}
inline void FutureLoginResp::set_ffex_time(const ::std::string& value) {
  set_has_ffex_time();
  ffex_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureLoginResp.ffex_time)
}
#if LANG_CXX11
inline void FutureLoginResp::set_ffex_time(::std::string&& value) {
  set_has_ffex_time();
  ffex_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureLoginResp.ffex_time)
}
#endif
inline void FutureLoginResp::set_ffex_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ffex_time();
  ffex_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureLoginResp.ffex_time)
}
inline void FutureLoginResp::set_ffex_time(const char* value, size_t size) {
  set_has_ffex_time();
  ffex_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureLoginResp.ffex_time)
}
inline ::std::string* FutureLoginResp::mutable_ffex_time() {
  set_has_ffex_time();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureLoginResp.ffex_time)
  return ffex_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureLoginResp::release_ffex_time() {
  // @@protoc_insertion_point(field_release:autotrade.FutureLoginResp.ffex_time)
  if (!has_ffex_time()) {
    return NULL;
  }
  clear_has_ffex_time();
  return ffex_time_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureLoginResp::set_allocated_ffex_time(::std::string* ffex_time) {
  if (ffex_time != NULL) {
    set_has_ffex_time();
  } else {
    clear_has_ffex_time();
  }
  ffex_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ffex_time);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureLoginResp.ffex_time)
}

// optional string request_id = 14;
inline bool FutureLoginResp::has_request_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FutureLoginResp::set_has_request_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FutureLoginResp::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FutureLoginResp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& FutureLoginResp::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureLoginResp.request_id)
  return request_id_.GetNoArena();
}
inline void FutureLoginResp::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureLoginResp.request_id)
}
#if LANG_CXX11
inline void FutureLoginResp::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureLoginResp.request_id)
}
#endif
inline void FutureLoginResp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureLoginResp.request_id)
}
inline void FutureLoginResp::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureLoginResp.request_id)
}
inline ::std::string* FutureLoginResp::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureLoginResp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureLoginResp::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureLoginResp.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureLoginResp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureLoginResp.request_id)
}

// required int32 ret_code = 15;
inline bool FutureLoginResp::has_ret_code() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FutureLoginResp::set_has_ret_code() {
  _has_bits_[0] |= 0x00004000u;
}
inline void FutureLoginResp::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void FutureLoginResp::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 FutureLoginResp::ret_code() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureLoginResp.ret_code)
  return ret_code_;
}
inline void FutureLoginResp::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureLoginResp.ret_code)
}

// optional string ret_message = 16;
inline bool FutureLoginResp::has_ret_message() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FutureLoginResp::set_has_ret_message() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FutureLoginResp::clear_has_ret_message() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FutureLoginResp::clear_ret_message() {
  ret_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ret_message();
}
inline const ::std::string& FutureLoginResp::ret_message() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureLoginResp.ret_message)
  return ret_message_.GetNoArena();
}
inline void FutureLoginResp::set_ret_message(const ::std::string& value) {
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureLoginResp.ret_message)
}
#if LANG_CXX11
inline void FutureLoginResp::set_ret_message(::std::string&& value) {
  set_has_ret_message();
  ret_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureLoginResp.ret_message)
}
#endif
inline void FutureLoginResp::set_ret_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureLoginResp.ret_message)
}
inline void FutureLoginResp::set_ret_message(const char* value, size_t size) {
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureLoginResp.ret_message)
}
inline ::std::string* FutureLoginResp::mutable_ret_message() {
  set_has_ret_message();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureLoginResp.ret_message)
  return ret_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureLoginResp::release_ret_message() {
  // @@protoc_insertion_point(field_release:autotrade.FutureLoginResp.ret_message)
  if (!has_ret_message()) {
    return NULL;
  }
  clear_has_ret_message();
  return ret_message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureLoginResp::set_allocated_ret_message(::std::string* ret_message) {
  if (ret_message != NULL) {
    set_has_ret_message();
  } else {
    clear_has_ret_message();
  }
  ret_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ret_message);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureLoginResp.ret_message)
}

// -------------------------------------------------------------------

// FutureLogoutReqt

// optional int32 funcid = 1 [default = 12000002];
inline bool FutureLogoutReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FutureLogoutReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FutureLogoutReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FutureLogoutReqt::clear_funcid() {
  funcid_ = 12000002;
  clear_has_funcid();
}
inline ::google::protobuf::int32 FutureLogoutReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureLogoutReqt.funcid)
  return funcid_;
}
inline void FutureLogoutReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureLogoutReqt.funcid)
}

// optional string broker_id = 2;
inline bool FutureLogoutReqt::has_broker_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FutureLogoutReqt::set_has_broker_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FutureLogoutReqt::clear_has_broker_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FutureLogoutReqt::clear_broker_id() {
  broker_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_broker_id();
}
inline const ::std::string& FutureLogoutReqt::broker_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureLogoutReqt.broker_id)
  return broker_id_.GetNoArena();
}
inline void FutureLogoutReqt::set_broker_id(const ::std::string& value) {
  set_has_broker_id();
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureLogoutReqt.broker_id)
}
#if LANG_CXX11
inline void FutureLogoutReqt::set_broker_id(::std::string&& value) {
  set_has_broker_id();
  broker_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureLogoutReqt.broker_id)
}
#endif
inline void FutureLogoutReqt::set_broker_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_broker_id();
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureLogoutReqt.broker_id)
}
inline void FutureLogoutReqt::set_broker_id(const char* value, size_t size) {
  set_has_broker_id();
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureLogoutReqt.broker_id)
}
inline ::std::string* FutureLogoutReqt::mutable_broker_id() {
  set_has_broker_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureLogoutReqt.broker_id)
  return broker_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureLogoutReqt::release_broker_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureLogoutReqt.broker_id)
  if (!has_broker_id()) {
    return NULL;
  }
  clear_has_broker_id();
  return broker_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureLogoutReqt::set_allocated_broker_id(::std::string* broker_id) {
  if (broker_id != NULL) {
    set_has_broker_id();
  } else {
    clear_has_broker_id();
  }
  broker_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), broker_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureLogoutReqt.broker_id)
}

// optional string future_account = 3;
inline bool FutureLogoutReqt::has_future_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FutureLogoutReqt::set_has_future_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FutureLogoutReqt::clear_has_future_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FutureLogoutReqt::clear_future_account() {
  future_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_future_account();
}
inline const ::std::string& FutureLogoutReqt::future_account() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureLogoutReqt.future_account)
  return future_account_.GetNoArena();
}
inline void FutureLogoutReqt::set_future_account(const ::std::string& value) {
  set_has_future_account();
  future_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureLogoutReqt.future_account)
}
#if LANG_CXX11
inline void FutureLogoutReqt::set_future_account(::std::string&& value) {
  set_has_future_account();
  future_account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureLogoutReqt.future_account)
}
#endif
inline void FutureLogoutReqt::set_future_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_future_account();
  future_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureLogoutReqt.future_account)
}
inline void FutureLogoutReqt::set_future_account(const char* value, size_t size) {
  set_has_future_account();
  future_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureLogoutReqt.future_account)
}
inline ::std::string* FutureLogoutReqt::mutable_future_account() {
  set_has_future_account();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureLogoutReqt.future_account)
  return future_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureLogoutReqt::release_future_account() {
  // @@protoc_insertion_point(field_release:autotrade.FutureLogoutReqt.future_account)
  if (!has_future_account()) {
    return NULL;
  }
  clear_has_future_account();
  return future_account_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureLogoutReqt::set_allocated_future_account(::std::string* future_account) {
  if (future_account != NULL) {
    set_has_future_account();
  } else {
    clear_has_future_account();
  }
  future_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), future_account);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureLogoutReqt.future_account)
}

// optional string request_id = 4;
inline bool FutureLogoutReqt::has_request_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FutureLogoutReqt::set_has_request_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FutureLogoutReqt::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FutureLogoutReqt::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& FutureLogoutReqt::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureLogoutReqt.request_id)
  return request_id_.GetNoArena();
}
inline void FutureLogoutReqt::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureLogoutReqt.request_id)
}
#if LANG_CXX11
inline void FutureLogoutReqt::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureLogoutReqt.request_id)
}
#endif
inline void FutureLogoutReqt::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureLogoutReqt.request_id)
}
inline void FutureLogoutReqt::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureLogoutReqt.request_id)
}
inline ::std::string* FutureLogoutReqt::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureLogoutReqt.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureLogoutReqt::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureLogoutReqt.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureLogoutReqt::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureLogoutReqt.request_id)
}

// required int32 ret_code = 5;
inline bool FutureLogoutReqt::has_ret_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FutureLogoutReqt::set_has_ret_code() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FutureLogoutReqt::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FutureLogoutReqt::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 FutureLogoutReqt::ret_code() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureLogoutReqt.ret_code)
  return ret_code_;
}
inline void FutureLogoutReqt::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureLogoutReqt.ret_code)
}

// optional string ret_message = 6;
inline bool FutureLogoutReqt::has_ret_message() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FutureLogoutReqt::set_has_ret_message() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FutureLogoutReqt::clear_has_ret_message() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FutureLogoutReqt::clear_ret_message() {
  ret_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ret_message();
}
inline const ::std::string& FutureLogoutReqt::ret_message() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureLogoutReqt.ret_message)
  return ret_message_.GetNoArena();
}
inline void FutureLogoutReqt::set_ret_message(const ::std::string& value) {
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureLogoutReqt.ret_message)
}
#if LANG_CXX11
inline void FutureLogoutReqt::set_ret_message(::std::string&& value) {
  set_has_ret_message();
  ret_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureLogoutReqt.ret_message)
}
#endif
inline void FutureLogoutReqt::set_ret_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureLogoutReqt.ret_message)
}
inline void FutureLogoutReqt::set_ret_message(const char* value, size_t size) {
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureLogoutReqt.ret_message)
}
inline ::std::string* FutureLogoutReqt::mutable_ret_message() {
  set_has_ret_message();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureLogoutReqt.ret_message)
  return ret_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureLogoutReqt::release_ret_message() {
  // @@protoc_insertion_point(field_release:autotrade.FutureLogoutReqt.ret_message)
  if (!has_ret_message()) {
    return NULL;
  }
  clear_has_ret_message();
  return ret_message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureLogoutReqt::set_allocated_ret_message(::std::string* ret_message) {
  if (ret_message != NULL) {
    set_has_ret_message();
  } else {
    clear_has_ret_message();
  }
  ret_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ret_message);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureLogoutReqt.ret_message)
}

// -------------------------------------------------------------------

// FutureLogoutResp

// optional int32 funcid = 1 [default = 12100002];
inline bool FutureLogoutResp::has_funcid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FutureLogoutResp::set_has_funcid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FutureLogoutResp::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FutureLogoutResp::clear_funcid() {
  funcid_ = 12100002;
  clear_has_funcid();
}
inline ::google::protobuf::int32 FutureLogoutResp::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureLogoutResp.funcid)
  return funcid_;
}
inline void FutureLogoutResp::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureLogoutResp.funcid)
}

// optional string broker_id = 2;
inline bool FutureLogoutResp::has_broker_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FutureLogoutResp::set_has_broker_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FutureLogoutResp::clear_has_broker_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FutureLogoutResp::clear_broker_id() {
  broker_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_broker_id();
}
inline const ::std::string& FutureLogoutResp::broker_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureLogoutResp.broker_id)
  return broker_id_.GetNoArena();
}
inline void FutureLogoutResp::set_broker_id(const ::std::string& value) {
  set_has_broker_id();
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureLogoutResp.broker_id)
}
#if LANG_CXX11
inline void FutureLogoutResp::set_broker_id(::std::string&& value) {
  set_has_broker_id();
  broker_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureLogoutResp.broker_id)
}
#endif
inline void FutureLogoutResp::set_broker_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_broker_id();
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureLogoutResp.broker_id)
}
inline void FutureLogoutResp::set_broker_id(const char* value, size_t size) {
  set_has_broker_id();
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureLogoutResp.broker_id)
}
inline ::std::string* FutureLogoutResp::mutable_broker_id() {
  set_has_broker_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureLogoutResp.broker_id)
  return broker_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureLogoutResp::release_broker_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureLogoutResp.broker_id)
  if (!has_broker_id()) {
    return NULL;
  }
  clear_has_broker_id();
  return broker_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureLogoutResp::set_allocated_broker_id(::std::string* broker_id) {
  if (broker_id != NULL) {
    set_has_broker_id();
  } else {
    clear_has_broker_id();
  }
  broker_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), broker_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureLogoutResp.broker_id)
}

// optional string future_account = 3;
inline bool FutureLogoutResp::has_future_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FutureLogoutResp::set_has_future_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FutureLogoutResp::clear_has_future_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FutureLogoutResp::clear_future_account() {
  future_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_future_account();
}
inline const ::std::string& FutureLogoutResp::future_account() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureLogoutResp.future_account)
  return future_account_.GetNoArena();
}
inline void FutureLogoutResp::set_future_account(const ::std::string& value) {
  set_has_future_account();
  future_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureLogoutResp.future_account)
}
#if LANG_CXX11
inline void FutureLogoutResp::set_future_account(::std::string&& value) {
  set_has_future_account();
  future_account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureLogoutResp.future_account)
}
#endif
inline void FutureLogoutResp::set_future_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_future_account();
  future_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureLogoutResp.future_account)
}
inline void FutureLogoutResp::set_future_account(const char* value, size_t size) {
  set_has_future_account();
  future_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureLogoutResp.future_account)
}
inline ::std::string* FutureLogoutResp::mutable_future_account() {
  set_has_future_account();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureLogoutResp.future_account)
  return future_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureLogoutResp::release_future_account() {
  // @@protoc_insertion_point(field_release:autotrade.FutureLogoutResp.future_account)
  if (!has_future_account()) {
    return NULL;
  }
  clear_has_future_account();
  return future_account_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureLogoutResp::set_allocated_future_account(::std::string* future_account) {
  if (future_account != NULL) {
    set_has_future_account();
  } else {
    clear_has_future_account();
  }
  future_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), future_account);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureLogoutResp.future_account)
}

// optional string request_id = 4;
inline bool FutureLogoutResp::has_request_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FutureLogoutResp::set_has_request_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FutureLogoutResp::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FutureLogoutResp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& FutureLogoutResp::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureLogoutResp.request_id)
  return request_id_.GetNoArena();
}
inline void FutureLogoutResp::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureLogoutResp.request_id)
}
#if LANG_CXX11
inline void FutureLogoutResp::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureLogoutResp.request_id)
}
#endif
inline void FutureLogoutResp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureLogoutResp.request_id)
}
inline void FutureLogoutResp::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureLogoutResp.request_id)
}
inline ::std::string* FutureLogoutResp::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureLogoutResp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureLogoutResp::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureLogoutResp.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureLogoutResp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureLogoutResp.request_id)
}

// required int32 ret_code = 5;
inline bool FutureLogoutResp::has_ret_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FutureLogoutResp::set_has_ret_code() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FutureLogoutResp::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FutureLogoutResp::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 FutureLogoutResp::ret_code() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureLogoutResp.ret_code)
  return ret_code_;
}
inline void FutureLogoutResp::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureLogoutResp.ret_code)
}

// optional string ret_message = 6;
inline bool FutureLogoutResp::has_ret_message() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FutureLogoutResp::set_has_ret_message() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FutureLogoutResp::clear_has_ret_message() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FutureLogoutResp::clear_ret_message() {
  ret_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ret_message();
}
inline const ::std::string& FutureLogoutResp::ret_message() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureLogoutResp.ret_message)
  return ret_message_.GetNoArena();
}
inline void FutureLogoutResp::set_ret_message(const ::std::string& value) {
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureLogoutResp.ret_message)
}
#if LANG_CXX11
inline void FutureLogoutResp::set_ret_message(::std::string&& value) {
  set_has_ret_message();
  ret_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureLogoutResp.ret_message)
}
#endif
inline void FutureLogoutResp::set_ret_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureLogoutResp.ret_message)
}
inline void FutureLogoutResp::set_ret_message(const char* value, size_t size) {
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureLogoutResp.ret_message)
}
inline ::std::string* FutureLogoutResp::mutable_ret_message() {
  set_has_ret_message();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureLogoutResp.ret_message)
  return ret_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureLogoutResp::release_ret_message() {
  // @@protoc_insertion_point(field_release:autotrade.FutureLogoutResp.ret_message)
  if (!has_ret_message()) {
    return NULL;
  }
  clear_has_ret_message();
  return ret_message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureLogoutResp::set_allocated_ret_message(::std::string* ret_message) {
  if (ret_message != NULL) {
    set_has_ret_message();
  } else {
    clear_has_ret_message();
  }
  ret_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ret_message);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureLogoutResp.ret_message)
}

// -------------------------------------------------------------------

// FutureOrderReqt

// optional int32 funcid = 1 [default = 12001001];
inline bool FutureOrderReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void FutureOrderReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00100000u;
}
inline void FutureOrderReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void FutureOrderReqt::clear_funcid() {
  funcid_ = 12001001;
  clear_has_funcid();
}
inline ::google::protobuf::int32 FutureOrderReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderReqt.funcid)
  return funcid_;
}
inline void FutureOrderReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderReqt.funcid)
}

// required string code = 2;
inline bool FutureOrderReqt::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FutureOrderReqt::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FutureOrderReqt::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FutureOrderReqt::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& FutureOrderReqt::code() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderReqt.code)
  return code_.GetNoArena();
}
inline void FutureOrderReqt::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderReqt.code)
}
#if LANG_CXX11
inline void FutureOrderReqt::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureOrderReqt.code)
}
#endif
inline void FutureOrderReqt::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureOrderReqt.code)
}
inline void FutureOrderReqt::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureOrderReqt.code)
}
inline ::std::string* FutureOrderReqt::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureOrderReqt.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureOrderReqt::release_code() {
  // @@protoc_insertion_point(field_release:autotrade.FutureOrderReqt.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureOrderReqt::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureOrderReqt.code)
}

// required int64 price = 3;
inline bool FutureOrderReqt::has_price() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FutureOrderReqt::set_has_price() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FutureOrderReqt::clear_has_price() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FutureOrderReqt::clear_price() {
  price_ = GOOGLE_LONGLONG(0);
  clear_has_price();
}
inline ::google::protobuf::int64 FutureOrderReqt::price() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderReqt.price)
  return price_;
}
inline void FutureOrderReqt::set_price(::google::protobuf::int64 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderReqt.price)
}

// required uint32 qty = 4;
inline bool FutureOrderReqt::has_qty() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FutureOrderReqt::set_has_qty() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FutureOrderReqt::clear_has_qty() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FutureOrderReqt::clear_qty() {
  qty_ = 0u;
  clear_has_qty();
}
inline ::google::protobuf::uint32 FutureOrderReqt::qty() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderReqt.qty)
  return qty_;
}
inline void FutureOrderReqt::set_qty(::google::protobuf::uint32 value) {
  set_has_qty();
  qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderReqt.qty)
}

// required uint32 bsflag = 5;
inline bool FutureOrderReqt::has_bsflag() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FutureOrderReqt::set_has_bsflag() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FutureOrderReqt::clear_has_bsflag() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FutureOrderReqt::clear_bsflag() {
  bsflag_ = 0u;
  clear_has_bsflag();
}
inline ::google::protobuf::uint32 FutureOrderReqt::bsflag() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderReqt.bsflag)
  return bsflag_;
}
inline void FutureOrderReqt::set_bsflag(::google::protobuf::uint32 value) {
  set_has_bsflag();
  bsflag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderReqt.bsflag)
}

// optional int32 kpcbj = 6 [default = 0];
inline bool FutureOrderReqt::has_kpcbj() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FutureOrderReqt::set_has_kpcbj() {
  _has_bits_[0] |= 0x00004000u;
}
inline void FutureOrderReqt::clear_has_kpcbj() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void FutureOrderReqt::clear_kpcbj() {
  kpcbj_ = 0;
  clear_has_kpcbj();
}
inline ::google::protobuf::int32 FutureOrderReqt::kpcbj() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderReqt.kpcbj)
  return kpcbj_;
}
inline void FutureOrderReqt::set_kpcbj(::google::protobuf::int32 value) {
  set_has_kpcbj();
  kpcbj_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderReqt.kpcbj)
}

// optional int64 stop_price = 7 [default = 0];
inline bool FutureOrderReqt::has_stop_price() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void FutureOrderReqt::set_has_stop_price() {
  _has_bits_[0] |= 0x00002000u;
}
inline void FutureOrderReqt::clear_has_stop_price() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void FutureOrderReqt::clear_stop_price() {
  stop_price_ = GOOGLE_LONGLONG(0);
  clear_has_stop_price();
}
inline ::google::protobuf::int64 FutureOrderReqt::stop_price() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderReqt.stop_price)
  return stop_price_;
}
inline void FutureOrderReqt::set_stop_price(::google::protobuf::int64 value) {
  set_has_stop_price();
  stop_price_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderReqt.stop_price)
}

// optional int32 hedge_flag = 8 [default = 0];
inline bool FutureOrderReqt::has_hedge_flag() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void FutureOrderReqt::set_has_hedge_flag() {
  _has_bits_[0] |= 0x00008000u;
}
inline void FutureOrderReqt::clear_has_hedge_flag() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void FutureOrderReqt::clear_hedge_flag() {
  hedge_flag_ = 0;
  clear_has_hedge_flag();
}
inline ::google::protobuf::int32 FutureOrderReqt::hedge_flag() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderReqt.hedge_flag)
  return hedge_flag_;
}
inline void FutureOrderReqt::set_hedge_flag(::google::protobuf::int32 value) {
  set_has_hedge_flag();
  hedge_flag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderReqt.hedge_flag)
}

// optional string request_id = 9;
inline bool FutureOrderReqt::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FutureOrderReqt::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FutureOrderReqt::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FutureOrderReqt::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& FutureOrderReqt::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderReqt.request_id)
  return request_id_.GetNoArena();
}
inline void FutureOrderReqt::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderReqt.request_id)
}
#if LANG_CXX11
inline void FutureOrderReqt::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureOrderReqt.request_id)
}
#endif
inline void FutureOrderReqt::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureOrderReqt.request_id)
}
inline void FutureOrderReqt::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureOrderReqt.request_id)
}
inline ::std::string* FutureOrderReqt::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureOrderReqt.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureOrderReqt::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureOrderReqt.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureOrderReqt::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureOrderReqt.request_id)
}

// required string order_id = 10;
inline bool FutureOrderReqt::has_order_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FutureOrderReqt::set_has_order_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FutureOrderReqt::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FutureOrderReqt::clear_order_id() {
  order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_id();
}
inline const ::std::string& FutureOrderReqt::order_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderReqt.order_id)
  return order_id_.GetNoArena();
}
inline void FutureOrderReqt::set_order_id(const ::std::string& value) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderReqt.order_id)
}
#if LANG_CXX11
inline void FutureOrderReqt::set_order_id(::std::string&& value) {
  set_has_order_id();
  order_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureOrderReqt.order_id)
}
#endif
inline void FutureOrderReqt::set_order_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureOrderReqt.order_id)
}
inline void FutureOrderReqt::set_order_id(const char* value, size_t size) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureOrderReqt.order_id)
}
inline ::std::string* FutureOrderReqt::mutable_order_id() {
  set_has_order_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureOrderReqt.order_id)
  return order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureOrderReqt::release_order_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureOrderReqt.order_id)
  if (!has_order_id()) {
    return NULL;
  }
  clear_has_order_id();
  return order_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureOrderReqt::set_allocated_order_id(::std::string* order_id) {
  if (order_id != NULL) {
    set_has_order_id();
  } else {
    clear_has_order_id();
  }
  order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureOrderReqt.order_id)
}

// optional string order_type = 11;
inline bool FutureOrderReqt::has_order_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FutureOrderReqt::set_has_order_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FutureOrderReqt::clear_has_order_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FutureOrderReqt::clear_order_type() {
  order_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_type();
}
inline const ::std::string& FutureOrderReqt::order_type() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderReqt.order_type)
  return order_type_.GetNoArena();
}
inline void FutureOrderReqt::set_order_type(const ::std::string& value) {
  set_has_order_type();
  order_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderReqt.order_type)
}
#if LANG_CXX11
inline void FutureOrderReqt::set_order_type(::std::string&& value) {
  set_has_order_type();
  order_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureOrderReqt.order_type)
}
#endif
inline void FutureOrderReqt::set_order_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_type();
  order_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureOrderReqt.order_type)
}
inline void FutureOrderReqt::set_order_type(const char* value, size_t size) {
  set_has_order_type();
  order_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureOrderReqt.order_type)
}
inline ::std::string* FutureOrderReqt::mutable_order_type() {
  set_has_order_type();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureOrderReqt.order_type)
  return order_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureOrderReqt::release_order_type() {
  // @@protoc_insertion_point(field_release:autotrade.FutureOrderReqt.order_type)
  if (!has_order_type()) {
    return NULL;
  }
  clear_has_order_type();
  return order_type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureOrderReqt::set_allocated_order_type(::std::string* order_type) {
  if (order_type != NULL) {
    set_has_order_type();
  } else {
    clear_has_order_type();
  }
  order_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_type);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureOrderReqt.order_type)
}

// optional string parent_id = 12;
inline bool FutureOrderReqt::has_parent_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FutureOrderReqt::set_has_parent_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FutureOrderReqt::clear_has_parent_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FutureOrderReqt::clear_parent_id() {
  parent_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parent_id();
}
inline const ::std::string& FutureOrderReqt::parent_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderReqt.parent_id)
  return parent_id_.GetNoArena();
}
inline void FutureOrderReqt::set_parent_id(const ::std::string& value) {
  set_has_parent_id();
  parent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderReqt.parent_id)
}
#if LANG_CXX11
inline void FutureOrderReqt::set_parent_id(::std::string&& value) {
  set_has_parent_id();
  parent_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureOrderReqt.parent_id)
}
#endif
inline void FutureOrderReqt::set_parent_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_parent_id();
  parent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureOrderReqt.parent_id)
}
inline void FutureOrderReqt::set_parent_id(const char* value, size_t size) {
  set_has_parent_id();
  parent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureOrderReqt.parent_id)
}
inline ::std::string* FutureOrderReqt::mutable_parent_id() {
  set_has_parent_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureOrderReqt.parent_id)
  return parent_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureOrderReqt::release_parent_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureOrderReqt.parent_id)
  if (!has_parent_id()) {
    return NULL;
  }
  clear_has_parent_id();
  return parent_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureOrderReqt::set_allocated_parent_id(::std::string* parent_id) {
  if (parent_id != NULL) {
    set_has_parent_id();
  } else {
    clear_has_parent_id();
  }
  parent_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureOrderReqt.parent_id)
}

// optional string parent_type = 13;
inline bool FutureOrderReqt::has_parent_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FutureOrderReqt::set_has_parent_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FutureOrderReqt::clear_has_parent_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FutureOrderReqt::clear_parent_type() {
  parent_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parent_type();
}
inline const ::std::string& FutureOrderReqt::parent_type() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderReqt.parent_type)
  return parent_type_.GetNoArena();
}
inline void FutureOrderReqt::set_parent_type(const ::std::string& value) {
  set_has_parent_type();
  parent_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderReqt.parent_type)
}
#if LANG_CXX11
inline void FutureOrderReqt::set_parent_type(::std::string&& value) {
  set_has_parent_type();
  parent_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureOrderReqt.parent_type)
}
#endif
inline void FutureOrderReqt::set_parent_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_parent_type();
  parent_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureOrderReqt.parent_type)
}
inline void FutureOrderReqt::set_parent_type(const char* value, size_t size) {
  set_has_parent_type();
  parent_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureOrderReqt.parent_type)
}
inline ::std::string* FutureOrderReqt::mutable_parent_type() {
  set_has_parent_type();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureOrderReqt.parent_type)
  return parent_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureOrderReqt::release_parent_type() {
  // @@protoc_insertion_point(field_release:autotrade.FutureOrderReqt.parent_type)
  if (!has_parent_type()) {
    return NULL;
  }
  clear_has_parent_type();
  return parent_type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureOrderReqt::set_allocated_parent_type(::std::string* parent_type) {
  if (parent_type != NULL) {
    set_has_parent_type();
  } else {
    clear_has_parent_type();
  }
  parent_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent_type);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureOrderReqt.parent_type)
}

// optional int32 price_type = 14 [default = 0];
inline bool FutureOrderReqt::has_price_type() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void FutureOrderReqt::set_has_price_type() {
  _has_bits_[0] |= 0x00080000u;
}
inline void FutureOrderReqt::clear_has_price_type() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void FutureOrderReqt::clear_price_type() {
  price_type_ = 0;
  clear_has_price_type();
}
inline ::google::protobuf::int32 FutureOrderReqt::price_type() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderReqt.price_type)
  return price_type_;
}
inline void FutureOrderReqt::set_price_type(::google::protobuf::int32 value) {
  set_has_price_type();
  price_type_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderReqt.price_type)
}

// optional int64 request_time = 15 [default = 0];
inline bool FutureOrderReqt::has_request_time() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void FutureOrderReqt::set_has_request_time() {
  _has_bits_[0] |= 0x00010000u;
}
inline void FutureOrderReqt::clear_has_request_time() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void FutureOrderReqt::clear_request_time() {
  request_time_ = GOOGLE_LONGLONG(0);
  clear_has_request_time();
}
inline ::google::protobuf::int64 FutureOrderReqt::request_time() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderReqt.request_time)
  return request_time_;
}
inline void FutureOrderReqt::set_request_time(::google::protobuf::int64 value) {
  set_has_request_time();
  request_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderReqt.request_time)
}

// optional int64 active_interval = 16 [default = 1000];
inline bool FutureOrderReqt::has_active_interval() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void FutureOrderReqt::set_has_active_interval() {
  _has_bits_[0] |= 0x00200000u;
}
inline void FutureOrderReqt::clear_has_active_interval() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void FutureOrderReqt::clear_active_interval() {
  active_interval_ = GOOGLE_LONGLONG(1000);
  clear_has_active_interval();
}
inline ::google::protobuf::int64 FutureOrderReqt::active_interval() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderReqt.active_interval)
  return active_interval_;
}
inline void FutureOrderReqt::set_active_interval(::google::protobuf::int64 value) {
  set_has_active_interval();
  active_interval_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderReqt.active_interval)
}

// optional int64 request_date = 17 [default = 0];
inline bool FutureOrderReqt::has_request_date() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void FutureOrderReqt::set_has_request_date() {
  _has_bits_[0] |= 0x00020000u;
}
inline void FutureOrderReqt::clear_has_request_date() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void FutureOrderReqt::clear_request_date() {
  request_date_ = GOOGLE_LONGLONG(0);
  clear_has_request_date();
}
inline ::google::protobuf::int64 FutureOrderReqt::request_date() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderReqt.request_date)
  return request_date_;
}
inline void FutureOrderReqt::set_request_date(::google::protobuf::int64 value) {
  set_has_request_date();
  request_date_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderReqt.request_date)
}

// optional int64 market = 18;
inline bool FutureOrderReqt::has_market() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void FutureOrderReqt::set_has_market() {
  _has_bits_[0] |= 0x00040000u;
}
inline void FutureOrderReqt::clear_has_market() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void FutureOrderReqt::clear_market() {
  market_ = GOOGLE_LONGLONG(0);
  clear_has_market();
}
inline ::google::protobuf::int64 FutureOrderReqt::market() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderReqt.market)
  return market_;
}
inline void FutureOrderReqt::set_market(::google::protobuf::int64 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderReqt.market)
}

// optional string name = 19;
inline bool FutureOrderReqt::has_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FutureOrderReqt::set_has_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FutureOrderReqt::clear_has_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FutureOrderReqt::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& FutureOrderReqt::name() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderReqt.name)
  return name_.GetNoArena();
}
inline void FutureOrderReqt::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderReqt.name)
}
#if LANG_CXX11
inline void FutureOrderReqt::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureOrderReqt.name)
}
#endif
inline void FutureOrderReqt::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureOrderReqt.name)
}
inline void FutureOrderReqt::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureOrderReqt.name)
}
inline ::std::string* FutureOrderReqt::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureOrderReqt.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureOrderReqt::release_name() {
  // @@protoc_insertion_point(field_release:autotrade.FutureOrderReqt.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureOrderReqt::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureOrderReqt.name)
}

// optional string fund_id = 20;
inline bool FutureOrderReqt::has_fund_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FutureOrderReqt::set_has_fund_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FutureOrderReqt::clear_has_fund_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FutureOrderReqt::clear_fund_id() {
  fund_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fund_id();
}
inline const ::std::string& FutureOrderReqt::fund_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderReqt.fund_id)
  return fund_id_.GetNoArena();
}
inline void FutureOrderReqt::set_fund_id(const ::std::string& value) {
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderReqt.fund_id)
}
#if LANG_CXX11
inline void FutureOrderReqt::set_fund_id(::std::string&& value) {
  set_has_fund_id();
  fund_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureOrderReqt.fund_id)
}
#endif
inline void FutureOrderReqt::set_fund_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureOrderReqt.fund_id)
}
inline void FutureOrderReqt::set_fund_id(const char* value, size_t size) {
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureOrderReqt.fund_id)
}
inline ::std::string* FutureOrderReqt::mutable_fund_id() {
  set_has_fund_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureOrderReqt.fund_id)
  return fund_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureOrderReqt::release_fund_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureOrderReqt.fund_id)
  if (!has_fund_id()) {
    return NULL;
  }
  clear_has_fund_id();
  return fund_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureOrderReqt::set_allocated_fund_id(::std::string* fund_id) {
  if (fund_id != NULL) {
    set_has_fund_id();
  } else {
    clear_has_fund_id();
  }
  fund_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fund_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureOrderReqt.fund_id)
}

// optional string trader_id = 21;
inline bool FutureOrderReqt::has_trader_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FutureOrderReqt::set_has_trader_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FutureOrderReqt::clear_has_trader_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FutureOrderReqt::clear_trader_id() {
  trader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trader_id();
}
inline const ::std::string& FutureOrderReqt::trader_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderReqt.trader_id)
  return trader_id_.GetNoArena();
}
inline void FutureOrderReqt::set_trader_id(const ::std::string& value) {
  set_has_trader_id();
  trader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderReqt.trader_id)
}
#if LANG_CXX11
inline void FutureOrderReqt::set_trader_id(::std::string&& value) {
  set_has_trader_id();
  trader_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureOrderReqt.trader_id)
}
#endif
inline void FutureOrderReqt::set_trader_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trader_id();
  trader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureOrderReqt.trader_id)
}
inline void FutureOrderReqt::set_trader_id(const char* value, size_t size) {
  set_has_trader_id();
  trader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureOrderReqt.trader_id)
}
inline ::std::string* FutureOrderReqt::mutable_trader_id() {
  set_has_trader_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureOrderReqt.trader_id)
  return trader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureOrderReqt::release_trader_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureOrderReqt.trader_id)
  if (!has_trader_id()) {
    return NULL;
  }
  clear_has_trader_id();
  return trader_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureOrderReqt::set_allocated_trader_id(::std::string* trader_id) {
  if (trader_id != NULL) {
    set_has_trader_id();
  } else {
    clear_has_trader_id();
  }
  trader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trader_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureOrderReqt.trader_id)
}

// optional string session_id = 22;
inline bool FutureOrderReqt::has_session_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FutureOrderReqt::set_has_session_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FutureOrderReqt::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FutureOrderReqt::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_session_id();
}
inline const ::std::string& FutureOrderReqt::session_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderReqt.session_id)
  return session_id_.GetNoArena();
}
inline void FutureOrderReqt::set_session_id(const ::std::string& value) {
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderReqt.session_id)
}
#if LANG_CXX11
inline void FutureOrderReqt::set_session_id(::std::string&& value) {
  set_has_session_id();
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureOrderReqt.session_id)
}
#endif
inline void FutureOrderReqt::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureOrderReqt.session_id)
}
inline void FutureOrderReqt::set_session_id(const char* value, size_t size) {
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureOrderReqt.session_id)
}
inline ::std::string* FutureOrderReqt::mutable_session_id() {
  set_has_session_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureOrderReqt.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureOrderReqt::release_session_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureOrderReqt.session_id)
  if (!has_session_id()) {
    return NULL;
  }
  clear_has_session_id();
  return session_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureOrderReqt::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    set_has_session_id();
  } else {
    clear_has_session_id();
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureOrderReqt.session_id)
}

// -------------------------------------------------------------------

// FutureOrderResp

// optional int32 funcid = 1 [default = 12101001];
inline bool FutureOrderResp::has_funcid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FutureOrderResp::set_has_funcid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FutureOrderResp::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FutureOrderResp::clear_funcid() {
  funcid_ = 12101001;
  clear_has_funcid();
}
inline ::google::protobuf::int32 FutureOrderResp::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderResp.funcid)
  return funcid_;
}
inline void FutureOrderResp::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderResp.funcid)
}

// required string order_group = 2;
inline bool FutureOrderResp::has_order_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FutureOrderResp::set_has_order_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FutureOrderResp::clear_has_order_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FutureOrderResp::clear_order_group() {
  order_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_group();
}
inline const ::std::string& FutureOrderResp::order_group() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderResp.order_group)
  return order_group_.GetNoArena();
}
inline void FutureOrderResp::set_order_group(const ::std::string& value) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderResp.order_group)
}
#if LANG_CXX11
inline void FutureOrderResp::set_order_group(::std::string&& value) {
  set_has_order_group();
  order_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureOrderResp.order_group)
}
#endif
inline void FutureOrderResp::set_order_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureOrderResp.order_group)
}
inline void FutureOrderResp::set_order_group(const char* value, size_t size) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureOrderResp.order_group)
}
inline ::std::string* FutureOrderResp::mutable_order_group() {
  set_has_order_group();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureOrderResp.order_group)
  return order_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureOrderResp::release_order_group() {
  // @@protoc_insertion_point(field_release:autotrade.FutureOrderResp.order_group)
  if (!has_order_group()) {
    return NULL;
  }
  clear_has_order_group();
  return order_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureOrderResp::set_allocated_order_group(::std::string* order_group) {
  if (order_group != NULL) {
    set_has_order_group();
  } else {
    clear_has_order_group();
  }
  order_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_group);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureOrderResp.order_group)
}

// optional string request_id = 3;
inline bool FutureOrderResp::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FutureOrderResp::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FutureOrderResp::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FutureOrderResp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& FutureOrderResp::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderResp.request_id)
  return request_id_.GetNoArena();
}
inline void FutureOrderResp::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderResp.request_id)
}
#if LANG_CXX11
inline void FutureOrderResp::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureOrderResp.request_id)
}
#endif
inline void FutureOrderResp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureOrderResp.request_id)
}
inline void FutureOrderResp::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureOrderResp.request_id)
}
inline ::std::string* FutureOrderResp::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureOrderResp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureOrderResp::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureOrderResp.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureOrderResp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureOrderResp.request_id)
}

// required string order_id = 4;
inline bool FutureOrderResp::has_order_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FutureOrderResp::set_has_order_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FutureOrderResp::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FutureOrderResp::clear_order_id() {
  order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_id();
}
inline const ::std::string& FutureOrderResp::order_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderResp.order_id)
  return order_id_.GetNoArena();
}
inline void FutureOrderResp::set_order_id(const ::std::string& value) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderResp.order_id)
}
#if LANG_CXX11
inline void FutureOrderResp::set_order_id(::std::string&& value) {
  set_has_order_id();
  order_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureOrderResp.order_id)
}
#endif
inline void FutureOrderResp::set_order_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureOrderResp.order_id)
}
inline void FutureOrderResp::set_order_id(const char* value, size_t size) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureOrderResp.order_id)
}
inline ::std::string* FutureOrderResp::mutable_order_id() {
  set_has_order_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureOrderResp.order_id)
  return order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureOrderResp::release_order_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureOrderResp.order_id)
  if (!has_order_id()) {
    return NULL;
  }
  clear_has_order_id();
  return order_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureOrderResp::set_allocated_order_id(::std::string* order_id) {
  if (order_id != NULL) {
    set_has_order_id();
  } else {
    clear_has_order_id();
  }
  order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureOrderResp.order_id)
}

// -------------------------------------------------------------------

// FutureDeleteReqt

// optional int32 funcid = 1 [default = 12001002];
inline bool FutureDeleteReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FutureDeleteReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FutureDeleteReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FutureDeleteReqt::clear_funcid() {
  funcid_ = 12001002;
  clear_has_funcid();
}
inline ::google::protobuf::int32 FutureDeleteReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureDeleteReqt.funcid)
  return funcid_;
}
inline void FutureDeleteReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureDeleteReqt.funcid)
}

// required string order_group = 2;
inline bool FutureDeleteReqt::has_order_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FutureDeleteReqt::set_has_order_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FutureDeleteReqt::clear_has_order_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FutureDeleteReqt::clear_order_group() {
  order_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_group();
}
inline const ::std::string& FutureDeleteReqt::order_group() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureDeleteReqt.order_group)
  return order_group_.GetNoArena();
}
inline void FutureDeleteReqt::set_order_group(const ::std::string& value) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureDeleteReqt.order_group)
}
#if LANG_CXX11
inline void FutureDeleteReqt::set_order_group(::std::string&& value) {
  set_has_order_group();
  order_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureDeleteReqt.order_group)
}
#endif
inline void FutureDeleteReqt::set_order_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureDeleteReqt.order_group)
}
inline void FutureDeleteReqt::set_order_group(const char* value, size_t size) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureDeleteReqt.order_group)
}
inline ::std::string* FutureDeleteReqt::mutable_order_group() {
  set_has_order_group();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureDeleteReqt.order_group)
  return order_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureDeleteReqt::release_order_group() {
  // @@protoc_insertion_point(field_release:autotrade.FutureDeleteReqt.order_group)
  if (!has_order_group()) {
    return NULL;
  }
  clear_has_order_group();
  return order_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureDeleteReqt::set_allocated_order_group(::std::string* order_group) {
  if (order_group != NULL) {
    set_has_order_group();
  } else {
    clear_has_order_group();
  }
  order_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_group);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureDeleteReqt.order_group)
}

// optional uint32 market = 3 [default = 0];
inline bool FutureDeleteReqt::has_market() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FutureDeleteReqt::set_has_market() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FutureDeleteReqt::clear_has_market() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FutureDeleteReqt::clear_market() {
  market_ = 0u;
  clear_has_market();
}
inline ::google::protobuf::uint32 FutureDeleteReqt::market() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureDeleteReqt.market)
  return market_;
}
inline void FutureDeleteReqt::set_market(::google::protobuf::uint32 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureDeleteReqt.market)
}

// optional string request_id = 4;
inline bool FutureDeleteReqt::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FutureDeleteReqt::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FutureDeleteReqt::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FutureDeleteReqt::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& FutureDeleteReqt::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureDeleteReqt.request_id)
  return request_id_.GetNoArena();
}
inline void FutureDeleteReqt::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureDeleteReqt.request_id)
}
#if LANG_CXX11
inline void FutureDeleteReqt::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureDeleteReqt.request_id)
}
#endif
inline void FutureDeleteReqt::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureDeleteReqt.request_id)
}
inline void FutureDeleteReqt::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureDeleteReqt.request_id)
}
inline ::std::string* FutureDeleteReqt::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureDeleteReqt.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureDeleteReqt::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureDeleteReqt.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureDeleteReqt::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureDeleteReqt.request_id)
}

// optional string fund_id = 5;
inline bool FutureDeleteReqt::has_fund_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FutureDeleteReqt::set_has_fund_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FutureDeleteReqt::clear_has_fund_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FutureDeleteReqt::clear_fund_id() {
  fund_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fund_id();
}
inline const ::std::string& FutureDeleteReqt::fund_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureDeleteReqt.fund_id)
  return fund_id_.GetNoArena();
}
inline void FutureDeleteReqt::set_fund_id(const ::std::string& value) {
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureDeleteReqt.fund_id)
}
#if LANG_CXX11
inline void FutureDeleteReqt::set_fund_id(::std::string&& value) {
  set_has_fund_id();
  fund_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureDeleteReqt.fund_id)
}
#endif
inline void FutureDeleteReqt::set_fund_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureDeleteReqt.fund_id)
}
inline void FutureDeleteReqt::set_fund_id(const char* value, size_t size) {
  set_has_fund_id();
  fund_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureDeleteReqt.fund_id)
}
inline ::std::string* FutureDeleteReqt::mutable_fund_id() {
  set_has_fund_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureDeleteReqt.fund_id)
  return fund_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureDeleteReqt::release_fund_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureDeleteReqt.fund_id)
  if (!has_fund_id()) {
    return NULL;
  }
  clear_has_fund_id();
  return fund_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureDeleteReqt::set_allocated_fund_id(::std::string* fund_id) {
  if (fund_id != NULL) {
    set_has_fund_id();
  } else {
    clear_has_fund_id();
  }
  fund_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fund_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureDeleteReqt.fund_id)
}

// optional string trader_id = 6;
inline bool FutureDeleteReqt::has_trader_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FutureDeleteReqt::set_has_trader_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FutureDeleteReqt::clear_has_trader_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FutureDeleteReqt::clear_trader_id() {
  trader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trader_id();
}
inline const ::std::string& FutureDeleteReqt::trader_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureDeleteReqt.trader_id)
  return trader_id_.GetNoArena();
}
inline void FutureDeleteReqt::set_trader_id(const ::std::string& value) {
  set_has_trader_id();
  trader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureDeleteReqt.trader_id)
}
#if LANG_CXX11
inline void FutureDeleteReqt::set_trader_id(::std::string&& value) {
  set_has_trader_id();
  trader_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureDeleteReqt.trader_id)
}
#endif
inline void FutureDeleteReqt::set_trader_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trader_id();
  trader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureDeleteReqt.trader_id)
}
inline void FutureDeleteReqt::set_trader_id(const char* value, size_t size) {
  set_has_trader_id();
  trader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureDeleteReqt.trader_id)
}
inline ::std::string* FutureDeleteReqt::mutable_trader_id() {
  set_has_trader_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureDeleteReqt.trader_id)
  return trader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureDeleteReqt::release_trader_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureDeleteReqt.trader_id)
  if (!has_trader_id()) {
    return NULL;
  }
  clear_has_trader_id();
  return trader_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureDeleteReqt::set_allocated_trader_id(::std::string* trader_id) {
  if (trader_id != NULL) {
    set_has_trader_id();
  } else {
    clear_has_trader_id();
  }
  trader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trader_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureDeleteReqt.trader_id)
}

// optional string session_id = 7;
inline bool FutureDeleteReqt::has_session_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FutureDeleteReqt::set_has_session_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FutureDeleteReqt::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FutureDeleteReqt::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_session_id();
}
inline const ::std::string& FutureDeleteReqt::session_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureDeleteReqt.session_id)
  return session_id_.GetNoArena();
}
inline void FutureDeleteReqt::set_session_id(const ::std::string& value) {
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureDeleteReqt.session_id)
}
#if LANG_CXX11
inline void FutureDeleteReqt::set_session_id(::std::string&& value) {
  set_has_session_id();
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureDeleteReqt.session_id)
}
#endif
inline void FutureDeleteReqt::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureDeleteReqt.session_id)
}
inline void FutureDeleteReqt::set_session_id(const char* value, size_t size) {
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureDeleteReqt.session_id)
}
inline ::std::string* FutureDeleteReqt::mutable_session_id() {
  set_has_session_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureDeleteReqt.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureDeleteReqt::release_session_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureDeleteReqt.session_id)
  if (!has_session_id()) {
    return NULL;
  }
  clear_has_session_id();
  return session_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureDeleteReqt::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    set_has_session_id();
  } else {
    clear_has_session_id();
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureDeleteReqt.session_id)
}

// -------------------------------------------------------------------

// FutureDeleteResp

// optional int32 funcid = 1 [default = 12101002];
inline bool FutureDeleteResp::has_funcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FutureDeleteResp::set_has_funcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FutureDeleteResp::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FutureDeleteResp::clear_funcid() {
  funcid_ = 12101002;
  clear_has_funcid();
}
inline ::google::protobuf::int32 FutureDeleteResp::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureDeleteResp.funcid)
  return funcid_;
}
inline void FutureDeleteResp::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureDeleteResp.funcid)
}

// optional string request_id = 2;
inline bool FutureDeleteResp::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FutureDeleteResp::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FutureDeleteResp::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FutureDeleteResp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& FutureDeleteResp::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureDeleteResp.request_id)
  return request_id_.GetNoArena();
}
inline void FutureDeleteResp::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureDeleteResp.request_id)
}
#if LANG_CXX11
inline void FutureDeleteResp::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureDeleteResp.request_id)
}
#endif
inline void FutureDeleteResp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureDeleteResp.request_id)
}
inline void FutureDeleteResp::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureDeleteResp.request_id)
}
inline ::std::string* FutureDeleteResp::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureDeleteResp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureDeleteResp::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureDeleteResp.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureDeleteResp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureDeleteResp.request_id)
}

// -------------------------------------------------------------------

// FutureQueryOrderReqt

// optional int32 funcid = 1 [default = 12002002];
inline bool FutureQueryOrderReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FutureQueryOrderReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FutureQueryOrderReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FutureQueryOrderReqt::clear_funcid() {
  funcid_ = 12002002;
  clear_has_funcid();
}
inline ::google::protobuf::int32 FutureQueryOrderReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQueryOrderReqt.funcid)
  return funcid_;
}
inline void FutureQueryOrderReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureQueryOrderReqt.funcid)
}

// optional string orderno = 2 [default = ""];
inline bool FutureQueryOrderReqt::has_orderno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FutureQueryOrderReqt::set_has_orderno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FutureQueryOrderReqt::clear_has_orderno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FutureQueryOrderReqt::clear_orderno() {
  orderno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_orderno();
}
inline const ::std::string& FutureQueryOrderReqt::orderno() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQueryOrderReqt.orderno)
  return orderno_.GetNoArena();
}
inline void FutureQueryOrderReqt::set_orderno(const ::std::string& value) {
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureQueryOrderReqt.orderno)
}
#if LANG_CXX11
inline void FutureQueryOrderReqt::set_orderno(::std::string&& value) {
  set_has_orderno();
  orderno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureQueryOrderReqt.orderno)
}
#endif
inline void FutureQueryOrderReqt::set_orderno(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureQueryOrderReqt.orderno)
}
inline void FutureQueryOrderReqt::set_orderno(const char* value, size_t size) {
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureQueryOrderReqt.orderno)
}
inline ::std::string* FutureQueryOrderReqt::mutable_orderno() {
  set_has_orderno();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureQueryOrderReqt.orderno)
  return orderno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureQueryOrderReqt::release_orderno() {
  // @@protoc_insertion_point(field_release:autotrade.FutureQueryOrderReqt.orderno)
  if (!has_orderno()) {
    return NULL;
  }
  clear_has_orderno();
  return orderno_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureQueryOrderReqt::set_allocated_orderno(::std::string* orderno) {
  if (orderno != NULL) {
    set_has_orderno();
  } else {
    clear_has_orderno();
  }
  orderno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderno);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureQueryOrderReqt.orderno)
}

// optional string start_pos = 3 [default = ""];
inline bool FutureQueryOrderReqt::has_start_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FutureQueryOrderReqt::set_has_start_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FutureQueryOrderReqt::clear_has_start_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FutureQueryOrderReqt::clear_start_pos() {
  start_pos_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_start_pos();
}
inline const ::std::string& FutureQueryOrderReqt::start_pos() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQueryOrderReqt.start_pos)
  return start_pos_.GetNoArena();
}
inline void FutureQueryOrderReqt::set_start_pos(const ::std::string& value) {
  set_has_start_pos();
  start_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureQueryOrderReqt.start_pos)
}
#if LANG_CXX11
inline void FutureQueryOrderReqt::set_start_pos(::std::string&& value) {
  set_has_start_pos();
  start_pos_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureQueryOrderReqt.start_pos)
}
#endif
inline void FutureQueryOrderReqt::set_start_pos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_start_pos();
  start_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureQueryOrderReqt.start_pos)
}
inline void FutureQueryOrderReqt::set_start_pos(const char* value, size_t size) {
  set_has_start_pos();
  start_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureQueryOrderReqt.start_pos)
}
inline ::std::string* FutureQueryOrderReqt::mutable_start_pos() {
  set_has_start_pos();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureQueryOrderReqt.start_pos)
  return start_pos_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureQueryOrderReqt::release_start_pos() {
  // @@protoc_insertion_point(field_release:autotrade.FutureQueryOrderReqt.start_pos)
  if (!has_start_pos()) {
    return NULL;
  }
  clear_has_start_pos();
  return start_pos_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureQueryOrderReqt::set_allocated_start_pos(::std::string* start_pos) {
  if (start_pos != NULL) {
    set_has_start_pos();
  } else {
    clear_has_start_pos();
  }
  start_pos_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_pos);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureQueryOrderReqt.start_pos)
}

// optional string request_id = 4;
inline bool FutureQueryOrderReqt::has_request_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FutureQueryOrderReqt::set_has_request_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FutureQueryOrderReqt::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FutureQueryOrderReqt::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& FutureQueryOrderReqt::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQueryOrderReqt.request_id)
  return request_id_.GetNoArena();
}
inline void FutureQueryOrderReqt::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureQueryOrderReqt.request_id)
}
#if LANG_CXX11
inline void FutureQueryOrderReqt::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureQueryOrderReqt.request_id)
}
#endif
inline void FutureQueryOrderReqt::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureQueryOrderReqt.request_id)
}
inline void FutureQueryOrderReqt::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureQueryOrderReqt.request_id)
}
inline ::std::string* FutureQueryOrderReqt::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureQueryOrderReqt.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureQueryOrderReqt::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureQueryOrderReqt.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureQueryOrderReqt::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureQueryOrderReqt.request_id)
}

// optional int64 request_date = 5;
inline bool FutureQueryOrderReqt::has_request_date() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FutureQueryOrderReqt::set_has_request_date() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FutureQueryOrderReqt::clear_has_request_date() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FutureQueryOrderReqt::clear_request_date() {
  request_date_ = GOOGLE_LONGLONG(0);
  clear_has_request_date();
}
inline ::google::protobuf::int64 FutureQueryOrderReqt::request_date() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQueryOrderReqt.request_date)
  return request_date_;
}
inline void FutureQueryOrderReqt::set_request_date(::google::protobuf::int64 value) {
  set_has_request_date();
  request_date_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureQueryOrderReqt.request_date)
}

// optional int64 request_time = 6;
inline bool FutureQueryOrderReqt::has_request_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FutureQueryOrderReqt::set_has_request_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FutureQueryOrderReqt::clear_has_request_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FutureQueryOrderReqt::clear_request_time() {
  request_time_ = GOOGLE_LONGLONG(0);
  clear_has_request_time();
}
inline ::google::protobuf::int64 FutureQueryOrderReqt::request_time() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQueryOrderReqt.request_time)
  return request_time_;
}
inline void FutureQueryOrderReqt::set_request_time(::google::protobuf::int64 value) {
  set_has_request_time();
  request_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureQueryOrderReqt.request_time)
}

// optional int64 active_interval = 7 [default = 10000];
inline bool FutureQueryOrderReqt::has_active_interval() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FutureQueryOrderReqt::set_has_active_interval() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FutureQueryOrderReqt::clear_has_active_interval() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FutureQueryOrderReqt::clear_active_interval() {
  active_interval_ = GOOGLE_LONGLONG(10000);
  clear_has_active_interval();
}
inline ::google::protobuf::int64 FutureQueryOrderReqt::active_interval() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQueryOrderReqt.active_interval)
  return active_interval_;
}
inline void FutureQueryOrderReqt::set_active_interval(::google::protobuf::int64 value) {
  set_has_active_interval();
  active_interval_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureQueryOrderReqt.active_interval)
}

// -------------------------------------------------------------------

// FutureOrderInfo_OrderDetail

// optional uint64 match_time = 1;
inline bool FutureOrderInfo_OrderDetail::has_match_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FutureOrderInfo_OrderDetail::set_has_match_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FutureOrderInfo_OrderDetail::clear_has_match_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FutureOrderInfo_OrderDetail::clear_match_time() {
  match_time_ = GOOGLE_ULONGLONG(0);
  clear_has_match_time();
}
inline ::google::protobuf::uint64 FutureOrderInfo_OrderDetail::match_time() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderInfo.OrderDetail.match_time)
  return match_time_;
}
inline void FutureOrderInfo_OrderDetail::set_match_time(::google::protobuf::uint64 value) {
  set_has_match_time();
  match_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderInfo.OrderDetail.match_time)
}

// required string orderno = 2;
inline bool FutureOrderInfo_OrderDetail::has_orderno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FutureOrderInfo_OrderDetail::set_has_orderno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FutureOrderInfo_OrderDetail::clear_has_orderno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FutureOrderInfo_OrderDetail::clear_orderno() {
  orderno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_orderno();
}
inline const ::std::string& FutureOrderInfo_OrderDetail::orderno() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderInfo.OrderDetail.orderno)
  return orderno_.GetNoArena();
}
inline void FutureOrderInfo_OrderDetail::set_orderno(const ::std::string& value) {
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderInfo.OrderDetail.orderno)
}
#if LANG_CXX11
inline void FutureOrderInfo_OrderDetail::set_orderno(::std::string&& value) {
  set_has_orderno();
  orderno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureOrderInfo.OrderDetail.orderno)
}
#endif
inline void FutureOrderInfo_OrderDetail::set_orderno(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureOrderInfo.OrderDetail.orderno)
}
inline void FutureOrderInfo_OrderDetail::set_orderno(const char* value, size_t size) {
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureOrderInfo.OrderDetail.orderno)
}
inline ::std::string* FutureOrderInfo_OrderDetail::mutable_orderno() {
  set_has_orderno();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureOrderInfo.OrderDetail.orderno)
  return orderno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureOrderInfo_OrderDetail::release_orderno() {
  // @@protoc_insertion_point(field_release:autotrade.FutureOrderInfo.OrderDetail.orderno)
  if (!has_orderno()) {
    return NULL;
  }
  clear_has_orderno();
  return orderno_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureOrderInfo_OrderDetail::set_allocated_orderno(::std::string* orderno) {
  if (orderno != NULL) {
    set_has_orderno();
  } else {
    clear_has_orderno();
  }
  orderno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderno);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureOrderInfo.OrderDetail.orderno)
}

// required uint32 bsflag = 3;
inline bool FutureOrderInfo_OrderDetail::has_bsflag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FutureOrderInfo_OrderDetail::set_has_bsflag() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FutureOrderInfo_OrderDetail::clear_has_bsflag() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FutureOrderInfo_OrderDetail::clear_bsflag() {
  bsflag_ = 0u;
  clear_has_bsflag();
}
inline ::google::protobuf::uint32 FutureOrderInfo_OrderDetail::bsflag() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderInfo.OrderDetail.bsflag)
  return bsflag_;
}
inline void FutureOrderInfo_OrderDetail::set_bsflag(::google::protobuf::uint32 value) {
  set_has_bsflag();
  bsflag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderInfo.OrderDetail.bsflag)
}

// optional uint64 sumbit_time = 5;
inline bool FutureOrderInfo_OrderDetail::has_sumbit_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FutureOrderInfo_OrderDetail::set_has_sumbit_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FutureOrderInfo_OrderDetail::clear_has_sumbit_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FutureOrderInfo_OrderDetail::clear_sumbit_time() {
  sumbit_time_ = GOOGLE_ULONGLONG(0);
  clear_has_sumbit_time();
}
inline ::google::protobuf::uint64 FutureOrderInfo_OrderDetail::sumbit_time() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderInfo.OrderDetail.sumbit_time)
  return sumbit_time_;
}
inline void FutureOrderInfo_OrderDetail::set_sumbit_time(::google::protobuf::uint64 value) {
  set_has_sumbit_time();
  sumbit_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderInfo.OrderDetail.sumbit_time)
}

// required uint64 order_time = 6;
inline bool FutureOrderInfo_OrderDetail::has_order_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FutureOrderInfo_OrderDetail::set_has_order_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FutureOrderInfo_OrderDetail::clear_has_order_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FutureOrderInfo_OrderDetail::clear_order_time() {
  order_time_ = GOOGLE_ULONGLONG(0);
  clear_has_order_time();
}
inline ::google::protobuf::uint64 FutureOrderInfo_OrderDetail::order_time() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderInfo.OrderDetail.order_time)
  return order_time_;
}
inline void FutureOrderInfo_OrderDetail::set_order_time(::google::protobuf::uint64 value) {
  set_has_order_time();
  order_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderInfo.OrderDetail.order_time)
}

// required string code = 8;
inline bool FutureOrderInfo_OrderDetail::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FutureOrderInfo_OrderDetail::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FutureOrderInfo_OrderDetail::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FutureOrderInfo_OrderDetail::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& FutureOrderInfo_OrderDetail::code() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderInfo.OrderDetail.code)
  return code_.GetNoArena();
}
inline void FutureOrderInfo_OrderDetail::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderInfo.OrderDetail.code)
}
#if LANG_CXX11
inline void FutureOrderInfo_OrderDetail::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureOrderInfo.OrderDetail.code)
}
#endif
inline void FutureOrderInfo_OrderDetail::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureOrderInfo.OrderDetail.code)
}
inline void FutureOrderInfo_OrderDetail::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureOrderInfo.OrderDetail.code)
}
inline ::std::string* FutureOrderInfo_OrderDetail::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureOrderInfo.OrderDetail.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureOrderInfo_OrderDetail::release_code() {
  // @@protoc_insertion_point(field_release:autotrade.FutureOrderInfo.OrderDetail.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureOrderInfo_OrderDetail::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureOrderInfo.OrderDetail.code)
}

// required int64 order_price = 9;
inline bool FutureOrderInfo_OrderDetail::has_order_price() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FutureOrderInfo_OrderDetail::set_has_order_price() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FutureOrderInfo_OrderDetail::clear_has_order_price() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FutureOrderInfo_OrderDetail::clear_order_price() {
  order_price_ = GOOGLE_LONGLONG(0);
  clear_has_order_price();
}
inline ::google::protobuf::int64 FutureOrderInfo_OrderDetail::order_price() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderInfo.OrderDetail.order_price)
  return order_price_;
}
inline void FutureOrderInfo_OrderDetail::set_order_price(::google::protobuf::int64 value) {
  set_has_order_price();
  order_price_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderInfo.OrderDetail.order_price)
}

// required uint32 order_qty = 10;
inline bool FutureOrderInfo_OrderDetail::has_order_qty() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FutureOrderInfo_OrderDetail::set_has_order_qty() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FutureOrderInfo_OrderDetail::clear_has_order_qty() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FutureOrderInfo_OrderDetail::clear_order_qty() {
  order_qty_ = 0u;
  clear_has_order_qty();
}
inline ::google::protobuf::uint32 FutureOrderInfo_OrderDetail::order_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderInfo.OrderDetail.order_qty)
  return order_qty_;
}
inline void FutureOrderInfo_OrderDetail::set_order_qty(::google::protobuf::uint32 value) {
  set_has_order_qty();
  order_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderInfo.OrderDetail.order_qty)
}

// required double order_frz_amt = 11;
inline bool FutureOrderInfo_OrderDetail::has_order_frz_amt() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FutureOrderInfo_OrderDetail::set_has_order_frz_amt() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FutureOrderInfo_OrderDetail::clear_has_order_frz_amt() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FutureOrderInfo_OrderDetail::clear_order_frz_amt() {
  order_frz_amt_ = 0;
  clear_has_order_frz_amt();
}
inline double FutureOrderInfo_OrderDetail::order_frz_amt() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderInfo.OrderDetail.order_frz_amt)
  return order_frz_amt_;
}
inline void FutureOrderInfo_OrderDetail::set_order_frz_amt(double value) {
  set_has_order_frz_amt();
  order_frz_amt_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderInfo.OrderDetail.order_frz_amt)
}

// required double match_amt = 12;
inline bool FutureOrderInfo_OrderDetail::has_match_amt() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FutureOrderInfo_OrderDetail::set_has_match_amt() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FutureOrderInfo_OrderDetail::clear_has_match_amt() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FutureOrderInfo_OrderDetail::clear_match_amt() {
  match_amt_ = 0;
  clear_has_match_amt();
}
inline double FutureOrderInfo_OrderDetail::match_amt() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderInfo.OrderDetail.match_amt)
  return match_amt_;
}
inline void FutureOrderInfo_OrderDetail::set_match_amt(double value) {
  set_has_match_amt();
  match_amt_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderInfo.OrderDetail.match_amt)
}

// required uint32 match_qty = 13;
inline bool FutureOrderInfo_OrderDetail::has_match_qty() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FutureOrderInfo_OrderDetail::set_has_match_qty() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FutureOrderInfo_OrderDetail::clear_has_match_qty() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FutureOrderInfo_OrderDetail::clear_match_qty() {
  match_qty_ = 0u;
  clear_has_match_qty();
}
inline ::google::protobuf::uint32 FutureOrderInfo_OrderDetail::match_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderInfo.OrderDetail.match_qty)
  return match_qty_;
}
inline void FutureOrderInfo_OrderDetail::set_match_qty(::google::protobuf::uint32 value) {
  set_has_match_qty();
  match_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderInfo.OrderDetail.match_qty)
}

// required uint32 unmatch_qty = 14;
inline bool FutureOrderInfo_OrderDetail::has_unmatch_qty() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FutureOrderInfo_OrderDetail::set_has_unmatch_qty() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FutureOrderInfo_OrderDetail::clear_has_unmatch_qty() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FutureOrderInfo_OrderDetail::clear_unmatch_qty() {
  unmatch_qty_ = 0u;
  clear_has_unmatch_qty();
}
inline ::google::protobuf::uint32 FutureOrderInfo_OrderDetail::unmatch_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderInfo.OrderDetail.unmatch_qty)
  return unmatch_qty_;
}
inline void FutureOrderInfo_OrderDetail::set_unmatch_qty(::google::protobuf::uint32 value) {
  set_has_unmatch_qty();
  unmatch_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderInfo.OrderDetail.unmatch_qty)
}

// required uint32 order_status = 15;
inline bool FutureOrderInfo_OrderDetail::has_order_status() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void FutureOrderInfo_OrderDetail::set_has_order_status() {
  _has_bits_[0] |= 0x00002000u;
}
inline void FutureOrderInfo_OrderDetail::clear_has_order_status() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void FutureOrderInfo_OrderDetail::clear_order_status() {
  order_status_ = 0u;
  clear_has_order_status();
}
inline ::google::protobuf::uint32 FutureOrderInfo_OrderDetail::order_status() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderInfo.OrderDetail.order_status)
  return order_status_;
}
inline void FutureOrderInfo_OrderDetail::set_order_status(::google::protobuf::uint32 value) {
  set_has_order_status();
  order_status_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderInfo.OrderDetail.order_status)
}

// optional string name = 16;
inline bool FutureOrderInfo_OrderDetail::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FutureOrderInfo_OrderDetail::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FutureOrderInfo_OrderDetail::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FutureOrderInfo_OrderDetail::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& FutureOrderInfo_OrderDetail::name() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderInfo.OrderDetail.name)
  return name_.GetNoArena();
}
inline void FutureOrderInfo_OrderDetail::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderInfo.OrderDetail.name)
}
#if LANG_CXX11
inline void FutureOrderInfo_OrderDetail::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureOrderInfo.OrderDetail.name)
}
#endif
inline void FutureOrderInfo_OrderDetail::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureOrderInfo.OrderDetail.name)
}
inline void FutureOrderInfo_OrderDetail::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureOrderInfo.OrderDetail.name)
}
inline ::std::string* FutureOrderInfo_OrderDetail::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureOrderInfo.OrderDetail.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureOrderInfo_OrderDetail::release_name() {
  // @@protoc_insertion_point(field_release:autotrade.FutureOrderInfo.OrderDetail.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureOrderInfo_OrderDetail::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureOrderInfo.OrderDetail.name)
}

// required int64 match_avg_price = 17;
inline bool FutureOrderInfo_OrderDetail::has_match_avg_price() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void FutureOrderInfo_OrderDetail::set_has_match_avg_price() {
  _has_bits_[0] |= 0x00008000u;
}
inline void FutureOrderInfo_OrderDetail::clear_has_match_avg_price() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void FutureOrderInfo_OrderDetail::clear_match_avg_price() {
  match_avg_price_ = GOOGLE_LONGLONG(0);
  clear_has_match_avg_price();
}
inline ::google::protobuf::int64 FutureOrderInfo_OrderDetail::match_avg_price() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderInfo.OrderDetail.match_avg_price)
  return match_avg_price_;
}
inline void FutureOrderInfo_OrderDetail::set_match_avg_price(::google::protobuf::int64 value) {
  set_has_match_avg_price();
  match_avg_price_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderInfo.OrderDetail.match_avg_price)
}

// optional uint32 market = 18;
inline bool FutureOrderInfo_OrderDetail::has_market() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FutureOrderInfo_OrderDetail::set_has_market() {
  _has_bits_[0] |= 0x00004000u;
}
inline void FutureOrderInfo_OrderDetail::clear_has_market() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void FutureOrderInfo_OrderDetail::clear_market() {
  market_ = 0u;
  clear_has_market();
}
inline ::google::protobuf::uint32 FutureOrderInfo_OrderDetail::market() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderInfo.OrderDetail.market)
  return market_;
}
inline void FutureOrderInfo_OrderDetail::set_market(::google::protobuf::uint32 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderInfo.OrderDetail.market)
}

// optional int64 cancel_qty = 19;
inline bool FutureOrderInfo_OrderDetail::has_cancel_qty() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void FutureOrderInfo_OrderDetail::set_has_cancel_qty() {
  _has_bits_[0] |= 0x00010000u;
}
inline void FutureOrderInfo_OrderDetail::clear_has_cancel_qty() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void FutureOrderInfo_OrderDetail::clear_cancel_qty() {
  cancel_qty_ = GOOGLE_LONGLONG(0);
  clear_has_cancel_qty();
}
inline ::google::protobuf::int64 FutureOrderInfo_OrderDetail::cancel_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderInfo.OrderDetail.cancel_qty)
  return cancel_qty_;
}
inline void FutureOrderInfo_OrderDetail::set_cancel_qty(::google::protobuf::int64 value) {
  set_has_cancel_qty();
  cancel_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderInfo.OrderDetail.cancel_qty)
}

// optional int64 hedge_flag = 20;
inline bool FutureOrderInfo_OrderDetail::has_hedge_flag() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void FutureOrderInfo_OrderDetail::set_has_hedge_flag() {
  _has_bits_[0] |= 0x00020000u;
}
inline void FutureOrderInfo_OrderDetail::clear_has_hedge_flag() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void FutureOrderInfo_OrderDetail::clear_hedge_flag() {
  hedge_flag_ = GOOGLE_LONGLONG(0);
  clear_has_hedge_flag();
}
inline ::google::protobuf::int64 FutureOrderInfo_OrderDetail::hedge_flag() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderInfo.OrderDetail.hedge_flag)
  return hedge_flag_;
}
inline void FutureOrderInfo_OrderDetail::set_hedge_flag(::google::protobuf::int64 value) {
  set_has_hedge_flag();
  hedge_flag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderInfo.OrderDetail.hedge_flag)
}

// optional int64 kpcbj = 21;
inline bool FutureOrderInfo_OrderDetail::has_kpcbj() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void FutureOrderInfo_OrderDetail::set_has_kpcbj() {
  _has_bits_[0] |= 0x00040000u;
}
inline void FutureOrderInfo_OrderDetail::clear_has_kpcbj() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void FutureOrderInfo_OrderDetail::clear_kpcbj() {
  kpcbj_ = GOOGLE_LONGLONG(0);
  clear_has_kpcbj();
}
inline ::google::protobuf::int64 FutureOrderInfo_OrderDetail::kpcbj() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderInfo.OrderDetail.kpcbj)
  return kpcbj_;
}
inline void FutureOrderInfo_OrderDetail::set_kpcbj(::google::protobuf::int64 value) {
  set_has_kpcbj();
  kpcbj_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderInfo.OrderDetail.kpcbj)
}

// optional int64 price_type = 22;
inline bool FutureOrderInfo_OrderDetail::has_price_type() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void FutureOrderInfo_OrderDetail::set_has_price_type() {
  _has_bits_[0] |= 0x00080000u;
}
inline void FutureOrderInfo_OrderDetail::clear_has_price_type() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void FutureOrderInfo_OrderDetail::clear_price_type() {
  price_type_ = GOOGLE_LONGLONG(0);
  clear_has_price_type();
}
inline ::google::protobuf::int64 FutureOrderInfo_OrderDetail::price_type() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderInfo.OrderDetail.price_type)
  return price_type_;
}
inline void FutureOrderInfo_OrderDetail::set_price_type(::google::protobuf::int64 value) {
  set_has_price_type();
  price_type_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderInfo.OrderDetail.price_type)
}

// -------------------------------------------------------------------

// FutureOrderInfo

// optional int32 funcid = 1 [default = 12102002];
inline bool FutureOrderInfo::has_funcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FutureOrderInfo::set_has_funcid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FutureOrderInfo::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FutureOrderInfo::clear_funcid() {
  funcid_ = 12102002;
  clear_has_funcid();
}
inline ::google::protobuf::int32 FutureOrderInfo::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderInfo.funcid)
  return funcid_;
}
inline void FutureOrderInfo::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderInfo.funcid)
}

// repeated .autotrade.FutureOrderInfo.OrderDetail detail_list = 2;
inline int FutureOrderInfo::detail_list_size() const {
  return detail_list_.size();
}
inline void FutureOrderInfo::clear_detail_list() {
  detail_list_.Clear();
}
inline ::autotrade::FutureOrderInfo_OrderDetail* FutureOrderInfo::mutable_detail_list(int index) {
  // @@protoc_insertion_point(field_mutable:autotrade.FutureOrderInfo.detail_list)
  return detail_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::autotrade::FutureOrderInfo_OrderDetail >*
FutureOrderInfo::mutable_detail_list() {
  // @@protoc_insertion_point(field_mutable_list:autotrade.FutureOrderInfo.detail_list)
  return &detail_list_;
}
inline const ::autotrade::FutureOrderInfo_OrderDetail& FutureOrderInfo::detail_list(int index) const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderInfo.detail_list)
  return detail_list_.Get(index);
}
inline ::autotrade::FutureOrderInfo_OrderDetail* FutureOrderInfo::add_detail_list() {
  // @@protoc_insertion_point(field_add:autotrade.FutureOrderInfo.detail_list)
  return detail_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::autotrade::FutureOrderInfo_OrderDetail >&
FutureOrderInfo::detail_list() const {
  // @@protoc_insertion_point(field_list:autotrade.FutureOrderInfo.detail_list)
  return detail_list_;
}

// optional string request_id = 3;
inline bool FutureOrderInfo::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FutureOrderInfo::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FutureOrderInfo::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FutureOrderInfo::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& FutureOrderInfo::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderInfo.request_id)
  return request_id_.GetNoArena();
}
inline void FutureOrderInfo::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderInfo.request_id)
}
#if LANG_CXX11
inline void FutureOrderInfo::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureOrderInfo.request_id)
}
#endif
inline void FutureOrderInfo::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureOrderInfo.request_id)
}
inline void FutureOrderInfo::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureOrderInfo.request_id)
}
inline ::std::string* FutureOrderInfo::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureOrderInfo.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureOrderInfo::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureOrderInfo.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureOrderInfo::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureOrderInfo.request_id)
}

// optional string last_pos = 4;
inline bool FutureOrderInfo::has_last_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FutureOrderInfo::set_has_last_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FutureOrderInfo::clear_has_last_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FutureOrderInfo::clear_last_pos() {
  last_pos_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_last_pos();
}
inline const ::std::string& FutureOrderInfo::last_pos() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderInfo.last_pos)
  return last_pos_.GetNoArena();
}
inline void FutureOrderInfo::set_last_pos(const ::std::string& value) {
  set_has_last_pos();
  last_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderInfo.last_pos)
}
#if LANG_CXX11
inline void FutureOrderInfo::set_last_pos(::std::string&& value) {
  set_has_last_pos();
  last_pos_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureOrderInfo.last_pos)
}
#endif
inline void FutureOrderInfo::set_last_pos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_last_pos();
  last_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureOrderInfo.last_pos)
}
inline void FutureOrderInfo::set_last_pos(const char* value, size_t size) {
  set_has_last_pos();
  last_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureOrderInfo.last_pos)
}
inline ::std::string* FutureOrderInfo::mutable_last_pos() {
  set_has_last_pos();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureOrderInfo.last_pos)
  return last_pos_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureOrderInfo::release_last_pos() {
  // @@protoc_insertion_point(field_release:autotrade.FutureOrderInfo.last_pos)
  if (!has_last_pos()) {
    return NULL;
  }
  clear_has_last_pos();
  return last_pos_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureOrderInfo::set_allocated_last_pos(::std::string* last_pos) {
  if (last_pos != NULL) {
    set_has_last_pos();
  } else {
    clear_has_last_pos();
  }
  last_pos_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_pos);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureOrderInfo.last_pos)
}

// -------------------------------------------------------------------

// FutureQueryCaptialReqt

// optional int32 funcid = 1 [default = 12002001];
inline bool FutureQueryCaptialReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FutureQueryCaptialReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FutureQueryCaptialReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FutureQueryCaptialReqt::clear_funcid() {
  funcid_ = 12002001;
  clear_has_funcid();
}
inline ::google::protobuf::int32 FutureQueryCaptialReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQueryCaptialReqt.funcid)
  return funcid_;
}
inline void FutureQueryCaptialReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureQueryCaptialReqt.funcid)
}

// optional string moneytype = 2;
inline bool FutureQueryCaptialReqt::has_moneytype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FutureQueryCaptialReqt::set_has_moneytype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FutureQueryCaptialReqt::clear_has_moneytype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FutureQueryCaptialReqt::clear_moneytype() {
  moneytype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_moneytype();
}
inline const ::std::string& FutureQueryCaptialReqt::moneytype() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQueryCaptialReqt.moneytype)
  return moneytype_.GetNoArena();
}
inline void FutureQueryCaptialReqt::set_moneytype(const ::std::string& value) {
  set_has_moneytype();
  moneytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureQueryCaptialReqt.moneytype)
}
#if LANG_CXX11
inline void FutureQueryCaptialReqt::set_moneytype(::std::string&& value) {
  set_has_moneytype();
  moneytype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureQueryCaptialReqt.moneytype)
}
#endif
inline void FutureQueryCaptialReqt::set_moneytype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_moneytype();
  moneytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureQueryCaptialReqt.moneytype)
}
inline void FutureQueryCaptialReqt::set_moneytype(const char* value, size_t size) {
  set_has_moneytype();
  moneytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureQueryCaptialReqt.moneytype)
}
inline ::std::string* FutureQueryCaptialReqt::mutable_moneytype() {
  set_has_moneytype();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureQueryCaptialReqt.moneytype)
  return moneytype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureQueryCaptialReqt::release_moneytype() {
  // @@protoc_insertion_point(field_release:autotrade.FutureQueryCaptialReqt.moneytype)
  if (!has_moneytype()) {
    return NULL;
  }
  clear_has_moneytype();
  return moneytype_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureQueryCaptialReqt::set_allocated_moneytype(::std::string* moneytype) {
  if (moneytype != NULL) {
    set_has_moneytype();
  } else {
    clear_has_moneytype();
  }
  moneytype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), moneytype);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureQueryCaptialReqt.moneytype)
}

// optional string request_id = 3;
inline bool FutureQueryCaptialReqt::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FutureQueryCaptialReqt::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FutureQueryCaptialReqt::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FutureQueryCaptialReqt::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& FutureQueryCaptialReqt::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQueryCaptialReqt.request_id)
  return request_id_.GetNoArena();
}
inline void FutureQueryCaptialReqt::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureQueryCaptialReqt.request_id)
}
#if LANG_CXX11
inline void FutureQueryCaptialReqt::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureQueryCaptialReqt.request_id)
}
#endif
inline void FutureQueryCaptialReqt::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureQueryCaptialReqt.request_id)
}
inline void FutureQueryCaptialReqt::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureQueryCaptialReqt.request_id)
}
inline ::std::string* FutureQueryCaptialReqt::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureQueryCaptialReqt.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureQueryCaptialReqt::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureQueryCaptialReqt.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureQueryCaptialReqt::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureQueryCaptialReqt.request_id)
}

// optional int64 request_date = 4;
inline bool FutureQueryCaptialReqt::has_request_date() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FutureQueryCaptialReqt::set_has_request_date() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FutureQueryCaptialReqt::clear_has_request_date() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FutureQueryCaptialReqt::clear_request_date() {
  request_date_ = GOOGLE_LONGLONG(0);
  clear_has_request_date();
}
inline ::google::protobuf::int64 FutureQueryCaptialReqt::request_date() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQueryCaptialReqt.request_date)
  return request_date_;
}
inline void FutureQueryCaptialReqt::set_request_date(::google::protobuf::int64 value) {
  set_has_request_date();
  request_date_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureQueryCaptialReqt.request_date)
}

// optional int64 request_time = 5;
inline bool FutureQueryCaptialReqt::has_request_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FutureQueryCaptialReqt::set_has_request_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FutureQueryCaptialReqt::clear_has_request_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FutureQueryCaptialReqt::clear_request_time() {
  request_time_ = GOOGLE_LONGLONG(0);
  clear_has_request_time();
}
inline ::google::protobuf::int64 FutureQueryCaptialReqt::request_time() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQueryCaptialReqt.request_time)
  return request_time_;
}
inline void FutureQueryCaptialReqt::set_request_time(::google::protobuf::int64 value) {
  set_has_request_time();
  request_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureQueryCaptialReqt.request_time)
}

// optional int64 active_interval = 6 [default = 10000];
inline bool FutureQueryCaptialReqt::has_active_interval() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FutureQueryCaptialReqt::set_has_active_interval() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FutureQueryCaptialReqt::clear_has_active_interval() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FutureQueryCaptialReqt::clear_active_interval() {
  active_interval_ = GOOGLE_LONGLONG(10000);
  clear_has_active_interval();
}
inline ::google::protobuf::int64 FutureQueryCaptialReqt::active_interval() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQueryCaptialReqt.active_interval)
  return active_interval_;
}
inline void FutureQueryCaptialReqt::set_active_interval(::google::protobuf::int64 value) {
  set_has_active_interval();
  active_interval_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureQueryCaptialReqt.active_interval)
}

// -------------------------------------------------------------------

// FutureCapital

// optional int32 funcid = 1 [default = 12102001];
inline bool FutureCapital::has_funcid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FutureCapital::set_has_funcid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FutureCapital::clear_has_funcid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FutureCapital::clear_funcid() {
  funcid_ = 12102001;
  clear_has_funcid();
}
inline ::google::protobuf::int32 FutureCapital::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureCapital.funcid)
  return funcid_;
}
inline void FutureCapital::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureCapital.funcid)
}

// optional string moneytype = 2;
inline bool FutureCapital::has_moneytype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FutureCapital::set_has_moneytype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FutureCapital::clear_has_moneytype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FutureCapital::clear_moneytype() {
  moneytype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_moneytype();
}
inline const ::std::string& FutureCapital::moneytype() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureCapital.moneytype)
  return moneytype_.GetNoArena();
}
inline void FutureCapital::set_moneytype(const ::std::string& value) {
  set_has_moneytype();
  moneytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureCapital.moneytype)
}
#if LANG_CXX11
inline void FutureCapital::set_moneytype(::std::string&& value) {
  set_has_moneytype();
  moneytype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureCapital.moneytype)
}
#endif
inline void FutureCapital::set_moneytype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_moneytype();
  moneytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureCapital.moneytype)
}
inline void FutureCapital::set_moneytype(const char* value, size_t size) {
  set_has_moneytype();
  moneytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureCapital.moneytype)
}
inline ::std::string* FutureCapital::mutable_moneytype() {
  set_has_moneytype();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureCapital.moneytype)
  return moneytype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureCapital::release_moneytype() {
  // @@protoc_insertion_point(field_release:autotrade.FutureCapital.moneytype)
  if (!has_moneytype()) {
    return NULL;
  }
  clear_has_moneytype();
  return moneytype_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureCapital::set_allocated_moneytype(::std::string* moneytype) {
  if (moneytype != NULL) {
    set_has_moneytype();
  } else {
    clear_has_moneytype();
  }
  moneytype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), moneytype);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureCapital.moneytype)
}

// required double fund_bal = 3;
inline bool FutureCapital::has_fund_bal() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FutureCapital::set_has_fund_bal() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FutureCapital::clear_has_fund_bal() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FutureCapital::clear_fund_bal() {
  fund_bal_ = 0;
  clear_has_fund_bal();
}
inline double FutureCapital::fund_bal() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureCapital.fund_bal)
  return fund_bal_;
}
inline void FutureCapital::set_fund_bal(double value) {
  set_has_fund_bal();
  fund_bal_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureCapital.fund_bal)
}

// required double fund_ava = 4;
inline bool FutureCapital::has_fund_ava() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FutureCapital::set_has_fund_ava() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FutureCapital::clear_has_fund_ava() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FutureCapital::clear_fund_ava() {
  fund_ava_ = 0;
  clear_has_fund_ava();
}
inline double FutureCapital::fund_ava() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureCapital.fund_ava)
  return fund_ava_;
}
inline void FutureCapital::set_fund_ava(double value) {
  set_has_fund_ava();
  fund_ava_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureCapital.fund_ava)
}

// required double market_value = 5;
inline bool FutureCapital::has_market_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FutureCapital::set_has_market_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FutureCapital::clear_has_market_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FutureCapital::clear_market_value() {
  market_value_ = 0;
  clear_has_market_value();
}
inline double FutureCapital::market_value() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureCapital.market_value)
  return market_value_;
}
inline void FutureCapital::set_market_value(double value) {
  set_has_market_value();
  market_value_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureCapital.market_value)
}

// optional string request_id = 6;
inline bool FutureCapital::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FutureCapital::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FutureCapital::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FutureCapital::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& FutureCapital::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureCapital.request_id)
  return request_id_.GetNoArena();
}
inline void FutureCapital::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureCapital.request_id)
}
#if LANG_CXX11
inline void FutureCapital::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureCapital.request_id)
}
#endif
inline void FutureCapital::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureCapital.request_id)
}
inline void FutureCapital::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureCapital.request_id)
}
inline ::std::string* FutureCapital::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureCapital.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureCapital::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureCapital.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureCapital::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureCapital.request_id)
}

// optional double exchage_margin = 7;
inline bool FutureCapital::has_exchage_margin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FutureCapital::set_has_exchage_margin() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FutureCapital::clear_has_exchage_margin() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FutureCapital::clear_exchage_margin() {
  exchage_margin_ = 0;
  clear_has_exchage_margin();
}
inline double FutureCapital::exchage_margin() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureCapital.exchage_margin)
  return exchage_margin_;
}
inline void FutureCapital::set_exchage_margin(double value) {
  set_has_exchage_margin();
  exchage_margin_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureCapital.exchage_margin)
}

// optional double delivery_margin = 8;
inline bool FutureCapital::has_delivery_margin() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FutureCapital::set_has_delivery_margin() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FutureCapital::clear_has_delivery_margin() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FutureCapital::clear_delivery_margin() {
  delivery_margin_ = 0;
  clear_has_delivery_margin();
}
inline double FutureCapital::delivery_margin() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureCapital.delivery_margin)
  return delivery_margin_;
}
inline void FutureCapital::set_delivery_margin(double value) {
  set_has_delivery_margin();
  delivery_margin_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureCapital.delivery_margin)
}

// optional double exchage_delivery_margin = 9;
inline bool FutureCapital::has_exchage_delivery_margin() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FutureCapital::set_has_exchage_delivery_margin() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FutureCapital::clear_has_exchage_delivery_margin() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FutureCapital::clear_exchage_delivery_margin() {
  exchage_delivery_margin_ = 0;
  clear_has_exchage_delivery_margin();
}
inline double FutureCapital::exchage_delivery_margin() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureCapital.exchage_delivery_margin)
  return exchage_delivery_margin_;
}
inline void FutureCapital::set_exchage_delivery_margin(double value) {
  set_has_exchage_delivery_margin();
  exchage_delivery_margin_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureCapital.exchage_delivery_margin)
}

// optional bool islast = 10;
inline bool FutureCapital::has_islast() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FutureCapital::set_has_islast() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FutureCapital::clear_has_islast() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FutureCapital::clear_islast() {
  islast_ = false;
  clear_has_islast();
}
inline bool FutureCapital::islast() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureCapital.islast)
  return islast_;
}
inline void FutureCapital::set_islast(bool value) {
  set_has_islast();
  islast_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureCapital.islast)
}

// optional int32 ret_code = 11;
inline bool FutureCapital::has_ret_code() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FutureCapital::set_has_ret_code() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FutureCapital::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FutureCapital::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 FutureCapital::ret_code() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureCapital.ret_code)
  return ret_code_;
}
inline void FutureCapital::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureCapital.ret_code)
}

// optional string ret_message = 12;
inline bool FutureCapital::has_ret_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FutureCapital::set_has_ret_message() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FutureCapital::clear_has_ret_message() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FutureCapital::clear_ret_message() {
  ret_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ret_message();
}
inline const ::std::string& FutureCapital::ret_message() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureCapital.ret_message)
  return ret_message_.GetNoArena();
}
inline void FutureCapital::set_ret_message(const ::std::string& value) {
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureCapital.ret_message)
}
#if LANG_CXX11
inline void FutureCapital::set_ret_message(::std::string&& value) {
  set_has_ret_message();
  ret_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureCapital.ret_message)
}
#endif
inline void FutureCapital::set_ret_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureCapital.ret_message)
}
inline void FutureCapital::set_ret_message(const char* value, size_t size) {
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureCapital.ret_message)
}
inline ::std::string* FutureCapital::mutable_ret_message() {
  set_has_ret_message();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureCapital.ret_message)
  return ret_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureCapital::release_ret_message() {
  // @@protoc_insertion_point(field_release:autotrade.FutureCapital.ret_message)
  if (!has_ret_message()) {
    return NULL;
  }
  clear_has_ret_message();
  return ret_message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureCapital::set_allocated_ret_message(::std::string* ret_message) {
  if (ret_message != NULL) {
    set_has_ret_message();
  } else {
    clear_has_ret_message();
  }
  ret_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ret_message);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureCapital.ret_message)
}

// optional double curr_margin = 13;
inline bool FutureCapital::has_curr_margin() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FutureCapital::set_has_curr_margin() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FutureCapital::clear_has_curr_margin() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FutureCapital::clear_curr_margin() {
  curr_margin_ = 0;
  clear_has_curr_margin();
}
inline double FutureCapital::curr_margin() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureCapital.curr_margin)
  return curr_margin_;
}
inline void FutureCapital::set_curr_margin(double value) {
  set_has_curr_margin();
  curr_margin_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureCapital.curr_margin)
}

// -------------------------------------------------------------------

// FutureQueryPositionReqt

// optional int32 funcid = 1 [default = 12002005];
inline bool FutureQueryPositionReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FutureQueryPositionReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FutureQueryPositionReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FutureQueryPositionReqt::clear_funcid() {
  funcid_ = 12002005;
  clear_has_funcid();
}
inline ::google::protobuf::int32 FutureQueryPositionReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQueryPositionReqt.funcid)
  return funcid_;
}
inline void FutureQueryPositionReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureQueryPositionReqt.funcid)
}

// optional string code = 2;
inline bool FutureQueryPositionReqt::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FutureQueryPositionReqt::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FutureQueryPositionReqt::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FutureQueryPositionReqt::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& FutureQueryPositionReqt::code() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQueryPositionReqt.code)
  return code_.GetNoArena();
}
inline void FutureQueryPositionReqt::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureQueryPositionReqt.code)
}
#if LANG_CXX11
inline void FutureQueryPositionReqt::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureQueryPositionReqt.code)
}
#endif
inline void FutureQueryPositionReqt::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureQueryPositionReqt.code)
}
inline void FutureQueryPositionReqt::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureQueryPositionReqt.code)
}
inline ::std::string* FutureQueryPositionReqt::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureQueryPositionReqt.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureQueryPositionReqt::release_code() {
  // @@protoc_insertion_point(field_release:autotrade.FutureQueryPositionReqt.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureQueryPositionReqt::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureQueryPositionReqt.code)
}

// optional string request_id = 3;
inline bool FutureQueryPositionReqt::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FutureQueryPositionReqt::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FutureQueryPositionReqt::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FutureQueryPositionReqt::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& FutureQueryPositionReqt::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQueryPositionReqt.request_id)
  return request_id_.GetNoArena();
}
inline void FutureQueryPositionReqt::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureQueryPositionReqt.request_id)
}
#if LANG_CXX11
inline void FutureQueryPositionReqt::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureQueryPositionReqt.request_id)
}
#endif
inline void FutureQueryPositionReqt::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureQueryPositionReqt.request_id)
}
inline void FutureQueryPositionReqt::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureQueryPositionReqt.request_id)
}
inline ::std::string* FutureQueryPositionReqt::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureQueryPositionReqt.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureQueryPositionReqt::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureQueryPositionReqt.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureQueryPositionReqt::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureQueryPositionReqt.request_id)
}

// optional int64 request_date = 4;
inline bool FutureQueryPositionReqt::has_request_date() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FutureQueryPositionReqt::set_has_request_date() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FutureQueryPositionReqt::clear_has_request_date() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FutureQueryPositionReqt::clear_request_date() {
  request_date_ = GOOGLE_LONGLONG(0);
  clear_has_request_date();
}
inline ::google::protobuf::int64 FutureQueryPositionReqt::request_date() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQueryPositionReqt.request_date)
  return request_date_;
}
inline void FutureQueryPositionReqt::set_request_date(::google::protobuf::int64 value) {
  set_has_request_date();
  request_date_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureQueryPositionReqt.request_date)
}

// optional int64 request_time = 5;
inline bool FutureQueryPositionReqt::has_request_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FutureQueryPositionReqt::set_has_request_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FutureQueryPositionReqt::clear_has_request_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FutureQueryPositionReqt::clear_request_time() {
  request_time_ = GOOGLE_LONGLONG(0);
  clear_has_request_time();
}
inline ::google::protobuf::int64 FutureQueryPositionReqt::request_time() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQueryPositionReqt.request_time)
  return request_time_;
}
inline void FutureQueryPositionReqt::set_request_time(::google::protobuf::int64 value) {
  set_has_request_time();
  request_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureQueryPositionReqt.request_time)
}

// optional int64 active_interval = 6 [default = 10000];
inline bool FutureQueryPositionReqt::has_active_interval() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FutureQueryPositionReqt::set_has_active_interval() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FutureQueryPositionReqt::clear_has_active_interval() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FutureQueryPositionReqt::clear_active_interval() {
  active_interval_ = GOOGLE_LONGLONG(10000);
  clear_has_active_interval();
}
inline ::google::protobuf::int64 FutureQueryPositionReqt::active_interval() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQueryPositionReqt.active_interval)
  return active_interval_;
}
inline void FutureQueryPositionReqt::set_active_interval(::google::protobuf::int64 value) {
  set_has_active_interval();
  active_interval_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureQueryPositionReqt.active_interval)
}

// -------------------------------------------------------------------

// FuturePosition

// optional int32 funcid = 1 [default = 12102005];
inline bool FuturePosition::has_funcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FuturePosition::set_has_funcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FuturePosition::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FuturePosition::clear_funcid() {
  funcid_ = 12102005;
  clear_has_funcid();
}
inline ::google::protobuf::int32 FuturePosition::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.FuturePosition.funcid)
  return funcid_;
}
inline void FuturePosition::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FuturePosition.funcid)
}

// repeated .autotrade.OneFuturePosition one_positions = 2;
inline int FuturePosition::one_positions_size() const {
  return one_positions_.size();
}
inline void FuturePosition::clear_one_positions() {
  one_positions_.Clear();
}
inline ::autotrade::OneFuturePosition* FuturePosition::mutable_one_positions(int index) {
  // @@protoc_insertion_point(field_mutable:autotrade.FuturePosition.one_positions)
  return one_positions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::autotrade::OneFuturePosition >*
FuturePosition::mutable_one_positions() {
  // @@protoc_insertion_point(field_mutable_list:autotrade.FuturePosition.one_positions)
  return &one_positions_;
}
inline const ::autotrade::OneFuturePosition& FuturePosition::one_positions(int index) const {
  // @@protoc_insertion_point(field_get:autotrade.FuturePosition.one_positions)
  return one_positions_.Get(index);
}
inline ::autotrade::OneFuturePosition* FuturePosition::add_one_positions() {
  // @@protoc_insertion_point(field_add:autotrade.FuturePosition.one_positions)
  return one_positions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::autotrade::OneFuturePosition >&
FuturePosition::one_positions() const {
  // @@protoc_insertion_point(field_list:autotrade.FuturePosition.one_positions)
  return one_positions_;
}

// optional string request_id = 3;
inline bool FuturePosition::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FuturePosition::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FuturePosition::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FuturePosition::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& FuturePosition::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FuturePosition.request_id)
  return request_id_.GetNoArena();
}
inline void FuturePosition::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FuturePosition.request_id)
}
#if LANG_CXX11
inline void FuturePosition::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FuturePosition.request_id)
}
#endif
inline void FuturePosition::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FuturePosition.request_id)
}
inline void FuturePosition::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FuturePosition.request_id)
}
inline ::std::string* FuturePosition::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FuturePosition.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FuturePosition::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.FuturePosition.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FuturePosition::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FuturePosition.request_id)
}

// -------------------------------------------------------------------

// OneFuturePosition

// optional int32 funcid = 12 [default = 12002009];
inline bool OneFuturePosition::has_funcid() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void OneFuturePosition::set_has_funcid() {
  _has_bits_[0] |= 0x00100000u;
}
inline void OneFuturePosition::clear_has_funcid() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void OneFuturePosition::clear_funcid() {
  funcid_ = 12002009;
  clear_has_funcid();
}
inline ::google::protobuf::int32 OneFuturePosition::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.OneFuturePosition.funcid)
  return funcid_;
}
inline void OneFuturePosition::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OneFuturePosition.funcid)
}

// optional uint32 market = 1;
inline bool OneFuturePosition::has_market() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OneFuturePosition::set_has_market() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OneFuturePosition::clear_has_market() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OneFuturePosition::clear_market() {
  market_ = 0u;
  clear_has_market();
}
inline ::google::protobuf::uint32 OneFuturePosition::market() const {
  // @@protoc_insertion_point(field_get:autotrade.OneFuturePosition.market)
  return market_;
}
inline void OneFuturePosition::set_market(::google::protobuf::uint32 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OneFuturePosition.market)
}

// optional string code = 2;
inline bool OneFuturePosition::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OneFuturePosition::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OneFuturePosition::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OneFuturePosition::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& OneFuturePosition::code() const {
  // @@protoc_insertion_point(field_get:autotrade.OneFuturePosition.code)
  return code_.GetNoArena();
}
inline void OneFuturePosition::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OneFuturePosition.code)
}
#if LANG_CXX11
inline void OneFuturePosition::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OneFuturePosition.code)
}
#endif
inline void OneFuturePosition::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OneFuturePosition.code)
}
inline void OneFuturePosition::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OneFuturePosition.code)
}
inline ::std::string* OneFuturePosition::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:autotrade.OneFuturePosition.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OneFuturePosition::release_code() {
  // @@protoc_insertion_point(field_release:autotrade.OneFuturePosition.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OneFuturePosition::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OneFuturePosition.code)
}

// optional string name = 3;
inline bool OneFuturePosition::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OneFuturePosition::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OneFuturePosition::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OneFuturePosition::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& OneFuturePosition::name() const {
  // @@protoc_insertion_point(field_get:autotrade.OneFuturePosition.name)
  return name_.GetNoArena();
}
inline void OneFuturePosition::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OneFuturePosition.name)
}
#if LANG_CXX11
inline void OneFuturePosition::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OneFuturePosition.name)
}
#endif
inline void OneFuturePosition::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OneFuturePosition.name)
}
inline void OneFuturePosition::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OneFuturePosition.name)
}
inline ::std::string* OneFuturePosition::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:autotrade.OneFuturePosition.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OneFuturePosition::release_name() {
  // @@protoc_insertion_point(field_release:autotrade.OneFuturePosition.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OneFuturePosition::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OneFuturePosition.name)
}

// optional uint32 bsflag = 4;
inline bool OneFuturePosition::has_bsflag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OneFuturePosition::set_has_bsflag() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OneFuturePosition::clear_has_bsflag() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OneFuturePosition::clear_bsflag() {
  bsflag_ = 0u;
  clear_has_bsflag();
}
inline ::google::protobuf::uint32 OneFuturePosition::bsflag() const {
  // @@protoc_insertion_point(field_get:autotrade.OneFuturePosition.bsflag)
  return bsflag_;
}
inline void OneFuturePosition::set_bsflag(::google::protobuf::uint32 value) {
  set_has_bsflag();
  bsflag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OneFuturePosition.bsflag)
}

// optional int64 yd_position = 5 [default = 0];
inline bool OneFuturePosition::has_yd_position() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OneFuturePosition::set_has_yd_position() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OneFuturePosition::clear_has_yd_position() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OneFuturePosition::clear_yd_position() {
  yd_position_ = GOOGLE_LONGLONG(0);
  clear_has_yd_position();
}
inline ::google::protobuf::int64 OneFuturePosition::yd_position() const {
  // @@protoc_insertion_point(field_get:autotrade.OneFuturePosition.yd_position)
  return yd_position_;
}
inline void OneFuturePosition::set_yd_position(::google::protobuf::int64 value) {
  set_has_yd_position();
  yd_position_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OneFuturePosition.yd_position)
}

// optional int64 today_position = 6 [default = 0];
inline bool OneFuturePosition::has_today_position() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OneFuturePosition::set_has_today_position() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OneFuturePosition::clear_has_today_position() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OneFuturePosition::clear_today_position() {
  today_position_ = GOOGLE_LONGLONG(0);
  clear_has_today_position();
}
inline ::google::protobuf::int64 OneFuturePosition::today_position() const {
  // @@protoc_insertion_point(field_get:autotrade.OneFuturePosition.today_position)
  return today_position_;
}
inline void OneFuturePosition::set_today_position(::google::protobuf::int64 value) {
  set_has_today_position();
  today_position_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OneFuturePosition.today_position)
}

// optional int64 position = 7 [default = 0];
inline bool OneFuturePosition::has_position() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OneFuturePosition::set_has_position() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OneFuturePosition::clear_has_position() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OneFuturePosition::clear_position() {
  position_ = GOOGLE_LONGLONG(0);
  clear_has_position();
}
inline ::google::protobuf::int64 OneFuturePosition::position() const {
  // @@protoc_insertion_point(field_get:autotrade.OneFuturePosition.position)
  return position_;
}
inline void OneFuturePosition::set_position(::google::protobuf::int64 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OneFuturePosition.position)
}

// optional int32 hedge_flag = 8;
inline bool OneFuturePosition::has_hedge_flag() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OneFuturePosition::set_has_hedge_flag() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OneFuturePosition::clear_has_hedge_flag() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OneFuturePosition::clear_hedge_flag() {
  hedge_flag_ = 0;
  clear_has_hedge_flag();
}
inline ::google::protobuf::int32 OneFuturePosition::hedge_flag() const {
  // @@protoc_insertion_point(field_get:autotrade.OneFuturePosition.hedge_flag)
  return hedge_flag_;
}
inline void OneFuturePosition::set_hedge_flag(::google::protobuf::int32 value) {
  set_has_hedge_flag();
  hedge_flag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OneFuturePosition.hedge_flag)
}

// optional double open_cost = 9 [default = 0];
inline bool OneFuturePosition::has_open_cost() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OneFuturePosition::set_has_open_cost() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OneFuturePosition::clear_has_open_cost() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OneFuturePosition::clear_open_cost() {
  open_cost_ = 0;
  clear_has_open_cost();
}
inline double OneFuturePosition::open_cost() const {
  // @@protoc_insertion_point(field_get:autotrade.OneFuturePosition.open_cost)
  return open_cost_;
}
inline void OneFuturePosition::set_open_cost(double value) {
  set_has_open_cost();
  open_cost_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OneFuturePosition.open_cost)
}

// optional string account_name = 10;
inline bool OneFuturePosition::has_account_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OneFuturePosition::set_has_account_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OneFuturePosition::clear_has_account_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OneFuturePosition::clear_account_name() {
  account_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account_name();
}
inline const ::std::string& OneFuturePosition::account_name() const {
  // @@protoc_insertion_point(field_get:autotrade.OneFuturePosition.account_name)
  return account_name_.GetNoArena();
}
inline void OneFuturePosition::set_account_name(const ::std::string& value) {
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OneFuturePosition.account_name)
}
#if LANG_CXX11
inline void OneFuturePosition::set_account_name(::std::string&& value) {
  set_has_account_name();
  account_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OneFuturePosition.account_name)
}
#endif
inline void OneFuturePosition::set_account_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OneFuturePosition.account_name)
}
inline void OneFuturePosition::set_account_name(const char* value, size_t size) {
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OneFuturePosition.account_name)
}
inline ::std::string* OneFuturePosition::mutable_account_name() {
  set_has_account_name();
  // @@protoc_insertion_point(field_mutable:autotrade.OneFuturePosition.account_name)
  return account_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OneFuturePosition::release_account_name() {
  // @@protoc_insertion_point(field_release:autotrade.OneFuturePosition.account_name)
  if (!has_account_name()) {
    return NULL;
  }
  clear_has_account_name();
  return account_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OneFuturePosition::set_allocated_account_name(::std::string* account_name) {
  if (account_name != NULL) {
    set_has_account_name();
  } else {
    clear_has_account_name();
  }
  account_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_name);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OneFuturePosition.account_name)
}

// optional bool islast = 11;
inline bool OneFuturePosition::has_islast() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OneFuturePosition::set_has_islast() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OneFuturePosition::clear_has_islast() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OneFuturePosition::clear_islast() {
  islast_ = false;
  clear_has_islast();
}
inline bool OneFuturePosition::islast() const {
  // @@protoc_insertion_point(field_get:autotrade.OneFuturePosition.islast)
  return islast_;
}
inline void OneFuturePosition::set_islast(bool value) {
  set_has_islast();
  islast_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OneFuturePosition.islast)
}

// optional int32 ret_code = 13 [default = 0];
inline bool OneFuturePosition::has_ret_code() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void OneFuturePosition::set_has_ret_code() {
  _has_bits_[0] |= 0x00080000u;
}
inline void OneFuturePosition::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void OneFuturePosition::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 OneFuturePosition::ret_code() const {
  // @@protoc_insertion_point(field_get:autotrade.OneFuturePosition.ret_code)
  return ret_code_;
}
inline void OneFuturePosition::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OneFuturePosition.ret_code)
}

// optional string ret_message = 14 [default = ""];
inline bool OneFuturePosition::has_ret_message() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OneFuturePosition::set_has_ret_message() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OneFuturePosition::clear_has_ret_message() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OneFuturePosition::clear_ret_message() {
  ret_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ret_message();
}
inline const ::std::string& OneFuturePosition::ret_message() const {
  // @@protoc_insertion_point(field_get:autotrade.OneFuturePosition.ret_message)
  return ret_message_.GetNoArena();
}
inline void OneFuturePosition::set_ret_message(const ::std::string& value) {
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OneFuturePosition.ret_message)
}
#if LANG_CXX11
inline void OneFuturePosition::set_ret_message(::std::string&& value) {
  set_has_ret_message();
  ret_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OneFuturePosition.ret_message)
}
#endif
inline void OneFuturePosition::set_ret_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OneFuturePosition.ret_message)
}
inline void OneFuturePosition::set_ret_message(const char* value, size_t size) {
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OneFuturePosition.ret_message)
}
inline ::std::string* OneFuturePosition::mutable_ret_message() {
  set_has_ret_message();
  // @@protoc_insertion_point(field_mutable:autotrade.OneFuturePosition.ret_message)
  return ret_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OneFuturePosition::release_ret_message() {
  // @@protoc_insertion_point(field_release:autotrade.OneFuturePosition.ret_message)
  if (!has_ret_message()) {
    return NULL;
  }
  clear_has_ret_message();
  return ret_message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OneFuturePosition::set_allocated_ret_message(::std::string* ret_message) {
  if (ret_message != NULL) {
    set_has_ret_message();
  } else {
    clear_has_ret_message();
  }
  ret_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ret_message);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OneFuturePosition.ret_message)
}

// optional int64 can_close_qty = 15 [default = 0];
inline bool OneFuturePosition::has_can_close_qty() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OneFuturePosition::set_has_can_close_qty() {
  _has_bits_[0] |= 0x00001000u;
}
inline void OneFuturePosition::clear_has_can_close_qty() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void OneFuturePosition::clear_can_close_qty() {
  can_close_qty_ = GOOGLE_LONGLONG(0);
  clear_has_can_close_qty();
}
inline ::google::protobuf::int64 OneFuturePosition::can_close_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.OneFuturePosition.can_close_qty)
  return can_close_qty_;
}
inline void OneFuturePosition::set_can_close_qty(::google::protobuf::int64 value) {
  set_has_can_close_qty();
  can_close_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OneFuturePosition.can_close_qty)
}

// optional int64 pending_close_qty = 16 [default = 0];
inline bool OneFuturePosition::has_pending_close_qty() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void OneFuturePosition::set_has_pending_close_qty() {
  _has_bits_[0] |= 0x00002000u;
}
inline void OneFuturePosition::clear_has_pending_close_qty() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void OneFuturePosition::clear_pending_close_qty() {
  pending_close_qty_ = GOOGLE_LONGLONG(0);
  clear_has_pending_close_qty();
}
inline ::google::protobuf::int64 OneFuturePosition::pending_close_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.OneFuturePosition.pending_close_qty)
  return pending_close_qty_;
}
inline void OneFuturePosition::set_pending_close_qty(::google::protobuf::int64 value) {
  set_has_pending_close_qty();
  pending_close_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OneFuturePosition.pending_close_qty)
}

// optional int64 today_open_volume = 17 [default = 0];
inline bool OneFuturePosition::has_today_open_volume() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void OneFuturePosition::set_has_today_open_volume() {
  _has_bits_[0] |= 0x00004000u;
}
inline void OneFuturePosition::clear_has_today_open_volume() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void OneFuturePosition::clear_today_open_volume() {
  today_open_volume_ = GOOGLE_LONGLONG(0);
  clear_has_today_open_volume();
}
inline ::google::protobuf::int64 OneFuturePosition::today_open_volume() const {
  // @@protoc_insertion_point(field_get:autotrade.OneFuturePosition.today_open_volume)
  return today_open_volume_;
}
inline void OneFuturePosition::set_today_open_volume(::google::protobuf::int64 value) {
  set_has_today_open_volume();
  today_open_volume_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OneFuturePosition.today_open_volume)
}

// optional int64 today_close_volume = 18 [default = 0];
inline bool OneFuturePosition::has_today_close_volume() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void OneFuturePosition::set_has_today_close_volume() {
  _has_bits_[0] |= 0x00008000u;
}
inline void OneFuturePosition::clear_has_today_close_volume() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void OneFuturePosition::clear_today_close_volume() {
  today_close_volume_ = GOOGLE_LONGLONG(0);
  clear_has_today_close_volume();
}
inline ::google::protobuf::int64 OneFuturePosition::today_close_volume() const {
  // @@protoc_insertion_point(field_get:autotrade.OneFuturePosition.today_close_volume)
  return today_close_volume_;
}
inline void OneFuturePosition::set_today_close_volume(::google::protobuf::int64 value) {
  set_has_today_close_volume();
  today_close_volume_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OneFuturePosition.today_close_volume)
}

// optional int64 today_opening_volume = 19 [default = 0];
inline bool OneFuturePosition::has_today_opening_volume() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void OneFuturePosition::set_has_today_opening_volume() {
  _has_bits_[0] |= 0x00010000u;
}
inline void OneFuturePosition::clear_has_today_opening_volume() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void OneFuturePosition::clear_today_opening_volume() {
  today_opening_volume_ = GOOGLE_LONGLONG(0);
  clear_has_today_opening_volume();
}
inline ::google::protobuf::int64 OneFuturePosition::today_opening_volume() const {
  // @@protoc_insertion_point(field_get:autotrade.OneFuturePosition.today_opening_volume)
  return today_opening_volume_;
}
inline void OneFuturePosition::set_today_opening_volume(::google::protobuf::int64 value) {
  set_has_today_opening_volume();
  today_opening_volume_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OneFuturePosition.today_opening_volume)
}

// optional int64 today_closing_volume = 20 [default = 0];
inline bool OneFuturePosition::has_today_closing_volume() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void OneFuturePosition::set_has_today_closing_volume() {
  _has_bits_[0] |= 0x00020000u;
}
inline void OneFuturePosition::clear_has_today_closing_volume() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void OneFuturePosition::clear_today_closing_volume() {
  today_closing_volume_ = GOOGLE_LONGLONG(0);
  clear_has_today_closing_volume();
}
inline ::google::protobuf::int64 OneFuturePosition::today_closing_volume() const {
  // @@protoc_insertion_point(field_get:autotrade.OneFuturePosition.today_closing_volume)
  return today_closing_volume_;
}
inline void OneFuturePosition::set_today_closing_volume(::google::protobuf::int64 value) {
  set_has_today_closing_volume();
  today_closing_volume_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OneFuturePosition.today_closing_volume)
}

// optional int64 yd_closing_volume = 21 [default = 0];
inline bool OneFuturePosition::has_yd_closing_volume() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void OneFuturePosition::set_has_yd_closing_volume() {
  _has_bits_[0] |= 0x00040000u;
}
inline void OneFuturePosition::clear_has_yd_closing_volume() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void OneFuturePosition::clear_yd_closing_volume() {
  yd_closing_volume_ = GOOGLE_LONGLONG(0);
  clear_has_yd_closing_volume();
}
inline ::google::protobuf::int64 OneFuturePosition::yd_closing_volume() const {
  // @@protoc_insertion_point(field_get:autotrade.OneFuturePosition.yd_closing_volume)
  return yd_closing_volume_;
}
inline void OneFuturePosition::set_yd_closing_volume(::google::protobuf::int64 value) {
  set_has_yd_closing_volume();
  yd_closing_volume_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OneFuturePosition.yd_closing_volume)
}

// -------------------------------------------------------------------

// FutureQueryDealDetailReqt

// optional int32 funcid = 1 [default = 12002003];
inline bool FutureQueryDealDetailReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FutureQueryDealDetailReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FutureQueryDealDetailReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FutureQueryDealDetailReqt::clear_funcid() {
  funcid_ = 12002003;
  clear_has_funcid();
}
inline ::google::protobuf::int32 FutureQueryDealDetailReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQueryDealDetailReqt.funcid)
  return funcid_;
}
inline void FutureQueryDealDetailReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureQueryDealDetailReqt.funcid)
}

// optional string order_group = 2 [default = ""];
inline bool FutureQueryDealDetailReqt::has_order_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FutureQueryDealDetailReqt::set_has_order_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FutureQueryDealDetailReqt::clear_has_order_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FutureQueryDealDetailReqt::clear_order_group() {
  order_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_group();
}
inline const ::std::string& FutureQueryDealDetailReqt::order_group() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQueryDealDetailReqt.order_group)
  return order_group_.GetNoArena();
}
inline void FutureQueryDealDetailReqt::set_order_group(const ::std::string& value) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureQueryDealDetailReqt.order_group)
}
#if LANG_CXX11
inline void FutureQueryDealDetailReqt::set_order_group(::std::string&& value) {
  set_has_order_group();
  order_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureQueryDealDetailReqt.order_group)
}
#endif
inline void FutureQueryDealDetailReqt::set_order_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureQueryDealDetailReqt.order_group)
}
inline void FutureQueryDealDetailReqt::set_order_group(const char* value, size_t size) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureQueryDealDetailReqt.order_group)
}
inline ::std::string* FutureQueryDealDetailReqt::mutable_order_group() {
  set_has_order_group();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureQueryDealDetailReqt.order_group)
  return order_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureQueryDealDetailReqt::release_order_group() {
  // @@protoc_insertion_point(field_release:autotrade.FutureQueryDealDetailReqt.order_group)
  if (!has_order_group()) {
    return NULL;
  }
  clear_has_order_group();
  return order_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureQueryDealDetailReqt::set_allocated_order_group(::std::string* order_group) {
  if (order_group != NULL) {
    set_has_order_group();
  } else {
    clear_has_order_group();
  }
  order_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_group);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureQueryDealDetailReqt.order_group)
}

// optional string start_pos = 3 [default = ""];
inline bool FutureQueryDealDetailReqt::has_start_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FutureQueryDealDetailReqt::set_has_start_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FutureQueryDealDetailReqt::clear_has_start_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FutureQueryDealDetailReqt::clear_start_pos() {
  start_pos_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_start_pos();
}
inline const ::std::string& FutureQueryDealDetailReqt::start_pos() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQueryDealDetailReqt.start_pos)
  return start_pos_.GetNoArena();
}
inline void FutureQueryDealDetailReqt::set_start_pos(const ::std::string& value) {
  set_has_start_pos();
  start_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureQueryDealDetailReqt.start_pos)
}
#if LANG_CXX11
inline void FutureQueryDealDetailReqt::set_start_pos(::std::string&& value) {
  set_has_start_pos();
  start_pos_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureQueryDealDetailReqt.start_pos)
}
#endif
inline void FutureQueryDealDetailReqt::set_start_pos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_start_pos();
  start_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureQueryDealDetailReqt.start_pos)
}
inline void FutureQueryDealDetailReqt::set_start_pos(const char* value, size_t size) {
  set_has_start_pos();
  start_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureQueryDealDetailReqt.start_pos)
}
inline ::std::string* FutureQueryDealDetailReqt::mutable_start_pos() {
  set_has_start_pos();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureQueryDealDetailReqt.start_pos)
  return start_pos_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureQueryDealDetailReqt::release_start_pos() {
  // @@protoc_insertion_point(field_release:autotrade.FutureQueryDealDetailReqt.start_pos)
  if (!has_start_pos()) {
    return NULL;
  }
  clear_has_start_pos();
  return start_pos_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureQueryDealDetailReqt::set_allocated_start_pos(::std::string* start_pos) {
  if (start_pos != NULL) {
    set_has_start_pos();
  } else {
    clear_has_start_pos();
  }
  start_pos_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_pos);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureQueryDealDetailReqt.start_pos)
}

// optional string request_id = 4;
inline bool FutureQueryDealDetailReqt::has_request_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FutureQueryDealDetailReqt::set_has_request_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FutureQueryDealDetailReqt::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FutureQueryDealDetailReqt::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& FutureQueryDealDetailReqt::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQueryDealDetailReqt.request_id)
  return request_id_.GetNoArena();
}
inline void FutureQueryDealDetailReqt::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureQueryDealDetailReqt.request_id)
}
#if LANG_CXX11
inline void FutureQueryDealDetailReqt::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureQueryDealDetailReqt.request_id)
}
#endif
inline void FutureQueryDealDetailReqt::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureQueryDealDetailReqt.request_id)
}
inline void FutureQueryDealDetailReqt::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureQueryDealDetailReqt.request_id)
}
inline ::std::string* FutureQueryDealDetailReqt::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureQueryDealDetailReqt.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureQueryDealDetailReqt::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureQueryDealDetailReqt.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureQueryDealDetailReqt::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureQueryDealDetailReqt.request_id)
}

// optional int64 request_date = 5;
inline bool FutureQueryDealDetailReqt::has_request_date() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FutureQueryDealDetailReqt::set_has_request_date() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FutureQueryDealDetailReqt::clear_has_request_date() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FutureQueryDealDetailReqt::clear_request_date() {
  request_date_ = GOOGLE_LONGLONG(0);
  clear_has_request_date();
}
inline ::google::protobuf::int64 FutureQueryDealDetailReqt::request_date() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQueryDealDetailReqt.request_date)
  return request_date_;
}
inline void FutureQueryDealDetailReqt::set_request_date(::google::protobuf::int64 value) {
  set_has_request_date();
  request_date_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureQueryDealDetailReqt.request_date)
}

// optional int64 request_time = 6;
inline bool FutureQueryDealDetailReqt::has_request_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FutureQueryDealDetailReqt::set_has_request_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FutureQueryDealDetailReqt::clear_has_request_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FutureQueryDealDetailReqt::clear_request_time() {
  request_time_ = GOOGLE_LONGLONG(0);
  clear_has_request_time();
}
inline ::google::protobuf::int64 FutureQueryDealDetailReqt::request_time() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQueryDealDetailReqt.request_time)
  return request_time_;
}
inline void FutureQueryDealDetailReqt::set_request_time(::google::protobuf::int64 value) {
  set_has_request_time();
  request_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureQueryDealDetailReqt.request_time)
}

// optional int64 active_interval = 7 [default = 10000];
inline bool FutureQueryDealDetailReqt::has_active_interval() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FutureQueryDealDetailReqt::set_has_active_interval() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FutureQueryDealDetailReqt::clear_has_active_interval() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FutureQueryDealDetailReqt::clear_active_interval() {
  active_interval_ = GOOGLE_LONGLONG(10000);
  clear_has_active_interval();
}
inline ::google::protobuf::int64 FutureQueryDealDetailReqt::active_interval() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQueryDealDetailReqt.active_interval)
  return active_interval_;
}
inline void FutureQueryDealDetailReqt::set_active_interval(::google::protobuf::int64 value) {
  set_has_active_interval();
  active_interval_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureQueryDealDetailReqt.active_interval)
}

// -------------------------------------------------------------------

// FutureDealDetail_DealDetail

// required string match_id = 1;
inline bool FutureDealDetail_DealDetail::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FutureDealDetail_DealDetail::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FutureDealDetail_DealDetail::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FutureDealDetail_DealDetail::clear_match_id() {
  match_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_match_id();
}
inline const ::std::string& FutureDealDetail_DealDetail::match_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureDealDetail.DealDetail.match_id)
  return match_id_.GetNoArena();
}
inline void FutureDealDetail_DealDetail::set_match_id(const ::std::string& value) {
  set_has_match_id();
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureDealDetail.DealDetail.match_id)
}
#if LANG_CXX11
inline void FutureDealDetail_DealDetail::set_match_id(::std::string&& value) {
  set_has_match_id();
  match_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureDealDetail.DealDetail.match_id)
}
#endif
inline void FutureDealDetail_DealDetail::set_match_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_match_id();
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureDealDetail.DealDetail.match_id)
}
inline void FutureDealDetail_DealDetail::set_match_id(const char* value, size_t size) {
  set_has_match_id();
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureDealDetail.DealDetail.match_id)
}
inline ::std::string* FutureDealDetail_DealDetail::mutable_match_id() {
  set_has_match_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureDealDetail.DealDetail.match_id)
  return match_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureDealDetail_DealDetail::release_match_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureDealDetail.DealDetail.match_id)
  if (!has_match_id()) {
    return NULL;
  }
  clear_has_match_id();
  return match_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureDealDetail_DealDetail::set_allocated_match_id(::std::string* match_id) {
  if (match_id != NULL) {
    set_has_match_id();
  } else {
    clear_has_match_id();
  }
  match_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), match_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureDealDetail.DealDetail.match_id)
}

// required uint32 bsflag = 2;
inline bool FutureDealDetail_DealDetail::has_bsflag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FutureDealDetail_DealDetail::set_has_bsflag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FutureDealDetail_DealDetail::clear_has_bsflag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FutureDealDetail_DealDetail::clear_bsflag() {
  bsflag_ = 0u;
  clear_has_bsflag();
}
inline ::google::protobuf::uint32 FutureDealDetail_DealDetail::bsflag() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureDealDetail.DealDetail.bsflag)
  return bsflag_;
}
inline void FutureDealDetail_DealDetail::set_bsflag(::google::protobuf::uint32 value) {
  set_has_bsflag();
  bsflag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureDealDetail.DealDetail.bsflag)
}

// required string orderno = 3;
inline bool FutureDealDetail_DealDetail::has_orderno() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FutureDealDetail_DealDetail::set_has_orderno() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FutureDealDetail_DealDetail::clear_has_orderno() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FutureDealDetail_DealDetail::clear_orderno() {
  orderno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_orderno();
}
inline const ::std::string& FutureDealDetail_DealDetail::orderno() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureDealDetail.DealDetail.orderno)
  return orderno_.GetNoArena();
}
inline void FutureDealDetail_DealDetail::set_orderno(const ::std::string& value) {
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureDealDetail.DealDetail.orderno)
}
#if LANG_CXX11
inline void FutureDealDetail_DealDetail::set_orderno(::std::string&& value) {
  set_has_orderno();
  orderno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureDealDetail.DealDetail.orderno)
}
#endif
inline void FutureDealDetail_DealDetail::set_orderno(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureDealDetail.DealDetail.orderno)
}
inline void FutureDealDetail_DealDetail::set_orderno(const char* value, size_t size) {
  set_has_orderno();
  orderno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureDealDetail.DealDetail.orderno)
}
inline ::std::string* FutureDealDetail_DealDetail::mutable_orderno() {
  set_has_orderno();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureDealDetail.DealDetail.orderno)
  return orderno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureDealDetail_DealDetail::release_orderno() {
  // @@protoc_insertion_point(field_release:autotrade.FutureDealDetail.DealDetail.orderno)
  if (!has_orderno()) {
    return NULL;
  }
  clear_has_orderno();
  return orderno_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureDealDetail_DealDetail::set_allocated_orderno(::std::string* orderno) {
  if (orderno != NULL) {
    set_has_orderno();
  } else {
    clear_has_orderno();
  }
  orderno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderno);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureDealDetail.DealDetail.orderno)
}

// optional uint32 market = 4;
inline bool FutureDealDetail_DealDetail::has_market() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FutureDealDetail_DealDetail::set_has_market() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FutureDealDetail_DealDetail::clear_has_market() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FutureDealDetail_DealDetail::clear_market() {
  market_ = 0u;
  clear_has_market();
}
inline ::google::protobuf::uint32 FutureDealDetail_DealDetail::market() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureDealDetail.DealDetail.market)
  return market_;
}
inline void FutureDealDetail_DealDetail::set_market(::google::protobuf::uint32 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureDealDetail.DealDetail.market)
}

// required string code = 5;
inline bool FutureDealDetail_DealDetail::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FutureDealDetail_DealDetail::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FutureDealDetail_DealDetail::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FutureDealDetail_DealDetail::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& FutureDealDetail_DealDetail::code() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureDealDetail.DealDetail.code)
  return code_.GetNoArena();
}
inline void FutureDealDetail_DealDetail::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureDealDetail.DealDetail.code)
}
#if LANG_CXX11
inline void FutureDealDetail_DealDetail::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureDealDetail.DealDetail.code)
}
#endif
inline void FutureDealDetail_DealDetail::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureDealDetail.DealDetail.code)
}
inline void FutureDealDetail_DealDetail::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureDealDetail.DealDetail.code)
}
inline ::std::string* FutureDealDetail_DealDetail::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureDealDetail.DealDetail.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureDealDetail_DealDetail::release_code() {
  // @@protoc_insertion_point(field_release:autotrade.FutureDealDetail.DealDetail.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureDealDetail_DealDetail::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureDealDetail.DealDetail.code)
}

// optional string name = 6;
inline bool FutureDealDetail_DealDetail::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FutureDealDetail_DealDetail::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FutureDealDetail_DealDetail::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FutureDealDetail_DealDetail::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& FutureDealDetail_DealDetail::name() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureDealDetail.DealDetail.name)
  return name_.GetNoArena();
}
inline void FutureDealDetail_DealDetail::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureDealDetail.DealDetail.name)
}
#if LANG_CXX11
inline void FutureDealDetail_DealDetail::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureDealDetail.DealDetail.name)
}
#endif
inline void FutureDealDetail_DealDetail::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureDealDetail.DealDetail.name)
}
inline void FutureDealDetail_DealDetail::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureDealDetail.DealDetail.name)
}
inline ::std::string* FutureDealDetail_DealDetail::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureDealDetail.DealDetail.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureDealDetail_DealDetail::release_name() {
  // @@protoc_insertion_point(field_release:autotrade.FutureDealDetail.DealDetail.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureDealDetail_DealDetail::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureDealDetail.DealDetail.name)
}

// optional uint64 match_time = 7;
inline bool FutureDealDetail_DealDetail::has_match_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FutureDealDetail_DealDetail::set_has_match_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FutureDealDetail_DealDetail::clear_has_match_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FutureDealDetail_DealDetail::clear_match_time() {
  match_time_ = GOOGLE_ULONGLONG(0);
  clear_has_match_time();
}
inline ::google::protobuf::uint64 FutureDealDetail_DealDetail::match_time() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureDealDetail.DealDetail.match_time)
  return match_time_;
}
inline void FutureDealDetail_DealDetail::set_match_time(::google::protobuf::uint64 value) {
  set_has_match_time();
  match_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureDealDetail.DealDetail.match_time)
}

// required uint32 match_qty = 8;
inline bool FutureDealDetail_DealDetail::has_match_qty() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FutureDealDetail_DealDetail::set_has_match_qty() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FutureDealDetail_DealDetail::clear_has_match_qty() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FutureDealDetail_DealDetail::clear_match_qty() {
  match_qty_ = 0u;
  clear_has_match_qty();
}
inline ::google::protobuf::uint32 FutureDealDetail_DealDetail::match_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureDealDetail.DealDetail.match_qty)
  return match_qty_;
}
inline void FutureDealDetail_DealDetail::set_match_qty(::google::protobuf::uint32 value) {
  set_has_match_qty();
  match_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureDealDetail.DealDetail.match_qty)
}

// required int64 match_price = 9;
inline bool FutureDealDetail_DealDetail::has_match_price() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FutureDealDetail_DealDetail::set_has_match_price() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FutureDealDetail_DealDetail::clear_has_match_price() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FutureDealDetail_DealDetail::clear_match_price() {
  match_price_ = GOOGLE_LONGLONG(0);
  clear_has_match_price();
}
inline ::google::protobuf::int64 FutureDealDetail_DealDetail::match_price() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureDealDetail.DealDetail.match_price)
  return match_price_;
}
inline void FutureDealDetail_DealDetail::set_match_price(::google::protobuf::int64 value) {
  set_has_match_price();
  match_price_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureDealDetail.DealDetail.match_price)
}

// required int64 match_amt = 10;
inline bool FutureDealDetail_DealDetail::has_match_amt() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FutureDealDetail_DealDetail::set_has_match_amt() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FutureDealDetail_DealDetail::clear_has_match_amt() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FutureDealDetail_DealDetail::clear_match_amt() {
  match_amt_ = GOOGLE_LONGLONG(0);
  clear_has_match_amt();
}
inline ::google::protobuf::int64 FutureDealDetail_DealDetail::match_amt() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureDealDetail.DealDetail.match_amt)
  return match_amt_;
}
inline void FutureDealDetail_DealDetail::set_match_amt(::google::protobuf::int64 value) {
  set_has_match_amt();
  match_amt_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureDealDetail.DealDetail.match_amt)
}

// required double clear_amt = 11;
inline bool FutureDealDetail_DealDetail::has_clear_amt() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FutureDealDetail_DealDetail::set_has_clear_amt() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FutureDealDetail_DealDetail::clear_has_clear_amt() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FutureDealDetail_DealDetail::clear_clear_amt() {
  clear_amt_ = 0;
  clear_has_clear_amt();
}
inline double FutureDealDetail_DealDetail::clear_amt() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureDealDetail.DealDetail.clear_amt)
  return clear_amt_;
}
inline void FutureDealDetail_DealDetail::set_clear_amt(double value) {
  set_has_clear_amt();
  clear_amt_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureDealDetail.DealDetail.clear_amt)
}

// required int64 match_type = 12;
inline bool FutureDealDetail_DealDetail::has_match_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FutureDealDetail_DealDetail::set_has_match_type() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FutureDealDetail_DealDetail::clear_has_match_type() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FutureDealDetail_DealDetail::clear_match_type() {
  match_type_ = GOOGLE_LONGLONG(0);
  clear_has_match_type();
}
inline ::google::protobuf::int64 FutureDealDetail_DealDetail::match_type() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureDealDetail.DealDetail.match_type)
  return match_type_;
}
inline void FutureDealDetail_DealDetail::set_match_type(::google::protobuf::int64 value) {
  set_has_match_type();
  match_type_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureDealDetail.DealDetail.match_type)
}

// required uint32 order_qty = 13;
inline bool FutureDealDetail_DealDetail::has_order_qty() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FutureDealDetail_DealDetail::set_has_order_qty() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FutureDealDetail_DealDetail::clear_has_order_qty() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FutureDealDetail_DealDetail::clear_order_qty() {
  order_qty_ = 0u;
  clear_has_order_qty();
}
inline ::google::protobuf::uint32 FutureDealDetail_DealDetail::order_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureDealDetail.DealDetail.order_qty)
  return order_qty_;
}
inline void FutureDealDetail_DealDetail::set_order_qty(::google::protobuf::uint32 value) {
  set_has_order_qty();
  order_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureDealDetail.DealDetail.order_qty)
}

// required int64 order_price = 14;
inline bool FutureDealDetail_DealDetail::has_order_price() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void FutureDealDetail_DealDetail::set_has_order_price() {
  _has_bits_[0] |= 0x00002000u;
}
inline void FutureDealDetail_DealDetail::clear_has_order_price() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void FutureDealDetail_DealDetail::clear_order_price() {
  order_price_ = GOOGLE_LONGLONG(0);
  clear_has_order_price();
}
inline ::google::protobuf::int64 FutureDealDetail_DealDetail::order_price() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureDealDetail.DealDetail.order_price)
  return order_price_;
}
inline void FutureDealDetail_DealDetail::set_order_price(::google::protobuf::int64 value) {
  set_has_order_price();
  order_price_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureDealDetail.DealDetail.order_price)
}

// -------------------------------------------------------------------

// FutureDealDetail

// optional int32 funcid = 1 [default = 12102003];
inline bool FutureDealDetail::has_funcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FutureDealDetail::set_has_funcid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FutureDealDetail::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FutureDealDetail::clear_funcid() {
  funcid_ = 12102003;
  clear_has_funcid();
}
inline ::google::protobuf::int32 FutureDealDetail::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureDealDetail.funcid)
  return funcid_;
}
inline void FutureDealDetail::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureDealDetail.funcid)
}

// repeated .autotrade.FutureDealDetail.DealDetail deal_details = 2;
inline int FutureDealDetail::deal_details_size() const {
  return deal_details_.size();
}
inline void FutureDealDetail::clear_deal_details() {
  deal_details_.Clear();
}
inline ::autotrade::FutureDealDetail_DealDetail* FutureDealDetail::mutable_deal_details(int index) {
  // @@protoc_insertion_point(field_mutable:autotrade.FutureDealDetail.deal_details)
  return deal_details_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::autotrade::FutureDealDetail_DealDetail >*
FutureDealDetail::mutable_deal_details() {
  // @@protoc_insertion_point(field_mutable_list:autotrade.FutureDealDetail.deal_details)
  return &deal_details_;
}
inline const ::autotrade::FutureDealDetail_DealDetail& FutureDealDetail::deal_details(int index) const {
  // @@protoc_insertion_point(field_get:autotrade.FutureDealDetail.deal_details)
  return deal_details_.Get(index);
}
inline ::autotrade::FutureDealDetail_DealDetail* FutureDealDetail::add_deal_details() {
  // @@protoc_insertion_point(field_add:autotrade.FutureDealDetail.deal_details)
  return deal_details_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::autotrade::FutureDealDetail_DealDetail >&
FutureDealDetail::deal_details() const {
  // @@protoc_insertion_point(field_list:autotrade.FutureDealDetail.deal_details)
  return deal_details_;
}

// optional string request_id = 3;
inline bool FutureDealDetail::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FutureDealDetail::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FutureDealDetail::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FutureDealDetail::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& FutureDealDetail::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureDealDetail.request_id)
  return request_id_.GetNoArena();
}
inline void FutureDealDetail::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureDealDetail.request_id)
}
#if LANG_CXX11
inline void FutureDealDetail::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureDealDetail.request_id)
}
#endif
inline void FutureDealDetail::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureDealDetail.request_id)
}
inline void FutureDealDetail::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureDealDetail.request_id)
}
inline ::std::string* FutureDealDetail::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureDealDetail.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureDealDetail::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureDealDetail.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureDealDetail::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureDealDetail.request_id)
}

// optional string last_pos = 4;
inline bool FutureDealDetail::has_last_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FutureDealDetail::set_has_last_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FutureDealDetail::clear_has_last_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FutureDealDetail::clear_last_pos() {
  last_pos_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_last_pos();
}
inline const ::std::string& FutureDealDetail::last_pos() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureDealDetail.last_pos)
  return last_pos_.GetNoArena();
}
inline void FutureDealDetail::set_last_pos(const ::std::string& value) {
  set_has_last_pos();
  last_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureDealDetail.last_pos)
}
#if LANG_CXX11
inline void FutureDealDetail::set_last_pos(::std::string&& value) {
  set_has_last_pos();
  last_pos_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureDealDetail.last_pos)
}
#endif
inline void FutureDealDetail::set_last_pos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_last_pos();
  last_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureDealDetail.last_pos)
}
inline void FutureDealDetail::set_last_pos(const char* value, size_t size) {
  set_has_last_pos();
  last_pos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureDealDetail.last_pos)
}
inline ::std::string* FutureDealDetail::mutable_last_pos() {
  set_has_last_pos();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureDealDetail.last_pos)
  return last_pos_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureDealDetail::release_last_pos() {
  // @@protoc_insertion_point(field_release:autotrade.FutureDealDetail.last_pos)
  if (!has_last_pos()) {
    return NULL;
  }
  clear_has_last_pos();
  return last_pos_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureDealDetail::set_allocated_last_pos(::std::string* last_pos) {
  if (last_pos != NULL) {
    set_has_last_pos();
  } else {
    clear_has_last_pos();
  }
  last_pos_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_pos);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureDealDetail.last_pos)
}

// -------------------------------------------------------------------

// OneFutureKnock

// optional int32 funcid = 1 [default = 12003002];
inline bool OneFutureKnock::has_funcid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OneFutureKnock::set_has_funcid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void OneFutureKnock::clear_has_funcid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void OneFutureKnock::clear_funcid() {
  funcid_ = 12003002;
  clear_has_funcid();
}
inline ::google::protobuf::int32 OneFutureKnock::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.OneFutureKnock.funcid)
  return funcid_;
}
inline void OneFutureKnock::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OneFutureKnock.funcid)
}

// required uint64 stamp = 2;
inline bool OneFutureKnock::has_stamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OneFutureKnock::set_has_stamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OneFutureKnock::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OneFutureKnock::clear_stamp() {
  stamp_ = GOOGLE_ULONGLONG(0);
  clear_has_stamp();
}
inline ::google::protobuf::uint64 OneFutureKnock::stamp() const {
  // @@protoc_insertion_point(field_get:autotrade.OneFutureKnock.stamp)
  return stamp_;
}
inline void OneFutureKnock::set_stamp(::google::protobuf::uint64 value) {
  set_has_stamp();
  stamp_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OneFutureKnock.stamp)
}

// required string code = 3;
inline bool OneFutureKnock::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OneFutureKnock::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OneFutureKnock::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OneFutureKnock::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& OneFutureKnock::code() const {
  // @@protoc_insertion_point(field_get:autotrade.OneFutureKnock.code)
  return code_.GetNoArena();
}
inline void OneFutureKnock::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OneFutureKnock.code)
}
#if LANG_CXX11
inline void OneFutureKnock::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OneFutureKnock.code)
}
#endif
inline void OneFutureKnock::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OneFutureKnock.code)
}
inline void OneFutureKnock::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OneFutureKnock.code)
}
inline ::std::string* OneFutureKnock::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:autotrade.OneFutureKnock.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OneFutureKnock::release_code() {
  // @@protoc_insertion_point(field_release:autotrade.OneFutureKnock.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OneFutureKnock::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OneFutureKnock.code)
}

// required string order_group = 4;
inline bool OneFutureKnock::has_order_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OneFutureKnock::set_has_order_group() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OneFutureKnock::clear_has_order_group() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OneFutureKnock::clear_order_group() {
  order_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_group();
}
inline const ::std::string& OneFutureKnock::order_group() const {
  // @@protoc_insertion_point(field_get:autotrade.OneFutureKnock.order_group)
  return order_group_.GetNoArena();
}
inline void OneFutureKnock::set_order_group(const ::std::string& value) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OneFutureKnock.order_group)
}
#if LANG_CXX11
inline void OneFutureKnock::set_order_group(::std::string&& value) {
  set_has_order_group();
  order_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OneFutureKnock.order_group)
}
#endif
inline void OneFutureKnock::set_order_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OneFutureKnock.order_group)
}
inline void OneFutureKnock::set_order_group(const char* value, size_t size) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OneFutureKnock.order_group)
}
inline ::std::string* OneFutureKnock::mutable_order_group() {
  set_has_order_group();
  // @@protoc_insertion_point(field_mutable:autotrade.OneFutureKnock.order_group)
  return order_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OneFutureKnock::release_order_group() {
  // @@protoc_insertion_point(field_release:autotrade.OneFutureKnock.order_group)
  if (!has_order_group()) {
    return NULL;
  }
  clear_has_order_group();
  return order_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OneFutureKnock::set_allocated_order_group(::std::string* order_group) {
  if (order_group != NULL) {
    set_has_order_group();
  } else {
    clear_has_order_group();
  }
  order_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_group);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OneFutureKnock.order_group)
}

// optional string order_no = 5;
inline bool OneFutureKnock::has_order_no() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OneFutureKnock::set_has_order_no() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OneFutureKnock::clear_has_order_no() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OneFutureKnock::clear_order_no() {
  order_no_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_no();
}
inline const ::std::string& OneFutureKnock::order_no() const {
  // @@protoc_insertion_point(field_get:autotrade.OneFutureKnock.order_no)
  return order_no_.GetNoArena();
}
inline void OneFutureKnock::set_order_no(const ::std::string& value) {
  set_has_order_no();
  order_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OneFutureKnock.order_no)
}
#if LANG_CXX11
inline void OneFutureKnock::set_order_no(::std::string&& value) {
  set_has_order_no();
  order_no_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OneFutureKnock.order_no)
}
#endif
inline void OneFutureKnock::set_order_no(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_no();
  order_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OneFutureKnock.order_no)
}
inline void OneFutureKnock::set_order_no(const char* value, size_t size) {
  set_has_order_no();
  order_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OneFutureKnock.order_no)
}
inline ::std::string* OneFutureKnock::mutable_order_no() {
  set_has_order_no();
  // @@protoc_insertion_point(field_mutable:autotrade.OneFutureKnock.order_no)
  return order_no_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OneFutureKnock::release_order_no() {
  // @@protoc_insertion_point(field_release:autotrade.OneFutureKnock.order_no)
  if (!has_order_no()) {
    return NULL;
  }
  clear_has_order_no();
  return order_no_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OneFutureKnock::set_allocated_order_no(::std::string* order_no) {
  if (order_no != NULL) {
    set_has_order_no();
  } else {
    clear_has_order_no();
  }
  order_no_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_no);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OneFutureKnock.order_no)
}

// optional string match_id = 6;
inline bool OneFutureKnock::has_match_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OneFutureKnock::set_has_match_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OneFutureKnock::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OneFutureKnock::clear_match_id() {
  match_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_match_id();
}
inline const ::std::string& OneFutureKnock::match_id() const {
  // @@protoc_insertion_point(field_get:autotrade.OneFutureKnock.match_id)
  return match_id_.GetNoArena();
}
inline void OneFutureKnock::set_match_id(const ::std::string& value) {
  set_has_match_id();
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OneFutureKnock.match_id)
}
#if LANG_CXX11
inline void OneFutureKnock::set_match_id(::std::string&& value) {
  set_has_match_id();
  match_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OneFutureKnock.match_id)
}
#endif
inline void OneFutureKnock::set_match_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_match_id();
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OneFutureKnock.match_id)
}
inline void OneFutureKnock::set_match_id(const char* value, size_t size) {
  set_has_match_id();
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OneFutureKnock.match_id)
}
inline ::std::string* OneFutureKnock::mutable_match_id() {
  set_has_match_id();
  // @@protoc_insertion_point(field_mutable:autotrade.OneFutureKnock.match_id)
  return match_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OneFutureKnock::release_match_id() {
  // @@protoc_insertion_point(field_release:autotrade.OneFutureKnock.match_id)
  if (!has_match_id()) {
    return NULL;
  }
  clear_has_match_id();
  return match_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OneFutureKnock::set_allocated_match_id(::std::string* match_id) {
  if (match_id != NULL) {
    set_has_match_id();
  } else {
    clear_has_match_id();
  }
  match_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), match_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OneFutureKnock.match_id)
}

// required int64 order_price = 7;
inline bool OneFutureKnock::has_order_price() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OneFutureKnock::set_has_order_price() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OneFutureKnock::clear_has_order_price() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OneFutureKnock::clear_order_price() {
  order_price_ = GOOGLE_LONGLONG(0);
  clear_has_order_price();
}
inline ::google::protobuf::int64 OneFutureKnock::order_price() const {
  // @@protoc_insertion_point(field_get:autotrade.OneFutureKnock.order_price)
  return order_price_;
}
inline void OneFutureKnock::set_order_price(::google::protobuf::int64 value) {
  set_has_order_price();
  order_price_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OneFutureKnock.order_price)
}

// required int64 match_price = 8;
inline bool OneFutureKnock::has_match_price() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OneFutureKnock::set_has_match_price() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OneFutureKnock::clear_has_match_price() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OneFutureKnock::clear_match_price() {
  match_price_ = GOOGLE_LONGLONG(0);
  clear_has_match_price();
}
inline ::google::protobuf::int64 OneFutureKnock::match_price() const {
  // @@protoc_insertion_point(field_get:autotrade.OneFutureKnock.match_price)
  return match_price_;
}
inline void OneFutureKnock::set_match_price(::google::protobuf::int64 value) {
  set_has_match_price();
  match_price_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OneFutureKnock.match_price)
}

// required uint64 order_qty = 9;
inline bool OneFutureKnock::has_order_qty() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OneFutureKnock::set_has_order_qty() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OneFutureKnock::clear_has_order_qty() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OneFutureKnock::clear_order_qty() {
  order_qty_ = GOOGLE_ULONGLONG(0);
  clear_has_order_qty();
}
inline ::google::protobuf::uint64 OneFutureKnock::order_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.OneFutureKnock.order_qty)
  return order_qty_;
}
inline void OneFutureKnock::set_order_qty(::google::protobuf::uint64 value) {
  set_has_order_qty();
  order_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OneFutureKnock.order_qty)
}

// required uint64 match_qty = 10;
inline bool OneFutureKnock::has_match_qty() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OneFutureKnock::set_has_match_qty() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OneFutureKnock::clear_has_match_qty() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OneFutureKnock::clear_match_qty() {
  match_qty_ = GOOGLE_ULONGLONG(0);
  clear_has_match_qty();
}
inline ::google::protobuf::uint64 OneFutureKnock::match_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.OneFutureKnock.match_qty)
  return match_qty_;
}
inline void OneFutureKnock::set_match_qty(::google::protobuf::uint64 value) {
  set_has_match_qty();
  match_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OneFutureKnock.match_qty)
}

// optional double match_amt = 11;
inline bool OneFutureKnock::has_match_amt() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OneFutureKnock::set_has_match_amt() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OneFutureKnock::clear_has_match_amt() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OneFutureKnock::clear_match_amt() {
  match_amt_ = 0;
  clear_has_match_amt();
}
inline double OneFutureKnock::match_amt() const {
  // @@protoc_insertion_point(field_get:autotrade.OneFutureKnock.match_amt)
  return match_amt_;
}
inline void OneFutureKnock::set_match_amt(double value) {
  set_has_match_amt();
  match_amt_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OneFutureKnock.match_amt)
}

// optional uint32 bsflag = 12;
inline bool OneFutureKnock::has_bsflag() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OneFutureKnock::set_has_bsflag() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OneFutureKnock::clear_has_bsflag() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OneFutureKnock::clear_bsflag() {
  bsflag_ = 0u;
  clear_has_bsflag();
}
inline ::google::protobuf::uint32 OneFutureKnock::bsflag() const {
  // @@protoc_insertion_point(field_get:autotrade.OneFutureKnock.bsflag)
  return bsflag_;
}
inline void OneFutureKnock::set_bsflag(::google::protobuf::uint32 value) {
  set_has_bsflag();
  bsflag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.OneFutureKnock.bsflag)
}

// optional string account_name = 13;
inline bool OneFutureKnock::has_account_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OneFutureKnock::set_has_account_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OneFutureKnock::clear_has_account_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OneFutureKnock::clear_account_name() {
  account_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account_name();
}
inline const ::std::string& OneFutureKnock::account_name() const {
  // @@protoc_insertion_point(field_get:autotrade.OneFutureKnock.account_name)
  return account_name_.GetNoArena();
}
inline void OneFutureKnock::set_account_name(const ::std::string& value) {
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.OneFutureKnock.account_name)
}
#if LANG_CXX11
inline void OneFutureKnock::set_account_name(::std::string&& value) {
  set_has_account_name();
  account_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.OneFutureKnock.account_name)
}
#endif
inline void OneFutureKnock::set_account_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.OneFutureKnock.account_name)
}
inline void OneFutureKnock::set_account_name(const char* value, size_t size) {
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.OneFutureKnock.account_name)
}
inline ::std::string* OneFutureKnock::mutable_account_name() {
  set_has_account_name();
  // @@protoc_insertion_point(field_mutable:autotrade.OneFutureKnock.account_name)
  return account_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OneFutureKnock::release_account_name() {
  // @@protoc_insertion_point(field_release:autotrade.OneFutureKnock.account_name)
  if (!has_account_name()) {
    return NULL;
  }
  clear_has_account_name();
  return account_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OneFutureKnock::set_allocated_account_name(::std::string* account_name) {
  if (account_name != NULL) {
    set_has_account_name();
  } else {
    clear_has_account_name();
  }
  account_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_name);
  // @@protoc_insertion_point(field_set_allocated:autotrade.OneFutureKnock.account_name)
}

// -------------------------------------------------------------------

// SumFutureKnock

// optional int32 funcid = 1 [default = 12003003];
inline bool SumFutureKnock::has_funcid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SumFutureKnock::set_has_funcid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SumFutureKnock::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SumFutureKnock::clear_funcid() {
  funcid_ = 12003003;
  clear_has_funcid();
}
inline ::google::protobuf::int32 SumFutureKnock::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.SumFutureKnock.funcid)
  return funcid_;
}
inline void SumFutureKnock::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.SumFutureKnock.funcid)
}

// required uint64 stamp = 2;
inline bool SumFutureKnock::has_stamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SumFutureKnock::set_has_stamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SumFutureKnock::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SumFutureKnock::clear_stamp() {
  stamp_ = GOOGLE_ULONGLONG(0);
  clear_has_stamp();
}
inline ::google::protobuf::uint64 SumFutureKnock::stamp() const {
  // @@protoc_insertion_point(field_get:autotrade.SumFutureKnock.stamp)
  return stamp_;
}
inline void SumFutureKnock::set_stamp(::google::protobuf::uint64 value) {
  set_has_stamp();
  stamp_ = value;
  // @@protoc_insertion_point(field_set:autotrade.SumFutureKnock.stamp)
}

// optional string type = 3 [default = "F"];
inline bool SumFutureKnock::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SumFutureKnock::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SumFutureKnock::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SumFutureKnock::clear_type() {
  type_.ClearToDefaultNoArena(&::autotrade::SumFutureKnock::_i_give_permission_to_break_this_code_default_type_.get());
  clear_has_type();
}
inline const ::std::string& SumFutureKnock::type() const {
  // @@protoc_insertion_point(field_get:autotrade.SumFutureKnock.type)
  return type_.GetNoArena();
}
inline void SumFutureKnock::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::autotrade::SumFutureKnock::_i_give_permission_to_break_this_code_default_type_.get(), value);
  // @@protoc_insertion_point(field_set:autotrade.SumFutureKnock.type)
}
#if LANG_CXX11
inline void SumFutureKnock::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::autotrade::SumFutureKnock::_i_give_permission_to_break_this_code_default_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.SumFutureKnock.type)
}
#endif
inline void SumFutureKnock::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::autotrade::SumFutureKnock::_i_give_permission_to_break_this_code_default_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.SumFutureKnock.type)
}
inline void SumFutureKnock::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::autotrade::SumFutureKnock::_i_give_permission_to_break_this_code_default_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.SumFutureKnock.type)
}
inline ::std::string* SumFutureKnock::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:autotrade.SumFutureKnock.type)
  return type_.MutableNoArena(&::autotrade::SumFutureKnock::_i_give_permission_to_break_this_code_default_type_.get());
}
inline ::std::string* SumFutureKnock::release_type() {
  // @@protoc_insertion_point(field_release:autotrade.SumFutureKnock.type)
  if (!has_type()) {
    return NULL;
  }
  clear_has_type();
  return type_.ReleaseNonDefaultNoArena(&::autotrade::SumFutureKnock::_i_give_permission_to_break_this_code_default_type_.get());
}
inline void SumFutureKnock::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::autotrade::SumFutureKnock::_i_give_permission_to_break_this_code_default_type_.get(), type);
  // @@protoc_insertion_point(field_set_allocated:autotrade.SumFutureKnock.type)
}

// required string order_group = 4;
inline bool SumFutureKnock::has_order_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SumFutureKnock::set_has_order_group() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SumFutureKnock::clear_has_order_group() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SumFutureKnock::clear_order_group() {
  order_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_group();
}
inline const ::std::string& SumFutureKnock::order_group() const {
  // @@protoc_insertion_point(field_get:autotrade.SumFutureKnock.order_group)
  return order_group_.GetNoArena();
}
inline void SumFutureKnock::set_order_group(const ::std::string& value) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.SumFutureKnock.order_group)
}
#if LANG_CXX11
inline void SumFutureKnock::set_order_group(::std::string&& value) {
  set_has_order_group();
  order_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.SumFutureKnock.order_group)
}
#endif
inline void SumFutureKnock::set_order_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.SumFutureKnock.order_group)
}
inline void SumFutureKnock::set_order_group(const char* value, size_t size) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.SumFutureKnock.order_group)
}
inline ::std::string* SumFutureKnock::mutable_order_group() {
  set_has_order_group();
  // @@protoc_insertion_point(field_mutable:autotrade.SumFutureKnock.order_group)
  return order_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SumFutureKnock::release_order_group() {
  // @@protoc_insertion_point(field_release:autotrade.SumFutureKnock.order_group)
  if (!has_order_group()) {
    return NULL;
  }
  clear_has_order_group();
  return order_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SumFutureKnock::set_allocated_order_group(::std::string* order_group) {
  if (order_group != NULL) {
    set_has_order_group();
  } else {
    clear_has_order_group();
  }
  order_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_group);
  // @@protoc_insertion_point(field_set_allocated:autotrade.SumFutureKnock.order_group)
}

// required uint64 order_qty = 5;
inline bool SumFutureKnock::has_order_qty() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SumFutureKnock::set_has_order_qty() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SumFutureKnock::clear_has_order_qty() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SumFutureKnock::clear_order_qty() {
  order_qty_ = GOOGLE_ULONGLONG(0);
  clear_has_order_qty();
}
inline ::google::protobuf::uint64 SumFutureKnock::order_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.SumFutureKnock.order_qty)
  return order_qty_;
}
inline void SumFutureKnock::set_order_qty(::google::protobuf::uint64 value) {
  set_has_order_qty();
  order_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.SumFutureKnock.order_qty)
}

// required uint64 match_qty = 6;
inline bool SumFutureKnock::has_match_qty() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SumFutureKnock::set_has_match_qty() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SumFutureKnock::clear_has_match_qty() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SumFutureKnock::clear_match_qty() {
  match_qty_ = GOOGLE_ULONGLONG(0);
  clear_has_match_qty();
}
inline ::google::protobuf::uint64 SumFutureKnock::match_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.SumFutureKnock.match_qty)
  return match_qty_;
}
inline void SumFutureKnock::set_match_qty(::google::protobuf::uint64 value) {
  set_has_match_qty();
  match_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.SumFutureKnock.match_qty)
}

// optional double match_amt = 7;
inline bool SumFutureKnock::has_match_amt() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SumFutureKnock::set_has_match_amt() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SumFutureKnock::clear_has_match_amt() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SumFutureKnock::clear_match_amt() {
  match_amt_ = 0;
  clear_has_match_amt();
}
inline double SumFutureKnock::match_amt() const {
  // @@protoc_insertion_point(field_get:autotrade.SumFutureKnock.match_amt)
  return match_amt_;
}
inline void SumFutureKnock::set_match_amt(double value) {
  set_has_match_amt();
  match_amt_ = value;
  // @@protoc_insertion_point(field_set:autotrade.SumFutureKnock.match_amt)
}

// required uint64 cancel_qty = 8 [default = 0];
inline bool SumFutureKnock::has_cancel_qty() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SumFutureKnock::set_has_cancel_qty() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SumFutureKnock::clear_has_cancel_qty() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SumFutureKnock::clear_cancel_qty() {
  cancel_qty_ = GOOGLE_ULONGLONG(0);
  clear_has_cancel_qty();
}
inline ::google::protobuf::uint64 SumFutureKnock::cancel_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.SumFutureKnock.cancel_qty)
  return cancel_qty_;
}
inline void SumFutureKnock::set_cancel_qty(::google::protobuf::uint64 value) {
  set_has_cancel_qty();
  cancel_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.SumFutureKnock.cancel_qty)
}

// required bool finished = 9 [default = false];
inline bool SumFutureKnock::has_finished() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SumFutureKnock::set_has_finished() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SumFutureKnock::clear_has_finished() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SumFutureKnock::clear_finished() {
  finished_ = false;
  clear_has_finished();
}
inline bool SumFutureKnock::finished() const {
  // @@protoc_insertion_point(field_get:autotrade.SumFutureKnock.finished)
  return finished_;
}
inline void SumFutureKnock::set_finished(bool value) {
  set_has_finished();
  finished_ = value;
  // @@protoc_insertion_point(field_set:autotrade.SumFutureKnock.finished)
}

// required string order_id = 10;
inline bool SumFutureKnock::has_order_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SumFutureKnock::set_has_order_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SumFutureKnock::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SumFutureKnock::clear_order_id() {
  order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_id();
}
inline const ::std::string& SumFutureKnock::order_id() const {
  // @@protoc_insertion_point(field_get:autotrade.SumFutureKnock.order_id)
  return order_id_.GetNoArena();
}
inline void SumFutureKnock::set_order_id(const ::std::string& value) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.SumFutureKnock.order_id)
}
#if LANG_CXX11
inline void SumFutureKnock::set_order_id(::std::string&& value) {
  set_has_order_id();
  order_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.SumFutureKnock.order_id)
}
#endif
inline void SumFutureKnock::set_order_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.SumFutureKnock.order_id)
}
inline void SumFutureKnock::set_order_id(const char* value, size_t size) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.SumFutureKnock.order_id)
}
inline ::std::string* SumFutureKnock::mutable_order_id() {
  set_has_order_id();
  // @@protoc_insertion_point(field_mutable:autotrade.SumFutureKnock.order_id)
  return order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SumFutureKnock::release_order_id() {
  // @@protoc_insertion_point(field_release:autotrade.SumFutureKnock.order_id)
  if (!has_order_id()) {
    return NULL;
  }
  clear_has_order_id();
  return order_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SumFutureKnock::set_allocated_order_id(::std::string* order_id) {
  if (order_id != NULL) {
    set_has_order_id();
  } else {
    clear_has_order_id();
  }
  order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.SumFutureKnock.order_id)
}

// repeated .autotrade.OneFutureKnock one_knocks = 11;
inline int SumFutureKnock::one_knocks_size() const {
  return one_knocks_.size();
}
inline void SumFutureKnock::clear_one_knocks() {
  one_knocks_.Clear();
}
inline ::autotrade::OneFutureKnock* SumFutureKnock::mutable_one_knocks(int index) {
  // @@protoc_insertion_point(field_mutable:autotrade.SumFutureKnock.one_knocks)
  return one_knocks_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::autotrade::OneFutureKnock >*
SumFutureKnock::mutable_one_knocks() {
  // @@protoc_insertion_point(field_mutable_list:autotrade.SumFutureKnock.one_knocks)
  return &one_knocks_;
}
inline const ::autotrade::OneFutureKnock& SumFutureKnock::one_knocks(int index) const {
  // @@protoc_insertion_point(field_get:autotrade.SumFutureKnock.one_knocks)
  return one_knocks_.Get(index);
}
inline ::autotrade::OneFutureKnock* SumFutureKnock::add_one_knocks() {
  // @@protoc_insertion_point(field_add:autotrade.SumFutureKnock.one_knocks)
  return one_knocks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::autotrade::OneFutureKnock >&
SumFutureKnock::one_knocks() const {
  // @@protoc_insertion_point(field_list:autotrade.SumFutureKnock.one_knocks)
  return one_knocks_;
}

// optional string account_name = 12 [default = ""];
inline bool SumFutureKnock::has_account_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SumFutureKnock::set_has_account_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SumFutureKnock::clear_has_account_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SumFutureKnock::clear_account_name() {
  account_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account_name();
}
inline const ::std::string& SumFutureKnock::account_name() const {
  // @@protoc_insertion_point(field_get:autotrade.SumFutureKnock.account_name)
  return account_name_.GetNoArena();
}
inline void SumFutureKnock::set_account_name(const ::std::string& value) {
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.SumFutureKnock.account_name)
}
#if LANG_CXX11
inline void SumFutureKnock::set_account_name(::std::string&& value) {
  set_has_account_name();
  account_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.SumFutureKnock.account_name)
}
#endif
inline void SumFutureKnock::set_account_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.SumFutureKnock.account_name)
}
inline void SumFutureKnock::set_account_name(const char* value, size_t size) {
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.SumFutureKnock.account_name)
}
inline ::std::string* SumFutureKnock::mutable_account_name() {
  set_has_account_name();
  // @@protoc_insertion_point(field_mutable:autotrade.SumFutureKnock.account_name)
  return account_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SumFutureKnock::release_account_name() {
  // @@protoc_insertion_point(field_release:autotrade.SumFutureKnock.account_name)
  if (!has_account_name()) {
    return NULL;
  }
  clear_has_account_name();
  return account_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SumFutureKnock::set_allocated_account_name(::std::string* account_name) {
  if (account_name != NULL) {
    set_has_account_name();
  } else {
    clear_has_account_name();
  }
  account_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_name);
  // @@protoc_insertion_point(field_set_allocated:autotrade.SumFutureKnock.account_name)
}

// -------------------------------------------------------------------

// FutureQuerySettlementReqt

// optional int32 funcid = 1 [default = 12002006];
inline bool FutureQuerySettlementReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FutureQuerySettlementReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FutureQuerySettlementReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FutureQuerySettlementReqt::clear_funcid() {
  funcid_ = 12002006;
  clear_has_funcid();
}
inline ::google::protobuf::int32 FutureQuerySettlementReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQuerySettlementReqt.funcid)
  return funcid_;
}
inline void FutureQuerySettlementReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureQuerySettlementReqt.funcid)
}

// optional string broker_id = 2;
inline bool FutureQuerySettlementReqt::has_broker_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FutureQuerySettlementReqt::set_has_broker_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FutureQuerySettlementReqt::clear_has_broker_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FutureQuerySettlementReqt::clear_broker_id() {
  broker_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_broker_id();
}
inline const ::std::string& FutureQuerySettlementReqt::broker_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQuerySettlementReqt.broker_id)
  return broker_id_.GetNoArena();
}
inline void FutureQuerySettlementReqt::set_broker_id(const ::std::string& value) {
  set_has_broker_id();
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureQuerySettlementReqt.broker_id)
}
#if LANG_CXX11
inline void FutureQuerySettlementReqt::set_broker_id(::std::string&& value) {
  set_has_broker_id();
  broker_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureQuerySettlementReqt.broker_id)
}
#endif
inline void FutureQuerySettlementReqt::set_broker_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_broker_id();
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureQuerySettlementReqt.broker_id)
}
inline void FutureQuerySettlementReqt::set_broker_id(const char* value, size_t size) {
  set_has_broker_id();
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureQuerySettlementReqt.broker_id)
}
inline ::std::string* FutureQuerySettlementReqt::mutable_broker_id() {
  set_has_broker_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureQuerySettlementReqt.broker_id)
  return broker_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureQuerySettlementReqt::release_broker_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureQuerySettlementReqt.broker_id)
  if (!has_broker_id()) {
    return NULL;
  }
  clear_has_broker_id();
  return broker_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureQuerySettlementReqt::set_allocated_broker_id(::std::string* broker_id) {
  if (broker_id != NULL) {
    set_has_broker_id();
  } else {
    clear_has_broker_id();
  }
  broker_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), broker_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureQuerySettlementReqt.broker_id)
}

// optional string future_account = 3;
inline bool FutureQuerySettlementReqt::has_future_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FutureQuerySettlementReqt::set_has_future_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FutureQuerySettlementReqt::clear_has_future_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FutureQuerySettlementReqt::clear_future_account() {
  future_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_future_account();
}
inline const ::std::string& FutureQuerySettlementReqt::future_account() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQuerySettlementReqt.future_account)
  return future_account_.GetNoArena();
}
inline void FutureQuerySettlementReqt::set_future_account(const ::std::string& value) {
  set_has_future_account();
  future_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureQuerySettlementReqt.future_account)
}
#if LANG_CXX11
inline void FutureQuerySettlementReqt::set_future_account(::std::string&& value) {
  set_has_future_account();
  future_account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureQuerySettlementReqt.future_account)
}
#endif
inline void FutureQuerySettlementReqt::set_future_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_future_account();
  future_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureQuerySettlementReqt.future_account)
}
inline void FutureQuerySettlementReqt::set_future_account(const char* value, size_t size) {
  set_has_future_account();
  future_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureQuerySettlementReqt.future_account)
}
inline ::std::string* FutureQuerySettlementReqt::mutable_future_account() {
  set_has_future_account();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureQuerySettlementReqt.future_account)
  return future_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureQuerySettlementReqt::release_future_account() {
  // @@protoc_insertion_point(field_release:autotrade.FutureQuerySettlementReqt.future_account)
  if (!has_future_account()) {
    return NULL;
  }
  clear_has_future_account();
  return future_account_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureQuerySettlementReqt::set_allocated_future_account(::std::string* future_account) {
  if (future_account != NULL) {
    set_has_future_account();
  } else {
    clear_has_future_account();
  }
  future_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), future_account);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureQuerySettlementReqt.future_account)
}

// optional string request_id = 4;
inline bool FutureQuerySettlementReqt::has_request_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FutureQuerySettlementReqt::set_has_request_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FutureQuerySettlementReqt::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FutureQuerySettlementReqt::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& FutureQuerySettlementReqt::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQuerySettlementReqt.request_id)
  return request_id_.GetNoArena();
}
inline void FutureQuerySettlementReqt::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureQuerySettlementReqt.request_id)
}
#if LANG_CXX11
inline void FutureQuerySettlementReqt::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureQuerySettlementReqt.request_id)
}
#endif
inline void FutureQuerySettlementReqt::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureQuerySettlementReqt.request_id)
}
inline void FutureQuerySettlementReqt::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureQuerySettlementReqt.request_id)
}
inline ::std::string* FutureQuerySettlementReqt::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureQuerySettlementReqt.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureQuerySettlementReqt::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureQuerySettlementReqt.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureQuerySettlementReqt::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureQuerySettlementReqt.request_id)
}

// optional string trading_day = 5;
inline bool FutureQuerySettlementReqt::has_trading_day() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FutureQuerySettlementReqt::set_has_trading_day() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FutureQuerySettlementReqt::clear_has_trading_day() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FutureQuerySettlementReqt::clear_trading_day() {
  trading_day_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trading_day();
}
inline const ::std::string& FutureQuerySettlementReqt::trading_day() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQuerySettlementReqt.trading_day)
  return trading_day_.GetNoArena();
}
inline void FutureQuerySettlementReqt::set_trading_day(const ::std::string& value) {
  set_has_trading_day();
  trading_day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureQuerySettlementReqt.trading_day)
}
#if LANG_CXX11
inline void FutureQuerySettlementReqt::set_trading_day(::std::string&& value) {
  set_has_trading_day();
  trading_day_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureQuerySettlementReqt.trading_day)
}
#endif
inline void FutureQuerySettlementReqt::set_trading_day(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trading_day();
  trading_day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureQuerySettlementReqt.trading_day)
}
inline void FutureQuerySettlementReqt::set_trading_day(const char* value, size_t size) {
  set_has_trading_day();
  trading_day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureQuerySettlementReqt.trading_day)
}
inline ::std::string* FutureQuerySettlementReqt::mutable_trading_day() {
  set_has_trading_day();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureQuerySettlementReqt.trading_day)
  return trading_day_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureQuerySettlementReqt::release_trading_day() {
  // @@protoc_insertion_point(field_release:autotrade.FutureQuerySettlementReqt.trading_day)
  if (!has_trading_day()) {
    return NULL;
  }
  clear_has_trading_day();
  return trading_day_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureQuerySettlementReqt::set_allocated_trading_day(::std::string* trading_day) {
  if (trading_day != NULL) {
    set_has_trading_day();
  } else {
    clear_has_trading_day();
  }
  trading_day_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trading_day);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureQuerySettlementReqt.trading_day)
}

// -------------------------------------------------------------------

// FutureQuerySettlementResp

// optional int32 funcid = 1 [default = 12102006];
inline bool FutureQuerySettlementResp::has_funcid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FutureQuerySettlementResp::set_has_funcid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FutureQuerySettlementResp::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FutureQuerySettlementResp::clear_funcid() {
  funcid_ = 12102006;
  clear_has_funcid();
}
inline ::google::protobuf::int32 FutureQuerySettlementResp::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQuerySettlementResp.funcid)
  return funcid_;
}
inline void FutureQuerySettlementResp::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureQuerySettlementResp.funcid)
}

// optional string broker_id = 2;
inline bool FutureQuerySettlementResp::has_broker_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FutureQuerySettlementResp::set_has_broker_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FutureQuerySettlementResp::clear_has_broker_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FutureQuerySettlementResp::clear_broker_id() {
  broker_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_broker_id();
}
inline const ::std::string& FutureQuerySettlementResp::broker_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQuerySettlementResp.broker_id)
  return broker_id_.GetNoArena();
}
inline void FutureQuerySettlementResp::set_broker_id(const ::std::string& value) {
  set_has_broker_id();
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureQuerySettlementResp.broker_id)
}
#if LANG_CXX11
inline void FutureQuerySettlementResp::set_broker_id(::std::string&& value) {
  set_has_broker_id();
  broker_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureQuerySettlementResp.broker_id)
}
#endif
inline void FutureQuerySettlementResp::set_broker_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_broker_id();
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureQuerySettlementResp.broker_id)
}
inline void FutureQuerySettlementResp::set_broker_id(const char* value, size_t size) {
  set_has_broker_id();
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureQuerySettlementResp.broker_id)
}
inline ::std::string* FutureQuerySettlementResp::mutable_broker_id() {
  set_has_broker_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureQuerySettlementResp.broker_id)
  return broker_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureQuerySettlementResp::release_broker_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureQuerySettlementResp.broker_id)
  if (!has_broker_id()) {
    return NULL;
  }
  clear_has_broker_id();
  return broker_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureQuerySettlementResp::set_allocated_broker_id(::std::string* broker_id) {
  if (broker_id != NULL) {
    set_has_broker_id();
  } else {
    clear_has_broker_id();
  }
  broker_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), broker_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureQuerySettlementResp.broker_id)
}

// optional string future_account = 3;
inline bool FutureQuerySettlementResp::has_future_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FutureQuerySettlementResp::set_has_future_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FutureQuerySettlementResp::clear_has_future_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FutureQuerySettlementResp::clear_future_account() {
  future_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_future_account();
}
inline const ::std::string& FutureQuerySettlementResp::future_account() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQuerySettlementResp.future_account)
  return future_account_.GetNoArena();
}
inline void FutureQuerySettlementResp::set_future_account(const ::std::string& value) {
  set_has_future_account();
  future_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureQuerySettlementResp.future_account)
}
#if LANG_CXX11
inline void FutureQuerySettlementResp::set_future_account(::std::string&& value) {
  set_has_future_account();
  future_account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureQuerySettlementResp.future_account)
}
#endif
inline void FutureQuerySettlementResp::set_future_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_future_account();
  future_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureQuerySettlementResp.future_account)
}
inline void FutureQuerySettlementResp::set_future_account(const char* value, size_t size) {
  set_has_future_account();
  future_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureQuerySettlementResp.future_account)
}
inline ::std::string* FutureQuerySettlementResp::mutable_future_account() {
  set_has_future_account();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureQuerySettlementResp.future_account)
  return future_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureQuerySettlementResp::release_future_account() {
  // @@protoc_insertion_point(field_release:autotrade.FutureQuerySettlementResp.future_account)
  if (!has_future_account()) {
    return NULL;
  }
  clear_has_future_account();
  return future_account_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureQuerySettlementResp::set_allocated_future_account(::std::string* future_account) {
  if (future_account != NULL) {
    set_has_future_account();
  } else {
    clear_has_future_account();
  }
  future_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), future_account);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureQuerySettlementResp.future_account)
}

// optional string request_id = 4;
inline bool FutureQuerySettlementResp::has_request_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FutureQuerySettlementResp::set_has_request_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FutureQuerySettlementResp::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FutureQuerySettlementResp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& FutureQuerySettlementResp::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQuerySettlementResp.request_id)
  return request_id_.GetNoArena();
}
inline void FutureQuerySettlementResp::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureQuerySettlementResp.request_id)
}
#if LANG_CXX11
inline void FutureQuerySettlementResp::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureQuerySettlementResp.request_id)
}
#endif
inline void FutureQuerySettlementResp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureQuerySettlementResp.request_id)
}
inline void FutureQuerySettlementResp::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureQuerySettlementResp.request_id)
}
inline ::std::string* FutureQuerySettlementResp::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureQuerySettlementResp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureQuerySettlementResp::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureQuerySettlementResp.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureQuerySettlementResp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureQuerySettlementResp.request_id)
}

// optional string trading_day = 5;
inline bool FutureQuerySettlementResp::has_trading_day() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FutureQuerySettlementResp::set_has_trading_day() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FutureQuerySettlementResp::clear_has_trading_day() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FutureQuerySettlementResp::clear_trading_day() {
  trading_day_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trading_day();
}
inline const ::std::string& FutureQuerySettlementResp::trading_day() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQuerySettlementResp.trading_day)
  return trading_day_.GetNoArena();
}
inline void FutureQuerySettlementResp::set_trading_day(const ::std::string& value) {
  set_has_trading_day();
  trading_day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureQuerySettlementResp.trading_day)
}
#if LANG_CXX11
inline void FutureQuerySettlementResp::set_trading_day(::std::string&& value) {
  set_has_trading_day();
  trading_day_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureQuerySettlementResp.trading_day)
}
#endif
inline void FutureQuerySettlementResp::set_trading_day(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trading_day();
  trading_day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureQuerySettlementResp.trading_day)
}
inline void FutureQuerySettlementResp::set_trading_day(const char* value, size_t size) {
  set_has_trading_day();
  trading_day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureQuerySettlementResp.trading_day)
}
inline ::std::string* FutureQuerySettlementResp::mutable_trading_day() {
  set_has_trading_day();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureQuerySettlementResp.trading_day)
  return trading_day_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureQuerySettlementResp::release_trading_day() {
  // @@protoc_insertion_point(field_release:autotrade.FutureQuerySettlementResp.trading_day)
  if (!has_trading_day()) {
    return NULL;
  }
  clear_has_trading_day();
  return trading_day_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureQuerySettlementResp::set_allocated_trading_day(::std::string* trading_day) {
  if (trading_day != NULL) {
    set_has_trading_day();
  } else {
    clear_has_trading_day();
  }
  trading_day_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trading_day);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureQuerySettlementResp.trading_day)
}

// optional int32 sequence_no = 6;
inline bool FutureQuerySettlementResp::has_sequence_no() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FutureQuerySettlementResp::set_has_sequence_no() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FutureQuerySettlementResp::clear_has_sequence_no() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FutureQuerySettlementResp::clear_sequence_no() {
  sequence_no_ = 0;
  clear_has_sequence_no();
}
inline ::google::protobuf::int32 FutureQuerySettlementResp::sequence_no() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQuerySettlementResp.sequence_no)
  return sequence_no_;
}
inline void FutureQuerySettlementResp::set_sequence_no(::google::protobuf::int32 value) {
  set_has_sequence_no();
  sequence_no_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureQuerySettlementResp.sequence_no)
}

// optional int32 settlement_id = 7;
inline bool FutureQuerySettlementResp::has_settlement_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FutureQuerySettlementResp::set_has_settlement_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FutureQuerySettlementResp::clear_has_settlement_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FutureQuerySettlementResp::clear_settlement_id() {
  settlement_id_ = 0;
  clear_has_settlement_id();
}
inline ::google::protobuf::int32 FutureQuerySettlementResp::settlement_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQuerySettlementResp.settlement_id)
  return settlement_id_;
}
inline void FutureQuerySettlementResp::set_settlement_id(::google::protobuf::int32 value) {
  set_has_settlement_id();
  settlement_id_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureQuerySettlementResp.settlement_id)
}

// optional string settlement_content = 8;
inline bool FutureQuerySettlementResp::has_settlement_content() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FutureQuerySettlementResp::set_has_settlement_content() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FutureQuerySettlementResp::clear_has_settlement_content() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FutureQuerySettlementResp::clear_settlement_content() {
  settlement_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_settlement_content();
}
inline const ::std::string& FutureQuerySettlementResp::settlement_content() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQuerySettlementResp.settlement_content)
  return settlement_content_.GetNoArena();
}
inline void FutureQuerySettlementResp::set_settlement_content(const ::std::string& value) {
  set_has_settlement_content();
  settlement_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureQuerySettlementResp.settlement_content)
}
#if LANG_CXX11
inline void FutureQuerySettlementResp::set_settlement_content(::std::string&& value) {
  set_has_settlement_content();
  settlement_content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureQuerySettlementResp.settlement_content)
}
#endif
inline void FutureQuerySettlementResp::set_settlement_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_settlement_content();
  settlement_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureQuerySettlementResp.settlement_content)
}
inline void FutureQuerySettlementResp::set_settlement_content(const char* value, size_t size) {
  set_has_settlement_content();
  settlement_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureQuerySettlementResp.settlement_content)
}
inline ::std::string* FutureQuerySettlementResp::mutable_settlement_content() {
  set_has_settlement_content();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureQuerySettlementResp.settlement_content)
  return settlement_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureQuerySettlementResp::release_settlement_content() {
  // @@protoc_insertion_point(field_release:autotrade.FutureQuerySettlementResp.settlement_content)
  if (!has_settlement_content()) {
    return NULL;
  }
  clear_has_settlement_content();
  return settlement_content_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureQuerySettlementResp::set_allocated_settlement_content(::std::string* settlement_content) {
  if (settlement_content != NULL) {
    set_has_settlement_content();
  } else {
    clear_has_settlement_content();
  }
  settlement_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), settlement_content);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureQuerySettlementResp.settlement_content)
}

// required int32 ret_code = 9;
inline bool FutureQuerySettlementResp::has_ret_code() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FutureQuerySettlementResp::set_has_ret_code() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FutureQuerySettlementResp::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FutureQuerySettlementResp::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 FutureQuerySettlementResp::ret_code() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQuerySettlementResp.ret_code)
  return ret_code_;
}
inline void FutureQuerySettlementResp::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureQuerySettlementResp.ret_code)
}

// optional string ret_message = 10;
inline bool FutureQuerySettlementResp::has_ret_message() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FutureQuerySettlementResp::set_has_ret_message() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FutureQuerySettlementResp::clear_has_ret_message() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FutureQuerySettlementResp::clear_ret_message() {
  ret_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ret_message();
}
inline const ::std::string& FutureQuerySettlementResp::ret_message() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQuerySettlementResp.ret_message)
  return ret_message_.GetNoArena();
}
inline void FutureQuerySettlementResp::set_ret_message(const ::std::string& value) {
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureQuerySettlementResp.ret_message)
}
#if LANG_CXX11
inline void FutureQuerySettlementResp::set_ret_message(::std::string&& value) {
  set_has_ret_message();
  ret_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureQuerySettlementResp.ret_message)
}
#endif
inline void FutureQuerySettlementResp::set_ret_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureQuerySettlementResp.ret_message)
}
inline void FutureQuerySettlementResp::set_ret_message(const char* value, size_t size) {
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureQuerySettlementResp.ret_message)
}
inline ::std::string* FutureQuerySettlementResp::mutable_ret_message() {
  set_has_ret_message();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureQuerySettlementResp.ret_message)
  return ret_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureQuerySettlementResp::release_ret_message() {
  // @@protoc_insertion_point(field_release:autotrade.FutureQuerySettlementResp.ret_message)
  if (!has_ret_message()) {
    return NULL;
  }
  clear_has_ret_message();
  return ret_message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureQuerySettlementResp::set_allocated_ret_message(::std::string* ret_message) {
  if (ret_message != NULL) {
    set_has_ret_message();
  } else {
    clear_has_ret_message();
  }
  ret_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ret_message);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureQuerySettlementResp.ret_message)
}

// -------------------------------------------------------------------

// FutureConfirmSettlementReqt

// optional int32 funcid = 1 [default = 12102007];
inline bool FutureConfirmSettlementReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FutureConfirmSettlementReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FutureConfirmSettlementReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FutureConfirmSettlementReqt::clear_funcid() {
  funcid_ = 12102007;
  clear_has_funcid();
}
inline ::google::protobuf::int32 FutureConfirmSettlementReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureConfirmSettlementReqt.funcid)
  return funcid_;
}
inline void FutureConfirmSettlementReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureConfirmSettlementReqt.funcid)
}

// optional string broker_id = 2;
inline bool FutureConfirmSettlementReqt::has_broker_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FutureConfirmSettlementReqt::set_has_broker_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FutureConfirmSettlementReqt::clear_has_broker_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FutureConfirmSettlementReqt::clear_broker_id() {
  broker_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_broker_id();
}
inline const ::std::string& FutureConfirmSettlementReqt::broker_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureConfirmSettlementReqt.broker_id)
  return broker_id_.GetNoArena();
}
inline void FutureConfirmSettlementReqt::set_broker_id(const ::std::string& value) {
  set_has_broker_id();
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureConfirmSettlementReqt.broker_id)
}
#if LANG_CXX11
inline void FutureConfirmSettlementReqt::set_broker_id(::std::string&& value) {
  set_has_broker_id();
  broker_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureConfirmSettlementReqt.broker_id)
}
#endif
inline void FutureConfirmSettlementReqt::set_broker_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_broker_id();
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureConfirmSettlementReqt.broker_id)
}
inline void FutureConfirmSettlementReqt::set_broker_id(const char* value, size_t size) {
  set_has_broker_id();
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureConfirmSettlementReqt.broker_id)
}
inline ::std::string* FutureConfirmSettlementReqt::mutable_broker_id() {
  set_has_broker_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureConfirmSettlementReqt.broker_id)
  return broker_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureConfirmSettlementReqt::release_broker_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureConfirmSettlementReqt.broker_id)
  if (!has_broker_id()) {
    return NULL;
  }
  clear_has_broker_id();
  return broker_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureConfirmSettlementReqt::set_allocated_broker_id(::std::string* broker_id) {
  if (broker_id != NULL) {
    set_has_broker_id();
  } else {
    clear_has_broker_id();
  }
  broker_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), broker_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureConfirmSettlementReqt.broker_id)
}

// optional string future_account = 3;
inline bool FutureConfirmSettlementReqt::has_future_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FutureConfirmSettlementReqt::set_has_future_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FutureConfirmSettlementReqt::clear_has_future_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FutureConfirmSettlementReqt::clear_future_account() {
  future_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_future_account();
}
inline const ::std::string& FutureConfirmSettlementReqt::future_account() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureConfirmSettlementReqt.future_account)
  return future_account_.GetNoArena();
}
inline void FutureConfirmSettlementReqt::set_future_account(const ::std::string& value) {
  set_has_future_account();
  future_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureConfirmSettlementReqt.future_account)
}
#if LANG_CXX11
inline void FutureConfirmSettlementReqt::set_future_account(::std::string&& value) {
  set_has_future_account();
  future_account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureConfirmSettlementReqt.future_account)
}
#endif
inline void FutureConfirmSettlementReqt::set_future_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_future_account();
  future_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureConfirmSettlementReqt.future_account)
}
inline void FutureConfirmSettlementReqt::set_future_account(const char* value, size_t size) {
  set_has_future_account();
  future_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureConfirmSettlementReqt.future_account)
}
inline ::std::string* FutureConfirmSettlementReqt::mutable_future_account() {
  set_has_future_account();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureConfirmSettlementReqt.future_account)
  return future_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureConfirmSettlementReqt::release_future_account() {
  // @@protoc_insertion_point(field_release:autotrade.FutureConfirmSettlementReqt.future_account)
  if (!has_future_account()) {
    return NULL;
  }
  clear_has_future_account();
  return future_account_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureConfirmSettlementReqt::set_allocated_future_account(::std::string* future_account) {
  if (future_account != NULL) {
    set_has_future_account();
  } else {
    clear_has_future_account();
  }
  future_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), future_account);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureConfirmSettlementReqt.future_account)
}

// optional string request_id = 4;
inline bool FutureConfirmSettlementReqt::has_request_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FutureConfirmSettlementReqt::set_has_request_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FutureConfirmSettlementReqt::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FutureConfirmSettlementReqt::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& FutureConfirmSettlementReqt::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureConfirmSettlementReqt.request_id)
  return request_id_.GetNoArena();
}
inline void FutureConfirmSettlementReqt::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureConfirmSettlementReqt.request_id)
}
#if LANG_CXX11
inline void FutureConfirmSettlementReqt::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureConfirmSettlementReqt.request_id)
}
#endif
inline void FutureConfirmSettlementReqt::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureConfirmSettlementReqt.request_id)
}
inline void FutureConfirmSettlementReqt::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureConfirmSettlementReqt.request_id)
}
inline ::std::string* FutureConfirmSettlementReqt::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureConfirmSettlementReqt.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureConfirmSettlementReqt::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureConfirmSettlementReqt.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureConfirmSettlementReqt::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureConfirmSettlementReqt.request_id)
}

// optional string confirm_date = 5;
inline bool FutureConfirmSettlementReqt::has_confirm_date() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FutureConfirmSettlementReqt::set_has_confirm_date() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FutureConfirmSettlementReqt::clear_has_confirm_date() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FutureConfirmSettlementReqt::clear_confirm_date() {
  confirm_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_confirm_date();
}
inline const ::std::string& FutureConfirmSettlementReqt::confirm_date() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureConfirmSettlementReqt.confirm_date)
  return confirm_date_.GetNoArena();
}
inline void FutureConfirmSettlementReqt::set_confirm_date(const ::std::string& value) {
  set_has_confirm_date();
  confirm_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureConfirmSettlementReqt.confirm_date)
}
#if LANG_CXX11
inline void FutureConfirmSettlementReqt::set_confirm_date(::std::string&& value) {
  set_has_confirm_date();
  confirm_date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureConfirmSettlementReqt.confirm_date)
}
#endif
inline void FutureConfirmSettlementReqt::set_confirm_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_confirm_date();
  confirm_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureConfirmSettlementReqt.confirm_date)
}
inline void FutureConfirmSettlementReqt::set_confirm_date(const char* value, size_t size) {
  set_has_confirm_date();
  confirm_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureConfirmSettlementReqt.confirm_date)
}
inline ::std::string* FutureConfirmSettlementReqt::mutable_confirm_date() {
  set_has_confirm_date();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureConfirmSettlementReqt.confirm_date)
  return confirm_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureConfirmSettlementReqt::release_confirm_date() {
  // @@protoc_insertion_point(field_release:autotrade.FutureConfirmSettlementReqt.confirm_date)
  if (!has_confirm_date()) {
    return NULL;
  }
  clear_has_confirm_date();
  return confirm_date_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureConfirmSettlementReqt::set_allocated_confirm_date(::std::string* confirm_date) {
  if (confirm_date != NULL) {
    set_has_confirm_date();
  } else {
    clear_has_confirm_date();
  }
  confirm_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), confirm_date);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureConfirmSettlementReqt.confirm_date)
}

// optional string confirm_time = 6;
inline bool FutureConfirmSettlementReqt::has_confirm_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FutureConfirmSettlementReqt::set_has_confirm_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FutureConfirmSettlementReqt::clear_has_confirm_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FutureConfirmSettlementReqt::clear_confirm_time() {
  confirm_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_confirm_time();
}
inline const ::std::string& FutureConfirmSettlementReqt::confirm_time() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureConfirmSettlementReqt.confirm_time)
  return confirm_time_.GetNoArena();
}
inline void FutureConfirmSettlementReqt::set_confirm_time(const ::std::string& value) {
  set_has_confirm_time();
  confirm_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureConfirmSettlementReqt.confirm_time)
}
#if LANG_CXX11
inline void FutureConfirmSettlementReqt::set_confirm_time(::std::string&& value) {
  set_has_confirm_time();
  confirm_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureConfirmSettlementReqt.confirm_time)
}
#endif
inline void FutureConfirmSettlementReqt::set_confirm_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_confirm_time();
  confirm_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureConfirmSettlementReqt.confirm_time)
}
inline void FutureConfirmSettlementReqt::set_confirm_time(const char* value, size_t size) {
  set_has_confirm_time();
  confirm_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureConfirmSettlementReqt.confirm_time)
}
inline ::std::string* FutureConfirmSettlementReqt::mutable_confirm_time() {
  set_has_confirm_time();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureConfirmSettlementReqt.confirm_time)
  return confirm_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureConfirmSettlementReqt::release_confirm_time() {
  // @@protoc_insertion_point(field_release:autotrade.FutureConfirmSettlementReqt.confirm_time)
  if (!has_confirm_time()) {
    return NULL;
  }
  clear_has_confirm_time();
  return confirm_time_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureConfirmSettlementReqt::set_allocated_confirm_time(::std::string* confirm_time) {
  if (confirm_time != NULL) {
    set_has_confirm_time();
  } else {
    clear_has_confirm_time();
  }
  confirm_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), confirm_time);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureConfirmSettlementReqt.confirm_time)
}

// -------------------------------------------------------------------

// FutureConfirmSettlementResp

// optional int32 funcid = 1 [default = 12102007];
inline bool FutureConfirmSettlementResp::has_funcid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FutureConfirmSettlementResp::set_has_funcid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FutureConfirmSettlementResp::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FutureConfirmSettlementResp::clear_funcid() {
  funcid_ = 12102007;
  clear_has_funcid();
}
inline ::google::protobuf::int32 FutureConfirmSettlementResp::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureConfirmSettlementResp.funcid)
  return funcid_;
}
inline void FutureConfirmSettlementResp::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureConfirmSettlementResp.funcid)
}

// optional string broker_id = 2;
inline bool FutureConfirmSettlementResp::has_broker_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FutureConfirmSettlementResp::set_has_broker_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FutureConfirmSettlementResp::clear_has_broker_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FutureConfirmSettlementResp::clear_broker_id() {
  broker_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_broker_id();
}
inline const ::std::string& FutureConfirmSettlementResp::broker_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureConfirmSettlementResp.broker_id)
  return broker_id_.GetNoArena();
}
inline void FutureConfirmSettlementResp::set_broker_id(const ::std::string& value) {
  set_has_broker_id();
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureConfirmSettlementResp.broker_id)
}
#if LANG_CXX11
inline void FutureConfirmSettlementResp::set_broker_id(::std::string&& value) {
  set_has_broker_id();
  broker_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureConfirmSettlementResp.broker_id)
}
#endif
inline void FutureConfirmSettlementResp::set_broker_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_broker_id();
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureConfirmSettlementResp.broker_id)
}
inline void FutureConfirmSettlementResp::set_broker_id(const char* value, size_t size) {
  set_has_broker_id();
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureConfirmSettlementResp.broker_id)
}
inline ::std::string* FutureConfirmSettlementResp::mutable_broker_id() {
  set_has_broker_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureConfirmSettlementResp.broker_id)
  return broker_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureConfirmSettlementResp::release_broker_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureConfirmSettlementResp.broker_id)
  if (!has_broker_id()) {
    return NULL;
  }
  clear_has_broker_id();
  return broker_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureConfirmSettlementResp::set_allocated_broker_id(::std::string* broker_id) {
  if (broker_id != NULL) {
    set_has_broker_id();
  } else {
    clear_has_broker_id();
  }
  broker_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), broker_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureConfirmSettlementResp.broker_id)
}

// optional string future_account = 3;
inline bool FutureConfirmSettlementResp::has_future_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FutureConfirmSettlementResp::set_has_future_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FutureConfirmSettlementResp::clear_has_future_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FutureConfirmSettlementResp::clear_future_account() {
  future_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_future_account();
}
inline const ::std::string& FutureConfirmSettlementResp::future_account() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureConfirmSettlementResp.future_account)
  return future_account_.GetNoArena();
}
inline void FutureConfirmSettlementResp::set_future_account(const ::std::string& value) {
  set_has_future_account();
  future_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureConfirmSettlementResp.future_account)
}
#if LANG_CXX11
inline void FutureConfirmSettlementResp::set_future_account(::std::string&& value) {
  set_has_future_account();
  future_account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureConfirmSettlementResp.future_account)
}
#endif
inline void FutureConfirmSettlementResp::set_future_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_future_account();
  future_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureConfirmSettlementResp.future_account)
}
inline void FutureConfirmSettlementResp::set_future_account(const char* value, size_t size) {
  set_has_future_account();
  future_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureConfirmSettlementResp.future_account)
}
inline ::std::string* FutureConfirmSettlementResp::mutable_future_account() {
  set_has_future_account();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureConfirmSettlementResp.future_account)
  return future_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureConfirmSettlementResp::release_future_account() {
  // @@protoc_insertion_point(field_release:autotrade.FutureConfirmSettlementResp.future_account)
  if (!has_future_account()) {
    return NULL;
  }
  clear_has_future_account();
  return future_account_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureConfirmSettlementResp::set_allocated_future_account(::std::string* future_account) {
  if (future_account != NULL) {
    set_has_future_account();
  } else {
    clear_has_future_account();
  }
  future_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), future_account);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureConfirmSettlementResp.future_account)
}

// optional string request_id = 4;
inline bool FutureConfirmSettlementResp::has_request_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FutureConfirmSettlementResp::set_has_request_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FutureConfirmSettlementResp::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FutureConfirmSettlementResp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& FutureConfirmSettlementResp::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureConfirmSettlementResp.request_id)
  return request_id_.GetNoArena();
}
inline void FutureConfirmSettlementResp::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureConfirmSettlementResp.request_id)
}
#if LANG_CXX11
inline void FutureConfirmSettlementResp::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureConfirmSettlementResp.request_id)
}
#endif
inline void FutureConfirmSettlementResp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureConfirmSettlementResp.request_id)
}
inline void FutureConfirmSettlementResp::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureConfirmSettlementResp.request_id)
}
inline ::std::string* FutureConfirmSettlementResp::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureConfirmSettlementResp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureConfirmSettlementResp::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureConfirmSettlementResp.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureConfirmSettlementResp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureConfirmSettlementResp.request_id)
}

// optional string confirm_date = 5;
inline bool FutureConfirmSettlementResp::has_confirm_date() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FutureConfirmSettlementResp::set_has_confirm_date() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FutureConfirmSettlementResp::clear_has_confirm_date() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FutureConfirmSettlementResp::clear_confirm_date() {
  confirm_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_confirm_date();
}
inline const ::std::string& FutureConfirmSettlementResp::confirm_date() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureConfirmSettlementResp.confirm_date)
  return confirm_date_.GetNoArena();
}
inline void FutureConfirmSettlementResp::set_confirm_date(const ::std::string& value) {
  set_has_confirm_date();
  confirm_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureConfirmSettlementResp.confirm_date)
}
#if LANG_CXX11
inline void FutureConfirmSettlementResp::set_confirm_date(::std::string&& value) {
  set_has_confirm_date();
  confirm_date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureConfirmSettlementResp.confirm_date)
}
#endif
inline void FutureConfirmSettlementResp::set_confirm_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_confirm_date();
  confirm_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureConfirmSettlementResp.confirm_date)
}
inline void FutureConfirmSettlementResp::set_confirm_date(const char* value, size_t size) {
  set_has_confirm_date();
  confirm_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureConfirmSettlementResp.confirm_date)
}
inline ::std::string* FutureConfirmSettlementResp::mutable_confirm_date() {
  set_has_confirm_date();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureConfirmSettlementResp.confirm_date)
  return confirm_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureConfirmSettlementResp::release_confirm_date() {
  // @@protoc_insertion_point(field_release:autotrade.FutureConfirmSettlementResp.confirm_date)
  if (!has_confirm_date()) {
    return NULL;
  }
  clear_has_confirm_date();
  return confirm_date_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureConfirmSettlementResp::set_allocated_confirm_date(::std::string* confirm_date) {
  if (confirm_date != NULL) {
    set_has_confirm_date();
  } else {
    clear_has_confirm_date();
  }
  confirm_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), confirm_date);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureConfirmSettlementResp.confirm_date)
}

// optional string confirm_time = 6;
inline bool FutureConfirmSettlementResp::has_confirm_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FutureConfirmSettlementResp::set_has_confirm_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FutureConfirmSettlementResp::clear_has_confirm_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FutureConfirmSettlementResp::clear_confirm_time() {
  confirm_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_confirm_time();
}
inline const ::std::string& FutureConfirmSettlementResp::confirm_time() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureConfirmSettlementResp.confirm_time)
  return confirm_time_.GetNoArena();
}
inline void FutureConfirmSettlementResp::set_confirm_time(const ::std::string& value) {
  set_has_confirm_time();
  confirm_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureConfirmSettlementResp.confirm_time)
}
#if LANG_CXX11
inline void FutureConfirmSettlementResp::set_confirm_time(::std::string&& value) {
  set_has_confirm_time();
  confirm_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureConfirmSettlementResp.confirm_time)
}
#endif
inline void FutureConfirmSettlementResp::set_confirm_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_confirm_time();
  confirm_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureConfirmSettlementResp.confirm_time)
}
inline void FutureConfirmSettlementResp::set_confirm_time(const char* value, size_t size) {
  set_has_confirm_time();
  confirm_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureConfirmSettlementResp.confirm_time)
}
inline ::std::string* FutureConfirmSettlementResp::mutable_confirm_time() {
  set_has_confirm_time();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureConfirmSettlementResp.confirm_time)
  return confirm_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureConfirmSettlementResp::release_confirm_time() {
  // @@protoc_insertion_point(field_release:autotrade.FutureConfirmSettlementResp.confirm_time)
  if (!has_confirm_time()) {
    return NULL;
  }
  clear_has_confirm_time();
  return confirm_time_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureConfirmSettlementResp::set_allocated_confirm_time(::std::string* confirm_time) {
  if (confirm_time != NULL) {
    set_has_confirm_time();
  } else {
    clear_has_confirm_time();
  }
  confirm_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), confirm_time);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureConfirmSettlementResp.confirm_time)
}

// required int32 ret_code = 7;
inline bool FutureConfirmSettlementResp::has_ret_code() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FutureConfirmSettlementResp::set_has_ret_code() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FutureConfirmSettlementResp::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FutureConfirmSettlementResp::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 FutureConfirmSettlementResp::ret_code() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureConfirmSettlementResp.ret_code)
  return ret_code_;
}
inline void FutureConfirmSettlementResp::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureConfirmSettlementResp.ret_code)
}

// optional string ret_message = 8;
inline bool FutureConfirmSettlementResp::has_ret_message() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FutureConfirmSettlementResp::set_has_ret_message() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FutureConfirmSettlementResp::clear_has_ret_message() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FutureConfirmSettlementResp::clear_ret_message() {
  ret_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ret_message();
}
inline const ::std::string& FutureConfirmSettlementResp::ret_message() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureConfirmSettlementResp.ret_message)
  return ret_message_.GetNoArena();
}
inline void FutureConfirmSettlementResp::set_ret_message(const ::std::string& value) {
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureConfirmSettlementResp.ret_message)
}
#if LANG_CXX11
inline void FutureConfirmSettlementResp::set_ret_message(::std::string&& value) {
  set_has_ret_message();
  ret_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureConfirmSettlementResp.ret_message)
}
#endif
inline void FutureConfirmSettlementResp::set_ret_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureConfirmSettlementResp.ret_message)
}
inline void FutureConfirmSettlementResp::set_ret_message(const char* value, size_t size) {
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureConfirmSettlementResp.ret_message)
}
inline ::std::string* FutureConfirmSettlementResp::mutable_ret_message() {
  set_has_ret_message();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureConfirmSettlementResp.ret_message)
  return ret_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureConfirmSettlementResp::release_ret_message() {
  // @@protoc_insertion_point(field_release:autotrade.FutureConfirmSettlementResp.ret_message)
  if (!has_ret_message()) {
    return NULL;
  }
  clear_has_ret_message();
  return ret_message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureConfirmSettlementResp::set_allocated_ret_message(::std::string* ret_message) {
  if (ret_message != NULL) {
    set_has_ret_message();
  } else {
    clear_has_ret_message();
  }
  ret_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ret_message);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureConfirmSettlementResp.ret_message)
}

// optional bool islast = 9 [default = false];
inline bool FutureConfirmSettlementResp::has_islast() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FutureConfirmSettlementResp::set_has_islast() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FutureConfirmSettlementResp::clear_has_islast() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FutureConfirmSettlementResp::clear_islast() {
  islast_ = false;
  clear_has_islast();
}
inline bool FutureConfirmSettlementResp::islast() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureConfirmSettlementResp.islast)
  return islast_;
}
inline void FutureConfirmSettlementResp::set_islast(bool value) {
  set_has_islast();
  islast_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureConfirmSettlementResp.islast)
}

// -------------------------------------------------------------------

// FutureQuerySettlementConfirmReqt

// optional int32 funcid = 1 [default = 12102008];
inline bool FutureQuerySettlementConfirmReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FutureQuerySettlementConfirmReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FutureQuerySettlementConfirmReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FutureQuerySettlementConfirmReqt::clear_funcid() {
  funcid_ = 12102008;
  clear_has_funcid();
}
inline ::google::protobuf::int32 FutureQuerySettlementConfirmReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQuerySettlementConfirmReqt.funcid)
  return funcid_;
}
inline void FutureQuerySettlementConfirmReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureQuerySettlementConfirmReqt.funcid)
}

// optional string broker_id = 2;
inline bool FutureQuerySettlementConfirmReqt::has_broker_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FutureQuerySettlementConfirmReqt::set_has_broker_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FutureQuerySettlementConfirmReqt::clear_has_broker_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FutureQuerySettlementConfirmReqt::clear_broker_id() {
  broker_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_broker_id();
}
inline const ::std::string& FutureQuerySettlementConfirmReqt::broker_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQuerySettlementConfirmReqt.broker_id)
  return broker_id_.GetNoArena();
}
inline void FutureQuerySettlementConfirmReqt::set_broker_id(const ::std::string& value) {
  set_has_broker_id();
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureQuerySettlementConfirmReqt.broker_id)
}
#if LANG_CXX11
inline void FutureQuerySettlementConfirmReqt::set_broker_id(::std::string&& value) {
  set_has_broker_id();
  broker_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureQuerySettlementConfirmReqt.broker_id)
}
#endif
inline void FutureQuerySettlementConfirmReqt::set_broker_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_broker_id();
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureQuerySettlementConfirmReqt.broker_id)
}
inline void FutureQuerySettlementConfirmReqt::set_broker_id(const char* value, size_t size) {
  set_has_broker_id();
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureQuerySettlementConfirmReqt.broker_id)
}
inline ::std::string* FutureQuerySettlementConfirmReqt::mutable_broker_id() {
  set_has_broker_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureQuerySettlementConfirmReqt.broker_id)
  return broker_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureQuerySettlementConfirmReqt::release_broker_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureQuerySettlementConfirmReqt.broker_id)
  if (!has_broker_id()) {
    return NULL;
  }
  clear_has_broker_id();
  return broker_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureQuerySettlementConfirmReqt::set_allocated_broker_id(::std::string* broker_id) {
  if (broker_id != NULL) {
    set_has_broker_id();
  } else {
    clear_has_broker_id();
  }
  broker_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), broker_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureQuerySettlementConfirmReqt.broker_id)
}

// optional string future_account = 3;
inline bool FutureQuerySettlementConfirmReqt::has_future_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FutureQuerySettlementConfirmReqt::set_has_future_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FutureQuerySettlementConfirmReqt::clear_has_future_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FutureQuerySettlementConfirmReqt::clear_future_account() {
  future_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_future_account();
}
inline const ::std::string& FutureQuerySettlementConfirmReqt::future_account() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQuerySettlementConfirmReqt.future_account)
  return future_account_.GetNoArena();
}
inline void FutureQuerySettlementConfirmReqt::set_future_account(const ::std::string& value) {
  set_has_future_account();
  future_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureQuerySettlementConfirmReqt.future_account)
}
#if LANG_CXX11
inline void FutureQuerySettlementConfirmReqt::set_future_account(::std::string&& value) {
  set_has_future_account();
  future_account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureQuerySettlementConfirmReqt.future_account)
}
#endif
inline void FutureQuerySettlementConfirmReqt::set_future_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_future_account();
  future_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureQuerySettlementConfirmReqt.future_account)
}
inline void FutureQuerySettlementConfirmReqt::set_future_account(const char* value, size_t size) {
  set_has_future_account();
  future_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureQuerySettlementConfirmReqt.future_account)
}
inline ::std::string* FutureQuerySettlementConfirmReqt::mutable_future_account() {
  set_has_future_account();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureQuerySettlementConfirmReqt.future_account)
  return future_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureQuerySettlementConfirmReqt::release_future_account() {
  // @@protoc_insertion_point(field_release:autotrade.FutureQuerySettlementConfirmReqt.future_account)
  if (!has_future_account()) {
    return NULL;
  }
  clear_has_future_account();
  return future_account_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureQuerySettlementConfirmReqt::set_allocated_future_account(::std::string* future_account) {
  if (future_account != NULL) {
    set_has_future_account();
  } else {
    clear_has_future_account();
  }
  future_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), future_account);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureQuerySettlementConfirmReqt.future_account)
}

// optional string request_id = 4;
inline bool FutureQuerySettlementConfirmReqt::has_request_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FutureQuerySettlementConfirmReqt::set_has_request_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FutureQuerySettlementConfirmReqt::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FutureQuerySettlementConfirmReqt::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& FutureQuerySettlementConfirmReqt::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQuerySettlementConfirmReqt.request_id)
  return request_id_.GetNoArena();
}
inline void FutureQuerySettlementConfirmReqt::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureQuerySettlementConfirmReqt.request_id)
}
#if LANG_CXX11
inline void FutureQuerySettlementConfirmReqt::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureQuerySettlementConfirmReqt.request_id)
}
#endif
inline void FutureQuerySettlementConfirmReqt::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureQuerySettlementConfirmReqt.request_id)
}
inline void FutureQuerySettlementConfirmReqt::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureQuerySettlementConfirmReqt.request_id)
}
inline ::std::string* FutureQuerySettlementConfirmReqt::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureQuerySettlementConfirmReqt.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureQuerySettlementConfirmReqt::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureQuerySettlementConfirmReqt.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureQuerySettlementConfirmReqt::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureQuerySettlementConfirmReqt.request_id)
}

// -------------------------------------------------------------------

// FutureQuerySettlementConfirmResp

// optional int32 funcid = 1 [default = 12102008];
inline bool FutureQuerySettlementConfirmResp::has_funcid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FutureQuerySettlementConfirmResp::set_has_funcid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FutureQuerySettlementConfirmResp::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FutureQuerySettlementConfirmResp::clear_funcid() {
  funcid_ = 12102008;
  clear_has_funcid();
}
inline ::google::protobuf::int32 FutureQuerySettlementConfirmResp::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQuerySettlementConfirmResp.funcid)
  return funcid_;
}
inline void FutureQuerySettlementConfirmResp::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureQuerySettlementConfirmResp.funcid)
}

// optional string broker_id = 2;
inline bool FutureQuerySettlementConfirmResp::has_broker_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FutureQuerySettlementConfirmResp::set_has_broker_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FutureQuerySettlementConfirmResp::clear_has_broker_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FutureQuerySettlementConfirmResp::clear_broker_id() {
  broker_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_broker_id();
}
inline const ::std::string& FutureQuerySettlementConfirmResp::broker_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQuerySettlementConfirmResp.broker_id)
  return broker_id_.GetNoArena();
}
inline void FutureQuerySettlementConfirmResp::set_broker_id(const ::std::string& value) {
  set_has_broker_id();
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureQuerySettlementConfirmResp.broker_id)
}
#if LANG_CXX11
inline void FutureQuerySettlementConfirmResp::set_broker_id(::std::string&& value) {
  set_has_broker_id();
  broker_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureQuerySettlementConfirmResp.broker_id)
}
#endif
inline void FutureQuerySettlementConfirmResp::set_broker_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_broker_id();
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureQuerySettlementConfirmResp.broker_id)
}
inline void FutureQuerySettlementConfirmResp::set_broker_id(const char* value, size_t size) {
  set_has_broker_id();
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureQuerySettlementConfirmResp.broker_id)
}
inline ::std::string* FutureQuerySettlementConfirmResp::mutable_broker_id() {
  set_has_broker_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureQuerySettlementConfirmResp.broker_id)
  return broker_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureQuerySettlementConfirmResp::release_broker_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureQuerySettlementConfirmResp.broker_id)
  if (!has_broker_id()) {
    return NULL;
  }
  clear_has_broker_id();
  return broker_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureQuerySettlementConfirmResp::set_allocated_broker_id(::std::string* broker_id) {
  if (broker_id != NULL) {
    set_has_broker_id();
  } else {
    clear_has_broker_id();
  }
  broker_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), broker_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureQuerySettlementConfirmResp.broker_id)
}

// optional string future_account = 3;
inline bool FutureQuerySettlementConfirmResp::has_future_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FutureQuerySettlementConfirmResp::set_has_future_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FutureQuerySettlementConfirmResp::clear_has_future_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FutureQuerySettlementConfirmResp::clear_future_account() {
  future_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_future_account();
}
inline const ::std::string& FutureQuerySettlementConfirmResp::future_account() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQuerySettlementConfirmResp.future_account)
  return future_account_.GetNoArena();
}
inline void FutureQuerySettlementConfirmResp::set_future_account(const ::std::string& value) {
  set_has_future_account();
  future_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureQuerySettlementConfirmResp.future_account)
}
#if LANG_CXX11
inline void FutureQuerySettlementConfirmResp::set_future_account(::std::string&& value) {
  set_has_future_account();
  future_account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureQuerySettlementConfirmResp.future_account)
}
#endif
inline void FutureQuerySettlementConfirmResp::set_future_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_future_account();
  future_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureQuerySettlementConfirmResp.future_account)
}
inline void FutureQuerySettlementConfirmResp::set_future_account(const char* value, size_t size) {
  set_has_future_account();
  future_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureQuerySettlementConfirmResp.future_account)
}
inline ::std::string* FutureQuerySettlementConfirmResp::mutable_future_account() {
  set_has_future_account();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureQuerySettlementConfirmResp.future_account)
  return future_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureQuerySettlementConfirmResp::release_future_account() {
  // @@protoc_insertion_point(field_release:autotrade.FutureQuerySettlementConfirmResp.future_account)
  if (!has_future_account()) {
    return NULL;
  }
  clear_has_future_account();
  return future_account_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureQuerySettlementConfirmResp::set_allocated_future_account(::std::string* future_account) {
  if (future_account != NULL) {
    set_has_future_account();
  } else {
    clear_has_future_account();
  }
  future_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), future_account);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureQuerySettlementConfirmResp.future_account)
}

// optional string request_id = 4;
inline bool FutureQuerySettlementConfirmResp::has_request_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FutureQuerySettlementConfirmResp::set_has_request_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FutureQuerySettlementConfirmResp::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FutureQuerySettlementConfirmResp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& FutureQuerySettlementConfirmResp::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQuerySettlementConfirmResp.request_id)
  return request_id_.GetNoArena();
}
inline void FutureQuerySettlementConfirmResp::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureQuerySettlementConfirmResp.request_id)
}
#if LANG_CXX11
inline void FutureQuerySettlementConfirmResp::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureQuerySettlementConfirmResp.request_id)
}
#endif
inline void FutureQuerySettlementConfirmResp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureQuerySettlementConfirmResp.request_id)
}
inline void FutureQuerySettlementConfirmResp::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureQuerySettlementConfirmResp.request_id)
}
inline ::std::string* FutureQuerySettlementConfirmResp::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureQuerySettlementConfirmResp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureQuerySettlementConfirmResp::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureQuerySettlementConfirmResp.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureQuerySettlementConfirmResp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureQuerySettlementConfirmResp.request_id)
}

// optional string confirm_date = 5;
inline bool FutureQuerySettlementConfirmResp::has_confirm_date() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FutureQuerySettlementConfirmResp::set_has_confirm_date() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FutureQuerySettlementConfirmResp::clear_has_confirm_date() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FutureQuerySettlementConfirmResp::clear_confirm_date() {
  confirm_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_confirm_date();
}
inline const ::std::string& FutureQuerySettlementConfirmResp::confirm_date() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQuerySettlementConfirmResp.confirm_date)
  return confirm_date_.GetNoArena();
}
inline void FutureQuerySettlementConfirmResp::set_confirm_date(const ::std::string& value) {
  set_has_confirm_date();
  confirm_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureQuerySettlementConfirmResp.confirm_date)
}
#if LANG_CXX11
inline void FutureQuerySettlementConfirmResp::set_confirm_date(::std::string&& value) {
  set_has_confirm_date();
  confirm_date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureQuerySettlementConfirmResp.confirm_date)
}
#endif
inline void FutureQuerySettlementConfirmResp::set_confirm_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_confirm_date();
  confirm_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureQuerySettlementConfirmResp.confirm_date)
}
inline void FutureQuerySettlementConfirmResp::set_confirm_date(const char* value, size_t size) {
  set_has_confirm_date();
  confirm_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureQuerySettlementConfirmResp.confirm_date)
}
inline ::std::string* FutureQuerySettlementConfirmResp::mutable_confirm_date() {
  set_has_confirm_date();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureQuerySettlementConfirmResp.confirm_date)
  return confirm_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureQuerySettlementConfirmResp::release_confirm_date() {
  // @@protoc_insertion_point(field_release:autotrade.FutureQuerySettlementConfirmResp.confirm_date)
  if (!has_confirm_date()) {
    return NULL;
  }
  clear_has_confirm_date();
  return confirm_date_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureQuerySettlementConfirmResp::set_allocated_confirm_date(::std::string* confirm_date) {
  if (confirm_date != NULL) {
    set_has_confirm_date();
  } else {
    clear_has_confirm_date();
  }
  confirm_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), confirm_date);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureQuerySettlementConfirmResp.confirm_date)
}

// optional string confirm_time = 6;
inline bool FutureQuerySettlementConfirmResp::has_confirm_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FutureQuerySettlementConfirmResp::set_has_confirm_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FutureQuerySettlementConfirmResp::clear_has_confirm_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FutureQuerySettlementConfirmResp::clear_confirm_time() {
  confirm_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_confirm_time();
}
inline const ::std::string& FutureQuerySettlementConfirmResp::confirm_time() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQuerySettlementConfirmResp.confirm_time)
  return confirm_time_.GetNoArena();
}
inline void FutureQuerySettlementConfirmResp::set_confirm_time(const ::std::string& value) {
  set_has_confirm_time();
  confirm_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureQuerySettlementConfirmResp.confirm_time)
}
#if LANG_CXX11
inline void FutureQuerySettlementConfirmResp::set_confirm_time(::std::string&& value) {
  set_has_confirm_time();
  confirm_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureQuerySettlementConfirmResp.confirm_time)
}
#endif
inline void FutureQuerySettlementConfirmResp::set_confirm_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_confirm_time();
  confirm_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureQuerySettlementConfirmResp.confirm_time)
}
inline void FutureQuerySettlementConfirmResp::set_confirm_time(const char* value, size_t size) {
  set_has_confirm_time();
  confirm_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureQuerySettlementConfirmResp.confirm_time)
}
inline ::std::string* FutureQuerySettlementConfirmResp::mutable_confirm_time() {
  set_has_confirm_time();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureQuerySettlementConfirmResp.confirm_time)
  return confirm_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureQuerySettlementConfirmResp::release_confirm_time() {
  // @@protoc_insertion_point(field_release:autotrade.FutureQuerySettlementConfirmResp.confirm_time)
  if (!has_confirm_time()) {
    return NULL;
  }
  clear_has_confirm_time();
  return confirm_time_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureQuerySettlementConfirmResp::set_allocated_confirm_time(::std::string* confirm_time) {
  if (confirm_time != NULL) {
    set_has_confirm_time();
  } else {
    clear_has_confirm_time();
  }
  confirm_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), confirm_time);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureQuerySettlementConfirmResp.confirm_time)
}

// required int32 ret_code = 7;
inline bool FutureQuerySettlementConfirmResp::has_ret_code() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FutureQuerySettlementConfirmResp::set_has_ret_code() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FutureQuerySettlementConfirmResp::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FutureQuerySettlementConfirmResp::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 FutureQuerySettlementConfirmResp::ret_code() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQuerySettlementConfirmResp.ret_code)
  return ret_code_;
}
inline void FutureQuerySettlementConfirmResp::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureQuerySettlementConfirmResp.ret_code)
}

// optional string ret_message = 8;
inline bool FutureQuerySettlementConfirmResp::has_ret_message() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FutureQuerySettlementConfirmResp::set_has_ret_message() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FutureQuerySettlementConfirmResp::clear_has_ret_message() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FutureQuerySettlementConfirmResp::clear_ret_message() {
  ret_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ret_message();
}
inline const ::std::string& FutureQuerySettlementConfirmResp::ret_message() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureQuerySettlementConfirmResp.ret_message)
  return ret_message_.GetNoArena();
}
inline void FutureQuerySettlementConfirmResp::set_ret_message(const ::std::string& value) {
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureQuerySettlementConfirmResp.ret_message)
}
#if LANG_CXX11
inline void FutureQuerySettlementConfirmResp::set_ret_message(::std::string&& value) {
  set_has_ret_message();
  ret_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureQuerySettlementConfirmResp.ret_message)
}
#endif
inline void FutureQuerySettlementConfirmResp::set_ret_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureQuerySettlementConfirmResp.ret_message)
}
inline void FutureQuerySettlementConfirmResp::set_ret_message(const char* value, size_t size) {
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureQuerySettlementConfirmResp.ret_message)
}
inline ::std::string* FutureQuerySettlementConfirmResp::mutable_ret_message() {
  set_has_ret_message();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureQuerySettlementConfirmResp.ret_message)
  return ret_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureQuerySettlementConfirmResp::release_ret_message() {
  // @@protoc_insertion_point(field_release:autotrade.FutureQuerySettlementConfirmResp.ret_message)
  if (!has_ret_message()) {
    return NULL;
  }
  clear_has_ret_message();
  return ret_message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureQuerySettlementConfirmResp::set_allocated_ret_message(::std::string* ret_message) {
  if (ret_message != NULL) {
    set_has_ret_message();
  } else {
    clear_has_ret_message();
  }
  ret_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ret_message);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureQuerySettlementConfirmResp.ret_message)
}

// -------------------------------------------------------------------

// FutureSystemConnected

// optional int32 funcid = 1 [default = 12003004];
inline bool FutureSystemConnected::has_funcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FutureSystemConnected::set_has_funcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FutureSystemConnected::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FutureSystemConnected::clear_funcid() {
  funcid_ = 12003004;
  clear_has_funcid();
}
inline ::google::protobuf::int32 FutureSystemConnected::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureSystemConnected.funcid)
  return funcid_;
}
inline void FutureSystemConnected::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureSystemConnected.funcid)
}

// -------------------------------------------------------------------

// FutureSystemDisconnected

// optional int32 funcid = 1 [default = 12003005];
inline bool FutureSystemDisconnected::has_funcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FutureSystemDisconnected::set_has_funcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FutureSystemDisconnected::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FutureSystemDisconnected::clear_funcid() {
  funcid_ = 12003005;
  clear_has_funcid();
}
inline ::google::protobuf::int32 FutureSystemDisconnected::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureSystemDisconnected.funcid)
  return funcid_;
}
inline void FutureSystemDisconnected::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureSystemDisconnected.funcid)
}

// required int32 reason = 2;
inline bool FutureSystemDisconnected::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FutureSystemDisconnected::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FutureSystemDisconnected::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FutureSystemDisconnected::clear_reason() {
  reason_ = 0;
  clear_has_reason();
}
inline ::google::protobuf::int32 FutureSystemDisconnected::reason() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureSystemDisconnected.reason)
  return reason_;
}
inline void FutureSystemDisconnected::set_reason(::google::protobuf::int32 value) {
  set_has_reason();
  reason_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureSystemDisconnected.reason)
}

// -------------------------------------------------------------------

// FutureOrderInsertResp

// optional int32 funcid = 1 [default = 12003006];
inline bool FutureOrderInsertResp::has_funcid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FutureOrderInsertResp::set_has_funcid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FutureOrderInsertResp::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FutureOrderInsertResp::clear_funcid() {
  funcid_ = 12003006;
  clear_has_funcid();
}
inline ::google::protobuf::int32 FutureOrderInsertResp::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderInsertResp.funcid)
  return funcid_;
}
inline void FutureOrderInsertResp::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderInsertResp.funcid)
}

// required int32 ret_code = 2;
inline bool FutureOrderInsertResp::has_ret_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FutureOrderInsertResp::set_has_ret_code() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FutureOrderInsertResp::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FutureOrderInsertResp::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 FutureOrderInsertResp::ret_code() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderInsertResp.ret_code)
  return ret_code_;
}
inline void FutureOrderInsertResp::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderInsertResp.ret_code)
}

// optional string ret_message = 3;
inline bool FutureOrderInsertResp::has_ret_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FutureOrderInsertResp::set_has_ret_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FutureOrderInsertResp::clear_has_ret_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FutureOrderInsertResp::clear_ret_message() {
  ret_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ret_message();
}
inline const ::std::string& FutureOrderInsertResp::ret_message() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderInsertResp.ret_message)
  return ret_message_.GetNoArena();
}
inline void FutureOrderInsertResp::set_ret_message(const ::std::string& value) {
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderInsertResp.ret_message)
}
#if LANG_CXX11
inline void FutureOrderInsertResp::set_ret_message(::std::string&& value) {
  set_has_ret_message();
  ret_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureOrderInsertResp.ret_message)
}
#endif
inline void FutureOrderInsertResp::set_ret_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureOrderInsertResp.ret_message)
}
inline void FutureOrderInsertResp::set_ret_message(const char* value, size_t size) {
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureOrderInsertResp.ret_message)
}
inline ::std::string* FutureOrderInsertResp::mutable_ret_message() {
  set_has_ret_message();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureOrderInsertResp.ret_message)
  return ret_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureOrderInsertResp::release_ret_message() {
  // @@protoc_insertion_point(field_release:autotrade.FutureOrderInsertResp.ret_message)
  if (!has_ret_message()) {
    return NULL;
  }
  clear_has_ret_message();
  return ret_message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureOrderInsertResp::set_allocated_ret_message(::std::string* ret_message) {
  if (ret_message != NULL) {
    set_has_ret_message();
  } else {
    clear_has_ret_message();
  }
  ret_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ret_message);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureOrderInsertResp.ret_message)
}

// optional string order_group = 4;
inline bool FutureOrderInsertResp::has_order_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FutureOrderInsertResp::set_has_order_group() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FutureOrderInsertResp::clear_has_order_group() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FutureOrderInsertResp::clear_order_group() {
  order_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_group();
}
inline const ::std::string& FutureOrderInsertResp::order_group() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderInsertResp.order_group)
  return order_group_.GetNoArena();
}
inline void FutureOrderInsertResp::set_order_group(const ::std::string& value) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderInsertResp.order_group)
}
#if LANG_CXX11
inline void FutureOrderInsertResp::set_order_group(::std::string&& value) {
  set_has_order_group();
  order_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureOrderInsertResp.order_group)
}
#endif
inline void FutureOrderInsertResp::set_order_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureOrderInsertResp.order_group)
}
inline void FutureOrderInsertResp::set_order_group(const char* value, size_t size) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureOrderInsertResp.order_group)
}
inline ::std::string* FutureOrderInsertResp::mutable_order_group() {
  set_has_order_group();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureOrderInsertResp.order_group)
  return order_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureOrderInsertResp::release_order_group() {
  // @@protoc_insertion_point(field_release:autotrade.FutureOrderInsertResp.order_group)
  if (!has_order_group()) {
    return NULL;
  }
  clear_has_order_group();
  return order_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureOrderInsertResp::set_allocated_order_group(::std::string* order_group) {
  if (order_group != NULL) {
    set_has_order_group();
  } else {
    clear_has_order_group();
  }
  order_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_group);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureOrderInsertResp.order_group)
}

// optional string code = 5;
inline bool FutureOrderInsertResp::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FutureOrderInsertResp::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FutureOrderInsertResp::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FutureOrderInsertResp::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& FutureOrderInsertResp::code() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderInsertResp.code)
  return code_.GetNoArena();
}
inline void FutureOrderInsertResp::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderInsertResp.code)
}
#if LANG_CXX11
inline void FutureOrderInsertResp::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureOrderInsertResp.code)
}
#endif
inline void FutureOrderInsertResp::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureOrderInsertResp.code)
}
inline void FutureOrderInsertResp::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureOrderInsertResp.code)
}
inline ::std::string* FutureOrderInsertResp::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureOrderInsertResp.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureOrderInsertResp::release_code() {
  // @@protoc_insertion_point(field_release:autotrade.FutureOrderInsertResp.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureOrderInsertResp::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureOrderInsertResp.code)
}

// optional int32 bsflag = 6;
inline bool FutureOrderInsertResp::has_bsflag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FutureOrderInsertResp::set_has_bsflag() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FutureOrderInsertResp::clear_has_bsflag() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FutureOrderInsertResp::clear_bsflag() {
  bsflag_ = 0;
  clear_has_bsflag();
}
inline ::google::protobuf::int32 FutureOrderInsertResp::bsflag() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderInsertResp.bsflag)
  return bsflag_;
}
inline void FutureOrderInsertResp::set_bsflag(::google::protobuf::int32 value) {
  set_has_bsflag();
  bsflag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderInsertResp.bsflag)
}

// optional int32 kpcbj = 7;
inline bool FutureOrderInsertResp::has_kpcbj() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FutureOrderInsertResp::set_has_kpcbj() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FutureOrderInsertResp::clear_has_kpcbj() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FutureOrderInsertResp::clear_kpcbj() {
  kpcbj_ = 0;
  clear_has_kpcbj();
}
inline ::google::protobuf::int32 FutureOrderInsertResp::kpcbj() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderInsertResp.kpcbj)
  return kpcbj_;
}
inline void FutureOrderInsertResp::set_kpcbj(::google::protobuf::int32 value) {
  set_has_kpcbj();
  kpcbj_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderInsertResp.kpcbj)
}

// optional int32 hedge_flag = 8;
inline bool FutureOrderInsertResp::has_hedge_flag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FutureOrderInsertResp::set_has_hedge_flag() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FutureOrderInsertResp::clear_has_hedge_flag() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FutureOrderInsertResp::clear_hedge_flag() {
  hedge_flag_ = 0;
  clear_has_hedge_flag();
}
inline ::google::protobuf::int32 FutureOrderInsertResp::hedge_flag() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderInsertResp.hedge_flag)
  return hedge_flag_;
}
inline void FutureOrderInsertResp::set_hedge_flag(::google::protobuf::int32 value) {
  set_has_hedge_flag();
  hedge_flag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderInsertResp.hedge_flag)
}

// optional string account_name = 9;
inline bool FutureOrderInsertResp::has_account_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FutureOrderInsertResp::set_has_account_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FutureOrderInsertResp::clear_has_account_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FutureOrderInsertResp::clear_account_name() {
  account_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account_name();
}
inline const ::std::string& FutureOrderInsertResp::account_name() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderInsertResp.account_name)
  return account_name_.GetNoArena();
}
inline void FutureOrderInsertResp::set_account_name(const ::std::string& value) {
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderInsertResp.account_name)
}
#if LANG_CXX11
inline void FutureOrderInsertResp::set_account_name(::std::string&& value) {
  set_has_account_name();
  account_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureOrderInsertResp.account_name)
}
#endif
inline void FutureOrderInsertResp::set_account_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureOrderInsertResp.account_name)
}
inline void FutureOrderInsertResp::set_account_name(const char* value, size_t size) {
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureOrderInsertResp.account_name)
}
inline ::std::string* FutureOrderInsertResp::mutable_account_name() {
  set_has_account_name();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureOrderInsertResp.account_name)
  return account_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureOrderInsertResp::release_account_name() {
  // @@protoc_insertion_point(field_release:autotrade.FutureOrderInsertResp.account_name)
  if (!has_account_name()) {
    return NULL;
  }
  clear_has_account_name();
  return account_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureOrderInsertResp::set_allocated_account_name(::std::string* account_name) {
  if (account_name != NULL) {
    set_has_account_name();
  } else {
    clear_has_account_name();
  }
  account_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_name);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureOrderInsertResp.account_name)
}

// optional int32 front_id = 10;
inline bool FutureOrderInsertResp::has_front_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FutureOrderInsertResp::set_has_front_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FutureOrderInsertResp::clear_has_front_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FutureOrderInsertResp::clear_front_id() {
  front_id_ = 0;
  clear_has_front_id();
}
inline ::google::protobuf::int32 FutureOrderInsertResp::front_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderInsertResp.front_id)
  return front_id_;
}
inline void FutureOrderInsertResp::set_front_id(::google::protobuf::int32 value) {
  set_has_front_id();
  front_id_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderInsertResp.front_id)
}

// optional int32 session_id = 11;
inline bool FutureOrderInsertResp::has_session_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FutureOrderInsertResp::set_has_session_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FutureOrderInsertResp::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FutureOrderInsertResp::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
inline ::google::protobuf::int32 FutureOrderInsertResp::session_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderInsertResp.session_id)
  return session_id_;
}
inline void FutureOrderInsertResp::set_session_id(::google::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderInsertResp.session_id)
}

// -------------------------------------------------------------------

// FutureOrderActionResp

// optional int32 funcid = 1 [default = 12003007];
inline bool FutureOrderActionResp::has_funcid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FutureOrderActionResp::set_has_funcid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FutureOrderActionResp::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FutureOrderActionResp::clear_funcid() {
  funcid_ = 12003007;
  clear_has_funcid();
}
inline ::google::protobuf::int32 FutureOrderActionResp::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderActionResp.funcid)
  return funcid_;
}
inline void FutureOrderActionResp::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderActionResp.funcid)
}

// required int32 ret_code = 2;
inline bool FutureOrderActionResp::has_ret_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FutureOrderActionResp::set_has_ret_code() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FutureOrderActionResp::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FutureOrderActionResp::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 FutureOrderActionResp::ret_code() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderActionResp.ret_code)
  return ret_code_;
}
inline void FutureOrderActionResp::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderActionResp.ret_code)
}

// optional string ret_message = 3;
inline bool FutureOrderActionResp::has_ret_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FutureOrderActionResp::set_has_ret_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FutureOrderActionResp::clear_has_ret_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FutureOrderActionResp::clear_ret_message() {
  ret_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ret_message();
}
inline const ::std::string& FutureOrderActionResp::ret_message() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderActionResp.ret_message)
  return ret_message_.GetNoArena();
}
inline void FutureOrderActionResp::set_ret_message(const ::std::string& value) {
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderActionResp.ret_message)
}
#if LANG_CXX11
inline void FutureOrderActionResp::set_ret_message(::std::string&& value) {
  set_has_ret_message();
  ret_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureOrderActionResp.ret_message)
}
#endif
inline void FutureOrderActionResp::set_ret_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureOrderActionResp.ret_message)
}
inline void FutureOrderActionResp::set_ret_message(const char* value, size_t size) {
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureOrderActionResp.ret_message)
}
inline ::std::string* FutureOrderActionResp::mutable_ret_message() {
  set_has_ret_message();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureOrderActionResp.ret_message)
  return ret_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureOrderActionResp::release_ret_message() {
  // @@protoc_insertion_point(field_release:autotrade.FutureOrderActionResp.ret_message)
  if (!has_ret_message()) {
    return NULL;
  }
  clear_has_ret_message();
  return ret_message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureOrderActionResp::set_allocated_ret_message(::std::string* ret_message) {
  if (ret_message != NULL) {
    set_has_ret_message();
  } else {
    clear_has_ret_message();
  }
  ret_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ret_message);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureOrderActionResp.ret_message)
}

// optional string order_group = 4;
inline bool FutureOrderActionResp::has_order_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FutureOrderActionResp::set_has_order_group() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FutureOrderActionResp::clear_has_order_group() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FutureOrderActionResp::clear_order_group() {
  order_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_group();
}
inline const ::std::string& FutureOrderActionResp::order_group() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderActionResp.order_group)
  return order_group_.GetNoArena();
}
inline void FutureOrderActionResp::set_order_group(const ::std::string& value) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderActionResp.order_group)
}
#if LANG_CXX11
inline void FutureOrderActionResp::set_order_group(::std::string&& value) {
  set_has_order_group();
  order_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureOrderActionResp.order_group)
}
#endif
inline void FutureOrderActionResp::set_order_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureOrderActionResp.order_group)
}
inline void FutureOrderActionResp::set_order_group(const char* value, size_t size) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureOrderActionResp.order_group)
}
inline ::std::string* FutureOrderActionResp::mutable_order_group() {
  set_has_order_group();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureOrderActionResp.order_group)
  return order_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureOrderActionResp::release_order_group() {
  // @@protoc_insertion_point(field_release:autotrade.FutureOrderActionResp.order_group)
  if (!has_order_group()) {
    return NULL;
  }
  clear_has_order_group();
  return order_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureOrderActionResp::set_allocated_order_group(::std::string* order_group) {
  if (order_group != NULL) {
    set_has_order_group();
  } else {
    clear_has_order_group();
  }
  order_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_group);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureOrderActionResp.order_group)
}

// optional string code = 5;
inline bool FutureOrderActionResp::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FutureOrderActionResp::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FutureOrderActionResp::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FutureOrderActionResp::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& FutureOrderActionResp::code() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderActionResp.code)
  return code_.GetNoArena();
}
inline void FutureOrderActionResp::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderActionResp.code)
}
#if LANG_CXX11
inline void FutureOrderActionResp::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureOrderActionResp.code)
}
#endif
inline void FutureOrderActionResp::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureOrderActionResp.code)
}
inline void FutureOrderActionResp::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureOrderActionResp.code)
}
inline ::std::string* FutureOrderActionResp::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureOrderActionResp.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureOrderActionResp::release_code() {
  // @@protoc_insertion_point(field_release:autotrade.FutureOrderActionResp.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureOrderActionResp::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureOrderActionResp.code)
}

// optional string account_name = 6;
inline bool FutureOrderActionResp::has_account_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FutureOrderActionResp::set_has_account_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FutureOrderActionResp::clear_has_account_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FutureOrderActionResp::clear_account_name() {
  account_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account_name();
}
inline const ::std::string& FutureOrderActionResp::account_name() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderActionResp.account_name)
  return account_name_.GetNoArena();
}
inline void FutureOrderActionResp::set_account_name(const ::std::string& value) {
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderActionResp.account_name)
}
#if LANG_CXX11
inline void FutureOrderActionResp::set_account_name(::std::string&& value) {
  set_has_account_name();
  account_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureOrderActionResp.account_name)
}
#endif
inline void FutureOrderActionResp::set_account_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureOrderActionResp.account_name)
}
inline void FutureOrderActionResp::set_account_name(const char* value, size_t size) {
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureOrderActionResp.account_name)
}
inline ::std::string* FutureOrderActionResp::mutable_account_name() {
  set_has_account_name();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureOrderActionResp.account_name)
  return account_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureOrderActionResp::release_account_name() {
  // @@protoc_insertion_point(field_release:autotrade.FutureOrderActionResp.account_name)
  if (!has_account_name()) {
    return NULL;
  }
  clear_has_account_name();
  return account_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureOrderActionResp::set_allocated_account_name(::std::string* account_name) {
  if (account_name != NULL) {
    set_has_account_name();
  } else {
    clear_has_account_name();
  }
  account_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_name);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureOrderActionResp.account_name)
}

// optional int32 front_id = 7;
inline bool FutureOrderActionResp::has_front_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FutureOrderActionResp::set_has_front_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FutureOrderActionResp::clear_has_front_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FutureOrderActionResp::clear_front_id() {
  front_id_ = 0;
  clear_has_front_id();
}
inline ::google::protobuf::int32 FutureOrderActionResp::front_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderActionResp.front_id)
  return front_id_;
}
inline void FutureOrderActionResp::set_front_id(::google::protobuf::int32 value) {
  set_has_front_id();
  front_id_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderActionResp.front_id)
}

// optional int32 session_id = 8;
inline bool FutureOrderActionResp::has_session_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FutureOrderActionResp::set_has_session_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FutureOrderActionResp::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FutureOrderActionResp::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
inline ::google::protobuf::int32 FutureOrderActionResp::session_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureOrderActionResp.session_id)
  return session_id_;
}
inline void FutureOrderActionResp::set_session_id(::google::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureOrderActionResp.session_id)
}

// -------------------------------------------------------------------

// FutureRtnOrderInsertErr

// optional int32 funcid = 1 [default = 12003008];
inline bool FutureRtnOrderInsertErr::has_funcid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FutureRtnOrderInsertErr::set_has_funcid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FutureRtnOrderInsertErr::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FutureRtnOrderInsertErr::clear_funcid() {
  funcid_ = 12003008;
  clear_has_funcid();
}
inline ::google::protobuf::int32 FutureRtnOrderInsertErr::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrderInsertErr.funcid)
  return funcid_;
}
inline void FutureRtnOrderInsertErr::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrderInsertErr.funcid)
}

// required int32 ret_code = 2;
inline bool FutureRtnOrderInsertErr::has_ret_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FutureRtnOrderInsertErr::set_has_ret_code() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FutureRtnOrderInsertErr::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FutureRtnOrderInsertErr::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 FutureRtnOrderInsertErr::ret_code() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrderInsertErr.ret_code)
  return ret_code_;
}
inline void FutureRtnOrderInsertErr::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrderInsertErr.ret_code)
}

// optional string ret_message = 3;
inline bool FutureRtnOrderInsertErr::has_ret_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FutureRtnOrderInsertErr::set_has_ret_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FutureRtnOrderInsertErr::clear_has_ret_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FutureRtnOrderInsertErr::clear_ret_message() {
  ret_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ret_message();
}
inline const ::std::string& FutureRtnOrderInsertErr::ret_message() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrderInsertErr.ret_message)
  return ret_message_.GetNoArena();
}
inline void FutureRtnOrderInsertErr::set_ret_message(const ::std::string& value) {
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrderInsertErr.ret_message)
}
#if LANG_CXX11
inline void FutureRtnOrderInsertErr::set_ret_message(::std::string&& value) {
  set_has_ret_message();
  ret_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureRtnOrderInsertErr.ret_message)
}
#endif
inline void FutureRtnOrderInsertErr::set_ret_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureRtnOrderInsertErr.ret_message)
}
inline void FutureRtnOrderInsertErr::set_ret_message(const char* value, size_t size) {
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureRtnOrderInsertErr.ret_message)
}
inline ::std::string* FutureRtnOrderInsertErr::mutable_ret_message() {
  set_has_ret_message();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureRtnOrderInsertErr.ret_message)
  return ret_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureRtnOrderInsertErr::release_ret_message() {
  // @@protoc_insertion_point(field_release:autotrade.FutureRtnOrderInsertErr.ret_message)
  if (!has_ret_message()) {
    return NULL;
  }
  clear_has_ret_message();
  return ret_message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureRtnOrderInsertErr::set_allocated_ret_message(::std::string* ret_message) {
  if (ret_message != NULL) {
    set_has_ret_message();
  } else {
    clear_has_ret_message();
  }
  ret_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ret_message);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureRtnOrderInsertErr.ret_message)
}

// optional string order_group = 4;
inline bool FutureRtnOrderInsertErr::has_order_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FutureRtnOrderInsertErr::set_has_order_group() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FutureRtnOrderInsertErr::clear_has_order_group() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FutureRtnOrderInsertErr::clear_order_group() {
  order_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_group();
}
inline const ::std::string& FutureRtnOrderInsertErr::order_group() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrderInsertErr.order_group)
  return order_group_.GetNoArena();
}
inline void FutureRtnOrderInsertErr::set_order_group(const ::std::string& value) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrderInsertErr.order_group)
}
#if LANG_CXX11
inline void FutureRtnOrderInsertErr::set_order_group(::std::string&& value) {
  set_has_order_group();
  order_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureRtnOrderInsertErr.order_group)
}
#endif
inline void FutureRtnOrderInsertErr::set_order_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureRtnOrderInsertErr.order_group)
}
inline void FutureRtnOrderInsertErr::set_order_group(const char* value, size_t size) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureRtnOrderInsertErr.order_group)
}
inline ::std::string* FutureRtnOrderInsertErr::mutable_order_group() {
  set_has_order_group();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureRtnOrderInsertErr.order_group)
  return order_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureRtnOrderInsertErr::release_order_group() {
  // @@protoc_insertion_point(field_release:autotrade.FutureRtnOrderInsertErr.order_group)
  if (!has_order_group()) {
    return NULL;
  }
  clear_has_order_group();
  return order_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureRtnOrderInsertErr::set_allocated_order_group(::std::string* order_group) {
  if (order_group != NULL) {
    set_has_order_group();
  } else {
    clear_has_order_group();
  }
  order_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_group);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureRtnOrderInsertErr.order_group)
}

// optional string code = 5;
inline bool FutureRtnOrderInsertErr::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FutureRtnOrderInsertErr::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FutureRtnOrderInsertErr::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FutureRtnOrderInsertErr::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& FutureRtnOrderInsertErr::code() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrderInsertErr.code)
  return code_.GetNoArena();
}
inline void FutureRtnOrderInsertErr::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrderInsertErr.code)
}
#if LANG_CXX11
inline void FutureRtnOrderInsertErr::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureRtnOrderInsertErr.code)
}
#endif
inline void FutureRtnOrderInsertErr::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureRtnOrderInsertErr.code)
}
inline void FutureRtnOrderInsertErr::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureRtnOrderInsertErr.code)
}
inline ::std::string* FutureRtnOrderInsertErr::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureRtnOrderInsertErr.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureRtnOrderInsertErr::release_code() {
  // @@protoc_insertion_point(field_release:autotrade.FutureRtnOrderInsertErr.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureRtnOrderInsertErr::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureRtnOrderInsertErr.code)
}

// optional int32 bsflag = 6;
inline bool FutureRtnOrderInsertErr::has_bsflag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FutureRtnOrderInsertErr::set_has_bsflag() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FutureRtnOrderInsertErr::clear_has_bsflag() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FutureRtnOrderInsertErr::clear_bsflag() {
  bsflag_ = 0;
  clear_has_bsflag();
}
inline ::google::protobuf::int32 FutureRtnOrderInsertErr::bsflag() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrderInsertErr.bsflag)
  return bsflag_;
}
inline void FutureRtnOrderInsertErr::set_bsflag(::google::protobuf::int32 value) {
  set_has_bsflag();
  bsflag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrderInsertErr.bsflag)
}

// optional int32 kpcbj = 7;
inline bool FutureRtnOrderInsertErr::has_kpcbj() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FutureRtnOrderInsertErr::set_has_kpcbj() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FutureRtnOrderInsertErr::clear_has_kpcbj() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FutureRtnOrderInsertErr::clear_kpcbj() {
  kpcbj_ = 0;
  clear_has_kpcbj();
}
inline ::google::protobuf::int32 FutureRtnOrderInsertErr::kpcbj() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrderInsertErr.kpcbj)
  return kpcbj_;
}
inline void FutureRtnOrderInsertErr::set_kpcbj(::google::protobuf::int32 value) {
  set_has_kpcbj();
  kpcbj_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrderInsertErr.kpcbj)
}

// optional int32 hedge_flag = 8;
inline bool FutureRtnOrderInsertErr::has_hedge_flag() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FutureRtnOrderInsertErr::set_has_hedge_flag() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FutureRtnOrderInsertErr::clear_has_hedge_flag() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FutureRtnOrderInsertErr::clear_hedge_flag() {
  hedge_flag_ = 0;
  clear_has_hedge_flag();
}
inline ::google::protobuf::int32 FutureRtnOrderInsertErr::hedge_flag() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrderInsertErr.hedge_flag)
  return hedge_flag_;
}
inline void FutureRtnOrderInsertErr::set_hedge_flag(::google::protobuf::int32 value) {
  set_has_hedge_flag();
  hedge_flag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrderInsertErr.hedge_flag)
}

// optional string account_name = 9;
inline bool FutureRtnOrderInsertErr::has_account_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FutureRtnOrderInsertErr::set_has_account_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FutureRtnOrderInsertErr::clear_has_account_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FutureRtnOrderInsertErr::clear_account_name() {
  account_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account_name();
}
inline const ::std::string& FutureRtnOrderInsertErr::account_name() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrderInsertErr.account_name)
  return account_name_.GetNoArena();
}
inline void FutureRtnOrderInsertErr::set_account_name(const ::std::string& value) {
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrderInsertErr.account_name)
}
#if LANG_CXX11
inline void FutureRtnOrderInsertErr::set_account_name(::std::string&& value) {
  set_has_account_name();
  account_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureRtnOrderInsertErr.account_name)
}
#endif
inline void FutureRtnOrderInsertErr::set_account_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureRtnOrderInsertErr.account_name)
}
inline void FutureRtnOrderInsertErr::set_account_name(const char* value, size_t size) {
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureRtnOrderInsertErr.account_name)
}
inline ::std::string* FutureRtnOrderInsertErr::mutable_account_name() {
  set_has_account_name();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureRtnOrderInsertErr.account_name)
  return account_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureRtnOrderInsertErr::release_account_name() {
  // @@protoc_insertion_point(field_release:autotrade.FutureRtnOrderInsertErr.account_name)
  if (!has_account_name()) {
    return NULL;
  }
  clear_has_account_name();
  return account_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureRtnOrderInsertErr::set_allocated_account_name(::std::string* account_name) {
  if (account_name != NULL) {
    set_has_account_name();
  } else {
    clear_has_account_name();
  }
  account_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_name);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureRtnOrderInsertErr.account_name)
}

// optional int32 front_id = 10;
inline bool FutureRtnOrderInsertErr::has_front_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FutureRtnOrderInsertErr::set_has_front_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FutureRtnOrderInsertErr::clear_has_front_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FutureRtnOrderInsertErr::clear_front_id() {
  front_id_ = 0;
  clear_has_front_id();
}
inline ::google::protobuf::int32 FutureRtnOrderInsertErr::front_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrderInsertErr.front_id)
  return front_id_;
}
inline void FutureRtnOrderInsertErr::set_front_id(::google::protobuf::int32 value) {
  set_has_front_id();
  front_id_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrderInsertErr.front_id)
}

// optional int32 session_id = 11;
inline bool FutureRtnOrderInsertErr::has_session_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FutureRtnOrderInsertErr::set_has_session_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FutureRtnOrderInsertErr::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FutureRtnOrderInsertErr::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
inline ::google::protobuf::int32 FutureRtnOrderInsertErr::session_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrderInsertErr.session_id)
  return session_id_;
}
inline void FutureRtnOrderInsertErr::set_session_id(::google::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrderInsertErr.session_id)
}

// optional string order_status = 12;
inline bool FutureRtnOrderInsertErr::has_order_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FutureRtnOrderInsertErr::set_has_order_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FutureRtnOrderInsertErr::clear_has_order_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FutureRtnOrderInsertErr::clear_order_status() {
  order_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_status();
}
inline const ::std::string& FutureRtnOrderInsertErr::order_status() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrderInsertErr.order_status)
  return order_status_.GetNoArena();
}
inline void FutureRtnOrderInsertErr::set_order_status(const ::std::string& value) {
  set_has_order_status();
  order_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrderInsertErr.order_status)
}
#if LANG_CXX11
inline void FutureRtnOrderInsertErr::set_order_status(::std::string&& value) {
  set_has_order_status();
  order_status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureRtnOrderInsertErr.order_status)
}
#endif
inline void FutureRtnOrderInsertErr::set_order_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_status();
  order_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureRtnOrderInsertErr.order_status)
}
inline void FutureRtnOrderInsertErr::set_order_status(const char* value, size_t size) {
  set_has_order_status();
  order_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureRtnOrderInsertErr.order_status)
}
inline ::std::string* FutureRtnOrderInsertErr::mutable_order_status() {
  set_has_order_status();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureRtnOrderInsertErr.order_status)
  return order_status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureRtnOrderInsertErr::release_order_status() {
  // @@protoc_insertion_point(field_release:autotrade.FutureRtnOrderInsertErr.order_status)
  if (!has_order_status()) {
    return NULL;
  }
  clear_has_order_status();
  return order_status_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureRtnOrderInsertErr::set_allocated_order_status(::std::string* order_status) {
  if (order_status != NULL) {
    set_has_order_status();
  } else {
    clear_has_order_status();
  }
  order_status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_status);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureRtnOrderInsertErr.order_status)
}

// -------------------------------------------------------------------

// FutureRtnOrderActionErr

// optional int32 funcid = 1 [default = 12003009];
inline bool FutureRtnOrderActionErr::has_funcid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FutureRtnOrderActionErr::set_has_funcid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FutureRtnOrderActionErr::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FutureRtnOrderActionErr::clear_funcid() {
  funcid_ = 12003009;
  clear_has_funcid();
}
inline ::google::protobuf::int32 FutureRtnOrderActionErr::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrderActionErr.funcid)
  return funcid_;
}
inline void FutureRtnOrderActionErr::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrderActionErr.funcid)
}

// required int32 ret_code = 2;
inline bool FutureRtnOrderActionErr::has_ret_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FutureRtnOrderActionErr::set_has_ret_code() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FutureRtnOrderActionErr::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FutureRtnOrderActionErr::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 FutureRtnOrderActionErr::ret_code() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrderActionErr.ret_code)
  return ret_code_;
}
inline void FutureRtnOrderActionErr::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrderActionErr.ret_code)
}

// optional string ret_message = 3;
inline bool FutureRtnOrderActionErr::has_ret_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FutureRtnOrderActionErr::set_has_ret_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FutureRtnOrderActionErr::clear_has_ret_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FutureRtnOrderActionErr::clear_ret_message() {
  ret_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ret_message();
}
inline const ::std::string& FutureRtnOrderActionErr::ret_message() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrderActionErr.ret_message)
  return ret_message_.GetNoArena();
}
inline void FutureRtnOrderActionErr::set_ret_message(const ::std::string& value) {
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrderActionErr.ret_message)
}
#if LANG_CXX11
inline void FutureRtnOrderActionErr::set_ret_message(::std::string&& value) {
  set_has_ret_message();
  ret_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureRtnOrderActionErr.ret_message)
}
#endif
inline void FutureRtnOrderActionErr::set_ret_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureRtnOrderActionErr.ret_message)
}
inline void FutureRtnOrderActionErr::set_ret_message(const char* value, size_t size) {
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureRtnOrderActionErr.ret_message)
}
inline ::std::string* FutureRtnOrderActionErr::mutable_ret_message() {
  set_has_ret_message();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureRtnOrderActionErr.ret_message)
  return ret_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureRtnOrderActionErr::release_ret_message() {
  // @@protoc_insertion_point(field_release:autotrade.FutureRtnOrderActionErr.ret_message)
  if (!has_ret_message()) {
    return NULL;
  }
  clear_has_ret_message();
  return ret_message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureRtnOrderActionErr::set_allocated_ret_message(::std::string* ret_message) {
  if (ret_message != NULL) {
    set_has_ret_message();
  } else {
    clear_has_ret_message();
  }
  ret_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ret_message);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureRtnOrderActionErr.ret_message)
}

// optional string order_group = 4;
inline bool FutureRtnOrderActionErr::has_order_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FutureRtnOrderActionErr::set_has_order_group() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FutureRtnOrderActionErr::clear_has_order_group() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FutureRtnOrderActionErr::clear_order_group() {
  order_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_group();
}
inline const ::std::string& FutureRtnOrderActionErr::order_group() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrderActionErr.order_group)
  return order_group_.GetNoArena();
}
inline void FutureRtnOrderActionErr::set_order_group(const ::std::string& value) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrderActionErr.order_group)
}
#if LANG_CXX11
inline void FutureRtnOrderActionErr::set_order_group(::std::string&& value) {
  set_has_order_group();
  order_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureRtnOrderActionErr.order_group)
}
#endif
inline void FutureRtnOrderActionErr::set_order_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureRtnOrderActionErr.order_group)
}
inline void FutureRtnOrderActionErr::set_order_group(const char* value, size_t size) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureRtnOrderActionErr.order_group)
}
inline ::std::string* FutureRtnOrderActionErr::mutable_order_group() {
  set_has_order_group();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureRtnOrderActionErr.order_group)
  return order_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureRtnOrderActionErr::release_order_group() {
  // @@protoc_insertion_point(field_release:autotrade.FutureRtnOrderActionErr.order_group)
  if (!has_order_group()) {
    return NULL;
  }
  clear_has_order_group();
  return order_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureRtnOrderActionErr::set_allocated_order_group(::std::string* order_group) {
  if (order_group != NULL) {
    set_has_order_group();
  } else {
    clear_has_order_group();
  }
  order_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_group);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureRtnOrderActionErr.order_group)
}

// optional string code = 5;
inline bool FutureRtnOrderActionErr::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FutureRtnOrderActionErr::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FutureRtnOrderActionErr::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FutureRtnOrderActionErr::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& FutureRtnOrderActionErr::code() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrderActionErr.code)
  return code_.GetNoArena();
}
inline void FutureRtnOrderActionErr::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrderActionErr.code)
}
#if LANG_CXX11
inline void FutureRtnOrderActionErr::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureRtnOrderActionErr.code)
}
#endif
inline void FutureRtnOrderActionErr::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureRtnOrderActionErr.code)
}
inline void FutureRtnOrderActionErr::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureRtnOrderActionErr.code)
}
inline ::std::string* FutureRtnOrderActionErr::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureRtnOrderActionErr.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureRtnOrderActionErr::release_code() {
  // @@protoc_insertion_point(field_release:autotrade.FutureRtnOrderActionErr.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureRtnOrderActionErr::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureRtnOrderActionErr.code)
}

// optional string account_name = 6;
inline bool FutureRtnOrderActionErr::has_account_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FutureRtnOrderActionErr::set_has_account_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FutureRtnOrderActionErr::clear_has_account_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FutureRtnOrderActionErr::clear_account_name() {
  account_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account_name();
}
inline const ::std::string& FutureRtnOrderActionErr::account_name() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrderActionErr.account_name)
  return account_name_.GetNoArena();
}
inline void FutureRtnOrderActionErr::set_account_name(const ::std::string& value) {
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrderActionErr.account_name)
}
#if LANG_CXX11
inline void FutureRtnOrderActionErr::set_account_name(::std::string&& value) {
  set_has_account_name();
  account_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureRtnOrderActionErr.account_name)
}
#endif
inline void FutureRtnOrderActionErr::set_account_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureRtnOrderActionErr.account_name)
}
inline void FutureRtnOrderActionErr::set_account_name(const char* value, size_t size) {
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureRtnOrderActionErr.account_name)
}
inline ::std::string* FutureRtnOrderActionErr::mutable_account_name() {
  set_has_account_name();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureRtnOrderActionErr.account_name)
  return account_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureRtnOrderActionErr::release_account_name() {
  // @@protoc_insertion_point(field_release:autotrade.FutureRtnOrderActionErr.account_name)
  if (!has_account_name()) {
    return NULL;
  }
  clear_has_account_name();
  return account_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureRtnOrderActionErr::set_allocated_account_name(::std::string* account_name) {
  if (account_name != NULL) {
    set_has_account_name();
  } else {
    clear_has_account_name();
  }
  account_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_name);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureRtnOrderActionErr.account_name)
}

// optional int32 front_id = 7;
inline bool FutureRtnOrderActionErr::has_front_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FutureRtnOrderActionErr::set_has_front_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FutureRtnOrderActionErr::clear_has_front_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FutureRtnOrderActionErr::clear_front_id() {
  front_id_ = 0;
  clear_has_front_id();
}
inline ::google::protobuf::int32 FutureRtnOrderActionErr::front_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrderActionErr.front_id)
  return front_id_;
}
inline void FutureRtnOrderActionErr::set_front_id(::google::protobuf::int32 value) {
  set_has_front_id();
  front_id_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrderActionErr.front_id)
}

// optional int32 session_id = 8;
inline bool FutureRtnOrderActionErr::has_session_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FutureRtnOrderActionErr::set_has_session_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FutureRtnOrderActionErr::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FutureRtnOrderActionErr::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
inline ::google::protobuf::int32 FutureRtnOrderActionErr::session_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrderActionErr.session_id)
  return session_id_;
}
inline void FutureRtnOrderActionErr::set_session_id(::google::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrderActionErr.session_id)
}

// -------------------------------------------------------------------

// FutureRtnOrder

// optional int32 funcid = 1 [default = 12003010];
inline bool FutureRtnOrder::has_funcid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void FutureRtnOrder::set_has_funcid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void FutureRtnOrder::clear_has_funcid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void FutureRtnOrder::clear_funcid() {
  funcid_ = 12003010;
  clear_has_funcid();
}
inline ::google::protobuf::int32 FutureRtnOrder::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrder.funcid)
  return funcid_;
}
inline void FutureRtnOrder::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrder.funcid)
}

// optional int32 front_id = 2;
inline bool FutureRtnOrder::has_front_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FutureRtnOrder::set_has_front_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FutureRtnOrder::clear_has_front_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FutureRtnOrder::clear_front_id() {
  front_id_ = 0;
  clear_has_front_id();
}
inline ::google::protobuf::int32 FutureRtnOrder::front_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrder.front_id)
  return front_id_;
}
inline void FutureRtnOrder::set_front_id(::google::protobuf::int32 value) {
  set_has_front_id();
  front_id_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrder.front_id)
}

// optional int32 session_id = 3;
inline bool FutureRtnOrder::has_session_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FutureRtnOrder::set_has_session_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FutureRtnOrder::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FutureRtnOrder::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
inline ::google::protobuf::int32 FutureRtnOrder::session_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrder.session_id)
  return session_id_;
}
inline void FutureRtnOrder::set_session_id(::google::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrder.session_id)
}

// optional string exchange_id = 4;
inline bool FutureRtnOrder::has_exchange_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FutureRtnOrder::set_has_exchange_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FutureRtnOrder::clear_has_exchange_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FutureRtnOrder::clear_exchange_id() {
  exchange_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exchange_id();
}
inline const ::std::string& FutureRtnOrder::exchange_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrder.exchange_id)
  return exchange_id_.GetNoArena();
}
inline void FutureRtnOrder::set_exchange_id(const ::std::string& value) {
  set_has_exchange_id();
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrder.exchange_id)
}
#if LANG_CXX11
inline void FutureRtnOrder::set_exchange_id(::std::string&& value) {
  set_has_exchange_id();
  exchange_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureRtnOrder.exchange_id)
}
#endif
inline void FutureRtnOrder::set_exchange_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_exchange_id();
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureRtnOrder.exchange_id)
}
inline void FutureRtnOrder::set_exchange_id(const char* value, size_t size) {
  set_has_exchange_id();
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureRtnOrder.exchange_id)
}
inline ::std::string* FutureRtnOrder::mutable_exchange_id() {
  set_has_exchange_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureRtnOrder.exchange_id)
  return exchange_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureRtnOrder::release_exchange_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureRtnOrder.exchange_id)
  if (!has_exchange_id()) {
    return NULL;
  }
  clear_has_exchange_id();
  return exchange_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureRtnOrder::set_allocated_exchange_id(::std::string* exchange_id) {
  if (exchange_id != NULL) {
    set_has_exchange_id();
  } else {
    clear_has_exchange_id();
  }
  exchange_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureRtnOrder.exchange_id)
}

// optional string account_name = 5;
inline bool FutureRtnOrder::has_account_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FutureRtnOrder::set_has_account_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FutureRtnOrder::clear_has_account_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FutureRtnOrder::clear_account_name() {
  account_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account_name();
}
inline const ::std::string& FutureRtnOrder::account_name() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrder.account_name)
  return account_name_.GetNoArena();
}
inline void FutureRtnOrder::set_account_name(const ::std::string& value) {
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrder.account_name)
}
#if LANG_CXX11
inline void FutureRtnOrder::set_account_name(::std::string&& value) {
  set_has_account_name();
  account_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureRtnOrder.account_name)
}
#endif
inline void FutureRtnOrder::set_account_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureRtnOrder.account_name)
}
inline void FutureRtnOrder::set_account_name(const char* value, size_t size) {
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureRtnOrder.account_name)
}
inline ::std::string* FutureRtnOrder::mutable_account_name() {
  set_has_account_name();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureRtnOrder.account_name)
  return account_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureRtnOrder::release_account_name() {
  // @@protoc_insertion_point(field_release:autotrade.FutureRtnOrder.account_name)
  if (!has_account_name()) {
    return NULL;
  }
  clear_has_account_name();
  return account_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureRtnOrder::set_allocated_account_name(::std::string* account_name) {
  if (account_name != NULL) {
    set_has_account_name();
  } else {
    clear_has_account_name();
  }
  account_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_name);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureRtnOrder.account_name)
}

// optional string order_group = 6;
inline bool FutureRtnOrder::has_order_group() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FutureRtnOrder::set_has_order_group() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FutureRtnOrder::clear_has_order_group() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FutureRtnOrder::clear_order_group() {
  order_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_group();
}
inline const ::std::string& FutureRtnOrder::order_group() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrder.order_group)
  return order_group_.GetNoArena();
}
inline void FutureRtnOrder::set_order_group(const ::std::string& value) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrder.order_group)
}
#if LANG_CXX11
inline void FutureRtnOrder::set_order_group(::std::string&& value) {
  set_has_order_group();
  order_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureRtnOrder.order_group)
}
#endif
inline void FutureRtnOrder::set_order_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureRtnOrder.order_group)
}
inline void FutureRtnOrder::set_order_group(const char* value, size_t size) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureRtnOrder.order_group)
}
inline ::std::string* FutureRtnOrder::mutable_order_group() {
  set_has_order_group();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureRtnOrder.order_group)
  return order_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureRtnOrder::release_order_group() {
  // @@protoc_insertion_point(field_release:autotrade.FutureRtnOrder.order_group)
  if (!has_order_group()) {
    return NULL;
  }
  clear_has_order_group();
  return order_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureRtnOrder::set_allocated_order_group(::std::string* order_group) {
  if (order_group != NULL) {
    set_has_order_group();
  } else {
    clear_has_order_group();
  }
  order_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_group);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureRtnOrder.order_group)
}

// optional string code = 7;
inline bool FutureRtnOrder::has_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FutureRtnOrder::set_has_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FutureRtnOrder::clear_has_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FutureRtnOrder::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& FutureRtnOrder::code() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrder.code)
  return code_.GetNoArena();
}
inline void FutureRtnOrder::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrder.code)
}
#if LANG_CXX11
inline void FutureRtnOrder::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureRtnOrder.code)
}
#endif
inline void FutureRtnOrder::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureRtnOrder.code)
}
inline void FutureRtnOrder::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureRtnOrder.code)
}
inline ::std::string* FutureRtnOrder::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureRtnOrder.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureRtnOrder::release_code() {
  // @@protoc_insertion_point(field_release:autotrade.FutureRtnOrder.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureRtnOrder::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureRtnOrder.code)
}

// optional string order_sys_id = 8;
inline bool FutureRtnOrder::has_order_sys_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FutureRtnOrder::set_has_order_sys_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FutureRtnOrder::clear_has_order_sys_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FutureRtnOrder::clear_order_sys_id() {
  order_sys_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_sys_id();
}
inline const ::std::string& FutureRtnOrder::order_sys_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrder.order_sys_id)
  return order_sys_id_.GetNoArena();
}
inline void FutureRtnOrder::set_order_sys_id(const ::std::string& value) {
  set_has_order_sys_id();
  order_sys_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrder.order_sys_id)
}
#if LANG_CXX11
inline void FutureRtnOrder::set_order_sys_id(::std::string&& value) {
  set_has_order_sys_id();
  order_sys_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureRtnOrder.order_sys_id)
}
#endif
inline void FutureRtnOrder::set_order_sys_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_sys_id();
  order_sys_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureRtnOrder.order_sys_id)
}
inline void FutureRtnOrder::set_order_sys_id(const char* value, size_t size) {
  set_has_order_sys_id();
  order_sys_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureRtnOrder.order_sys_id)
}
inline ::std::string* FutureRtnOrder::mutable_order_sys_id() {
  set_has_order_sys_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureRtnOrder.order_sys_id)
  return order_sys_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureRtnOrder::release_order_sys_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureRtnOrder.order_sys_id)
  if (!has_order_sys_id()) {
    return NULL;
  }
  clear_has_order_sys_id();
  return order_sys_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureRtnOrder::set_allocated_order_sys_id(::std::string* order_sys_id) {
  if (order_sys_id != NULL) {
    set_has_order_sys_id();
  } else {
    clear_has_order_sys_id();
  }
  order_sys_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_sys_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureRtnOrder.order_sys_id)
}

// optional string order_submit_status = 9;
inline bool FutureRtnOrder::has_order_submit_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FutureRtnOrder::set_has_order_submit_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FutureRtnOrder::clear_has_order_submit_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FutureRtnOrder::clear_order_submit_status() {
  order_submit_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_submit_status();
}
inline const ::std::string& FutureRtnOrder::order_submit_status() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrder.order_submit_status)
  return order_submit_status_.GetNoArena();
}
inline void FutureRtnOrder::set_order_submit_status(const ::std::string& value) {
  set_has_order_submit_status();
  order_submit_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrder.order_submit_status)
}
#if LANG_CXX11
inline void FutureRtnOrder::set_order_submit_status(::std::string&& value) {
  set_has_order_submit_status();
  order_submit_status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureRtnOrder.order_submit_status)
}
#endif
inline void FutureRtnOrder::set_order_submit_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_submit_status();
  order_submit_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureRtnOrder.order_submit_status)
}
inline void FutureRtnOrder::set_order_submit_status(const char* value, size_t size) {
  set_has_order_submit_status();
  order_submit_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureRtnOrder.order_submit_status)
}
inline ::std::string* FutureRtnOrder::mutable_order_submit_status() {
  set_has_order_submit_status();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureRtnOrder.order_submit_status)
  return order_submit_status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureRtnOrder::release_order_submit_status() {
  // @@protoc_insertion_point(field_release:autotrade.FutureRtnOrder.order_submit_status)
  if (!has_order_submit_status()) {
    return NULL;
  }
  clear_has_order_submit_status();
  return order_submit_status_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureRtnOrder::set_allocated_order_submit_status(::std::string* order_submit_status) {
  if (order_submit_status != NULL) {
    set_has_order_submit_status();
  } else {
    clear_has_order_submit_status();
  }
  order_submit_status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_submit_status);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureRtnOrder.order_submit_status)
}

// optional string order_local_id = 10;
inline bool FutureRtnOrder::has_order_local_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FutureRtnOrder::set_has_order_local_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FutureRtnOrder::clear_has_order_local_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FutureRtnOrder::clear_order_local_id() {
  order_local_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_local_id();
}
inline const ::std::string& FutureRtnOrder::order_local_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrder.order_local_id)
  return order_local_id_.GetNoArena();
}
inline void FutureRtnOrder::set_order_local_id(const ::std::string& value) {
  set_has_order_local_id();
  order_local_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrder.order_local_id)
}
#if LANG_CXX11
inline void FutureRtnOrder::set_order_local_id(::std::string&& value) {
  set_has_order_local_id();
  order_local_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureRtnOrder.order_local_id)
}
#endif
inline void FutureRtnOrder::set_order_local_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_local_id();
  order_local_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureRtnOrder.order_local_id)
}
inline void FutureRtnOrder::set_order_local_id(const char* value, size_t size) {
  set_has_order_local_id();
  order_local_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureRtnOrder.order_local_id)
}
inline ::std::string* FutureRtnOrder::mutable_order_local_id() {
  set_has_order_local_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureRtnOrder.order_local_id)
  return order_local_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureRtnOrder::release_order_local_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureRtnOrder.order_local_id)
  if (!has_order_local_id()) {
    return NULL;
  }
  clear_has_order_local_id();
  return order_local_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureRtnOrder::set_allocated_order_local_id(::std::string* order_local_id) {
  if (order_local_id != NULL) {
    set_has_order_local_id();
  } else {
    clear_has_order_local_id();
  }
  order_local_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_local_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureRtnOrder.order_local_id)
}

// optional string order_status = 11;
inline bool FutureRtnOrder::has_order_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FutureRtnOrder::set_has_order_status() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FutureRtnOrder::clear_has_order_status() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FutureRtnOrder::clear_order_status() {
  order_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_status();
}
inline const ::std::string& FutureRtnOrder::order_status() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrder.order_status)
  return order_status_.GetNoArena();
}
inline void FutureRtnOrder::set_order_status(const ::std::string& value) {
  set_has_order_status();
  order_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrder.order_status)
}
#if LANG_CXX11
inline void FutureRtnOrder::set_order_status(::std::string&& value) {
  set_has_order_status();
  order_status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureRtnOrder.order_status)
}
#endif
inline void FutureRtnOrder::set_order_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_status();
  order_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureRtnOrder.order_status)
}
inline void FutureRtnOrder::set_order_status(const char* value, size_t size) {
  set_has_order_status();
  order_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureRtnOrder.order_status)
}
inline ::std::string* FutureRtnOrder::mutable_order_status() {
  set_has_order_status();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureRtnOrder.order_status)
  return order_status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureRtnOrder::release_order_status() {
  // @@protoc_insertion_point(field_release:autotrade.FutureRtnOrder.order_status)
  if (!has_order_status()) {
    return NULL;
  }
  clear_has_order_status();
  return order_status_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureRtnOrder::set_allocated_order_status(::std::string* order_status) {
  if (order_status != NULL) {
    set_has_order_status();
  } else {
    clear_has_order_status();
  }
  order_status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_status);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureRtnOrder.order_status)
}

// optional int64 order_qty = 12;
inline bool FutureRtnOrder::has_order_qty() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FutureRtnOrder::set_has_order_qty() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FutureRtnOrder::clear_has_order_qty() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FutureRtnOrder::clear_order_qty() {
  order_qty_ = GOOGLE_LONGLONG(0);
  clear_has_order_qty();
}
inline ::google::protobuf::int64 FutureRtnOrder::order_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrder.order_qty)
  return order_qty_;
}
inline void FutureRtnOrder::set_order_qty(::google::protobuf::int64 value) {
  set_has_order_qty();
  order_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrder.order_qty)
}

// optional int64 match_qty = 13;
inline bool FutureRtnOrder::has_match_qty() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FutureRtnOrder::set_has_match_qty() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FutureRtnOrder::clear_has_match_qty() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FutureRtnOrder::clear_match_qty() {
  match_qty_ = GOOGLE_LONGLONG(0);
  clear_has_match_qty();
}
inline ::google::protobuf::int64 FutureRtnOrder::match_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrder.match_qty)
  return match_qty_;
}
inline void FutureRtnOrder::set_match_qty(::google::protobuf::int64 value) {
  set_has_match_qty();
  match_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrder.match_qty)
}

// optional int64 unmatch_qty = 14;
inline bool FutureRtnOrder::has_unmatch_qty() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FutureRtnOrder::set_has_unmatch_qty() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FutureRtnOrder::clear_has_unmatch_qty() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FutureRtnOrder::clear_unmatch_qty() {
  unmatch_qty_ = GOOGLE_LONGLONG(0);
  clear_has_unmatch_qty();
}
inline ::google::protobuf::int64 FutureRtnOrder::unmatch_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrder.unmatch_qty)
  return unmatch_qty_;
}
inline void FutureRtnOrder::set_unmatch_qty(::google::protobuf::int64 value) {
  set_has_unmatch_qty();
  unmatch_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrder.unmatch_qty)
}

// optional int32 bsflag = 15;
inline bool FutureRtnOrder::has_bsflag() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void FutureRtnOrder::set_has_bsflag() {
  _has_bits_[0] |= 0x00002000u;
}
inline void FutureRtnOrder::clear_has_bsflag() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void FutureRtnOrder::clear_bsflag() {
  bsflag_ = 0;
  clear_has_bsflag();
}
inline ::google::protobuf::int32 FutureRtnOrder::bsflag() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrder.bsflag)
  return bsflag_;
}
inline void FutureRtnOrder::set_bsflag(::google::protobuf::int32 value) {
  set_has_bsflag();
  bsflag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrder.bsflag)
}

// optional int32 hedge_flag = 16;
inline bool FutureRtnOrder::has_hedge_flag() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FutureRtnOrder::set_has_hedge_flag() {
  _has_bits_[0] |= 0x00004000u;
}
inline void FutureRtnOrder::clear_has_hedge_flag() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void FutureRtnOrder::clear_hedge_flag() {
  hedge_flag_ = 0;
  clear_has_hedge_flag();
}
inline ::google::protobuf::int32 FutureRtnOrder::hedge_flag() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrder.hedge_flag)
  return hedge_flag_;
}
inline void FutureRtnOrder::set_hedge_flag(::google::protobuf::int32 value) {
  set_has_hedge_flag();
  hedge_flag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrder.hedge_flag)
}

// optional int32 kpcbj = 17;
inline bool FutureRtnOrder::has_kpcbj() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void FutureRtnOrder::set_has_kpcbj() {
  _has_bits_[0] |= 0x00008000u;
}
inline void FutureRtnOrder::clear_has_kpcbj() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void FutureRtnOrder::clear_kpcbj() {
  kpcbj_ = 0;
  clear_has_kpcbj();
}
inline ::google::protobuf::int32 FutureRtnOrder::kpcbj() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrder.kpcbj)
  return kpcbj_;
}
inline void FutureRtnOrder::set_kpcbj(::google::protobuf::int32 value) {
  set_has_kpcbj();
  kpcbj_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrder.kpcbj)
}

// optional int32 insert_date = 18 [default = -1];
inline bool FutureRtnOrder::has_insert_date() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void FutureRtnOrder::set_has_insert_date() {
  _has_bits_[0] |= 0x00040000u;
}
inline void FutureRtnOrder::clear_has_insert_date() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void FutureRtnOrder::clear_insert_date() {
  insert_date_ = -1;
  clear_has_insert_date();
}
inline ::google::protobuf::int32 FutureRtnOrder::insert_date() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrder.insert_date)
  return insert_date_;
}
inline void FutureRtnOrder::set_insert_date(::google::protobuf::int32 value) {
  set_has_insert_date();
  insert_date_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrder.insert_date)
}

// optional int32 insert_time = 19 [default = -1];
inline bool FutureRtnOrder::has_insert_time() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void FutureRtnOrder::set_has_insert_time() {
  _has_bits_[0] |= 0x00080000u;
}
inline void FutureRtnOrder::clear_has_insert_time() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void FutureRtnOrder::clear_insert_time() {
  insert_time_ = -1;
  clear_has_insert_time();
}
inline ::google::protobuf::int32 FutureRtnOrder::insert_time() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrder.insert_time)
  return insert_time_;
}
inline void FutureRtnOrder::set_insert_time(::google::protobuf::int32 value) {
  set_has_insert_time();
  insert_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrder.insert_time)
}

// optional int32 active_time = 20 [default = -1];
inline bool FutureRtnOrder::has_active_time() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void FutureRtnOrder::set_has_active_time() {
  _has_bits_[0] |= 0x00100000u;
}
inline void FutureRtnOrder::clear_has_active_time() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void FutureRtnOrder::clear_active_time() {
  active_time_ = -1;
  clear_has_active_time();
}
inline ::google::protobuf::int32 FutureRtnOrder::active_time() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrder.active_time)
  return active_time_;
}
inline void FutureRtnOrder::set_active_time(::google::protobuf::int32 value) {
  set_has_active_time();
  active_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrder.active_time)
}

// optional int32 suspend_time = 21 [default = -1];
inline bool FutureRtnOrder::has_suspend_time() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void FutureRtnOrder::set_has_suspend_time() {
  _has_bits_[0] |= 0x00200000u;
}
inline void FutureRtnOrder::clear_has_suspend_time() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void FutureRtnOrder::clear_suspend_time() {
  suspend_time_ = -1;
  clear_has_suspend_time();
}
inline ::google::protobuf::int32 FutureRtnOrder::suspend_time() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrder.suspend_time)
  return suspend_time_;
}
inline void FutureRtnOrder::set_suspend_time(::google::protobuf::int32 value) {
  set_has_suspend_time();
  suspend_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrder.suspend_time)
}

// optional int32 update_time = 22 [default = -1];
inline bool FutureRtnOrder::has_update_time() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void FutureRtnOrder::set_has_update_time() {
  _has_bits_[0] |= 0x00400000u;
}
inline void FutureRtnOrder::clear_has_update_time() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void FutureRtnOrder::clear_update_time() {
  update_time_ = -1;
  clear_has_update_time();
}
inline ::google::protobuf::int32 FutureRtnOrder::update_time() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrder.update_time)
  return update_time_;
}
inline void FutureRtnOrder::set_update_time(::google::protobuf::int32 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrder.update_time)
}

// optional int32 cancel_time = 23 [default = -1];
inline bool FutureRtnOrder::has_cancel_time() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void FutureRtnOrder::set_has_cancel_time() {
  _has_bits_[0] |= 0x00010000u;
}
inline void FutureRtnOrder::clear_has_cancel_time() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void FutureRtnOrder::clear_cancel_time() {
  cancel_time_ = -1;
  clear_has_cancel_time();
}
inline ::google::protobuf::int32 FutureRtnOrder::cancel_time() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnOrder.cancel_time)
  return cancel_time_;
}
inline void FutureRtnOrder::set_cancel_time(::google::protobuf::int32 value) {
  set_has_cancel_time();
  cancel_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnOrder.cancel_time)
}

// -------------------------------------------------------------------

// FutureRtnTrade

// optional int32 funcid = 1 [default = 12003011];
inline bool FutureRtnTrade::has_funcid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void FutureRtnTrade::set_has_funcid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void FutureRtnTrade::clear_has_funcid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void FutureRtnTrade::clear_funcid() {
  funcid_ = 12003011;
  clear_has_funcid();
}
inline ::google::protobuf::int32 FutureRtnTrade::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnTrade.funcid)
  return funcid_;
}
inline void FutureRtnTrade::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnTrade.funcid)
}

// optional int32 front_id = 2;
inline bool FutureRtnTrade::has_front_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FutureRtnTrade::set_has_front_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FutureRtnTrade::clear_has_front_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FutureRtnTrade::clear_front_id() {
  front_id_ = 0;
  clear_has_front_id();
}
inline ::google::protobuf::int32 FutureRtnTrade::front_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnTrade.front_id)
  return front_id_;
}
inline void FutureRtnTrade::set_front_id(::google::protobuf::int32 value) {
  set_has_front_id();
  front_id_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnTrade.front_id)
}

// optional int32 session_id = 3;
inline bool FutureRtnTrade::has_session_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FutureRtnTrade::set_has_session_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FutureRtnTrade::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FutureRtnTrade::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
inline ::google::protobuf::int32 FutureRtnTrade::session_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnTrade.session_id)
  return session_id_;
}
inline void FutureRtnTrade::set_session_id(::google::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnTrade.session_id)
}

// optional string exchange_id = 4;
inline bool FutureRtnTrade::has_exchange_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FutureRtnTrade::set_has_exchange_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FutureRtnTrade::clear_has_exchange_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FutureRtnTrade::clear_exchange_id() {
  exchange_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exchange_id();
}
inline const ::std::string& FutureRtnTrade::exchange_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnTrade.exchange_id)
  return exchange_id_.GetNoArena();
}
inline void FutureRtnTrade::set_exchange_id(const ::std::string& value) {
  set_has_exchange_id();
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnTrade.exchange_id)
}
#if LANG_CXX11
inline void FutureRtnTrade::set_exchange_id(::std::string&& value) {
  set_has_exchange_id();
  exchange_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureRtnTrade.exchange_id)
}
#endif
inline void FutureRtnTrade::set_exchange_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_exchange_id();
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureRtnTrade.exchange_id)
}
inline void FutureRtnTrade::set_exchange_id(const char* value, size_t size) {
  set_has_exchange_id();
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureRtnTrade.exchange_id)
}
inline ::std::string* FutureRtnTrade::mutable_exchange_id() {
  set_has_exchange_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureRtnTrade.exchange_id)
  return exchange_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureRtnTrade::release_exchange_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureRtnTrade.exchange_id)
  if (!has_exchange_id()) {
    return NULL;
  }
  clear_has_exchange_id();
  return exchange_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureRtnTrade::set_allocated_exchange_id(::std::string* exchange_id) {
  if (exchange_id != NULL) {
    set_has_exchange_id();
  } else {
    clear_has_exchange_id();
  }
  exchange_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureRtnTrade.exchange_id)
}

// optional string account_name = 5;
inline bool FutureRtnTrade::has_account_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FutureRtnTrade::set_has_account_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FutureRtnTrade::clear_has_account_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FutureRtnTrade::clear_account_name() {
  account_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account_name();
}
inline const ::std::string& FutureRtnTrade::account_name() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnTrade.account_name)
  return account_name_.GetNoArena();
}
inline void FutureRtnTrade::set_account_name(const ::std::string& value) {
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnTrade.account_name)
}
#if LANG_CXX11
inline void FutureRtnTrade::set_account_name(::std::string&& value) {
  set_has_account_name();
  account_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureRtnTrade.account_name)
}
#endif
inline void FutureRtnTrade::set_account_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureRtnTrade.account_name)
}
inline void FutureRtnTrade::set_account_name(const char* value, size_t size) {
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureRtnTrade.account_name)
}
inline ::std::string* FutureRtnTrade::mutable_account_name() {
  set_has_account_name();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureRtnTrade.account_name)
  return account_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureRtnTrade::release_account_name() {
  // @@protoc_insertion_point(field_release:autotrade.FutureRtnTrade.account_name)
  if (!has_account_name()) {
    return NULL;
  }
  clear_has_account_name();
  return account_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureRtnTrade::set_allocated_account_name(::std::string* account_name) {
  if (account_name != NULL) {
    set_has_account_name();
  } else {
    clear_has_account_name();
  }
  account_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_name);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureRtnTrade.account_name)
}

// optional string order_group = 6;
inline bool FutureRtnTrade::has_order_group() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FutureRtnTrade::set_has_order_group() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FutureRtnTrade::clear_has_order_group() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FutureRtnTrade::clear_order_group() {
  order_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_group();
}
inline const ::std::string& FutureRtnTrade::order_group() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnTrade.order_group)
  return order_group_.GetNoArena();
}
inline void FutureRtnTrade::set_order_group(const ::std::string& value) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnTrade.order_group)
}
#if LANG_CXX11
inline void FutureRtnTrade::set_order_group(::std::string&& value) {
  set_has_order_group();
  order_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureRtnTrade.order_group)
}
#endif
inline void FutureRtnTrade::set_order_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureRtnTrade.order_group)
}
inline void FutureRtnTrade::set_order_group(const char* value, size_t size) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureRtnTrade.order_group)
}
inline ::std::string* FutureRtnTrade::mutable_order_group() {
  set_has_order_group();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureRtnTrade.order_group)
  return order_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureRtnTrade::release_order_group() {
  // @@protoc_insertion_point(field_release:autotrade.FutureRtnTrade.order_group)
  if (!has_order_group()) {
    return NULL;
  }
  clear_has_order_group();
  return order_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureRtnTrade::set_allocated_order_group(::std::string* order_group) {
  if (order_group != NULL) {
    set_has_order_group();
  } else {
    clear_has_order_group();
  }
  order_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_group);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureRtnTrade.order_group)
}

// optional string code = 7;
inline bool FutureRtnTrade::has_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FutureRtnTrade::set_has_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FutureRtnTrade::clear_has_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FutureRtnTrade::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& FutureRtnTrade::code() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnTrade.code)
  return code_.GetNoArena();
}
inline void FutureRtnTrade::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnTrade.code)
}
#if LANG_CXX11
inline void FutureRtnTrade::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureRtnTrade.code)
}
#endif
inline void FutureRtnTrade::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureRtnTrade.code)
}
inline void FutureRtnTrade::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureRtnTrade.code)
}
inline ::std::string* FutureRtnTrade::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureRtnTrade.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureRtnTrade::release_code() {
  // @@protoc_insertion_point(field_release:autotrade.FutureRtnTrade.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureRtnTrade::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureRtnTrade.code)
}

// optional string match_id = 8;
inline bool FutureRtnTrade::has_match_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FutureRtnTrade::set_has_match_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FutureRtnTrade::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FutureRtnTrade::clear_match_id() {
  match_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_match_id();
}
inline const ::std::string& FutureRtnTrade::match_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnTrade.match_id)
  return match_id_.GetNoArena();
}
inline void FutureRtnTrade::set_match_id(const ::std::string& value) {
  set_has_match_id();
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnTrade.match_id)
}
#if LANG_CXX11
inline void FutureRtnTrade::set_match_id(::std::string&& value) {
  set_has_match_id();
  match_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureRtnTrade.match_id)
}
#endif
inline void FutureRtnTrade::set_match_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_match_id();
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureRtnTrade.match_id)
}
inline void FutureRtnTrade::set_match_id(const char* value, size_t size) {
  set_has_match_id();
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureRtnTrade.match_id)
}
inline ::std::string* FutureRtnTrade::mutable_match_id() {
  set_has_match_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureRtnTrade.match_id)
  return match_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureRtnTrade::release_match_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureRtnTrade.match_id)
  if (!has_match_id()) {
    return NULL;
  }
  clear_has_match_id();
  return match_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureRtnTrade::set_allocated_match_id(::std::string* match_id) {
  if (match_id != NULL) {
    set_has_match_id();
  } else {
    clear_has_match_id();
  }
  match_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), match_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureRtnTrade.match_id)
}

// optional int64 match_qty = 9;
inline bool FutureRtnTrade::has_match_qty() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FutureRtnTrade::set_has_match_qty() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FutureRtnTrade::clear_has_match_qty() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FutureRtnTrade::clear_match_qty() {
  match_qty_ = GOOGLE_LONGLONG(0);
  clear_has_match_qty();
}
inline ::google::protobuf::int64 FutureRtnTrade::match_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnTrade.match_qty)
  return match_qty_;
}
inline void FutureRtnTrade::set_match_qty(::google::protobuf::int64 value) {
  set_has_match_qty();
  match_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnTrade.match_qty)
}

// optional double match_amt = 10;
inline bool FutureRtnTrade::has_match_amt() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FutureRtnTrade::set_has_match_amt() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FutureRtnTrade::clear_has_match_amt() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FutureRtnTrade::clear_match_amt() {
  match_amt_ = 0;
  clear_has_match_amt();
}
inline double FutureRtnTrade::match_amt() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnTrade.match_amt)
  return match_amt_;
}
inline void FutureRtnTrade::set_match_amt(double value) {
  set_has_match_amt();
  match_amt_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnTrade.match_amt)
}

// optional int32 bsflag = 11;
inline bool FutureRtnTrade::has_bsflag() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FutureRtnTrade::set_has_bsflag() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FutureRtnTrade::clear_has_bsflag() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FutureRtnTrade::clear_bsflag() {
  bsflag_ = 0;
  clear_has_bsflag();
}
inline ::google::protobuf::int32 FutureRtnTrade::bsflag() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnTrade.bsflag)
  return bsflag_;
}
inline void FutureRtnTrade::set_bsflag(::google::protobuf::int32 value) {
  set_has_bsflag();
  bsflag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnTrade.bsflag)
}

// optional int32 kpcbj = 12;
inline bool FutureRtnTrade::has_kpcbj() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FutureRtnTrade::set_has_kpcbj() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FutureRtnTrade::clear_has_kpcbj() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FutureRtnTrade::clear_kpcbj() {
  kpcbj_ = 0;
  clear_has_kpcbj();
}
inline ::google::protobuf::int32 FutureRtnTrade::kpcbj() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnTrade.kpcbj)
  return kpcbj_;
}
inline void FutureRtnTrade::set_kpcbj(::google::protobuf::int32 value) {
  set_has_kpcbj();
  kpcbj_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnTrade.kpcbj)
}

// optional int32 hedge_flag = 13;
inline bool FutureRtnTrade::has_hedge_flag() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FutureRtnTrade::set_has_hedge_flag() {
  _has_bits_[0] |= 0x00004000u;
}
inline void FutureRtnTrade::clear_has_hedge_flag() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void FutureRtnTrade::clear_hedge_flag() {
  hedge_flag_ = 0;
  clear_has_hedge_flag();
}
inline ::google::protobuf::int32 FutureRtnTrade::hedge_flag() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnTrade.hedge_flag)
  return hedge_flag_;
}
inline void FutureRtnTrade::set_hedge_flag(::google::protobuf::int32 value) {
  set_has_hedge_flag();
  hedge_flag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnTrade.hedge_flag)
}

// optional int64 stamp = 14;
inline bool FutureRtnTrade::has_stamp() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FutureRtnTrade::set_has_stamp() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FutureRtnTrade::clear_has_stamp() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FutureRtnTrade::clear_stamp() {
  stamp_ = GOOGLE_LONGLONG(0);
  clear_has_stamp();
}
inline ::google::protobuf::int64 FutureRtnTrade::stamp() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnTrade.stamp)
  return stamp_;
}
inline void FutureRtnTrade::set_stamp(::google::protobuf::int64 value) {
  set_has_stamp();
  stamp_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnTrade.stamp)
}

// optional int64 match_price = 15;
inline bool FutureRtnTrade::has_match_price() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void FutureRtnTrade::set_has_match_price() {
  _has_bits_[0] |= 0x00002000u;
}
inline void FutureRtnTrade::clear_has_match_price() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void FutureRtnTrade::clear_match_price() {
  match_price_ = GOOGLE_LONGLONG(0);
  clear_has_match_price();
}
inline ::google::protobuf::int64 FutureRtnTrade::match_price() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnTrade.match_price)
  return match_price_;
}
inline void FutureRtnTrade::set_match_price(::google::protobuf::int64 value) {
  set_has_match_price();
  match_price_ = value;
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnTrade.match_price)
}

// optional string order_sys_id = 16;
inline bool FutureRtnTrade::has_order_sys_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FutureRtnTrade::set_has_order_sys_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FutureRtnTrade::clear_has_order_sys_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FutureRtnTrade::clear_order_sys_id() {
  order_sys_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_sys_id();
}
inline const ::std::string& FutureRtnTrade::order_sys_id() const {
  // @@protoc_insertion_point(field_get:autotrade.FutureRtnTrade.order_sys_id)
  return order_sys_id_.GetNoArena();
}
inline void FutureRtnTrade::set_order_sys_id(const ::std::string& value) {
  set_has_order_sys_id();
  order_sys_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.FutureRtnTrade.order_sys_id)
}
#if LANG_CXX11
inline void FutureRtnTrade::set_order_sys_id(::std::string&& value) {
  set_has_order_sys_id();
  order_sys_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.FutureRtnTrade.order_sys_id)
}
#endif
inline void FutureRtnTrade::set_order_sys_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_sys_id();
  order_sys_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.FutureRtnTrade.order_sys_id)
}
inline void FutureRtnTrade::set_order_sys_id(const char* value, size_t size) {
  set_has_order_sys_id();
  order_sys_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.FutureRtnTrade.order_sys_id)
}
inline ::std::string* FutureRtnTrade::mutable_order_sys_id() {
  set_has_order_sys_id();
  // @@protoc_insertion_point(field_mutable:autotrade.FutureRtnTrade.order_sys_id)
  return order_sys_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FutureRtnTrade::release_order_sys_id() {
  // @@protoc_insertion_point(field_release:autotrade.FutureRtnTrade.order_sys_id)
  if (!has_order_sys_id()) {
    return NULL;
  }
  clear_has_order_sys_id();
  return order_sys_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FutureRtnTrade::set_allocated_order_sys_id(::std::string* order_sys_id) {
  if (order_sys_id != NULL) {
    set_has_order_sys_id();
  } else {
    clear_has_order_sys_id();
  }
  order_sys_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_sys_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.FutureRtnTrade.order_sys_id)
}

// -------------------------------------------------------------------

// InnerQueryOrderReqt

// optional int32 funcid = 1 [default = 12003012];
inline bool InnerQueryOrderReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void InnerQueryOrderReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void InnerQueryOrderReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void InnerQueryOrderReqt::clear_funcid() {
  funcid_ = 12003012;
  clear_has_funcid();
}
inline ::google::protobuf::int32 InnerQueryOrderReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerQueryOrderReqt.funcid)
  return funcid_;
}
inline void InnerQueryOrderReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.InnerQueryOrderReqt.funcid)
}

// optional string broker_id = 2;
inline bool InnerQueryOrderReqt::has_broker_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InnerQueryOrderReqt::set_has_broker_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InnerQueryOrderReqt::clear_has_broker_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InnerQueryOrderReqt::clear_broker_id() {
  broker_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_broker_id();
}
inline const ::std::string& InnerQueryOrderReqt::broker_id() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerQueryOrderReqt.broker_id)
  return broker_id_.GetNoArena();
}
inline void InnerQueryOrderReqt::set_broker_id(const ::std::string& value) {
  set_has_broker_id();
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerQueryOrderReqt.broker_id)
}
#if LANG_CXX11
inline void InnerQueryOrderReqt::set_broker_id(::std::string&& value) {
  set_has_broker_id();
  broker_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerQueryOrderReqt.broker_id)
}
#endif
inline void InnerQueryOrderReqt::set_broker_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_broker_id();
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerQueryOrderReqt.broker_id)
}
inline void InnerQueryOrderReqt::set_broker_id(const char* value, size_t size) {
  set_has_broker_id();
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerQueryOrderReqt.broker_id)
}
inline ::std::string* InnerQueryOrderReqt::mutable_broker_id() {
  set_has_broker_id();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerQueryOrderReqt.broker_id)
  return broker_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerQueryOrderReqt::release_broker_id() {
  // @@protoc_insertion_point(field_release:autotrade.InnerQueryOrderReqt.broker_id)
  if (!has_broker_id()) {
    return NULL;
  }
  clear_has_broker_id();
  return broker_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerQueryOrderReqt::set_allocated_broker_id(::std::string* broker_id) {
  if (broker_id != NULL) {
    set_has_broker_id();
  } else {
    clear_has_broker_id();
  }
  broker_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), broker_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerQueryOrderReqt.broker_id)
}

// optional string future_account = 3;
inline bool InnerQueryOrderReqt::has_future_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InnerQueryOrderReqt::set_has_future_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InnerQueryOrderReqt::clear_has_future_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InnerQueryOrderReqt::clear_future_account() {
  future_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_future_account();
}
inline const ::std::string& InnerQueryOrderReqt::future_account() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerQueryOrderReqt.future_account)
  return future_account_.GetNoArena();
}
inline void InnerQueryOrderReqt::set_future_account(const ::std::string& value) {
  set_has_future_account();
  future_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerQueryOrderReqt.future_account)
}
#if LANG_CXX11
inline void InnerQueryOrderReqt::set_future_account(::std::string&& value) {
  set_has_future_account();
  future_account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerQueryOrderReqt.future_account)
}
#endif
inline void InnerQueryOrderReqt::set_future_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_future_account();
  future_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerQueryOrderReqt.future_account)
}
inline void InnerQueryOrderReqt::set_future_account(const char* value, size_t size) {
  set_has_future_account();
  future_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerQueryOrderReqt.future_account)
}
inline ::std::string* InnerQueryOrderReqt::mutable_future_account() {
  set_has_future_account();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerQueryOrderReqt.future_account)
  return future_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerQueryOrderReqt::release_future_account() {
  // @@protoc_insertion_point(field_release:autotrade.InnerQueryOrderReqt.future_account)
  if (!has_future_account()) {
    return NULL;
  }
  clear_has_future_account();
  return future_account_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerQueryOrderReqt::set_allocated_future_account(::std::string* future_account) {
  if (future_account != NULL) {
    set_has_future_account();
  } else {
    clear_has_future_account();
  }
  future_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), future_account);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerQueryOrderReqt.future_account)
}

// optional string exchange_id = 4;
inline bool InnerQueryOrderReqt::has_exchange_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InnerQueryOrderReqt::set_has_exchange_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InnerQueryOrderReqt::clear_has_exchange_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InnerQueryOrderReqt::clear_exchange_id() {
  exchange_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exchange_id();
}
inline const ::std::string& InnerQueryOrderReqt::exchange_id() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerQueryOrderReqt.exchange_id)
  return exchange_id_.GetNoArena();
}
inline void InnerQueryOrderReqt::set_exchange_id(const ::std::string& value) {
  set_has_exchange_id();
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerQueryOrderReqt.exchange_id)
}
#if LANG_CXX11
inline void InnerQueryOrderReqt::set_exchange_id(::std::string&& value) {
  set_has_exchange_id();
  exchange_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerQueryOrderReqt.exchange_id)
}
#endif
inline void InnerQueryOrderReqt::set_exchange_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_exchange_id();
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerQueryOrderReqt.exchange_id)
}
inline void InnerQueryOrderReqt::set_exchange_id(const char* value, size_t size) {
  set_has_exchange_id();
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerQueryOrderReqt.exchange_id)
}
inline ::std::string* InnerQueryOrderReqt::mutable_exchange_id() {
  set_has_exchange_id();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerQueryOrderReqt.exchange_id)
  return exchange_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerQueryOrderReqt::release_exchange_id() {
  // @@protoc_insertion_point(field_release:autotrade.InnerQueryOrderReqt.exchange_id)
  if (!has_exchange_id()) {
    return NULL;
  }
  clear_has_exchange_id();
  return exchange_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerQueryOrderReqt::set_allocated_exchange_id(::std::string* exchange_id) {
  if (exchange_id != NULL) {
    set_has_exchange_id();
  } else {
    clear_has_exchange_id();
  }
  exchange_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerQueryOrderReqt.exchange_id)
}

// optional string order_sys_id = 5;
inline bool InnerQueryOrderReqt::has_order_sys_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InnerQueryOrderReqt::set_has_order_sys_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InnerQueryOrderReqt::clear_has_order_sys_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InnerQueryOrderReqt::clear_order_sys_id() {
  order_sys_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_sys_id();
}
inline const ::std::string& InnerQueryOrderReqt::order_sys_id() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerQueryOrderReqt.order_sys_id)
  return order_sys_id_.GetNoArena();
}
inline void InnerQueryOrderReqt::set_order_sys_id(const ::std::string& value) {
  set_has_order_sys_id();
  order_sys_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerQueryOrderReqt.order_sys_id)
}
#if LANG_CXX11
inline void InnerQueryOrderReqt::set_order_sys_id(::std::string&& value) {
  set_has_order_sys_id();
  order_sys_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerQueryOrderReqt.order_sys_id)
}
#endif
inline void InnerQueryOrderReqt::set_order_sys_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_sys_id();
  order_sys_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerQueryOrderReqt.order_sys_id)
}
inline void InnerQueryOrderReqt::set_order_sys_id(const char* value, size_t size) {
  set_has_order_sys_id();
  order_sys_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerQueryOrderReqt.order_sys_id)
}
inline ::std::string* InnerQueryOrderReqt::mutable_order_sys_id() {
  set_has_order_sys_id();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerQueryOrderReqt.order_sys_id)
  return order_sys_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerQueryOrderReqt::release_order_sys_id() {
  // @@protoc_insertion_point(field_release:autotrade.InnerQueryOrderReqt.order_sys_id)
  if (!has_order_sys_id()) {
    return NULL;
  }
  clear_has_order_sys_id();
  return order_sys_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerQueryOrderReqt::set_allocated_order_sys_id(::std::string* order_sys_id) {
  if (order_sys_id != NULL) {
    set_has_order_sys_id();
  } else {
    clear_has_order_sys_id();
  }
  order_sys_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_sys_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerQueryOrderReqt.order_sys_id)
}

// optional string insert_time_start = 6;
inline bool InnerQueryOrderReqt::has_insert_time_start() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InnerQueryOrderReqt::set_has_insert_time_start() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InnerQueryOrderReqt::clear_has_insert_time_start() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InnerQueryOrderReqt::clear_insert_time_start() {
  insert_time_start_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_insert_time_start();
}
inline const ::std::string& InnerQueryOrderReqt::insert_time_start() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerQueryOrderReqt.insert_time_start)
  return insert_time_start_.GetNoArena();
}
inline void InnerQueryOrderReqt::set_insert_time_start(const ::std::string& value) {
  set_has_insert_time_start();
  insert_time_start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerQueryOrderReqt.insert_time_start)
}
#if LANG_CXX11
inline void InnerQueryOrderReqt::set_insert_time_start(::std::string&& value) {
  set_has_insert_time_start();
  insert_time_start_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerQueryOrderReqt.insert_time_start)
}
#endif
inline void InnerQueryOrderReqt::set_insert_time_start(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_insert_time_start();
  insert_time_start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerQueryOrderReqt.insert_time_start)
}
inline void InnerQueryOrderReqt::set_insert_time_start(const char* value, size_t size) {
  set_has_insert_time_start();
  insert_time_start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerQueryOrderReqt.insert_time_start)
}
inline ::std::string* InnerQueryOrderReqt::mutable_insert_time_start() {
  set_has_insert_time_start();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerQueryOrderReqt.insert_time_start)
  return insert_time_start_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerQueryOrderReqt::release_insert_time_start() {
  // @@protoc_insertion_point(field_release:autotrade.InnerQueryOrderReqt.insert_time_start)
  if (!has_insert_time_start()) {
    return NULL;
  }
  clear_has_insert_time_start();
  return insert_time_start_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerQueryOrderReqt::set_allocated_insert_time_start(::std::string* insert_time_start) {
  if (insert_time_start != NULL) {
    set_has_insert_time_start();
  } else {
    clear_has_insert_time_start();
  }
  insert_time_start_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), insert_time_start);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerQueryOrderReqt.insert_time_start)
}

// optional string insert_time_end = 7;
inline bool InnerQueryOrderReqt::has_insert_time_end() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InnerQueryOrderReqt::set_has_insert_time_end() {
  _has_bits_[0] |= 0x00000020u;
}
inline void InnerQueryOrderReqt::clear_has_insert_time_end() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void InnerQueryOrderReqt::clear_insert_time_end() {
  insert_time_end_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_insert_time_end();
}
inline const ::std::string& InnerQueryOrderReqt::insert_time_end() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerQueryOrderReqt.insert_time_end)
  return insert_time_end_.GetNoArena();
}
inline void InnerQueryOrderReqt::set_insert_time_end(const ::std::string& value) {
  set_has_insert_time_end();
  insert_time_end_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerQueryOrderReqt.insert_time_end)
}
#if LANG_CXX11
inline void InnerQueryOrderReqt::set_insert_time_end(::std::string&& value) {
  set_has_insert_time_end();
  insert_time_end_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerQueryOrderReqt.insert_time_end)
}
#endif
inline void InnerQueryOrderReqt::set_insert_time_end(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_insert_time_end();
  insert_time_end_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerQueryOrderReqt.insert_time_end)
}
inline void InnerQueryOrderReqt::set_insert_time_end(const char* value, size_t size) {
  set_has_insert_time_end();
  insert_time_end_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerQueryOrderReqt.insert_time_end)
}
inline ::std::string* InnerQueryOrderReqt::mutable_insert_time_end() {
  set_has_insert_time_end();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerQueryOrderReqt.insert_time_end)
  return insert_time_end_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerQueryOrderReqt::release_insert_time_end() {
  // @@protoc_insertion_point(field_release:autotrade.InnerQueryOrderReqt.insert_time_end)
  if (!has_insert_time_end()) {
    return NULL;
  }
  clear_has_insert_time_end();
  return insert_time_end_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerQueryOrderReqt::set_allocated_insert_time_end(::std::string* insert_time_end) {
  if (insert_time_end != NULL) {
    set_has_insert_time_end();
  } else {
    clear_has_insert_time_end();
  }
  insert_time_end_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), insert_time_end);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerQueryOrderReqt.insert_time_end)
}

// -------------------------------------------------------------------

// InnerFutureQueryOrderResp

// optional int32 funcid = 1 [default = 12103012];
inline bool InnerFutureQueryOrderResp::has_funcid() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_funcid() {
  _has_bits_[1] |= 0x00000040u;
}
inline void InnerFutureQueryOrderResp::clear_has_funcid() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void InnerFutureQueryOrderResp::clear_funcid() {
  funcid_ = 12103012;
  clear_has_funcid();
}
inline ::google::protobuf::int32 InnerFutureQueryOrderResp::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.funcid)
  return funcid_;
}
inline void InnerFutureQueryOrderResp::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.funcid)
}

// optional string broker_id = 2;
inline bool InnerFutureQueryOrderResp::has_broker_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_broker_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InnerFutureQueryOrderResp::clear_has_broker_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InnerFutureQueryOrderResp::clear_broker_id() {
  broker_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_broker_id();
}
inline const ::std::string& InnerFutureQueryOrderResp::broker_id() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.broker_id)
  return broker_id_.GetNoArena();
}
inline void InnerFutureQueryOrderResp::set_broker_id(const ::std::string& value) {
  set_has_broker_id();
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.broker_id)
}
#if LANG_CXX11
inline void InnerFutureQueryOrderResp::set_broker_id(::std::string&& value) {
  set_has_broker_id();
  broker_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerFutureQueryOrderResp.broker_id)
}
#endif
inline void InnerFutureQueryOrderResp::set_broker_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_broker_id();
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerFutureQueryOrderResp.broker_id)
}
inline void InnerFutureQueryOrderResp::set_broker_id(const char* value, size_t size) {
  set_has_broker_id();
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerFutureQueryOrderResp.broker_id)
}
inline ::std::string* InnerFutureQueryOrderResp::mutable_broker_id() {
  set_has_broker_id();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerFutureQueryOrderResp.broker_id)
  return broker_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerFutureQueryOrderResp::release_broker_id() {
  // @@protoc_insertion_point(field_release:autotrade.InnerFutureQueryOrderResp.broker_id)
  if (!has_broker_id()) {
    return NULL;
  }
  clear_has_broker_id();
  return broker_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerFutureQueryOrderResp::set_allocated_broker_id(::std::string* broker_id) {
  if (broker_id != NULL) {
    set_has_broker_id();
  } else {
    clear_has_broker_id();
  }
  broker_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), broker_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerFutureQueryOrderResp.broker_id)
}

// optional string future_account = 3;
inline bool InnerFutureQueryOrderResp::has_future_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_future_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InnerFutureQueryOrderResp::clear_has_future_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InnerFutureQueryOrderResp::clear_future_account() {
  future_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_future_account();
}
inline const ::std::string& InnerFutureQueryOrderResp::future_account() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.future_account)
  return future_account_.GetNoArena();
}
inline void InnerFutureQueryOrderResp::set_future_account(const ::std::string& value) {
  set_has_future_account();
  future_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.future_account)
}
#if LANG_CXX11
inline void InnerFutureQueryOrderResp::set_future_account(::std::string&& value) {
  set_has_future_account();
  future_account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerFutureQueryOrderResp.future_account)
}
#endif
inline void InnerFutureQueryOrderResp::set_future_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_future_account();
  future_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerFutureQueryOrderResp.future_account)
}
inline void InnerFutureQueryOrderResp::set_future_account(const char* value, size_t size) {
  set_has_future_account();
  future_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerFutureQueryOrderResp.future_account)
}
inline ::std::string* InnerFutureQueryOrderResp::mutable_future_account() {
  set_has_future_account();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerFutureQueryOrderResp.future_account)
  return future_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerFutureQueryOrderResp::release_future_account() {
  // @@protoc_insertion_point(field_release:autotrade.InnerFutureQueryOrderResp.future_account)
  if (!has_future_account()) {
    return NULL;
  }
  clear_has_future_account();
  return future_account_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerFutureQueryOrderResp::set_allocated_future_account(::std::string* future_account) {
  if (future_account != NULL) {
    set_has_future_account();
  } else {
    clear_has_future_account();
  }
  future_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), future_account);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerFutureQueryOrderResp.future_account)
}

// optional string request_id = 4;
inline bool InnerFutureQueryOrderResp::has_request_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_request_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InnerFutureQueryOrderResp::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InnerFutureQueryOrderResp::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& InnerFutureQueryOrderResp::request_id() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.request_id)
  return request_id_.GetNoArena();
}
inline void InnerFutureQueryOrderResp::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.request_id)
}
#if LANG_CXX11
inline void InnerFutureQueryOrderResp::set_request_id(::std::string&& value) {
  set_has_request_id();
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerFutureQueryOrderResp.request_id)
}
#endif
inline void InnerFutureQueryOrderResp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerFutureQueryOrderResp.request_id)
}
inline void InnerFutureQueryOrderResp::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerFutureQueryOrderResp.request_id)
}
inline ::std::string* InnerFutureQueryOrderResp::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerFutureQueryOrderResp.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerFutureQueryOrderResp::release_request_id() {
  // @@protoc_insertion_point(field_release:autotrade.InnerFutureQueryOrderResp.request_id)
  if (!has_request_id()) {
    return NULL;
  }
  clear_has_request_id();
  return request_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerFutureQueryOrderResp::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerFutureQueryOrderResp.request_id)
}

// optional int32 front_id = 5;
inline bool InnerFutureQueryOrderResp::has_front_id() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_front_id() {
  _has_bits_[0] |= 0x00040000u;
}
inline void InnerFutureQueryOrderResp::clear_has_front_id() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void InnerFutureQueryOrderResp::clear_front_id() {
  front_id_ = 0;
  clear_has_front_id();
}
inline ::google::protobuf::int32 InnerFutureQueryOrderResp::front_id() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.front_id)
  return front_id_;
}
inline void InnerFutureQueryOrderResp::set_front_id(::google::protobuf::int32 value) {
  set_has_front_id();
  front_id_ = value;
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.front_id)
}

// optional int32 session_id = 6;
inline bool InnerFutureQueryOrderResp::has_session_id() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_session_id() {
  _has_bits_[0] |= 0x00080000u;
}
inline void InnerFutureQueryOrderResp::clear_has_session_id() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void InnerFutureQueryOrderResp::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
inline ::google::protobuf::int32 InnerFutureQueryOrderResp::session_id() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.session_id)
  return session_id_;
}
inline void InnerFutureQueryOrderResp::set_session_id(::google::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.session_id)
}

// optional int32 ret_code = 7 [default = 0];
inline bool InnerFutureQueryOrderResp::has_ret_code() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_ret_code() {
  _has_bits_[0] |= 0x00100000u;
}
inline void InnerFutureQueryOrderResp::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void InnerFutureQueryOrderResp::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 InnerFutureQueryOrderResp::ret_code() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.ret_code)
  return ret_code_;
}
inline void InnerFutureQueryOrderResp::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.ret_code)
}

// optional string ret_message = 8;
inline bool InnerFutureQueryOrderResp::has_ret_message() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_ret_message() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InnerFutureQueryOrderResp::clear_has_ret_message() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InnerFutureQueryOrderResp::clear_ret_message() {
  ret_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ret_message();
}
inline const ::std::string& InnerFutureQueryOrderResp::ret_message() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.ret_message)
  return ret_message_.GetNoArena();
}
inline void InnerFutureQueryOrderResp::set_ret_message(const ::std::string& value) {
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.ret_message)
}
#if LANG_CXX11
inline void InnerFutureQueryOrderResp::set_ret_message(::std::string&& value) {
  set_has_ret_message();
  ret_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerFutureQueryOrderResp.ret_message)
}
#endif
inline void InnerFutureQueryOrderResp::set_ret_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerFutureQueryOrderResp.ret_message)
}
inline void InnerFutureQueryOrderResp::set_ret_message(const char* value, size_t size) {
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerFutureQueryOrderResp.ret_message)
}
inline ::std::string* InnerFutureQueryOrderResp::mutable_ret_message() {
  set_has_ret_message();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerFutureQueryOrderResp.ret_message)
  return ret_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerFutureQueryOrderResp::release_ret_message() {
  // @@protoc_insertion_point(field_release:autotrade.InnerFutureQueryOrderResp.ret_message)
  if (!has_ret_message()) {
    return NULL;
  }
  clear_has_ret_message();
  return ret_message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerFutureQueryOrderResp::set_allocated_ret_message(::std::string* ret_message) {
  if (ret_message != NULL) {
    set_has_ret_message();
  } else {
    clear_has_ret_message();
  }
  ret_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ret_message);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerFutureQueryOrderResp.ret_message)
}

// optional bool islast = 9 [default = false];
inline bool InnerFutureQueryOrderResp::has_islast() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_islast() {
  _has_bits_[0] |= 0x00200000u;
}
inline void InnerFutureQueryOrderResp::clear_has_islast() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void InnerFutureQueryOrderResp::clear_islast() {
  islast_ = false;
  clear_has_islast();
}
inline bool InnerFutureQueryOrderResp::islast() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.islast)
  return islast_;
}
inline void InnerFutureQueryOrderResp::set_islast(bool value) {
  set_has_islast();
  islast_ = value;
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.islast)
}

// optional string order_group = 10;
inline bool InnerFutureQueryOrderResp::has_order_group() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_order_group() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InnerFutureQueryOrderResp::clear_has_order_group() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InnerFutureQueryOrderResp::clear_order_group() {
  order_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_group();
}
inline const ::std::string& InnerFutureQueryOrderResp::order_group() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.order_group)
  return order_group_.GetNoArena();
}
inline void InnerFutureQueryOrderResp::set_order_group(const ::std::string& value) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.order_group)
}
#if LANG_CXX11
inline void InnerFutureQueryOrderResp::set_order_group(::std::string&& value) {
  set_has_order_group();
  order_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerFutureQueryOrderResp.order_group)
}
#endif
inline void InnerFutureQueryOrderResp::set_order_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerFutureQueryOrderResp.order_group)
}
inline void InnerFutureQueryOrderResp::set_order_group(const char* value, size_t size) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerFutureQueryOrderResp.order_group)
}
inline ::std::string* InnerFutureQueryOrderResp::mutable_order_group() {
  set_has_order_group();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerFutureQueryOrderResp.order_group)
  return order_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerFutureQueryOrderResp::release_order_group() {
  // @@protoc_insertion_point(field_release:autotrade.InnerFutureQueryOrderResp.order_group)
  if (!has_order_group()) {
    return NULL;
  }
  clear_has_order_group();
  return order_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerFutureQueryOrderResp::set_allocated_order_group(::std::string* order_group) {
  if (order_group != NULL) {
    set_has_order_group();
  } else {
    clear_has_order_group();
  }
  order_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_group);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerFutureQueryOrderResp.order_group)
}

// optional string user_id = 11;
inline bool InnerFutureQueryOrderResp::has_user_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_user_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void InnerFutureQueryOrderResp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void InnerFutureQueryOrderResp::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
inline const ::std::string& InnerFutureQueryOrderResp::user_id() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.user_id)
  return user_id_.GetNoArena();
}
inline void InnerFutureQueryOrderResp::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.user_id)
}
#if LANG_CXX11
inline void InnerFutureQueryOrderResp::set_user_id(::std::string&& value) {
  set_has_user_id();
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerFutureQueryOrderResp.user_id)
}
#endif
inline void InnerFutureQueryOrderResp::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerFutureQueryOrderResp.user_id)
}
inline void InnerFutureQueryOrderResp::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerFutureQueryOrderResp.user_id)
}
inline ::std::string* InnerFutureQueryOrderResp::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerFutureQueryOrderResp.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerFutureQueryOrderResp::release_user_id() {
  // @@protoc_insertion_point(field_release:autotrade.InnerFutureQueryOrderResp.user_id)
  if (!has_user_id()) {
    return NULL;
  }
  clear_has_user_id();
  return user_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerFutureQueryOrderResp::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerFutureQueryOrderResp.user_id)
}

// optional int32 order_price_type = 12;
inline bool InnerFutureQueryOrderResp::has_order_price_type() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_order_price_type() {
  _has_bits_[0] |= 0x00400000u;
}
inline void InnerFutureQueryOrderResp::clear_has_order_price_type() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void InnerFutureQueryOrderResp::clear_order_price_type() {
  order_price_type_ = 0;
  clear_has_order_price_type();
}
inline ::google::protobuf::int32 InnerFutureQueryOrderResp::order_price_type() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.order_price_type)
  return order_price_type_;
}
inline void InnerFutureQueryOrderResp::set_order_price_type(::google::protobuf::int32 value) {
  set_has_order_price_type();
  order_price_type_ = value;
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.order_price_type)
}

// optional int32 bsflag = 13;
inline bool InnerFutureQueryOrderResp::has_bsflag() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_bsflag() {
  _has_bits_[0] |= 0x00800000u;
}
inline void InnerFutureQueryOrderResp::clear_has_bsflag() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void InnerFutureQueryOrderResp::clear_bsflag() {
  bsflag_ = 0;
  clear_has_bsflag();
}
inline ::google::protobuf::int32 InnerFutureQueryOrderResp::bsflag() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.bsflag)
  return bsflag_;
}
inline void InnerFutureQueryOrderResp::set_bsflag(::google::protobuf::int32 value) {
  set_has_bsflag();
  bsflag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.bsflag)
}

// optional int32 kpcbj = 14;
inline bool InnerFutureQueryOrderResp::has_kpcbj() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_kpcbj() {
  _has_bits_[0] |= 0x01000000u;
}
inline void InnerFutureQueryOrderResp::clear_has_kpcbj() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void InnerFutureQueryOrderResp::clear_kpcbj() {
  kpcbj_ = 0;
  clear_has_kpcbj();
}
inline ::google::protobuf::int32 InnerFutureQueryOrderResp::kpcbj() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.kpcbj)
  return kpcbj_;
}
inline void InnerFutureQueryOrderResp::set_kpcbj(::google::protobuf::int32 value) {
  set_has_kpcbj();
  kpcbj_ = value;
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.kpcbj)
}

// optional int32 hedge_flag = 15;
inline bool InnerFutureQueryOrderResp::has_hedge_flag() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_hedge_flag() {
  _has_bits_[0] |= 0x02000000u;
}
inline void InnerFutureQueryOrderResp::clear_has_hedge_flag() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void InnerFutureQueryOrderResp::clear_hedge_flag() {
  hedge_flag_ = 0;
  clear_has_hedge_flag();
}
inline ::google::protobuf::int32 InnerFutureQueryOrderResp::hedge_flag() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.hedge_flag)
  return hedge_flag_;
}
inline void InnerFutureQueryOrderResp::set_hedge_flag(::google::protobuf::int32 value) {
  set_has_hedge_flag();
  hedge_flag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.hedge_flag)
}

// optional int64 order_price = 16;
inline bool InnerFutureQueryOrderResp::has_order_price() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_order_price() {
  _has_bits_[0] |= 0x04000000u;
}
inline void InnerFutureQueryOrderResp::clear_has_order_price() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void InnerFutureQueryOrderResp::clear_order_price() {
  order_price_ = GOOGLE_LONGLONG(0);
  clear_has_order_price();
}
inline ::google::protobuf::int64 InnerFutureQueryOrderResp::order_price() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.order_price)
  return order_price_;
}
inline void InnerFutureQueryOrderResp::set_order_price(::google::protobuf::int64 value) {
  set_has_order_price();
  order_price_ = value;
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.order_price)
}

// optional int32 order_qty = 17;
inline bool InnerFutureQueryOrderResp::has_order_qty() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_order_qty() {
  _has_bits_[0] |= 0x08000000u;
}
inline void InnerFutureQueryOrderResp::clear_has_order_qty() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void InnerFutureQueryOrderResp::clear_order_qty() {
  order_qty_ = 0;
  clear_has_order_qty();
}
inline ::google::protobuf::int32 InnerFutureQueryOrderResp::order_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.order_qty)
  return order_qty_;
}
inline void InnerFutureQueryOrderResp::set_order_qty(::google::protobuf::int32 value) {
  set_has_order_qty();
  order_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.order_qty)
}

// optional int32 time_condition = 18;
inline bool InnerFutureQueryOrderResp::has_time_condition() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_time_condition() {
  _has_bits_[0] |= 0x10000000u;
}
inline void InnerFutureQueryOrderResp::clear_has_time_condition() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void InnerFutureQueryOrderResp::clear_time_condition() {
  time_condition_ = 0;
  clear_has_time_condition();
}
inline ::google::protobuf::int32 InnerFutureQueryOrderResp::time_condition() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.time_condition)
  return time_condition_;
}
inline void InnerFutureQueryOrderResp::set_time_condition(::google::protobuf::int32 value) {
  set_has_time_condition();
  time_condition_ = value;
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.time_condition)
}

// optional int32 order_date = 19;
inline bool InnerFutureQueryOrderResp::has_order_date() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_order_date() {
  _has_bits_[0] |= 0x20000000u;
}
inline void InnerFutureQueryOrderResp::clear_has_order_date() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void InnerFutureQueryOrderResp::clear_order_date() {
  order_date_ = 0;
  clear_has_order_date();
}
inline ::google::protobuf::int32 InnerFutureQueryOrderResp::order_date() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.order_date)
  return order_date_;
}
inline void InnerFutureQueryOrderResp::set_order_date(::google::protobuf::int32 value) {
  set_has_order_date();
  order_date_ = value;
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.order_date)
}

// optional int32 volume_condition = 20;
inline bool InnerFutureQueryOrderResp::has_volume_condition() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_volume_condition() {
  _has_bits_[0] |= 0x40000000u;
}
inline void InnerFutureQueryOrderResp::clear_has_volume_condition() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void InnerFutureQueryOrderResp::clear_volume_condition() {
  volume_condition_ = 0;
  clear_has_volume_condition();
}
inline ::google::protobuf::int32 InnerFutureQueryOrderResp::volume_condition() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.volume_condition)
  return volume_condition_;
}
inline void InnerFutureQueryOrderResp::set_volume_condition(::google::protobuf::int32 value) {
  set_has_volume_condition();
  volume_condition_ = value;
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.volume_condition)
}

// optional int32 min_match_volume = 21;
inline bool InnerFutureQueryOrderResp::has_min_match_volume() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_min_match_volume() {
  _has_bits_[0] |= 0x80000000u;
}
inline void InnerFutureQueryOrderResp::clear_has_min_match_volume() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void InnerFutureQueryOrderResp::clear_min_match_volume() {
  min_match_volume_ = 0;
  clear_has_min_match_volume();
}
inline ::google::protobuf::int32 InnerFutureQueryOrderResp::min_match_volume() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.min_match_volume)
  return min_match_volume_;
}
inline void InnerFutureQueryOrderResp::set_min_match_volume(::google::protobuf::int32 value) {
  set_has_min_match_volume();
  min_match_volume_ = value;
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.min_match_volume)
}

// optional int32 contingent_condition = 22;
inline bool InnerFutureQueryOrderResp::has_contingent_condition() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_contingent_condition() {
  _has_bits_[1] |= 0x00000001u;
}
inline void InnerFutureQueryOrderResp::clear_has_contingent_condition() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void InnerFutureQueryOrderResp::clear_contingent_condition() {
  contingent_condition_ = 0;
  clear_has_contingent_condition();
}
inline ::google::protobuf::int32 InnerFutureQueryOrderResp::contingent_condition() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.contingent_condition)
  return contingent_condition_;
}
inline void InnerFutureQueryOrderResp::set_contingent_condition(::google::protobuf::int32 value) {
  set_has_contingent_condition();
  contingent_condition_ = value;
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.contingent_condition)
}

// optional int64 stop_price = 23;
inline bool InnerFutureQueryOrderResp::has_stop_price() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_stop_price() {
  _has_bits_[1] |= 0x00000002u;
}
inline void InnerFutureQueryOrderResp::clear_has_stop_price() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void InnerFutureQueryOrderResp::clear_stop_price() {
  stop_price_ = GOOGLE_LONGLONG(0);
  clear_has_stop_price();
}
inline ::google::protobuf::int64 InnerFutureQueryOrderResp::stop_price() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.stop_price)
  return stop_price_;
}
inline void InnerFutureQueryOrderResp::set_stop_price(::google::protobuf::int64 value) {
  set_has_stop_price();
  stop_price_ = value;
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.stop_price)
}

// optional int32 force_close_reason = 24;
inline bool InnerFutureQueryOrderResp::has_force_close_reason() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_force_close_reason() {
  _has_bits_[1] |= 0x00000004u;
}
inline void InnerFutureQueryOrderResp::clear_has_force_close_reason() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void InnerFutureQueryOrderResp::clear_force_close_reason() {
  force_close_reason_ = 0;
  clear_has_force_close_reason();
}
inline ::google::protobuf::int32 InnerFutureQueryOrderResp::force_close_reason() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.force_close_reason)
  return force_close_reason_;
}
inline void InnerFutureQueryOrderResp::set_force_close_reason(::google::protobuf::int32 value) {
  set_has_force_close_reason();
  force_close_reason_ = value;
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.force_close_reason)
}

// optional string order_local_id = 25;
inline bool InnerFutureQueryOrderResp::has_order_local_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_order_local_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void InnerFutureQueryOrderResp::clear_has_order_local_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void InnerFutureQueryOrderResp::clear_order_local_id() {
  order_local_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_local_id();
}
inline const ::std::string& InnerFutureQueryOrderResp::order_local_id() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.order_local_id)
  return order_local_id_.GetNoArena();
}
inline void InnerFutureQueryOrderResp::set_order_local_id(const ::std::string& value) {
  set_has_order_local_id();
  order_local_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.order_local_id)
}
#if LANG_CXX11
inline void InnerFutureQueryOrderResp::set_order_local_id(::std::string&& value) {
  set_has_order_local_id();
  order_local_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerFutureQueryOrderResp.order_local_id)
}
#endif
inline void InnerFutureQueryOrderResp::set_order_local_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_local_id();
  order_local_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerFutureQueryOrderResp.order_local_id)
}
inline void InnerFutureQueryOrderResp::set_order_local_id(const char* value, size_t size) {
  set_has_order_local_id();
  order_local_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerFutureQueryOrderResp.order_local_id)
}
inline ::std::string* InnerFutureQueryOrderResp::mutable_order_local_id() {
  set_has_order_local_id();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerFutureQueryOrderResp.order_local_id)
  return order_local_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerFutureQueryOrderResp::release_order_local_id() {
  // @@protoc_insertion_point(field_release:autotrade.InnerFutureQueryOrderResp.order_local_id)
  if (!has_order_local_id()) {
    return NULL;
  }
  clear_has_order_local_id();
  return order_local_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerFutureQueryOrderResp::set_allocated_order_local_id(::std::string* order_local_id) {
  if (order_local_id != NULL) {
    set_has_order_local_id();
  } else {
    clear_has_order_local_id();
  }
  order_local_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_local_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerFutureQueryOrderResp.order_local_id)
}

// optional string exchange_id = 26;
inline bool InnerFutureQueryOrderResp::has_exchange_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_exchange_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void InnerFutureQueryOrderResp::clear_has_exchange_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void InnerFutureQueryOrderResp::clear_exchange_id() {
  exchange_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exchange_id();
}
inline const ::std::string& InnerFutureQueryOrderResp::exchange_id() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.exchange_id)
  return exchange_id_.GetNoArena();
}
inline void InnerFutureQueryOrderResp::set_exchange_id(const ::std::string& value) {
  set_has_exchange_id();
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.exchange_id)
}
#if LANG_CXX11
inline void InnerFutureQueryOrderResp::set_exchange_id(::std::string&& value) {
  set_has_exchange_id();
  exchange_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerFutureQueryOrderResp.exchange_id)
}
#endif
inline void InnerFutureQueryOrderResp::set_exchange_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_exchange_id();
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerFutureQueryOrderResp.exchange_id)
}
inline void InnerFutureQueryOrderResp::set_exchange_id(const char* value, size_t size) {
  set_has_exchange_id();
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerFutureQueryOrderResp.exchange_id)
}
inline ::std::string* InnerFutureQueryOrderResp::mutable_exchange_id() {
  set_has_exchange_id();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerFutureQueryOrderResp.exchange_id)
  return exchange_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerFutureQueryOrderResp::release_exchange_id() {
  // @@protoc_insertion_point(field_release:autotrade.InnerFutureQueryOrderResp.exchange_id)
  if (!has_exchange_id()) {
    return NULL;
  }
  clear_has_exchange_id();
  return exchange_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerFutureQueryOrderResp::set_allocated_exchange_id(::std::string* exchange_id) {
  if (exchange_id != NULL) {
    set_has_exchange_id();
  } else {
    clear_has_exchange_id();
  }
  exchange_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerFutureQueryOrderResp.exchange_id)
}

// optional string participant_id = 27;
inline bool InnerFutureQueryOrderResp::has_participant_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_participant_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void InnerFutureQueryOrderResp::clear_has_participant_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void InnerFutureQueryOrderResp::clear_participant_id() {
  participant_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_participant_id();
}
inline const ::std::string& InnerFutureQueryOrderResp::participant_id() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.participant_id)
  return participant_id_.GetNoArena();
}
inline void InnerFutureQueryOrderResp::set_participant_id(const ::std::string& value) {
  set_has_participant_id();
  participant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.participant_id)
}
#if LANG_CXX11
inline void InnerFutureQueryOrderResp::set_participant_id(::std::string&& value) {
  set_has_participant_id();
  participant_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerFutureQueryOrderResp.participant_id)
}
#endif
inline void InnerFutureQueryOrderResp::set_participant_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_participant_id();
  participant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerFutureQueryOrderResp.participant_id)
}
inline void InnerFutureQueryOrderResp::set_participant_id(const char* value, size_t size) {
  set_has_participant_id();
  participant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerFutureQueryOrderResp.participant_id)
}
inline ::std::string* InnerFutureQueryOrderResp::mutable_participant_id() {
  set_has_participant_id();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerFutureQueryOrderResp.participant_id)
  return participant_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerFutureQueryOrderResp::release_participant_id() {
  // @@protoc_insertion_point(field_release:autotrade.InnerFutureQueryOrderResp.participant_id)
  if (!has_participant_id()) {
    return NULL;
  }
  clear_has_participant_id();
  return participant_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerFutureQueryOrderResp::set_allocated_participant_id(::std::string* participant_id) {
  if (participant_id != NULL) {
    set_has_participant_id();
  } else {
    clear_has_participant_id();
  }
  participant_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), participant_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerFutureQueryOrderResp.participant_id)
}

// optional string client_id = 28;
inline bool InnerFutureQueryOrderResp::has_client_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_client_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void InnerFutureQueryOrderResp::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void InnerFutureQueryOrderResp::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_id();
}
inline const ::std::string& InnerFutureQueryOrderResp::client_id() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.client_id)
  return client_id_.GetNoArena();
}
inline void InnerFutureQueryOrderResp::set_client_id(const ::std::string& value) {
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.client_id)
}
#if LANG_CXX11
inline void InnerFutureQueryOrderResp::set_client_id(::std::string&& value) {
  set_has_client_id();
  client_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerFutureQueryOrderResp.client_id)
}
#endif
inline void InnerFutureQueryOrderResp::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerFutureQueryOrderResp.client_id)
}
inline void InnerFutureQueryOrderResp::set_client_id(const char* value, size_t size) {
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerFutureQueryOrderResp.client_id)
}
inline ::std::string* InnerFutureQueryOrderResp::mutable_client_id() {
  set_has_client_id();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerFutureQueryOrderResp.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerFutureQueryOrderResp::release_client_id() {
  // @@protoc_insertion_point(field_release:autotrade.InnerFutureQueryOrderResp.client_id)
  if (!has_client_id()) {
    return NULL;
  }
  clear_has_client_id();
  return client_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerFutureQueryOrderResp::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    set_has_client_id();
  } else {
    clear_has_client_id();
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerFutureQueryOrderResp.client_id)
}

// optional string order_submit_status = 29;
inline bool InnerFutureQueryOrderResp::has_order_submit_status() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_order_submit_status() {
  _has_bits_[0] |= 0x00000400u;
}
inline void InnerFutureQueryOrderResp::clear_has_order_submit_status() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void InnerFutureQueryOrderResp::clear_order_submit_status() {
  order_submit_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_submit_status();
}
inline const ::std::string& InnerFutureQueryOrderResp::order_submit_status() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.order_submit_status)
  return order_submit_status_.GetNoArena();
}
inline void InnerFutureQueryOrderResp::set_order_submit_status(const ::std::string& value) {
  set_has_order_submit_status();
  order_submit_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.order_submit_status)
}
#if LANG_CXX11
inline void InnerFutureQueryOrderResp::set_order_submit_status(::std::string&& value) {
  set_has_order_submit_status();
  order_submit_status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerFutureQueryOrderResp.order_submit_status)
}
#endif
inline void InnerFutureQueryOrderResp::set_order_submit_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_submit_status();
  order_submit_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerFutureQueryOrderResp.order_submit_status)
}
inline void InnerFutureQueryOrderResp::set_order_submit_status(const char* value, size_t size) {
  set_has_order_submit_status();
  order_submit_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerFutureQueryOrderResp.order_submit_status)
}
inline ::std::string* InnerFutureQueryOrderResp::mutable_order_submit_status() {
  set_has_order_submit_status();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerFutureQueryOrderResp.order_submit_status)
  return order_submit_status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerFutureQueryOrderResp::release_order_submit_status() {
  // @@protoc_insertion_point(field_release:autotrade.InnerFutureQueryOrderResp.order_submit_status)
  if (!has_order_submit_status()) {
    return NULL;
  }
  clear_has_order_submit_status();
  return order_submit_status_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerFutureQueryOrderResp::set_allocated_order_submit_status(::std::string* order_submit_status) {
  if (order_submit_status != NULL) {
    set_has_order_submit_status();
  } else {
    clear_has_order_submit_status();
  }
  order_submit_status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_submit_status);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerFutureQueryOrderResp.order_submit_status)
}

// optional string trading_day = 30;
inline bool InnerFutureQueryOrderResp::has_trading_day() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_trading_day() {
  _has_bits_[0] |= 0x00000800u;
}
inline void InnerFutureQueryOrderResp::clear_has_trading_day() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void InnerFutureQueryOrderResp::clear_trading_day() {
  trading_day_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trading_day();
}
inline const ::std::string& InnerFutureQueryOrderResp::trading_day() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.trading_day)
  return trading_day_.GetNoArena();
}
inline void InnerFutureQueryOrderResp::set_trading_day(const ::std::string& value) {
  set_has_trading_day();
  trading_day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.trading_day)
}
#if LANG_CXX11
inline void InnerFutureQueryOrderResp::set_trading_day(::std::string&& value) {
  set_has_trading_day();
  trading_day_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerFutureQueryOrderResp.trading_day)
}
#endif
inline void InnerFutureQueryOrderResp::set_trading_day(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trading_day();
  trading_day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerFutureQueryOrderResp.trading_day)
}
inline void InnerFutureQueryOrderResp::set_trading_day(const char* value, size_t size) {
  set_has_trading_day();
  trading_day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerFutureQueryOrderResp.trading_day)
}
inline ::std::string* InnerFutureQueryOrderResp::mutable_trading_day() {
  set_has_trading_day();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerFutureQueryOrderResp.trading_day)
  return trading_day_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerFutureQueryOrderResp::release_trading_day() {
  // @@protoc_insertion_point(field_release:autotrade.InnerFutureQueryOrderResp.trading_day)
  if (!has_trading_day()) {
    return NULL;
  }
  clear_has_trading_day();
  return trading_day_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerFutureQueryOrderResp::set_allocated_trading_day(::std::string* trading_day) {
  if (trading_day != NULL) {
    set_has_trading_day();
  } else {
    clear_has_trading_day();
  }
  trading_day_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trading_day);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerFutureQueryOrderResp.trading_day)
}

// optional string settlement_id = 31;
inline bool InnerFutureQueryOrderResp::has_settlement_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_settlement_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void InnerFutureQueryOrderResp::clear_has_settlement_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void InnerFutureQueryOrderResp::clear_settlement_id() {
  settlement_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_settlement_id();
}
inline const ::std::string& InnerFutureQueryOrderResp::settlement_id() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.settlement_id)
  return settlement_id_.GetNoArena();
}
inline void InnerFutureQueryOrderResp::set_settlement_id(const ::std::string& value) {
  set_has_settlement_id();
  settlement_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.settlement_id)
}
#if LANG_CXX11
inline void InnerFutureQueryOrderResp::set_settlement_id(::std::string&& value) {
  set_has_settlement_id();
  settlement_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerFutureQueryOrderResp.settlement_id)
}
#endif
inline void InnerFutureQueryOrderResp::set_settlement_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_settlement_id();
  settlement_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerFutureQueryOrderResp.settlement_id)
}
inline void InnerFutureQueryOrderResp::set_settlement_id(const char* value, size_t size) {
  set_has_settlement_id();
  settlement_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerFutureQueryOrderResp.settlement_id)
}
inline ::std::string* InnerFutureQueryOrderResp::mutable_settlement_id() {
  set_has_settlement_id();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerFutureQueryOrderResp.settlement_id)
  return settlement_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerFutureQueryOrderResp::release_settlement_id() {
  // @@protoc_insertion_point(field_release:autotrade.InnerFutureQueryOrderResp.settlement_id)
  if (!has_settlement_id()) {
    return NULL;
  }
  clear_has_settlement_id();
  return settlement_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerFutureQueryOrderResp::set_allocated_settlement_id(::std::string* settlement_id) {
  if (settlement_id != NULL) {
    set_has_settlement_id();
  } else {
    clear_has_settlement_id();
  }
  settlement_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), settlement_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerFutureQueryOrderResp.settlement_id)
}

// optional string order_sys_id = 32;
inline bool InnerFutureQueryOrderResp::has_order_sys_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_order_sys_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void InnerFutureQueryOrderResp::clear_has_order_sys_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void InnerFutureQueryOrderResp::clear_order_sys_id() {
  order_sys_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_sys_id();
}
inline const ::std::string& InnerFutureQueryOrderResp::order_sys_id() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.order_sys_id)
  return order_sys_id_.GetNoArena();
}
inline void InnerFutureQueryOrderResp::set_order_sys_id(const ::std::string& value) {
  set_has_order_sys_id();
  order_sys_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.order_sys_id)
}
#if LANG_CXX11
inline void InnerFutureQueryOrderResp::set_order_sys_id(::std::string&& value) {
  set_has_order_sys_id();
  order_sys_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerFutureQueryOrderResp.order_sys_id)
}
#endif
inline void InnerFutureQueryOrderResp::set_order_sys_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_sys_id();
  order_sys_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerFutureQueryOrderResp.order_sys_id)
}
inline void InnerFutureQueryOrderResp::set_order_sys_id(const char* value, size_t size) {
  set_has_order_sys_id();
  order_sys_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerFutureQueryOrderResp.order_sys_id)
}
inline ::std::string* InnerFutureQueryOrderResp::mutable_order_sys_id() {
  set_has_order_sys_id();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerFutureQueryOrderResp.order_sys_id)
  return order_sys_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerFutureQueryOrderResp::release_order_sys_id() {
  // @@protoc_insertion_point(field_release:autotrade.InnerFutureQueryOrderResp.order_sys_id)
  if (!has_order_sys_id()) {
    return NULL;
  }
  clear_has_order_sys_id();
  return order_sys_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerFutureQueryOrderResp::set_allocated_order_sys_id(::std::string* order_sys_id) {
  if (order_sys_id != NULL) {
    set_has_order_sys_id();
  } else {
    clear_has_order_sys_id();
  }
  order_sys_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_sys_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerFutureQueryOrderResp.order_sys_id)
}

// optional string order_source = 33;
inline bool InnerFutureQueryOrderResp::has_order_source() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_order_source() {
  _has_bits_[0] |= 0x00004000u;
}
inline void InnerFutureQueryOrderResp::clear_has_order_source() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void InnerFutureQueryOrderResp::clear_order_source() {
  order_source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_source();
}
inline const ::std::string& InnerFutureQueryOrderResp::order_source() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.order_source)
  return order_source_.GetNoArena();
}
inline void InnerFutureQueryOrderResp::set_order_source(const ::std::string& value) {
  set_has_order_source();
  order_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.order_source)
}
#if LANG_CXX11
inline void InnerFutureQueryOrderResp::set_order_source(::std::string&& value) {
  set_has_order_source();
  order_source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerFutureQueryOrderResp.order_source)
}
#endif
inline void InnerFutureQueryOrderResp::set_order_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_source();
  order_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerFutureQueryOrderResp.order_source)
}
inline void InnerFutureQueryOrderResp::set_order_source(const char* value, size_t size) {
  set_has_order_source();
  order_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerFutureQueryOrderResp.order_source)
}
inline ::std::string* InnerFutureQueryOrderResp::mutable_order_source() {
  set_has_order_source();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerFutureQueryOrderResp.order_source)
  return order_source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerFutureQueryOrderResp::release_order_source() {
  // @@protoc_insertion_point(field_release:autotrade.InnerFutureQueryOrderResp.order_source)
  if (!has_order_source()) {
    return NULL;
  }
  clear_has_order_source();
  return order_source_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerFutureQueryOrderResp::set_allocated_order_source(::std::string* order_source) {
  if (order_source != NULL) {
    set_has_order_source();
  } else {
    clear_has_order_source();
  }
  order_source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_source);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerFutureQueryOrderResp.order_source)
}

// optional string order_status = 34;
inline bool InnerFutureQueryOrderResp::has_order_status() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_order_status() {
  _has_bits_[0] |= 0x00008000u;
}
inline void InnerFutureQueryOrderResp::clear_has_order_status() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void InnerFutureQueryOrderResp::clear_order_status() {
  order_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_status();
}
inline const ::std::string& InnerFutureQueryOrderResp::order_status() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.order_status)
  return order_status_.GetNoArena();
}
inline void InnerFutureQueryOrderResp::set_order_status(const ::std::string& value) {
  set_has_order_status();
  order_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.order_status)
}
#if LANG_CXX11
inline void InnerFutureQueryOrderResp::set_order_status(::std::string&& value) {
  set_has_order_status();
  order_status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerFutureQueryOrderResp.order_status)
}
#endif
inline void InnerFutureQueryOrderResp::set_order_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_status();
  order_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerFutureQueryOrderResp.order_status)
}
inline void InnerFutureQueryOrderResp::set_order_status(const char* value, size_t size) {
  set_has_order_status();
  order_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerFutureQueryOrderResp.order_status)
}
inline ::std::string* InnerFutureQueryOrderResp::mutable_order_status() {
  set_has_order_status();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerFutureQueryOrderResp.order_status)
  return order_status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerFutureQueryOrderResp::release_order_status() {
  // @@protoc_insertion_point(field_release:autotrade.InnerFutureQueryOrderResp.order_status)
  if (!has_order_status()) {
    return NULL;
  }
  clear_has_order_status();
  return order_status_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerFutureQueryOrderResp::set_allocated_order_status(::std::string* order_status) {
  if (order_status != NULL) {
    set_has_order_status();
  } else {
    clear_has_order_status();
  }
  order_status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_status);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerFutureQueryOrderResp.order_status)
}

// optional string order_type = 35;
inline bool InnerFutureQueryOrderResp::has_order_type() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_order_type() {
  _has_bits_[0] |= 0x00010000u;
}
inline void InnerFutureQueryOrderResp::clear_has_order_type() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void InnerFutureQueryOrderResp::clear_order_type() {
  order_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_type();
}
inline const ::std::string& InnerFutureQueryOrderResp::order_type() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.order_type)
  return order_type_.GetNoArena();
}
inline void InnerFutureQueryOrderResp::set_order_type(const ::std::string& value) {
  set_has_order_type();
  order_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.order_type)
}
#if LANG_CXX11
inline void InnerFutureQueryOrderResp::set_order_type(::std::string&& value) {
  set_has_order_type();
  order_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerFutureQueryOrderResp.order_type)
}
#endif
inline void InnerFutureQueryOrderResp::set_order_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_type();
  order_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerFutureQueryOrderResp.order_type)
}
inline void InnerFutureQueryOrderResp::set_order_type(const char* value, size_t size) {
  set_has_order_type();
  order_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerFutureQueryOrderResp.order_type)
}
inline ::std::string* InnerFutureQueryOrderResp::mutable_order_type() {
  set_has_order_type();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerFutureQueryOrderResp.order_type)
  return order_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerFutureQueryOrderResp::release_order_type() {
  // @@protoc_insertion_point(field_release:autotrade.InnerFutureQueryOrderResp.order_type)
  if (!has_order_type()) {
    return NULL;
  }
  clear_has_order_type();
  return order_type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerFutureQueryOrderResp::set_allocated_order_type(::std::string* order_type) {
  if (order_type != NULL) {
    set_has_order_type();
  } else {
    clear_has_order_type();
  }
  order_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_type);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerFutureQueryOrderResp.order_type)
}

// optional int32 match_qty = 36;
inline bool InnerFutureQueryOrderResp::has_match_qty() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_match_qty() {
  _has_bits_[1] |= 0x00000008u;
}
inline void InnerFutureQueryOrderResp::clear_has_match_qty() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void InnerFutureQueryOrderResp::clear_match_qty() {
  match_qty_ = 0;
  clear_has_match_qty();
}
inline ::google::protobuf::int32 InnerFutureQueryOrderResp::match_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.match_qty)
  return match_qty_;
}
inline void InnerFutureQueryOrderResp::set_match_qty(::google::protobuf::int32 value) {
  set_has_match_qty();
  match_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.match_qty)
}

// optional int32 remain_qty = 37;
inline bool InnerFutureQueryOrderResp::has_remain_qty() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_remain_qty() {
  _has_bits_[1] |= 0x00000010u;
}
inline void InnerFutureQueryOrderResp::clear_has_remain_qty() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void InnerFutureQueryOrderResp::clear_remain_qty() {
  remain_qty_ = 0;
  clear_has_remain_qty();
}
inline ::google::protobuf::int32 InnerFutureQueryOrderResp::remain_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.remain_qty)
  return remain_qty_;
}
inline void InnerFutureQueryOrderResp::set_remain_qty(::google::protobuf::int32 value) {
  set_has_remain_qty();
  remain_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.remain_qty)
}

// optional int32 insert_date = 38 [default = -1];
inline bool InnerFutureQueryOrderResp::has_insert_date() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_insert_date() {
  _has_bits_[1] |= 0x00000080u;
}
inline void InnerFutureQueryOrderResp::clear_has_insert_date() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void InnerFutureQueryOrderResp::clear_insert_date() {
  insert_date_ = -1;
  clear_has_insert_date();
}
inline ::google::protobuf::int32 InnerFutureQueryOrderResp::insert_date() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.insert_date)
  return insert_date_;
}
inline void InnerFutureQueryOrderResp::set_insert_date(::google::protobuf::int32 value) {
  set_has_insert_date();
  insert_date_ = value;
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.insert_date)
}

// optional int32 insert_time = 39 [default = -1];
inline bool InnerFutureQueryOrderResp::has_insert_time() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_insert_time() {
  _has_bits_[1] |= 0x00000100u;
}
inline void InnerFutureQueryOrderResp::clear_has_insert_time() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void InnerFutureQueryOrderResp::clear_insert_time() {
  insert_time_ = -1;
  clear_has_insert_time();
}
inline ::google::protobuf::int32 InnerFutureQueryOrderResp::insert_time() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.insert_time)
  return insert_time_;
}
inline void InnerFutureQueryOrderResp::set_insert_time(::google::protobuf::int32 value) {
  set_has_insert_time();
  insert_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.insert_time)
}

// optional int32 active_time = 40 [default = -1];
inline bool InnerFutureQueryOrderResp::has_active_time() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_active_time() {
  _has_bits_[1] |= 0x00000200u;
}
inline void InnerFutureQueryOrderResp::clear_has_active_time() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void InnerFutureQueryOrderResp::clear_active_time() {
  active_time_ = -1;
  clear_has_active_time();
}
inline ::google::protobuf::int32 InnerFutureQueryOrderResp::active_time() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.active_time)
  return active_time_;
}
inline void InnerFutureQueryOrderResp::set_active_time(::google::protobuf::int32 value) {
  set_has_active_time();
  active_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.active_time)
}

// optional int32 suspend_time = 41 [default = -1];
inline bool InnerFutureQueryOrderResp::has_suspend_time() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_suspend_time() {
  _has_bits_[1] |= 0x00000400u;
}
inline void InnerFutureQueryOrderResp::clear_has_suspend_time() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void InnerFutureQueryOrderResp::clear_suspend_time() {
  suspend_time_ = -1;
  clear_has_suspend_time();
}
inline ::google::protobuf::int32 InnerFutureQueryOrderResp::suspend_time() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.suspend_time)
  return suspend_time_;
}
inline void InnerFutureQueryOrderResp::set_suspend_time(::google::protobuf::int32 value) {
  set_has_suspend_time();
  suspend_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.suspend_time)
}

// optional int32 update_time = 42 [default = -1];
inline bool InnerFutureQueryOrderResp::has_update_time() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_update_time() {
  _has_bits_[1] |= 0x00000800u;
}
inline void InnerFutureQueryOrderResp::clear_has_update_time() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void InnerFutureQueryOrderResp::clear_update_time() {
  update_time_ = -1;
  clear_has_update_time();
}
inline ::google::protobuf::int32 InnerFutureQueryOrderResp::update_time() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.update_time)
  return update_time_;
}
inline void InnerFutureQueryOrderResp::set_update_time(::google::protobuf::int32 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.update_time)
}

// optional int32 cancel_time = 43 [default = -1];
inline bool InnerFutureQueryOrderResp::has_cancel_time() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_cancel_time() {
  _has_bits_[1] |= 0x00000020u;
}
inline void InnerFutureQueryOrderResp::clear_has_cancel_time() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void InnerFutureQueryOrderResp::clear_cancel_time() {
  cancel_time_ = -1;
  clear_has_cancel_time();
}
inline ::google::protobuf::int32 InnerFutureQueryOrderResp::cancel_time() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.cancel_time)
  return cancel_time_;
}
inline void InnerFutureQueryOrderResp::set_cancel_time(::google::protobuf::int32 value) {
  set_has_cancel_time();
  cancel_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.cancel_time)
}

// optional string instrument_id = 44;
inline bool InnerFutureQueryOrderResp::has_instrument_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void InnerFutureQueryOrderResp::set_has_instrument_id() {
  _has_bits_[0] |= 0x00020000u;
}
inline void InnerFutureQueryOrderResp::clear_has_instrument_id() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void InnerFutureQueryOrderResp::clear_instrument_id() {
  instrument_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_instrument_id();
}
inline const ::std::string& InnerFutureQueryOrderResp::instrument_id() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryOrderResp.instrument_id)
  return instrument_id_.GetNoArena();
}
inline void InnerFutureQueryOrderResp::set_instrument_id(const ::std::string& value) {
  set_has_instrument_id();
  instrument_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryOrderResp.instrument_id)
}
#if LANG_CXX11
inline void InnerFutureQueryOrderResp::set_instrument_id(::std::string&& value) {
  set_has_instrument_id();
  instrument_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerFutureQueryOrderResp.instrument_id)
}
#endif
inline void InnerFutureQueryOrderResp::set_instrument_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_instrument_id();
  instrument_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerFutureQueryOrderResp.instrument_id)
}
inline void InnerFutureQueryOrderResp::set_instrument_id(const char* value, size_t size) {
  set_has_instrument_id();
  instrument_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerFutureQueryOrderResp.instrument_id)
}
inline ::std::string* InnerFutureQueryOrderResp::mutable_instrument_id() {
  set_has_instrument_id();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerFutureQueryOrderResp.instrument_id)
  return instrument_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerFutureQueryOrderResp::release_instrument_id() {
  // @@protoc_insertion_point(field_release:autotrade.InnerFutureQueryOrderResp.instrument_id)
  if (!has_instrument_id()) {
    return NULL;
  }
  clear_has_instrument_id();
  return instrument_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerFutureQueryOrderResp::set_allocated_instrument_id(::std::string* instrument_id) {
  if (instrument_id != NULL) {
    set_has_instrument_id();
  } else {
    clear_has_instrument_id();
  }
  instrument_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrument_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerFutureQueryOrderResp.instrument_id)
}

// -------------------------------------------------------------------

// InnerQueryTradeReqt

// optional int32 funcid = 1 [default = 12003013];
inline bool InnerQueryTradeReqt::has_funcid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void InnerQueryTradeReqt::set_has_funcid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void InnerQueryTradeReqt::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void InnerQueryTradeReqt::clear_funcid() {
  funcid_ = 12003013;
  clear_has_funcid();
}
inline ::google::protobuf::int32 InnerQueryTradeReqt::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerQueryTradeReqt.funcid)
  return funcid_;
}
inline void InnerQueryTradeReqt::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.InnerQueryTradeReqt.funcid)
}

// optional string broker_id = 2;
inline bool InnerQueryTradeReqt::has_broker_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InnerQueryTradeReqt::set_has_broker_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InnerQueryTradeReqt::clear_has_broker_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InnerQueryTradeReqt::clear_broker_id() {
  broker_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_broker_id();
}
inline const ::std::string& InnerQueryTradeReqt::broker_id() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerQueryTradeReqt.broker_id)
  return broker_id_.GetNoArena();
}
inline void InnerQueryTradeReqt::set_broker_id(const ::std::string& value) {
  set_has_broker_id();
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerQueryTradeReqt.broker_id)
}
#if LANG_CXX11
inline void InnerQueryTradeReqt::set_broker_id(::std::string&& value) {
  set_has_broker_id();
  broker_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerQueryTradeReqt.broker_id)
}
#endif
inline void InnerQueryTradeReqt::set_broker_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_broker_id();
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerQueryTradeReqt.broker_id)
}
inline void InnerQueryTradeReqt::set_broker_id(const char* value, size_t size) {
  set_has_broker_id();
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerQueryTradeReqt.broker_id)
}
inline ::std::string* InnerQueryTradeReqt::mutable_broker_id() {
  set_has_broker_id();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerQueryTradeReqt.broker_id)
  return broker_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerQueryTradeReqt::release_broker_id() {
  // @@protoc_insertion_point(field_release:autotrade.InnerQueryTradeReqt.broker_id)
  if (!has_broker_id()) {
    return NULL;
  }
  clear_has_broker_id();
  return broker_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerQueryTradeReqt::set_allocated_broker_id(::std::string* broker_id) {
  if (broker_id != NULL) {
    set_has_broker_id();
  } else {
    clear_has_broker_id();
  }
  broker_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), broker_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerQueryTradeReqt.broker_id)
}

// optional string future_account = 3;
inline bool InnerQueryTradeReqt::has_future_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InnerQueryTradeReqt::set_has_future_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InnerQueryTradeReqt::clear_has_future_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InnerQueryTradeReqt::clear_future_account() {
  future_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_future_account();
}
inline const ::std::string& InnerQueryTradeReqt::future_account() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerQueryTradeReqt.future_account)
  return future_account_.GetNoArena();
}
inline void InnerQueryTradeReqt::set_future_account(const ::std::string& value) {
  set_has_future_account();
  future_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerQueryTradeReqt.future_account)
}
#if LANG_CXX11
inline void InnerQueryTradeReqt::set_future_account(::std::string&& value) {
  set_has_future_account();
  future_account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerQueryTradeReqt.future_account)
}
#endif
inline void InnerQueryTradeReqt::set_future_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_future_account();
  future_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerQueryTradeReqt.future_account)
}
inline void InnerQueryTradeReqt::set_future_account(const char* value, size_t size) {
  set_has_future_account();
  future_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerQueryTradeReqt.future_account)
}
inline ::std::string* InnerQueryTradeReqt::mutable_future_account() {
  set_has_future_account();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerQueryTradeReqt.future_account)
  return future_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerQueryTradeReqt::release_future_account() {
  // @@protoc_insertion_point(field_release:autotrade.InnerQueryTradeReqt.future_account)
  if (!has_future_account()) {
    return NULL;
  }
  clear_has_future_account();
  return future_account_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerQueryTradeReqt::set_allocated_future_account(::std::string* future_account) {
  if (future_account != NULL) {
    set_has_future_account();
  } else {
    clear_has_future_account();
  }
  future_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), future_account);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerQueryTradeReqt.future_account)
}

// optional string instrument_id = 4;
inline bool InnerQueryTradeReqt::has_instrument_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InnerQueryTradeReqt::set_has_instrument_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InnerQueryTradeReqt::clear_has_instrument_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InnerQueryTradeReqt::clear_instrument_id() {
  instrument_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_instrument_id();
}
inline const ::std::string& InnerQueryTradeReqt::instrument_id() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerQueryTradeReqt.instrument_id)
  return instrument_id_.GetNoArena();
}
inline void InnerQueryTradeReqt::set_instrument_id(const ::std::string& value) {
  set_has_instrument_id();
  instrument_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerQueryTradeReqt.instrument_id)
}
#if LANG_CXX11
inline void InnerQueryTradeReqt::set_instrument_id(::std::string&& value) {
  set_has_instrument_id();
  instrument_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerQueryTradeReqt.instrument_id)
}
#endif
inline void InnerQueryTradeReqt::set_instrument_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_instrument_id();
  instrument_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerQueryTradeReqt.instrument_id)
}
inline void InnerQueryTradeReqt::set_instrument_id(const char* value, size_t size) {
  set_has_instrument_id();
  instrument_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerQueryTradeReqt.instrument_id)
}
inline ::std::string* InnerQueryTradeReqt::mutable_instrument_id() {
  set_has_instrument_id();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerQueryTradeReqt.instrument_id)
  return instrument_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerQueryTradeReqt::release_instrument_id() {
  // @@protoc_insertion_point(field_release:autotrade.InnerQueryTradeReqt.instrument_id)
  if (!has_instrument_id()) {
    return NULL;
  }
  clear_has_instrument_id();
  return instrument_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerQueryTradeReqt::set_allocated_instrument_id(::std::string* instrument_id) {
  if (instrument_id != NULL) {
    set_has_instrument_id();
  } else {
    clear_has_instrument_id();
  }
  instrument_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrument_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerQueryTradeReqt.instrument_id)
}

// optional string exchange_id = 5;
inline bool InnerQueryTradeReqt::has_exchange_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InnerQueryTradeReqt::set_has_exchange_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InnerQueryTradeReqt::clear_has_exchange_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InnerQueryTradeReqt::clear_exchange_id() {
  exchange_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exchange_id();
}
inline const ::std::string& InnerQueryTradeReqt::exchange_id() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerQueryTradeReqt.exchange_id)
  return exchange_id_.GetNoArena();
}
inline void InnerQueryTradeReqt::set_exchange_id(const ::std::string& value) {
  set_has_exchange_id();
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerQueryTradeReqt.exchange_id)
}
#if LANG_CXX11
inline void InnerQueryTradeReqt::set_exchange_id(::std::string&& value) {
  set_has_exchange_id();
  exchange_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerQueryTradeReqt.exchange_id)
}
#endif
inline void InnerQueryTradeReqt::set_exchange_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_exchange_id();
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerQueryTradeReqt.exchange_id)
}
inline void InnerQueryTradeReqt::set_exchange_id(const char* value, size_t size) {
  set_has_exchange_id();
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerQueryTradeReqt.exchange_id)
}
inline ::std::string* InnerQueryTradeReqt::mutable_exchange_id() {
  set_has_exchange_id();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerQueryTradeReqt.exchange_id)
  return exchange_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerQueryTradeReqt::release_exchange_id() {
  // @@protoc_insertion_point(field_release:autotrade.InnerQueryTradeReqt.exchange_id)
  if (!has_exchange_id()) {
    return NULL;
  }
  clear_has_exchange_id();
  return exchange_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerQueryTradeReqt::set_allocated_exchange_id(::std::string* exchange_id) {
  if (exchange_id != NULL) {
    set_has_exchange_id();
  } else {
    clear_has_exchange_id();
  }
  exchange_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerQueryTradeReqt.exchange_id)
}

// optional string order_sys_id = 6;
inline bool InnerQueryTradeReqt::has_order_sys_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InnerQueryTradeReqt::set_has_order_sys_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InnerQueryTradeReqt::clear_has_order_sys_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InnerQueryTradeReqt::clear_order_sys_id() {
  order_sys_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_sys_id();
}
inline const ::std::string& InnerQueryTradeReqt::order_sys_id() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerQueryTradeReqt.order_sys_id)
  return order_sys_id_.GetNoArena();
}
inline void InnerQueryTradeReqt::set_order_sys_id(const ::std::string& value) {
  set_has_order_sys_id();
  order_sys_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerQueryTradeReqt.order_sys_id)
}
#if LANG_CXX11
inline void InnerQueryTradeReqt::set_order_sys_id(::std::string&& value) {
  set_has_order_sys_id();
  order_sys_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerQueryTradeReqt.order_sys_id)
}
#endif
inline void InnerQueryTradeReqt::set_order_sys_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_sys_id();
  order_sys_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerQueryTradeReqt.order_sys_id)
}
inline void InnerQueryTradeReqt::set_order_sys_id(const char* value, size_t size) {
  set_has_order_sys_id();
  order_sys_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerQueryTradeReqt.order_sys_id)
}
inline ::std::string* InnerQueryTradeReqt::mutable_order_sys_id() {
  set_has_order_sys_id();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerQueryTradeReqt.order_sys_id)
  return order_sys_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerQueryTradeReqt::release_order_sys_id() {
  // @@protoc_insertion_point(field_release:autotrade.InnerQueryTradeReqt.order_sys_id)
  if (!has_order_sys_id()) {
    return NULL;
  }
  clear_has_order_sys_id();
  return order_sys_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerQueryTradeReqt::set_allocated_order_sys_id(::std::string* order_sys_id) {
  if (order_sys_id != NULL) {
    set_has_order_sys_id();
  } else {
    clear_has_order_sys_id();
  }
  order_sys_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_sys_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerQueryTradeReqt.order_sys_id)
}

// optional string insert_time_start = 7;
inline bool InnerQueryTradeReqt::has_insert_time_start() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InnerQueryTradeReqt::set_has_insert_time_start() {
  _has_bits_[0] |= 0x00000020u;
}
inline void InnerQueryTradeReqt::clear_has_insert_time_start() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void InnerQueryTradeReqt::clear_insert_time_start() {
  insert_time_start_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_insert_time_start();
}
inline const ::std::string& InnerQueryTradeReqt::insert_time_start() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerQueryTradeReqt.insert_time_start)
  return insert_time_start_.GetNoArena();
}
inline void InnerQueryTradeReqt::set_insert_time_start(const ::std::string& value) {
  set_has_insert_time_start();
  insert_time_start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerQueryTradeReqt.insert_time_start)
}
#if LANG_CXX11
inline void InnerQueryTradeReqt::set_insert_time_start(::std::string&& value) {
  set_has_insert_time_start();
  insert_time_start_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerQueryTradeReqt.insert_time_start)
}
#endif
inline void InnerQueryTradeReqt::set_insert_time_start(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_insert_time_start();
  insert_time_start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerQueryTradeReqt.insert_time_start)
}
inline void InnerQueryTradeReqt::set_insert_time_start(const char* value, size_t size) {
  set_has_insert_time_start();
  insert_time_start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerQueryTradeReqt.insert_time_start)
}
inline ::std::string* InnerQueryTradeReqt::mutable_insert_time_start() {
  set_has_insert_time_start();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerQueryTradeReqt.insert_time_start)
  return insert_time_start_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerQueryTradeReqt::release_insert_time_start() {
  // @@protoc_insertion_point(field_release:autotrade.InnerQueryTradeReqt.insert_time_start)
  if (!has_insert_time_start()) {
    return NULL;
  }
  clear_has_insert_time_start();
  return insert_time_start_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerQueryTradeReqt::set_allocated_insert_time_start(::std::string* insert_time_start) {
  if (insert_time_start != NULL) {
    set_has_insert_time_start();
  } else {
    clear_has_insert_time_start();
  }
  insert_time_start_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), insert_time_start);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerQueryTradeReqt.insert_time_start)
}

// optional string insert_time_end = 8;
inline bool InnerQueryTradeReqt::has_insert_time_end() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void InnerQueryTradeReqt::set_has_insert_time_end() {
  _has_bits_[0] |= 0x00000040u;
}
inline void InnerQueryTradeReqt::clear_has_insert_time_end() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void InnerQueryTradeReqt::clear_insert_time_end() {
  insert_time_end_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_insert_time_end();
}
inline const ::std::string& InnerQueryTradeReqt::insert_time_end() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerQueryTradeReqt.insert_time_end)
  return insert_time_end_.GetNoArena();
}
inline void InnerQueryTradeReqt::set_insert_time_end(const ::std::string& value) {
  set_has_insert_time_end();
  insert_time_end_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerQueryTradeReqt.insert_time_end)
}
#if LANG_CXX11
inline void InnerQueryTradeReqt::set_insert_time_end(::std::string&& value) {
  set_has_insert_time_end();
  insert_time_end_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerQueryTradeReqt.insert_time_end)
}
#endif
inline void InnerQueryTradeReqt::set_insert_time_end(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_insert_time_end();
  insert_time_end_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerQueryTradeReqt.insert_time_end)
}
inline void InnerQueryTradeReqt::set_insert_time_end(const char* value, size_t size) {
  set_has_insert_time_end();
  insert_time_end_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerQueryTradeReqt.insert_time_end)
}
inline ::std::string* InnerQueryTradeReqt::mutable_insert_time_end() {
  set_has_insert_time_end();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerQueryTradeReqt.insert_time_end)
  return insert_time_end_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerQueryTradeReqt::release_insert_time_end() {
  // @@protoc_insertion_point(field_release:autotrade.InnerQueryTradeReqt.insert_time_end)
  if (!has_insert_time_end()) {
    return NULL;
  }
  clear_has_insert_time_end();
  return insert_time_end_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerQueryTradeReqt::set_allocated_insert_time_end(::std::string* insert_time_end) {
  if (insert_time_end != NULL) {
    set_has_insert_time_end();
  } else {
    clear_has_insert_time_end();
  }
  insert_time_end_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), insert_time_end);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerQueryTradeReqt.insert_time_end)
}

// -------------------------------------------------------------------

// InnerFutureQueryTradeResp

// optional int32 funcid = 1 [default = 12103013];
inline bool InnerFutureQueryTradeResp::has_funcid() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void InnerFutureQueryTradeResp::set_has_funcid() {
  _has_bits_[0] |= 0x02000000u;
}
inline void InnerFutureQueryTradeResp::clear_has_funcid() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void InnerFutureQueryTradeResp::clear_funcid() {
  funcid_ = 12103013;
  clear_has_funcid();
}
inline ::google::protobuf::int32 InnerFutureQueryTradeResp::funcid() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryTradeResp.funcid)
  return funcid_;
}
inline void InnerFutureQueryTradeResp::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryTradeResp.funcid)
}

// optional string broker_id = 2;
inline bool InnerFutureQueryTradeResp::has_broker_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InnerFutureQueryTradeResp::set_has_broker_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InnerFutureQueryTradeResp::clear_has_broker_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InnerFutureQueryTradeResp::clear_broker_id() {
  broker_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_broker_id();
}
inline const ::std::string& InnerFutureQueryTradeResp::broker_id() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryTradeResp.broker_id)
  return broker_id_.GetNoArena();
}
inline void InnerFutureQueryTradeResp::set_broker_id(const ::std::string& value) {
  set_has_broker_id();
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryTradeResp.broker_id)
}
#if LANG_CXX11
inline void InnerFutureQueryTradeResp::set_broker_id(::std::string&& value) {
  set_has_broker_id();
  broker_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerFutureQueryTradeResp.broker_id)
}
#endif
inline void InnerFutureQueryTradeResp::set_broker_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_broker_id();
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerFutureQueryTradeResp.broker_id)
}
inline void InnerFutureQueryTradeResp::set_broker_id(const char* value, size_t size) {
  set_has_broker_id();
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerFutureQueryTradeResp.broker_id)
}
inline ::std::string* InnerFutureQueryTradeResp::mutable_broker_id() {
  set_has_broker_id();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerFutureQueryTradeResp.broker_id)
  return broker_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerFutureQueryTradeResp::release_broker_id() {
  // @@protoc_insertion_point(field_release:autotrade.InnerFutureQueryTradeResp.broker_id)
  if (!has_broker_id()) {
    return NULL;
  }
  clear_has_broker_id();
  return broker_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerFutureQueryTradeResp::set_allocated_broker_id(::std::string* broker_id) {
  if (broker_id != NULL) {
    set_has_broker_id();
  } else {
    clear_has_broker_id();
  }
  broker_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), broker_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerFutureQueryTradeResp.broker_id)
}

// optional string future_account = 3;
inline bool InnerFutureQueryTradeResp::has_future_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InnerFutureQueryTradeResp::set_has_future_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InnerFutureQueryTradeResp::clear_has_future_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InnerFutureQueryTradeResp::clear_future_account() {
  future_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_future_account();
}
inline const ::std::string& InnerFutureQueryTradeResp::future_account() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryTradeResp.future_account)
  return future_account_.GetNoArena();
}
inline void InnerFutureQueryTradeResp::set_future_account(const ::std::string& value) {
  set_has_future_account();
  future_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryTradeResp.future_account)
}
#if LANG_CXX11
inline void InnerFutureQueryTradeResp::set_future_account(::std::string&& value) {
  set_has_future_account();
  future_account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerFutureQueryTradeResp.future_account)
}
#endif
inline void InnerFutureQueryTradeResp::set_future_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_future_account();
  future_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerFutureQueryTradeResp.future_account)
}
inline void InnerFutureQueryTradeResp::set_future_account(const char* value, size_t size) {
  set_has_future_account();
  future_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerFutureQueryTradeResp.future_account)
}
inline ::std::string* InnerFutureQueryTradeResp::mutable_future_account() {
  set_has_future_account();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerFutureQueryTradeResp.future_account)
  return future_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerFutureQueryTradeResp::release_future_account() {
  // @@protoc_insertion_point(field_release:autotrade.InnerFutureQueryTradeResp.future_account)
  if (!has_future_account()) {
    return NULL;
  }
  clear_has_future_account();
  return future_account_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerFutureQueryTradeResp::set_allocated_future_account(::std::string* future_account) {
  if (future_account != NULL) {
    set_has_future_account();
  } else {
    clear_has_future_account();
  }
  future_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), future_account);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerFutureQueryTradeResp.future_account)
}

// optional string instrument_id = 4;
inline bool InnerFutureQueryTradeResp::has_instrument_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InnerFutureQueryTradeResp::set_has_instrument_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InnerFutureQueryTradeResp::clear_has_instrument_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InnerFutureQueryTradeResp::clear_instrument_id() {
  instrument_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_instrument_id();
}
inline const ::std::string& InnerFutureQueryTradeResp::instrument_id() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryTradeResp.instrument_id)
  return instrument_id_.GetNoArena();
}
inline void InnerFutureQueryTradeResp::set_instrument_id(const ::std::string& value) {
  set_has_instrument_id();
  instrument_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryTradeResp.instrument_id)
}
#if LANG_CXX11
inline void InnerFutureQueryTradeResp::set_instrument_id(::std::string&& value) {
  set_has_instrument_id();
  instrument_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerFutureQueryTradeResp.instrument_id)
}
#endif
inline void InnerFutureQueryTradeResp::set_instrument_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_instrument_id();
  instrument_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerFutureQueryTradeResp.instrument_id)
}
inline void InnerFutureQueryTradeResp::set_instrument_id(const char* value, size_t size) {
  set_has_instrument_id();
  instrument_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerFutureQueryTradeResp.instrument_id)
}
inline ::std::string* InnerFutureQueryTradeResp::mutable_instrument_id() {
  set_has_instrument_id();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerFutureQueryTradeResp.instrument_id)
  return instrument_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerFutureQueryTradeResp::release_instrument_id() {
  // @@protoc_insertion_point(field_release:autotrade.InnerFutureQueryTradeResp.instrument_id)
  if (!has_instrument_id()) {
    return NULL;
  }
  clear_has_instrument_id();
  return instrument_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerFutureQueryTradeResp::set_allocated_instrument_id(::std::string* instrument_id) {
  if (instrument_id != NULL) {
    set_has_instrument_id();
  } else {
    clear_has_instrument_id();
  }
  instrument_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrument_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerFutureQueryTradeResp.instrument_id)
}

// optional string order_group = 5;
inline bool InnerFutureQueryTradeResp::has_order_group() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InnerFutureQueryTradeResp::set_has_order_group() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InnerFutureQueryTradeResp::clear_has_order_group() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InnerFutureQueryTradeResp::clear_order_group() {
  order_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_group();
}
inline const ::std::string& InnerFutureQueryTradeResp::order_group() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryTradeResp.order_group)
  return order_group_.GetNoArena();
}
inline void InnerFutureQueryTradeResp::set_order_group(const ::std::string& value) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryTradeResp.order_group)
}
#if LANG_CXX11
inline void InnerFutureQueryTradeResp::set_order_group(::std::string&& value) {
  set_has_order_group();
  order_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerFutureQueryTradeResp.order_group)
}
#endif
inline void InnerFutureQueryTradeResp::set_order_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerFutureQueryTradeResp.order_group)
}
inline void InnerFutureQueryTradeResp::set_order_group(const char* value, size_t size) {
  set_has_order_group();
  order_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerFutureQueryTradeResp.order_group)
}
inline ::std::string* InnerFutureQueryTradeResp::mutable_order_group() {
  set_has_order_group();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerFutureQueryTradeResp.order_group)
  return order_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerFutureQueryTradeResp::release_order_group() {
  // @@protoc_insertion_point(field_release:autotrade.InnerFutureQueryTradeResp.order_group)
  if (!has_order_group()) {
    return NULL;
  }
  clear_has_order_group();
  return order_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerFutureQueryTradeResp::set_allocated_order_group(::std::string* order_group) {
  if (order_group != NULL) {
    set_has_order_group();
  } else {
    clear_has_order_group();
  }
  order_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_group);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerFutureQueryTradeResp.order_group)
}

// optional string user_id = 6;
inline bool InnerFutureQueryTradeResp::has_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InnerFutureQueryTradeResp::set_has_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InnerFutureQueryTradeResp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InnerFutureQueryTradeResp::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
inline const ::std::string& InnerFutureQueryTradeResp::user_id() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryTradeResp.user_id)
  return user_id_.GetNoArena();
}
inline void InnerFutureQueryTradeResp::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryTradeResp.user_id)
}
#if LANG_CXX11
inline void InnerFutureQueryTradeResp::set_user_id(::std::string&& value) {
  set_has_user_id();
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerFutureQueryTradeResp.user_id)
}
#endif
inline void InnerFutureQueryTradeResp::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerFutureQueryTradeResp.user_id)
}
inline void InnerFutureQueryTradeResp::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerFutureQueryTradeResp.user_id)
}
inline ::std::string* InnerFutureQueryTradeResp::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerFutureQueryTradeResp.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerFutureQueryTradeResp::release_user_id() {
  // @@protoc_insertion_point(field_release:autotrade.InnerFutureQueryTradeResp.user_id)
  if (!has_user_id()) {
    return NULL;
  }
  clear_has_user_id();
  return user_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerFutureQueryTradeResp::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerFutureQueryTradeResp.user_id)
}

// optional string exchange_id = 7;
inline bool InnerFutureQueryTradeResp::has_exchange_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InnerFutureQueryTradeResp::set_has_exchange_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void InnerFutureQueryTradeResp::clear_has_exchange_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void InnerFutureQueryTradeResp::clear_exchange_id() {
  exchange_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exchange_id();
}
inline const ::std::string& InnerFutureQueryTradeResp::exchange_id() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryTradeResp.exchange_id)
  return exchange_id_.GetNoArena();
}
inline void InnerFutureQueryTradeResp::set_exchange_id(const ::std::string& value) {
  set_has_exchange_id();
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryTradeResp.exchange_id)
}
#if LANG_CXX11
inline void InnerFutureQueryTradeResp::set_exchange_id(::std::string&& value) {
  set_has_exchange_id();
  exchange_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerFutureQueryTradeResp.exchange_id)
}
#endif
inline void InnerFutureQueryTradeResp::set_exchange_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_exchange_id();
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerFutureQueryTradeResp.exchange_id)
}
inline void InnerFutureQueryTradeResp::set_exchange_id(const char* value, size_t size) {
  set_has_exchange_id();
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerFutureQueryTradeResp.exchange_id)
}
inline ::std::string* InnerFutureQueryTradeResp::mutable_exchange_id() {
  set_has_exchange_id();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerFutureQueryTradeResp.exchange_id)
  return exchange_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerFutureQueryTradeResp::release_exchange_id() {
  // @@protoc_insertion_point(field_release:autotrade.InnerFutureQueryTradeResp.exchange_id)
  if (!has_exchange_id()) {
    return NULL;
  }
  clear_has_exchange_id();
  return exchange_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerFutureQueryTradeResp::set_allocated_exchange_id(::std::string* exchange_id) {
  if (exchange_id != NULL) {
    set_has_exchange_id();
  } else {
    clear_has_exchange_id();
  }
  exchange_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerFutureQueryTradeResp.exchange_id)
}

// optional string match_id = 8;
inline bool InnerFutureQueryTradeResp::has_match_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void InnerFutureQueryTradeResp::set_has_match_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void InnerFutureQueryTradeResp::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void InnerFutureQueryTradeResp::clear_match_id() {
  match_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_match_id();
}
inline const ::std::string& InnerFutureQueryTradeResp::match_id() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryTradeResp.match_id)
  return match_id_.GetNoArena();
}
inline void InnerFutureQueryTradeResp::set_match_id(const ::std::string& value) {
  set_has_match_id();
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryTradeResp.match_id)
}
#if LANG_CXX11
inline void InnerFutureQueryTradeResp::set_match_id(::std::string&& value) {
  set_has_match_id();
  match_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerFutureQueryTradeResp.match_id)
}
#endif
inline void InnerFutureQueryTradeResp::set_match_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_match_id();
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerFutureQueryTradeResp.match_id)
}
inline void InnerFutureQueryTradeResp::set_match_id(const char* value, size_t size) {
  set_has_match_id();
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerFutureQueryTradeResp.match_id)
}
inline ::std::string* InnerFutureQueryTradeResp::mutable_match_id() {
  set_has_match_id();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerFutureQueryTradeResp.match_id)
  return match_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerFutureQueryTradeResp::release_match_id() {
  // @@protoc_insertion_point(field_release:autotrade.InnerFutureQueryTradeResp.match_id)
  if (!has_match_id()) {
    return NULL;
  }
  clear_has_match_id();
  return match_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerFutureQueryTradeResp::set_allocated_match_id(::std::string* match_id) {
  if (match_id != NULL) {
    set_has_match_id();
  } else {
    clear_has_match_id();
  }
  match_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), match_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerFutureQueryTradeResp.match_id)
}

// optional int32 bsflag = 9;
inline bool InnerFutureQueryTradeResp::has_bsflag() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void InnerFutureQueryTradeResp::set_has_bsflag() {
  _has_bits_[0] |= 0x00002000u;
}
inline void InnerFutureQueryTradeResp::clear_has_bsflag() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void InnerFutureQueryTradeResp::clear_bsflag() {
  bsflag_ = 0;
  clear_has_bsflag();
}
inline ::google::protobuf::int32 InnerFutureQueryTradeResp::bsflag() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryTradeResp.bsflag)
  return bsflag_;
}
inline void InnerFutureQueryTradeResp::set_bsflag(::google::protobuf::int32 value) {
  set_has_bsflag();
  bsflag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryTradeResp.bsflag)
}

// optional string order_sys_id = 10;
inline bool InnerFutureQueryTradeResp::has_order_sys_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void InnerFutureQueryTradeResp::set_has_order_sys_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void InnerFutureQueryTradeResp::clear_has_order_sys_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void InnerFutureQueryTradeResp::clear_order_sys_id() {
  order_sys_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_sys_id();
}
inline const ::std::string& InnerFutureQueryTradeResp::order_sys_id() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryTradeResp.order_sys_id)
  return order_sys_id_.GetNoArena();
}
inline void InnerFutureQueryTradeResp::set_order_sys_id(const ::std::string& value) {
  set_has_order_sys_id();
  order_sys_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryTradeResp.order_sys_id)
}
#if LANG_CXX11
inline void InnerFutureQueryTradeResp::set_order_sys_id(::std::string&& value) {
  set_has_order_sys_id();
  order_sys_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerFutureQueryTradeResp.order_sys_id)
}
#endif
inline void InnerFutureQueryTradeResp::set_order_sys_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_sys_id();
  order_sys_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerFutureQueryTradeResp.order_sys_id)
}
inline void InnerFutureQueryTradeResp::set_order_sys_id(const char* value, size_t size) {
  set_has_order_sys_id();
  order_sys_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerFutureQueryTradeResp.order_sys_id)
}
inline ::std::string* InnerFutureQueryTradeResp::mutable_order_sys_id() {
  set_has_order_sys_id();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerFutureQueryTradeResp.order_sys_id)
  return order_sys_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerFutureQueryTradeResp::release_order_sys_id() {
  // @@protoc_insertion_point(field_release:autotrade.InnerFutureQueryTradeResp.order_sys_id)
  if (!has_order_sys_id()) {
    return NULL;
  }
  clear_has_order_sys_id();
  return order_sys_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerFutureQueryTradeResp::set_allocated_order_sys_id(::std::string* order_sys_id) {
  if (order_sys_id != NULL) {
    set_has_order_sys_id();
  } else {
    clear_has_order_sys_id();
  }
  order_sys_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_sys_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerFutureQueryTradeResp.order_sys_id)
}

// optional string exchange_instrument_id = 11;
inline bool InnerFutureQueryTradeResp::has_exchange_instrument_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void InnerFutureQueryTradeResp::set_has_exchange_instrument_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void InnerFutureQueryTradeResp::clear_has_exchange_instrument_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void InnerFutureQueryTradeResp::clear_exchange_instrument_id() {
  exchange_instrument_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exchange_instrument_id();
}
inline const ::std::string& InnerFutureQueryTradeResp::exchange_instrument_id() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryTradeResp.exchange_instrument_id)
  return exchange_instrument_id_.GetNoArena();
}
inline void InnerFutureQueryTradeResp::set_exchange_instrument_id(const ::std::string& value) {
  set_has_exchange_instrument_id();
  exchange_instrument_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryTradeResp.exchange_instrument_id)
}
#if LANG_CXX11
inline void InnerFutureQueryTradeResp::set_exchange_instrument_id(::std::string&& value) {
  set_has_exchange_instrument_id();
  exchange_instrument_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerFutureQueryTradeResp.exchange_instrument_id)
}
#endif
inline void InnerFutureQueryTradeResp::set_exchange_instrument_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_exchange_instrument_id();
  exchange_instrument_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerFutureQueryTradeResp.exchange_instrument_id)
}
inline void InnerFutureQueryTradeResp::set_exchange_instrument_id(const char* value, size_t size) {
  set_has_exchange_instrument_id();
  exchange_instrument_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerFutureQueryTradeResp.exchange_instrument_id)
}
inline ::std::string* InnerFutureQueryTradeResp::mutable_exchange_instrument_id() {
  set_has_exchange_instrument_id();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerFutureQueryTradeResp.exchange_instrument_id)
  return exchange_instrument_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerFutureQueryTradeResp::release_exchange_instrument_id() {
  // @@protoc_insertion_point(field_release:autotrade.InnerFutureQueryTradeResp.exchange_instrument_id)
  if (!has_exchange_instrument_id()) {
    return NULL;
  }
  clear_has_exchange_instrument_id();
  return exchange_instrument_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerFutureQueryTradeResp::set_allocated_exchange_instrument_id(::std::string* exchange_instrument_id) {
  if (exchange_instrument_id != NULL) {
    set_has_exchange_instrument_id();
  } else {
    clear_has_exchange_instrument_id();
  }
  exchange_instrument_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_instrument_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerFutureQueryTradeResp.exchange_instrument_id)
}

// optional int32 kpcbj = 12;
inline bool InnerFutureQueryTradeResp::has_kpcbj() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void InnerFutureQueryTradeResp::set_has_kpcbj() {
  _has_bits_[0] |= 0x00004000u;
}
inline void InnerFutureQueryTradeResp::clear_has_kpcbj() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void InnerFutureQueryTradeResp::clear_kpcbj() {
  kpcbj_ = 0;
  clear_has_kpcbj();
}
inline ::google::protobuf::int32 InnerFutureQueryTradeResp::kpcbj() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryTradeResp.kpcbj)
  return kpcbj_;
}
inline void InnerFutureQueryTradeResp::set_kpcbj(::google::protobuf::int32 value) {
  set_has_kpcbj();
  kpcbj_ = value;
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryTradeResp.kpcbj)
}

// optional int32 hedge_flag = 13;
inline bool InnerFutureQueryTradeResp::has_hedge_flag() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void InnerFutureQueryTradeResp::set_has_hedge_flag() {
  _has_bits_[0] |= 0x00010000u;
}
inline void InnerFutureQueryTradeResp::clear_has_hedge_flag() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void InnerFutureQueryTradeResp::clear_hedge_flag() {
  hedge_flag_ = 0;
  clear_has_hedge_flag();
}
inline ::google::protobuf::int32 InnerFutureQueryTradeResp::hedge_flag() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryTradeResp.hedge_flag)
  return hedge_flag_;
}
inline void InnerFutureQueryTradeResp::set_hedge_flag(::google::protobuf::int32 value) {
  set_has_hedge_flag();
  hedge_flag_ = value;
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryTradeResp.hedge_flag)
}

// optional int64 match_price = 14;
inline bool InnerFutureQueryTradeResp::has_match_price() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void InnerFutureQueryTradeResp::set_has_match_price() {
  _has_bits_[0] |= 0x00008000u;
}
inline void InnerFutureQueryTradeResp::clear_has_match_price() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void InnerFutureQueryTradeResp::clear_match_price() {
  match_price_ = GOOGLE_LONGLONG(0);
  clear_has_match_price();
}
inline ::google::protobuf::int64 InnerFutureQueryTradeResp::match_price() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryTradeResp.match_price)
  return match_price_;
}
inline void InnerFutureQueryTradeResp::set_match_price(::google::protobuf::int64 value) {
  set_has_match_price();
  match_price_ = value;
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryTradeResp.match_price)
}

// optional int32 match_qty = 15;
inline bool InnerFutureQueryTradeResp::has_match_qty() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void InnerFutureQueryTradeResp::set_has_match_qty() {
  _has_bits_[0] |= 0x00020000u;
}
inline void InnerFutureQueryTradeResp::clear_has_match_qty() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void InnerFutureQueryTradeResp::clear_match_qty() {
  match_qty_ = 0;
  clear_has_match_qty();
}
inline ::google::protobuf::int32 InnerFutureQueryTradeResp::match_qty() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryTradeResp.match_qty)
  return match_qty_;
}
inline void InnerFutureQueryTradeResp::set_match_qty(::google::protobuf::int32 value) {
  set_has_match_qty();
  match_qty_ = value;
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryTradeResp.match_qty)
}

// optional int32 match_date = 16;
inline bool InnerFutureQueryTradeResp::has_match_date() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void InnerFutureQueryTradeResp::set_has_match_date() {
  _has_bits_[0] |= 0x00040000u;
}
inline void InnerFutureQueryTradeResp::clear_has_match_date() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void InnerFutureQueryTradeResp::clear_match_date() {
  match_date_ = 0;
  clear_has_match_date();
}
inline ::google::protobuf::int32 InnerFutureQueryTradeResp::match_date() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryTradeResp.match_date)
  return match_date_;
}
inline void InnerFutureQueryTradeResp::set_match_date(::google::protobuf::int32 value) {
  set_has_match_date();
  match_date_ = value;
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryTradeResp.match_date)
}

// optional int32 match_time = 17;
inline bool InnerFutureQueryTradeResp::has_match_time() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void InnerFutureQueryTradeResp::set_has_match_time() {
  _has_bits_[0] |= 0x00080000u;
}
inline void InnerFutureQueryTradeResp::clear_has_match_time() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void InnerFutureQueryTradeResp::clear_match_time() {
  match_time_ = 0;
  clear_has_match_time();
}
inline ::google::protobuf::int32 InnerFutureQueryTradeResp::match_time() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryTradeResp.match_time)
  return match_time_;
}
inline void InnerFutureQueryTradeResp::set_match_time(::google::protobuf::int32 value) {
  set_has_match_time();
  match_time_ = value;
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryTradeResp.match_time)
}

// optional int32 match_type = 18;
inline bool InnerFutureQueryTradeResp::has_match_type() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void InnerFutureQueryTradeResp::set_has_match_type() {
  _has_bits_[0] |= 0x00100000u;
}
inline void InnerFutureQueryTradeResp::clear_has_match_type() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void InnerFutureQueryTradeResp::clear_match_type() {
  match_type_ = 0;
  clear_has_match_type();
}
inline ::google::protobuf::int32 InnerFutureQueryTradeResp::match_type() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryTradeResp.match_type)
  return match_type_;
}
inline void InnerFutureQueryTradeResp::set_match_type(::google::protobuf::int32 value) {
  set_has_match_type();
  match_type_ = value;
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryTradeResp.match_type)
}

// optional string order_local_id = 19;
inline bool InnerFutureQueryTradeResp::has_order_local_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void InnerFutureQueryTradeResp::set_has_order_local_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void InnerFutureQueryTradeResp::clear_has_order_local_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void InnerFutureQueryTradeResp::clear_order_local_id() {
  order_local_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_local_id();
}
inline const ::std::string& InnerFutureQueryTradeResp::order_local_id() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryTradeResp.order_local_id)
  return order_local_id_.GetNoArena();
}
inline void InnerFutureQueryTradeResp::set_order_local_id(const ::std::string& value) {
  set_has_order_local_id();
  order_local_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryTradeResp.order_local_id)
}
#if LANG_CXX11
inline void InnerFutureQueryTradeResp::set_order_local_id(::std::string&& value) {
  set_has_order_local_id();
  order_local_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerFutureQueryTradeResp.order_local_id)
}
#endif
inline void InnerFutureQueryTradeResp::set_order_local_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_local_id();
  order_local_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerFutureQueryTradeResp.order_local_id)
}
inline void InnerFutureQueryTradeResp::set_order_local_id(const char* value, size_t size) {
  set_has_order_local_id();
  order_local_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerFutureQueryTradeResp.order_local_id)
}
inline ::std::string* InnerFutureQueryTradeResp::mutable_order_local_id() {
  set_has_order_local_id();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerFutureQueryTradeResp.order_local_id)
  return order_local_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerFutureQueryTradeResp::release_order_local_id() {
  // @@protoc_insertion_point(field_release:autotrade.InnerFutureQueryTradeResp.order_local_id)
  if (!has_order_local_id()) {
    return NULL;
  }
  clear_has_order_local_id();
  return order_local_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerFutureQueryTradeResp::set_allocated_order_local_id(::std::string* order_local_id) {
  if (order_local_id != NULL) {
    set_has_order_local_id();
  } else {
    clear_has_order_local_id();
  }
  order_local_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_local_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerFutureQueryTradeResp.order_local_id)
}

// optional string clearing_part_id = 20;
inline bool InnerFutureQueryTradeResp::has_clearing_part_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void InnerFutureQueryTradeResp::set_has_clearing_part_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void InnerFutureQueryTradeResp::clear_has_clearing_part_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void InnerFutureQueryTradeResp::clear_clearing_part_id() {
  clearing_part_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clearing_part_id();
}
inline const ::std::string& InnerFutureQueryTradeResp::clearing_part_id() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryTradeResp.clearing_part_id)
  return clearing_part_id_.GetNoArena();
}
inline void InnerFutureQueryTradeResp::set_clearing_part_id(const ::std::string& value) {
  set_has_clearing_part_id();
  clearing_part_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryTradeResp.clearing_part_id)
}
#if LANG_CXX11
inline void InnerFutureQueryTradeResp::set_clearing_part_id(::std::string&& value) {
  set_has_clearing_part_id();
  clearing_part_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerFutureQueryTradeResp.clearing_part_id)
}
#endif
inline void InnerFutureQueryTradeResp::set_clearing_part_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clearing_part_id();
  clearing_part_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerFutureQueryTradeResp.clearing_part_id)
}
inline void InnerFutureQueryTradeResp::set_clearing_part_id(const char* value, size_t size) {
  set_has_clearing_part_id();
  clearing_part_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerFutureQueryTradeResp.clearing_part_id)
}
inline ::std::string* InnerFutureQueryTradeResp::mutable_clearing_part_id() {
  set_has_clearing_part_id();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerFutureQueryTradeResp.clearing_part_id)
  return clearing_part_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerFutureQueryTradeResp::release_clearing_part_id() {
  // @@protoc_insertion_point(field_release:autotrade.InnerFutureQueryTradeResp.clearing_part_id)
  if (!has_clearing_part_id()) {
    return NULL;
  }
  clear_has_clearing_part_id();
  return clearing_part_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerFutureQueryTradeResp::set_allocated_clearing_part_id(::std::string* clearing_part_id) {
  if (clearing_part_id != NULL) {
    set_has_clearing_part_id();
  } else {
    clear_has_clearing_part_id();
  }
  clearing_part_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clearing_part_id);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerFutureQueryTradeResp.clearing_part_id)
}

// optional string sequence_no = 21;
inline bool InnerFutureQueryTradeResp::has_sequence_no() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void InnerFutureQueryTradeResp::set_has_sequence_no() {
  _has_bits_[0] |= 0x00000800u;
}
inline void InnerFutureQueryTradeResp::clear_has_sequence_no() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void InnerFutureQueryTradeResp::clear_sequence_no() {
  sequence_no_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sequence_no();
}
inline const ::std::string& InnerFutureQueryTradeResp::sequence_no() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryTradeResp.sequence_no)
  return sequence_no_.GetNoArena();
}
inline void InnerFutureQueryTradeResp::set_sequence_no(const ::std::string& value) {
  set_has_sequence_no();
  sequence_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryTradeResp.sequence_no)
}
#if LANG_CXX11
inline void InnerFutureQueryTradeResp::set_sequence_no(::std::string&& value) {
  set_has_sequence_no();
  sequence_no_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerFutureQueryTradeResp.sequence_no)
}
#endif
inline void InnerFutureQueryTradeResp::set_sequence_no(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sequence_no();
  sequence_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerFutureQueryTradeResp.sequence_no)
}
inline void InnerFutureQueryTradeResp::set_sequence_no(const char* value, size_t size) {
  set_has_sequence_no();
  sequence_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerFutureQueryTradeResp.sequence_no)
}
inline ::std::string* InnerFutureQueryTradeResp::mutable_sequence_no() {
  set_has_sequence_no();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerFutureQueryTradeResp.sequence_no)
  return sequence_no_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerFutureQueryTradeResp::release_sequence_no() {
  // @@protoc_insertion_point(field_release:autotrade.InnerFutureQueryTradeResp.sequence_no)
  if (!has_sequence_no()) {
    return NULL;
  }
  clear_has_sequence_no();
  return sequence_no_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerFutureQueryTradeResp::set_allocated_sequence_no(::std::string* sequence_no) {
  if (sequence_no != NULL) {
    set_has_sequence_no();
  } else {
    clear_has_sequence_no();
  }
  sequence_no_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sequence_no);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerFutureQueryTradeResp.sequence_no)
}

// optional int32 trading_day = 22;
inline bool InnerFutureQueryTradeResp::has_trading_day() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void InnerFutureQueryTradeResp::set_has_trading_day() {
  _has_bits_[0] |= 0x00200000u;
}
inline void InnerFutureQueryTradeResp::clear_has_trading_day() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void InnerFutureQueryTradeResp::clear_trading_day() {
  trading_day_ = 0;
  clear_has_trading_day();
}
inline ::google::protobuf::int32 InnerFutureQueryTradeResp::trading_day() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryTradeResp.trading_day)
  return trading_day_;
}
inline void InnerFutureQueryTradeResp::set_trading_day(::google::protobuf::int32 value) {
  set_has_trading_day();
  trading_day_ = value;
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryTradeResp.trading_day)
}

// optional int32 settlement_id = 23;
inline bool InnerFutureQueryTradeResp::has_settlement_id() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void InnerFutureQueryTradeResp::set_has_settlement_id() {
  _has_bits_[0] |= 0x00400000u;
}
inline void InnerFutureQueryTradeResp::clear_has_settlement_id() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void InnerFutureQueryTradeResp::clear_settlement_id() {
  settlement_id_ = 0;
  clear_has_settlement_id();
}
inline ::google::protobuf::int32 InnerFutureQueryTradeResp::settlement_id() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryTradeResp.settlement_id)
  return settlement_id_;
}
inline void InnerFutureQueryTradeResp::set_settlement_id(::google::protobuf::int32 value) {
  set_has_settlement_id();
  settlement_id_ = value;
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryTradeResp.settlement_id)
}

// optional int32 ret_code = 24 [default = 0];
inline bool InnerFutureQueryTradeResp::has_ret_code() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void InnerFutureQueryTradeResp::set_has_ret_code() {
  _has_bits_[0] |= 0x00800000u;
}
inline void InnerFutureQueryTradeResp::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void InnerFutureQueryTradeResp::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 InnerFutureQueryTradeResp::ret_code() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryTradeResp.ret_code)
  return ret_code_;
}
inline void InnerFutureQueryTradeResp::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryTradeResp.ret_code)
}

// optional string ret_message = 25;
inline bool InnerFutureQueryTradeResp::has_ret_message() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void InnerFutureQueryTradeResp::set_has_ret_message() {
  _has_bits_[0] |= 0x00001000u;
}
inline void InnerFutureQueryTradeResp::clear_has_ret_message() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void InnerFutureQueryTradeResp::clear_ret_message() {
  ret_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ret_message();
}
inline const ::std::string& InnerFutureQueryTradeResp::ret_message() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryTradeResp.ret_message)
  return ret_message_.GetNoArena();
}
inline void InnerFutureQueryTradeResp::set_ret_message(const ::std::string& value) {
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryTradeResp.ret_message)
}
#if LANG_CXX11
inline void InnerFutureQueryTradeResp::set_ret_message(::std::string&& value) {
  set_has_ret_message();
  ret_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autotrade.InnerFutureQueryTradeResp.ret_message)
}
#endif
inline void InnerFutureQueryTradeResp::set_ret_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autotrade.InnerFutureQueryTradeResp.ret_message)
}
inline void InnerFutureQueryTradeResp::set_ret_message(const char* value, size_t size) {
  set_has_ret_message();
  ret_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autotrade.InnerFutureQueryTradeResp.ret_message)
}
inline ::std::string* InnerFutureQueryTradeResp::mutable_ret_message() {
  set_has_ret_message();
  // @@protoc_insertion_point(field_mutable:autotrade.InnerFutureQueryTradeResp.ret_message)
  return ret_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InnerFutureQueryTradeResp::release_ret_message() {
  // @@protoc_insertion_point(field_release:autotrade.InnerFutureQueryTradeResp.ret_message)
  if (!has_ret_message()) {
    return NULL;
  }
  clear_has_ret_message();
  return ret_message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InnerFutureQueryTradeResp::set_allocated_ret_message(::std::string* ret_message) {
  if (ret_message != NULL) {
    set_has_ret_message();
  } else {
    clear_has_ret_message();
  }
  ret_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ret_message);
  // @@protoc_insertion_point(field_set_allocated:autotrade.InnerFutureQueryTradeResp.ret_message)
}

// optional bool islast = 26 [default = false];
inline bool InnerFutureQueryTradeResp::has_islast() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void InnerFutureQueryTradeResp::set_has_islast() {
  _has_bits_[0] |= 0x01000000u;
}
inline void InnerFutureQueryTradeResp::clear_has_islast() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void InnerFutureQueryTradeResp::clear_islast() {
  islast_ = false;
  clear_has_islast();
}
inline bool InnerFutureQueryTradeResp::islast() const {
  // @@protoc_insertion_point(field_get:autotrade.InnerFutureQueryTradeResp.islast)
  return islast_;
}
inline void InnerFutureQueryTradeResp::set_islast(bool value) {
  set_has_islast();
  islast_ = value;
  // @@protoc_insertion_point(field_set:autotrade.InnerFutureQueryTradeResp.islast)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace autotrade

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_protos_2fqfuture_5fprotocol_2eproto
