// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/qoption_protocol.proto

#include "protos/qoption_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_protos_2fqoption_5fprotocol_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fqoption_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OptionOrdersCreateResp_OrderList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fqoption_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OptionOrdersReqt_SingleOrder;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fqoption_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OptionOrdersResp_OrderResult;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fqoption_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OptionPosition_Position;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fqoption_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OptionQueryOrderResp_OrderDetail;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fqoption_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OptionQueryOrdersResp_OrderDetail;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fqoption_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RawOptionKnock;
}  // namespace protobuf_protos_2fqoption_5fprotocol_2eproto
namespace autotrade {
class OptionLoginReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OptionLoginReqt>
      _instance;
} _OptionLoginReqt_default_instance_;
class OptionLoginRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OptionLoginResp>
      _instance;
} _OptionLoginResp_default_instance_;
class OptionOrderReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OptionOrderReqt>
      _instance;
} _OptionOrderReqt_default_instance_;
class OptionOrderRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OptionOrderResp>
      _instance;
} _OptionOrderResp_default_instance_;
class OptionOrdersReqt_SingleOrderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OptionOrdersReqt_SingleOrder>
      _instance;
} _OptionOrdersReqt_SingleOrder_default_instance_;
class OptionOrdersReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OptionOrdersReqt>
      _instance;
} _OptionOrdersReqt_default_instance_;
class OptionOrdersResp_OrderResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OptionOrdersResp_OrderResult>
      _instance;
} _OptionOrdersResp_OrderResult_default_instance_;
class OptionOrdersRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OptionOrdersResp>
      _instance;
} _OptionOrdersResp_default_instance_;
class OptionDeleteReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OptionDeleteReqt>
      _instance;
} _OptionDeleteReqt_default_instance_;
class OptionDeleteRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OptionDeleteResp>
      _instance;
} _OptionDeleteResp_default_instance_;
class OptionDeletesReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OptionDeletesReqt>
      _instance;
} _OptionDeletesReqt_default_instance_;
class OptionDeletesRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OptionDeletesResp>
      _instance;
} _OptionDeletesResp_default_instance_;
class OptionQueryOrderReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OptionQueryOrderReqt>
      _instance;
} _OptionQueryOrderReqt_default_instance_;
class OptionQueryOrderResp_OrderDetailDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OptionQueryOrderResp_OrderDetail>
      _instance;
} _OptionQueryOrderResp_OrderDetail_default_instance_;
class OptionQueryOrderRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OptionQueryOrderResp>
      _instance;
} _OptionQueryOrderResp_default_instance_;
class OptionQueryOrdersReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OptionQueryOrdersReqt>
      _instance;
} _OptionQueryOrdersReqt_default_instance_;
class OptionQueryOrdersResp_OrderDetailDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OptionQueryOrdersResp_OrderDetail>
      _instance;
} _OptionQueryOrdersResp_OrderDetail_default_instance_;
class OptionQueryOrdersRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OptionQueryOrdersResp>
      _instance;
} _OptionQueryOrdersResp_default_instance_;
class OptionQueryCaptialReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OptionQueryCaptialReqt>
      _instance;
} _OptionQueryCaptialReqt_default_instance_;
class OptionCapitalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OptionCapital>
      _instance;
} _OptionCapital_default_instance_;
class OptionQueryPositionReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OptionQueryPositionReqt>
      _instance;
} _OptionQueryPositionReqt_default_instance_;
class OptionPosition_PositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OptionPosition_Position>
      _instance;
} _OptionPosition_Position_default_instance_;
class OptionPositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OptionPosition>
      _instance;
} _OptionPosition_default_instance_;
class OptionQueryDealDetailReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OptionQueryDealDetailReqt>
      _instance;
} _OptionQueryDealDetailReqt_default_instance_;
class OptionDealDetailDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OptionDealDetail>
      _instance;
} _OptionDealDetail_default_instance_;
class RawOptionKnockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RawOptionKnock>
      _instance;
} _RawOptionKnock_default_instance_;
class OptionOrdersCreateResp_OrderListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OptionOrdersCreateResp_OrderList>
      _instance;
} _OptionOrdersCreateResp_OrderList_default_instance_;
class OptionOrdersCreateRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OptionOrdersCreateResp>
      _instance;
} _OptionOrdersCreateResp_default_instance_;
}  // namespace autotrade
namespace protobuf_protos_2fqoption_5fprotocol_2eproto {
static void InitDefaultsOptionLoginReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_OptionLoginReqt_default_instance_;
    new (ptr) ::autotrade::OptionLoginReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::OptionLoginReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OptionLoginReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOptionLoginReqt}, {}};

static void InitDefaultsOptionLoginResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_OptionLoginResp_default_instance_;
    new (ptr) ::autotrade::OptionLoginResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::OptionLoginResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OptionLoginResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOptionLoginResp}, {}};

static void InitDefaultsOptionOrderReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::autotrade::OptionOrderReqt::_i_give_permission_to_break_this_code_default_match_condition_.DefaultConstruct();
  *::autotrade::OptionOrderReqt::_i_give_permission_to_break_this_code_default_match_condition_.get_mutable() = ::std::string("GFD", 3);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::autotrade::OptionOrderReqt::_i_give_permission_to_break_this_code_default_match_condition_.get_mutable());
  {
    void* ptr = &::autotrade::_OptionOrderReqt_default_instance_;
    new (ptr) ::autotrade::OptionOrderReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::OptionOrderReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OptionOrderReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOptionOrderReqt}, {}};

static void InitDefaultsOptionOrderResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_OptionOrderResp_default_instance_;
    new (ptr) ::autotrade::OptionOrderResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::OptionOrderResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OptionOrderResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOptionOrderResp}, {}};

static void InitDefaultsOptionOrdersReqt_SingleOrder() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_OptionOrdersReqt_SingleOrder_default_instance_;
    new (ptr) ::autotrade::OptionOrdersReqt_SingleOrder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::OptionOrdersReqt_SingleOrder::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OptionOrdersReqt_SingleOrder =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOptionOrdersReqt_SingleOrder}, {}};

static void InitDefaultsOptionOrdersReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_OptionOrdersReqt_default_instance_;
    new (ptr) ::autotrade::OptionOrdersReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::OptionOrdersReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_OptionOrdersReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOptionOrdersReqt}, {
      &protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionOrdersReqt_SingleOrder.base,}};

static void InitDefaultsOptionOrdersResp_OrderResult() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_OptionOrdersResp_OrderResult_default_instance_;
    new (ptr) ::autotrade::OptionOrdersResp_OrderResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::OptionOrdersResp_OrderResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OptionOrdersResp_OrderResult =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOptionOrdersResp_OrderResult}, {}};

static void InitDefaultsOptionOrdersResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_OptionOrdersResp_default_instance_;
    new (ptr) ::autotrade::OptionOrdersResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::OptionOrdersResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_OptionOrdersResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOptionOrdersResp}, {
      &protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionOrdersResp_OrderResult.base,}};

static void InitDefaultsOptionDeleteReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_OptionDeleteReqt_default_instance_;
    new (ptr) ::autotrade::OptionDeleteReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::OptionDeleteReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OptionDeleteReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOptionDeleteReqt}, {}};

static void InitDefaultsOptionDeleteResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_OptionDeleteResp_default_instance_;
    new (ptr) ::autotrade::OptionDeleteResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::OptionDeleteResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OptionDeleteResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOptionDeleteResp}, {}};

static void InitDefaultsOptionDeletesReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_OptionDeletesReqt_default_instance_;
    new (ptr) ::autotrade::OptionDeletesReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::OptionDeletesReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OptionDeletesReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOptionDeletesReqt}, {}};

static void InitDefaultsOptionDeletesResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_OptionDeletesResp_default_instance_;
    new (ptr) ::autotrade::OptionDeletesResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::OptionDeletesResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OptionDeletesResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOptionDeletesResp}, {}};

static void InitDefaultsOptionQueryOrderReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_OptionQueryOrderReqt_default_instance_;
    new (ptr) ::autotrade::OptionQueryOrderReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::OptionQueryOrderReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OptionQueryOrderReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOptionQueryOrderReqt}, {}};

static void InitDefaultsOptionQueryOrderResp_OrderDetail() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::autotrade::OptionQueryOrderResp_OrderDetail::_i_give_permission_to_break_this_code_default_match_condition_.DefaultConstruct();
  *::autotrade::OptionQueryOrderResp_OrderDetail::_i_give_permission_to_break_this_code_default_match_condition_.get_mutable() = ::std::string("GFD", 3);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::autotrade::OptionQueryOrderResp_OrderDetail::_i_give_permission_to_break_this_code_default_match_condition_.get_mutable());
  {
    void* ptr = &::autotrade::_OptionQueryOrderResp_OrderDetail_default_instance_;
    new (ptr) ::autotrade::OptionQueryOrderResp_OrderDetail();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::OptionQueryOrderResp_OrderDetail::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OptionQueryOrderResp_OrderDetail =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOptionQueryOrderResp_OrderDetail}, {}};

static void InitDefaultsOptionQueryOrderResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_OptionQueryOrderResp_default_instance_;
    new (ptr) ::autotrade::OptionQueryOrderResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::OptionQueryOrderResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_OptionQueryOrderResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOptionQueryOrderResp}, {
      &protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionQueryOrderResp_OrderDetail.base,}};

static void InitDefaultsOptionQueryOrdersReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_OptionQueryOrdersReqt_default_instance_;
    new (ptr) ::autotrade::OptionQueryOrdersReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::OptionQueryOrdersReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OptionQueryOrdersReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOptionQueryOrdersReqt}, {}};

static void InitDefaultsOptionQueryOrdersResp_OrderDetail() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::autotrade::OptionQueryOrdersResp_OrderDetail::_i_give_permission_to_break_this_code_default_match_condition_.DefaultConstruct();
  *::autotrade::OptionQueryOrdersResp_OrderDetail::_i_give_permission_to_break_this_code_default_match_condition_.get_mutable() = ::std::string("GFD", 3);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::autotrade::OptionQueryOrdersResp_OrderDetail::_i_give_permission_to_break_this_code_default_match_condition_.get_mutable());
  {
    void* ptr = &::autotrade::_OptionQueryOrdersResp_OrderDetail_default_instance_;
    new (ptr) ::autotrade::OptionQueryOrdersResp_OrderDetail();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::OptionQueryOrdersResp_OrderDetail::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OptionQueryOrdersResp_OrderDetail =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOptionQueryOrdersResp_OrderDetail}, {}};

static void InitDefaultsOptionQueryOrdersResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_OptionQueryOrdersResp_default_instance_;
    new (ptr) ::autotrade::OptionQueryOrdersResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::OptionQueryOrdersResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_OptionQueryOrdersResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOptionQueryOrdersResp}, {
      &protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionQueryOrdersResp_OrderDetail.base,}};

static void InitDefaultsOptionQueryCaptialReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_OptionQueryCaptialReqt_default_instance_;
    new (ptr) ::autotrade::OptionQueryCaptialReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::OptionQueryCaptialReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OptionQueryCaptialReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOptionQueryCaptialReqt}, {}};

static void InitDefaultsOptionCapital() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_OptionCapital_default_instance_;
    new (ptr) ::autotrade::OptionCapital();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::OptionCapital::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OptionCapital =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOptionCapital}, {}};

static void InitDefaultsOptionQueryPositionReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_OptionQueryPositionReqt_default_instance_;
    new (ptr) ::autotrade::OptionQueryPositionReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::OptionQueryPositionReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OptionQueryPositionReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOptionQueryPositionReqt}, {}};

static void InitDefaultsOptionPosition_Position() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_OptionPosition_Position_default_instance_;
    new (ptr) ::autotrade::OptionPosition_Position();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::OptionPosition_Position::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OptionPosition_Position =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOptionPosition_Position}, {}};

static void InitDefaultsOptionPosition() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_OptionPosition_default_instance_;
    new (ptr) ::autotrade::OptionPosition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::OptionPosition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_OptionPosition =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOptionPosition}, {
      &protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionPosition_Position.base,}};

static void InitDefaultsOptionQueryDealDetailReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_OptionQueryDealDetailReqt_default_instance_;
    new (ptr) ::autotrade::OptionQueryDealDetailReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::OptionQueryDealDetailReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OptionQueryDealDetailReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOptionQueryDealDetailReqt}, {}};

static void InitDefaultsOptionDealDetail() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_OptionDealDetail_default_instance_;
    new (ptr) ::autotrade::OptionDealDetail();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::OptionDealDetail::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_OptionDealDetail =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOptionDealDetail}, {
      &protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_RawOptionKnock.base,}};

static void InitDefaultsRawOptionKnock() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_RawOptionKnock_default_instance_;
    new (ptr) ::autotrade::RawOptionKnock();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::RawOptionKnock::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RawOptionKnock =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRawOptionKnock}, {}};

static void InitDefaultsOptionOrdersCreateResp_OrderList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_OptionOrdersCreateResp_OrderList_default_instance_;
    new (ptr) ::autotrade::OptionOrdersCreateResp_OrderList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::OptionOrdersCreateResp_OrderList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OptionOrdersCreateResp_OrderList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOptionOrdersCreateResp_OrderList}, {}};

static void InitDefaultsOptionOrdersCreateResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_OptionOrdersCreateResp_default_instance_;
    new (ptr) ::autotrade::OptionOrdersCreateResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::OptionOrdersCreateResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_OptionOrdersCreateResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOptionOrdersCreateResp}, {
      &protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionOrdersCreateResp_OrderList.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_OptionLoginReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OptionLoginResp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OptionOrderReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OptionOrderResp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OptionOrdersReqt_SingleOrder.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OptionOrdersReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OptionOrdersResp_OrderResult.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OptionOrdersResp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OptionDeleteReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OptionDeleteResp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OptionDeletesReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OptionDeletesResp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OptionQueryOrderReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OptionQueryOrderResp_OrderDetail.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OptionQueryOrderResp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OptionQueryOrdersReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OptionQueryOrdersResp_OrderDetail.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OptionQueryOrdersResp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OptionQueryCaptialReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OptionCapital.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OptionQueryPositionReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OptionPosition_Position.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OptionPosition.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OptionQueryDealDetailReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OptionDealDetail.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RawOptionKnock.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OptionOrdersCreateResp_OrderList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OptionOrdersCreateResp.base);
}

::google::protobuf::Metadata file_level_metadata[28];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionLoginReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionLoginReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionLoginReqt, funcid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionLoginResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionLoginResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionLoginResp, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionLoginResp, fund_account_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrderReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrderReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrderReqt, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrderReqt, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrderReqt, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrderReqt, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrderReqt, qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrderReqt, bsflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrderReqt, market_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrderReqt, kpcbj_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrderReqt, order_price_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrderReqt, covered_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrderReqt, match_condition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrderReqt, order_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrderReqt, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrderReqt, order_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrderReqt, parent_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrderReqt, parent_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrderReqt, robot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrderReqt, trader_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrderReqt, request_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrderReqt, active_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrderReqt, request_date_),
  19,
  0,
  1,
  10,
  11,
  12,
  13,
  14,
  15,
  18,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  16,
  20,
  17,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrderResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrderResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrderResp, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrderResp, order_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrderResp, order_nos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrderResp, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrderResp, order_id_),
  3,
  0,
  ~0u,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersReqt_SingleOrder, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersReqt_SingleOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersReqt_SingleOrder, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersReqt_SingleOrder, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersReqt_SingleOrder, qty_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersReqt, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersReqt, order_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersReqt, bsflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersReqt, market_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersReqt, order_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersReqt, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersReqt, order_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersReqt, parent_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersReqt, parent_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersReqt, robot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersReqt, trader_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersReqt, request_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersReqt, active_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersReqt, request_date_),
  11,
  ~0u,
  7,
  8,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  9,
  12,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersResp_OrderResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersResp_OrderResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersResp_OrderResult, ret_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersResp_OrderResult, ret_msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersResp_OrderResult, orderno_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersResp, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersResp, order_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersResp, results_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersResp, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersResp, order_id_),
  3,
  0,
  ~0u,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionDeleteReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionDeleteReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionDeleteReqt, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionDeleteReqt, order_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionDeleteReqt, market_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionDeleteReqt, request_id_),
  3,
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionDeleteResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionDeleteResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionDeleteResp, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionDeleteResp, order_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionDeleteResp, request_id_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionDeletesReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionDeletesReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionDeletesReqt, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionDeletesReqt, order_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionDeletesReqt, market_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionDeletesReqt, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionDeletesReqt, order_nos_),
  3,
  0,
  2,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionDeletesResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionDeletesResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionDeletesResp, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionDeletesResp, order_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionDeletesResp, request_id_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrderReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrderReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrderReqt, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrderReqt, order_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrderReqt, query_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrderReqt, query_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrderReqt, start_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrderReqt, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrderReqt, request_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrderReqt, active_interval_),
  5,
  0,
  3,
  6,
  1,
  2,
  4,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrderResp_OrderDetail, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrderResp_OrderDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrderResp_OrderDetail, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrderResp_OrderDetail, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrderResp_OrderDetail, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrderResp_OrderDetail, qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrderResp_OrderDetail, bsflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrderResp_OrderDetail, market_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrderResp_OrderDetail, policy_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrderResp_OrderDetail, index_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrderResp_OrderDetail, kpcbj_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrderResp_OrderDetail, order_price_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrderResp_OrderDetail, covered_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrderResp_OrderDetail, match_condition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrderResp_OrderDetail, trader_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrderResp_OrderDetail, orderno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrderResp_OrderDetail, order_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrderResp_OrderDetail, match_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrderResp_OrderDetail, match_amt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrderResp_OrderDetail, match_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrderResp_OrderDetail, cancel_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrderResp_OrderDetail, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrderResp_OrderDetail, info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrderResp_OrderDetail, order_id_),
  0,
  1,
  9,
  10,
  11,
  12,
  2,
  3,
  13,
  14,
  15,
  4,
  5,
  6,
  16,
  17,
  18,
  19,
  20,
  21,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrderResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrderResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrderResp, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrderResp, detail_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrderResp, last_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrderResp, request_id_),
  2,
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrdersReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrdersReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrdersReqt, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrdersReqt, order_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrdersReqt, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrdersReqt, request_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrdersReqt, active_interval_),
  3,
  0,
  1,
  2,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrdersResp_OrderDetail, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrdersResp_OrderDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrdersResp_OrderDetail, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrdersResp_OrderDetail, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrdersResp_OrderDetail, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrdersResp_OrderDetail, qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrdersResp_OrderDetail, bsflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrdersResp_OrderDetail, market_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrdersResp_OrderDetail, policy_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrdersResp_OrderDetail, index_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrdersResp_OrderDetail, kpcbj_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrdersResp_OrderDetail, order_price_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrdersResp_OrderDetail, covered_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrdersResp_OrderDetail, match_condition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrdersResp_OrderDetail, trader_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrdersResp_OrderDetail, orderno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrdersResp_OrderDetail, order_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrdersResp_OrderDetail, match_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrdersResp_OrderDetail, match_amt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrdersResp_OrderDetail, match_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrdersResp_OrderDetail, cancel_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrdersResp_OrderDetail, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrdersResp_OrderDetail, info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrdersResp_OrderDetail, order_id_),
  0,
  1,
  9,
  10,
  11,
  12,
  2,
  3,
  13,
  14,
  15,
  4,
  5,
  6,
  16,
  17,
  18,
  19,
  20,
  21,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrdersResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrdersResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrdersResp, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrdersResp, detail_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryOrdersResp, request_id_),
  1,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryCaptialReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryCaptialReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryCaptialReqt, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryCaptialReqt, moneytype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryCaptialReqt, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryCaptialReqt, request_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryCaptialReqt, active_interval_),
  3,
  0,
  1,
  2,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionCapital, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionCapital, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionCapital, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionCapital, moneytype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionCapital, fund_bal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionCapital, fund_ava_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionCapital, market_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionCapital, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionCapital, deposit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionCapital, equity_),
  7,
  0,
  2,
  3,
  4,
  1,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryPositionReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryPositionReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryPositionReqt, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryPositionReqt, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryPositionReqt, market_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryPositionReqt, query_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryPositionReqt, query_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryPositionReqt, start_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryPositionReqt, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryPositionReqt, request_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryPositionReqt, active_interval_),
  6,
  0,
  3,
  7,
  5,
  1,
  2,
  4,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionPosition_Position, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionPosition_Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionPosition_Position, market_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionPosition_Position, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionPosition_Position, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionPosition_Position, cp_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionPosition_Position, buy_covered_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionPosition_Position, buy_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionPosition_Position, buy_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionPosition_Position, buy_amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionPosition_Position, buy_can_close_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionPosition_Position, buy_open_freezed_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionPosition_Position, buy_close_freezed_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionPosition_Position, buy_deposit_amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionPosition_Position, sell_covered_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionPosition_Position, sell_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionPosition_Position, sell_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionPosition_Position, sell_amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionPosition_Position, sell_can_close_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionPosition_Position, sell_open_freezed_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionPosition_Position, sell_close_freezed_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionPosition_Position, sell_deposit_amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionPosition_Position, net_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionPosition_Position, start_pos_),
  3,
  0,
  1,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionPosition, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionPosition, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionPosition, positions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionPosition, last_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionPosition, request_id_),
  2,
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryDealDetailReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryDealDetailReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryDealDetailReqt, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryDealDetailReqt, orderno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryDealDetailReqt, query_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryDealDetailReqt, query_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryDealDetailReqt, start_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryDealDetailReqt, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryDealDetailReqt, request_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionQueryDealDetailReqt, active_interval_),
  5,
  0,
  6,
  4,
  1,
  2,
  3,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionDealDetail, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionDealDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionDealDetail, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionDealDetail, knocks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionDealDetail, last_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionDealDetail, request_id_),
  2,
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawOptionKnock, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawOptionKnock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawOptionKnock, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawOptionKnock, stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawOptionKnock, order_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawOptionKnock, orderno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawOptionKnock, market_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawOptionKnock, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawOptionKnock, order_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawOptionKnock, match_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawOptionKnock, order_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawOptionKnock, bsflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawOptionKnock, open_close_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawOptionKnock, match_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawOptionKnock, clear_amt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawOptionKnock, match_amt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawOptionKnock, match_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawOptionKnock, order_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawOptionKnock, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawOptionKnock, stock_account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawOptionKnock, oppo_account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawOptionKnock, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawOptionKnock, info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawOptionKnock, start_pos_),
  21,
  9,
  0,
  1,
  11,
  2,
  10,
  13,
  12,
  15,
  14,
  16,
  17,
  18,
  19,
  20,
  3,
  4,
  5,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersCreateResp_OrderList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersCreateResp_OrderList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersCreateResp_OrderList, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersCreateResp_OrderList, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersCreateResp_OrderList, qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersCreateResp_OrderList, orderno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersCreateResp_OrderList, open_close_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersCreateResp_OrderList, ret_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersCreateResp_OrderList, ret_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersCreateResp_OrderList, name_),
  0,
  4,
  5,
  1,
  7,
  6,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersCreateResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersCreateResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersCreateResp, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersCreateResp, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersCreateResp, order_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersCreateResp, order_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersCreateResp, trader_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersCreateResp, robot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersCreateResp, data_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersCreateResp, data_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersCreateResp, fund_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersCreateResp, market_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersCreateResp, bsflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersCreateResp, order_price_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersCreateResp, covered_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersCreateResp, match_condition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersCreateResp, order_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OptionOrdersCreateResp, account_name_),
  14,
  0,
  1,
  2,
  3,
  4,
  8,
  9,
  5,
  10,
  11,
  12,
  13,
  6,
  ~0u,
  7,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::autotrade::OptionLoginReqt)},
  { 7, 14, sizeof(::autotrade::OptionLoginResp)},
  { 16, 42, sizeof(::autotrade::OptionOrderReqt)},
  { 63, 73, sizeof(::autotrade::OptionOrderResp)},
  { 78, 86, sizeof(::autotrade::OptionOrdersReqt_SingleOrder)},
  { 89, 108, sizeof(::autotrade::OptionOrdersReqt)},
  { 122, 130, sizeof(::autotrade::OptionOrdersResp_OrderResult)},
  { 133, 143, sizeof(::autotrade::OptionOrdersResp)},
  { 148, 157, sizeof(::autotrade::OptionDeleteReqt)},
  { 161, 169, sizeof(::autotrade::OptionDeleteResp)},
  { 172, 182, sizeof(::autotrade::OptionDeletesReqt)},
  { 187, 195, sizeof(::autotrade::OptionDeletesResp)},
  { 198, 211, sizeof(::autotrade::OptionQueryOrderReqt)},
  { 219, 246, sizeof(::autotrade::OptionQueryOrderResp_OrderDetail)},
  { 268, 277, sizeof(::autotrade::OptionQueryOrderResp)},
  { 281, 291, sizeof(::autotrade::OptionQueryOrdersReqt)},
  { 296, 323, sizeof(::autotrade::OptionQueryOrdersResp_OrderDetail)},
  { 345, 353, sizeof(::autotrade::OptionQueryOrdersResp)},
  { 356, 366, sizeof(::autotrade::OptionQueryCaptialReqt)},
  { 371, 384, sizeof(::autotrade::OptionCapital)},
  { 392, 406, sizeof(::autotrade::OptionQueryPositionReqt)},
  { 415, 442, sizeof(::autotrade::OptionPosition_Position)},
  { 464, 473, sizeof(::autotrade::OptionPosition)},
  { 477, 490, sizeof(::autotrade::OptionQueryDealDetailReqt)},
  { 498, 507, sizeof(::autotrade::OptionDealDetail)},
  { 511, 538, sizeof(::autotrade::RawOptionKnock)},
  { 560, 573, sizeof(::autotrade::OptionOrdersCreateResp_OrderList)},
  { 581, 602, sizeof(::autotrade::OptionOrdersCreateResp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_OptionLoginReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_OptionLoginResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_OptionOrderReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_OptionOrderResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_OptionOrdersReqt_SingleOrder_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_OptionOrdersReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_OptionOrdersResp_OrderResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_OptionOrdersResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_OptionDeleteReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_OptionDeleteResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_OptionDeletesReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_OptionDeletesResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_OptionQueryOrderReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_OptionQueryOrderResp_OrderDetail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_OptionQueryOrderResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_OptionQueryOrdersReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_OptionQueryOrdersResp_OrderDetail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_OptionQueryOrdersResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_OptionQueryCaptialReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_OptionCapital_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_OptionQueryPositionReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_OptionPosition_Position_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_OptionPosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_OptionQueryDealDetailReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_OptionDealDetail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_RawOptionKnock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_OptionOrdersCreateResp_OrderList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_OptionOrdersCreateResp_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "protos/qoption_protocol.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 28);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\035protos/qoption_protocol.proto\022\tautotra"
      "de\"+\n\017OptionLoginReqt\022\030\n\006funcid\030\001 \001(\005:\0101"
      "3000001\"A\n\017OptionLoginResp\022\030\n\006funcid\030\001 \001"
      "(\005:\01013100001\022\024\n\014fund_account\030\002 \002(\t\"\276\003\n\017O"
      "ptionOrderReqt\022\030\n\006funcid\030\001 \001(\005:\01013001001"
      "\022\014\n\004code\030\002 \002(\t\022\014\n\004name\030\003 \001(\t\022\r\n\005price\030\004 "
      "\002(\003\022\013\n\003qty\030\005 \002(\003\022\016\n\006bsflag\030\006 \002(\003\022\016\n\006mark"
      "et\030\007 \002(\003\022\r\n\005kpcbj\030\010 \001(\005\022\033\n\020order_price_t"
      "ype\030\t \001(\005:\0010\022\027\n\014covered_flag\030\n \001(\005:\0010\022\034\n"
      "\017match_condition\030\013 \001(\t:\003GFD\022\020\n\010order_id\030"
      "\014 \002(\t\022\022\n\nrequest_id\030\r \001(\t\022\022\n\norder_type\030"
      "\016 \001(\t\022\021\n\tparent_id\030\017 \001(\t\022\023\n\013parent_type\030"
      "\020 \001(\t\022\020\n\010robot_id\030\021 \001(\t\022\021\n\ttrader_id\030\022 \001"
      "(\t\022\027\n\014request_time\030\023 \001(\003:\0010\022\035\n\017active_in"
      "terval\030\024 \001(\003:\0041000\022\027\n\014request_date\030\025 \001(\003"
      ":\0010\"y\n\017OptionOrderResp\022\030\n\006funcid\030\001 \001(\005:\010"
      "13101001\022\023\n\013order_group\030\002 \002(\t\022\021\n\torder_n"
      "os\030\003 \003(\t\022\022\n\nrequest_id\030\004 \001(\t\022\020\n\010order_id"
      "\030\005 \002(\t\"\232\003\n\020OptionOrdersReqt\022\030\n\006funcid\030\001 "
      "\001(\005:\01013001002\022;\n\norder_list\030\002 \003(\0132\'.auto"
      "trade.OptionOrdersReqt.SingleOrder\022\016\n\006bs"
      "flag\030\003 \002(\003\022\016\n\006market\030\004 \002(\003\022\020\n\010order_id\030\005"
      " \002(\t\022\022\n\nrequest_id\030\006 \001(\t\022\022\n\norder_type\030\007"
      " \001(\t\022\021\n\tparent_id\030\010 \001(\t\022\023\n\013parent_type\030\t"
      " \001(\t\022\020\n\010robot_id\030\n \001(\t\022\021\n\ttrader_id\030\013 \001("
      "\t\022\027\n\014request_time\030\014 \001(\003:\0010\022\035\n\017active_int"
      "erval\030\r \001(\003:\0041000\022\027\n\014request_date\030\016 \001(\003:"
      "\0010\0327\n\013SingleOrder\022\014\n\004code\030\001 \002(\t\022\r\n\005price"
      "\030\002 \002(\003\022\013\n\003qty\030\003 \002(\003\"\344\001\n\020OptionOrdersResp"
      "\022\030\n\006funcid\030\001 \001(\005:\01013101002\022\023\n\013order_grou"
      "p\030\002 \002(\t\0228\n\007results\030\003 \003(\0132\'.autotrade.Opt"
      "ionOrdersResp.OrderResult\022\022\n\nrequest_id\030"
      "\004 \001(\t\022\020\n\010order_id\030\005 \002(\t\032A\n\013OrderResult\022\020"
      "\n\010ret_code\030\001 \002(\005\022\017\n\007ret_msg\030\002 \001(\t\022\017\n\007ord"
      "erno\030\003 \001(\t\"e\n\020OptionDeleteReqt\022\030\n\006funcid"
      "\030\001 \001(\005:\01013001004\022\023\n\013order_group\030\002 \002(\t\022\016\n"
      "\006market\030\003 \002(\r\022\022\n\nrequest_id\030\004 \001(\t\"U\n\020Opt"
      "ionDeleteResp\022\030\n\006funcid\030\001 \001(\005:\01013101004\022"
      "\023\n\013order_group\030\002 \001(\t\022\022\n\nrequest_id\030\003 \001(\t"
      "\"y\n\021OptionDeletesReqt\022\030\n\006funcid\030\001 \001(\005:\0101"
      "3001005\022\023\n\013order_group\030\002 \002(\t\022\016\n\006market\030\003"
      " \002(\r\022\022\n\nrequest_id\030\004 \001(\t\022\021\n\torder_nos\030\005 "
      "\003(\t\"V\n\021OptionDeletesResp\022\030\n\006funcid\030\001 \001(\005"
      ":\01013101005\022\023\n\013order_group\030\002 \001(\t\022\022\n\nreque"
      "st_id\030\003 \001(\t\"\300\003\n\024OptionQueryOrderReqt\022\030\n\006"
      "funcid\030\001 \001(\005:\01013002002\022\025\n\013order_group\030\002 "
      "\001(\t:\000\022H\n\nquery_type\030\003 \001(\0162).autotrade.Op"
      "tionQueryOrderReqt.QueryType:\tType_ONCE\022"
      "M\n\nquery_flag\030\004 \001(\0162).autotrade.OptionQu"
      "eryOrderReqt.QueryFlag:\016Type_NO_DELETE\022\023"
      "\n\tstart_pos\030\005 \001(\t:\000\022\022\n\nrequest_id\030\006 \001(\t\022"
      "\027\n\014request_time\030\n \001(\003:\0010\022\035\n\017active_inter"
      "val\030\013 \001(\003:\0041000\"7\n\tQueryType\022\r\n\tType_ONC"
      "E\020\000\022\r\n\tType_MORE\020\001\022\014\n\010Type_ALL\020\002\"D\n\tQuer"
      "yFlag\022\022\n\016Type_Query_ALL\020\000\022\022\n\016Type_NO_DEL"
      "ETE\020\001\022\017\n\013Type_DELETE\020\002\"\276\004\n\024OptionQueryOr"
      "derResp\022\030\n\006funcid\030\001 \001(\005:\01013102002\022@\n\013det"
      "ail_list\030\002 \003(\0132+.autotrade.OptionQueryOr"
      "derResp.OrderDetail\022\020\n\010last_pos\030\003 \001(\t\022\022\n"
      "\nrequest_id\030\004 \001(\t\032\243\003\n\013OrderDetail\022\014\n\004cod"
      "e\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\r\n\005price\030\003 \001(\001\022\013\n\003"
      "qty\030\004 \001(\003\022\016\n\006bsflag\030\005 \001(\003\022\016\n\006market\030\006 \001("
      "\003\022\021\n\tpolicy_id\030\007 \001(\t\022\020\n\010index_id\030\010 \001(\t\022\r"
      "\n\005kpcbj\030\t \001(\005\022\033\n\020order_price_type\030\n \001(\005:"
      "\0010\022\027\n\014covered_flag\030\013 \001(\005:\0010\022\034\n\017match_con"
      "dition\030\014 \001(\t:\003GFD\022\021\n\ttrader_id\030\r \001(\t\022\017\n\007"
      "orderno\030\016 \001(\t\022\022\n\norder_time\030\017 \001(\r\022\021\n\tmat"
      "ch_qty\030\020 \001(\003\022\021\n\tmatch_amt\030\021 \001(\001\022\023\n\013match"
      "_price\030\022 \001(\001\022\022\n\ncancel_qty\030\023 \001(\003\022\r\n\005stat"
      "e\030\024 \001(\005\022\014\n\004info\030\025 \001(\t\022\020\n\010order_id\030\026 \001(\t\""
      "\224\001\n\025OptionQueryOrdersReqt\022\030\n\006funcid\030\001 \001("
      "\005:\01013002003\022\025\n\013order_group\030\002 \001(\t:\000\022\022\n\nre"
      "quest_id\030\003 \001(\t\022\027\n\014request_time\030\004 \001(\003:\0010\022"
      "\035\n\017active_interval\030\005 \001(\003:\0041000\"\256\004\n\025Optio"
      "nQueryOrdersResp\022\030\n\006funcid\030\001 \001(\005:\010131020"
      "03\022A\n\013detail_list\030\002 \003(\0132,.autotrade.Opti"
      "onQueryOrdersResp.OrderDetail\022\022\n\nrequest"
      "_id\030\003 \001(\t\032\243\003\n\013OrderDetail\022\014\n\004code\030\001 \001(\t\022"
      "\014\n\004name\030\002 \001(\t\022\r\n\005price\030\003 \001(\001\022\013\n\003qty\030\004 \001("
      "\003\022\016\n\006bsflag\030\005 \001(\003\022\016\n\006market\030\006 \001(\003\022\021\n\tpol"
      "icy_id\030\007 \001(\t\022\020\n\010index_id\030\010 \001(\t\022\r\n\005kpcbj\030"
      "\t \001(\005\022\033\n\020order_price_type\030\n \001(\005:\0010\022\027\n\014co"
      "vered_flag\030\013 \001(\005:\0010\022\034\n\017match_condition\030\014"
      " \001(\t:\003GFD\022\021\n\ttrader_id\030\r \001(\t\022\017\n\007orderno\030"
      "\016 \001(\t\022\022\n\norder_time\030\017 \001(\r\022\021\n\tmatch_qty\030\020"
      " \001(\003\022\021\n\tmatch_amt\030\021 \001(\001\022\023\n\013match_price\030\022"
      " \001(\001\022\022\n\ncancel_qty\030\023 \001(\003\022\r\n\005state\030\024 \001(\005\022"
      "\014\n\004info\030\025 \001(\t\022\020\n\010order_id\030\026 \001(\t\"\221\001\n\026Opti"
      "onQueryCaptialReqt\022\030\n\006funcid\030\001 \001(\005:\0101300"
      "2010\022\021\n\tmoneytype\030\002 \001(\t\022\022\n\nrequest_id\030\003 "
      "\001(\t\022\027\n\014request_time\030\004 \001(\003:\0010\022\035\n\017active_i"
      "nterval\030\005 \001(\003:\0041000\"\253\001\n\rOptionCapital\022\030\n"
      "\006funcid\030\001 \001(\005:\01013102010\022\021\n\tmoneytype\030\002 \001"
      "(\t\022\020\n\010fund_bal\030\003 \002(\001\022\020\n\010fund_ava\030\004 \002(\001\022\024"
      "\n\014market_value\030\005 \002(\001\022\022\n\nrequest_id\030\006 \001(\t"
      "\022\017\n\007deposit\030\007 \001(\001\022\016\n\006equity\030\010 \001(\001\"\322\002\n\027Op"
      "tionQueryPositionReqt\022\030\n\006funcid\030\001 \001(\005:\0101"
      "3002006\022\014\n\004code\030\002 \001(\t\022\016\n\006market\030\003 \001(\003\022\030\n"
      "\013query_count\030\004 \001(\r:\003500\022K\n\nquery_type\030\005 "
      "\001(\0162,.autotrade.OptionQueryPositionReqt."
      "QueryType:\tType_ONCE\022\023\n\tstart_pos\030\006 \001(\t:"
      "\000\022\022\n\nrequest_id\030\007 \001(\t\022\027\n\014request_time\030\010 "
      "\001(\003:\0010\022\035\n\017active_interval\030\t \001(\003:\0041000\"7\n"
      "\tQueryType\022\r\n\tType_ONCE\020\000\022\r\n\tType_MORE\020\001"
      "\022\014\n\010Type_ALL\020\002\"\232\005\n\016OptionPosition\022\030\n\006fun"
      "cid\030\001 \001(\005:\01013102006\0225\n\tpositions\030\002 \003(\0132\""
      ".autotrade.OptionPosition.Position\022\020\n\010la"
      "st_pos\030\003 \001(\t\022\022\n\nrequest_id\030\004 \001(\t\032\220\004\n\010Pos"
      "ition\022\016\n\006market\030\001 \001(\003\022\014\n\004code\030\002 \001(\t\022\014\n\004n"
      "ame\030\003 \001(\t\022\017\n\007cp_flag\030\004 \001(\003\022\023\n\013buy_covere"
      "d\030\005 \001(\003\022\022\n\nbuy_volume\030\006 \001(\003\022\021\n\tbuy_price"
      "\030\007 \001(\001\022\022\n\nbuy_amount\030\010 \001(\001\022\034\n\024buy_can_cl"
      "ose_volume\030\t \001(\003\022\037\n\027buy_open_freezed_vol"
      "ume\030\n \001(\003\022 \n\030buy_close_freezed_volume\030\013 "
      "\001(\003\022\032\n\022buy_deposit_amount\030\014 \001(\001\022\024\n\014sell_"
      "covered\030\r \001(\003\022\023\n\013sell_volume\030\016 \001(\003\022\022\n\nse"
      "ll_price\030\017 \001(\001\022\023\n\013sell_amount\030\020 \001(\001\022\035\n\025s"
      "ell_can_close_volume\030\021 \001(\003\022 \n\030sell_open_"
      "freezed_volume\030\022 \001(\003\022!\n\031sell_close_freez"
      "ed_volume\030\023 \001(\003\022\033\n\023sell_deposit_amount\030\024"
      " \001(\001\022\022\n\nnet_volume\030\025 \001(\003\022\021\n\tstart_pos\030\026 "
      "\001(\t\"\313\002\n\031OptionQueryDealDetailReqt\022\030\n\006fun"
      "cid\030\001 \001(\005:\01013002004\022\021\n\007orderno\030\002 \001(\t:\000\022\030"
      "\n\013query_count\030\003 \001(\r:\003500\022M\n\nquery_type\030\004"
      " \001(\0162..autotrade.OptionQueryDealDetailRe"
      "qt.QueryType:\tType_ONCE\022\023\n\tstart_pos\030\005 \001"
      "(\t:\000\022\022\n\nrequest_id\030\006 \001(\t\022\027\n\014request_time"
      "\030\007 \001(\003:\0010\022\035\n\017active_interval\030\010 \001(\003:\0041000"
      "\"7\n\tQueryType\022\r\n\tType_ONCE\020\000\022\r\n\tType_MOR"
      "E\020\001\022\014\n\010Type_ALL\020\002\"}\n\020OptionDealDetail\022\030\n"
      "\006funcid\030\001 \001(\005:\01013102004\022)\n\006knocks\030\002 \003(\0132"
      "\031.autotrade.RawOptionKnock\022\020\n\010last_pos\030\003"
      " \001(\t\022\022\n\nrequest_id\030\004 \001(\t\"\262\003\n\016RawOptionKn"
      "ock\022\030\n\006funcid\030\001 \001(\005:\01013003001\022\r\n\005stamp\030\002"
      " \002(\004\022\023\n\013order_group\030\003 \001(\t\022\017\n\007orderno\030\004 \002"
      "(\t\022\016\n\006market\030\005 \001(\r\022\014\n\004code\030\006 \002(\t\022\023\n\013orde"
      "r_price\030\007 \001(\003\022\021\n\tmatch_qty\030\010 \001(\003\022\021\n\torde"
      "r_qty\030\t \001(\r\022\016\n\006bsflag\030\n \001(\r\022\027\n\017open_clos"
      "e_flag\030\013 \001(\003\022\022\n\nmatch_type\030\014 \001(\005\022\021\n\tclea"
      "r_amt\030\r \001(\001\022\021\n\tmatch_amt\030\016 \001(\001\022\023\n\013match_"
      "price\030\017 \001(\003\022\022\n\norder_type\030\020 \001(\005\022\020\n\010match"
      "_id\030\021 \002(\t\022\025\n\rstock_account\030\022 \001(\t\022\024\n\014oppo"
      "_account\030\023 \001(\t\022\014\n\004name\030\024 \001(\t\022\014\n\004info\030\025 \001"
      "(\t\022\021\n\tstart_pos\030\026 \001(\t\"\252\004\n\026OptionOrdersCr"
      "eateResp\022\030\n\006funcid\030\001 \001(\005:\01013101014\022\022\n\nre"
      "quest_id\030\002 \001(\t\022\020\n\010order_id\030\003 \002(\t\022\023\n\013orde"
      "r_group\030\004 \002(\t\022\021\n\ttrader_id\030\005 \001(\t\022\020\n\010robo"
      "t_id\030\006 \001(\t\022\021\n\tdata_date\030\007 \001(\r\022\021\n\tdata_ti"
      "me\030\010 \001(\r\022\017\n\007fund_id\030\t \001(\t\022\016\n\006market\030\n \001("
      "\003\022\016\n\006bsflag\030\013 \001(\003\022\033\n\020order_price_type\030\014 "
      "\001(\005:\0010\022\027\n\014covered_flag\030\r \001(\005:\0010\022\031\n\017match"
      "_condition\030\016 \001(\t:\000\022\?\n\norder_list\030\017 \003(\0132+"
      ".autotrade.OptionOrdersCreateResp.OrderL"
      "ist\022\026\n\014account_name\030\020 \001(\t:\000\032\224\001\n\tOrderLis"
      "t\022\014\n\004code\030\001 \002(\t\022\r\n\005price\030\002 \002(\003\022\013\n\003qty\030\003 "
      "\002(\r\022\017\n\007orderno\030\004 \001(\t\022\027\n\017open_close_flag\030"
      "\005 \001(\003\022\020\n\010ret_code\030\006 \001(\005\022\023\n\013ret_message\030\007"
      " \001(\t\022\014\n\004name\030\010 \001(\tB\002H\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 6302);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protos/qoption_protocol.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_protos_2fqoption_5fprotocol_2eproto
namespace autotrade {
const ::google::protobuf::EnumDescriptor* OptionQueryOrderReqt_QueryType_descriptor() {
  protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_enum_descriptors[0];
}
bool OptionQueryOrderReqt_QueryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OptionQueryOrderReqt_QueryType OptionQueryOrderReqt::Type_ONCE;
const OptionQueryOrderReqt_QueryType OptionQueryOrderReqt::Type_MORE;
const OptionQueryOrderReqt_QueryType OptionQueryOrderReqt::Type_ALL;
const OptionQueryOrderReqt_QueryType OptionQueryOrderReqt::QueryType_MIN;
const OptionQueryOrderReqt_QueryType OptionQueryOrderReqt::QueryType_MAX;
const int OptionQueryOrderReqt::QueryType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* OptionQueryOrderReqt_QueryFlag_descriptor() {
  protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_enum_descriptors[1];
}
bool OptionQueryOrderReqt_QueryFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OptionQueryOrderReqt_QueryFlag OptionQueryOrderReqt::Type_Query_ALL;
const OptionQueryOrderReqt_QueryFlag OptionQueryOrderReqt::Type_NO_DELETE;
const OptionQueryOrderReqt_QueryFlag OptionQueryOrderReqt::Type_DELETE;
const OptionQueryOrderReqt_QueryFlag OptionQueryOrderReqt::QueryFlag_MIN;
const OptionQueryOrderReqt_QueryFlag OptionQueryOrderReqt::QueryFlag_MAX;
const int OptionQueryOrderReqt::QueryFlag_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* OptionQueryPositionReqt_QueryType_descriptor() {
  protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_enum_descriptors[2];
}
bool OptionQueryPositionReqt_QueryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OptionQueryPositionReqt_QueryType OptionQueryPositionReqt::Type_ONCE;
const OptionQueryPositionReqt_QueryType OptionQueryPositionReqt::Type_MORE;
const OptionQueryPositionReqt_QueryType OptionQueryPositionReqt::Type_ALL;
const OptionQueryPositionReqt_QueryType OptionQueryPositionReqt::QueryType_MIN;
const OptionQueryPositionReqt_QueryType OptionQueryPositionReqt::QueryType_MAX;
const int OptionQueryPositionReqt::QueryType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* OptionQueryDealDetailReqt_QueryType_descriptor() {
  protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_enum_descriptors[3];
}
bool OptionQueryDealDetailReqt_QueryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OptionQueryDealDetailReqt_QueryType OptionQueryDealDetailReqt::Type_ONCE;
const OptionQueryDealDetailReqt_QueryType OptionQueryDealDetailReqt::Type_MORE;
const OptionQueryDealDetailReqt_QueryType OptionQueryDealDetailReqt::Type_ALL;
const OptionQueryDealDetailReqt_QueryType OptionQueryDealDetailReqt::QueryType_MIN;
const OptionQueryDealDetailReqt_QueryType OptionQueryDealDetailReqt::QueryType_MAX;
const int OptionQueryDealDetailReqt::QueryType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void OptionLoginReqt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionLoginReqt::kFuncidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionLoginReqt::OptionLoginReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionLoginReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.OptionLoginReqt)
}
OptionLoginReqt::OptionLoginReqt(const OptionLoginReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:autotrade.OptionLoginReqt)
}

void OptionLoginReqt::SharedCtor() {
  funcid_ = 13000001;
}

OptionLoginReqt::~OptionLoginReqt() {
  // @@protoc_insertion_point(destructor:autotrade.OptionLoginReqt)
  SharedDtor();
}

void OptionLoginReqt::SharedDtor() {
}

void OptionLoginReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OptionLoginReqt::descriptor() {
  ::protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OptionLoginReqt& OptionLoginReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionLoginReqt.base);
  return *internal_default_instance();
}


void OptionLoginReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.OptionLoginReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  funcid_ = 13000001;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OptionLoginReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.OptionLoginReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 13000001];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.OptionLoginReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.OptionLoginReqt)
  return false;
#undef DO_
}

void OptionLoginReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.OptionLoginReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13000001];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.OptionLoginReqt)
}

::google::protobuf::uint8* OptionLoginReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.OptionLoginReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13000001];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.OptionLoginReqt)
  return target;
}

size_t OptionLoginReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.OptionLoginReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 funcid = 1 [default = 13000001];
  if (has_funcid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->funcid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionLoginReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.OptionLoginReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionLoginReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionLoginReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.OptionLoginReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.OptionLoginReqt)
    MergeFrom(*source);
  }
}

void OptionLoginReqt::MergeFrom(const OptionLoginReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.OptionLoginReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_funcid()) {
    set_funcid(from.funcid());
  }
}

void OptionLoginReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.OptionLoginReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionLoginReqt::CopyFrom(const OptionLoginReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.OptionLoginReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionLoginReqt::IsInitialized() const {
  return true;
}

void OptionLoginReqt::Swap(OptionLoginReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionLoginReqt::InternalSwap(OptionLoginReqt* other) {
  using std::swap;
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OptionLoginReqt::GetMetadata() const {
  protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OptionLoginResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionLoginResp::kFuncidFieldNumber;
const int OptionLoginResp::kFundAccountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionLoginResp::OptionLoginResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionLoginResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.OptionLoginResp)
}
OptionLoginResp::OptionLoginResp(const OptionLoginResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fund_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fund_account()) {
    fund_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fund_account_);
  }
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:autotrade.OptionLoginResp)
}

void OptionLoginResp::SharedCtor() {
  fund_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  funcid_ = 13100001;
}

OptionLoginResp::~OptionLoginResp() {
  // @@protoc_insertion_point(destructor:autotrade.OptionLoginResp)
  SharedDtor();
}

void OptionLoginResp::SharedDtor() {
  fund_account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OptionLoginResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OptionLoginResp::descriptor() {
  ::protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OptionLoginResp& OptionLoginResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionLoginResp.base);
  return *internal_default_instance();
}


void OptionLoginResp::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.OptionLoginResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      fund_account_.ClearNonDefaultToEmptyNoArena();
    }
    funcid_ = 13100001;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OptionLoginResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.OptionLoginResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 13100001];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string fund_account = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fund_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fund_account().data(), static_cast<int>(this->fund_account().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionLoginResp.fund_account");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.OptionLoginResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.OptionLoginResp)
  return false;
#undef DO_
}

void OptionLoginResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.OptionLoginResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13100001];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // required string fund_account = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fund_account().data(), static_cast<int>(this->fund_account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionLoginResp.fund_account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fund_account(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.OptionLoginResp)
}

::google::protobuf::uint8* OptionLoginResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.OptionLoginResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13100001];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // required string fund_account = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fund_account().data(), static_cast<int>(this->fund_account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionLoginResp.fund_account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fund_account(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.OptionLoginResp)
  return target;
}

size_t OptionLoginResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.OptionLoginResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string fund_account = 2;
  if (has_fund_account()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fund_account());
  }
  // optional int32 funcid = 1 [default = 13100001];
  if (has_funcid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->funcid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionLoginResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.OptionLoginResp)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionLoginResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionLoginResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.OptionLoginResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.OptionLoginResp)
    MergeFrom(*source);
  }
}

void OptionLoginResp::MergeFrom(const OptionLoginResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.OptionLoginResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_fund_account();
      fund_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fund_account_);
    }
    if (cached_has_bits & 0x00000002u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OptionLoginResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.OptionLoginResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionLoginResp::CopyFrom(const OptionLoginResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.OptionLoginResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionLoginResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void OptionLoginResp::Swap(OptionLoginResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionLoginResp::InternalSwap(OptionLoginResp* other) {
  using std::swap;
  fund_account_.Swap(&other->fund_account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OptionLoginResp::GetMetadata() const {
  protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OptionOrderReqt::InitAsDefaultInstance() {
}
::google::protobuf::internal::ExplicitlyConstructed<::std::string> OptionOrderReqt::_i_give_permission_to_break_this_code_default_match_condition_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionOrderReqt::kFuncidFieldNumber;
const int OptionOrderReqt::kCodeFieldNumber;
const int OptionOrderReqt::kNameFieldNumber;
const int OptionOrderReqt::kPriceFieldNumber;
const int OptionOrderReqt::kQtyFieldNumber;
const int OptionOrderReqt::kBsflagFieldNumber;
const int OptionOrderReqt::kMarketFieldNumber;
const int OptionOrderReqt::kKpcbjFieldNumber;
const int OptionOrderReqt::kOrderPriceTypeFieldNumber;
const int OptionOrderReqt::kCoveredFlagFieldNumber;
const int OptionOrderReqt::kMatchConditionFieldNumber;
const int OptionOrderReqt::kOrderIdFieldNumber;
const int OptionOrderReqt::kRequestIdFieldNumber;
const int OptionOrderReqt::kOrderTypeFieldNumber;
const int OptionOrderReqt::kParentIdFieldNumber;
const int OptionOrderReqt::kParentTypeFieldNumber;
const int OptionOrderReqt::kRobotIdFieldNumber;
const int OptionOrderReqt::kTraderIdFieldNumber;
const int OptionOrderReqt::kRequestTimeFieldNumber;
const int OptionOrderReqt::kActiveIntervalFieldNumber;
const int OptionOrderReqt::kRequestDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionOrderReqt::OptionOrderReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionOrderReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.OptionOrderReqt)
}
OptionOrderReqt::OptionOrderReqt(const OptionOrderReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  match_condition_.UnsafeSetDefault(&::autotrade::OptionOrderReqt::_i_give_permission_to_break_this_code_default_match_condition_.get());
  if (from.has_match_condition()) {
    match_condition_.AssignWithDefault(&::autotrade::OptionOrderReqt::_i_give_permission_to_break_this_code_default_match_condition_.get(), from.match_condition_);
  }
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_id()) {
    order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  order_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_type()) {
    order_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_type_);
  }
  parent_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_parent_id()) {
    parent_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_id_);
  }
  parent_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_parent_type()) {
    parent_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_type_);
  }
  robot_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_robot_id()) {
    robot_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robot_id_);
  }
  trader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trader_id()) {
    trader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trader_id_);
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_interval_) -
    reinterpret_cast<char*>(&price_)) + sizeof(active_interval_));
  // @@protoc_insertion_point(copy_constructor:autotrade.OptionOrderReqt)
}

void OptionOrderReqt::SharedCtor() {
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  match_condition_.UnsafeSetDefault(&::autotrade::OptionOrderReqt::_i_give_permission_to_break_this_code_default_match_condition_.get());
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robot_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&covered_flag_) -
      reinterpret_cast<char*>(&price_)) + sizeof(covered_flag_));
  funcid_ = 13001001;
  active_interval_ = GOOGLE_LONGLONG(1000);
}

OptionOrderReqt::~OptionOrderReqt() {
  // @@protoc_insertion_point(destructor:autotrade.OptionOrderReqt)
  SharedDtor();
}

void OptionOrderReqt::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  match_condition_.DestroyNoArena(&::autotrade::OptionOrderReqt::_i_give_permission_to_break_this_code_default_match_condition_.get());
  order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robot_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trader_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OptionOrderReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OptionOrderReqt::descriptor() {
  ::protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OptionOrderReqt& OptionOrderReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionOrderReqt.base);
  return *internal_default_instance();
}


void OptionOrderReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.OptionOrderReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      match_condition_.UnsafeMutablePointer()->assign(*&::autotrade::OptionOrderReqt::_i_give_permission_to_break_this_code_default_match_condition_.get());
    }
    if (cached_has_bits & 0x00000008u) {
      order_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      order_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      parent_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      parent_type_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      robot_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000200u) {
      trader_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 64512u) {
    ::memset(&price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&order_price_type_) -
        reinterpret_cast<char*>(&price_)) + sizeof(order_price_type_));
  }
  if (cached_has_bits & 2031616u) {
    ::memset(&request_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&covered_flag_) -
        reinterpret_cast<char*>(&request_time_)) + sizeof(covered_flag_));
    funcid_ = 13001001;
    active_interval_ = GOOGLE_LONGLONG(1000);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OptionOrderReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.OptionOrderReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 13001001];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionOrderReqt.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionOrderReqt.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 price = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 qty = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 bsflag = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_bsflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bsflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 market = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_market();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &market_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 kpcbj = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_kpcbj();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kpcbj_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 order_price_type = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_order_price_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_price_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 covered_flag = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_covered_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &covered_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string match_condition = 11 [default = "GFD"];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_match_condition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->match_condition().data(), static_cast<int>(this->match_condition().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionOrderReqt.match_condition");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string order_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_id().data(), static_cast<int>(this->order_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionOrderReqt.order_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionOrderReqt.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_type = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_type().data(), static_cast<int>(this->order_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionOrderReqt.order_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string parent_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parent_id().data(), static_cast<int>(this->parent_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionOrderReqt.parent_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string parent_type = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parent_type().data(), static_cast<int>(this->parent_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionOrderReqt.parent_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string robot_id = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robot_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->robot_id().data(), static_cast<int>(this->robot_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionOrderReqt.robot_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string trader_id = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trader_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trader_id().data(), static_cast<int>(this->trader_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionOrderReqt.trader_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 request_time = 19 [default = 0];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_request_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 active_interval = 20 [default = 1000];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_active_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &active_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 request_date = 21 [default = 0];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_request_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.OptionOrderReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.OptionOrderReqt)
  return false;
#undef DO_
}

void OptionOrderReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.OptionOrderReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13001001];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // required string code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrderReqt.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->code(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrderReqt.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // required int64 price = 4;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->price(), output);
  }

  // required int64 qty = 5;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->qty(), output);
  }

  // required int64 bsflag = 6;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->bsflag(), output);
  }

  // required int64 market = 7;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->market(), output);
  }

  // optional int32 kpcbj = 8;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->kpcbj(), output);
  }

  // optional int32 order_price_type = 9 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->order_price_type(), output);
  }

  // optional int32 covered_flag = 10 [default = 0];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->covered_flag(), output);
  }

  // optional string match_condition = 11 [default = "GFD"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_condition().data(), static_cast<int>(this->match_condition().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrderReqt.match_condition");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->match_condition(), output);
  }

  // required string order_id = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrderReqt.order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->order_id(), output);
  }

  // optional string request_id = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrderReqt.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->request_id(), output);
  }

  // optional string order_type = 14;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_type().data(), static_cast<int>(this->order_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrderReqt.order_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->order_type(), output);
  }

  // optional string parent_id = 15;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parent_id().data(), static_cast<int>(this->parent_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrderReqt.parent_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->parent_id(), output);
  }

  // optional string parent_type = 16;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parent_type().data(), static_cast<int>(this->parent_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrderReqt.parent_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->parent_type(), output);
  }

  // optional string robot_id = 17;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robot_id().data(), static_cast<int>(this->robot_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrderReqt.robot_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->robot_id(), output);
  }

  // optional string trader_id = 18;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trader_id().data(), static_cast<int>(this->trader_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrderReqt.trader_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->trader_id(), output);
  }

  // optional int64 request_time = 19 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->request_time(), output);
  }

  // optional int64 active_interval = 20 [default = 1000];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->active_interval(), output);
  }

  // optional int64 request_date = 21 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->request_date(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.OptionOrderReqt)
}

::google::protobuf::uint8* OptionOrderReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.OptionOrderReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13001001];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // required string code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrderReqt.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrderReqt.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required int64 price = 4;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->price(), target);
  }

  // required int64 qty = 5;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->qty(), target);
  }

  // required int64 bsflag = 6;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->bsflag(), target);
  }

  // required int64 market = 7;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->market(), target);
  }

  // optional int32 kpcbj = 8;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->kpcbj(), target);
  }

  // optional int32 order_price_type = 9 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->order_price_type(), target);
  }

  // optional int32 covered_flag = 10 [default = 0];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->covered_flag(), target);
  }

  // optional string match_condition = 11 [default = "GFD"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_condition().data(), static_cast<int>(this->match_condition().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrderReqt.match_condition");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->match_condition(), target);
  }

  // required string order_id = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrderReqt.order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->order_id(), target);
  }

  // optional string request_id = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrderReqt.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->request_id(), target);
  }

  // optional string order_type = 14;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_type().data(), static_cast<int>(this->order_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrderReqt.order_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->order_type(), target);
  }

  // optional string parent_id = 15;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parent_id().data(), static_cast<int>(this->parent_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrderReqt.parent_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->parent_id(), target);
  }

  // optional string parent_type = 16;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parent_type().data(), static_cast<int>(this->parent_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrderReqt.parent_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->parent_type(), target);
  }

  // optional string robot_id = 17;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robot_id().data(), static_cast<int>(this->robot_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrderReqt.robot_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->robot_id(), target);
  }

  // optional string trader_id = 18;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trader_id().data(), static_cast<int>(this->trader_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrderReqt.trader_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->trader_id(), target);
  }

  // optional int64 request_time = 19 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->request_time(), target);
  }

  // optional int64 active_interval = 20 [default = 1000];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->active_interval(), target);
  }

  // optional int64 request_date = 21 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->request_date(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.OptionOrderReqt)
  return target;
}

size_t OptionOrderReqt::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autotrade.OptionOrderReqt)
  size_t total_size = 0;

  if (has_code()) {
    // required string code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_order_id()) {
    // required string order_id = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_id());
  }

  if (has_price()) {
    // required int64 price = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->price());
  }

  if (has_qty()) {
    // required int64 qty = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->qty());
  }

  if (has_bsflag()) {
    // required int64 bsflag = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bsflag());
  }

  if (has_market()) {
    // required int64 market = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->market());
  }

  return total_size;
}
size_t OptionOrderReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.OptionOrderReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00003c09) ^ 0x00003c09) == 0) {  // All required fields are present.
    // required string code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required string order_id = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_id());

    // required int64 price = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->price());

    // required int64 qty = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->qty());

    // required int64 bsflag = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bsflag());

    // required int64 market = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->market());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string match_condition = 11 [default = "GFD"];
    if (has_match_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->match_condition());
    }

  }
  if (_has_bits_[0 / 32] & 240u) {
    // optional string request_id = 13;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional string order_type = 14;
    if (has_order_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_type());
    }

    // optional string parent_id = 15;
    if (has_parent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parent_id());
    }

    // optional string parent_type = 16;
    if (has_parent_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parent_type());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional string robot_id = 17;
    if (has_robot_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->robot_id());
    }

    // optional string trader_id = 18;
    if (has_trader_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trader_id());
    }

  }
  if (_has_bits_[8 / 32] & 49152u) {
    // optional int32 kpcbj = 8;
    if (has_kpcbj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kpcbj());
    }

    // optional int32 order_price_type = 9 [default = 0];
    if (has_order_price_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order_price_type());
    }

  }
  if (_has_bits_[16 / 32] & 2031616u) {
    // optional int64 request_time = 19 [default = 0];
    if (has_request_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->request_time());
    }

    // optional int64 request_date = 21 [default = 0];
    if (has_request_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->request_date());
    }

    // optional int32 covered_flag = 10 [default = 0];
    if (has_covered_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->covered_flag());
    }

    // optional int32 funcid = 1 [default = 13001001];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

    // optional int64 active_interval = 20 [default = 1000];
    if (has_active_interval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->active_interval());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionOrderReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.OptionOrderReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionOrderReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionOrderReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.OptionOrderReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.OptionOrderReqt)
    MergeFrom(*source);
  }
}

void OptionOrderReqt::MergeFrom(const OptionOrderReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.OptionOrderReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_match_condition();
      match_condition_.AssignWithDefault(&::autotrade::OptionOrderReqt::_i_give_permission_to_break_this_code_default_match_condition_.get(), from.match_condition_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_order_id();
      order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_order_type();
      order_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_type_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_parent_id();
      parent_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_id_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_parent_type();
      parent_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_type_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_robot_id();
      robot_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robot_id_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_trader_id();
      trader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trader_id_);
    }
    if (cached_has_bits & 0x00000400u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000800u) {
      qty_ = from.qty_;
    }
    if (cached_has_bits & 0x00001000u) {
      bsflag_ = from.bsflag_;
    }
    if (cached_has_bits & 0x00002000u) {
      market_ = from.market_;
    }
    if (cached_has_bits & 0x00004000u) {
      kpcbj_ = from.kpcbj_;
    }
    if (cached_has_bits & 0x00008000u) {
      order_price_type_ = from.order_price_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 2031616u) {
    if (cached_has_bits & 0x00010000u) {
      request_time_ = from.request_time_;
    }
    if (cached_has_bits & 0x00020000u) {
      request_date_ = from.request_date_;
    }
    if (cached_has_bits & 0x00040000u) {
      covered_flag_ = from.covered_flag_;
    }
    if (cached_has_bits & 0x00080000u) {
      funcid_ = from.funcid_;
    }
    if (cached_has_bits & 0x00100000u) {
      active_interval_ = from.active_interval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OptionOrderReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.OptionOrderReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionOrderReqt::CopyFrom(const OptionOrderReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.OptionOrderReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionOrderReqt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003c09) != 0x00003c09) return false;
  return true;
}

void OptionOrderReqt::Swap(OptionOrderReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionOrderReqt::InternalSwap(OptionOrderReqt* other) {
  using std::swap;
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  match_condition_.Swap(&other->match_condition_, &::autotrade::OptionOrderReqt::_i_give_permission_to_break_this_code_default_match_condition_.get(),
    GetArenaNoVirtual());
  order_id_.Swap(&other->order_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_type_.Swap(&other->order_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  parent_id_.Swap(&other->parent_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  parent_type_.Swap(&other->parent_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  robot_id_.Swap(&other->robot_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trader_id_.Swap(&other->trader_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(price_, other->price_);
  swap(qty_, other->qty_);
  swap(bsflag_, other->bsflag_);
  swap(market_, other->market_);
  swap(kpcbj_, other->kpcbj_);
  swap(order_price_type_, other->order_price_type_);
  swap(request_time_, other->request_time_);
  swap(request_date_, other->request_date_);
  swap(covered_flag_, other->covered_flag_);
  swap(funcid_, other->funcid_);
  swap(active_interval_, other->active_interval_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OptionOrderReqt::GetMetadata() const {
  protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OptionOrderResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionOrderResp::kFuncidFieldNumber;
const int OptionOrderResp::kOrderGroupFieldNumber;
const int OptionOrderResp::kOrderNosFieldNumber;
const int OptionOrderResp::kRequestIdFieldNumber;
const int OptionOrderResp::kOrderIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionOrderResp::OptionOrderResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionOrderResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.OptionOrderResp)
}
OptionOrderResp::OptionOrderResp(const OptionOrderResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      order_nos_(from.order_nos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_group()) {
    order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_id()) {
    order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
  }
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:autotrade.OptionOrderResp)
}

void OptionOrderResp::SharedCtor() {
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  funcid_ = 13101001;
}

OptionOrderResp::~OptionOrderResp() {
  // @@protoc_insertion_point(destructor:autotrade.OptionOrderResp)
  SharedDtor();
}

void OptionOrderResp::SharedDtor() {
  order_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OptionOrderResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OptionOrderResp::descriptor() {
  ::protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OptionOrderResp& OptionOrderResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionOrderResp.base);
  return *internal_default_instance();
}


void OptionOrderResp::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.OptionOrderResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  order_nos_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      order_group_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      order_id_.ClearNonDefaultToEmptyNoArena();
    }
    funcid_ = 13101001;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OptionOrderResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.OptionOrderResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 13101001];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string order_group = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_group().data(), static_cast<int>(this->order_group().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionOrderResp.order_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string order_nos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_order_nos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_nos(this->order_nos_size() - 1).data(),
            static_cast<int>(this->order_nos(this->order_nos_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionOrderResp.order_nos");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionOrderResp.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string order_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_id().data(), static_cast<int>(this->order_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionOrderResp.order_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.OptionOrderResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.OptionOrderResp)
  return false;
#undef DO_
}

void OptionOrderResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.OptionOrderResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13101001];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // required string order_group = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrderResp.order_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->order_group(), output);
  }

  // repeated string order_nos = 3;
  for (int i = 0, n = this->order_nos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_nos(i).data(), static_cast<int>(this->order_nos(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrderResp.order_nos");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->order_nos(i), output);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrderResp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->request_id(), output);
  }

  // required string order_id = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrderResp.order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->order_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.OptionOrderResp)
}

::google::protobuf::uint8* OptionOrderResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.OptionOrderResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13101001];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // required string order_group = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrderResp.order_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->order_group(), target);
  }

  // repeated string order_nos = 3;
  for (int i = 0, n = this->order_nos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_nos(i).data(), static_cast<int>(this->order_nos(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrderResp.order_nos");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->order_nos(i), target);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrderResp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->request_id(), target);
  }

  // required string order_id = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrderResp.order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->order_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.OptionOrderResp)
  return target;
}

size_t OptionOrderResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autotrade.OptionOrderResp)
  size_t total_size = 0;

  if (has_order_group()) {
    // required string order_group = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_group());
  }

  if (has_order_id()) {
    // required string order_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_id());
  }

  return total_size;
}
size_t OptionOrderResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.OptionOrderResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string order_group = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_group());

    // required string order_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string order_nos = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->order_nos_size());
  for (int i = 0, n = this->order_nos_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->order_nos(i));
  }

  // optional string request_id = 4;
  if (has_request_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // optional int32 funcid = 1 [default = 13101001];
  if (has_funcid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->funcid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionOrderResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.OptionOrderResp)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionOrderResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionOrderResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.OptionOrderResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.OptionOrderResp)
    MergeFrom(*source);
  }
}

void OptionOrderResp::MergeFrom(const OptionOrderResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.OptionOrderResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  order_nos_.MergeFrom(from.order_nos_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_order_group();
      order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_order_id();
      order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OptionOrderResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.OptionOrderResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionOrderResp::CopyFrom(const OptionOrderResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.OptionOrderResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionOrderResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void OptionOrderResp::Swap(OptionOrderResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionOrderResp::InternalSwap(OptionOrderResp* other) {
  using std::swap;
  order_nos_.InternalSwap(CastToBase(&other->order_nos_));
  order_group_.Swap(&other->order_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_id_.Swap(&other->order_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OptionOrderResp::GetMetadata() const {
  protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OptionOrdersReqt_SingleOrder::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionOrdersReqt_SingleOrder::kCodeFieldNumber;
const int OptionOrdersReqt_SingleOrder::kPriceFieldNumber;
const int OptionOrdersReqt_SingleOrder::kQtyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionOrdersReqt_SingleOrder::OptionOrdersReqt_SingleOrder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionOrdersReqt_SingleOrder.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.OptionOrdersReqt.SingleOrder)
}
OptionOrdersReqt_SingleOrder::OptionOrdersReqt_SingleOrder(const OptionOrdersReqt_SingleOrder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&qty_) -
    reinterpret_cast<char*>(&price_)) + sizeof(qty_));
  // @@protoc_insertion_point(copy_constructor:autotrade.OptionOrdersReqt.SingleOrder)
}

void OptionOrdersReqt_SingleOrder::SharedCtor() {
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qty_) -
      reinterpret_cast<char*>(&price_)) + sizeof(qty_));
}

OptionOrdersReqt_SingleOrder::~OptionOrdersReqt_SingleOrder() {
  // @@protoc_insertion_point(destructor:autotrade.OptionOrdersReqt.SingleOrder)
  SharedDtor();
}

void OptionOrdersReqt_SingleOrder::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OptionOrdersReqt_SingleOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OptionOrdersReqt_SingleOrder::descriptor() {
  ::protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OptionOrdersReqt_SingleOrder& OptionOrdersReqt_SingleOrder::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionOrdersReqt_SingleOrder.base);
  return *internal_default_instance();
}


void OptionOrdersReqt_SingleOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.OptionOrdersReqt.SingleOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    code_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&qty_) -
        reinterpret_cast<char*>(&price_)) + sizeof(qty_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OptionOrdersReqt_SingleOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.OptionOrdersReqt.SingleOrder)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionOrdersReqt.SingleOrder.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 price = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 qty = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.OptionOrdersReqt.SingleOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.OptionOrdersReqt.SingleOrder)
  return false;
#undef DO_
}

void OptionOrdersReqt_SingleOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.OptionOrdersReqt.SingleOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersReqt.SingleOrder.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->code(), output);
  }

  // required int64 price = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->price(), output);
  }

  // required int64 qty = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->qty(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.OptionOrdersReqt.SingleOrder)
}

::google::protobuf::uint8* OptionOrdersReqt_SingleOrder::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.OptionOrdersReqt.SingleOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersReqt.SingleOrder.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  // required int64 price = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->price(), target);
  }

  // required int64 qty = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->qty(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.OptionOrdersReqt.SingleOrder)
  return target;
}

size_t OptionOrdersReqt_SingleOrder::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autotrade.OptionOrdersReqt.SingleOrder)
  size_t total_size = 0;

  if (has_code()) {
    // required string code = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_price()) {
    // required int64 price = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->price());
  }

  if (has_qty()) {
    // required int64 qty = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->qty());
  }

  return total_size;
}
size_t OptionOrdersReqt_SingleOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.OptionOrdersReqt.SingleOrder)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string code = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required int64 price = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->price());

    // required int64 qty = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->qty());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionOrdersReqt_SingleOrder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.OptionOrdersReqt.SingleOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionOrdersReqt_SingleOrder* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionOrdersReqt_SingleOrder>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.OptionOrdersReqt.SingleOrder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.OptionOrdersReqt.SingleOrder)
    MergeFrom(*source);
  }
}

void OptionOrdersReqt_SingleOrder::MergeFrom(const OptionOrdersReqt_SingleOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.OptionOrdersReqt.SingleOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000002u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000004u) {
      qty_ = from.qty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OptionOrdersReqt_SingleOrder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.OptionOrdersReqt.SingleOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionOrdersReqt_SingleOrder::CopyFrom(const OptionOrdersReqt_SingleOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.OptionOrdersReqt.SingleOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionOrdersReqt_SingleOrder::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void OptionOrdersReqt_SingleOrder::Swap(OptionOrdersReqt_SingleOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionOrdersReqt_SingleOrder::InternalSwap(OptionOrdersReqt_SingleOrder* other) {
  using std::swap;
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(price_, other->price_);
  swap(qty_, other->qty_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OptionOrdersReqt_SingleOrder::GetMetadata() const {
  protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OptionOrdersReqt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionOrdersReqt::kFuncidFieldNumber;
const int OptionOrdersReqt::kOrderListFieldNumber;
const int OptionOrdersReqt::kBsflagFieldNumber;
const int OptionOrdersReqt::kMarketFieldNumber;
const int OptionOrdersReqt::kOrderIdFieldNumber;
const int OptionOrdersReqt::kRequestIdFieldNumber;
const int OptionOrdersReqt::kOrderTypeFieldNumber;
const int OptionOrdersReqt::kParentIdFieldNumber;
const int OptionOrdersReqt::kParentTypeFieldNumber;
const int OptionOrdersReqt::kRobotIdFieldNumber;
const int OptionOrdersReqt::kTraderIdFieldNumber;
const int OptionOrdersReqt::kRequestTimeFieldNumber;
const int OptionOrdersReqt::kActiveIntervalFieldNumber;
const int OptionOrdersReqt::kRequestDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionOrdersReqt::OptionOrdersReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionOrdersReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.OptionOrdersReqt)
}
OptionOrdersReqt::OptionOrdersReqt(const OptionOrdersReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      order_list_(from.order_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_id()) {
    order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  order_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_type()) {
    order_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_type_);
  }
  parent_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_parent_id()) {
    parent_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_id_);
  }
  parent_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_parent_type()) {
    parent_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_type_);
  }
  robot_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_robot_id()) {
    robot_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robot_id_);
  }
  trader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trader_id()) {
    trader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trader_id_);
  }
  ::memcpy(&bsflag_, &from.bsflag_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_interval_) -
    reinterpret_cast<char*>(&bsflag_)) + sizeof(active_interval_));
  // @@protoc_insertion_point(copy_constructor:autotrade.OptionOrdersReqt)
}

void OptionOrdersReqt::SharedCtor() {
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robot_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bsflag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_date_) -
      reinterpret_cast<char*>(&bsflag_)) + sizeof(request_date_));
  funcid_ = 13001002;
  active_interval_ = GOOGLE_LONGLONG(1000);
}

OptionOrdersReqt::~OptionOrdersReqt() {
  // @@protoc_insertion_point(destructor:autotrade.OptionOrdersReqt)
  SharedDtor();
}

void OptionOrdersReqt::SharedDtor() {
  order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robot_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trader_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OptionOrdersReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OptionOrdersReqt::descriptor() {
  ::protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OptionOrdersReqt& OptionOrdersReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionOrdersReqt.base);
  return *internal_default_instance();
}


void OptionOrdersReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.OptionOrdersReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  order_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      order_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      order_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      parent_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      parent_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      robot_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      trader_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  bsflag_ = GOOGLE_LONGLONG(0);
  if (cached_has_bits & 7936u) {
    ::memset(&market_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&request_date_) -
        reinterpret_cast<char*>(&market_)) + sizeof(request_date_));
    funcid_ = 13001002;
    active_interval_ = GOOGLE_LONGLONG(1000);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OptionOrdersReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.OptionOrdersReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 13001002];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autotrade.OptionOrdersReqt.SingleOrder order_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_order_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 bsflag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_bsflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bsflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 market = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_market();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &market_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string order_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_id().data(), static_cast<int>(this->order_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionOrdersReqt.order_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionOrdersReqt.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_type().data(), static_cast<int>(this->order_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionOrdersReqt.order_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string parent_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parent_id().data(), static_cast<int>(this->parent_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionOrdersReqt.parent_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string parent_type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parent_type().data(), static_cast<int>(this->parent_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionOrdersReqt.parent_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string robot_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robot_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->robot_id().data(), static_cast<int>(this->robot_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionOrdersReqt.robot_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string trader_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trader_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trader_id().data(), static_cast<int>(this->trader_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionOrdersReqt.trader_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 request_time = 12 [default = 0];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_request_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 active_interval = 13 [default = 1000];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_active_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &active_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 request_date = 14 [default = 0];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_request_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.OptionOrdersReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.OptionOrdersReqt)
  return false;
#undef DO_
}

void OptionOrdersReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.OptionOrdersReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13001002];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // repeated .autotrade.OptionOrdersReqt.SingleOrder order_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->order_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->order_list(static_cast<int>(i)),
      output);
  }

  // required int64 bsflag = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->bsflag(), output);
  }

  // required int64 market = 4;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->market(), output);
  }

  // required string order_id = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersReqt.order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->order_id(), output);
  }

  // optional string request_id = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersReqt.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->request_id(), output);
  }

  // optional string order_type = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_type().data(), static_cast<int>(this->order_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersReqt.order_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->order_type(), output);
  }

  // optional string parent_id = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parent_id().data(), static_cast<int>(this->parent_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersReqt.parent_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->parent_id(), output);
  }

  // optional string parent_type = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parent_type().data(), static_cast<int>(this->parent_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersReqt.parent_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->parent_type(), output);
  }

  // optional string robot_id = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robot_id().data(), static_cast<int>(this->robot_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersReqt.robot_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->robot_id(), output);
  }

  // optional string trader_id = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trader_id().data(), static_cast<int>(this->trader_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersReqt.trader_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->trader_id(), output);
  }

  // optional int64 request_time = 12 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->request_time(), output);
  }

  // optional int64 active_interval = 13 [default = 1000];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->active_interval(), output);
  }

  // optional int64 request_date = 14 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->request_date(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.OptionOrdersReqt)
}

::google::protobuf::uint8* OptionOrdersReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.OptionOrdersReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13001002];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // repeated .autotrade.OptionOrdersReqt.SingleOrder order_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->order_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->order_list(static_cast<int>(i)), deterministic, target);
  }

  // required int64 bsflag = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->bsflag(), target);
  }

  // required int64 market = 4;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->market(), target);
  }

  // required string order_id = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersReqt.order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->order_id(), target);
  }

  // optional string request_id = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersReqt.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->request_id(), target);
  }

  // optional string order_type = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_type().data(), static_cast<int>(this->order_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersReqt.order_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->order_type(), target);
  }

  // optional string parent_id = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parent_id().data(), static_cast<int>(this->parent_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersReqt.parent_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->parent_id(), target);
  }

  // optional string parent_type = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parent_type().data(), static_cast<int>(this->parent_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersReqt.parent_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->parent_type(), target);
  }

  // optional string robot_id = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robot_id().data(), static_cast<int>(this->robot_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersReqt.robot_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->robot_id(), target);
  }

  // optional string trader_id = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trader_id().data(), static_cast<int>(this->trader_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersReqt.trader_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->trader_id(), target);
  }

  // optional int64 request_time = 12 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->request_time(), target);
  }

  // optional int64 active_interval = 13 [default = 1000];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->active_interval(), target);
  }

  // optional int64 request_date = 14 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->request_date(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.OptionOrdersReqt)
  return target;
}

size_t OptionOrdersReqt::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autotrade.OptionOrdersReqt)
  size_t total_size = 0;

  if (has_order_id()) {
    // required string order_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_id());
  }

  if (has_bsflag()) {
    // required int64 bsflag = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bsflag());
  }

  if (has_market()) {
    // required int64 market = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->market());
  }

  return total_size;
}
size_t OptionOrdersReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.OptionOrdersReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000181) ^ 0x00000181) == 0) {  // All required fields are present.
    // required string order_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_id());

    // required int64 bsflag = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bsflag());

    // required int64 market = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->market());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .autotrade.OptionOrdersReqt.SingleOrder order_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->order_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->order_list(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 126u) {
    // optional string request_id = 6;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional string order_type = 7;
    if (has_order_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_type());
    }

    // optional string parent_id = 8;
    if (has_parent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parent_id());
    }

    // optional string parent_type = 9;
    if (has_parent_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parent_type());
    }

    // optional string robot_id = 10;
    if (has_robot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->robot_id());
    }

    // optional string trader_id = 11;
    if (has_trader_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trader_id());
    }

  }
  if (_has_bits_[8 / 32] & 7680u) {
    // optional int64 request_time = 12 [default = 0];
    if (has_request_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->request_time());
    }

    // optional int64 request_date = 14 [default = 0];
    if (has_request_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->request_date());
    }

    // optional int32 funcid = 1 [default = 13001002];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

    // optional int64 active_interval = 13 [default = 1000];
    if (has_active_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->active_interval());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionOrdersReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.OptionOrdersReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionOrdersReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionOrdersReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.OptionOrdersReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.OptionOrdersReqt)
    MergeFrom(*source);
  }
}

void OptionOrdersReqt::MergeFrom(const OptionOrdersReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.OptionOrdersReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  order_list_.MergeFrom(from.order_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_order_id();
      order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_order_type();
      order_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_type_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_parent_id();
      parent_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_parent_type();
      parent_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_type_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_robot_id();
      robot_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robot_id_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_trader_id();
      trader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trader_id_);
    }
    if (cached_has_bits & 0x00000080u) {
      bsflag_ = from.bsflag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      market_ = from.market_;
    }
    if (cached_has_bits & 0x00000200u) {
      request_time_ = from.request_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      request_date_ = from.request_date_;
    }
    if (cached_has_bits & 0x00000800u) {
      funcid_ = from.funcid_;
    }
    if (cached_has_bits & 0x00001000u) {
      active_interval_ = from.active_interval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OptionOrdersReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.OptionOrdersReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionOrdersReqt::CopyFrom(const OptionOrdersReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.OptionOrdersReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionOrdersReqt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000181) != 0x00000181) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->order_list())) return false;
  return true;
}

void OptionOrdersReqt::Swap(OptionOrdersReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionOrdersReqt::InternalSwap(OptionOrdersReqt* other) {
  using std::swap;
  CastToBase(&order_list_)->InternalSwap(CastToBase(&other->order_list_));
  order_id_.Swap(&other->order_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_type_.Swap(&other->order_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  parent_id_.Swap(&other->parent_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  parent_type_.Swap(&other->parent_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  robot_id_.Swap(&other->robot_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trader_id_.Swap(&other->trader_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bsflag_, other->bsflag_);
  swap(market_, other->market_);
  swap(request_time_, other->request_time_);
  swap(request_date_, other->request_date_);
  swap(funcid_, other->funcid_);
  swap(active_interval_, other->active_interval_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OptionOrdersReqt::GetMetadata() const {
  protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OptionOrdersResp_OrderResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionOrdersResp_OrderResult::kRetCodeFieldNumber;
const int OptionOrdersResp_OrderResult::kRetMsgFieldNumber;
const int OptionOrdersResp_OrderResult::kOrdernoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionOrdersResp_OrderResult::OptionOrdersResp_OrderResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionOrdersResp_OrderResult.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.OptionOrdersResp.OrderResult)
}
OptionOrdersResp_OrderResult::OptionOrdersResp_OrderResult(const OptionOrdersResp_OrderResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ret_msg()) {
    ret_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_msg_);
  }
  orderno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_orderno()) {
    orderno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderno_);
  }
  ret_code_ = from.ret_code_;
  // @@protoc_insertion_point(copy_constructor:autotrade.OptionOrdersResp.OrderResult)
}

void OptionOrdersResp_OrderResult::SharedCtor() {
  ret_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_code_ = 0;
}

OptionOrdersResp_OrderResult::~OptionOrdersResp_OrderResult() {
  // @@protoc_insertion_point(destructor:autotrade.OptionOrdersResp.OrderResult)
  SharedDtor();
}

void OptionOrdersResp_OrderResult::SharedDtor() {
  ret_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderno_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OptionOrdersResp_OrderResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OptionOrdersResp_OrderResult::descriptor() {
  ::protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OptionOrdersResp_OrderResult& OptionOrdersResp_OrderResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionOrdersResp_OrderResult.base);
  return *internal_default_instance();
}


void OptionOrdersResp_OrderResult::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.OptionOrdersResp.OrderResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      ret_msg_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      orderno_.ClearNonDefaultToEmptyNoArena();
    }
  }
  ret_code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OptionOrdersResp_OrderResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.OptionOrdersResp.OrderResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ret_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ret_msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ret_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ret_msg().data(), static_cast<int>(this->ret_msg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionOrdersResp.OrderResult.ret_msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string orderno = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orderno().data(), static_cast<int>(this->orderno().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionOrdersResp.OrderResult.orderno");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.OptionOrdersResp.OrderResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.OptionOrdersResp.OrderResult)
  return false;
#undef DO_
}

void OptionOrdersResp_OrderResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.OptionOrdersResp.OrderResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 ret_code = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional string ret_msg = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_msg().data(), static_cast<int>(this->ret_msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersResp.OrderResult.ret_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ret_msg(), output);
  }

  // optional string orderno = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderno().data(), static_cast<int>(this->orderno().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersResp.OrderResult.orderno");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->orderno(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.OptionOrdersResp.OrderResult)
}

::google::protobuf::uint8* OptionOrdersResp_OrderResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.OptionOrdersResp.OrderResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 ret_code = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional string ret_msg = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_msg().data(), static_cast<int>(this->ret_msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersResp.OrderResult.ret_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ret_msg(), target);
  }

  // optional string orderno = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderno().data(), static_cast<int>(this->orderno().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersResp.OrderResult.orderno");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->orderno(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.OptionOrdersResp.OrderResult)
  return target;
}

size_t OptionOrdersResp_OrderResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.OptionOrdersResp.OrderResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 ret_code = 1;
  if (has_ret_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret_code());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string ret_msg = 2;
    if (has_ret_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ret_msg());
    }

    // optional string orderno = 3;
    if (has_orderno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderno());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionOrdersResp_OrderResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.OptionOrdersResp.OrderResult)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionOrdersResp_OrderResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionOrdersResp_OrderResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.OptionOrdersResp.OrderResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.OptionOrdersResp.OrderResult)
    MergeFrom(*source);
  }
}

void OptionOrdersResp_OrderResult::MergeFrom(const OptionOrdersResp_OrderResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.OptionOrdersResp.OrderResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ret_msg();
      ret_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_orderno();
      orderno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderno_);
    }
    if (cached_has_bits & 0x00000004u) {
      ret_code_ = from.ret_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OptionOrdersResp_OrderResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.OptionOrdersResp.OrderResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionOrdersResp_OrderResult::CopyFrom(const OptionOrdersResp_OrderResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.OptionOrdersResp.OrderResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionOrdersResp_OrderResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void OptionOrdersResp_OrderResult::Swap(OptionOrdersResp_OrderResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionOrdersResp_OrderResult::InternalSwap(OptionOrdersResp_OrderResult* other) {
  using std::swap;
  ret_msg_.Swap(&other->ret_msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  orderno_.Swap(&other->orderno_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ret_code_, other->ret_code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OptionOrdersResp_OrderResult::GetMetadata() const {
  protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OptionOrdersResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionOrdersResp::kFuncidFieldNumber;
const int OptionOrdersResp::kOrderGroupFieldNumber;
const int OptionOrdersResp::kResultsFieldNumber;
const int OptionOrdersResp::kRequestIdFieldNumber;
const int OptionOrdersResp::kOrderIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionOrdersResp::OptionOrdersResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionOrdersResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.OptionOrdersResp)
}
OptionOrdersResp::OptionOrdersResp(const OptionOrdersResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      results_(from.results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_group()) {
    order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_id()) {
    order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
  }
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:autotrade.OptionOrdersResp)
}

void OptionOrdersResp::SharedCtor() {
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  funcid_ = 13101002;
}

OptionOrdersResp::~OptionOrdersResp() {
  // @@protoc_insertion_point(destructor:autotrade.OptionOrdersResp)
  SharedDtor();
}

void OptionOrdersResp::SharedDtor() {
  order_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OptionOrdersResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OptionOrdersResp::descriptor() {
  ::protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OptionOrdersResp& OptionOrdersResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionOrdersResp.base);
  return *internal_default_instance();
}


void OptionOrdersResp::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.OptionOrdersResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      order_group_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      order_id_.ClearNonDefaultToEmptyNoArena();
    }
    funcid_ = 13101002;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OptionOrdersResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.OptionOrdersResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 13101002];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string order_group = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_group().data(), static_cast<int>(this->order_group().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionOrdersResp.order_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autotrade.OptionOrdersResp.OrderResult results = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionOrdersResp.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string order_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_id().data(), static_cast<int>(this->order_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionOrdersResp.order_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.OptionOrdersResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.OptionOrdersResp)
  return false;
#undef DO_
}

void OptionOrdersResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.OptionOrdersResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13101002];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // required string order_group = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersResp.order_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->order_group(), output);
  }

  // repeated .autotrade.OptionOrdersResp.OrderResult results = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->results(static_cast<int>(i)),
      output);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersResp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->request_id(), output);
  }

  // required string order_id = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersResp.order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->order_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.OptionOrdersResp)
}

::google::protobuf::uint8* OptionOrdersResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.OptionOrdersResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13101002];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // required string order_group = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersResp.order_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->order_group(), target);
  }

  // repeated .autotrade.OptionOrdersResp.OrderResult results = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->results(static_cast<int>(i)), deterministic, target);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersResp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->request_id(), target);
  }

  // required string order_id = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersResp.order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->order_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.OptionOrdersResp)
  return target;
}

size_t OptionOrdersResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autotrade.OptionOrdersResp)
  size_t total_size = 0;

  if (has_order_group()) {
    // required string order_group = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_group());
  }

  if (has_order_id()) {
    // required string order_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_id());
  }

  return total_size;
}
size_t OptionOrdersResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.OptionOrdersResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string order_group = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_group());

    // required string order_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .autotrade.OptionOrdersResp.OrderResult results = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->results(static_cast<int>(i)));
    }
  }

  // optional string request_id = 4;
  if (has_request_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // optional int32 funcid = 1 [default = 13101002];
  if (has_funcid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->funcid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionOrdersResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.OptionOrdersResp)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionOrdersResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionOrdersResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.OptionOrdersResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.OptionOrdersResp)
    MergeFrom(*source);
  }
}

void OptionOrdersResp::MergeFrom(const OptionOrdersResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.OptionOrdersResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_order_group();
      order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_order_id();
      order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OptionOrdersResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.OptionOrdersResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionOrdersResp::CopyFrom(const OptionOrdersResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.OptionOrdersResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionOrdersResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->results())) return false;
  return true;
}

void OptionOrdersResp::Swap(OptionOrdersResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionOrdersResp::InternalSwap(OptionOrdersResp* other) {
  using std::swap;
  CastToBase(&results_)->InternalSwap(CastToBase(&other->results_));
  order_group_.Swap(&other->order_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_id_.Swap(&other->order_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OptionOrdersResp::GetMetadata() const {
  protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OptionDeleteReqt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionDeleteReqt::kFuncidFieldNumber;
const int OptionDeleteReqt::kOrderGroupFieldNumber;
const int OptionDeleteReqt::kMarketFieldNumber;
const int OptionDeleteReqt::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionDeleteReqt::OptionDeleteReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionDeleteReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.OptionDeleteReqt)
}
OptionDeleteReqt::OptionDeleteReqt(const OptionDeleteReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_group()) {
    order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  ::memcpy(&market_, &from.market_,
    static_cast<size_t>(reinterpret_cast<char*>(&funcid_) -
    reinterpret_cast<char*>(&market_)) + sizeof(funcid_));
  // @@protoc_insertion_point(copy_constructor:autotrade.OptionDeleteReqt)
}

void OptionDeleteReqt::SharedCtor() {
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  market_ = 0u;
  funcid_ = 13001004;
}

OptionDeleteReqt::~OptionDeleteReqt() {
  // @@protoc_insertion_point(destructor:autotrade.OptionDeleteReqt)
  SharedDtor();
}

void OptionDeleteReqt::SharedDtor() {
  order_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OptionDeleteReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OptionDeleteReqt::descriptor() {
  ::protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OptionDeleteReqt& OptionDeleteReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionDeleteReqt.base);
  return *internal_default_instance();
}


void OptionDeleteReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.OptionDeleteReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      order_group_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    market_ = 0u;
    funcid_ = 13001004;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OptionDeleteReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.OptionDeleteReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 13001004];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string order_group = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_group().data(), static_cast<int>(this->order_group().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionDeleteReqt.order_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 market = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_market();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &market_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionDeleteReqt.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.OptionDeleteReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.OptionDeleteReqt)
  return false;
#undef DO_
}

void OptionDeleteReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.OptionDeleteReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13001004];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // required string order_group = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionDeleteReqt.order_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->order_group(), output);
  }

  // required uint32 market = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->market(), output);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionDeleteReqt.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.OptionDeleteReqt)
}

::google::protobuf::uint8* OptionDeleteReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.OptionDeleteReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13001004];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // required string order_group = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionDeleteReqt.order_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->order_group(), target);
  }

  // required uint32 market = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->market(), target);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionDeleteReqt.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.OptionDeleteReqt)
  return target;
}

size_t OptionDeleteReqt::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autotrade.OptionDeleteReqt)
  size_t total_size = 0;

  if (has_order_group()) {
    // required string order_group = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_group());
  }

  if (has_market()) {
    // required uint32 market = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->market());
  }

  return total_size;
}
size_t OptionDeleteReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.OptionDeleteReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string order_group = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_group());

    // required uint32 market = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->market());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string request_id = 4;
  if (has_request_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // optional int32 funcid = 1 [default = 13001004];
  if (has_funcid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->funcid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionDeleteReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.OptionDeleteReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionDeleteReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionDeleteReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.OptionDeleteReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.OptionDeleteReqt)
    MergeFrom(*source);
  }
}

void OptionDeleteReqt::MergeFrom(const OptionDeleteReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.OptionDeleteReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_order_group();
      order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      market_ = from.market_;
    }
    if (cached_has_bits & 0x00000008u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OptionDeleteReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.OptionDeleteReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionDeleteReqt::CopyFrom(const OptionDeleteReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.OptionDeleteReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionDeleteReqt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void OptionDeleteReqt::Swap(OptionDeleteReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionDeleteReqt::InternalSwap(OptionDeleteReqt* other) {
  using std::swap;
  order_group_.Swap(&other->order_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(market_, other->market_);
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OptionDeleteReqt::GetMetadata() const {
  protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OptionDeleteResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionDeleteResp::kFuncidFieldNumber;
const int OptionDeleteResp::kOrderGroupFieldNumber;
const int OptionDeleteResp::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionDeleteResp::OptionDeleteResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionDeleteResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.OptionDeleteResp)
}
OptionDeleteResp::OptionDeleteResp(const OptionDeleteResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_group()) {
    order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:autotrade.OptionDeleteResp)
}

void OptionDeleteResp::SharedCtor() {
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  funcid_ = 13101004;
}

OptionDeleteResp::~OptionDeleteResp() {
  // @@protoc_insertion_point(destructor:autotrade.OptionDeleteResp)
  SharedDtor();
}

void OptionDeleteResp::SharedDtor() {
  order_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OptionDeleteResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OptionDeleteResp::descriptor() {
  ::protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OptionDeleteResp& OptionDeleteResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionDeleteResp.base);
  return *internal_default_instance();
}


void OptionDeleteResp::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.OptionDeleteResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      order_group_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    funcid_ = 13101004;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OptionDeleteResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.OptionDeleteResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 13101004];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_group = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_group().data(), static_cast<int>(this->order_group().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionDeleteResp.order_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionDeleteResp.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.OptionDeleteResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.OptionDeleteResp)
  return false;
#undef DO_
}

void OptionDeleteResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.OptionDeleteResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13101004];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional string order_group = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionDeleteResp.order_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->order_group(), output);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionDeleteResp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.OptionDeleteResp)
}

::google::protobuf::uint8* OptionDeleteResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.OptionDeleteResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13101004];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional string order_group = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionDeleteResp.order_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->order_group(), target);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionDeleteResp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.OptionDeleteResp)
  return target;
}

size_t OptionDeleteResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.OptionDeleteResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string order_group = 2;
    if (has_order_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_group());
    }

    // optional string request_id = 3;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional int32 funcid = 1 [default = 13101004];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionDeleteResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.OptionDeleteResp)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionDeleteResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionDeleteResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.OptionDeleteResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.OptionDeleteResp)
    MergeFrom(*source);
  }
}

void OptionDeleteResp::MergeFrom(const OptionDeleteResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.OptionDeleteResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_order_group();
      order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OptionDeleteResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.OptionDeleteResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionDeleteResp::CopyFrom(const OptionDeleteResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.OptionDeleteResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionDeleteResp::IsInitialized() const {
  return true;
}

void OptionDeleteResp::Swap(OptionDeleteResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionDeleteResp::InternalSwap(OptionDeleteResp* other) {
  using std::swap;
  order_group_.Swap(&other->order_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OptionDeleteResp::GetMetadata() const {
  protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OptionDeletesReqt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionDeletesReqt::kFuncidFieldNumber;
const int OptionDeletesReqt::kOrderGroupFieldNumber;
const int OptionDeletesReqt::kMarketFieldNumber;
const int OptionDeletesReqt::kRequestIdFieldNumber;
const int OptionDeletesReqt::kOrderNosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionDeletesReqt::OptionDeletesReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionDeletesReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.OptionDeletesReqt)
}
OptionDeletesReqt::OptionDeletesReqt(const OptionDeletesReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      order_nos_(from.order_nos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_group()) {
    order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  ::memcpy(&market_, &from.market_,
    static_cast<size_t>(reinterpret_cast<char*>(&funcid_) -
    reinterpret_cast<char*>(&market_)) + sizeof(funcid_));
  // @@protoc_insertion_point(copy_constructor:autotrade.OptionDeletesReqt)
}

void OptionDeletesReqt::SharedCtor() {
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  market_ = 0u;
  funcid_ = 13001005;
}

OptionDeletesReqt::~OptionDeletesReqt() {
  // @@protoc_insertion_point(destructor:autotrade.OptionDeletesReqt)
  SharedDtor();
}

void OptionDeletesReqt::SharedDtor() {
  order_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OptionDeletesReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OptionDeletesReqt::descriptor() {
  ::protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OptionDeletesReqt& OptionDeletesReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionDeletesReqt.base);
  return *internal_default_instance();
}


void OptionDeletesReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.OptionDeletesReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  order_nos_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      order_group_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    market_ = 0u;
    funcid_ = 13001005;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OptionDeletesReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.OptionDeletesReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 13001005];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string order_group = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_group().data(), static_cast<int>(this->order_group().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionDeletesReqt.order_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 market = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_market();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &market_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionDeletesReqt.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string order_nos = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_order_nos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_nos(this->order_nos_size() - 1).data(),
            static_cast<int>(this->order_nos(this->order_nos_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionDeletesReqt.order_nos");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.OptionDeletesReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.OptionDeletesReqt)
  return false;
#undef DO_
}

void OptionDeletesReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.OptionDeletesReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13001005];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // required string order_group = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionDeletesReqt.order_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->order_group(), output);
  }

  // required uint32 market = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->market(), output);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionDeletesReqt.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->request_id(), output);
  }

  // repeated string order_nos = 5;
  for (int i = 0, n = this->order_nos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_nos(i).data(), static_cast<int>(this->order_nos(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionDeletesReqt.order_nos");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->order_nos(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.OptionDeletesReqt)
}

::google::protobuf::uint8* OptionDeletesReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.OptionDeletesReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13001005];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // required string order_group = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionDeletesReqt.order_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->order_group(), target);
  }

  // required uint32 market = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->market(), target);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionDeletesReqt.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->request_id(), target);
  }

  // repeated string order_nos = 5;
  for (int i = 0, n = this->order_nos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_nos(i).data(), static_cast<int>(this->order_nos(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionDeletesReqt.order_nos");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->order_nos(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.OptionDeletesReqt)
  return target;
}

size_t OptionDeletesReqt::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autotrade.OptionDeletesReqt)
  size_t total_size = 0;

  if (has_order_group()) {
    // required string order_group = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_group());
  }

  if (has_market()) {
    // required uint32 market = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->market());
  }

  return total_size;
}
size_t OptionDeletesReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.OptionDeletesReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string order_group = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_group());

    // required uint32 market = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->market());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string order_nos = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->order_nos_size());
  for (int i = 0, n = this->order_nos_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->order_nos(i));
  }

  // optional string request_id = 4;
  if (has_request_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // optional int32 funcid = 1 [default = 13001005];
  if (has_funcid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->funcid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionDeletesReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.OptionDeletesReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionDeletesReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionDeletesReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.OptionDeletesReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.OptionDeletesReqt)
    MergeFrom(*source);
  }
}

void OptionDeletesReqt::MergeFrom(const OptionDeletesReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.OptionDeletesReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  order_nos_.MergeFrom(from.order_nos_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_order_group();
      order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      market_ = from.market_;
    }
    if (cached_has_bits & 0x00000008u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OptionDeletesReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.OptionDeletesReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionDeletesReqt::CopyFrom(const OptionDeletesReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.OptionDeletesReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionDeletesReqt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void OptionDeletesReqt::Swap(OptionDeletesReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionDeletesReqt::InternalSwap(OptionDeletesReqt* other) {
  using std::swap;
  order_nos_.InternalSwap(CastToBase(&other->order_nos_));
  order_group_.Swap(&other->order_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(market_, other->market_);
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OptionDeletesReqt::GetMetadata() const {
  protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OptionDeletesResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionDeletesResp::kFuncidFieldNumber;
const int OptionDeletesResp::kOrderGroupFieldNumber;
const int OptionDeletesResp::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionDeletesResp::OptionDeletesResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionDeletesResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.OptionDeletesResp)
}
OptionDeletesResp::OptionDeletesResp(const OptionDeletesResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_group()) {
    order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:autotrade.OptionDeletesResp)
}

void OptionDeletesResp::SharedCtor() {
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  funcid_ = 13101005;
}

OptionDeletesResp::~OptionDeletesResp() {
  // @@protoc_insertion_point(destructor:autotrade.OptionDeletesResp)
  SharedDtor();
}

void OptionDeletesResp::SharedDtor() {
  order_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OptionDeletesResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OptionDeletesResp::descriptor() {
  ::protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OptionDeletesResp& OptionDeletesResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionDeletesResp.base);
  return *internal_default_instance();
}


void OptionDeletesResp::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.OptionDeletesResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      order_group_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    funcid_ = 13101005;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OptionDeletesResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.OptionDeletesResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 13101005];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_group = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_group().data(), static_cast<int>(this->order_group().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionDeletesResp.order_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionDeletesResp.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.OptionDeletesResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.OptionDeletesResp)
  return false;
#undef DO_
}

void OptionDeletesResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.OptionDeletesResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13101005];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional string order_group = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionDeletesResp.order_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->order_group(), output);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionDeletesResp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.OptionDeletesResp)
}

::google::protobuf::uint8* OptionDeletesResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.OptionDeletesResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13101005];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional string order_group = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionDeletesResp.order_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->order_group(), target);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionDeletesResp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.OptionDeletesResp)
  return target;
}

size_t OptionDeletesResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.OptionDeletesResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string order_group = 2;
    if (has_order_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_group());
    }

    // optional string request_id = 3;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional int32 funcid = 1 [default = 13101005];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionDeletesResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.OptionDeletesResp)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionDeletesResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionDeletesResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.OptionDeletesResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.OptionDeletesResp)
    MergeFrom(*source);
  }
}

void OptionDeletesResp::MergeFrom(const OptionDeletesResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.OptionDeletesResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_order_group();
      order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OptionDeletesResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.OptionDeletesResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionDeletesResp::CopyFrom(const OptionDeletesResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.OptionDeletesResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionDeletesResp::IsInitialized() const {
  return true;
}

void OptionDeletesResp::Swap(OptionDeletesResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionDeletesResp::InternalSwap(OptionDeletesResp* other) {
  using std::swap;
  order_group_.Swap(&other->order_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OptionDeletesResp::GetMetadata() const {
  protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OptionQueryOrderReqt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionQueryOrderReqt::kFuncidFieldNumber;
const int OptionQueryOrderReqt::kOrderGroupFieldNumber;
const int OptionQueryOrderReqt::kQueryTypeFieldNumber;
const int OptionQueryOrderReqt::kQueryFlagFieldNumber;
const int OptionQueryOrderReqt::kStartPosFieldNumber;
const int OptionQueryOrderReqt::kRequestIdFieldNumber;
const int OptionQueryOrderReqt::kRequestTimeFieldNumber;
const int OptionQueryOrderReqt::kActiveIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionQueryOrderReqt::OptionQueryOrderReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionQueryOrderReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.OptionQueryOrderReqt)
}
OptionQueryOrderReqt::OptionQueryOrderReqt(const OptionQueryOrderReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_group()) {
    order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
  }
  start_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_start_pos()) {
    start_pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_pos_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  ::memcpy(&query_type_, &from.query_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_interval_) -
    reinterpret_cast<char*>(&query_type_)) + sizeof(active_interval_));
  // @@protoc_insertion_point(copy_constructor:autotrade.OptionQueryOrderReqt)
}

void OptionQueryOrderReqt::SharedCtor() {
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&query_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_time_) -
      reinterpret_cast<char*>(&query_type_)) + sizeof(request_time_));
  funcid_ = 13002002;
  query_flag_ = 1;
  active_interval_ = GOOGLE_LONGLONG(1000);
}

OptionQueryOrderReqt::~OptionQueryOrderReqt() {
  // @@protoc_insertion_point(destructor:autotrade.OptionQueryOrderReqt)
  SharedDtor();
}

void OptionQueryOrderReqt::SharedDtor() {
  order_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_pos_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OptionQueryOrderReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OptionQueryOrderReqt::descriptor() {
  ::protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OptionQueryOrderReqt& OptionQueryOrderReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionQueryOrderReqt.base);
  return *internal_default_instance();
}


void OptionQueryOrderReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.OptionQueryOrderReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      order_group_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      start_pos_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&query_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&request_time_) -
        reinterpret_cast<char*>(&query_type_)) + sizeof(request_time_));
    funcid_ = 13002002;
    query_flag_ = 1;
    active_interval_ = GOOGLE_LONGLONG(1000);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OptionQueryOrderReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.OptionQueryOrderReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 13002002];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_group = 2 [default = ""];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_group().data(), static_cast<int>(this->order_group().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionQueryOrderReqt.order_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autotrade.OptionQueryOrderReqt.QueryType query_type = 3 [default = Type_ONCE];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::autotrade::OptionQueryOrderReqt_QueryType_IsValid(value)) {
            set_query_type(static_cast< ::autotrade::OptionQueryOrderReqt_QueryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autotrade.OptionQueryOrderReqt.QueryFlag query_flag = 4 [default = Type_NO_DELETE];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::autotrade::OptionQueryOrderReqt_QueryFlag_IsValid(value)) {
            set_query_flag(static_cast< ::autotrade::OptionQueryOrderReqt_QueryFlag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string start_pos = 5 [default = ""];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_pos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->start_pos().data(), static_cast<int>(this->start_pos().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionQueryOrderReqt.start_pos");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionQueryOrderReqt.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 request_time = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_request_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 active_interval = 11 [default = 1000];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_active_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &active_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.OptionQueryOrderReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.OptionQueryOrderReqt)
  return false;
#undef DO_
}

void OptionQueryOrderReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.OptionQueryOrderReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13002002];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional string order_group = 2 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrderReqt.order_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->order_group(), output);
  }

  // optional .autotrade.OptionQueryOrderReqt.QueryType query_type = 3 [default = Type_ONCE];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->query_type(), output);
  }

  // optional .autotrade.OptionQueryOrderReqt.QueryFlag query_flag = 4 [default = Type_NO_DELETE];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->query_flag(), output);
  }

  // optional string start_pos = 5 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_pos().data(), static_cast<int>(this->start_pos().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrderReqt.start_pos");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->start_pos(), output);
  }

  // optional string request_id = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrderReqt.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->request_id(), output);
  }

  // optional int64 request_time = 10 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->request_time(), output);
  }

  // optional int64 active_interval = 11 [default = 1000];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->active_interval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.OptionQueryOrderReqt)
}

::google::protobuf::uint8* OptionQueryOrderReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.OptionQueryOrderReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13002002];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional string order_group = 2 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrderReqt.order_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->order_group(), target);
  }

  // optional .autotrade.OptionQueryOrderReqt.QueryType query_type = 3 [default = Type_ONCE];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->query_type(), target);
  }

  // optional .autotrade.OptionQueryOrderReqt.QueryFlag query_flag = 4 [default = Type_NO_DELETE];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->query_flag(), target);
  }

  // optional string start_pos = 5 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_pos().data(), static_cast<int>(this->start_pos().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrderReqt.start_pos");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->start_pos(), target);
  }

  // optional string request_id = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrderReqt.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->request_id(), target);
  }

  // optional int64 request_time = 10 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->request_time(), target);
  }

  // optional int64 active_interval = 11 [default = 1000];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->active_interval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.OptionQueryOrderReqt)
  return target;
}

size_t OptionQueryOrderReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.OptionQueryOrderReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string order_group = 2 [default = ""];
    if (has_order_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_group());
    }

    // optional string start_pos = 5 [default = ""];
    if (has_start_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start_pos());
    }

    // optional string request_id = 6;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional .autotrade.OptionQueryOrderReqt.QueryType query_type = 3 [default = Type_ONCE];
    if (has_query_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->query_type());
    }

    // optional int64 request_time = 10 [default = 0];
    if (has_request_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->request_time());
    }

    // optional int32 funcid = 1 [default = 13002002];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

    // optional .autotrade.OptionQueryOrderReqt.QueryFlag query_flag = 4 [default = Type_NO_DELETE];
    if (has_query_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->query_flag());
    }

    // optional int64 active_interval = 11 [default = 1000];
    if (has_active_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->active_interval());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionQueryOrderReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.OptionQueryOrderReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionQueryOrderReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionQueryOrderReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.OptionQueryOrderReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.OptionQueryOrderReqt)
    MergeFrom(*source);
  }
}

void OptionQueryOrderReqt::MergeFrom(const OptionQueryOrderReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.OptionQueryOrderReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_order_group();
      order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_start_pos();
      start_pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_pos_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      query_type_ = from.query_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      request_time_ = from.request_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      funcid_ = from.funcid_;
    }
    if (cached_has_bits & 0x00000040u) {
      query_flag_ = from.query_flag_;
    }
    if (cached_has_bits & 0x00000080u) {
      active_interval_ = from.active_interval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OptionQueryOrderReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.OptionQueryOrderReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionQueryOrderReqt::CopyFrom(const OptionQueryOrderReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.OptionQueryOrderReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionQueryOrderReqt::IsInitialized() const {
  return true;
}

void OptionQueryOrderReqt::Swap(OptionQueryOrderReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionQueryOrderReqt::InternalSwap(OptionQueryOrderReqt* other) {
  using std::swap;
  order_group_.Swap(&other->order_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  start_pos_.Swap(&other->start_pos_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(query_type_, other->query_type_);
  swap(request_time_, other->request_time_);
  swap(funcid_, other->funcid_);
  swap(query_flag_, other->query_flag_);
  swap(active_interval_, other->active_interval_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OptionQueryOrderReqt::GetMetadata() const {
  protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OptionQueryOrderResp_OrderDetail::InitAsDefaultInstance() {
}
::google::protobuf::internal::ExplicitlyConstructed<::std::string> OptionQueryOrderResp_OrderDetail::_i_give_permission_to_break_this_code_default_match_condition_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionQueryOrderResp_OrderDetail::kCodeFieldNumber;
const int OptionQueryOrderResp_OrderDetail::kNameFieldNumber;
const int OptionQueryOrderResp_OrderDetail::kPriceFieldNumber;
const int OptionQueryOrderResp_OrderDetail::kQtyFieldNumber;
const int OptionQueryOrderResp_OrderDetail::kBsflagFieldNumber;
const int OptionQueryOrderResp_OrderDetail::kMarketFieldNumber;
const int OptionQueryOrderResp_OrderDetail::kPolicyIdFieldNumber;
const int OptionQueryOrderResp_OrderDetail::kIndexIdFieldNumber;
const int OptionQueryOrderResp_OrderDetail::kKpcbjFieldNumber;
const int OptionQueryOrderResp_OrderDetail::kOrderPriceTypeFieldNumber;
const int OptionQueryOrderResp_OrderDetail::kCoveredFlagFieldNumber;
const int OptionQueryOrderResp_OrderDetail::kMatchConditionFieldNumber;
const int OptionQueryOrderResp_OrderDetail::kTraderIdFieldNumber;
const int OptionQueryOrderResp_OrderDetail::kOrdernoFieldNumber;
const int OptionQueryOrderResp_OrderDetail::kOrderTimeFieldNumber;
const int OptionQueryOrderResp_OrderDetail::kMatchQtyFieldNumber;
const int OptionQueryOrderResp_OrderDetail::kMatchAmtFieldNumber;
const int OptionQueryOrderResp_OrderDetail::kMatchPriceFieldNumber;
const int OptionQueryOrderResp_OrderDetail::kCancelQtyFieldNumber;
const int OptionQueryOrderResp_OrderDetail::kStateFieldNumber;
const int OptionQueryOrderResp_OrderDetail::kInfoFieldNumber;
const int OptionQueryOrderResp_OrderDetail::kOrderIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionQueryOrderResp_OrderDetail::OptionQueryOrderResp_OrderDetail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionQueryOrderResp_OrderDetail.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.OptionQueryOrderResp.OrderDetail)
}
OptionQueryOrderResp_OrderDetail::OptionQueryOrderResp_OrderDetail(const OptionQueryOrderResp_OrderDetail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  policy_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_policy_id()) {
    policy_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_id_);
  }
  index_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_index_id()) {
    index_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.index_id_);
  }
  match_condition_.UnsafeSetDefault(&::autotrade::OptionQueryOrderResp_OrderDetail::_i_give_permission_to_break_this_code_default_match_condition_.get());
  if (from.has_match_condition()) {
    match_condition_.AssignWithDefault(&::autotrade::OptionQueryOrderResp_OrderDetail::_i_give_permission_to_break_this_code_default_match_condition_.get(), from.match_condition_);
  }
  trader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trader_id()) {
    trader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trader_id_);
  }
  orderno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_orderno()) {
    orderno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderno_);
  }
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_info()) {
    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_id()) {
    order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&price_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:autotrade.OptionQueryOrderResp.OrderDetail)
}

void OptionQueryOrderResp_OrderDetail::SharedCtor() {
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  policy_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  match_condition_.UnsafeSetDefault(&::autotrade::OptionQueryOrderResp_OrderDetail::_i_give_permission_to_break_this_code_default_match_condition_.get());
  trader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&price_)) + sizeof(state_));
}

OptionQueryOrderResp_OrderDetail::~OptionQueryOrderResp_OrderDetail() {
  // @@protoc_insertion_point(destructor:autotrade.OptionQueryOrderResp.OrderDetail)
  SharedDtor();
}

void OptionQueryOrderResp_OrderDetail::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  policy_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  match_condition_.DestroyNoArena(&::autotrade::OptionQueryOrderResp_OrderDetail::_i_give_permission_to_break_this_code_default_match_condition_.get());
  trader_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderno_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OptionQueryOrderResp_OrderDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OptionQueryOrderResp_OrderDetail::descriptor() {
  ::protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OptionQueryOrderResp_OrderDetail& OptionQueryOrderResp_OrderDetail::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionQueryOrderResp_OrderDetail.base);
  return *internal_default_instance();
}


void OptionQueryOrderResp_OrderDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.OptionQueryOrderResp.OrderDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      policy_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      index_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      match_condition_.UnsafeMutablePointer()->assign(*&::autotrade::OptionQueryOrderResp_OrderDetail::_i_give_permission_to_break_this_code_default_match_condition_.get());
    }
    if (cached_has_bits & 0x00000020u) {
      trader_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      orderno_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      info_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    order_id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 65024u) {
    ::memset(&price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&covered_flag_) -
        reinterpret_cast<char*>(&price_)) + sizeof(covered_flag_));
  }
  if (cached_has_bits & 4128768u) {
    ::memset(&order_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&order_time_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OptionQueryOrderResp_OrderDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.OptionQueryOrderResp.OrderDetail)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionQueryOrderResp.OrderDetail.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionQueryOrderResp.OrderDetail.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double price = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 qty = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bsflag = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_bsflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bsflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 market = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_market();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &market_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string policy_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_policy_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->policy_id().data(), static_cast<int>(this->policy_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionQueryOrderResp.OrderDetail.policy_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string index_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_index_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->index_id().data(), static_cast<int>(this->index_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionQueryOrderResp.OrderDetail.index_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 kpcbj = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_kpcbj();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kpcbj_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 order_price_type = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_order_price_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_price_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 covered_flag = 11 [default = 0];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_covered_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &covered_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string match_condition = 12 [default = "GFD"];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_match_condition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->match_condition().data(), static_cast<int>(this->match_condition().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionQueryOrderResp.OrderDetail.match_condition");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string trader_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trader_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trader_id().data(), static_cast<int>(this->trader_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionQueryOrderResp.OrderDetail.trader_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string orderno = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orderno().data(), static_cast<int>(this->orderno().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionQueryOrderResp.OrderDetail.orderno");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 order_time = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_order_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 match_qty = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_match_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &match_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double match_amt = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {
          set_has_match_amt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &match_amt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double match_price = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {
          set_has_match_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &match_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 cancel_qty = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_cancel_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cancel_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 state = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string info = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info().data(), static_cast<int>(this->info().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionQueryOrderResp.OrderDetail.info");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_id = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_id().data(), static_cast<int>(this->order_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionQueryOrderResp.OrderDetail.order_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.OptionQueryOrderResp.OrderDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.OptionQueryOrderResp.OrderDetail)
  return false;
#undef DO_
}

void OptionQueryOrderResp_OrderDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.OptionQueryOrderResp.OrderDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrderResp.OrderDetail.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->code(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrderResp.OrderDetail.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional double price = 3;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->price(), output);
  }

  // optional int64 qty = 4;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->qty(), output);
  }

  // optional int64 bsflag = 5;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->bsflag(), output);
  }

  // optional int64 market = 6;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->market(), output);
  }

  // optional string policy_id = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->policy_id().data(), static_cast<int>(this->policy_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrderResp.OrderDetail.policy_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->policy_id(), output);
  }

  // optional string index_id = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->index_id().data(), static_cast<int>(this->index_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrderResp.OrderDetail.index_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->index_id(), output);
  }

  // optional int32 kpcbj = 9;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->kpcbj(), output);
  }

  // optional int32 order_price_type = 10 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->order_price_type(), output);
  }

  // optional int32 covered_flag = 11 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->covered_flag(), output);
  }

  // optional string match_condition = 12 [default = "GFD"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_condition().data(), static_cast<int>(this->match_condition().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrderResp.OrderDetail.match_condition");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->match_condition(), output);
  }

  // optional string trader_id = 13;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trader_id().data(), static_cast<int>(this->trader_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrderResp.OrderDetail.trader_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->trader_id(), output);
  }

  // optional string orderno = 14;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderno().data(), static_cast<int>(this->orderno().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrderResp.OrderDetail.orderno");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->orderno(), output);
  }

  // optional uint32 order_time = 15;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->order_time(), output);
  }

  // optional int64 match_qty = 16;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->match_qty(), output);
  }

  // optional double match_amt = 17;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->match_amt(), output);
  }

  // optional double match_price = 18;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->match_price(), output);
  }

  // optional int64 cancel_qty = 19;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->cancel_qty(), output);
  }

  // optional int32 state = 20;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->state(), output);
  }

  // optional string info = 21;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), static_cast<int>(this->info().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrderResp.OrderDetail.info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->info(), output);
  }

  // optional string order_id = 22;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrderResp.OrderDetail.order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->order_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.OptionQueryOrderResp.OrderDetail)
}

::google::protobuf::uint8* OptionQueryOrderResp_OrderDetail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.OptionQueryOrderResp.OrderDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrderResp.OrderDetail.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrderResp.OrderDetail.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional double price = 3;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->price(), target);
  }

  // optional int64 qty = 4;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->qty(), target);
  }

  // optional int64 bsflag = 5;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->bsflag(), target);
  }

  // optional int64 market = 6;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->market(), target);
  }

  // optional string policy_id = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->policy_id().data(), static_cast<int>(this->policy_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrderResp.OrderDetail.policy_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->policy_id(), target);
  }

  // optional string index_id = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->index_id().data(), static_cast<int>(this->index_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrderResp.OrderDetail.index_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->index_id(), target);
  }

  // optional int32 kpcbj = 9;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->kpcbj(), target);
  }

  // optional int32 order_price_type = 10 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->order_price_type(), target);
  }

  // optional int32 covered_flag = 11 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->covered_flag(), target);
  }

  // optional string match_condition = 12 [default = "GFD"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_condition().data(), static_cast<int>(this->match_condition().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrderResp.OrderDetail.match_condition");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->match_condition(), target);
  }

  // optional string trader_id = 13;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trader_id().data(), static_cast<int>(this->trader_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrderResp.OrderDetail.trader_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->trader_id(), target);
  }

  // optional string orderno = 14;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderno().data(), static_cast<int>(this->orderno().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrderResp.OrderDetail.orderno");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->orderno(), target);
  }

  // optional uint32 order_time = 15;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->order_time(), target);
  }

  // optional int64 match_qty = 16;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->match_qty(), target);
  }

  // optional double match_amt = 17;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->match_amt(), target);
  }

  // optional double match_price = 18;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->match_price(), target);
  }

  // optional int64 cancel_qty = 19;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->cancel_qty(), target);
  }

  // optional int32 state = 20;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->state(), target);
  }

  // optional string info = 21;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), static_cast<int>(this->info().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrderResp.OrderDetail.info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->info(), target);
  }

  // optional string order_id = 22;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrderResp.OrderDetail.order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->order_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.OptionQueryOrderResp.OrderDetail)
  return target;
}

size_t OptionQueryOrderResp_OrderDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.OptionQueryOrderResp.OrderDetail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string policy_id = 7;
    if (has_policy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->policy_id());
    }

    // optional string index_id = 8;
    if (has_index_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->index_id());
    }

    // optional string match_condition = 12 [default = "GFD"];
    if (has_match_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->match_condition());
    }

    // optional string trader_id = 13;
    if (has_trader_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trader_id());
    }

    // optional string orderno = 14;
    if (has_orderno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderno());
    }

    // optional string info = 21;
    if (has_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string order_id = 22;
    if (has_order_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_id());
    }

    // optional double price = 3;
    if (has_price()) {
      total_size += 1 + 8;
    }

    // optional int64 qty = 4;
    if (has_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->qty());
    }

    // optional int64 bsflag = 5;
    if (has_bsflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bsflag());
    }

    // optional int64 market = 6;
    if (has_market()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->market());
    }

    // optional int32 kpcbj = 9;
    if (has_kpcbj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kpcbj());
    }

    // optional int32 order_price_type = 10 [default = 0];
    if (has_order_price_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order_price_type());
    }

    // optional int32 covered_flag = 11 [default = 0];
    if (has_covered_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->covered_flag());
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional uint32 order_time = 15;
    if (has_order_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order_time());
    }

    // optional int64 match_qty = 16;
    if (has_match_qty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->match_qty());
    }

    // optional double match_amt = 17;
    if (has_match_amt()) {
      total_size += 2 + 8;
    }

    // optional double match_price = 18;
    if (has_match_price()) {
      total_size += 2 + 8;
    }

    // optional int64 cancel_qty = 19;
    if (has_cancel_qty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cancel_qty());
    }

    // optional int32 state = 20;
    if (has_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionQueryOrderResp_OrderDetail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.OptionQueryOrderResp.OrderDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionQueryOrderResp_OrderDetail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionQueryOrderResp_OrderDetail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.OptionQueryOrderResp.OrderDetail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.OptionQueryOrderResp.OrderDetail)
    MergeFrom(*source);
  }
}

void OptionQueryOrderResp_OrderDetail::MergeFrom(const OptionQueryOrderResp_OrderDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.OptionQueryOrderResp.OrderDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_policy_id();
      policy_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_index_id();
      index_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.index_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_match_condition();
      match_condition_.AssignWithDefault(&::autotrade::OptionQueryOrderResp_OrderDetail::_i_give_permission_to_break_this_code_default_match_condition_.get(), from.match_condition_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_trader_id();
      trader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trader_id_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_orderno();
      orderno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderno_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_info();
      info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_order_id();
      order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
    }
    if (cached_has_bits & 0x00000200u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000400u) {
      qty_ = from.qty_;
    }
    if (cached_has_bits & 0x00000800u) {
      bsflag_ = from.bsflag_;
    }
    if (cached_has_bits & 0x00001000u) {
      market_ = from.market_;
    }
    if (cached_has_bits & 0x00002000u) {
      kpcbj_ = from.kpcbj_;
    }
    if (cached_has_bits & 0x00004000u) {
      order_price_type_ = from.order_price_type_;
    }
    if (cached_has_bits & 0x00008000u) {
      covered_flag_ = from.covered_flag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4128768u) {
    if (cached_has_bits & 0x00010000u) {
      order_time_ = from.order_time_;
    }
    if (cached_has_bits & 0x00020000u) {
      match_qty_ = from.match_qty_;
    }
    if (cached_has_bits & 0x00040000u) {
      match_amt_ = from.match_amt_;
    }
    if (cached_has_bits & 0x00080000u) {
      match_price_ = from.match_price_;
    }
    if (cached_has_bits & 0x00100000u) {
      cancel_qty_ = from.cancel_qty_;
    }
    if (cached_has_bits & 0x00200000u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OptionQueryOrderResp_OrderDetail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.OptionQueryOrderResp.OrderDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionQueryOrderResp_OrderDetail::CopyFrom(const OptionQueryOrderResp_OrderDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.OptionQueryOrderResp.OrderDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionQueryOrderResp_OrderDetail::IsInitialized() const {
  return true;
}

void OptionQueryOrderResp_OrderDetail::Swap(OptionQueryOrderResp_OrderDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionQueryOrderResp_OrderDetail::InternalSwap(OptionQueryOrderResp_OrderDetail* other) {
  using std::swap;
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  policy_id_.Swap(&other->policy_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  index_id_.Swap(&other->index_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  match_condition_.Swap(&other->match_condition_, &::autotrade::OptionQueryOrderResp_OrderDetail::_i_give_permission_to_break_this_code_default_match_condition_.get(),
    GetArenaNoVirtual());
  trader_id_.Swap(&other->trader_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  orderno_.Swap(&other->orderno_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  info_.Swap(&other->info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_id_.Swap(&other->order_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(price_, other->price_);
  swap(qty_, other->qty_);
  swap(bsflag_, other->bsflag_);
  swap(market_, other->market_);
  swap(kpcbj_, other->kpcbj_);
  swap(order_price_type_, other->order_price_type_);
  swap(covered_flag_, other->covered_flag_);
  swap(order_time_, other->order_time_);
  swap(match_qty_, other->match_qty_);
  swap(match_amt_, other->match_amt_);
  swap(match_price_, other->match_price_);
  swap(cancel_qty_, other->cancel_qty_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OptionQueryOrderResp_OrderDetail::GetMetadata() const {
  protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OptionQueryOrderResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionQueryOrderResp::kFuncidFieldNumber;
const int OptionQueryOrderResp::kDetailListFieldNumber;
const int OptionQueryOrderResp::kLastPosFieldNumber;
const int OptionQueryOrderResp::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionQueryOrderResp::OptionQueryOrderResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionQueryOrderResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.OptionQueryOrderResp)
}
OptionQueryOrderResp::OptionQueryOrderResp(const OptionQueryOrderResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      detail_list_(from.detail_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  last_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_last_pos()) {
    last_pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_pos_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:autotrade.OptionQueryOrderResp)
}

void OptionQueryOrderResp::SharedCtor() {
  last_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  funcid_ = 13102002;
}

OptionQueryOrderResp::~OptionQueryOrderResp() {
  // @@protoc_insertion_point(destructor:autotrade.OptionQueryOrderResp)
  SharedDtor();
}

void OptionQueryOrderResp::SharedDtor() {
  last_pos_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OptionQueryOrderResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OptionQueryOrderResp::descriptor() {
  ::protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OptionQueryOrderResp& OptionQueryOrderResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionQueryOrderResp.base);
  return *internal_default_instance();
}


void OptionQueryOrderResp::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.OptionQueryOrderResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detail_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      last_pos_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    funcid_ = 13102002;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OptionQueryOrderResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.OptionQueryOrderResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 13102002];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autotrade.OptionQueryOrderResp.OrderDetail detail_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_detail_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string last_pos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_pos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->last_pos().data(), static_cast<int>(this->last_pos().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionQueryOrderResp.last_pos");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionQueryOrderResp.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.OptionQueryOrderResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.OptionQueryOrderResp)
  return false;
#undef DO_
}

void OptionQueryOrderResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.OptionQueryOrderResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13102002];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // repeated .autotrade.OptionQueryOrderResp.OrderDetail detail_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detail_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->detail_list(static_cast<int>(i)),
      output);
  }

  // optional string last_pos = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_pos().data(), static_cast<int>(this->last_pos().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrderResp.last_pos");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->last_pos(), output);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrderResp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.OptionQueryOrderResp)
}

::google::protobuf::uint8* OptionQueryOrderResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.OptionQueryOrderResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13102002];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // repeated .autotrade.OptionQueryOrderResp.OrderDetail detail_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detail_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->detail_list(static_cast<int>(i)), deterministic, target);
  }

  // optional string last_pos = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_pos().data(), static_cast<int>(this->last_pos().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrderResp.last_pos");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->last_pos(), target);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrderResp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.OptionQueryOrderResp)
  return target;
}

size_t OptionQueryOrderResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.OptionQueryOrderResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .autotrade.OptionQueryOrderResp.OrderDetail detail_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->detail_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->detail_list(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string last_pos = 3;
    if (has_last_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_pos());
    }

    // optional string request_id = 4;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional int32 funcid = 1 [default = 13102002];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionQueryOrderResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.OptionQueryOrderResp)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionQueryOrderResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionQueryOrderResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.OptionQueryOrderResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.OptionQueryOrderResp)
    MergeFrom(*source);
  }
}

void OptionQueryOrderResp::MergeFrom(const OptionQueryOrderResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.OptionQueryOrderResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detail_list_.MergeFrom(from.detail_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_last_pos();
      last_pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_pos_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OptionQueryOrderResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.OptionQueryOrderResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionQueryOrderResp::CopyFrom(const OptionQueryOrderResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.OptionQueryOrderResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionQueryOrderResp::IsInitialized() const {
  return true;
}

void OptionQueryOrderResp::Swap(OptionQueryOrderResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionQueryOrderResp::InternalSwap(OptionQueryOrderResp* other) {
  using std::swap;
  CastToBase(&detail_list_)->InternalSwap(CastToBase(&other->detail_list_));
  last_pos_.Swap(&other->last_pos_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OptionQueryOrderResp::GetMetadata() const {
  protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OptionQueryOrdersReqt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionQueryOrdersReqt::kFuncidFieldNumber;
const int OptionQueryOrdersReqt::kOrderGroupFieldNumber;
const int OptionQueryOrdersReqt::kRequestIdFieldNumber;
const int OptionQueryOrdersReqt::kRequestTimeFieldNumber;
const int OptionQueryOrdersReqt::kActiveIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionQueryOrdersReqt::OptionQueryOrdersReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionQueryOrdersReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.OptionQueryOrdersReqt)
}
OptionQueryOrdersReqt::OptionQueryOrdersReqt(const OptionQueryOrdersReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_group()) {
    order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  ::memcpy(&request_time_, &from.request_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_interval_) -
    reinterpret_cast<char*>(&request_time_)) + sizeof(active_interval_));
  // @@protoc_insertion_point(copy_constructor:autotrade.OptionQueryOrdersReqt)
}

void OptionQueryOrdersReqt::SharedCtor() {
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_time_ = GOOGLE_LONGLONG(0);
  funcid_ = 13002003;
  active_interval_ = GOOGLE_LONGLONG(1000);
}

OptionQueryOrdersReqt::~OptionQueryOrdersReqt() {
  // @@protoc_insertion_point(destructor:autotrade.OptionQueryOrdersReqt)
  SharedDtor();
}

void OptionQueryOrdersReqt::SharedDtor() {
  order_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OptionQueryOrdersReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OptionQueryOrdersReqt::descriptor() {
  ::protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OptionQueryOrdersReqt& OptionQueryOrdersReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionQueryOrdersReqt.base);
  return *internal_default_instance();
}


void OptionQueryOrdersReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.OptionQueryOrdersReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      order_group_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 28u) {
    request_time_ = GOOGLE_LONGLONG(0);
    funcid_ = 13002003;
    active_interval_ = GOOGLE_LONGLONG(1000);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OptionQueryOrdersReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.OptionQueryOrdersReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 13002003];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_group = 2 [default = ""];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_group().data(), static_cast<int>(this->order_group().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionQueryOrdersReqt.order_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionQueryOrdersReqt.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 request_time = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_request_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 active_interval = 5 [default = 1000];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_active_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &active_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.OptionQueryOrdersReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.OptionQueryOrdersReqt)
  return false;
#undef DO_
}

void OptionQueryOrdersReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.OptionQueryOrdersReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13002003];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional string order_group = 2 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrdersReqt.order_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->order_group(), output);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrdersReqt.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->request_id(), output);
  }

  // optional int64 request_time = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->request_time(), output);
  }

  // optional int64 active_interval = 5 [default = 1000];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->active_interval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.OptionQueryOrdersReqt)
}

::google::protobuf::uint8* OptionQueryOrdersReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.OptionQueryOrdersReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13002003];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional string order_group = 2 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrdersReqt.order_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->order_group(), target);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrdersReqt.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->request_id(), target);
  }

  // optional int64 request_time = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->request_time(), target);
  }

  // optional int64 active_interval = 5 [default = 1000];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->active_interval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.OptionQueryOrdersReqt)
  return target;
}

size_t OptionQueryOrdersReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.OptionQueryOrdersReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string order_group = 2 [default = ""];
    if (has_order_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_group());
    }

    // optional string request_id = 3;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional int64 request_time = 4 [default = 0];
    if (has_request_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->request_time());
    }

    // optional int32 funcid = 1 [default = 13002003];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

    // optional int64 active_interval = 5 [default = 1000];
    if (has_active_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->active_interval());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionQueryOrdersReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.OptionQueryOrdersReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionQueryOrdersReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionQueryOrdersReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.OptionQueryOrdersReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.OptionQueryOrdersReqt)
    MergeFrom(*source);
  }
}

void OptionQueryOrdersReqt::MergeFrom(const OptionQueryOrdersReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.OptionQueryOrdersReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_order_group();
      order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      request_time_ = from.request_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      funcid_ = from.funcid_;
    }
    if (cached_has_bits & 0x00000010u) {
      active_interval_ = from.active_interval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OptionQueryOrdersReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.OptionQueryOrdersReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionQueryOrdersReqt::CopyFrom(const OptionQueryOrdersReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.OptionQueryOrdersReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionQueryOrdersReqt::IsInitialized() const {
  return true;
}

void OptionQueryOrdersReqt::Swap(OptionQueryOrdersReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionQueryOrdersReqt::InternalSwap(OptionQueryOrdersReqt* other) {
  using std::swap;
  order_group_.Swap(&other->order_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(request_time_, other->request_time_);
  swap(funcid_, other->funcid_);
  swap(active_interval_, other->active_interval_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OptionQueryOrdersReqt::GetMetadata() const {
  protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OptionQueryOrdersResp_OrderDetail::InitAsDefaultInstance() {
}
::google::protobuf::internal::ExplicitlyConstructed<::std::string> OptionQueryOrdersResp_OrderDetail::_i_give_permission_to_break_this_code_default_match_condition_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionQueryOrdersResp_OrderDetail::kCodeFieldNumber;
const int OptionQueryOrdersResp_OrderDetail::kNameFieldNumber;
const int OptionQueryOrdersResp_OrderDetail::kPriceFieldNumber;
const int OptionQueryOrdersResp_OrderDetail::kQtyFieldNumber;
const int OptionQueryOrdersResp_OrderDetail::kBsflagFieldNumber;
const int OptionQueryOrdersResp_OrderDetail::kMarketFieldNumber;
const int OptionQueryOrdersResp_OrderDetail::kPolicyIdFieldNumber;
const int OptionQueryOrdersResp_OrderDetail::kIndexIdFieldNumber;
const int OptionQueryOrdersResp_OrderDetail::kKpcbjFieldNumber;
const int OptionQueryOrdersResp_OrderDetail::kOrderPriceTypeFieldNumber;
const int OptionQueryOrdersResp_OrderDetail::kCoveredFlagFieldNumber;
const int OptionQueryOrdersResp_OrderDetail::kMatchConditionFieldNumber;
const int OptionQueryOrdersResp_OrderDetail::kTraderIdFieldNumber;
const int OptionQueryOrdersResp_OrderDetail::kOrdernoFieldNumber;
const int OptionQueryOrdersResp_OrderDetail::kOrderTimeFieldNumber;
const int OptionQueryOrdersResp_OrderDetail::kMatchQtyFieldNumber;
const int OptionQueryOrdersResp_OrderDetail::kMatchAmtFieldNumber;
const int OptionQueryOrdersResp_OrderDetail::kMatchPriceFieldNumber;
const int OptionQueryOrdersResp_OrderDetail::kCancelQtyFieldNumber;
const int OptionQueryOrdersResp_OrderDetail::kStateFieldNumber;
const int OptionQueryOrdersResp_OrderDetail::kInfoFieldNumber;
const int OptionQueryOrdersResp_OrderDetail::kOrderIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionQueryOrdersResp_OrderDetail::OptionQueryOrdersResp_OrderDetail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionQueryOrdersResp_OrderDetail.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.OptionQueryOrdersResp.OrderDetail)
}
OptionQueryOrdersResp_OrderDetail::OptionQueryOrdersResp_OrderDetail(const OptionQueryOrdersResp_OrderDetail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  policy_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_policy_id()) {
    policy_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_id_);
  }
  index_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_index_id()) {
    index_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.index_id_);
  }
  match_condition_.UnsafeSetDefault(&::autotrade::OptionQueryOrdersResp_OrderDetail::_i_give_permission_to_break_this_code_default_match_condition_.get());
  if (from.has_match_condition()) {
    match_condition_.AssignWithDefault(&::autotrade::OptionQueryOrdersResp_OrderDetail::_i_give_permission_to_break_this_code_default_match_condition_.get(), from.match_condition_);
  }
  trader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trader_id()) {
    trader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trader_id_);
  }
  orderno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_orderno()) {
    orderno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderno_);
  }
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_info()) {
    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_id()) {
    order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&price_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:autotrade.OptionQueryOrdersResp.OrderDetail)
}

void OptionQueryOrdersResp_OrderDetail::SharedCtor() {
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  policy_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  match_condition_.UnsafeSetDefault(&::autotrade::OptionQueryOrdersResp_OrderDetail::_i_give_permission_to_break_this_code_default_match_condition_.get());
  trader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&price_)) + sizeof(state_));
}

OptionQueryOrdersResp_OrderDetail::~OptionQueryOrdersResp_OrderDetail() {
  // @@protoc_insertion_point(destructor:autotrade.OptionQueryOrdersResp.OrderDetail)
  SharedDtor();
}

void OptionQueryOrdersResp_OrderDetail::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  policy_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  match_condition_.DestroyNoArena(&::autotrade::OptionQueryOrdersResp_OrderDetail::_i_give_permission_to_break_this_code_default_match_condition_.get());
  trader_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderno_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OptionQueryOrdersResp_OrderDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OptionQueryOrdersResp_OrderDetail::descriptor() {
  ::protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OptionQueryOrdersResp_OrderDetail& OptionQueryOrdersResp_OrderDetail::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionQueryOrdersResp_OrderDetail.base);
  return *internal_default_instance();
}


void OptionQueryOrdersResp_OrderDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.OptionQueryOrdersResp.OrderDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      policy_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      index_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      match_condition_.UnsafeMutablePointer()->assign(*&::autotrade::OptionQueryOrdersResp_OrderDetail::_i_give_permission_to_break_this_code_default_match_condition_.get());
    }
    if (cached_has_bits & 0x00000020u) {
      trader_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      orderno_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      info_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    order_id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 65024u) {
    ::memset(&price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&covered_flag_) -
        reinterpret_cast<char*>(&price_)) + sizeof(covered_flag_));
  }
  if (cached_has_bits & 4128768u) {
    ::memset(&order_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&order_time_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OptionQueryOrdersResp_OrderDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.OptionQueryOrdersResp.OrderDetail)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionQueryOrdersResp.OrderDetail.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionQueryOrdersResp.OrderDetail.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double price = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 qty = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bsflag = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_bsflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bsflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 market = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_market();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &market_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string policy_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_policy_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->policy_id().data(), static_cast<int>(this->policy_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionQueryOrdersResp.OrderDetail.policy_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string index_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_index_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->index_id().data(), static_cast<int>(this->index_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionQueryOrdersResp.OrderDetail.index_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 kpcbj = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_kpcbj();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kpcbj_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 order_price_type = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_order_price_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_price_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 covered_flag = 11 [default = 0];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_covered_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &covered_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string match_condition = 12 [default = "GFD"];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_match_condition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->match_condition().data(), static_cast<int>(this->match_condition().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionQueryOrdersResp.OrderDetail.match_condition");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string trader_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trader_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trader_id().data(), static_cast<int>(this->trader_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionQueryOrdersResp.OrderDetail.trader_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string orderno = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orderno().data(), static_cast<int>(this->orderno().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionQueryOrdersResp.OrderDetail.orderno");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 order_time = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_order_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 match_qty = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_match_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &match_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double match_amt = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {
          set_has_match_amt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &match_amt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double match_price = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {
          set_has_match_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &match_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 cancel_qty = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_cancel_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cancel_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 state = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string info = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info().data(), static_cast<int>(this->info().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionQueryOrdersResp.OrderDetail.info");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_id = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_id().data(), static_cast<int>(this->order_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionQueryOrdersResp.OrderDetail.order_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.OptionQueryOrdersResp.OrderDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.OptionQueryOrdersResp.OrderDetail)
  return false;
#undef DO_
}

void OptionQueryOrdersResp_OrderDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.OptionQueryOrdersResp.OrderDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrdersResp.OrderDetail.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->code(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrdersResp.OrderDetail.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional double price = 3;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->price(), output);
  }

  // optional int64 qty = 4;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->qty(), output);
  }

  // optional int64 bsflag = 5;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->bsflag(), output);
  }

  // optional int64 market = 6;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->market(), output);
  }

  // optional string policy_id = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->policy_id().data(), static_cast<int>(this->policy_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrdersResp.OrderDetail.policy_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->policy_id(), output);
  }

  // optional string index_id = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->index_id().data(), static_cast<int>(this->index_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrdersResp.OrderDetail.index_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->index_id(), output);
  }

  // optional int32 kpcbj = 9;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->kpcbj(), output);
  }

  // optional int32 order_price_type = 10 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->order_price_type(), output);
  }

  // optional int32 covered_flag = 11 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->covered_flag(), output);
  }

  // optional string match_condition = 12 [default = "GFD"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_condition().data(), static_cast<int>(this->match_condition().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrdersResp.OrderDetail.match_condition");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->match_condition(), output);
  }

  // optional string trader_id = 13;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trader_id().data(), static_cast<int>(this->trader_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrdersResp.OrderDetail.trader_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->trader_id(), output);
  }

  // optional string orderno = 14;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderno().data(), static_cast<int>(this->orderno().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrdersResp.OrderDetail.orderno");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->orderno(), output);
  }

  // optional uint32 order_time = 15;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->order_time(), output);
  }

  // optional int64 match_qty = 16;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->match_qty(), output);
  }

  // optional double match_amt = 17;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->match_amt(), output);
  }

  // optional double match_price = 18;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->match_price(), output);
  }

  // optional int64 cancel_qty = 19;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->cancel_qty(), output);
  }

  // optional int32 state = 20;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->state(), output);
  }

  // optional string info = 21;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), static_cast<int>(this->info().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrdersResp.OrderDetail.info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->info(), output);
  }

  // optional string order_id = 22;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrdersResp.OrderDetail.order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->order_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.OptionQueryOrdersResp.OrderDetail)
}

::google::protobuf::uint8* OptionQueryOrdersResp_OrderDetail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.OptionQueryOrdersResp.OrderDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrdersResp.OrderDetail.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrdersResp.OrderDetail.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional double price = 3;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->price(), target);
  }

  // optional int64 qty = 4;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->qty(), target);
  }

  // optional int64 bsflag = 5;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->bsflag(), target);
  }

  // optional int64 market = 6;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->market(), target);
  }

  // optional string policy_id = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->policy_id().data(), static_cast<int>(this->policy_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrdersResp.OrderDetail.policy_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->policy_id(), target);
  }

  // optional string index_id = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->index_id().data(), static_cast<int>(this->index_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrdersResp.OrderDetail.index_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->index_id(), target);
  }

  // optional int32 kpcbj = 9;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->kpcbj(), target);
  }

  // optional int32 order_price_type = 10 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->order_price_type(), target);
  }

  // optional int32 covered_flag = 11 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->covered_flag(), target);
  }

  // optional string match_condition = 12 [default = "GFD"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_condition().data(), static_cast<int>(this->match_condition().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrdersResp.OrderDetail.match_condition");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->match_condition(), target);
  }

  // optional string trader_id = 13;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trader_id().data(), static_cast<int>(this->trader_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrdersResp.OrderDetail.trader_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->trader_id(), target);
  }

  // optional string orderno = 14;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderno().data(), static_cast<int>(this->orderno().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrdersResp.OrderDetail.orderno");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->orderno(), target);
  }

  // optional uint32 order_time = 15;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->order_time(), target);
  }

  // optional int64 match_qty = 16;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->match_qty(), target);
  }

  // optional double match_amt = 17;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->match_amt(), target);
  }

  // optional double match_price = 18;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->match_price(), target);
  }

  // optional int64 cancel_qty = 19;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->cancel_qty(), target);
  }

  // optional int32 state = 20;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->state(), target);
  }

  // optional string info = 21;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), static_cast<int>(this->info().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrdersResp.OrderDetail.info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->info(), target);
  }

  // optional string order_id = 22;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrdersResp.OrderDetail.order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->order_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.OptionQueryOrdersResp.OrderDetail)
  return target;
}

size_t OptionQueryOrdersResp_OrderDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.OptionQueryOrdersResp.OrderDetail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string policy_id = 7;
    if (has_policy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->policy_id());
    }

    // optional string index_id = 8;
    if (has_index_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->index_id());
    }

    // optional string match_condition = 12 [default = "GFD"];
    if (has_match_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->match_condition());
    }

    // optional string trader_id = 13;
    if (has_trader_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trader_id());
    }

    // optional string orderno = 14;
    if (has_orderno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderno());
    }

    // optional string info = 21;
    if (has_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string order_id = 22;
    if (has_order_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_id());
    }

    // optional double price = 3;
    if (has_price()) {
      total_size += 1 + 8;
    }

    // optional int64 qty = 4;
    if (has_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->qty());
    }

    // optional int64 bsflag = 5;
    if (has_bsflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bsflag());
    }

    // optional int64 market = 6;
    if (has_market()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->market());
    }

    // optional int32 kpcbj = 9;
    if (has_kpcbj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kpcbj());
    }

    // optional int32 order_price_type = 10 [default = 0];
    if (has_order_price_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order_price_type());
    }

    // optional int32 covered_flag = 11 [default = 0];
    if (has_covered_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->covered_flag());
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional uint32 order_time = 15;
    if (has_order_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order_time());
    }

    // optional int64 match_qty = 16;
    if (has_match_qty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->match_qty());
    }

    // optional double match_amt = 17;
    if (has_match_amt()) {
      total_size += 2 + 8;
    }

    // optional double match_price = 18;
    if (has_match_price()) {
      total_size += 2 + 8;
    }

    // optional int64 cancel_qty = 19;
    if (has_cancel_qty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cancel_qty());
    }

    // optional int32 state = 20;
    if (has_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionQueryOrdersResp_OrderDetail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.OptionQueryOrdersResp.OrderDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionQueryOrdersResp_OrderDetail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionQueryOrdersResp_OrderDetail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.OptionQueryOrdersResp.OrderDetail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.OptionQueryOrdersResp.OrderDetail)
    MergeFrom(*source);
  }
}

void OptionQueryOrdersResp_OrderDetail::MergeFrom(const OptionQueryOrdersResp_OrderDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.OptionQueryOrdersResp.OrderDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_policy_id();
      policy_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_index_id();
      index_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.index_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_match_condition();
      match_condition_.AssignWithDefault(&::autotrade::OptionQueryOrdersResp_OrderDetail::_i_give_permission_to_break_this_code_default_match_condition_.get(), from.match_condition_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_trader_id();
      trader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trader_id_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_orderno();
      orderno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderno_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_info();
      info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_order_id();
      order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
    }
    if (cached_has_bits & 0x00000200u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000400u) {
      qty_ = from.qty_;
    }
    if (cached_has_bits & 0x00000800u) {
      bsflag_ = from.bsflag_;
    }
    if (cached_has_bits & 0x00001000u) {
      market_ = from.market_;
    }
    if (cached_has_bits & 0x00002000u) {
      kpcbj_ = from.kpcbj_;
    }
    if (cached_has_bits & 0x00004000u) {
      order_price_type_ = from.order_price_type_;
    }
    if (cached_has_bits & 0x00008000u) {
      covered_flag_ = from.covered_flag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4128768u) {
    if (cached_has_bits & 0x00010000u) {
      order_time_ = from.order_time_;
    }
    if (cached_has_bits & 0x00020000u) {
      match_qty_ = from.match_qty_;
    }
    if (cached_has_bits & 0x00040000u) {
      match_amt_ = from.match_amt_;
    }
    if (cached_has_bits & 0x00080000u) {
      match_price_ = from.match_price_;
    }
    if (cached_has_bits & 0x00100000u) {
      cancel_qty_ = from.cancel_qty_;
    }
    if (cached_has_bits & 0x00200000u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OptionQueryOrdersResp_OrderDetail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.OptionQueryOrdersResp.OrderDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionQueryOrdersResp_OrderDetail::CopyFrom(const OptionQueryOrdersResp_OrderDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.OptionQueryOrdersResp.OrderDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionQueryOrdersResp_OrderDetail::IsInitialized() const {
  return true;
}

void OptionQueryOrdersResp_OrderDetail::Swap(OptionQueryOrdersResp_OrderDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionQueryOrdersResp_OrderDetail::InternalSwap(OptionQueryOrdersResp_OrderDetail* other) {
  using std::swap;
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  policy_id_.Swap(&other->policy_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  index_id_.Swap(&other->index_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  match_condition_.Swap(&other->match_condition_, &::autotrade::OptionQueryOrdersResp_OrderDetail::_i_give_permission_to_break_this_code_default_match_condition_.get(),
    GetArenaNoVirtual());
  trader_id_.Swap(&other->trader_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  orderno_.Swap(&other->orderno_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  info_.Swap(&other->info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_id_.Swap(&other->order_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(price_, other->price_);
  swap(qty_, other->qty_);
  swap(bsflag_, other->bsflag_);
  swap(market_, other->market_);
  swap(kpcbj_, other->kpcbj_);
  swap(order_price_type_, other->order_price_type_);
  swap(covered_flag_, other->covered_flag_);
  swap(order_time_, other->order_time_);
  swap(match_qty_, other->match_qty_);
  swap(match_amt_, other->match_amt_);
  swap(match_price_, other->match_price_);
  swap(cancel_qty_, other->cancel_qty_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OptionQueryOrdersResp_OrderDetail::GetMetadata() const {
  protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OptionQueryOrdersResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionQueryOrdersResp::kFuncidFieldNumber;
const int OptionQueryOrdersResp::kDetailListFieldNumber;
const int OptionQueryOrdersResp::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionQueryOrdersResp::OptionQueryOrdersResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionQueryOrdersResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.OptionQueryOrdersResp)
}
OptionQueryOrdersResp::OptionQueryOrdersResp(const OptionQueryOrdersResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      detail_list_(from.detail_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:autotrade.OptionQueryOrdersResp)
}

void OptionQueryOrdersResp::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  funcid_ = 13102003;
}

OptionQueryOrdersResp::~OptionQueryOrdersResp() {
  // @@protoc_insertion_point(destructor:autotrade.OptionQueryOrdersResp)
  SharedDtor();
}

void OptionQueryOrdersResp::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OptionQueryOrdersResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OptionQueryOrdersResp::descriptor() {
  ::protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OptionQueryOrdersResp& OptionQueryOrdersResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionQueryOrdersResp.base);
  return *internal_default_instance();
}


void OptionQueryOrdersResp::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.OptionQueryOrdersResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detail_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    funcid_ = 13102003;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OptionQueryOrdersResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.OptionQueryOrdersResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 13102003];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autotrade.OptionQueryOrdersResp.OrderDetail detail_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_detail_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionQueryOrdersResp.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.OptionQueryOrdersResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.OptionQueryOrdersResp)
  return false;
#undef DO_
}

void OptionQueryOrdersResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.OptionQueryOrdersResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13102003];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // repeated .autotrade.OptionQueryOrdersResp.OrderDetail detail_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detail_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->detail_list(static_cast<int>(i)),
      output);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrdersResp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.OptionQueryOrdersResp)
}

::google::protobuf::uint8* OptionQueryOrdersResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.OptionQueryOrdersResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13102003];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // repeated .autotrade.OptionQueryOrdersResp.OrderDetail detail_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detail_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->detail_list(static_cast<int>(i)), deterministic, target);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryOrdersResp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.OptionQueryOrdersResp)
  return target;
}

size_t OptionQueryOrdersResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.OptionQueryOrdersResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .autotrade.OptionQueryOrdersResp.OrderDetail detail_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->detail_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->detail_list(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string request_id = 3;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional int32 funcid = 1 [default = 13102003];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionQueryOrdersResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.OptionQueryOrdersResp)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionQueryOrdersResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionQueryOrdersResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.OptionQueryOrdersResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.OptionQueryOrdersResp)
    MergeFrom(*source);
  }
}

void OptionQueryOrdersResp::MergeFrom(const OptionQueryOrdersResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.OptionQueryOrdersResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detail_list_.MergeFrom(from.detail_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OptionQueryOrdersResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.OptionQueryOrdersResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionQueryOrdersResp::CopyFrom(const OptionQueryOrdersResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.OptionQueryOrdersResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionQueryOrdersResp::IsInitialized() const {
  return true;
}

void OptionQueryOrdersResp::Swap(OptionQueryOrdersResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionQueryOrdersResp::InternalSwap(OptionQueryOrdersResp* other) {
  using std::swap;
  CastToBase(&detail_list_)->InternalSwap(CastToBase(&other->detail_list_));
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OptionQueryOrdersResp::GetMetadata() const {
  protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OptionQueryCaptialReqt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionQueryCaptialReqt::kFuncidFieldNumber;
const int OptionQueryCaptialReqt::kMoneytypeFieldNumber;
const int OptionQueryCaptialReqt::kRequestIdFieldNumber;
const int OptionQueryCaptialReqt::kRequestTimeFieldNumber;
const int OptionQueryCaptialReqt::kActiveIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionQueryCaptialReqt::OptionQueryCaptialReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionQueryCaptialReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.OptionQueryCaptialReqt)
}
OptionQueryCaptialReqt::OptionQueryCaptialReqt(const OptionQueryCaptialReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  moneytype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_moneytype()) {
    moneytype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.moneytype_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  ::memcpy(&request_time_, &from.request_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_interval_) -
    reinterpret_cast<char*>(&request_time_)) + sizeof(active_interval_));
  // @@protoc_insertion_point(copy_constructor:autotrade.OptionQueryCaptialReqt)
}

void OptionQueryCaptialReqt::SharedCtor() {
  moneytype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_time_ = GOOGLE_LONGLONG(0);
  funcid_ = 13002010;
  active_interval_ = GOOGLE_LONGLONG(1000);
}

OptionQueryCaptialReqt::~OptionQueryCaptialReqt() {
  // @@protoc_insertion_point(destructor:autotrade.OptionQueryCaptialReqt)
  SharedDtor();
}

void OptionQueryCaptialReqt::SharedDtor() {
  moneytype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OptionQueryCaptialReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OptionQueryCaptialReqt::descriptor() {
  ::protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OptionQueryCaptialReqt& OptionQueryCaptialReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionQueryCaptialReqt.base);
  return *internal_default_instance();
}


void OptionQueryCaptialReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.OptionQueryCaptialReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      moneytype_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 28u) {
    request_time_ = GOOGLE_LONGLONG(0);
    funcid_ = 13002010;
    active_interval_ = GOOGLE_LONGLONG(1000);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OptionQueryCaptialReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.OptionQueryCaptialReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 13002010];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string moneytype = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_moneytype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->moneytype().data(), static_cast<int>(this->moneytype().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionQueryCaptialReqt.moneytype");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionQueryCaptialReqt.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 request_time = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_request_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 active_interval = 5 [default = 1000];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_active_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &active_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.OptionQueryCaptialReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.OptionQueryCaptialReqt)
  return false;
#undef DO_
}

void OptionQueryCaptialReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.OptionQueryCaptialReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13002010];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional string moneytype = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->moneytype().data(), static_cast<int>(this->moneytype().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryCaptialReqt.moneytype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->moneytype(), output);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryCaptialReqt.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->request_id(), output);
  }

  // optional int64 request_time = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->request_time(), output);
  }

  // optional int64 active_interval = 5 [default = 1000];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->active_interval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.OptionQueryCaptialReqt)
}

::google::protobuf::uint8* OptionQueryCaptialReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.OptionQueryCaptialReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13002010];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional string moneytype = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->moneytype().data(), static_cast<int>(this->moneytype().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryCaptialReqt.moneytype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->moneytype(), target);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryCaptialReqt.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->request_id(), target);
  }

  // optional int64 request_time = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->request_time(), target);
  }

  // optional int64 active_interval = 5 [default = 1000];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->active_interval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.OptionQueryCaptialReqt)
  return target;
}

size_t OptionQueryCaptialReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.OptionQueryCaptialReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string moneytype = 2;
    if (has_moneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->moneytype());
    }

    // optional string request_id = 3;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional int64 request_time = 4 [default = 0];
    if (has_request_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->request_time());
    }

    // optional int32 funcid = 1 [default = 13002010];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

    // optional int64 active_interval = 5 [default = 1000];
    if (has_active_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->active_interval());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionQueryCaptialReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.OptionQueryCaptialReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionQueryCaptialReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionQueryCaptialReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.OptionQueryCaptialReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.OptionQueryCaptialReqt)
    MergeFrom(*source);
  }
}

void OptionQueryCaptialReqt::MergeFrom(const OptionQueryCaptialReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.OptionQueryCaptialReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_moneytype();
      moneytype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.moneytype_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      request_time_ = from.request_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      funcid_ = from.funcid_;
    }
    if (cached_has_bits & 0x00000010u) {
      active_interval_ = from.active_interval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OptionQueryCaptialReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.OptionQueryCaptialReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionQueryCaptialReqt::CopyFrom(const OptionQueryCaptialReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.OptionQueryCaptialReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionQueryCaptialReqt::IsInitialized() const {
  return true;
}

void OptionQueryCaptialReqt::Swap(OptionQueryCaptialReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionQueryCaptialReqt::InternalSwap(OptionQueryCaptialReqt* other) {
  using std::swap;
  moneytype_.Swap(&other->moneytype_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(request_time_, other->request_time_);
  swap(funcid_, other->funcid_);
  swap(active_interval_, other->active_interval_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OptionQueryCaptialReqt::GetMetadata() const {
  protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OptionCapital::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionCapital::kFuncidFieldNumber;
const int OptionCapital::kMoneytypeFieldNumber;
const int OptionCapital::kFundBalFieldNumber;
const int OptionCapital::kFundAvaFieldNumber;
const int OptionCapital::kMarketValueFieldNumber;
const int OptionCapital::kRequestIdFieldNumber;
const int OptionCapital::kDepositFieldNumber;
const int OptionCapital::kEquityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionCapital::OptionCapital()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionCapital.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.OptionCapital)
}
OptionCapital::OptionCapital(const OptionCapital& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  moneytype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_moneytype()) {
    moneytype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.moneytype_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  ::memcpy(&fund_bal_, &from.fund_bal_,
    static_cast<size_t>(reinterpret_cast<char*>(&funcid_) -
    reinterpret_cast<char*>(&fund_bal_)) + sizeof(funcid_));
  // @@protoc_insertion_point(copy_constructor:autotrade.OptionCapital)
}

void OptionCapital::SharedCtor() {
  moneytype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fund_bal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&equity_) -
      reinterpret_cast<char*>(&fund_bal_)) + sizeof(equity_));
  funcid_ = 13102010;
}

OptionCapital::~OptionCapital() {
  // @@protoc_insertion_point(destructor:autotrade.OptionCapital)
  SharedDtor();
}

void OptionCapital::SharedDtor() {
  moneytype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OptionCapital::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OptionCapital::descriptor() {
  ::protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OptionCapital& OptionCapital::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionCapital.base);
  return *internal_default_instance();
}


void OptionCapital::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.OptionCapital)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      moneytype_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&fund_bal_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&equity_) -
        reinterpret_cast<char*>(&fund_bal_)) + sizeof(equity_));
    funcid_ = 13102010;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OptionCapital::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.OptionCapital)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 13102010];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string moneytype = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_moneytype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->moneytype().data(), static_cast<int>(this->moneytype().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionCapital.moneytype");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double fund_bal = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_fund_bal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fund_bal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double fund_ava = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_fund_ava();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fund_ava_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double market_value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_market_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &market_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionCapital.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double deposit = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_deposit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &deposit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double equity = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_equity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &equity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.OptionCapital)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.OptionCapital)
  return false;
#undef DO_
}

void OptionCapital::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.OptionCapital)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13102010];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional string moneytype = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->moneytype().data(), static_cast<int>(this->moneytype().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionCapital.moneytype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->moneytype(), output);
  }

  // required double fund_bal = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->fund_bal(), output);
  }

  // required double fund_ava = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->fund_ava(), output);
  }

  // required double market_value = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->market_value(), output);
  }

  // optional string request_id = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionCapital.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->request_id(), output);
  }

  // optional double deposit = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->deposit(), output);
  }

  // optional double equity = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->equity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.OptionCapital)
}

::google::protobuf::uint8* OptionCapital::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.OptionCapital)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13102010];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional string moneytype = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->moneytype().data(), static_cast<int>(this->moneytype().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionCapital.moneytype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->moneytype(), target);
  }

  // required double fund_bal = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->fund_bal(), target);
  }

  // required double fund_ava = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->fund_ava(), target);
  }

  // required double market_value = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->market_value(), target);
  }

  // optional string request_id = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionCapital.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->request_id(), target);
  }

  // optional double deposit = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->deposit(), target);
  }

  // optional double equity = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->equity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.OptionCapital)
  return target;
}

size_t OptionCapital::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autotrade.OptionCapital)
  size_t total_size = 0;

  if (has_fund_bal()) {
    // required double fund_bal = 3;
    total_size += 1 + 8;
  }

  if (has_fund_ava()) {
    // required double fund_ava = 4;
    total_size += 1 + 8;
  }

  if (has_market_value()) {
    // required double market_value = 5;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t OptionCapital::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.OptionCapital)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001c) ^ 0x0000001c) == 0) {  // All required fields are present.
    // required double fund_bal = 3;
    total_size += 1 + 8;

    // required double fund_ava = 4;
    total_size += 1 + 8;

    // required double market_value = 5;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string moneytype = 2;
    if (has_moneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->moneytype());
    }

    // optional string request_id = 6;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

  }
  if (_has_bits_[0 / 32] & 224u) {
    // optional double deposit = 7;
    if (has_deposit()) {
      total_size += 1 + 8;
    }

    // optional double equity = 8;
    if (has_equity()) {
      total_size += 1 + 8;
    }

    // optional int32 funcid = 1 [default = 13102010];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionCapital::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.OptionCapital)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionCapital* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionCapital>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.OptionCapital)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.OptionCapital)
    MergeFrom(*source);
  }
}

void OptionCapital::MergeFrom(const OptionCapital& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.OptionCapital)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_moneytype();
      moneytype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.moneytype_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      fund_bal_ = from.fund_bal_;
    }
    if (cached_has_bits & 0x00000008u) {
      fund_ava_ = from.fund_ava_;
    }
    if (cached_has_bits & 0x00000010u) {
      market_value_ = from.market_value_;
    }
    if (cached_has_bits & 0x00000020u) {
      deposit_ = from.deposit_;
    }
    if (cached_has_bits & 0x00000040u) {
      equity_ = from.equity_;
    }
    if (cached_has_bits & 0x00000080u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OptionCapital::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.OptionCapital)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionCapital::CopyFrom(const OptionCapital& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.OptionCapital)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionCapital::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001c) != 0x0000001c) return false;
  return true;
}

void OptionCapital::Swap(OptionCapital* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionCapital::InternalSwap(OptionCapital* other) {
  using std::swap;
  moneytype_.Swap(&other->moneytype_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(fund_bal_, other->fund_bal_);
  swap(fund_ava_, other->fund_ava_);
  swap(market_value_, other->market_value_);
  swap(deposit_, other->deposit_);
  swap(equity_, other->equity_);
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OptionCapital::GetMetadata() const {
  protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OptionQueryPositionReqt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionQueryPositionReqt::kFuncidFieldNumber;
const int OptionQueryPositionReqt::kCodeFieldNumber;
const int OptionQueryPositionReqt::kMarketFieldNumber;
const int OptionQueryPositionReqt::kQueryCountFieldNumber;
const int OptionQueryPositionReqt::kQueryTypeFieldNumber;
const int OptionQueryPositionReqt::kStartPosFieldNumber;
const int OptionQueryPositionReqt::kRequestIdFieldNumber;
const int OptionQueryPositionReqt::kRequestTimeFieldNumber;
const int OptionQueryPositionReqt::kActiveIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionQueryPositionReqt::OptionQueryPositionReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionQueryPositionReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.OptionQueryPositionReqt)
}
OptionQueryPositionReqt::OptionQueryPositionReqt(const OptionQueryPositionReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  start_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_start_pos()) {
    start_pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_pos_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  ::memcpy(&market_, &from.market_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_interval_) -
    reinterpret_cast<char*>(&market_)) + sizeof(active_interval_));
  // @@protoc_insertion_point(copy_constructor:autotrade.OptionQueryPositionReqt)
}

void OptionQueryPositionReqt::SharedCtor() {
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&market_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&query_type_) -
      reinterpret_cast<char*>(&market_)) + sizeof(query_type_));
  funcid_ = 13002006;
  query_count_ = 500u;
  active_interval_ = GOOGLE_LONGLONG(1000);
}

OptionQueryPositionReqt::~OptionQueryPositionReqt() {
  // @@protoc_insertion_point(destructor:autotrade.OptionQueryPositionReqt)
  SharedDtor();
}

void OptionQueryPositionReqt::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_pos_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OptionQueryPositionReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OptionQueryPositionReqt::descriptor() {
  ::protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OptionQueryPositionReqt& OptionQueryPositionReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionQueryPositionReqt.base);
  return *internal_default_instance();
}


void OptionQueryPositionReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.OptionQueryPositionReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      start_pos_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&market_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&query_type_) -
        reinterpret_cast<char*>(&market_)) + sizeof(query_type_));
    funcid_ = 13002006;
    query_count_ = 500u;
  }
  active_interval_ = GOOGLE_LONGLONG(1000);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OptionQueryPositionReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.OptionQueryPositionReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 13002006];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionQueryPositionReqt.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 market = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_market();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &market_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 query_count = 4 [default = 500];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_query_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autotrade.OptionQueryPositionReqt.QueryType query_type = 5 [default = Type_ONCE];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::autotrade::OptionQueryPositionReqt_QueryType_IsValid(value)) {
            set_query_type(static_cast< ::autotrade::OptionQueryPositionReqt_QueryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string start_pos = 6 [default = ""];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_pos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->start_pos().data(), static_cast<int>(this->start_pos().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionQueryPositionReqt.start_pos");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionQueryPositionReqt.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 request_time = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_request_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 active_interval = 9 [default = 1000];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_active_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &active_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.OptionQueryPositionReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.OptionQueryPositionReqt)
  return false;
#undef DO_
}

void OptionQueryPositionReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.OptionQueryPositionReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13002006];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional string code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryPositionReqt.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->code(), output);
  }

  // optional int64 market = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->market(), output);
  }

  // optional uint32 query_count = 4 [default = 500];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->query_count(), output);
  }

  // optional .autotrade.OptionQueryPositionReqt.QueryType query_type = 5 [default = Type_ONCE];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->query_type(), output);
  }

  // optional string start_pos = 6 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_pos().data(), static_cast<int>(this->start_pos().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryPositionReqt.start_pos");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->start_pos(), output);
  }

  // optional string request_id = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryPositionReqt.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->request_id(), output);
  }

  // optional int64 request_time = 8 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->request_time(), output);
  }

  // optional int64 active_interval = 9 [default = 1000];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->active_interval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.OptionQueryPositionReqt)
}

::google::protobuf::uint8* OptionQueryPositionReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.OptionQueryPositionReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13002006];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional string code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryPositionReqt.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  // optional int64 market = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->market(), target);
  }

  // optional uint32 query_count = 4 [default = 500];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->query_count(), target);
  }

  // optional .autotrade.OptionQueryPositionReqt.QueryType query_type = 5 [default = Type_ONCE];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->query_type(), target);
  }

  // optional string start_pos = 6 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_pos().data(), static_cast<int>(this->start_pos().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryPositionReqt.start_pos");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->start_pos(), target);
  }

  // optional string request_id = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryPositionReqt.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->request_id(), target);
  }

  // optional int64 request_time = 8 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->request_time(), target);
  }

  // optional int64 active_interval = 9 [default = 1000];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->active_interval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.OptionQueryPositionReqt)
  return target;
}

size_t OptionQueryPositionReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.OptionQueryPositionReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional string start_pos = 6 [default = ""];
    if (has_start_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start_pos());
    }

    // optional string request_id = 7;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional int64 market = 3;
    if (has_market()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->market());
    }

    // optional int64 request_time = 8 [default = 0];
    if (has_request_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->request_time());
    }

    // optional .autotrade.OptionQueryPositionReqt.QueryType query_type = 5 [default = Type_ONCE];
    if (has_query_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->query_type());
    }

    // optional int32 funcid = 1 [default = 13002006];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

    // optional uint32 query_count = 4 [default = 500];
    if (has_query_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->query_count());
    }

  }
  // optional int64 active_interval = 9 [default = 1000];
  if (has_active_interval()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->active_interval());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionQueryPositionReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.OptionQueryPositionReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionQueryPositionReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionQueryPositionReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.OptionQueryPositionReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.OptionQueryPositionReqt)
    MergeFrom(*source);
  }
}

void OptionQueryPositionReqt::MergeFrom(const OptionQueryPositionReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.OptionQueryPositionReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_start_pos();
      start_pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_pos_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      market_ = from.market_;
    }
    if (cached_has_bits & 0x00000010u) {
      request_time_ = from.request_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      query_type_ = from.query_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      funcid_ = from.funcid_;
    }
    if (cached_has_bits & 0x00000080u) {
      query_count_ = from.query_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_active_interval(from.active_interval());
  }
}

void OptionQueryPositionReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.OptionQueryPositionReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionQueryPositionReqt::CopyFrom(const OptionQueryPositionReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.OptionQueryPositionReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionQueryPositionReqt::IsInitialized() const {
  return true;
}

void OptionQueryPositionReqt::Swap(OptionQueryPositionReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionQueryPositionReqt::InternalSwap(OptionQueryPositionReqt* other) {
  using std::swap;
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  start_pos_.Swap(&other->start_pos_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(market_, other->market_);
  swap(request_time_, other->request_time_);
  swap(query_type_, other->query_type_);
  swap(funcid_, other->funcid_);
  swap(query_count_, other->query_count_);
  swap(active_interval_, other->active_interval_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OptionQueryPositionReqt::GetMetadata() const {
  protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OptionPosition_Position::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionPosition_Position::kMarketFieldNumber;
const int OptionPosition_Position::kCodeFieldNumber;
const int OptionPosition_Position::kNameFieldNumber;
const int OptionPosition_Position::kCpFlagFieldNumber;
const int OptionPosition_Position::kBuyCoveredFieldNumber;
const int OptionPosition_Position::kBuyVolumeFieldNumber;
const int OptionPosition_Position::kBuyPriceFieldNumber;
const int OptionPosition_Position::kBuyAmountFieldNumber;
const int OptionPosition_Position::kBuyCanCloseVolumeFieldNumber;
const int OptionPosition_Position::kBuyOpenFreezedVolumeFieldNumber;
const int OptionPosition_Position::kBuyCloseFreezedVolumeFieldNumber;
const int OptionPosition_Position::kBuyDepositAmountFieldNumber;
const int OptionPosition_Position::kSellCoveredFieldNumber;
const int OptionPosition_Position::kSellVolumeFieldNumber;
const int OptionPosition_Position::kSellPriceFieldNumber;
const int OptionPosition_Position::kSellAmountFieldNumber;
const int OptionPosition_Position::kSellCanCloseVolumeFieldNumber;
const int OptionPosition_Position::kSellOpenFreezedVolumeFieldNumber;
const int OptionPosition_Position::kSellCloseFreezedVolumeFieldNumber;
const int OptionPosition_Position::kSellDepositAmountFieldNumber;
const int OptionPosition_Position::kNetVolumeFieldNumber;
const int OptionPosition_Position::kStartPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionPosition_Position::OptionPosition_Position()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionPosition_Position.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.OptionPosition.Position)
}
OptionPosition_Position::OptionPosition_Position(const OptionPosition_Position& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  start_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_start_pos()) {
    start_pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_pos_);
  }
  ::memcpy(&market_, &from.market_,
    static_cast<size_t>(reinterpret_cast<char*>(&net_volume_) -
    reinterpret_cast<char*>(&market_)) + sizeof(net_volume_));
  // @@protoc_insertion_point(copy_constructor:autotrade.OptionPosition.Position)
}

void OptionPosition_Position::SharedCtor() {
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&market_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&net_volume_) -
      reinterpret_cast<char*>(&market_)) + sizeof(net_volume_));
}

OptionPosition_Position::~OptionPosition_Position() {
  // @@protoc_insertion_point(destructor:autotrade.OptionPosition.Position)
  SharedDtor();
}

void OptionPosition_Position::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_pos_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OptionPosition_Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OptionPosition_Position::descriptor() {
  ::protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OptionPosition_Position& OptionPosition_Position::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionPosition_Position.base);
  return *internal_default_instance();
}


void OptionPosition_Position::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.OptionPosition.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      start_pos_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&market_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&buy_price_) -
        reinterpret_cast<char*>(&market_)) + sizeof(buy_price_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&buy_amount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sell_price_) -
        reinterpret_cast<char*>(&buy_amount_)) + sizeof(sell_price_));
  }
  if (cached_has_bits & 4128768u) {
    ::memset(&sell_amount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&net_volume_) -
        reinterpret_cast<char*>(&sell_amount_)) + sizeof(net_volume_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OptionPosition_Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.OptionPosition.Position)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 market = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_market();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &market_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionPosition.Position.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionPosition.Position.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 cp_flag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_cp_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cp_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 buy_covered = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_buy_covered();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buy_covered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 buy_volume = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_buy_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buy_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double buy_price = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_buy_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &buy_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double buy_amount = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_buy_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &buy_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 buy_can_close_volume = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_buy_can_close_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buy_can_close_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 buy_open_freezed_volume = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_buy_open_freezed_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buy_open_freezed_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 buy_close_freezed_volume = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_buy_close_freezed_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buy_close_freezed_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double buy_deposit_amount = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_buy_deposit_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &buy_deposit_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sell_covered = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_sell_covered();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sell_covered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sell_volume = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_sell_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sell_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double sell_price = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {
          set_has_sell_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sell_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double sell_amount = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {
          set_has_sell_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sell_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sell_can_close_volume = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_sell_can_close_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sell_can_close_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sell_open_freezed_volume = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_sell_open_freezed_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sell_open_freezed_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sell_close_freezed_volume = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_sell_close_freezed_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sell_close_freezed_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double sell_deposit_amount = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u /* 161 & 0xFF */)) {
          set_has_sell_deposit_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sell_deposit_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 net_volume = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_net_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &net_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string start_pos = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_pos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->start_pos().data(), static_cast<int>(this->start_pos().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionPosition.Position.start_pos");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.OptionPosition.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.OptionPosition.Position)
  return false;
#undef DO_
}

void OptionPosition_Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.OptionPosition.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 market = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->market(), output);
  }

  // optional string code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionPosition.Position.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->code(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionPosition.Position.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional int64 cp_flag = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->cp_flag(), output);
  }

  // optional int64 buy_covered = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->buy_covered(), output);
  }

  // optional int64 buy_volume = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->buy_volume(), output);
  }

  // optional double buy_price = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->buy_price(), output);
  }

  // optional double buy_amount = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->buy_amount(), output);
  }

  // optional int64 buy_can_close_volume = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->buy_can_close_volume(), output);
  }

  // optional int64 buy_open_freezed_volume = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->buy_open_freezed_volume(), output);
  }

  // optional int64 buy_close_freezed_volume = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->buy_close_freezed_volume(), output);
  }

  // optional double buy_deposit_amount = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->buy_deposit_amount(), output);
  }

  // optional int64 sell_covered = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->sell_covered(), output);
  }

  // optional int64 sell_volume = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->sell_volume(), output);
  }

  // optional double sell_price = 15;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->sell_price(), output);
  }

  // optional double sell_amount = 16;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->sell_amount(), output);
  }

  // optional int64 sell_can_close_volume = 17;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->sell_can_close_volume(), output);
  }

  // optional int64 sell_open_freezed_volume = 18;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->sell_open_freezed_volume(), output);
  }

  // optional int64 sell_close_freezed_volume = 19;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->sell_close_freezed_volume(), output);
  }

  // optional double sell_deposit_amount = 20;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->sell_deposit_amount(), output);
  }

  // optional int64 net_volume = 21;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->net_volume(), output);
  }

  // optional string start_pos = 22;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_pos().data(), static_cast<int>(this->start_pos().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionPosition.Position.start_pos");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->start_pos(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.OptionPosition.Position)
}

::google::protobuf::uint8* OptionPosition_Position::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.OptionPosition.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 market = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->market(), target);
  }

  // optional string code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionPosition.Position.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionPosition.Position.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int64 cp_flag = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->cp_flag(), target);
  }

  // optional int64 buy_covered = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->buy_covered(), target);
  }

  // optional int64 buy_volume = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->buy_volume(), target);
  }

  // optional double buy_price = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->buy_price(), target);
  }

  // optional double buy_amount = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->buy_amount(), target);
  }

  // optional int64 buy_can_close_volume = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->buy_can_close_volume(), target);
  }

  // optional int64 buy_open_freezed_volume = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->buy_open_freezed_volume(), target);
  }

  // optional int64 buy_close_freezed_volume = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->buy_close_freezed_volume(), target);
  }

  // optional double buy_deposit_amount = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->buy_deposit_amount(), target);
  }

  // optional int64 sell_covered = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->sell_covered(), target);
  }

  // optional int64 sell_volume = 14;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->sell_volume(), target);
  }

  // optional double sell_price = 15;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->sell_price(), target);
  }

  // optional double sell_amount = 16;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->sell_amount(), target);
  }

  // optional int64 sell_can_close_volume = 17;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->sell_can_close_volume(), target);
  }

  // optional int64 sell_open_freezed_volume = 18;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->sell_open_freezed_volume(), target);
  }

  // optional int64 sell_close_freezed_volume = 19;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->sell_close_freezed_volume(), target);
  }

  // optional double sell_deposit_amount = 20;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->sell_deposit_amount(), target);
  }

  // optional int64 net_volume = 21;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->net_volume(), target);
  }

  // optional string start_pos = 22;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_pos().data(), static_cast<int>(this->start_pos().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionPosition.Position.start_pos");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->start_pos(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.OptionPosition.Position)
  return target;
}

size_t OptionPosition_Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.OptionPosition.Position)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string start_pos = 22;
    if (has_start_pos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start_pos());
    }

    // optional int64 market = 1;
    if (has_market()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->market());
    }

    // optional int64 cp_flag = 4;
    if (has_cp_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cp_flag());
    }

    // optional int64 buy_covered = 5;
    if (has_buy_covered()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->buy_covered());
    }

    // optional int64 buy_volume = 6;
    if (has_buy_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->buy_volume());
    }

    // optional double buy_price = 7;
    if (has_buy_price()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double buy_amount = 8;
    if (has_buy_amount()) {
      total_size += 1 + 8;
    }

    // optional int64 buy_can_close_volume = 9;
    if (has_buy_can_close_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->buy_can_close_volume());
    }

    // optional int64 buy_open_freezed_volume = 10;
    if (has_buy_open_freezed_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->buy_open_freezed_volume());
    }

    // optional int64 buy_close_freezed_volume = 11;
    if (has_buy_close_freezed_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->buy_close_freezed_volume());
    }

    // optional double buy_deposit_amount = 12;
    if (has_buy_deposit_amount()) {
      total_size += 1 + 8;
    }

    // optional int64 sell_covered = 13;
    if (has_sell_covered()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sell_covered());
    }

    // optional int64 sell_volume = 14;
    if (has_sell_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sell_volume());
    }

    // optional double sell_price = 15;
    if (has_sell_price()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional double sell_amount = 16;
    if (has_sell_amount()) {
      total_size += 2 + 8;
    }

    // optional int64 sell_can_close_volume = 17;
    if (has_sell_can_close_volume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sell_can_close_volume());
    }

    // optional int64 sell_open_freezed_volume = 18;
    if (has_sell_open_freezed_volume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sell_open_freezed_volume());
    }

    // optional int64 sell_close_freezed_volume = 19;
    if (has_sell_close_freezed_volume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sell_close_freezed_volume());
    }

    // optional double sell_deposit_amount = 20;
    if (has_sell_deposit_amount()) {
      total_size += 2 + 8;
    }

    // optional int64 net_volume = 21;
    if (has_net_volume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->net_volume());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionPosition_Position::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.OptionPosition.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionPosition_Position* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionPosition_Position>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.OptionPosition.Position)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.OptionPosition.Position)
    MergeFrom(*source);
  }
}

void OptionPosition_Position::MergeFrom(const OptionPosition_Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.OptionPosition.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_start_pos();
      start_pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_pos_);
    }
    if (cached_has_bits & 0x00000008u) {
      market_ = from.market_;
    }
    if (cached_has_bits & 0x00000010u) {
      cp_flag_ = from.cp_flag_;
    }
    if (cached_has_bits & 0x00000020u) {
      buy_covered_ = from.buy_covered_;
    }
    if (cached_has_bits & 0x00000040u) {
      buy_volume_ = from.buy_volume_;
    }
    if (cached_has_bits & 0x00000080u) {
      buy_price_ = from.buy_price_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      buy_amount_ = from.buy_amount_;
    }
    if (cached_has_bits & 0x00000200u) {
      buy_can_close_volume_ = from.buy_can_close_volume_;
    }
    if (cached_has_bits & 0x00000400u) {
      buy_open_freezed_volume_ = from.buy_open_freezed_volume_;
    }
    if (cached_has_bits & 0x00000800u) {
      buy_close_freezed_volume_ = from.buy_close_freezed_volume_;
    }
    if (cached_has_bits & 0x00001000u) {
      buy_deposit_amount_ = from.buy_deposit_amount_;
    }
    if (cached_has_bits & 0x00002000u) {
      sell_covered_ = from.sell_covered_;
    }
    if (cached_has_bits & 0x00004000u) {
      sell_volume_ = from.sell_volume_;
    }
    if (cached_has_bits & 0x00008000u) {
      sell_price_ = from.sell_price_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4128768u) {
    if (cached_has_bits & 0x00010000u) {
      sell_amount_ = from.sell_amount_;
    }
    if (cached_has_bits & 0x00020000u) {
      sell_can_close_volume_ = from.sell_can_close_volume_;
    }
    if (cached_has_bits & 0x00040000u) {
      sell_open_freezed_volume_ = from.sell_open_freezed_volume_;
    }
    if (cached_has_bits & 0x00080000u) {
      sell_close_freezed_volume_ = from.sell_close_freezed_volume_;
    }
    if (cached_has_bits & 0x00100000u) {
      sell_deposit_amount_ = from.sell_deposit_amount_;
    }
    if (cached_has_bits & 0x00200000u) {
      net_volume_ = from.net_volume_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OptionPosition_Position::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.OptionPosition.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionPosition_Position::CopyFrom(const OptionPosition_Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.OptionPosition.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionPosition_Position::IsInitialized() const {
  return true;
}

void OptionPosition_Position::Swap(OptionPosition_Position* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionPosition_Position::InternalSwap(OptionPosition_Position* other) {
  using std::swap;
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  start_pos_.Swap(&other->start_pos_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(market_, other->market_);
  swap(cp_flag_, other->cp_flag_);
  swap(buy_covered_, other->buy_covered_);
  swap(buy_volume_, other->buy_volume_);
  swap(buy_price_, other->buy_price_);
  swap(buy_amount_, other->buy_amount_);
  swap(buy_can_close_volume_, other->buy_can_close_volume_);
  swap(buy_open_freezed_volume_, other->buy_open_freezed_volume_);
  swap(buy_close_freezed_volume_, other->buy_close_freezed_volume_);
  swap(buy_deposit_amount_, other->buy_deposit_amount_);
  swap(sell_covered_, other->sell_covered_);
  swap(sell_volume_, other->sell_volume_);
  swap(sell_price_, other->sell_price_);
  swap(sell_amount_, other->sell_amount_);
  swap(sell_can_close_volume_, other->sell_can_close_volume_);
  swap(sell_open_freezed_volume_, other->sell_open_freezed_volume_);
  swap(sell_close_freezed_volume_, other->sell_close_freezed_volume_);
  swap(sell_deposit_amount_, other->sell_deposit_amount_);
  swap(net_volume_, other->net_volume_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OptionPosition_Position::GetMetadata() const {
  protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OptionPosition::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionPosition::kFuncidFieldNumber;
const int OptionPosition::kPositionsFieldNumber;
const int OptionPosition::kLastPosFieldNumber;
const int OptionPosition::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionPosition::OptionPosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionPosition.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.OptionPosition)
}
OptionPosition::OptionPosition(const OptionPosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      positions_(from.positions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  last_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_last_pos()) {
    last_pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_pos_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:autotrade.OptionPosition)
}

void OptionPosition::SharedCtor() {
  last_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  funcid_ = 13102006;
}

OptionPosition::~OptionPosition() {
  // @@protoc_insertion_point(destructor:autotrade.OptionPosition)
  SharedDtor();
}

void OptionPosition::SharedDtor() {
  last_pos_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OptionPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OptionPosition::descriptor() {
  ::protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OptionPosition& OptionPosition::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionPosition.base);
  return *internal_default_instance();
}


void OptionPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.OptionPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  positions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      last_pos_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    funcid_ = 13102006;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OptionPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.OptionPosition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 13102006];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autotrade.OptionPosition.Position positions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_positions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string last_pos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_pos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->last_pos().data(), static_cast<int>(this->last_pos().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionPosition.last_pos");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionPosition.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.OptionPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.OptionPosition)
  return false;
#undef DO_
}

void OptionPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.OptionPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13102006];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // repeated .autotrade.OptionPosition.Position positions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->positions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->positions(static_cast<int>(i)),
      output);
  }

  // optional string last_pos = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_pos().data(), static_cast<int>(this->last_pos().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionPosition.last_pos");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->last_pos(), output);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionPosition.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.OptionPosition)
}

::google::protobuf::uint8* OptionPosition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.OptionPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13102006];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // repeated .autotrade.OptionPosition.Position positions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->positions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->positions(static_cast<int>(i)), deterministic, target);
  }

  // optional string last_pos = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_pos().data(), static_cast<int>(this->last_pos().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionPosition.last_pos");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->last_pos(), target);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionPosition.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.OptionPosition)
  return target;
}

size_t OptionPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.OptionPosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .autotrade.OptionPosition.Position positions = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->positions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->positions(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string last_pos = 3;
    if (has_last_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_pos());
    }

    // optional string request_id = 4;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional int32 funcid = 1 [default = 13102006];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.OptionPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionPosition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionPosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.OptionPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.OptionPosition)
    MergeFrom(*source);
  }
}

void OptionPosition::MergeFrom(const OptionPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.OptionPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  positions_.MergeFrom(from.positions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_last_pos();
      last_pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_pos_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OptionPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.OptionPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionPosition::CopyFrom(const OptionPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.OptionPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionPosition::IsInitialized() const {
  return true;
}

void OptionPosition::Swap(OptionPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionPosition::InternalSwap(OptionPosition* other) {
  using std::swap;
  CastToBase(&positions_)->InternalSwap(CastToBase(&other->positions_));
  last_pos_.Swap(&other->last_pos_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OptionPosition::GetMetadata() const {
  protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OptionQueryDealDetailReqt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionQueryDealDetailReqt::kFuncidFieldNumber;
const int OptionQueryDealDetailReqt::kOrdernoFieldNumber;
const int OptionQueryDealDetailReqt::kQueryCountFieldNumber;
const int OptionQueryDealDetailReqt::kQueryTypeFieldNumber;
const int OptionQueryDealDetailReqt::kStartPosFieldNumber;
const int OptionQueryDealDetailReqt::kRequestIdFieldNumber;
const int OptionQueryDealDetailReqt::kRequestTimeFieldNumber;
const int OptionQueryDealDetailReqt::kActiveIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionQueryDealDetailReqt::OptionQueryDealDetailReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionQueryDealDetailReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.OptionQueryDealDetailReqt)
}
OptionQueryDealDetailReqt::OptionQueryDealDetailReqt(const OptionQueryDealDetailReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  orderno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_orderno()) {
    orderno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderno_);
  }
  start_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_start_pos()) {
    start_pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_pos_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  ::memcpy(&request_time_, &from.request_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_interval_) -
    reinterpret_cast<char*>(&request_time_)) + sizeof(active_interval_));
  // @@protoc_insertion_point(copy_constructor:autotrade.OptionQueryDealDetailReqt)
}

void OptionQueryDealDetailReqt::SharedCtor() {
  orderno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&request_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&query_type_) -
      reinterpret_cast<char*>(&request_time_)) + sizeof(query_type_));
  funcid_ = 13002004;
  query_count_ = 500u;
  active_interval_ = GOOGLE_LONGLONG(1000);
}

OptionQueryDealDetailReqt::~OptionQueryDealDetailReqt() {
  // @@protoc_insertion_point(destructor:autotrade.OptionQueryDealDetailReqt)
  SharedDtor();
}

void OptionQueryDealDetailReqt::SharedDtor() {
  orderno_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_pos_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OptionQueryDealDetailReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OptionQueryDealDetailReqt::descriptor() {
  ::protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OptionQueryDealDetailReqt& OptionQueryDealDetailReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionQueryDealDetailReqt.base);
  return *internal_default_instance();
}


void OptionQueryDealDetailReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.OptionQueryDealDetailReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      orderno_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      start_pos_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&request_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&query_type_) -
        reinterpret_cast<char*>(&request_time_)) + sizeof(query_type_));
    funcid_ = 13002004;
    query_count_ = 500u;
    active_interval_ = GOOGLE_LONGLONG(1000);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OptionQueryDealDetailReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.OptionQueryDealDetailReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 13002004];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string orderno = 2 [default = ""];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orderno().data(), static_cast<int>(this->orderno().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionQueryDealDetailReqt.orderno");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 query_count = 3 [default = 500];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_query_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autotrade.OptionQueryDealDetailReqt.QueryType query_type = 4 [default = Type_ONCE];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::autotrade::OptionQueryDealDetailReqt_QueryType_IsValid(value)) {
            set_query_type(static_cast< ::autotrade::OptionQueryDealDetailReqt_QueryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string start_pos = 5 [default = ""];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_pos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->start_pos().data(), static_cast<int>(this->start_pos().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionQueryDealDetailReqt.start_pos");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionQueryDealDetailReqt.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 request_time = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_request_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 active_interval = 8 [default = 1000];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_active_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &active_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.OptionQueryDealDetailReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.OptionQueryDealDetailReqt)
  return false;
#undef DO_
}

void OptionQueryDealDetailReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.OptionQueryDealDetailReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13002004];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional string orderno = 2 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderno().data(), static_cast<int>(this->orderno().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryDealDetailReqt.orderno");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->orderno(), output);
  }

  // optional uint32 query_count = 3 [default = 500];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->query_count(), output);
  }

  // optional .autotrade.OptionQueryDealDetailReqt.QueryType query_type = 4 [default = Type_ONCE];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->query_type(), output);
  }

  // optional string start_pos = 5 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_pos().data(), static_cast<int>(this->start_pos().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryDealDetailReqt.start_pos");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->start_pos(), output);
  }

  // optional string request_id = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryDealDetailReqt.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->request_id(), output);
  }

  // optional int64 request_time = 7 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->request_time(), output);
  }

  // optional int64 active_interval = 8 [default = 1000];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->active_interval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.OptionQueryDealDetailReqt)
}

::google::protobuf::uint8* OptionQueryDealDetailReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.OptionQueryDealDetailReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13002004];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional string orderno = 2 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderno().data(), static_cast<int>(this->orderno().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryDealDetailReqt.orderno");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->orderno(), target);
  }

  // optional uint32 query_count = 3 [default = 500];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->query_count(), target);
  }

  // optional .autotrade.OptionQueryDealDetailReqt.QueryType query_type = 4 [default = Type_ONCE];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->query_type(), target);
  }

  // optional string start_pos = 5 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_pos().data(), static_cast<int>(this->start_pos().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryDealDetailReqt.start_pos");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->start_pos(), target);
  }

  // optional string request_id = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionQueryDealDetailReqt.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->request_id(), target);
  }

  // optional int64 request_time = 7 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->request_time(), target);
  }

  // optional int64 active_interval = 8 [default = 1000];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->active_interval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.OptionQueryDealDetailReqt)
  return target;
}

size_t OptionQueryDealDetailReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.OptionQueryDealDetailReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string orderno = 2 [default = ""];
    if (has_orderno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderno());
    }

    // optional string start_pos = 5 [default = ""];
    if (has_start_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start_pos());
    }

    // optional string request_id = 6;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional int64 request_time = 7 [default = 0];
    if (has_request_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->request_time());
    }

    // optional .autotrade.OptionQueryDealDetailReqt.QueryType query_type = 4 [default = Type_ONCE];
    if (has_query_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->query_type());
    }

    // optional int32 funcid = 1 [default = 13002004];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

    // optional uint32 query_count = 3 [default = 500];
    if (has_query_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->query_count());
    }

    // optional int64 active_interval = 8 [default = 1000];
    if (has_active_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->active_interval());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionQueryDealDetailReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.OptionQueryDealDetailReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionQueryDealDetailReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionQueryDealDetailReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.OptionQueryDealDetailReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.OptionQueryDealDetailReqt)
    MergeFrom(*source);
  }
}

void OptionQueryDealDetailReqt::MergeFrom(const OptionQueryDealDetailReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.OptionQueryDealDetailReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_orderno();
      orderno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderno_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_start_pos();
      start_pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_pos_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      request_time_ = from.request_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      query_type_ = from.query_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      funcid_ = from.funcid_;
    }
    if (cached_has_bits & 0x00000040u) {
      query_count_ = from.query_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      active_interval_ = from.active_interval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OptionQueryDealDetailReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.OptionQueryDealDetailReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionQueryDealDetailReqt::CopyFrom(const OptionQueryDealDetailReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.OptionQueryDealDetailReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionQueryDealDetailReqt::IsInitialized() const {
  return true;
}

void OptionQueryDealDetailReqt::Swap(OptionQueryDealDetailReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionQueryDealDetailReqt::InternalSwap(OptionQueryDealDetailReqt* other) {
  using std::swap;
  orderno_.Swap(&other->orderno_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  start_pos_.Swap(&other->start_pos_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(request_time_, other->request_time_);
  swap(query_type_, other->query_type_);
  swap(funcid_, other->funcid_);
  swap(query_count_, other->query_count_);
  swap(active_interval_, other->active_interval_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OptionQueryDealDetailReqt::GetMetadata() const {
  protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OptionDealDetail::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionDealDetail::kFuncidFieldNumber;
const int OptionDealDetail::kKnocksFieldNumber;
const int OptionDealDetail::kLastPosFieldNumber;
const int OptionDealDetail::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionDealDetail::OptionDealDetail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionDealDetail.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.OptionDealDetail)
}
OptionDealDetail::OptionDealDetail(const OptionDealDetail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      knocks_(from.knocks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  last_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_last_pos()) {
    last_pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_pos_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:autotrade.OptionDealDetail)
}

void OptionDealDetail::SharedCtor() {
  last_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  funcid_ = 13102004;
}

OptionDealDetail::~OptionDealDetail() {
  // @@protoc_insertion_point(destructor:autotrade.OptionDealDetail)
  SharedDtor();
}

void OptionDealDetail::SharedDtor() {
  last_pos_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OptionDealDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OptionDealDetail::descriptor() {
  ::protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OptionDealDetail& OptionDealDetail::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionDealDetail.base);
  return *internal_default_instance();
}


void OptionDealDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.OptionDealDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  knocks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      last_pos_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    funcid_ = 13102004;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OptionDealDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.OptionDealDetail)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 13102004];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autotrade.RawOptionKnock knocks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_knocks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string last_pos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_pos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->last_pos().data(), static_cast<int>(this->last_pos().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionDealDetail.last_pos");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionDealDetail.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.OptionDealDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.OptionDealDetail)
  return false;
#undef DO_
}

void OptionDealDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.OptionDealDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13102004];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // repeated .autotrade.RawOptionKnock knocks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->knocks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->knocks(static_cast<int>(i)),
      output);
  }

  // optional string last_pos = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_pos().data(), static_cast<int>(this->last_pos().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionDealDetail.last_pos");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->last_pos(), output);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionDealDetail.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.OptionDealDetail)
}

::google::protobuf::uint8* OptionDealDetail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.OptionDealDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13102004];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // repeated .autotrade.RawOptionKnock knocks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->knocks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->knocks(static_cast<int>(i)), deterministic, target);
  }

  // optional string last_pos = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_pos().data(), static_cast<int>(this->last_pos().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionDealDetail.last_pos");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->last_pos(), target);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionDealDetail.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.OptionDealDetail)
  return target;
}

size_t OptionDealDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.OptionDealDetail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .autotrade.RawOptionKnock knocks = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->knocks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->knocks(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string last_pos = 3;
    if (has_last_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_pos());
    }

    // optional string request_id = 4;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional int32 funcid = 1 [default = 13102004];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionDealDetail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.OptionDealDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionDealDetail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionDealDetail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.OptionDealDetail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.OptionDealDetail)
    MergeFrom(*source);
  }
}

void OptionDealDetail::MergeFrom(const OptionDealDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.OptionDealDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  knocks_.MergeFrom(from.knocks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_last_pos();
      last_pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_pos_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OptionDealDetail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.OptionDealDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionDealDetail::CopyFrom(const OptionDealDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.OptionDealDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionDealDetail::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->knocks())) return false;
  return true;
}

void OptionDealDetail::Swap(OptionDealDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionDealDetail::InternalSwap(OptionDealDetail* other) {
  using std::swap;
  CastToBase(&knocks_)->InternalSwap(CastToBase(&other->knocks_));
  last_pos_.Swap(&other->last_pos_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OptionDealDetail::GetMetadata() const {
  protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RawOptionKnock::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawOptionKnock::kFuncidFieldNumber;
const int RawOptionKnock::kStampFieldNumber;
const int RawOptionKnock::kOrderGroupFieldNumber;
const int RawOptionKnock::kOrdernoFieldNumber;
const int RawOptionKnock::kMarketFieldNumber;
const int RawOptionKnock::kCodeFieldNumber;
const int RawOptionKnock::kOrderPriceFieldNumber;
const int RawOptionKnock::kMatchQtyFieldNumber;
const int RawOptionKnock::kOrderQtyFieldNumber;
const int RawOptionKnock::kBsflagFieldNumber;
const int RawOptionKnock::kOpenCloseFlagFieldNumber;
const int RawOptionKnock::kMatchTypeFieldNumber;
const int RawOptionKnock::kClearAmtFieldNumber;
const int RawOptionKnock::kMatchAmtFieldNumber;
const int RawOptionKnock::kMatchPriceFieldNumber;
const int RawOptionKnock::kOrderTypeFieldNumber;
const int RawOptionKnock::kMatchIdFieldNumber;
const int RawOptionKnock::kStockAccountFieldNumber;
const int RawOptionKnock::kOppoAccountFieldNumber;
const int RawOptionKnock::kNameFieldNumber;
const int RawOptionKnock::kInfoFieldNumber;
const int RawOptionKnock::kStartPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawOptionKnock::RawOptionKnock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_RawOptionKnock.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.RawOptionKnock)
}
RawOptionKnock::RawOptionKnock(const RawOptionKnock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_group()) {
    order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
  }
  orderno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_orderno()) {
    orderno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderno_);
  }
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  match_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_match_id()) {
    match_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_id_);
  }
  stock_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_stock_account()) {
    stock_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stock_account_);
  }
  oppo_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_oppo_account()) {
    oppo_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.oppo_account_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_info()) {
    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  start_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_start_pos()) {
    start_pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_pos_);
  }
  ::memcpy(&stamp_, &from.stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&funcid_) -
    reinterpret_cast<char*>(&stamp_)) + sizeof(funcid_));
  // @@protoc_insertion_point(copy_constructor:autotrade.RawOptionKnock)
}

void RawOptionKnock::SharedCtor() {
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  match_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stock_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oppo_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&order_type_) -
      reinterpret_cast<char*>(&stamp_)) + sizeof(order_type_));
  funcid_ = 13003001;
}

RawOptionKnock::~RawOptionKnock() {
  // @@protoc_insertion_point(destructor:autotrade.RawOptionKnock)
  SharedDtor();
}

void RawOptionKnock::SharedDtor() {
  order_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderno_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  match_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stock_account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oppo_account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_pos_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RawOptionKnock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RawOptionKnock::descriptor() {
  ::protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RawOptionKnock& RawOptionKnock::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_RawOptionKnock.base);
  return *internal_default_instance();
}


void RawOptionKnock::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.RawOptionKnock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      order_group_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      orderno_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      match_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      stock_account_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      oppo_account_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      info_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    start_pos_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 65024u) {
    ::memset(&stamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bsflag_) -
        reinterpret_cast<char*>(&stamp_)) + sizeof(bsflag_));
  }
  if (cached_has_bits & 4128768u) {
    ::memset(&match_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&order_type_) -
        reinterpret_cast<char*>(&match_type_)) + sizeof(order_type_));
    funcid_ = 13003001;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RawOptionKnock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.RawOptionKnock)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 13003001];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 stamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_stamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_group = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_group().data(), static_cast<int>(this->order_group().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.RawOptionKnock.order_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string orderno = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orderno().data(), static_cast<int>(this->orderno().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.RawOptionKnock.orderno");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 market = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_market();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &market_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string code = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.RawOptionKnock.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 order_price = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_order_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &order_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 match_qty = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_match_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &match_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 order_qty = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_order_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bsflag = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_bsflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bsflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 open_close_flag = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_open_close_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &open_close_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 match_type = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_match_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double clear_amt = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_clear_amt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &clear_amt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double match_amt = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_match_amt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &match_amt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 match_price = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_match_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &match_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 order_type = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_order_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string match_id = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_match_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->match_id().data(), static_cast<int>(this->match_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.RawOptionKnock.match_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string stock_account = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stock_account().data(), static_cast<int>(this->stock_account().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.RawOptionKnock.stock_account");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string oppo_account = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oppo_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->oppo_account().data(), static_cast<int>(this->oppo_account().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.RawOptionKnock.oppo_account");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.RawOptionKnock.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string info = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info().data(), static_cast<int>(this->info().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.RawOptionKnock.info");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string start_pos = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_pos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->start_pos().data(), static_cast<int>(this->start_pos().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.RawOptionKnock.start_pos");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.RawOptionKnock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.RawOptionKnock)
  return false;
#undef DO_
}

void RawOptionKnock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.RawOptionKnock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13003001];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // required uint64 stamp = 2;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->stamp(), output);
  }

  // optional string order_group = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.RawOptionKnock.order_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->order_group(), output);
  }

  // required string orderno = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderno().data(), static_cast<int>(this->orderno().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.RawOptionKnock.orderno");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->orderno(), output);
  }

  // optional uint32 market = 5;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->market(), output);
  }

  // required string code = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.RawOptionKnock.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->code(), output);
  }

  // optional int64 order_price = 7;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->order_price(), output);
  }

  // optional int64 match_qty = 8;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->match_qty(), output);
  }

  // optional uint32 order_qty = 9;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->order_qty(), output);
  }

  // optional uint32 bsflag = 10;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->bsflag(), output);
  }

  // optional int64 open_close_flag = 11;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->open_close_flag(), output);
  }

  // optional int32 match_type = 12;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->match_type(), output);
  }

  // optional double clear_amt = 13;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->clear_amt(), output);
  }

  // optional double match_amt = 14;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->match_amt(), output);
  }

  // optional int64 match_price = 15;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->match_price(), output);
  }

  // optional int32 order_type = 16;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->order_type(), output);
  }

  // required string match_id = 17;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_id().data(), static_cast<int>(this->match_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.RawOptionKnock.match_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->match_id(), output);
  }

  // optional string stock_account = 18;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stock_account().data(), static_cast<int>(this->stock_account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.RawOptionKnock.stock_account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->stock_account(), output);
  }

  // optional string oppo_account = 19;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oppo_account().data(), static_cast<int>(this->oppo_account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.RawOptionKnock.oppo_account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->oppo_account(), output);
  }

  // optional string name = 20;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.RawOptionKnock.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->name(), output);
  }

  // optional string info = 21;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), static_cast<int>(this->info().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.RawOptionKnock.info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->info(), output);
  }

  // optional string start_pos = 22;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_pos().data(), static_cast<int>(this->start_pos().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.RawOptionKnock.start_pos");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->start_pos(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.RawOptionKnock)
}

::google::protobuf::uint8* RawOptionKnock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.RawOptionKnock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13003001];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // required uint64 stamp = 2;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->stamp(), target);
  }

  // optional string order_group = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.RawOptionKnock.order_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->order_group(), target);
  }

  // required string orderno = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderno().data(), static_cast<int>(this->orderno().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.RawOptionKnock.orderno");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->orderno(), target);
  }

  // optional uint32 market = 5;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->market(), target);
  }

  // required string code = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.RawOptionKnock.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->code(), target);
  }

  // optional int64 order_price = 7;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->order_price(), target);
  }

  // optional int64 match_qty = 8;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->match_qty(), target);
  }

  // optional uint32 order_qty = 9;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->order_qty(), target);
  }

  // optional uint32 bsflag = 10;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->bsflag(), target);
  }

  // optional int64 open_close_flag = 11;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->open_close_flag(), target);
  }

  // optional int32 match_type = 12;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->match_type(), target);
  }

  // optional double clear_amt = 13;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->clear_amt(), target);
  }

  // optional double match_amt = 14;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->match_amt(), target);
  }

  // optional int64 match_price = 15;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->match_price(), target);
  }

  // optional int32 order_type = 16;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->order_type(), target);
  }

  // required string match_id = 17;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_id().data(), static_cast<int>(this->match_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.RawOptionKnock.match_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->match_id(), target);
  }

  // optional string stock_account = 18;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stock_account().data(), static_cast<int>(this->stock_account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.RawOptionKnock.stock_account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->stock_account(), target);
  }

  // optional string oppo_account = 19;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oppo_account().data(), static_cast<int>(this->oppo_account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.RawOptionKnock.oppo_account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->oppo_account(), target);
  }

  // optional string name = 20;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.RawOptionKnock.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->name(), target);
  }

  // optional string info = 21;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), static_cast<int>(this->info().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.RawOptionKnock.info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->info(), target);
  }

  // optional string start_pos = 22;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_pos().data(), static_cast<int>(this->start_pos().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.RawOptionKnock.start_pos");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->start_pos(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.RawOptionKnock)
  return target;
}

size_t RawOptionKnock::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autotrade.RawOptionKnock)
  size_t total_size = 0;

  if (has_orderno()) {
    // required string orderno = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderno());
  }

  if (has_code()) {
    // required string code = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_match_id()) {
    // required string match_id = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->match_id());
  }

  if (has_stamp()) {
    // required uint64 stamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->stamp());
  }

  return total_size;
}
size_t RawOptionKnock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.RawOptionKnock)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000020e) ^ 0x0000020e) == 0) {  // All required fields are present.
    // required string orderno = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderno());

    // required string code = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required string match_id = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->match_id());

    // required uint64 stamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->stamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string order_group = 3;
  if (has_order_group()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_group());
  }

  if (_has_bits_[0 / 32] & 240u) {
    // optional string stock_account = 18;
    if (has_stock_account()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_account());
    }

    // optional string oppo_account = 19;
    if (has_oppo_account()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oppo_account());
    }

    // optional string name = 20;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string info = 21;
    if (has_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

  }
  // optional string start_pos = 22;
  if (has_start_pos()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->start_pos());
  }

  if (_has_bits_[8 / 32] & 64512u) {
    // optional int64 order_price = 7;
    if (has_order_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->order_price());
    }

    // optional uint32 market = 5;
    if (has_market()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->market());
    }

    // optional uint32 order_qty = 9;
    if (has_order_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order_qty());
    }

    // optional int64 match_qty = 8;
    if (has_match_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->match_qty());
    }

    // optional int64 open_close_flag = 11;
    if (has_open_close_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->open_close_flag());
    }

    // optional uint32 bsflag = 10;
    if (has_bsflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bsflag());
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional int32 match_type = 12;
    if (has_match_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->match_type());
    }

    // optional double clear_amt = 13;
    if (has_clear_amt()) {
      total_size += 1 + 8;
    }

    // optional double match_amt = 14;
    if (has_match_amt()) {
      total_size += 1 + 8;
    }

    // optional int64 match_price = 15;
    if (has_match_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->match_price());
    }

    // optional int32 order_type = 16;
    if (has_order_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order_type());
    }

    // optional int32 funcid = 1 [default = 13003001];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawOptionKnock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.RawOptionKnock)
  GOOGLE_DCHECK_NE(&from, this);
  const RawOptionKnock* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RawOptionKnock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.RawOptionKnock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.RawOptionKnock)
    MergeFrom(*source);
  }
}

void RawOptionKnock::MergeFrom(const RawOptionKnock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.RawOptionKnock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_order_group();
      order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_orderno();
      orderno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderno_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_match_id();
      match_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_stock_account();
      stock_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stock_account_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_oppo_account();
      oppo_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.oppo_account_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_info();
      info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_start_pos();
      start_pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_pos_);
    }
    if (cached_has_bits & 0x00000200u) {
      stamp_ = from.stamp_;
    }
    if (cached_has_bits & 0x00000400u) {
      order_price_ = from.order_price_;
    }
    if (cached_has_bits & 0x00000800u) {
      market_ = from.market_;
    }
    if (cached_has_bits & 0x00001000u) {
      order_qty_ = from.order_qty_;
    }
    if (cached_has_bits & 0x00002000u) {
      match_qty_ = from.match_qty_;
    }
    if (cached_has_bits & 0x00004000u) {
      open_close_flag_ = from.open_close_flag_;
    }
    if (cached_has_bits & 0x00008000u) {
      bsflag_ = from.bsflag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4128768u) {
    if (cached_has_bits & 0x00010000u) {
      match_type_ = from.match_type_;
    }
    if (cached_has_bits & 0x00020000u) {
      clear_amt_ = from.clear_amt_;
    }
    if (cached_has_bits & 0x00040000u) {
      match_amt_ = from.match_amt_;
    }
    if (cached_has_bits & 0x00080000u) {
      match_price_ = from.match_price_;
    }
    if (cached_has_bits & 0x00100000u) {
      order_type_ = from.order_type_;
    }
    if (cached_has_bits & 0x00200000u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RawOptionKnock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.RawOptionKnock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawOptionKnock::CopyFrom(const RawOptionKnock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.RawOptionKnock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawOptionKnock::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000020e) != 0x0000020e) return false;
  return true;
}

void RawOptionKnock::Swap(RawOptionKnock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawOptionKnock::InternalSwap(RawOptionKnock* other) {
  using std::swap;
  order_group_.Swap(&other->order_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  orderno_.Swap(&other->orderno_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  match_id_.Swap(&other->match_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  stock_account_.Swap(&other->stock_account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  oppo_account_.Swap(&other->oppo_account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  info_.Swap(&other->info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  start_pos_.Swap(&other->start_pos_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(stamp_, other->stamp_);
  swap(order_price_, other->order_price_);
  swap(market_, other->market_);
  swap(order_qty_, other->order_qty_);
  swap(match_qty_, other->match_qty_);
  swap(open_close_flag_, other->open_close_flag_);
  swap(bsflag_, other->bsflag_);
  swap(match_type_, other->match_type_);
  swap(clear_amt_, other->clear_amt_);
  swap(match_amt_, other->match_amt_);
  swap(match_price_, other->match_price_);
  swap(order_type_, other->order_type_);
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RawOptionKnock::GetMetadata() const {
  protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OptionOrdersCreateResp_OrderList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionOrdersCreateResp_OrderList::kCodeFieldNumber;
const int OptionOrdersCreateResp_OrderList::kPriceFieldNumber;
const int OptionOrdersCreateResp_OrderList::kQtyFieldNumber;
const int OptionOrdersCreateResp_OrderList::kOrdernoFieldNumber;
const int OptionOrdersCreateResp_OrderList::kOpenCloseFlagFieldNumber;
const int OptionOrdersCreateResp_OrderList::kRetCodeFieldNumber;
const int OptionOrdersCreateResp_OrderList::kRetMessageFieldNumber;
const int OptionOrdersCreateResp_OrderList::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionOrdersCreateResp_OrderList::OptionOrdersCreateResp_OrderList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionOrdersCreateResp_OrderList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.OptionOrdersCreateResp.OrderList)
}
OptionOrdersCreateResp_OrderList::OptionOrdersCreateResp_OrderList(const OptionOrdersCreateResp_OrderList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  orderno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_orderno()) {
    orderno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderno_);
  }
  ret_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ret_message()) {
    ret_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_message_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&open_close_flag_) -
    reinterpret_cast<char*>(&price_)) + sizeof(open_close_flag_));
  // @@protoc_insertion_point(copy_constructor:autotrade.OptionOrdersCreateResp.OrderList)
}

void OptionOrdersCreateResp_OrderList::SharedCtor() {
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&open_close_flag_) -
      reinterpret_cast<char*>(&price_)) + sizeof(open_close_flag_));
}

OptionOrdersCreateResp_OrderList::~OptionOrdersCreateResp_OrderList() {
  // @@protoc_insertion_point(destructor:autotrade.OptionOrdersCreateResp.OrderList)
  SharedDtor();
}

void OptionOrdersCreateResp_OrderList::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderno_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OptionOrdersCreateResp_OrderList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OptionOrdersCreateResp_OrderList::descriptor() {
  ::protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OptionOrdersCreateResp_OrderList& OptionOrdersCreateResp_OrderList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionOrdersCreateResp_OrderList.base);
  return *internal_default_instance();
}


void OptionOrdersCreateResp_OrderList::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.OptionOrdersCreateResp.OrderList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      orderno_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      ret_message_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&open_close_flag_) -
        reinterpret_cast<char*>(&price_)) + sizeof(open_close_flag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OptionOrdersCreateResp_OrderList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.OptionOrdersCreateResp.OrderList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionOrdersCreateResp.OrderList.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 price = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 qty = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string orderno = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orderno().data(), static_cast<int>(this->orderno().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionOrdersCreateResp.OrderList.orderno");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 open_close_flag = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_open_close_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &open_close_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ret_code = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_ret_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ret_message = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ret_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ret_message().data(), static_cast<int>(this->ret_message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionOrdersCreateResp.OrderList.ret_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionOrdersCreateResp.OrderList.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.OptionOrdersCreateResp.OrderList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.OptionOrdersCreateResp.OrderList)
  return false;
#undef DO_
}

void OptionOrdersCreateResp_OrderList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.OptionOrdersCreateResp.OrderList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersCreateResp.OrderList.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->code(), output);
  }

  // required int64 price = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->price(), output);
  }

  // required uint32 qty = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->qty(), output);
  }

  // optional string orderno = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderno().data(), static_cast<int>(this->orderno().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersCreateResp.OrderList.orderno");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->orderno(), output);
  }

  // optional int64 open_close_flag = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->open_close_flag(), output);
  }

  // optional int32 ret_code = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ret_code(), output);
  }

  // optional string ret_message = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_message().data(), static_cast<int>(this->ret_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersCreateResp.OrderList.ret_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->ret_message(), output);
  }

  // optional string name = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersCreateResp.OrderList.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.OptionOrdersCreateResp.OrderList)
}

::google::protobuf::uint8* OptionOrdersCreateResp_OrderList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.OptionOrdersCreateResp.OrderList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersCreateResp.OrderList.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  // required int64 price = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->price(), target);
  }

  // required uint32 qty = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->qty(), target);
  }

  // optional string orderno = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderno().data(), static_cast<int>(this->orderno().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersCreateResp.OrderList.orderno");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->orderno(), target);
  }

  // optional int64 open_close_flag = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->open_close_flag(), target);
  }

  // optional int32 ret_code = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ret_code(), target);
  }

  // optional string ret_message = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_message().data(), static_cast<int>(this->ret_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersCreateResp.OrderList.ret_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ret_message(), target);
  }

  // optional string name = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersCreateResp.OrderList.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.OptionOrdersCreateResp.OrderList)
  return target;
}

size_t OptionOrdersCreateResp_OrderList::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autotrade.OptionOrdersCreateResp.OrderList)
  size_t total_size = 0;

  if (has_code()) {
    // required string code = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_price()) {
    // required int64 price = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->price());
  }

  if (has_qty()) {
    // required uint32 qty = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->qty());
  }

  return total_size;
}
size_t OptionOrdersCreateResp_OrderList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.OptionOrdersCreateResp.OrderList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000031) ^ 0x00000031) == 0) {  // All required fields are present.
    // required string code = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required int64 price = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->price());

    // required uint32 qty = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->qty());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 14u) {
    // optional string orderno = 4;
    if (has_orderno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderno());
    }

    // optional string ret_message = 7;
    if (has_ret_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ret_message());
    }

    // optional string name = 8;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (_has_bits_[0 / 32] & 192u) {
    // optional int32 ret_code = 6;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional int64 open_close_flag = 5;
    if (has_open_close_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->open_close_flag());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionOrdersCreateResp_OrderList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.OptionOrdersCreateResp.OrderList)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionOrdersCreateResp_OrderList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionOrdersCreateResp_OrderList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.OptionOrdersCreateResp.OrderList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.OptionOrdersCreateResp.OrderList)
    MergeFrom(*source);
  }
}

void OptionOrdersCreateResp_OrderList::MergeFrom(const OptionOrdersCreateResp_OrderList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.OptionOrdersCreateResp.OrderList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_orderno();
      orderno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderno_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_ret_message();
      ret_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_message_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000010u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000020u) {
      qty_ = from.qty_;
    }
    if (cached_has_bits & 0x00000040u) {
      ret_code_ = from.ret_code_;
    }
    if (cached_has_bits & 0x00000080u) {
      open_close_flag_ = from.open_close_flag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OptionOrdersCreateResp_OrderList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.OptionOrdersCreateResp.OrderList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionOrdersCreateResp_OrderList::CopyFrom(const OptionOrdersCreateResp_OrderList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.OptionOrdersCreateResp.OrderList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionOrdersCreateResp_OrderList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000031) != 0x00000031) return false;
  return true;
}

void OptionOrdersCreateResp_OrderList::Swap(OptionOrdersCreateResp_OrderList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionOrdersCreateResp_OrderList::InternalSwap(OptionOrdersCreateResp_OrderList* other) {
  using std::swap;
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  orderno_.Swap(&other->orderno_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ret_message_.Swap(&other->ret_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(price_, other->price_);
  swap(qty_, other->qty_);
  swap(ret_code_, other->ret_code_);
  swap(open_close_flag_, other->open_close_flag_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OptionOrdersCreateResp_OrderList::GetMetadata() const {
  protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OptionOrdersCreateResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionOrdersCreateResp::kFuncidFieldNumber;
const int OptionOrdersCreateResp::kRequestIdFieldNumber;
const int OptionOrdersCreateResp::kOrderIdFieldNumber;
const int OptionOrdersCreateResp::kOrderGroupFieldNumber;
const int OptionOrdersCreateResp::kTraderIdFieldNumber;
const int OptionOrdersCreateResp::kRobotIdFieldNumber;
const int OptionOrdersCreateResp::kDataDateFieldNumber;
const int OptionOrdersCreateResp::kDataTimeFieldNumber;
const int OptionOrdersCreateResp::kFundIdFieldNumber;
const int OptionOrdersCreateResp::kMarketFieldNumber;
const int OptionOrdersCreateResp::kBsflagFieldNumber;
const int OptionOrdersCreateResp::kOrderPriceTypeFieldNumber;
const int OptionOrdersCreateResp::kCoveredFlagFieldNumber;
const int OptionOrdersCreateResp::kMatchConditionFieldNumber;
const int OptionOrdersCreateResp::kOrderListFieldNumber;
const int OptionOrdersCreateResp::kAccountNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionOrdersCreateResp::OptionOrdersCreateResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionOrdersCreateResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.OptionOrdersCreateResp)
}
OptionOrdersCreateResp::OptionOrdersCreateResp(const OptionOrdersCreateResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      order_list_(from.order_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_id()) {
    order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
  }
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_group()) {
    order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
  }
  trader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trader_id()) {
    trader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trader_id_);
  }
  robot_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_robot_id()) {
    robot_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robot_id_);
  }
  fund_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fund_id()) {
    fund_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fund_id_);
  }
  match_condition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_match_condition()) {
    match_condition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_condition_);
  }
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account_name()) {
    account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
  }
  ::memcpy(&data_date_, &from.data_date_,
    static_cast<size_t>(reinterpret_cast<char*>(&funcid_) -
    reinterpret_cast<char*>(&data_date_)) + sizeof(funcid_));
  // @@protoc_insertion_point(copy_constructor:autotrade.OptionOrdersCreateResp)
}

void OptionOrdersCreateResp::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robot_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fund_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  match_condition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&covered_flag_) -
      reinterpret_cast<char*>(&data_date_)) + sizeof(covered_flag_));
  funcid_ = 13101014;
}

OptionOrdersCreateResp::~OptionOrdersCreateResp() {
  // @@protoc_insertion_point(destructor:autotrade.OptionOrdersCreateResp)
  SharedDtor();
}

void OptionOrdersCreateResp::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trader_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robot_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fund_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  match_condition_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OptionOrdersCreateResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OptionOrdersCreateResp::descriptor() {
  ::protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OptionOrdersCreateResp& OptionOrdersCreateResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqoption_5fprotocol_2eproto::scc_info_OptionOrdersCreateResp.base);
  return *internal_default_instance();
}


void OptionOrdersCreateResp::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.OptionOrdersCreateResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  order_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      order_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      order_group_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      trader_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      robot_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      fund_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      match_condition_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      account_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 32512u) {
    ::memset(&data_date_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&covered_flag_) -
        reinterpret_cast<char*>(&data_date_)) + sizeof(covered_flag_));
    funcid_ = 13101014;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OptionOrdersCreateResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.OptionOrdersCreateResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 13101014];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionOrdersCreateResp.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string order_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_id().data(), static_cast<int>(this->order_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionOrdersCreateResp.order_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string order_group = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_group().data(), static_cast<int>(this->order_group().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionOrdersCreateResp.order_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string trader_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trader_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trader_id().data(), static_cast<int>(this->trader_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionOrdersCreateResp.trader_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string robot_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robot_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->robot_id().data(), static_cast<int>(this->robot_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionOrdersCreateResp.robot_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 data_date = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_data_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 data_time = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_data_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fund_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fund_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fund_id().data(), static_cast<int>(this->fund_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionOrdersCreateResp.fund_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 market = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_market();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &market_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bsflag = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_bsflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bsflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 order_price_type = 12 [default = 0];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_order_price_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_price_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 covered_flag = 13 [default = 0];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_covered_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &covered_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string match_condition = 14 [default = ""];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_match_condition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->match_condition().data(), static_cast<int>(this->match_condition().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionOrdersCreateResp.match_condition");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autotrade.OptionOrdersCreateResp.OrderList order_list = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_order_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string account_name = 16 [default = ""];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account_name().data(), static_cast<int>(this->account_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OptionOrdersCreateResp.account_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.OptionOrdersCreateResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.OptionOrdersCreateResp)
  return false;
#undef DO_
}

void OptionOrdersCreateResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.OptionOrdersCreateResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13101014];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional string request_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersCreateResp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->request_id(), output);
  }

  // required string order_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersCreateResp.order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->order_id(), output);
  }

  // required string order_group = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersCreateResp.order_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->order_group(), output);
  }

  // optional string trader_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trader_id().data(), static_cast<int>(this->trader_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersCreateResp.trader_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->trader_id(), output);
  }

  // optional string robot_id = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robot_id().data(), static_cast<int>(this->robot_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersCreateResp.robot_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->robot_id(), output);
  }

  // optional uint32 data_date = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->data_date(), output);
  }

  // optional uint32 data_time = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->data_time(), output);
  }

  // optional string fund_id = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fund_id().data(), static_cast<int>(this->fund_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersCreateResp.fund_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->fund_id(), output);
  }

  // optional int64 market = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->market(), output);
  }

  // optional int64 bsflag = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->bsflag(), output);
  }

  // optional int32 order_price_type = 12 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->order_price_type(), output);
  }

  // optional int32 covered_flag = 13 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->covered_flag(), output);
  }

  // optional string match_condition = 14 [default = ""];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_condition().data(), static_cast<int>(this->match_condition().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersCreateResp.match_condition");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->match_condition(), output);
  }

  // repeated .autotrade.OptionOrdersCreateResp.OrderList order_list = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->order_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15,
      this->order_list(static_cast<int>(i)),
      output);
  }

  // optional string account_name = 16 [default = ""];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersCreateResp.account_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->account_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.OptionOrdersCreateResp)
}

::google::protobuf::uint8* OptionOrdersCreateResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.OptionOrdersCreateResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 13101014];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional string request_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersCreateResp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->request_id(), target);
  }

  // required string order_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersCreateResp.order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->order_id(), target);
  }

  // required string order_group = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersCreateResp.order_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->order_group(), target);
  }

  // optional string trader_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trader_id().data(), static_cast<int>(this->trader_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersCreateResp.trader_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->trader_id(), target);
  }

  // optional string robot_id = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robot_id().data(), static_cast<int>(this->robot_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersCreateResp.robot_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->robot_id(), target);
  }

  // optional uint32 data_date = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->data_date(), target);
  }

  // optional uint32 data_time = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->data_time(), target);
  }

  // optional string fund_id = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fund_id().data(), static_cast<int>(this->fund_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersCreateResp.fund_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->fund_id(), target);
  }

  // optional int64 market = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->market(), target);
  }

  // optional int64 bsflag = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->bsflag(), target);
  }

  // optional int32 order_price_type = 12 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->order_price_type(), target);
  }

  // optional int32 covered_flag = 13 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->covered_flag(), target);
  }

  // optional string match_condition = 14 [default = ""];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_condition().data(), static_cast<int>(this->match_condition().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersCreateResp.match_condition");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->match_condition(), target);
  }

  // repeated .autotrade.OptionOrdersCreateResp.OrderList order_list = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->order_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->order_list(static_cast<int>(i)), deterministic, target);
  }

  // optional string account_name = 16 [default = ""];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OptionOrdersCreateResp.account_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->account_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.OptionOrdersCreateResp)
  return target;
}

size_t OptionOrdersCreateResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autotrade.OptionOrdersCreateResp)
  size_t total_size = 0;

  if (has_order_id()) {
    // required string order_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_id());
  }

  if (has_order_group()) {
    // required string order_group = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_group());
  }

  return total_size;
}
size_t OptionOrdersCreateResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.OptionOrdersCreateResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required string order_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_id());

    // required string order_group = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_group());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .autotrade.OptionOrdersCreateResp.OrderList order_list = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->order_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->order_list(static_cast<int>(i)));
    }
  }

  // optional string request_id = 2;
  if (has_request_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  if (_has_bits_[0 / 32] & 248u) {
    // optional string trader_id = 5;
    if (has_trader_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trader_id());
    }

    // optional string robot_id = 6;
    if (has_robot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->robot_id());
    }

    // optional string fund_id = 9;
    if (has_fund_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fund_id());
    }

    // optional string match_condition = 14 [default = ""];
    if (has_match_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->match_condition());
    }

    // optional string account_name = 16 [default = ""];
    if (has_account_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name());
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional uint32 data_date = 7;
    if (has_data_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_date());
    }

    // optional uint32 data_time = 8;
    if (has_data_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_time());
    }

    // optional int64 market = 10;
    if (has_market()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->market());
    }

    // optional int64 bsflag = 11;
    if (has_bsflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bsflag());
    }

    // optional int32 order_price_type = 12 [default = 0];
    if (has_order_price_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order_price_type());
    }

    // optional int32 covered_flag = 13 [default = 0];
    if (has_covered_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->covered_flag());
    }

    // optional int32 funcid = 1 [default = 13101014];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionOrdersCreateResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.OptionOrdersCreateResp)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionOrdersCreateResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionOrdersCreateResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.OptionOrdersCreateResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.OptionOrdersCreateResp)
    MergeFrom(*source);
  }
}

void OptionOrdersCreateResp::MergeFrom(const OptionOrdersCreateResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.OptionOrdersCreateResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  order_list_.MergeFrom(from.order_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_order_id();
      order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_order_group();
      order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_trader_id();
      trader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trader_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_robot_id();
      robot_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robot_id_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_fund_id();
      fund_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fund_id_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_match_condition();
      match_condition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_condition_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_account_name();
      account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
    }
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      data_date_ = from.data_date_;
    }
    if (cached_has_bits & 0x00000200u) {
      data_time_ = from.data_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      market_ = from.market_;
    }
    if (cached_has_bits & 0x00000800u) {
      bsflag_ = from.bsflag_;
    }
    if (cached_has_bits & 0x00001000u) {
      order_price_type_ = from.order_price_type_;
    }
    if (cached_has_bits & 0x00002000u) {
      covered_flag_ = from.covered_flag_;
    }
    if (cached_has_bits & 0x00004000u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OptionOrdersCreateResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.OptionOrdersCreateResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionOrdersCreateResp::CopyFrom(const OptionOrdersCreateResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.OptionOrdersCreateResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionOrdersCreateResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->order_list())) return false;
  return true;
}

void OptionOrdersCreateResp::Swap(OptionOrdersCreateResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionOrdersCreateResp::InternalSwap(OptionOrdersCreateResp* other) {
  using std::swap;
  CastToBase(&order_list_)->InternalSwap(CastToBase(&other->order_list_));
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_id_.Swap(&other->order_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_group_.Swap(&other->order_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trader_id_.Swap(&other->trader_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  robot_id_.Swap(&other->robot_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fund_id_.Swap(&other->fund_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  match_condition_.Swap(&other->match_condition_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_name_.Swap(&other->account_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_date_, other->data_date_);
  swap(data_time_, other->data_time_);
  swap(market_, other->market_);
  swap(bsflag_, other->bsflag_);
  swap(order_price_type_, other->order_price_type_);
  swap(covered_flag_, other->covered_flag_);
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OptionOrdersCreateResp::GetMetadata() const {
  protobuf_protos_2fqoption_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqoption_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace autotrade
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::OptionLoginReqt* Arena::CreateMaybeMessage< ::autotrade::OptionLoginReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::OptionLoginReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::OptionLoginResp* Arena::CreateMaybeMessage< ::autotrade::OptionLoginResp >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::OptionLoginResp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::OptionOrderReqt* Arena::CreateMaybeMessage< ::autotrade::OptionOrderReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::OptionOrderReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::OptionOrderResp* Arena::CreateMaybeMessage< ::autotrade::OptionOrderResp >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::OptionOrderResp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::OptionOrdersReqt_SingleOrder* Arena::CreateMaybeMessage< ::autotrade::OptionOrdersReqt_SingleOrder >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::OptionOrdersReqt_SingleOrder >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::OptionOrdersReqt* Arena::CreateMaybeMessage< ::autotrade::OptionOrdersReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::OptionOrdersReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::OptionOrdersResp_OrderResult* Arena::CreateMaybeMessage< ::autotrade::OptionOrdersResp_OrderResult >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::OptionOrdersResp_OrderResult >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::OptionOrdersResp* Arena::CreateMaybeMessage< ::autotrade::OptionOrdersResp >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::OptionOrdersResp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::OptionDeleteReqt* Arena::CreateMaybeMessage< ::autotrade::OptionDeleteReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::OptionDeleteReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::OptionDeleteResp* Arena::CreateMaybeMessage< ::autotrade::OptionDeleteResp >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::OptionDeleteResp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::OptionDeletesReqt* Arena::CreateMaybeMessage< ::autotrade::OptionDeletesReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::OptionDeletesReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::OptionDeletesResp* Arena::CreateMaybeMessage< ::autotrade::OptionDeletesResp >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::OptionDeletesResp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::OptionQueryOrderReqt* Arena::CreateMaybeMessage< ::autotrade::OptionQueryOrderReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::OptionQueryOrderReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::OptionQueryOrderResp_OrderDetail* Arena::CreateMaybeMessage< ::autotrade::OptionQueryOrderResp_OrderDetail >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::OptionQueryOrderResp_OrderDetail >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::OptionQueryOrderResp* Arena::CreateMaybeMessage< ::autotrade::OptionQueryOrderResp >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::OptionQueryOrderResp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::OptionQueryOrdersReqt* Arena::CreateMaybeMessage< ::autotrade::OptionQueryOrdersReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::OptionQueryOrdersReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::OptionQueryOrdersResp_OrderDetail* Arena::CreateMaybeMessage< ::autotrade::OptionQueryOrdersResp_OrderDetail >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::OptionQueryOrdersResp_OrderDetail >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::OptionQueryOrdersResp* Arena::CreateMaybeMessage< ::autotrade::OptionQueryOrdersResp >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::OptionQueryOrdersResp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::OptionQueryCaptialReqt* Arena::CreateMaybeMessage< ::autotrade::OptionQueryCaptialReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::OptionQueryCaptialReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::OptionCapital* Arena::CreateMaybeMessage< ::autotrade::OptionCapital >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::OptionCapital >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::OptionQueryPositionReqt* Arena::CreateMaybeMessage< ::autotrade::OptionQueryPositionReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::OptionQueryPositionReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::OptionPosition_Position* Arena::CreateMaybeMessage< ::autotrade::OptionPosition_Position >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::OptionPosition_Position >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::OptionPosition* Arena::CreateMaybeMessage< ::autotrade::OptionPosition >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::OptionPosition >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::OptionQueryDealDetailReqt* Arena::CreateMaybeMessage< ::autotrade::OptionQueryDealDetailReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::OptionQueryDealDetailReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::OptionDealDetail* Arena::CreateMaybeMessage< ::autotrade::OptionDealDetail >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::OptionDealDetail >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::RawOptionKnock* Arena::CreateMaybeMessage< ::autotrade::RawOptionKnock >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::RawOptionKnock >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::OptionOrdersCreateResp_OrderList* Arena::CreateMaybeMessage< ::autotrade::OptionOrdersCreateResp_OrderList >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::OptionOrdersCreateResp_OrderList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::OptionOrdersCreateResp* Arena::CreateMaybeMessage< ::autotrade::OptionOrdersCreateResp >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::OptionOrdersCreateResp >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
