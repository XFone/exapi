// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/quotation.proto

#include "protos/quotation.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_protos_2fquotation_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fquotation_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EtfConstituentStock;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fquotation_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EtfFees_EtfFee;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fquotation_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Handicap_Item;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fquotation_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OptionVolatilitySurface_Value;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fquotation_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SecurityState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fquotation_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StockAmendments_StockAmendment;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fquotation_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VIndex_StockInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fquotation_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Handicap_Queue;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fquotation_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_OptionVolatilitySurface;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fquotation_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_OptionVolatilitySurfaces;
}  // namespace protobuf_protos_2fquotation_2eproto
namespace quotation {
class StockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Stock>
      _instance;
} _Stock_default_instance_;
class Handicap_ItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Handicap_Item>
      _instance;
} _Handicap_Item_default_instance_;
class Handicap_QueueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Handicap_Queue>
      _instance;
} _Handicap_Queue_default_instance_;
class HandicapDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Handicap>
      _instance;
} _Handicap_default_instance_;
class FutureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Future>
      _instance;
} _Future_default_instance_;
class OptionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Option>
      _instance;
} _Option_default_instance_;
class IndexDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Index>
      _instance;
} _Index_default_instance_;
class VIndex_StockInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VIndex_StockInfo>
      _instance;
} _VIndex_StockInfo_default_instance_;
class VIndexDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VIndex>
      _instance;
} _VIndex_default_instance_;
class GradedFundIopvDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GradedFundIopv>
      _instance;
} _GradedFundIopv_default_instance_;
class OptionVolatilityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OptionVolatility>
      _instance;
} _OptionVolatility_default_instance_;
class IndexParamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IndexParam>
      _instance;
} _IndexParam_default_instance_;
class SecurityOrderInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SecurityOrderInfo>
      _instance;
} _SecurityOrderInfo_default_instance_;
class PublicOrderDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PublicOrderData>
      _instance;
} _PublicOrderData_default_instance_;
class PublicOrderQueueDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PublicOrderQueueData>
      _instance;
} _PublicOrderQueueData_default_instance_;
class PublicOrderTransactionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PublicOrderTransaction>
      _instance;
} _PublicOrderTransaction_default_instance_;
class CurrentBasisDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CurrentBasis>
      _instance;
} _CurrentBasis_default_instance_;
class CircleQuotationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CircleQuotation>
      _instance;
} _CircleQuotation_default_instance_;
class OptionVolatilitySurface_ValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OptionVolatilitySurface_Value>
      _instance;
} _OptionVolatilitySurface_Value_default_instance_;
class OptionVolatilitySurfaceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OptionVolatilitySurface>
      _instance;
} _OptionVolatilitySurface_default_instance_;
class OptionVolatilitySurfacesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OptionVolatilitySurfaces>
      _instance;
} _OptionVolatilitySurfaces_default_instance_;
class SetOptionVolatilitySurfacesReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetOptionVolatilitySurfacesReq>
      _instance;
} _SetOptionVolatilitySurfacesReq_default_instance_;
class SetOptionVolatilitySurfacesRepDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetOptionVolatilitySurfacesRep>
      _instance;
} _SetOptionVolatilitySurfacesRep_default_instance_;
class SecurityStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SecurityState>
      _instance;
} _SecurityState_default_instance_;
class SecurityStateListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SecurityStateList>
      _instance;
} _SecurityStateList_default_instance_;
class TradingDayDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TradingDay>
      _instance;
} _TradingDay_default_instance_;
class EtfConstituentStockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EtfConstituentStock>
      _instance;
} _EtfConstituentStock_default_instance_;
class EtfListInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EtfListInfo>
      _instance;
} _EtfListInfo_default_instance_;
class EtfFees_EtfFeeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EtfFees_EtfFee>
      _instance;
} _EtfFees_EtfFee_default_instance_;
class EtfFeesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EtfFees>
      _instance;
} _EtfFees_default_instance_;
class StockAmendments_StockAmendmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StockAmendments_StockAmendment>
      _instance;
} _StockAmendments_StockAmendment_default_instance_;
class StockAmendmentsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StockAmendments>
      _instance;
} _StockAmendments_default_instance_;
class GradedFundInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GradedFundInfo>
      _instance;
} _GradedFundInfo_default_instance_;
class OptionInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OptionInfo>
      _instance;
} _OptionInfo_default_instance_;
}  // namespace quotation
namespace protobuf_protos_2fquotation_2eproto {
static void InitDefaultsStock() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::quotation::Stock::_i_give_permission_to_break_this_code_default_type_.DefaultConstruct();
  *::quotation::Stock::_i_give_permission_to_break_this_code_default_type_.get_mutable() = ::std::string("S", 1);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::quotation::Stock::_i_give_permission_to_break_this_code_default_type_.get_mutable());
  {
    void* ptr = &::quotation::_Stock_default_instance_;
    new (ptr) ::quotation::Stock();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quotation::Stock::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Stock =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStock}, {}};

static void InitDefaultsHandicap_Item() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quotation::_Handicap_Item_default_instance_;
    new (ptr) ::quotation::Handicap_Item();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quotation::Handicap_Item::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Handicap_Item =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHandicap_Item}, {}};

static void InitDefaultsHandicap_Queue() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quotation::_Handicap_Queue_default_instance_;
    new (ptr) ::quotation::Handicap_Queue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quotation::Handicap_Queue::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Handicap_Queue =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHandicap_Queue}, {
      &protobuf_protos_2fquotation_2eproto::scc_info_Handicap_Item.base,}};

static void InitDefaultsHandicap() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::quotation::Handicap::_i_give_permission_to_break_this_code_default_type_.DefaultConstruct();
  *::quotation::Handicap::_i_give_permission_to_break_this_code_default_type_.get_mutable() = ::std::string("H", 1);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::quotation::Handicap::_i_give_permission_to_break_this_code_default_type_.get_mutable());
  {
    void* ptr = &::quotation::_Handicap_default_instance_;
    new (ptr) ::quotation::Handicap();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quotation::Handicap::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Handicap =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHandicap}, {
      &protobuf_protos_2fquotation_2eproto::scc_info_Handicap_Queue.base,}};

static void InitDefaultsFuture() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::quotation::Future::_i_give_permission_to_break_this_code_default_type_.DefaultConstruct();
  *::quotation::Future::_i_give_permission_to_break_this_code_default_type_.get_mutable() = ::std::string("F", 1);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::quotation::Future::_i_give_permission_to_break_this_code_default_type_.get_mutable());
  {
    void* ptr = &::quotation::_Future_default_instance_;
    new (ptr) ::quotation::Future();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quotation::Future::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Future =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFuture}, {}};

static void InitDefaultsOption() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::quotation::Option::_i_give_permission_to_break_this_code_default_type_.DefaultConstruct();
  *::quotation::Option::_i_give_permission_to_break_this_code_default_type_.get_mutable() = ::std::string("O", 1);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::quotation::Option::_i_give_permission_to_break_this_code_default_type_.get_mutable());
  {
    void* ptr = &::quotation::_Option_default_instance_;
    new (ptr) ::quotation::Option();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quotation::Option::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Option =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOption}, {}};

static void InitDefaultsIndex() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::quotation::Index::_i_give_permission_to_break_this_code_default_type_.DefaultConstruct();
  *::quotation::Index::_i_give_permission_to_break_this_code_default_type_.get_mutable() = ::std::string("I", 1);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::quotation::Index::_i_give_permission_to_break_this_code_default_type_.get_mutable());
  {
    void* ptr = &::quotation::_Index_default_instance_;
    new (ptr) ::quotation::Index();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quotation::Index::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Index =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIndex}, {}};

static void InitDefaultsVIndex_StockInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quotation::_VIndex_StockInfo_default_instance_;
    new (ptr) ::quotation::VIndex_StockInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quotation::VIndex_StockInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VIndex_StockInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVIndex_StockInfo}, {}};

static void InitDefaultsVIndex() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::quotation::VIndex::_i_give_permission_to_break_this_code_default_type_.DefaultConstruct();
  *::quotation::VIndex::_i_give_permission_to_break_this_code_default_type_.get_mutable() = ::std::string("V", 1);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::quotation::VIndex::_i_give_permission_to_break_this_code_default_type_.get_mutable());
  {
    void* ptr = &::quotation::_VIndex_default_instance_;
    new (ptr) ::quotation::VIndex();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quotation::VIndex::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_VIndex =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsVIndex}, {
      &protobuf_protos_2fquotation_2eproto::scc_info_VIndex_StockInfo.base,}};

static void InitDefaultsGradedFundIopv() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::quotation::GradedFundIopv::_i_give_permission_to_break_this_code_default_type_.DefaultConstruct();
  *::quotation::GradedFundIopv::_i_give_permission_to_break_this_code_default_type_.get_mutable() = ::std::string("C", 1);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::quotation::GradedFundIopv::_i_give_permission_to_break_this_code_default_type_.get_mutable());
  {
    void* ptr = &::quotation::_GradedFundIopv_default_instance_;
    new (ptr) ::quotation::GradedFundIopv();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quotation::GradedFundIopv::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GradedFundIopv =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGradedFundIopv}, {}};

static void InitDefaultsOptionVolatility() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::quotation::OptionVolatility::_i_give_permission_to_break_this_code_default_type_.DefaultConstruct();
  *::quotation::OptionVolatility::_i_give_permission_to_break_this_code_default_type_.get_mutable() = ::std::string("P", 1);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::quotation::OptionVolatility::_i_give_permission_to_break_this_code_default_type_.get_mutable());
  {
    void* ptr = &::quotation::_OptionVolatility_default_instance_;
    new (ptr) ::quotation::OptionVolatility();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quotation::OptionVolatility::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OptionVolatility =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOptionVolatility}, {}};

static void InitDefaultsIndexParam() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quotation::_IndexParam_default_instance_;
    new (ptr) ::quotation::IndexParam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quotation::IndexParam::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IndexParam =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIndexParam}, {}};

static void InitDefaultsSecurityOrderInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quotation::_SecurityOrderInfo_default_instance_;
    new (ptr) ::quotation::SecurityOrderInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quotation::SecurityOrderInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SecurityOrderInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSecurityOrderInfo}, {}};

static void InitDefaultsPublicOrderData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::quotation::PublicOrderData::_i_give_permission_to_break_this_code_default_type_.DefaultConstruct();
  *::quotation::PublicOrderData::_i_give_permission_to_break_this_code_default_type_.get_mutable() = ::std::string("D", 1);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::quotation::PublicOrderData::_i_give_permission_to_break_this_code_default_type_.get_mutable());
  {
    void* ptr = &::quotation::_PublicOrderData_default_instance_;
    new (ptr) ::quotation::PublicOrderData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quotation::PublicOrderData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PublicOrderData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPublicOrderData}, {}};

static void InitDefaultsPublicOrderQueueData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::quotation::PublicOrderQueueData::_i_give_permission_to_break_this_code_default_type_.DefaultConstruct();
  *::quotation::PublicOrderQueueData::_i_give_permission_to_break_this_code_default_type_.get_mutable() = ::std::string("Q", 1);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::quotation::PublicOrderQueueData::_i_give_permission_to_break_this_code_default_type_.get_mutable());
  {
    void* ptr = &::quotation::_PublicOrderQueueData_default_instance_;
    new (ptr) ::quotation::PublicOrderQueueData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quotation::PublicOrderQueueData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PublicOrderQueueData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPublicOrderQueueData}, {}};

static void InitDefaultsPublicOrderTransaction() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::quotation::PublicOrderTransaction::_i_give_permission_to_break_this_code_default_type_.DefaultConstruct();
  *::quotation::PublicOrderTransaction::_i_give_permission_to_break_this_code_default_type_.get_mutable() = ::std::string("T", 1);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::quotation::PublicOrderTransaction::_i_give_permission_to_break_this_code_default_type_.get_mutable());
  {
    void* ptr = &::quotation::_PublicOrderTransaction_default_instance_;
    new (ptr) ::quotation::PublicOrderTransaction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quotation::PublicOrderTransaction::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PublicOrderTransaction =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPublicOrderTransaction}, {}};

static void InitDefaultsCurrentBasis() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::quotation::CurrentBasis::_i_give_permission_to_break_this_code_default_type_.DefaultConstruct();
  *::quotation::CurrentBasis::_i_give_permission_to_break_this_code_default_type_.get_mutable() = ::std::string("B", 1);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::quotation::CurrentBasis::_i_give_permission_to_break_this_code_default_type_.get_mutable());
  {
    void* ptr = &::quotation::_CurrentBasis_default_instance_;
    new (ptr) ::quotation::CurrentBasis();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quotation::CurrentBasis::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CurrentBasis =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCurrentBasis}, {}};

static void InitDefaultsCircleQuotation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::quotation::CircleQuotation::_i_give_permission_to_break_this_code_default_type_.DefaultConstruct();
  *::quotation::CircleQuotation::_i_give_permission_to_break_this_code_default_type_.get_mutable() = ::std::string("CIRCLE", 6);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::quotation::CircleQuotation::_i_give_permission_to_break_this_code_default_type_.get_mutable());
  {
    void* ptr = &::quotation::_CircleQuotation_default_instance_;
    new (ptr) ::quotation::CircleQuotation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quotation::CircleQuotation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CircleQuotation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCircleQuotation}, {}};

static void InitDefaultsOptionVolatilitySurface_Value() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quotation::_OptionVolatilitySurface_Value_default_instance_;
    new (ptr) ::quotation::OptionVolatilitySurface_Value();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quotation::OptionVolatilitySurface_Value::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OptionVolatilitySurface_Value =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOptionVolatilitySurface_Value}, {}};

static void InitDefaultsOptionVolatilitySurface() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quotation::_OptionVolatilitySurface_default_instance_;
    new (ptr) ::quotation::OptionVolatilitySurface();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quotation::OptionVolatilitySurface::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_OptionVolatilitySurface =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOptionVolatilitySurface}, {
      &protobuf_protos_2fquotation_2eproto::scc_info_OptionVolatilitySurface_Value.base,}};

static void InitDefaultsOptionVolatilitySurfaces() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quotation::_OptionVolatilitySurfaces_default_instance_;
    new (ptr) ::quotation::OptionVolatilitySurfaces();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quotation::OptionVolatilitySurfaces::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_OptionVolatilitySurfaces =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOptionVolatilitySurfaces}, {
      &protobuf_protos_2fquotation_2eproto::scc_info_OptionVolatilitySurface.base,}};

static void InitDefaultsSetOptionVolatilitySurfacesReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quotation::_SetOptionVolatilitySurfacesReq_default_instance_;
    new (ptr) ::quotation::SetOptionVolatilitySurfacesReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quotation::SetOptionVolatilitySurfacesReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SetOptionVolatilitySurfacesReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSetOptionVolatilitySurfacesReq}, {
      &protobuf_protos_2fquotation_2eproto::scc_info_OptionVolatilitySurfaces.base,}};

static void InitDefaultsSetOptionVolatilitySurfacesRep() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quotation::_SetOptionVolatilitySurfacesRep_default_instance_;
    new (ptr) ::quotation::SetOptionVolatilitySurfacesRep();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quotation::SetOptionVolatilitySurfacesRep::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SetOptionVolatilitySurfacesRep =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSetOptionVolatilitySurfacesRep}, {}};

static void InitDefaultsSecurityState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quotation::_SecurityState_default_instance_;
    new (ptr) ::quotation::SecurityState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quotation::SecurityState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SecurityState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSecurityState}, {}};

static void InitDefaultsSecurityStateList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quotation::_SecurityStateList_default_instance_;
    new (ptr) ::quotation::SecurityStateList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quotation::SecurityStateList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SecurityStateList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSecurityStateList}, {
      &protobuf_protos_2fquotation_2eproto::scc_info_SecurityState.base,}};

static void InitDefaultsTradingDay() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quotation::_TradingDay_default_instance_;
    new (ptr) ::quotation::TradingDay();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quotation::TradingDay::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TradingDay =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTradingDay}, {}};

static void InitDefaultsEtfConstituentStock() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quotation::_EtfConstituentStock_default_instance_;
    new (ptr) ::quotation::EtfConstituentStock();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quotation::EtfConstituentStock::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EtfConstituentStock =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEtfConstituentStock}, {}};

static void InitDefaultsEtfListInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quotation::_EtfListInfo_default_instance_;
    new (ptr) ::quotation::EtfListInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quotation::EtfListInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_EtfListInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEtfListInfo}, {
      &protobuf_protos_2fquotation_2eproto::scc_info_EtfConstituentStock.base,}};

static void InitDefaultsEtfFees_EtfFee() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quotation::_EtfFees_EtfFee_default_instance_;
    new (ptr) ::quotation::EtfFees_EtfFee();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quotation::EtfFees_EtfFee::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EtfFees_EtfFee =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEtfFees_EtfFee}, {}};

static void InitDefaultsEtfFees() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quotation::_EtfFees_default_instance_;
    new (ptr) ::quotation::EtfFees();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quotation::EtfFees::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_EtfFees =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEtfFees}, {
      &protobuf_protos_2fquotation_2eproto::scc_info_EtfFees_EtfFee.base,}};

static void InitDefaultsStockAmendments_StockAmendment() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quotation::_StockAmendments_StockAmendment_default_instance_;
    new (ptr) ::quotation::StockAmendments_StockAmendment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quotation::StockAmendments_StockAmendment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StockAmendments_StockAmendment =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStockAmendments_StockAmendment}, {}};

static void InitDefaultsStockAmendments() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quotation::_StockAmendments_default_instance_;
    new (ptr) ::quotation::StockAmendments();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quotation::StockAmendments::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StockAmendments =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStockAmendments}, {
      &protobuf_protos_2fquotation_2eproto::scc_info_StockAmendments_StockAmendment.base,}};

static void InitDefaultsGradedFundInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quotation::_GradedFundInfo_default_instance_;
    new (ptr) ::quotation::GradedFundInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quotation::GradedFundInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GradedFundInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGradedFundInfo}, {}};

static void InitDefaultsOptionInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quotation::_OptionInfo_default_instance_;
    new (ptr) ::quotation::OptionInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quotation::OptionInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OptionInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOptionInfo}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Stock.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Handicap_Item.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Handicap_Queue.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Handicap.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Future.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Option.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Index.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VIndex_StockInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VIndex.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GradedFundIopv.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OptionVolatility.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IndexParam.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SecurityOrderInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PublicOrderData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PublicOrderQueueData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PublicOrderTransaction.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CurrentBasis.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CircleQuotation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OptionVolatilitySurface_Value.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OptionVolatilitySurface.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OptionVolatilitySurfaces.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetOptionVolatilitySurfacesReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetOptionVolatilitySurfacesRep.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SecurityState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SecurityStateList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TradingDay.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EtfConstituentStock.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EtfListInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EtfFees_EtfFee.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EtfFees.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StockAmendments_StockAmendment.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StockAmendments.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GradedFundInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OptionInfo.base);
}

::google::protobuf::Metadata file_level_metadata[34];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, trading_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, new_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, new_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, sum_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, sum_amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, bp1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, bp2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, bp3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, bp4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, bp5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, ba1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, ba2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, ba3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, ba4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, ba5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, sp1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, sp2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, sp3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, sp4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, sp5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, sa1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, sa2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, sa3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, sa4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, sa5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, preclose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, high_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, low_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, iopv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, bp1_ajust_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, sp1_ajust_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, bought_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, sold_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, bp6_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, bp7_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, bp8_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, bp9_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, bp10_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, ba6_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, ba7_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, ba8_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, ba9_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, ba10_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, sp6_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, sp7_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, sp8_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, sp9_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, sp10_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, sa6_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, sa7_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, sa8_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, sa9_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, sa10_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, upperlimit_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, lowerlimit_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Stock, market_),
  0,
  3,
  4,
  5,
  6,
  7,
  8,
  1,
  2,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  56,
  57,
  58,
  59,
  60,
  61,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Handicap_Item, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Handicap_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Handicap_Item, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Handicap_Item, order_no_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Handicap_Queue, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Handicap_Queue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Handicap_Queue, items_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Handicap, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Handicap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Handicap, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Handicap, trading_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Handicap, stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Handicap, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Handicap, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Handicap, market_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Handicap, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Handicap, upperlimit_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Handicap, lowerlimit_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Handicap, preclose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Handicap, open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Handicap, high_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Handicap, low_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Handicap, new_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Handicap, new_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Handicap, sum_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Handicap, sum_amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Handicap, bp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Handicap, ba_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Handicap, sp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Handicap, sa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Handicap, ask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Handicap, bid_),
  0,
  3,
  4,
  1,
  2,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, trading_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, new_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, match_amt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, new_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, total_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, position_change_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, bp1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, bp2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, bp3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, bp4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, bp5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, ba1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, ba2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, ba3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, ba4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, ba5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, sp1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, sp2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, sp3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, sp4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, sp5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, sa1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, sa2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, sa3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, sa4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, sa5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, exchange_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, presettlement_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, preclose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, preposition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, open_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, highest_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, lowest_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, close_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, settlement_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, upperlimit_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, lowerlimit_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, update_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, update_millisec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, average_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, open_interest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, bought_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, sold_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Future, market_),
  0,
  5,
  6,
  1,
  2,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  3,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  4,
  48,
  43,
  44,
  45,
  46,
  47,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, trading_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, trade_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, market_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, start_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, end_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, expire_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, exercise_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, exercise_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, underlying_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, underlying_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, cp_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, option_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, preformance_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, price_limit_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, contract_unit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, exchange_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, pre_open_interest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, pre_close_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, pre_settle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, high_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, low_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, latest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, open_interest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, close_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, settle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, high_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, low_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, pre_delta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, delta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, bp1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, bp2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, bp3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, bp4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, bp5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, ba1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, ba2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, ba3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, ba4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, ba5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, sp1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, sp2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, sp3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, sp4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, sp5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, sa1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, sa2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, sa3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, sa4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Option, sa5_),
  0,
  5,
  6,
  1,
  2,
  3,
  7,
  8,
  9,
  10,
  11,
  12,
  4,
  13,
  14,
  15,
  16,
  18,
  17,
  19,
  56,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Index, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Index, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Index, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Index, trading_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Index, stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Index, new_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Index, amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Index, sum_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Index, new_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Index, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Index, bp1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Index, sp1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Index, preclose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Index, amountofpriceupanddown_new_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Index, amountofpriceupanddown_bp1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Index, amountofpriceupanddown_sp1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Index, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::Index, market_),
  0,
  3,
  4,
  5,
  6,
  7,
  8,
  1,
  9,
  10,
  11,
  12,
  13,
  14,
  2,
  15,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::VIndex_StockInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::VIndex_StockInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::VIndex_StockInfo, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::VIndex_StockInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::VIndex_StockInfo, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::VIndex_StockInfo, amount_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::VIndex, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::VIndex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::VIndex, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::VIndex, trading_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::VIndex, stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::VIndex, new_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::VIndex, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::VIndex, bp1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::VIndex, sp1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::VIndex, limit_up_amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::VIndex, limit_down_amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::VIndex, non_must_suspension_amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::VIndex, must_non_suspension_amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::VIndex, limit_up_stocks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::VIndex, limit_down_stocks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::VIndex, non_must_suspension_stocks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::VIndex, must_non_suspension_stocks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::VIndex, etf_bp1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::VIndex, etf_sp1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::VIndex, avg1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::VIndex, limit_up_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::VIndex, limit_down_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::VIndex, non_must_suspension_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::VIndex, must_non_suspension_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::VIndex, must_non_suspension_amendment_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::VIndex, must_non_suspension_amendment_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::VIndex, create_stock_amendment_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::VIndex, create_stock_amendment_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::VIndex, create_amendment_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::VIndex, create_amendment_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::VIndex, redeem_stock_amendment_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::VIndex, redeem_stock_amendment_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::VIndex, redeem_amendment_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::VIndex, redeem_amendment_rate_),
  0,
  2,
  3,
  4,
  1,
  5,
  6,
  7,
  8,
  9,
  10,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, trading_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, fof_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, fof_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, fof_pre_nav_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, a_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, a_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, a_bp1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, a_sp1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, a_quote_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, b_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, b_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, b_bp1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, b_sp1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, b_quote_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, underlying_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, underlying_latest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, underlying_pre_close_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, underlying_quote_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, hs300_latest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, hs300_pre_close_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, hs300_quote_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, ratio_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, ratio_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, position_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, discount_fee_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, premium_fee_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, underlying_amplitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, hs300_amplitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, fof_strength_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, fof_iopv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, bp1_iopv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, sp1_iopv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, bp1_iopv_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, sp1_iopv_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, discount_bp1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, discount_sp1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, premium_bp1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, premium_sp1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundIopv, msg_),
  0,
  9,
  10,
  1,
  2,
  11,
  3,
  4,
  12,
  13,
  14,
  5,
  6,
  16,
  17,
  15,
  7,
  18,
  19,
  21,
  20,
  23,
  22,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatility, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatility, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatility, trading_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatility, stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatility, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatility, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatility, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatility, quote_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatility, cp_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatility, expire_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatility, exercise_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatility, unit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatility, underlying_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatility, underlying_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatility, underlying_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatility, underlying_quote_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatility, interest_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatility, volatility_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatility, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatility, implied_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatility, implied_volatility_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatility, delta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatility, dollar_delta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatility, theta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatility, dollar_theta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatility, gamma_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatility, dollar_gamma_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatility, vega_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatility, dollar_vega_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatility, rho_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatility, dollar_rho_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatility, msg_),
  0,
  5,
  6,
  1,
  2,
  7,
  8,
  9,
  12,
  10,
  11,
  3,
  13,
  14,
  30,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::IndexParam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::IndexParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::IndexParam, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::IndexParam, trading_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::IndexParam, stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::IndexParam, weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::IndexParam, calc_shares_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::IndexParam, total_shares_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::IndexParam, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::IndexParam, effective_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::IndexParam, c_factor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::IndexParam, pre_close_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::IndexParam, adj_pre_close_),
  0,
  3,
  4,
  5,
  6,
  7,
  1,
  2,
  8,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::SecurityOrderInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::SecurityOrderInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::SecurityOrderInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::SecurityOrderInfo, trading_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::SecurityOrderInfo, stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::SecurityOrderInfo, stkcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::SecurityOrderInfo, order_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::SecurityOrderInfo, match_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::SecurityOrderInfo, order_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::SecurityOrderInfo, match_amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::SecurityOrderInfo, clear_amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::SecurityOrderInfo, match_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::SecurityOrderInfo, last_match_id_),
  0,
  3,
  4,
  1,
  5,
  6,
  7,
  8,
  9,
  10,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::PublicOrderData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::PublicOrderData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::PublicOrderData, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::PublicOrderData, trading_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::PublicOrderData, stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::PublicOrderData, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::PublicOrderData, order_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::PublicOrderData, order_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::PublicOrderData, order_no_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::PublicOrderData, order_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::PublicOrderData, order_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::PublicOrderData, order_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::PublicOrderData, bs_flag_),
  0,
  4,
  5,
  1,
  6,
  7,
  2,
  8,
  9,
  3,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::PublicOrderQueueData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::PublicOrderQueueData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::PublicOrderQueueData, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::PublicOrderQueueData, trading_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::PublicOrderQueueData, stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::PublicOrderQueueData, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::PublicOrderQueueData, order_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::PublicOrderQueueData, order_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::PublicOrderQueueData, bs_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::PublicOrderQueueData, order_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::PublicOrderQueueData, order_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::PublicOrderQueueData, volumes_),
  0,
  2,
  3,
  1,
  4,
  5,
  6,
  7,
  8,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::PublicOrderTransaction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::PublicOrderTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::PublicOrderTransaction, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::PublicOrderTransaction, trading_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::PublicOrderTransaction, stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::PublicOrderTransaction, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::PublicOrderTransaction, match_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::PublicOrderTransaction, match_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::PublicOrderTransaction, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::PublicOrderTransaction, match_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::PublicOrderTransaction, match_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::PublicOrderTransaction, match_amt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::PublicOrderTransaction, bs_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::PublicOrderTransaction, match_kind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::PublicOrderTransaction, match_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::PublicOrderTransaction, ask_order_no_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::PublicOrderTransaction, bid_order_no_),
  0,
  7,
  8,
  1,
  9,
  10,
  2,
  11,
  12,
  13,
  14,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::CurrentBasis, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::CurrentBasis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::CurrentBasis, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::CurrentBasis, trading_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::CurrentBasis, stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::CurrentBasis, date_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::CurrentBasis, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::CurrentBasis, create_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::CurrentBasis, buy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::CurrentBasis, sell_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::CurrentBasis, redeem_),
  0,
  2,
  3,
  8,
  1,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::CircleQuotation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::CircleQuotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::CircleQuotation, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::CircleQuotation, trading_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::CircleQuotation, stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::CircleQuotation, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::CircleQuotation, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::CircleQuotation, circle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::CircleQuotation, open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::CircleQuotation, high_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::CircleQuotation, low_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::CircleQuotation, close_),
  0,
  2,
  3,
  9,
  1,
  8,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatilitySurface_Value, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatilitySurface_Value, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatilitySurface_Value, value_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatilitySurface, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatilitySurface, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatilitySurface, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatilitySurface, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatilitySurface, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatilitySurface, v_),
  0,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatilitySurfaces, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatilitySurfaces, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatilitySurfaces, underlying_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatilitySurfaces, items_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionVolatilitySurfaces, default_id_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::SetOptionVolatilitySurfacesReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::SetOptionVolatilitySurfacesReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::SetOptionVolatilitySurfacesReq, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::SetOptionVolatilitySurfacesReq, data_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::SetOptionVolatilitySurfacesRep, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::SetOptionVolatilitySurfacesRep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::SetOptionVolatilitySurfacesRep, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::SetOptionVolatilitySurfacesRep, rc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::SetOptionVolatilitySurfacesRep, msg_),
  2,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::SecurityState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::SecurityState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::SecurityState, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::SecurityState, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::SecurityState, state_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::SecurityStateList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::SecurityStateList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::SecurityStateList, items_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::TradingDay, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::TradingDay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::TradingDay, data_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::TradingDay, weekday_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::TradingDay, is_trading_day_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::EtfConstituentStock, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::EtfConstituentStock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::EtfConstituentStock, stock_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::EtfConstituentStock, stock_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::EtfConstituentStock, market_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::EtfConstituentStock, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::EtfConstituentStock, cash_replace_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::EtfConstituentStock, cash_replace_premium_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::EtfConstituentStock, cash_replace_amount_),
  0,
  1,
  3,
  2,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::EtfListInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::EtfListInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::EtfListInfo, data_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::EtfListInfo, data_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::EtfListInfo, pre_trading_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::EtfListInfo, stock_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::EtfListInfo, primary_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::EtfListInfo, underlying_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::EtfListInfo, market_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::EtfListInfo, stock_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::EtfListInfo, company_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::EtfListInfo, pre_cash_diff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::EtfListInfo, pre_unit_iopv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::EtfListInfo, pre_iopv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::EtfListInfo, estimate_cash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::EtfListInfo, max_cash_replace_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::EtfListInfo, max_purchase_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::EtfListInfo, max_redeem_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::EtfListInfo, is_publish_iopv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::EtfListInfo, unit_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::EtfListInfo, compose_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::EtfListInfo, is_open_purchase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::EtfListInfo, is_open_redeem_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::EtfListInfo, stocks_),
  5,
  6,
  7,
  0,
  1,
  2,
  8,
  3,
  4,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  17,
  16,
  19,
  18,
  20,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::EtfFees_EtfFee, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::EtfFees_EtfFee, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::EtfFees_EtfFee, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::EtfFees_EtfFee, create_fee_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::EtfFees_EtfFee, redeem_fee_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::EtfFees, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::EtfFees, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::EtfFees, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::EtfFees, items_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::StockAmendments_StockAmendment, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::StockAmendments_StockAmendment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::StockAmendments_StockAmendment, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::StockAmendments_StockAmendment, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::StockAmendments_StockAmendment, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::StockAmendments_StockAmendment, create_change_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::StockAmendments_StockAmendment, redeem_change_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::StockAmendments, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::StockAmendments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::StockAmendments, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::StockAmendments, items_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundInfo, data_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundInfo, fof_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundInfo, fof_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundInfo, fof_quota_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundInfo, fof_pre_nav_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundInfo, fof_nav_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundInfo, fof_market_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundInfo, a_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundInfo, a_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundInfo, a_quota_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundInfo, a_pre_nav_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundInfo, a_nav_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundInfo, a_market_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundInfo, a_pre_close_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundInfo, a_discount_premium_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundInfo, a_appointed_yield_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundInfo, b_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundInfo, b_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundInfo, b_quota_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundInfo, b_pre_nav_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundInfo, b_nav_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundInfo, b_market_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundInfo, b_pre_close_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundInfo, b_discount_premium_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundInfo, ratio_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundInfo, ratio_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundInfo, total_market_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundInfo, underlying_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundInfo, underlying_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundInfo, underlying_factor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundInfo, manager_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundInfo, listing_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundInfo, translation_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundInfo, up_clause_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundInfo, down_clause_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::GradedFundInfo, position_rate_),
  22,
  0,
  1,
  12,
  13,
  14,
  15,
  2,
  3,
  16,
  17,
  18,
  19,
  20,
  21,
  4,
  5,
  6,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  7,
  8,
  33,
  9,
  23,
  35,
  10,
  11,
  34,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionInfo, data_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionInfo, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionInfo, market_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionInfo, trade_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionInfo, underlying_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionInfo, underlying_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionInfo, underlying_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionInfo, underlying_pre_close_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionInfo, cp_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionInfo, unit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionInfo, exercise_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionInfo, exercise_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionInfo, settle_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionInfo, expire_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionInfo, is_expired_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionInfo, is_new_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionInfo, is_adjusted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionInfo, is_open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionInfo, high_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionInfo, low_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionInfo, pre_settle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionInfo, deposit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quotation::OptionInfo, algebra_),
  7,
  0,
  1,
  2,
  6,
  3,
  4,
  5,
  9,
  10,
  11,
  12,
  8,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 67, sizeof(::quotation::Stock)},
  { 129, 136, sizeof(::quotation::Handicap_Item)},
  { 138, 144, sizeof(::quotation::Handicap_Queue)},
  { 145, 173, sizeof(::quotation::Handicap)},
  { 196, 250, sizeof(::quotation::Future)},
  { 299, 361, sizeof(::quotation::Option)},
  { 418, 439, sizeof(::quotation::Index)},
  { 455, 464, sizeof(::quotation::VIndex_StockInfo)},
  { 468, 505, sizeof(::quotation::VIndex)},
  { 537, 584, sizeof(::quotation::GradedFundIopv)},
  { 626, 662, sizeof(::quotation::OptionVolatility)},
  { 693, 709, sizeof(::quotation::IndexParam)},
  { 720, 736, sizeof(::quotation::SecurityOrderInfo)},
  { 747, 763, sizeof(::quotation::PublicOrderData)},
  { 774, 789, sizeof(::quotation::PublicOrderQueueData)},
  { 799, 819, sizeof(::quotation::PublicOrderTransaction)},
  { 834, 848, sizeof(::quotation::CurrentBasis)},
  { 857, 872, sizeof(::quotation::CircleQuotation)},
  { 882, 888, sizeof(::quotation::OptionVolatilitySurface_Value)},
  { 889, 898, sizeof(::quotation::OptionVolatilitySurface)},
  { 902, 910, sizeof(::quotation::OptionVolatilitySurfaces)},
  { 913, 920, sizeof(::quotation::SetOptionVolatilitySurfacesReq)},
  { 922, 930, sizeof(::quotation::SetOptionVolatilitySurfacesRep)},
  { 933, 941, sizeof(::quotation::SecurityState)},
  { 944, 950, sizeof(::quotation::SecurityStateList)},
  { 951, 959, sizeof(::quotation::TradingDay)},
  { 962, 974, sizeof(::quotation::EtfConstituentStock)},
  { 981, 1008, sizeof(::quotation::EtfListInfo)},
  { 1030, 1038, sizeof(::quotation::EtfFees_EtfFee)},
  { 1041, 1048, sizeof(::quotation::EtfFees)},
  { 1050, 1060, sizeof(::quotation::StockAmendments_StockAmendment)},
  { 1065, 1072, sizeof(::quotation::StockAmendments)},
  { 1074, 1115, sizeof(::quotation::GradedFundInfo)},
  { 1151, 1181, sizeof(::quotation::OptionInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::quotation::_Stock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quotation::_Handicap_Item_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quotation::_Handicap_Queue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quotation::_Handicap_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quotation::_Future_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quotation::_Option_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quotation::_Index_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quotation::_VIndex_StockInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quotation::_VIndex_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quotation::_GradedFundIopv_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quotation::_OptionVolatility_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quotation::_IndexParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quotation::_SecurityOrderInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quotation::_PublicOrderData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quotation::_PublicOrderQueueData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quotation::_PublicOrderTransaction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quotation::_CurrentBasis_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quotation::_CircleQuotation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quotation::_OptionVolatilitySurface_Value_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quotation::_OptionVolatilitySurface_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quotation::_OptionVolatilitySurfaces_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quotation::_SetOptionVolatilitySurfacesReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quotation::_SetOptionVolatilitySurfacesRep_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quotation::_SecurityState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quotation::_SecurityStateList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quotation::_TradingDay_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quotation::_EtfConstituentStock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quotation::_EtfListInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quotation::_EtfFees_EtfFee_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quotation::_EtfFees_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quotation::_StockAmendments_StockAmendment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quotation::_StockAmendments_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quotation::_GradedFundInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quotation::_OptionInfo_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "protos/quotation.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 34);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026protos/quotation.proto\022\tquotation\"\242\007\n\005"
      "Stock\022\017\n\004type\030\001 \001(\t:\001S\022\023\n\013trading_day\030\002 "
      "\001(\r\022\r\n\005stamp\030\003 \002(\r\022\021\n\tnew_price\030\004 \002(\003\022\022\n"
      "\nnew_volume\030\005 \001(\003\022\022\n\nsum_volume\030\006 \001(\003\022\022\n"
      "\nsum_amount\030\007 \001(\003\022\014\n\004code\030\010 \002(\t\022\014\n\004name\030"
      "\t \001(\t\022\013\n\003bp1\030\n \001(\003\022\013\n\003bp2\030\013 \001(\003\022\013\n\003bp3\030\014"
      " \001(\003\022\013\n\003bp4\030\r \001(\003\022\013\n\003bp5\030\016 \001(\003\022\013\n\003ba1\030\017 "
      "\001(\003\022\013\n\003ba2\030\020 \001(\003\022\013\n\003ba3\030\021 \001(\003\022\013\n\003ba4\030\022 \001"
      "(\003\022\013\n\003ba5\030\023 \001(\003\022\013\n\003sp1\030\024 \001(\003\022\013\n\003sp2\030\025 \001("
      "\003\022\013\n\003sp3\030\026 \001(\003\022\013\n\003sp4\030\027 \001(\003\022\013\n\003sp5\030\030 \001(\003"
      "\022\013\n\003sa1\030\031 \001(\003\022\013\n\003sa2\030\032 \001(\003\022\013\n\003sa3\030\033 \001(\003\022"
      "\013\n\003sa4\030\034 \001(\003\022\013\n\003sa5\030\035 \001(\003\022\016\n\006status\030\036 \001("
      "\003\022\020\n\010preclose\030\037 \001(\003\022\014\n\004open\030  \001(\003\022\014\n\004hig"
      "h\030! \001(\003\022\013\n\003low\030\" \001(\003\022\014\n\004iopv\030# \001(\003\022\021\n\tbp"
      "1_ajust\030$ \001(\003\022\021\n\tsp1_ajust\030% \001(\003\022\025\n\rboug"
      "ht_volume\030& \001(\003\022\023\n\013sold_volume\030\' \001(\003\022\013\n\003"
      "bp6\030( \001(\003\022\013\n\003bp7\030) \001(\003\022\013\n\003bp8\030* \001(\003\022\013\n\003b"
      "p9\030+ \001(\003\022\014\n\004bp10\030, \001(\003\022\013\n\003ba6\030- \001(\003\022\013\n\003b"
      "a7\030. \001(\003\022\013\n\003ba8\030/ \001(\003\022\013\n\003ba9\0300 \001(\003\022\014\n\004ba"
      "10\0301 \001(\003\022\013\n\003sp6\0302 \001(\003\022\013\n\003sp7\0303 \001(\003\022\013\n\003sp"
      "8\0304 \001(\003\022\013\n\003sp9\0305 \001(\003\022\014\n\004sp10\0306 \001(\003\022\013\n\003sa"
      "6\0307 \001(\003\022\013\n\003sa7\0308 \001(\003\022\013\n\003sa8\0309 \001(\003\022\013\n\003sa9"
      "\030: \001(\003\022\014\n\004sa10\030; \001(\003\022\030\n\020upperlimit_price"
      "\030< \001(\003\022\030\n\020lowerlimit_price\030= \001(\003\022\016\n\006mark"
      "et\030> \001(\003\"\225\004\n\010Handicap\022\017\n\004type\030\001 \001(\t:\001H\022\023"
      "\n\013trading_day\030\002 \001(\r\022\r\n\005stamp\030\003 \002(\r\022\014\n\004co"
      "de\030\004 \002(\t\022\014\n\004name\030\005 \001(\t\022\016\n\006market\030\006 \001(\003\022\016"
      "\n\006status\030\007 \001(\003\022\030\n\020upperlimit_price\030\010 \001(\003"
      "\022\030\n\020lowerlimit_price\030\t \001(\003\022\020\n\010preclose\030\n"
      " \001(\003\022\014\n\004open\030\013 \001(\003\022\014\n\004high\030\014 \001(\003\022\013\n\003low\030"
      "\r \001(\003\022\021\n\tnew_price\030\016 \001(\003\022\022\n\nnew_volume\030\017"
      " \001(\003\022\022\n\nsum_volume\030\020 \001(\003\022\022\n\nsum_amount\030\021"
      " \001(\003\022\n\n\002bp\030\022 \003(\003\022\n\n\002ba\030\023 \003(\003\022\n\n\002sp\030\024 \003(\003"
      "\022\n\n\002sa\030\025 \003(\003\022&\n\003ask\030\026 \003(\0132\031.quotation.Ha"
      "ndicap.Queue\022&\n\003bid\030\027 \003(\0132\031.quotation.Ha"
      "ndicap.Queue\032(\n\004Item\022\016\n\006volume\030\001 \002(\003\022\020\n\010"
      "order_no\030\002 \001(\t\0320\n\005Queue\022\'\n\005items\030\001 \003(\0132\030"
      ".quotation.Handicap.Item\"\355\006\n\006Future\022\017\n\004t"
      "ype\030\001 \001(\t:\001F\022\023\n\013trading_day\030\002 \001(\r\022\r\n\005sta"
      "mp\030\003 \002(\r\022\014\n\004code\030\004 \002(\t\022\014\n\004name\030\005 \001(\t\022\021\n\t"
      "new_price\030\006 \002(\003\022\016\n\006volume\030\007 \002(\004\022\021\n\tmatch"
      "_amt\030\010 \002(\003\022\022\n\nnew_volume\030\t \001(\003\022\026\n\016total_"
      "position\030\n \001(\003\022\027\n\017position_change\030\013 \001(\003\022"
      "\013\n\003bp1\030\014 \002(\003\022\013\n\003bp2\030\r \001(\003\022\013\n\003bp3\030\016 \001(\003\022\013"
      "\n\003bp4\030\017 \001(\003\022\013\n\003bp5\030\020 \001(\003\022\013\n\003ba1\030\021 \002(\003\022\013\n"
      "\003ba2\030\022 \001(\003\022\013\n\003ba3\030\023 \001(\003\022\013\n\003ba4\030\024 \001(\003\022\013\n\003"
      "ba5\030\025 \001(\003\022\013\n\003sp1\030\026 \002(\003\022\013\n\003sp2\030\027 \001(\003\022\013\n\003s"
      "p3\030\030 \001(\003\022\013\n\003sp4\030\031 \001(\003\022\013\n\003sp5\030\032 \001(\003\022\013\n\003sa"
      "1\030\033 \002(\003\022\013\n\003sa2\030\034 \001(\003\022\013\n\003sa3\030\035 \001(\003\022\013\n\003sa4"
      "\030\036 \001(\003\022\013\n\003sa5\030\037 \001(\003\022\023\n\013exchange_id\030  \001(\t"
      "\022\033\n\023presettlement_price\030! \001(\003\022\020\n\010preclos"
      "e\030\" \001(\003\022\023\n\013preposition\030# \001(\003\022\022\n\nopen_pri"
      "ce\030$ \001(\003\022\025\n\rhighest_price\030% \001(\003\022\024\n\014lowes"
      "t_price\030& \001(\003\022\023\n\013close_price\030\' \001(\003\022\030\n\020se"
      "ttlement_price\030( \001(\003\022\030\n\020upperlimit_price"
      "\030) \001(\003\022\030\n\020lowerlimit_price\030* \001(\003\022\023\n\013upda"
      "te_time\030+ \001(\t\022\027\n\017update_millisec\030, \001(\r\022\025"
      "\n\raverage_price\030- \001(\003\022\025\n\ropen_interest\030."
      " \001(\003\022\025\n\rbought_volume\030/ \001(\003\022\023\n\013sold_volu"
      "me\0300 \001(\003\022\016\n\006market\0301 \001(\003\"\316\007\n\006Option\022\017\n\004t"
      "ype\030\001 \001(\t:\001O\022\023\n\013trading_day\030\002 \001(\r\022\r\n\005sta"
      "mp\030\003 \002(\r\022\014\n\004code\030\004 \002(\t\022\022\n\ntrade_code\030\005 \001"
      "(\t\022\014\n\004name\030\006 \001(\t\022\016\n\006market\030\007 \001(\003\022\022\n\nstar"
      "t_date\030\010 \001(\r\022\020\n\010end_date\030\t \001(\r\022\023\n\013expire"
      "_date\030\n \001(\r\022\025\n\rexercise_date\030\013 \001(\r\022\026\n\016ex"
      "ercise_price\030\014 \001(\003\022\027\n\017underlying_code\030\r "
      "\001(\t\022\027\n\017underlying_type\030\016 \001(\005\022\017\n\007cp_flag\030"
      "\017 \001(\005\022\023\n\013option_type\030\020 \001(\005\022\030\n\020preformanc"
      "e_type\030\021 \001(\005\022\030\n\020price_limit_type\030\022 \001(\005\022\025"
      "\n\rcontract_unit\030\023 \001(\003\022\025\n\rexchange_time\030\024"
      " \001(\r\022\r\n\005state\030\025 \001(\005\022\031\n\021pre_open_interest"
      "\030\026 \001(\003\022\021\n\tpre_close\030\027 \001(\003\022\022\n\npre_settle\030"
      "\030 \001(\003\022\014\n\004open\030\031 \001(\003\022\014\n\004high\030\032 \001(\003\022\013\n\003low"
      "\030\033 \001(\003\022\016\n\006latest\030\034 \001(\003\022\016\n\006volume\030\035 \001(\003\022\016"
      "\n\006amount\030\036 \001(\003\022\025\n\ropen_interest\030\037 \001(\003\022\r\n"
      "\005close\030  \001(\003\022\016\n\006settle\030! \001(\003\022\022\n\nhigh_lim"
      "it\030\" \001(\003\022\021\n\tlow_limit\030# \001(\003\022\021\n\tpre_delta"
      "\030$ \001(\003\022\r\n\005delta\030% \001(\003\022\013\n\003bp1\030& \001(\003\022\013\n\003bp"
      "2\030\' \001(\003\022\013\n\003bp3\030( \001(\003\022\013\n\003bp4\030) \001(\003\022\013\n\003bp5"
      "\030* \001(\003\022\013\n\003ba1\030+ \001(\003\022\013\n\003ba2\030, \001(\003\022\013\n\003ba3\030"
      "- \001(\003\022\013\n\003ba4\030. \001(\003\022\013\n\003ba5\030/ \001(\003\022\013\n\003sp1\0300"
      " \001(\003\022\013\n\003sp2\0301 \001(\003\022\013\n\003sp3\0302 \001(\003\022\013\n\003sp4\0303 "
      "\001(\003\022\013\n\003sp5\0304 \001(\003\022\013\n\003sa1\0305 \001(\003\022\013\n\003sa2\0306 \001"
      "(\003\022\013\n\003sa3\0307 \001(\003\022\013\n\003sa4\0308 \001(\003\022\013\n\003sa5\0309 \001("
      "\003\"\312\002\n\005Index\022\017\n\004type\030\001 \001(\t:\001I\022\023\n\013trading_"
      "day\030\002 \001(\r\022\r\n\005stamp\030\003 \002(\r\022\021\n\tnew_price\030\004 "
      "\001(\003\022\016\n\006amount\030\005 \001(\003\022\021\n\tsum_price\030\006 \001(\003\022\022"
      "\n\nnew_volume\030\007 \001(\003\022\014\n\004code\030\010 \002(\t\022\013\n\003bp1\030"
      "\t \001(\003\022\013\n\003sp1\030\n \001(\003\022\020\n\010preclose\030\013 \001(\003\022\"\n\032"
      "amountofpriceupanddown_new\030\014 \001(\003\022\"\n\032amou"
      "ntofpriceupanddown_bp1\030\r \001(\003\022\"\n\032amountof"
      "priceupanddown_sp1\030\016 \001(\003\022\014\n\004name\030\017 \001(\t\022\016"
      "\n\006market\030\020 \001(\003\"\276\010\n\006VIndex\022\017\n\004type\030\001 \001(\t:"
      "\001V\022\023\n\013trading_day\030\002 \001(\r\022\r\n\005stamp\030\003 \002(\r\022\021"
      "\n\tnew_price\030\004 \002(\001\022\014\n\004code\030\005 \002(\t\022\013\n\003bp1\030\006"
      " \001(\001\022\013\n\003sp1\030\007 \001(\001\022\027\n\017limit_up_amount\030\010 \001"
      "(\001\022\031\n\021limit_down_amount\030\t \001(\001\022\"\n\032non_mus"
      "t_suspension_amount\030\n \001(\001\022\"\n\032must_non_su"
      "spension_amount\030\013 \001(\001\0224\n\017limit_up_stocks"
      "\030\014 \003(\0132\033.quotation.VIndex.StockInfo\0226\n\021l"
      "imit_down_stocks\030\r \003(\0132\033.quotation.VInde"
      "x.StockInfo\022\?\n\032non_must_suspension_stock"
      "s\030\016 \003(\0132\033.quotation.VIndex.StockInfo\022\?\n\032"
      "must_non_suspension_stocks\030\017 \003(\0132\033.quota"
      "tion.VIndex.StockInfo\022\017\n\007etf_bp1\030\020 \001(\001\022\017"
      "\n\007etf_sp1\030\021 \001(\001\022\014\n\004avg1\030\022 \001(\001\022\025\n\rlimit_u"
      "p_rate\030\023 \001(\001\022\027\n\017limit_down_rate\030\024 \001(\001\022 \n"
      "\030non_must_suspension_rate\030\025 \001(\001\022 \n\030must_"
      "non_suspension_rate\030\026 \001(\001\022+\n#must_non_su"
      "spension_amendment_value\030\027 \001(\001\022*\n\"must_n"
      "on_suspension_amendment_rate\030\030 \001(\001\022$\n\034cr"
      "eate_stock_amendment_value\030\031 \001(\001\022#\n\033crea"
      "te_stock_amendment_rate\030\032 \001(\001\022\036\n\026create_"
      "amendment_value\030\033 \001(\001\022\035\n\025create_amendmen"
      "t_rate\030\034 \001(\001\022$\n\034redeem_stock_amendment_v"
      "alue\030\035 \001(\001\022#\n\033redeem_stock_amendment_rat"
      "e\030\036 \001(\001\022\036\n\026redeem_amendment_value\030\037 \001(\001\022"
      "\035\n\025redeem_amendment_rate\030  \001(\001\032G\n\tStockI"
      "nfo\022\014\n\004code\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\016\n\006volum"
      "e\030\003 \001(\003\022\016\n\006amount\030\004 \001(\001\"\363\006\n\016GradedFundIo"
      "pv\022\017\n\004type\030\001 \001(\t:\001C\022\023\n\013trading_day\030\002 \001(\r"
      "\022\r\n\005stamp\030\003 \002(\r\022\020\n\010fof_code\030\004 \002(\t\022\020\n\010fof"
      "_name\030\005 \001(\t\022\023\n\013fof_pre_nav\030\006 \001(\001\022\016\n\006a_co"
      "de\030\007 \002(\t\022\016\n\006a_name\030\010 \001(\t\022\r\n\005a_bp1\030\t \001(\001\022"
      "\r\n\005a_sp1\030\n \001(\001\022\024\n\014a_quote_time\030\013 \001(\r\022\016\n\006"
      "b_code\030\014 \002(\t\022\016\n\006b_name\030\r \001(\t\022\r\n\005b_bp1\030\016 "
      "\001(\001\022\r\n\005b_sp1\030\017 \001(\001\022\024\n\014b_quote_time\030\020 \001(\r"
      "\022\027\n\017underlying_code\030\021 \002(\t\022\031\n\021underlying_"
      "latest\030\022 \001(\001\022\034\n\024underlying_pre_close\030\023 \001"
      "(\001\022\035\n\025underlying_quote_time\030\024 \001(\r\022\024\n\014hs3"
      "00_latest\030\025 \001(\001\022\027\n\017hs300_pre_close\030\026 \001(\001"
      "\022\030\n\020hs300_quote_time\030\027 \001(\r\022\017\n\007ratio_a\030\030 "
      "\001(\003\022\017\n\007ratio_b\030\031 \001(\003\022\025\n\rposition_rate\030\032 "
      "\001(\001\022\031\n\021discount_fee_rate\030\033 \001(\001\022\030\n\020premiu"
      "m_fee_rate\030\034 \001(\001\022\034\n\024underlying_amplitude"
      "\030\035 \001(\001\022\027\n\017hs300_amplitude\030\036 \001(\001\022\024\n\014fof_s"
      "trength\030\037 \001(\001\022\020\n\010fof_iopv\030  \001(\001\022\020\n\010bp1_i"
      "opv\030! \001(\001\022\020\n\010sp1_iopv\030\" \001(\001\022\026\n\016bp1_iopv_"
      "state\030# \001(\003\022\026\n\016sp1_iopv_state\030$ \001(\003\022\024\n\014d"
      "iscount_bp1\030% \001(\001\022\024\n\014discount_sp1\030& \001(\001\022"
      "\023\n\013premium_bp1\030\' \001(\001\022\023\n\013premium_sp1\030( \001("
      "\001\022\r\n\005state\030) \001(\003\022\013\n\003msg\030* \001(\t\"\352\004\n\020Option"
      "Volatility\022\017\n\004type\030\001 \001(\t:\001P\022\023\n\013trading_d"
      "ay\030\002 \001(\r\022\r\n\005stamp\030\003 \002(\r\022\014\n\004code\030\004 \002(\t\022\014\n"
      "\004name\030\005 \001(\t\022\r\n\005price\030\006 \001(\003\022\022\n\nquote_time"
      "\030\007 \001(\r\022\017\n\007cp_flag\030\010 \001(\005\022\023\n\013expire_date\030\t"
      " \001(\r\022\026\n\016exercise_price\030\n \001(\003\022\014\n\004unit\030\013 \001"
      "(\003\022\027\n\017underlying_code\030\014 \001(\t\022\027\n\017underlyin"
      "g_type\030\r \001(\005\022\030\n\020underlying_price\030\016 \001(\003\022\035"
      "\n\025underlying_quote_time\030\017 \001(\r\022\025\n\rinteres"
      "t_rate\030\020 \001(\001\022\022\n\nvolatility\030\021 \001(\001\022\r\n\005stat"
      "e\030\022 \001(\003\022\025\n\rimplied_value\030\023 \001(\001\022\032\n\022implie"
      "d_volatility\030\024 \001(\001\022\r\n\005delta\030\025 \001(\001\022\024\n\014dol"
      "lar_delta\030\026 \001(\001\022\r\n\005theta\030\027 \001(\001\022\024\n\014dollar"
      "_theta\030\030 \001(\001\022\r\n\005gamma\030\031 \001(\001\022\024\n\014dollar_ga"
      "mma\030\032 \001(\001\022\014\n\004vega\030\033 \001(\001\022\023\n\013dollar_vega\030\034"
      " \001(\001\022\013\n\003rho\030\035 \001(\001\022\022\n\ndollar_rho\030\036 \001(\001\022\013\n"
      "\003msg\030\037 \001(\t\"\335\001\n\nIndexParam\022\016\n\004type\030\001 \001(\t:"
      "\000\022\023\n\013trading_day\030\002 \001(\r\022\r\n\005stamp\030\003 \002(\r\022\016\n"
      "\006weight\030\004 \001(\001\022\023\n\013calc_shares\030\005 \001(\003\022\024\n\014to"
      "tal_shares\030\006 \001(\003\022\014\n\004code\030\007 \002(\t\022\026\n\016effect"
      "ive_date\030\010 \001(\t\022\020\n\010c_factor\030\t \001(\001\022\021\n\tpre_"
      "close\030\n \001(\001\022\025\n\radj_pre_close\030\013 \001(\001\"\366\001\n\021S"
      "ecurityOrderInfo\022\016\n\004type\030\001 \001(\t:\000\022\023\n\013trad"
      "ing_day\030\002 \001(\r\022\r\n\005stamp\030\003 \002(\r\022\017\n\007stkcode\030"
      "\004 \002(\t\022\021\n\torder_qty\030\005 \002(\003\022\021\n\tmatch_qty\030\006 "
      "\002(\003\022\023\n\013order_price\030\007 \002(\003\022\027\n\014match_amount"
      "\030\010 \002(\001:\0010\022\027\n\014clear_amount\030\t \002(\001:\0010\022\026\n\013ma"
      "tch_price\030\n \001(\001:\0010\022\027\n\rlast_match_id\030\013 \001("
      "\t:\000\"\332\001\n\017PublicOrderData\022\017\n\004type\030\001 \001(\t:\001D"
      "\022\023\n\013trading_day\030\002 \001(\r\022\r\n\005stamp\030\003 \002(\r\022\014\n\004"
      "code\030\004 \001(\t\022\021\n\torder_day\030\005 \001(\003\022\022\n\norder_t"
      "ime\030\006 \001(\003\022\020\n\010order_no\030\007 \001(\t\022\023\n\013order_pri"
      "ce\030\010 \001(\003\022\021\n\torder_qty\030\t \001(\003\022\022\n\norder_typ"
      "e\030\n \001(\t\022\017\n\007bs_flag\030\013 \001(\003\"\312\001\n\024PublicOrder"
      "QueueData\022\017\n\004type\030\001 \001(\t:\001Q\022\023\n\013trading_da"
      "y\030\002 \001(\r\022\r\n\005stamp\030\003 \002(\r\022\014\n\004code\030\004 \001(\t\022\021\n\t"
      "order_day\030\005 \001(\003\022\022\n\norder_time\030\006 \001(\003\022\017\n\007b"
      "s_flag\030\007 \001(\003\022\023\n\013order_price\030\010 \001(\003\022\021\n\tord"
      "er_qty\030\t \001(\003\022\017\n\007volumes\030\n \003(\003\"\264\002\n\026Public"
      "OrderTransaction\022\017\n\004type\030\001 \001(\t:\001T\022\023\n\013tra"
      "ding_day\030\002 \001(\r\022\r\n\005stamp\030\003 \002(\r\022\014\n\004code\030\004 "
      "\001(\t\022\021\n\tmatch_day\030\005 \001(\003\022\022\n\nmatch_time\030\006 \001"
      "(\003\022\020\n\010match_id\030\007 \001(\t\022\023\n\013match_price\030\010 \001("
      "\003\022\021\n\tmatch_qty\030\t \001(\003\022\021\n\tmatch_amt\030\n \001(\003\022"
      "\017\n\007bs_flag\030\013 \001(\003\022\022\n\nmatch_kind\030\014 \001(\t\022\022\n\n"
      "match_code\030\r \001(\t\022\024\n\014ask_order_no\030\016 \001(\t\022\024"
      "\n\014bid_order_no\030\017 \001(\t\"\237\001\n\014CurrentBasis\022\017\n"
      "\004type\030\001 \001(\t:\001B\022\023\n\013trading_day\030\002 \001(\r\022\r\n\005s"
      "tamp\030\003 \002(\r\022\021\n\tdate_time\030\004 \002(\r\022\014\n\004code\030\005 "
      "\002(\t\022\016\n\006create\030\006 \002(\001\022\013\n\003buy\030\007 \002(\001\022\014\n\004sell"
      "\030\010 \002(\001\022\016\n\006redeem\030\t \002(\001\"\273\001\n\017CircleQuotati"
      "on\022\024\n\004type\030\001 \001(\t:\006CIRCLE\022\023\n\013trading_day\030"
      "\002 \001(\r\022\r\n\005stamp\030\003 \002(\r\022\030\n\006funcid\030\004 \001(\005:\01010"
      "000004\022\014\n\004code\030\005 \002(\t\022\016\n\006circle\030\006 \002(\005\022\014\n\004"
      "open\030\007 \002(\003\022\014\n\004high\030\010 \002(\003\022\013\n\003low\030\t \002(\003\022\r\n"
      "\005close\030\n \002(\003\"\210\001\n\027OptionVolatilitySurface"
      "\022\n\n\002id\030\001 \002(\t\022\t\n\001x\030\002 \003(\001\022\t\n\001y\030\003 \003(\r\0223\n\001v\030"
      "\004 \003(\0132(.quotation.OptionVolatilitySurfac"
      "e.Value\032\026\n\005Value\022\r\n\005value\030\001 \003(\001\"z\n\030Optio"
      "nVolatilitySurfaces\022\027\n\017underlying_code\030\001"
      " \002(\t\0221\n\005items\030\002 \003(\0132\".quotation.OptionVo"
      "latilitySurface\022\022\n\ndefault_id\030\003 \001(\t\"m\n\036S"
      "etOptionVolatilitySurfacesReq\022\030\n\006funcid\030"
      "\001 \001(\005:\01021000001\0221\n\004data\030\002 \002(\0132#.quotatio"
      "n.OptionVolatilitySurfaces\"S\n\036SetOptionV"
      "olatilitySurfacesRep\022\030\n\006funcid\030\001 \001(\005:\01021"
      "100001\022\n\n\002rc\030\002 \001(\003\022\013\n\003msg\030\003 \001(\t\":\n\rSecur"
      "ityState\022\014\n\004code\030\001 \002(\t\022\014\n\004name\030\002 \001(\t\022\r\n\005"
      "state\030\003 \001(\r\"<\n\021SecurityStateList\022\'\n\005item"
      "s\030\001 \003(\0132\030.quotation.SecurityState\"H\n\nTra"
      "dingDay\022\021\n\tdata_date\030\001 \002(\r\022\017\n\007weekday\030\002 "
      "\001(\005\022\026\n\016is_trading_day\030\003 \001(\005\"\266\001\n\023EtfConst"
      "ituentStock\022\020\n\010stock_id\030\001 \002(\t\022\022\n\nstock_n"
      "ame\030\002 \001(\t\022\016\n\006market\030\003 \001(\005\022\016\n\006volume\030\004 \001("
      "\003\022\031\n\021cash_replace_flag\030\005 \001(\005\022!\n\031cash_rep"
      "lace_premium_rate\030\006 \001(\001\022\033\n\023cash_replace_"
      "amount\030\007 \001(\001\"\234\004\n\013EtfListInfo\022\021\n\tdata_dat"
      "e\030\001 \002(\r\022\021\n\tdata_time\030\002 \002(\r\022\027\n\017pre_tradin"
      "g_day\030\003 \001(\r\022\020\n\010stock_id\030\004 \001(\t\022\024\n\014primary"
      "_code\030\005 \001(\t\022\027\n\017underlying_code\030\006 \001(\t\022\016\n\006"
      "market\030\007 \001(\005\022\022\n\nstock_name\030\010 \001(\t\022\024\n\014comp"
      "any_name\030\t \001(\t\022\025\n\rpre_cash_diff\030\n \001(\001\022\025\n"
      "\rpre_unit_iopv\030\013 \001(\001\022\020\n\010pre_iopv\030\014 \001(\001\022\025"
      "\n\restimate_cash\030\r \001(\001\022\035\n\025max_cash_replac"
      "e_rate\030\016 \001(\001\022\033\n\023max_purchase_volume\030\017 \001("
      "\003\022\031\n\021max_redeem_volume\030\020 \001(\003\022\027\n\017is_publi"
      "sh_iopv\030\021 \001(\005\022\023\n\013unit_volume\030\022 \001(\003\022\025\n\rco"
      "mpose_count\030\023 \001(\003\022\030\n\020is_open_purchase\030\024 "
      "\001(\005\022\026\n\016is_open_redeem\030\025 \001(\005\022.\n\006stocks\030\026 "
      "\003(\0132\036.quotation.EtfConstituentStock\"\206\001\n\007"
      "EtfFees\022\021\n\ttimestamp\030\001 \002(\004\022(\n\005items\030\002 \003("
      "\0132\031.quotation.EtfFees.EtfFee\032>\n\006EtfFee\022\014"
      "\n\004code\030\001 \002(\t\022\022\n\ncreate_fee\030\002 \001(\001\022\022\n\nrede"
      "em_fee\030\003 \001(\001\"\311\001\n\017StockAmendments\022\021\n\ttime"
      "stamp\030\001 \002(\004\0228\n\005items\030\002 \003(\0132).quotation.S"
      "tockAmendments.StockAmendment\032i\n\016StockAm"
      "endment\022\014\n\004code\030\001 \002(\t\022\014\n\004name\030\002 \002(\t\022\r\n\005s"
      "tate\030\003 \001(\003\022\025\n\rcreate_change\030\004 \001(\001\022\025\n\rred"
      "eem_change\030\005 \001(\001\"\207\006\n\016GradedFundInfo\022\021\n\td"
      "ata_date\030\001 \002(\r\022\020\n\010fof_code\030\002 \001(\t\022\020\n\010fof_"
      "name\030\003 \001(\t\022\021\n\tfof_quota\030\004 \001(\001\022\023\n\013fof_pre"
      "_nav\030\005 \001(\001\022\017\n\007fof_nav\030\006 \001(\001\022\030\n\020fof_marke"
      "t_value\030\007 \001(\001\022\016\n\006a_code\030\010 \001(\t\022\016\n\006a_name\030"
      "\t \001(\t\022\017\n\007a_quota\030\n \001(\001\022\021\n\ta_pre_nav\030\013 \001("
      "\001\022\r\n\005a_nav\030\014 \001(\001\022\026\n\016a_market_value\030\r \001(\001"
      "\022\023\n\013a_pre_close\030\016 \001(\001\022\037\n\027a_discount_prem"
      "ium_rate\030\017 \001(\001\022\031\n\021a_appointed_yield\030\020 \001("
      "\t\022\016\n\006b_code\030\021 \001(\t\022\016\n\006b_name\030\022 \001(\t\022\017\n\007b_q"
      "uota\030\023 \001(\001\022\021\n\tb_pre_nav\030\024 \001(\001\022\r\n\005b_nav\030\025"
      " \001(\001\022\026\n\016b_market_value\030\026 \001(\001\022\023\n\013b_pre_cl"
      "ose\030\027 \001(\001\022\037\n\027b_discount_premium_rate\030\030 \001"
      "(\001\022\017\n\007ratio_a\030\031 \001(\003\022\017\n\007ratio_b\030\032 \001(\003\022\032\n\022"
      "total_market_value\030\033 \001(\001\022\027\n\017underlying_c"
      "ode\030\034 \001(\t\022\027\n\017underlying_name\030\035 \001(\t\022\031\n\021un"
      "derlying_factor\030\036 \001(\001\022\024\n\014manager_name\030\037 "
      "\001(\t\022\024\n\014listing_date\030  \001(\r\022\030\n\020translation"
      "_date\030! \001(\r\022\021\n\tup_clause\030\" \001(\t\022\023\n\013down_c"
      "lause\030# \001(\t\022\025\n\rposition_rate\030$ \001(\001\"\365\003\n\nO"
      "ptionInfo\022\021\n\tdata_date\030\001 \002(\r\022\014\n\004code\030\002 \002"
      "(\t\022\014\n\004name\030\003 \001(\t\022\014\n\004type\030\004 \001(\t\022\016\n\006market"
      "\030\005 \001(\003\022\022\n\ntrade_code\030\006 \001(\t\022\027\n\017underlying"
      "_code\030\007 \001(\t\022\027\n\017underlying_name\030\010 \001(\t\022\027\n\017"
      "underlying_type\030\t \001(\003\022\034\n\024underlying_pre_"
      "close\030\n \001(\001\022\017\n\007cp_flag\030\013 \001(\003\022\014\n\004unit\030\014 \001"
      "(\003\022\025\n\rexercise_date\030\r \001(\r\022\026\n\016exercise_pr"
      "ice\030\016 \001(\001\022\023\n\013settle_date\030\017 \001(\r\022\023\n\013expire"
      "_date\030\020 \001(\r\022\022\n\nis_expired\030\021 \001(\003\022\016\n\006is_ne"
      "w\030\022 \001(\003\022\023\n\013is_adjusted\030\023 \001(\003\022\017\n\007is_open\030"
      "\024 \001(\003\022\022\n\nhigh_limit\030\025 \001(\001\022\021\n\tlow_limit\030\026"
      " \001(\001\022\022\n\npre_settle\030\027 \001(\001\022\017\n\007deposit\030\030 \001("
      "\001\022\017\n\007algebra\030\031 \001(\003B\rB\tquotationH\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 10873);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protos/quotation.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_protos_2fquotation_2eproto
namespace quotation {

// ===================================================================

void Stock::InitAsDefaultInstance() {
}
::google::protobuf::internal::ExplicitlyConstructed<::std::string> Stock::_i_give_permission_to_break_this_code_default_type_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Stock::kTypeFieldNumber;
const int Stock::kTradingDayFieldNumber;
const int Stock::kStampFieldNumber;
const int Stock::kNewPriceFieldNumber;
const int Stock::kNewVolumeFieldNumber;
const int Stock::kSumVolumeFieldNumber;
const int Stock::kSumAmountFieldNumber;
const int Stock::kCodeFieldNumber;
const int Stock::kNameFieldNumber;
const int Stock::kBp1FieldNumber;
const int Stock::kBp2FieldNumber;
const int Stock::kBp3FieldNumber;
const int Stock::kBp4FieldNumber;
const int Stock::kBp5FieldNumber;
const int Stock::kBa1FieldNumber;
const int Stock::kBa2FieldNumber;
const int Stock::kBa3FieldNumber;
const int Stock::kBa4FieldNumber;
const int Stock::kBa5FieldNumber;
const int Stock::kSp1FieldNumber;
const int Stock::kSp2FieldNumber;
const int Stock::kSp3FieldNumber;
const int Stock::kSp4FieldNumber;
const int Stock::kSp5FieldNumber;
const int Stock::kSa1FieldNumber;
const int Stock::kSa2FieldNumber;
const int Stock::kSa3FieldNumber;
const int Stock::kSa4FieldNumber;
const int Stock::kSa5FieldNumber;
const int Stock::kStatusFieldNumber;
const int Stock::kPrecloseFieldNumber;
const int Stock::kOpenFieldNumber;
const int Stock::kHighFieldNumber;
const int Stock::kLowFieldNumber;
const int Stock::kIopvFieldNumber;
const int Stock::kBp1AjustFieldNumber;
const int Stock::kSp1AjustFieldNumber;
const int Stock::kBoughtVolumeFieldNumber;
const int Stock::kSoldVolumeFieldNumber;
const int Stock::kBp6FieldNumber;
const int Stock::kBp7FieldNumber;
const int Stock::kBp8FieldNumber;
const int Stock::kBp9FieldNumber;
const int Stock::kBp10FieldNumber;
const int Stock::kBa6FieldNumber;
const int Stock::kBa7FieldNumber;
const int Stock::kBa8FieldNumber;
const int Stock::kBa9FieldNumber;
const int Stock::kBa10FieldNumber;
const int Stock::kSp6FieldNumber;
const int Stock::kSp7FieldNumber;
const int Stock::kSp8FieldNumber;
const int Stock::kSp9FieldNumber;
const int Stock::kSp10FieldNumber;
const int Stock::kSa6FieldNumber;
const int Stock::kSa7FieldNumber;
const int Stock::kSa8FieldNumber;
const int Stock::kSa9FieldNumber;
const int Stock::kSa10FieldNumber;
const int Stock::kUpperlimitPriceFieldNumber;
const int Stock::kLowerlimitPriceFieldNumber;
const int Stock::kMarketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Stock::Stock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fquotation_2eproto::scc_info_Stock.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quotation.Stock)
}
Stock::Stock(const Stock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::quotation::Stock::_i_give_permission_to_break_this_code_default_type_.get());
  if (from.has_type()) {
    type_.AssignWithDefault(&::quotation::Stock::_i_give_permission_to_break_this_code_default_type_.get(), from.type_);
  }
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&trading_day_, &from.trading_day_,
    static_cast<size_t>(reinterpret_cast<char*>(&market_) -
    reinterpret_cast<char*>(&trading_day_)) + sizeof(market_));
  // @@protoc_insertion_point(copy_constructor:quotation.Stock)
}

void Stock::SharedCtor() {
  type_.UnsafeSetDefault(&::quotation::Stock::_i_give_permission_to_break_this_code_default_type_.get());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&trading_day_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&market_) -
      reinterpret_cast<char*>(&trading_day_)) + sizeof(market_));
}

Stock::~Stock() {
  // @@protoc_insertion_point(destructor:quotation.Stock)
  SharedDtor();
}

void Stock::SharedDtor() {
  type_.DestroyNoArena(&::quotation::Stock::_i_give_permission_to_break_this_code_default_type_.get());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Stock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Stock::descriptor() {
  ::protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Stock& Stock::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fquotation_2eproto::scc_info_Stock.base);
  return *internal_default_instance();
}


void Stock::Clear() {
// @@protoc_insertion_point(message_clear_start:quotation.Stock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      type_.UnsafeMutablePointer()->assign(*&::quotation::Stock::_i_give_permission_to_break_this_code_default_type_.get());
    }
    if (cached_has_bits & 0x00000002u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&trading_day_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sum_volume_) -
        reinterpret_cast<char*>(&trading_day_)) + sizeof(sum_volume_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&sum_amount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ba2_) -
        reinterpret_cast<char*>(&sum_amount_)) + sizeof(ba2_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&ba3_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sp5_) -
        reinterpret_cast<char*>(&ba3_)) + sizeof(sp5_));
  }
  if (cached_has_bits & 4278190080u) {
    ::memset(&sa1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&open_) -
        reinterpret_cast<char*>(&sa1_)) + sizeof(open_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 255u) {
    ::memset(&high_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bp6_) -
        reinterpret_cast<char*>(&high_)) + sizeof(bp6_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&bp7_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ba9_) -
        reinterpret_cast<char*>(&bp7_)) + sizeof(ba9_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&ba10_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sa7_) -
        reinterpret_cast<char*>(&ba10_)) + sizeof(sa7_));
  }
  if (cached_has_bits & 1056964608u) {
    ::memset(&sa8_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&market_) -
        reinterpret_cast<char*>(&sa8_)) + sizeof(market_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Stock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quotation.Stock)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1 [default = "S"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.Stock.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trading_day = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_trading_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trading_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 stamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_stamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 new_price = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_new_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &new_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 new_volume = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_new_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &new_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sum_volume = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_sum_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sum_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sum_amount = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_sum_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sum_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string code = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.Stock.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.Stock.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bp1 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_bp1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bp1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bp2 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_bp2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bp2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bp3 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_bp3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bp3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bp4 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_bp4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bp4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bp5 = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_bp5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bp5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ba1 = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_ba1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ba1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ba2 = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_ba2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ba2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ba3 = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_ba3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ba3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ba4 = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_ba4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ba4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ba5 = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_ba5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ba5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sp1 = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_sp1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sp1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sp2 = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_sp2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sp2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sp3 = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_sp3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sp3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sp4 = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_sp4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sp4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sp5 = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_sp5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sp5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sa1 = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_sa1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sa1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sa2 = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_sa2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sa2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sa3 = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          set_has_sa3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sa3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sa4 = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          set_has_sa4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sa4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sa5 = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          set_has_sa5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sa5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 status = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 preclose = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_preclose();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &preclose_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 open = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {
          set_has_open();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 high = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 264 & 0xFF */)) {
          set_has_high();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &high_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 low = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 272 & 0xFF */)) {
          set_has_low();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &low_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 iopv = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {
          set_has_iopv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iopv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bp1_ajust = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 288 & 0xFF */)) {
          set_has_bp1_ajust();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bp1_ajust_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sp1_ajust = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 296 & 0xFF */)) {
          set_has_sp1_ajust();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sp1_ajust_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bought_volume = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 304 & 0xFF */)) {
          set_has_bought_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bought_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sold_volume = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 312 & 0xFF */)) {
          set_has_sold_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sold_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bp6 = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {
          set_has_bp6();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bp6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bp7 = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 328 & 0xFF */)) {
          set_has_bp7();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bp7_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bp8 = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 336 & 0xFF */)) {
          set_has_bp8();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bp8_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bp9 = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 344 & 0xFF */)) {
          set_has_bp9();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bp9_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bp10 = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 352 & 0xFF */)) {
          set_has_bp10();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bp10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ba6 = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 360 & 0xFF */)) {
          set_has_ba6();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ba6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ba7 = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 368 & 0xFF */)) {
          set_has_ba7();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ba7_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ba8 = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 376 & 0xFF */)) {
          set_has_ba8();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ba8_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ba9 = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 384 & 0xFF */)) {
          set_has_ba9();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ba9_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ba10 = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 392 & 0xFF */)) {
          set_has_ba10();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ba10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sp6 = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 400 & 0xFF */)) {
          set_has_sp6();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sp6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sp7 = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 408 & 0xFF */)) {
          set_has_sp7();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sp7_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sp8 = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 416 & 0xFF */)) {
          set_has_sp8();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sp8_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sp9 = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 424 & 0xFF */)) {
          set_has_sp9();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sp9_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sp10 = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 432 & 0xFF */)) {
          set_has_sp10();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sp10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sa6 = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 440 & 0xFF */)) {
          set_has_sa6();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sa6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sa7 = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 448 & 0xFF */)) {
          set_has_sa7();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sa7_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sa8 = 57;
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 456 & 0xFF */)) {
          set_has_sa8();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sa8_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sa9 = 58;
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 464 & 0xFF */)) {
          set_has_sa9();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sa9_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sa10 = 59;
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 472 & 0xFF */)) {
          set_has_sa10();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sa10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 upperlimit_price = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 480 & 0xFF */)) {
          set_has_upperlimit_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &upperlimit_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 lowerlimit_price = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 488 & 0xFF */)) {
          set_has_lowerlimit_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lowerlimit_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 market = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 496 & 0xFF */)) {
          set_has_market();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &market_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quotation.Stock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quotation.Stock)
  return false;
#undef DO_
}

void Stock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quotation.Stock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1 [default = "S"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.Stock.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional uint32 trading_day = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->trading_day(), output);
  }

  // required uint32 stamp = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stamp(), output);
  }

  // required int64 new_price = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->new_price(), output);
  }

  // optional int64 new_volume = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->new_volume(), output);
  }

  // optional int64 sum_volume = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->sum_volume(), output);
  }

  // optional int64 sum_amount = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->sum_amount(), output);
  }

  // required string code = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.Stock.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->code(), output);
  }

  // optional string name = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.Stock.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->name(), output);
  }

  // optional int64 bp1 = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->bp1(), output);
  }

  // optional int64 bp2 = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->bp2(), output);
  }

  // optional int64 bp3 = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->bp3(), output);
  }

  // optional int64 bp4 = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->bp4(), output);
  }

  // optional int64 bp5 = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->bp5(), output);
  }

  // optional int64 ba1 = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->ba1(), output);
  }

  // optional int64 ba2 = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->ba2(), output);
  }

  // optional int64 ba3 = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->ba3(), output);
  }

  // optional int64 ba4 = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->ba4(), output);
  }

  // optional int64 ba5 = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->ba5(), output);
  }

  // optional int64 sp1 = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->sp1(), output);
  }

  // optional int64 sp2 = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->sp2(), output);
  }

  // optional int64 sp3 = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->sp3(), output);
  }

  // optional int64 sp4 = 23;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->sp4(), output);
  }

  // optional int64 sp5 = 24;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->sp5(), output);
  }

  // optional int64 sa1 = 25;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(25, this->sa1(), output);
  }

  // optional int64 sa2 = 26;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(26, this->sa2(), output);
  }

  // optional int64 sa3 = 27;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(27, this->sa3(), output);
  }

  // optional int64 sa4 = 28;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(28, this->sa4(), output);
  }

  // optional int64 sa5 = 29;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(29, this->sa5(), output);
  }

  // optional int64 status = 30;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(30, this->status(), output);
  }

  // optional int64 preclose = 31;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(31, this->preclose(), output);
  }

  // optional int64 open = 32;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(32, this->open(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int64 high = 33;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(33, this->high(), output);
  }

  // optional int64 low = 34;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(34, this->low(), output);
  }

  // optional int64 iopv = 35;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(35, this->iopv(), output);
  }

  // optional int64 bp1_ajust = 36;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(36, this->bp1_ajust(), output);
  }

  // optional int64 sp1_ajust = 37;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(37, this->sp1_ajust(), output);
  }

  // optional int64 bought_volume = 38;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(38, this->bought_volume(), output);
  }

  // optional int64 sold_volume = 39;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(39, this->sold_volume(), output);
  }

  // optional int64 bp6 = 40;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(40, this->bp6(), output);
  }

  // optional int64 bp7 = 41;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(41, this->bp7(), output);
  }

  // optional int64 bp8 = 42;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(42, this->bp8(), output);
  }

  // optional int64 bp9 = 43;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(43, this->bp9(), output);
  }

  // optional int64 bp10 = 44;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(44, this->bp10(), output);
  }

  // optional int64 ba6 = 45;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(45, this->ba6(), output);
  }

  // optional int64 ba7 = 46;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(46, this->ba7(), output);
  }

  // optional int64 ba8 = 47;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(47, this->ba8(), output);
  }

  // optional int64 ba9 = 48;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(48, this->ba9(), output);
  }

  // optional int64 ba10 = 49;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(49, this->ba10(), output);
  }

  // optional int64 sp6 = 50;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(50, this->sp6(), output);
  }

  // optional int64 sp7 = 51;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(51, this->sp7(), output);
  }

  // optional int64 sp8 = 52;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(52, this->sp8(), output);
  }

  // optional int64 sp9 = 53;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(53, this->sp9(), output);
  }

  // optional int64 sp10 = 54;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(54, this->sp10(), output);
  }

  // optional int64 sa6 = 55;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(55, this->sa6(), output);
  }

  // optional int64 sa7 = 56;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(56, this->sa7(), output);
  }

  // optional int64 sa8 = 57;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(57, this->sa8(), output);
  }

  // optional int64 sa9 = 58;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(58, this->sa9(), output);
  }

  // optional int64 sa10 = 59;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(59, this->sa10(), output);
  }

  // optional int64 upperlimit_price = 60;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(60, this->upperlimit_price(), output);
  }

  // optional int64 lowerlimit_price = 61;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(61, this->lowerlimit_price(), output);
  }

  // optional int64 market = 62;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(62, this->market(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:quotation.Stock)
}

::google::protobuf::uint8* Stock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quotation.Stock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1 [default = "S"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.Stock.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional uint32 trading_day = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->trading_day(), target);
  }

  // required uint32 stamp = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stamp(), target);
  }

  // required int64 new_price = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->new_price(), target);
  }

  // optional int64 new_volume = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->new_volume(), target);
  }

  // optional int64 sum_volume = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->sum_volume(), target);
  }

  // optional int64 sum_amount = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->sum_amount(), target);
  }

  // required string code = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.Stock.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->code(), target);
  }

  // optional string name = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.Stock.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->name(), target);
  }

  // optional int64 bp1 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->bp1(), target);
  }

  // optional int64 bp2 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->bp2(), target);
  }

  // optional int64 bp3 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->bp3(), target);
  }

  // optional int64 bp4 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->bp4(), target);
  }

  // optional int64 bp5 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->bp5(), target);
  }

  // optional int64 ba1 = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->ba1(), target);
  }

  // optional int64 ba2 = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->ba2(), target);
  }

  // optional int64 ba3 = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->ba3(), target);
  }

  // optional int64 ba4 = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->ba4(), target);
  }

  // optional int64 ba5 = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->ba5(), target);
  }

  // optional int64 sp1 = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->sp1(), target);
  }

  // optional int64 sp2 = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->sp2(), target);
  }

  // optional int64 sp3 = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->sp3(), target);
  }

  // optional int64 sp4 = 23;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->sp4(), target);
  }

  // optional int64 sp5 = 24;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->sp5(), target);
  }

  // optional int64 sa1 = 25;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(25, this->sa1(), target);
  }

  // optional int64 sa2 = 26;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(26, this->sa2(), target);
  }

  // optional int64 sa3 = 27;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(27, this->sa3(), target);
  }

  // optional int64 sa4 = 28;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(28, this->sa4(), target);
  }

  // optional int64 sa5 = 29;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(29, this->sa5(), target);
  }

  // optional int64 status = 30;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(30, this->status(), target);
  }

  // optional int64 preclose = 31;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(31, this->preclose(), target);
  }

  // optional int64 open = 32;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(32, this->open(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int64 high = 33;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(33, this->high(), target);
  }

  // optional int64 low = 34;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(34, this->low(), target);
  }

  // optional int64 iopv = 35;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(35, this->iopv(), target);
  }

  // optional int64 bp1_ajust = 36;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(36, this->bp1_ajust(), target);
  }

  // optional int64 sp1_ajust = 37;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(37, this->sp1_ajust(), target);
  }

  // optional int64 bought_volume = 38;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(38, this->bought_volume(), target);
  }

  // optional int64 sold_volume = 39;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(39, this->sold_volume(), target);
  }

  // optional int64 bp6 = 40;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(40, this->bp6(), target);
  }

  // optional int64 bp7 = 41;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(41, this->bp7(), target);
  }

  // optional int64 bp8 = 42;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(42, this->bp8(), target);
  }

  // optional int64 bp9 = 43;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(43, this->bp9(), target);
  }

  // optional int64 bp10 = 44;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(44, this->bp10(), target);
  }

  // optional int64 ba6 = 45;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(45, this->ba6(), target);
  }

  // optional int64 ba7 = 46;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(46, this->ba7(), target);
  }

  // optional int64 ba8 = 47;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(47, this->ba8(), target);
  }

  // optional int64 ba9 = 48;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(48, this->ba9(), target);
  }

  // optional int64 ba10 = 49;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(49, this->ba10(), target);
  }

  // optional int64 sp6 = 50;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(50, this->sp6(), target);
  }

  // optional int64 sp7 = 51;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(51, this->sp7(), target);
  }

  // optional int64 sp8 = 52;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(52, this->sp8(), target);
  }

  // optional int64 sp9 = 53;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(53, this->sp9(), target);
  }

  // optional int64 sp10 = 54;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(54, this->sp10(), target);
  }

  // optional int64 sa6 = 55;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(55, this->sa6(), target);
  }

  // optional int64 sa7 = 56;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(56, this->sa7(), target);
  }

  // optional int64 sa8 = 57;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(57, this->sa8(), target);
  }

  // optional int64 sa9 = 58;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(58, this->sa9(), target);
  }

  // optional int64 sa10 = 59;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(59, this->sa10(), target);
  }

  // optional int64 upperlimit_price = 60;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(60, this->upperlimit_price(), target);
  }

  // optional int64 lowerlimit_price = 61;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(61, this->lowerlimit_price(), target);
  }

  // optional int64 market = 62;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(62, this->market(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quotation.Stock)
  return target;
}

size_t Stock::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:quotation.Stock)
  size_t total_size = 0;

  if (has_code()) {
    // required string code = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_stamp()) {
    // required uint32 stamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stamp());
  }

  if (has_new_price()) {
    // required int64 new_price = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->new_price());
  }

  return total_size;
}
size_t Stock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quotation.Stock)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000032) ^ 0x00000032) == 0) {  // All required fields are present.
    // required string code = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required uint32 stamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stamp());

    // required int64 new_price = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->new_price());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string type = 1 [default = "S"];
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional string name = 9;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 trading_day = 2;
    if (has_trading_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trading_day());
    }

  }
  if (_has_bits_[0 / 32] & 192u) {
    // optional int64 new_volume = 5;
    if (has_new_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->new_volume());
    }

    // optional int64 sum_volume = 6;
    if (has_sum_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sum_volume());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int64 sum_amount = 7;
    if (has_sum_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sum_amount());
    }

    // optional int64 bp1 = 10;
    if (has_bp1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bp1());
    }

    // optional int64 bp2 = 11;
    if (has_bp2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bp2());
    }

    // optional int64 bp3 = 12;
    if (has_bp3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bp3());
    }

    // optional int64 bp4 = 13;
    if (has_bp4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bp4());
    }

    // optional int64 bp5 = 14;
    if (has_bp5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bp5());
    }

    // optional int64 ba1 = 15;
    if (has_ba1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ba1());
    }

    // optional int64 ba2 = 16;
    if (has_ba2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ba2());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional int64 ba3 = 17;
    if (has_ba3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ba3());
    }

    // optional int64 ba4 = 18;
    if (has_ba4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ba4());
    }

    // optional int64 ba5 = 19;
    if (has_ba5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ba5());
    }

    // optional int64 sp1 = 20;
    if (has_sp1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sp1());
    }

    // optional int64 sp2 = 21;
    if (has_sp2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sp2());
    }

    // optional int64 sp3 = 22;
    if (has_sp3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sp3());
    }

    // optional int64 sp4 = 23;
    if (has_sp4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sp4());
    }

    // optional int64 sp5 = 24;
    if (has_sp5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sp5());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional int64 sa1 = 25;
    if (has_sa1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sa1());
    }

    // optional int64 sa2 = 26;
    if (has_sa2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sa2());
    }

    // optional int64 sa3 = 27;
    if (has_sa3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sa3());
    }

    // optional int64 sa4 = 28;
    if (has_sa4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sa4());
    }

    // optional int64 sa5 = 29;
    if (has_sa5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sa5());
    }

    // optional int64 status = 30;
    if (has_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->status());
    }

    // optional int64 preclose = 31;
    if (has_preclose()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->preclose());
    }

    // optional int64 open = 32;
    if (has_open()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->open());
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional int64 high = 33;
    if (has_high()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->high());
    }

    // optional int64 low = 34;
    if (has_low()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->low());
    }

    // optional int64 iopv = 35;
    if (has_iopv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iopv());
    }

    // optional int64 bp1_ajust = 36;
    if (has_bp1_ajust()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bp1_ajust());
    }

    // optional int64 sp1_ajust = 37;
    if (has_sp1_ajust()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sp1_ajust());
    }

    // optional int64 bought_volume = 38;
    if (has_bought_volume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bought_volume());
    }

    // optional int64 sold_volume = 39;
    if (has_sold_volume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sold_volume());
    }

    // optional int64 bp6 = 40;
    if (has_bp6()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bp6());
    }

  }
  if (_has_bits_[40 / 32] & 65280u) {
    // optional int64 bp7 = 41;
    if (has_bp7()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bp7());
    }

    // optional int64 bp8 = 42;
    if (has_bp8()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bp8());
    }

    // optional int64 bp9 = 43;
    if (has_bp9()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bp9());
    }

    // optional int64 bp10 = 44;
    if (has_bp10()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bp10());
    }

    // optional int64 ba6 = 45;
    if (has_ba6()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ba6());
    }

    // optional int64 ba7 = 46;
    if (has_ba7()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ba7());
    }

    // optional int64 ba8 = 47;
    if (has_ba8()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ba8());
    }

    // optional int64 ba9 = 48;
    if (has_ba9()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ba9());
    }

  }
  if (_has_bits_[48 / 32] & 16711680u) {
    // optional int64 ba10 = 49;
    if (has_ba10()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ba10());
    }

    // optional int64 sp6 = 50;
    if (has_sp6()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sp6());
    }

    // optional int64 sp7 = 51;
    if (has_sp7()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sp7());
    }

    // optional int64 sp8 = 52;
    if (has_sp8()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sp8());
    }

    // optional int64 sp9 = 53;
    if (has_sp9()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sp9());
    }

    // optional int64 sp10 = 54;
    if (has_sp10()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sp10());
    }

    // optional int64 sa6 = 55;
    if (has_sa6()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sa6());
    }

    // optional int64 sa7 = 56;
    if (has_sa7()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sa7());
    }

  }
  if (_has_bits_[56 / 32] & 1056964608u) {
    // optional int64 sa8 = 57;
    if (has_sa8()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sa8());
    }

    // optional int64 sa9 = 58;
    if (has_sa9()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sa9());
    }

    // optional int64 sa10 = 59;
    if (has_sa10()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sa10());
    }

    // optional int64 upperlimit_price = 60;
    if (has_upperlimit_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->upperlimit_price());
    }

    // optional int64 lowerlimit_price = 61;
    if (has_lowerlimit_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lowerlimit_price());
    }

    // optional int64 market = 62;
    if (has_market()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->market());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Stock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quotation.Stock)
  GOOGLE_DCHECK_NE(&from, this);
  const Stock* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Stock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quotation.Stock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quotation.Stock)
    MergeFrom(*source);
  }
}

void Stock::MergeFrom(const Stock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quotation.Stock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_type();
      type_.AssignWithDefault(&::quotation::Stock::_i_give_permission_to_break_this_code_default_type_.get(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000008u) {
      trading_day_ = from.trading_day_;
    }
    if (cached_has_bits & 0x00000010u) {
      stamp_ = from.stamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      new_price_ = from.new_price_;
    }
    if (cached_has_bits & 0x00000040u) {
      new_volume_ = from.new_volume_;
    }
    if (cached_has_bits & 0x00000080u) {
      sum_volume_ = from.sum_volume_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      sum_amount_ = from.sum_amount_;
    }
    if (cached_has_bits & 0x00000200u) {
      bp1_ = from.bp1_;
    }
    if (cached_has_bits & 0x00000400u) {
      bp2_ = from.bp2_;
    }
    if (cached_has_bits & 0x00000800u) {
      bp3_ = from.bp3_;
    }
    if (cached_has_bits & 0x00001000u) {
      bp4_ = from.bp4_;
    }
    if (cached_has_bits & 0x00002000u) {
      bp5_ = from.bp5_;
    }
    if (cached_has_bits & 0x00004000u) {
      ba1_ = from.ba1_;
    }
    if (cached_has_bits & 0x00008000u) {
      ba2_ = from.ba2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      ba3_ = from.ba3_;
    }
    if (cached_has_bits & 0x00020000u) {
      ba4_ = from.ba4_;
    }
    if (cached_has_bits & 0x00040000u) {
      ba5_ = from.ba5_;
    }
    if (cached_has_bits & 0x00080000u) {
      sp1_ = from.sp1_;
    }
    if (cached_has_bits & 0x00100000u) {
      sp2_ = from.sp2_;
    }
    if (cached_has_bits & 0x00200000u) {
      sp3_ = from.sp3_;
    }
    if (cached_has_bits & 0x00400000u) {
      sp4_ = from.sp4_;
    }
    if (cached_has_bits & 0x00800000u) {
      sp5_ = from.sp5_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      sa1_ = from.sa1_;
    }
    if (cached_has_bits & 0x02000000u) {
      sa2_ = from.sa2_;
    }
    if (cached_has_bits & 0x04000000u) {
      sa3_ = from.sa3_;
    }
    if (cached_has_bits & 0x08000000u) {
      sa4_ = from.sa4_;
    }
    if (cached_has_bits & 0x10000000u) {
      sa5_ = from.sa5_;
    }
    if (cached_has_bits & 0x20000000u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x40000000u) {
      preclose_ = from.preclose_;
    }
    if (cached_has_bits & 0x80000000u) {
      open_ = from.open_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      high_ = from.high_;
    }
    if (cached_has_bits & 0x00000002u) {
      low_ = from.low_;
    }
    if (cached_has_bits & 0x00000004u) {
      iopv_ = from.iopv_;
    }
    if (cached_has_bits & 0x00000008u) {
      bp1_ajust_ = from.bp1_ajust_;
    }
    if (cached_has_bits & 0x00000010u) {
      sp1_ajust_ = from.sp1_ajust_;
    }
    if (cached_has_bits & 0x00000020u) {
      bought_volume_ = from.bought_volume_;
    }
    if (cached_has_bits & 0x00000040u) {
      sold_volume_ = from.sold_volume_;
    }
    if (cached_has_bits & 0x00000080u) {
      bp6_ = from.bp6_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      bp7_ = from.bp7_;
    }
    if (cached_has_bits & 0x00000200u) {
      bp8_ = from.bp8_;
    }
    if (cached_has_bits & 0x00000400u) {
      bp9_ = from.bp9_;
    }
    if (cached_has_bits & 0x00000800u) {
      bp10_ = from.bp10_;
    }
    if (cached_has_bits & 0x00001000u) {
      ba6_ = from.ba6_;
    }
    if (cached_has_bits & 0x00002000u) {
      ba7_ = from.ba7_;
    }
    if (cached_has_bits & 0x00004000u) {
      ba8_ = from.ba8_;
    }
    if (cached_has_bits & 0x00008000u) {
      ba9_ = from.ba9_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      ba10_ = from.ba10_;
    }
    if (cached_has_bits & 0x00020000u) {
      sp6_ = from.sp6_;
    }
    if (cached_has_bits & 0x00040000u) {
      sp7_ = from.sp7_;
    }
    if (cached_has_bits & 0x00080000u) {
      sp8_ = from.sp8_;
    }
    if (cached_has_bits & 0x00100000u) {
      sp9_ = from.sp9_;
    }
    if (cached_has_bits & 0x00200000u) {
      sp10_ = from.sp10_;
    }
    if (cached_has_bits & 0x00400000u) {
      sa6_ = from.sa6_;
    }
    if (cached_has_bits & 0x00800000u) {
      sa7_ = from.sa7_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 1056964608u) {
    if (cached_has_bits & 0x01000000u) {
      sa8_ = from.sa8_;
    }
    if (cached_has_bits & 0x02000000u) {
      sa9_ = from.sa9_;
    }
    if (cached_has_bits & 0x04000000u) {
      sa10_ = from.sa10_;
    }
    if (cached_has_bits & 0x08000000u) {
      upperlimit_price_ = from.upperlimit_price_;
    }
    if (cached_has_bits & 0x10000000u) {
      lowerlimit_price_ = from.lowerlimit_price_;
    }
    if (cached_has_bits & 0x20000000u) {
      market_ = from.market_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void Stock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quotation.Stock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stock::CopyFrom(const Stock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quotation.Stock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stock::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000032) != 0x00000032) return false;
  return true;
}

void Stock::Swap(Stock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Stock::InternalSwap(Stock* other) {
  using std::swap;
  type_.Swap(&other->type_, &::quotation::Stock::_i_give_permission_to_break_this_code_default_type_.get(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trading_day_, other->trading_day_);
  swap(stamp_, other->stamp_);
  swap(new_price_, other->new_price_);
  swap(new_volume_, other->new_volume_);
  swap(sum_volume_, other->sum_volume_);
  swap(sum_amount_, other->sum_amount_);
  swap(bp1_, other->bp1_);
  swap(bp2_, other->bp2_);
  swap(bp3_, other->bp3_);
  swap(bp4_, other->bp4_);
  swap(bp5_, other->bp5_);
  swap(ba1_, other->ba1_);
  swap(ba2_, other->ba2_);
  swap(ba3_, other->ba3_);
  swap(ba4_, other->ba4_);
  swap(ba5_, other->ba5_);
  swap(sp1_, other->sp1_);
  swap(sp2_, other->sp2_);
  swap(sp3_, other->sp3_);
  swap(sp4_, other->sp4_);
  swap(sp5_, other->sp5_);
  swap(sa1_, other->sa1_);
  swap(sa2_, other->sa2_);
  swap(sa3_, other->sa3_);
  swap(sa4_, other->sa4_);
  swap(sa5_, other->sa5_);
  swap(status_, other->status_);
  swap(preclose_, other->preclose_);
  swap(open_, other->open_);
  swap(high_, other->high_);
  swap(low_, other->low_);
  swap(iopv_, other->iopv_);
  swap(bp1_ajust_, other->bp1_ajust_);
  swap(sp1_ajust_, other->sp1_ajust_);
  swap(bought_volume_, other->bought_volume_);
  swap(sold_volume_, other->sold_volume_);
  swap(bp6_, other->bp6_);
  swap(bp7_, other->bp7_);
  swap(bp8_, other->bp8_);
  swap(bp9_, other->bp9_);
  swap(bp10_, other->bp10_);
  swap(ba6_, other->ba6_);
  swap(ba7_, other->ba7_);
  swap(ba8_, other->ba8_);
  swap(ba9_, other->ba9_);
  swap(ba10_, other->ba10_);
  swap(sp6_, other->sp6_);
  swap(sp7_, other->sp7_);
  swap(sp8_, other->sp8_);
  swap(sp9_, other->sp9_);
  swap(sp10_, other->sp10_);
  swap(sa6_, other->sa6_);
  swap(sa7_, other->sa7_);
  swap(sa8_, other->sa8_);
  swap(sa9_, other->sa9_);
  swap(sa10_, other->sa10_);
  swap(upperlimit_price_, other->upperlimit_price_);
  swap(lowerlimit_price_, other->lowerlimit_price_);
  swap(market_, other->market_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Stock::GetMetadata() const {
  protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Handicap_Item::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Handicap_Item::kVolumeFieldNumber;
const int Handicap_Item::kOrderNoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Handicap_Item::Handicap_Item()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fquotation_2eproto::scc_info_Handicap_Item.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quotation.Handicap.Item)
}
Handicap_Item::Handicap_Item(const Handicap_Item& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  order_no_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_no()) {
    order_no_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_no_);
  }
  volume_ = from.volume_;
  // @@protoc_insertion_point(copy_constructor:quotation.Handicap.Item)
}

void Handicap_Item::SharedCtor() {
  order_no_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  volume_ = GOOGLE_LONGLONG(0);
}

Handicap_Item::~Handicap_Item() {
  // @@protoc_insertion_point(destructor:quotation.Handicap.Item)
  SharedDtor();
}

void Handicap_Item::SharedDtor() {
  order_no_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Handicap_Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Handicap_Item::descriptor() {
  ::protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Handicap_Item& Handicap_Item::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fquotation_2eproto::scc_info_Handicap_Item.base);
  return *internal_default_instance();
}


void Handicap_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:quotation.Handicap.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    order_no_.ClearNonDefaultToEmptyNoArena();
  }
  volume_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Handicap_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quotation.Handicap.Item)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 volume = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_no = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_no()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_no().data(), static_cast<int>(this->order_no().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.Handicap.Item.order_no");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quotation.Handicap.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quotation.Handicap.Item)
  return false;
#undef DO_
}

void Handicap_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quotation.Handicap.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 volume = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->volume(), output);
  }

  // optional string order_no = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_no().data(), static_cast<int>(this->order_no().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.Handicap.Item.order_no");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->order_no(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:quotation.Handicap.Item)
}

::google::protobuf::uint8* Handicap_Item::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quotation.Handicap.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 volume = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->volume(), target);
  }

  // optional string order_no = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_no().data(), static_cast<int>(this->order_no().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.Handicap.Item.order_no");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->order_no(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quotation.Handicap.Item)
  return target;
}

size_t Handicap_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quotation.Handicap.Item)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 volume = 1;
  if (has_volume()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->volume());
  }
  // optional string order_no = 2;
  if (has_order_no()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_no());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Handicap_Item::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quotation.Handicap.Item)
  GOOGLE_DCHECK_NE(&from, this);
  const Handicap_Item* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Handicap_Item>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quotation.Handicap.Item)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quotation.Handicap.Item)
    MergeFrom(*source);
  }
}

void Handicap_Item::MergeFrom(const Handicap_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quotation.Handicap.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_order_no();
      order_no_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_no_);
    }
    if (cached_has_bits & 0x00000002u) {
      volume_ = from.volume_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Handicap_Item::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quotation.Handicap.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Handicap_Item::CopyFrom(const Handicap_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quotation.Handicap.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Handicap_Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void Handicap_Item::Swap(Handicap_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Handicap_Item::InternalSwap(Handicap_Item* other) {
  using std::swap;
  order_no_.Swap(&other->order_no_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(volume_, other->volume_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Handicap_Item::GetMetadata() const {
  protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Handicap_Queue::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Handicap_Queue::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Handicap_Queue::Handicap_Queue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fquotation_2eproto::scc_info_Handicap_Queue.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quotation.Handicap.Queue)
}
Handicap_Queue::Handicap_Queue(const Handicap_Queue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:quotation.Handicap.Queue)
}

void Handicap_Queue::SharedCtor() {
}

Handicap_Queue::~Handicap_Queue() {
  // @@protoc_insertion_point(destructor:quotation.Handicap.Queue)
  SharedDtor();
}

void Handicap_Queue::SharedDtor() {
}

void Handicap_Queue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Handicap_Queue::descriptor() {
  ::protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Handicap_Queue& Handicap_Queue::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fquotation_2eproto::scc_info_Handicap_Queue.base);
  return *internal_default_instance();
}


void Handicap_Queue::Clear() {
// @@protoc_insertion_point(message_clear_start:quotation.Handicap.Queue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Handicap_Queue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quotation.Handicap.Queue)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .quotation.Handicap.Item items = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quotation.Handicap.Queue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quotation.Handicap.Queue)
  return false;
#undef DO_
}

void Handicap_Queue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quotation.Handicap.Queue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .quotation.Handicap.Item items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->items(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:quotation.Handicap.Queue)
}

::google::protobuf::uint8* Handicap_Queue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quotation.Handicap.Queue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .quotation.Handicap.Item items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->items(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quotation.Handicap.Queue)
  return target;
}

size_t Handicap_Queue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quotation.Handicap.Queue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .quotation.Handicap.Item items = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->items(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Handicap_Queue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quotation.Handicap.Queue)
  GOOGLE_DCHECK_NE(&from, this);
  const Handicap_Queue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Handicap_Queue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quotation.Handicap.Queue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quotation.Handicap.Queue)
    MergeFrom(*source);
  }
}

void Handicap_Queue::MergeFrom(const Handicap_Queue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quotation.Handicap.Queue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void Handicap_Queue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quotation.Handicap.Queue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Handicap_Queue::CopyFrom(const Handicap_Queue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quotation.Handicap.Queue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Handicap_Queue::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void Handicap_Queue::Swap(Handicap_Queue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Handicap_Queue::InternalSwap(Handicap_Queue* other) {
  using std::swap;
  CastToBase(&items_)->InternalSwap(CastToBase(&other->items_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Handicap_Queue::GetMetadata() const {
  protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Handicap::InitAsDefaultInstance() {
}
::google::protobuf::internal::ExplicitlyConstructed<::std::string> Handicap::_i_give_permission_to_break_this_code_default_type_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Handicap::kTypeFieldNumber;
const int Handicap::kTradingDayFieldNumber;
const int Handicap::kStampFieldNumber;
const int Handicap::kCodeFieldNumber;
const int Handicap::kNameFieldNumber;
const int Handicap::kMarketFieldNumber;
const int Handicap::kStatusFieldNumber;
const int Handicap::kUpperlimitPriceFieldNumber;
const int Handicap::kLowerlimitPriceFieldNumber;
const int Handicap::kPrecloseFieldNumber;
const int Handicap::kOpenFieldNumber;
const int Handicap::kHighFieldNumber;
const int Handicap::kLowFieldNumber;
const int Handicap::kNewPriceFieldNumber;
const int Handicap::kNewVolumeFieldNumber;
const int Handicap::kSumVolumeFieldNumber;
const int Handicap::kSumAmountFieldNumber;
const int Handicap::kBpFieldNumber;
const int Handicap::kBaFieldNumber;
const int Handicap::kSpFieldNumber;
const int Handicap::kSaFieldNumber;
const int Handicap::kAskFieldNumber;
const int Handicap::kBidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Handicap::Handicap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fquotation_2eproto::scc_info_Handicap.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quotation.Handicap)
}
Handicap::Handicap(const Handicap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      bp_(from.bp_),
      ba_(from.ba_),
      sp_(from.sp_),
      sa_(from.sa_),
      ask_(from.ask_),
      bid_(from.bid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::quotation::Handicap::_i_give_permission_to_break_this_code_default_type_.get());
  if (from.has_type()) {
    type_.AssignWithDefault(&::quotation::Handicap::_i_give_permission_to_break_this_code_default_type_.get(), from.type_);
  }
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&trading_day_, &from.trading_day_,
    static_cast<size_t>(reinterpret_cast<char*>(&sum_amount_) -
    reinterpret_cast<char*>(&trading_day_)) + sizeof(sum_amount_));
  // @@protoc_insertion_point(copy_constructor:quotation.Handicap)
}

void Handicap::SharedCtor() {
  type_.UnsafeSetDefault(&::quotation::Handicap::_i_give_permission_to_break_this_code_default_type_.get());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&trading_day_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sum_amount_) -
      reinterpret_cast<char*>(&trading_day_)) + sizeof(sum_amount_));
}

Handicap::~Handicap() {
  // @@protoc_insertion_point(destructor:quotation.Handicap)
  SharedDtor();
}

void Handicap::SharedDtor() {
  type_.DestroyNoArena(&::quotation::Handicap::_i_give_permission_to_break_this_code_default_type_.get());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Handicap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Handicap::descriptor() {
  ::protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Handicap& Handicap::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fquotation_2eproto::scc_info_Handicap.base);
  return *internal_default_instance();
}


void Handicap::Clear() {
// @@protoc_insertion_point(message_clear_start:quotation.Handicap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bp_.Clear();
  ba_.Clear();
  sp_.Clear();
  sa_.Clear();
  ask_.Clear();
  bid_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      type_.UnsafeMutablePointer()->assign(*&::quotation::Handicap::_i_give_permission_to_break_this_code_default_type_.get());
    }
    if (cached_has_bits & 0x00000002u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&trading_day_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&upperlimit_price_) -
        reinterpret_cast<char*>(&trading_day_)) + sizeof(upperlimit_price_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&lowerlimit_price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sum_volume_) -
        reinterpret_cast<char*>(&lowerlimit_price_)) + sizeof(sum_volume_));
  }
  sum_amount_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Handicap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quotation.Handicap)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1 [default = "H"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.Handicap.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trading_day = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_trading_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trading_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 stamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_stamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string code = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.Handicap.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.Handicap.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 market = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_market();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &market_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 status = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 upperlimit_price = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_upperlimit_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &upperlimit_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 lowerlimit_price = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_lowerlimit_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lowerlimit_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 preclose = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_preclose();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &preclose_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 open = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_open();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 high = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_high();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &high_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 low = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_low();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &low_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 new_price = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_new_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &new_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 new_volume = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_new_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &new_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sum_volume = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_sum_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sum_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sum_amount = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_sum_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sum_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 bp = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 144u, input, this->mutable_bp())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_bp())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 ba = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 152u, input, this->mutable_ba())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_ba())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 sp = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 160u, input, this->mutable_sp())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_sp())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 sa = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 168u, input, this->mutable_sa())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_sa())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .quotation.Handicap.Queue ask = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .quotation.Handicap.Queue bid = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_bid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quotation.Handicap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quotation.Handicap)
  return false;
#undef DO_
}

void Handicap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quotation.Handicap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1 [default = "H"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.Handicap.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional uint32 trading_day = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->trading_day(), output);
  }

  // required uint32 stamp = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stamp(), output);
  }

  // required string code = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.Handicap.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->code(), output);
  }

  // optional string name = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.Handicap.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // optional int64 market = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->market(), output);
  }

  // optional int64 status = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->status(), output);
  }

  // optional int64 upperlimit_price = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->upperlimit_price(), output);
  }

  // optional int64 lowerlimit_price = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->lowerlimit_price(), output);
  }

  // optional int64 preclose = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->preclose(), output);
  }

  // optional int64 open = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->open(), output);
  }

  // optional int64 high = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->high(), output);
  }

  // optional int64 low = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->low(), output);
  }

  // optional int64 new_price = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->new_price(), output);
  }

  // optional int64 new_volume = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->new_volume(), output);
  }

  // optional int64 sum_volume = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->sum_volume(), output);
  }

  // optional int64 sum_amount = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->sum_amount(), output);
  }

  // repeated int64 bp = 18;
  for (int i = 0, n = this->bp_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      18, this->bp(i), output);
  }

  // repeated int64 ba = 19;
  for (int i = 0, n = this->ba_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      19, this->ba(i), output);
  }

  // repeated int64 sp = 20;
  for (int i = 0, n = this->sp_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      20, this->sp(i), output);
  }

  // repeated int64 sa = 21;
  for (int i = 0, n = this->sa_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      21, this->sa(i), output);
  }

  // repeated .quotation.Handicap.Queue ask = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ask_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22,
      this->ask(static_cast<int>(i)),
      output);
  }

  // repeated .quotation.Handicap.Queue bid = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bid_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23,
      this->bid(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:quotation.Handicap)
}

::google::protobuf::uint8* Handicap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quotation.Handicap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1 [default = "H"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.Handicap.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional uint32 trading_day = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->trading_day(), target);
  }

  // required uint32 stamp = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stamp(), target);
  }

  // required string code = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.Handicap.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->code(), target);
  }

  // optional string name = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.Handicap.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional int64 market = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->market(), target);
  }

  // optional int64 status = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->status(), target);
  }

  // optional int64 upperlimit_price = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->upperlimit_price(), target);
  }

  // optional int64 lowerlimit_price = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->lowerlimit_price(), target);
  }

  // optional int64 preclose = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->preclose(), target);
  }

  // optional int64 open = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->open(), target);
  }

  // optional int64 high = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->high(), target);
  }

  // optional int64 low = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->low(), target);
  }

  // optional int64 new_price = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->new_price(), target);
  }

  // optional int64 new_volume = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->new_volume(), target);
  }

  // optional int64 sum_volume = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->sum_volume(), target);
  }

  // optional int64 sum_amount = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->sum_amount(), target);
  }

  // repeated int64 bp = 18;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(18, this->bp_, target);

  // repeated int64 ba = 19;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(19, this->ba_, target);

  // repeated int64 sp = 20;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(20, this->sp_, target);

  // repeated int64 sa = 21;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(21, this->sa_, target);

  // repeated .quotation.Handicap.Queue ask = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ask_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, this->ask(static_cast<int>(i)), deterministic, target);
  }

  // repeated .quotation.Handicap.Queue bid = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bid_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, this->bid(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quotation.Handicap)
  return target;
}

size_t Handicap::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:quotation.Handicap)
  size_t total_size = 0;

  if (has_code()) {
    // required string code = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_stamp()) {
    // required uint32 stamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stamp());
  }

  return total_size;
}
size_t Handicap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quotation.Handicap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000012) ^ 0x00000012) == 0) {  // All required fields are present.
    // required string code = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required uint32 stamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int64 bp = 18;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->bp_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->bp_size());
    total_size += data_size;
  }

  // repeated int64 ba = 19;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->ba_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->ba_size());
    total_size += data_size;
  }

  // repeated int64 sp = 20;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->sp_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->sp_size());
    total_size += data_size;
  }

  // repeated int64 sa = 21;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->sa_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->sa_size());
    total_size += data_size;
  }

  // repeated .quotation.Handicap.Queue ask = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->ask_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ask(static_cast<int>(i)));
    }
  }

  // repeated .quotation.Handicap.Queue bid = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->bid_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->bid(static_cast<int>(i)));
    }
  }

  // optional string type = 1 [default = "H"];
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 trading_day = 2;
    if (has_trading_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trading_day());
    }

  }
  if (_has_bits_[0 / 32] & 224u) {
    // optional int64 market = 6;
    if (has_market()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->market());
    }

    // optional int64 status = 7;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->status());
    }

    // optional int64 upperlimit_price = 8;
    if (has_upperlimit_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->upperlimit_price());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int64 lowerlimit_price = 9;
    if (has_lowerlimit_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lowerlimit_price());
    }

    // optional int64 preclose = 10;
    if (has_preclose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->preclose());
    }

    // optional int64 open = 11;
    if (has_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->open());
    }

    // optional int64 high = 12;
    if (has_high()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->high());
    }

    // optional int64 low = 13;
    if (has_low()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->low());
    }

    // optional int64 new_price = 14;
    if (has_new_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->new_price());
    }

    // optional int64 new_volume = 15;
    if (has_new_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->new_volume());
    }

    // optional int64 sum_volume = 16;
    if (has_sum_volume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sum_volume());
    }

  }
  // optional int64 sum_amount = 17;
  if (has_sum_amount()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sum_amount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Handicap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quotation.Handicap)
  GOOGLE_DCHECK_NE(&from, this);
  const Handicap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Handicap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quotation.Handicap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quotation.Handicap)
    MergeFrom(*source);
  }
}

void Handicap::MergeFrom(const Handicap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quotation.Handicap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bp_.MergeFrom(from.bp_);
  ba_.MergeFrom(from.ba_);
  sp_.MergeFrom(from.sp_);
  sa_.MergeFrom(from.sa_);
  ask_.MergeFrom(from.ask_);
  bid_.MergeFrom(from.bid_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_type();
      type_.AssignWithDefault(&::quotation::Handicap::_i_give_permission_to_break_this_code_default_type_.get(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000008u) {
      trading_day_ = from.trading_day_;
    }
    if (cached_has_bits & 0x00000010u) {
      stamp_ = from.stamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      market_ = from.market_;
    }
    if (cached_has_bits & 0x00000040u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000080u) {
      upperlimit_price_ = from.upperlimit_price_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      lowerlimit_price_ = from.lowerlimit_price_;
    }
    if (cached_has_bits & 0x00000200u) {
      preclose_ = from.preclose_;
    }
    if (cached_has_bits & 0x00000400u) {
      open_ = from.open_;
    }
    if (cached_has_bits & 0x00000800u) {
      high_ = from.high_;
    }
    if (cached_has_bits & 0x00001000u) {
      low_ = from.low_;
    }
    if (cached_has_bits & 0x00002000u) {
      new_price_ = from.new_price_;
    }
    if (cached_has_bits & 0x00004000u) {
      new_volume_ = from.new_volume_;
    }
    if (cached_has_bits & 0x00008000u) {
      sum_volume_ = from.sum_volume_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_sum_amount(from.sum_amount());
  }
}

void Handicap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quotation.Handicap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Handicap::CopyFrom(const Handicap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quotation.Handicap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Handicap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000012) != 0x00000012) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ask())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->bid())) return false;
  return true;
}

void Handicap::Swap(Handicap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Handicap::InternalSwap(Handicap* other) {
  using std::swap;
  bp_.InternalSwap(&other->bp_);
  ba_.InternalSwap(&other->ba_);
  sp_.InternalSwap(&other->sp_);
  sa_.InternalSwap(&other->sa_);
  CastToBase(&ask_)->InternalSwap(CastToBase(&other->ask_));
  CastToBase(&bid_)->InternalSwap(CastToBase(&other->bid_));
  type_.Swap(&other->type_, &::quotation::Handicap::_i_give_permission_to_break_this_code_default_type_.get(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trading_day_, other->trading_day_);
  swap(stamp_, other->stamp_);
  swap(market_, other->market_);
  swap(status_, other->status_);
  swap(upperlimit_price_, other->upperlimit_price_);
  swap(lowerlimit_price_, other->lowerlimit_price_);
  swap(preclose_, other->preclose_);
  swap(open_, other->open_);
  swap(high_, other->high_);
  swap(low_, other->low_);
  swap(new_price_, other->new_price_);
  swap(new_volume_, other->new_volume_);
  swap(sum_volume_, other->sum_volume_);
  swap(sum_amount_, other->sum_amount_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Handicap::GetMetadata() const {
  protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Future::InitAsDefaultInstance() {
}
::google::protobuf::internal::ExplicitlyConstructed<::std::string> Future::_i_give_permission_to_break_this_code_default_type_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Future::kTypeFieldNumber;
const int Future::kTradingDayFieldNumber;
const int Future::kStampFieldNumber;
const int Future::kCodeFieldNumber;
const int Future::kNameFieldNumber;
const int Future::kNewPriceFieldNumber;
const int Future::kVolumeFieldNumber;
const int Future::kMatchAmtFieldNumber;
const int Future::kNewVolumeFieldNumber;
const int Future::kTotalPositionFieldNumber;
const int Future::kPositionChangeFieldNumber;
const int Future::kBp1FieldNumber;
const int Future::kBp2FieldNumber;
const int Future::kBp3FieldNumber;
const int Future::kBp4FieldNumber;
const int Future::kBp5FieldNumber;
const int Future::kBa1FieldNumber;
const int Future::kBa2FieldNumber;
const int Future::kBa3FieldNumber;
const int Future::kBa4FieldNumber;
const int Future::kBa5FieldNumber;
const int Future::kSp1FieldNumber;
const int Future::kSp2FieldNumber;
const int Future::kSp3FieldNumber;
const int Future::kSp4FieldNumber;
const int Future::kSp5FieldNumber;
const int Future::kSa1FieldNumber;
const int Future::kSa2FieldNumber;
const int Future::kSa3FieldNumber;
const int Future::kSa4FieldNumber;
const int Future::kSa5FieldNumber;
const int Future::kExchangeIdFieldNumber;
const int Future::kPresettlementPriceFieldNumber;
const int Future::kPrecloseFieldNumber;
const int Future::kPrepositionFieldNumber;
const int Future::kOpenPriceFieldNumber;
const int Future::kHighestPriceFieldNumber;
const int Future::kLowestPriceFieldNumber;
const int Future::kClosePriceFieldNumber;
const int Future::kSettlementPriceFieldNumber;
const int Future::kUpperlimitPriceFieldNumber;
const int Future::kLowerlimitPriceFieldNumber;
const int Future::kUpdateTimeFieldNumber;
const int Future::kUpdateMillisecFieldNumber;
const int Future::kAveragePriceFieldNumber;
const int Future::kOpenInterestFieldNumber;
const int Future::kBoughtVolumeFieldNumber;
const int Future::kSoldVolumeFieldNumber;
const int Future::kMarketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Future::Future()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fquotation_2eproto::scc_info_Future.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quotation.Future)
}
Future::Future(const Future& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::quotation::Future::_i_give_permission_to_break_this_code_default_type_.get());
  if (from.has_type()) {
    type_.AssignWithDefault(&::quotation::Future::_i_give_permission_to_break_this_code_default_type_.get(), from.type_);
  }
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  exchange_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exchange_id()) {
    exchange_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_id_);
  }
  update_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_update_time()) {
    update_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_time_);
  }
  ::memcpy(&trading_day_, &from.trading_day_,
    static_cast<size_t>(reinterpret_cast<char*>(&update_millisec_) -
    reinterpret_cast<char*>(&trading_day_)) + sizeof(update_millisec_));
  // @@protoc_insertion_point(copy_constructor:quotation.Future)
}

void Future::SharedCtor() {
  type_.UnsafeSetDefault(&::quotation::Future::_i_give_permission_to_break_this_code_default_type_.get());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&trading_day_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_millisec_) -
      reinterpret_cast<char*>(&trading_day_)) + sizeof(update_millisec_));
}

Future::~Future() {
  // @@protoc_insertion_point(destructor:quotation.Future)
  SharedDtor();
}

void Future::SharedDtor() {
  type_.DestroyNoArena(&::quotation::Future::_i_give_permission_to_break_this_code_default_type_.get());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Future::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Future::descriptor() {
  ::protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Future& Future::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fquotation_2eproto::scc_info_Future.base);
  return *internal_default_instance();
}


void Future::Clear() {
// @@protoc_insertion_point(message_clear_start:quotation.Future)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      type_.UnsafeMutablePointer()->assign(*&::quotation::Future::_i_give_permission_to_break_this_code_default_type_.get());
    }
    if (cached_has_bits & 0x00000002u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      exchange_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      update_time_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&trading_day_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&new_price_) -
        reinterpret_cast<char*>(&trading_day_)) + sizeof(new_price_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&volume_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bp3_) -
        reinterpret_cast<char*>(&volume_)) + sizeof(bp3_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&bp4_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sp1_) -
        reinterpret_cast<char*>(&bp4_)) + sizeof(sp1_));
  }
  if (cached_has_bits & 4278190080u) {
    ::memset(&sp2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sa4_) -
        reinterpret_cast<char*>(&sp2_)) + sizeof(sa4_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 255u) {
    ::memset(&sa5_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&close_price_) -
        reinterpret_cast<char*>(&sa5_)) + sizeof(close_price_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&settlement_price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&market_) -
        reinterpret_cast<char*>(&settlement_price_)) + sizeof(market_));
  }
  update_millisec_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Future::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quotation.Future)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1 [default = "F"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.Future.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trading_day = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_trading_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trading_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 stamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_stamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string code = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.Future.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.Future.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 new_price = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_new_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &new_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 volume = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 match_amt = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_match_amt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &match_amt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 new_volume = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_new_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &new_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 total_position = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_total_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 position_change = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_position_change();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &position_change_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 bp1 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_bp1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bp1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bp2 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_bp2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bp2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bp3 = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_bp3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bp3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bp4 = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_bp4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bp4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bp5 = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_bp5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bp5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 ba1 = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_ba1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ba1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ba2 = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_ba2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ba2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ba3 = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_ba3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ba3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ba4 = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_ba4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ba4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ba5 = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_ba5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ba5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 sp1 = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_sp1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sp1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sp2 = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_sp2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sp2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sp3 = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_sp3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sp3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sp4 = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_sp4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sp4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sp5 = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_sp5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sp5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 sa1 = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          set_has_sa1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sa1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sa2 = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          set_has_sa2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sa2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sa3 = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          set_has_sa3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sa3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sa4 = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_sa4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sa4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sa5 = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_sa5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sa5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string exchange_id = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange_id().data(), static_cast<int>(this->exchange_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.Future.exchange_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 presettlement_price = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 264 & 0xFF */)) {
          set_has_presettlement_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &presettlement_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 preclose = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 272 & 0xFF */)) {
          set_has_preclose();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &preclose_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 preposition = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {
          set_has_preposition();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &preposition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 open_price = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 288 & 0xFF */)) {
          set_has_open_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &open_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 highest_price = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 296 & 0xFF */)) {
          set_has_highest_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &highest_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 lowest_price = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 304 & 0xFF */)) {
          set_has_lowest_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lowest_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 close_price = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 312 & 0xFF */)) {
          set_has_close_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &close_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 settlement_price = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {
          set_has_settlement_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &settlement_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 upperlimit_price = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 328 & 0xFF */)) {
          set_has_upperlimit_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &upperlimit_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 lowerlimit_price = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 336 & 0xFF */)) {
          set_has_lowerlimit_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lowerlimit_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string update_time = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 346 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_update_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->update_time().data(), static_cast<int>(this->update_time().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.Future.update_time");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 update_millisec = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 352 & 0xFF */)) {
          set_has_update_millisec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_millisec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 average_price = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 360 & 0xFF */)) {
          set_has_average_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &average_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 open_interest = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 368 & 0xFF */)) {
          set_has_open_interest();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &open_interest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bought_volume = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 376 & 0xFF */)) {
          set_has_bought_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bought_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sold_volume = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 384 & 0xFF */)) {
          set_has_sold_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sold_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 market = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 392 & 0xFF */)) {
          set_has_market();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &market_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quotation.Future)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quotation.Future)
  return false;
#undef DO_
}

void Future::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quotation.Future)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1 [default = "F"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.Future.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional uint32 trading_day = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->trading_day(), output);
  }

  // required uint32 stamp = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stamp(), output);
  }

  // required string code = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.Future.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->code(), output);
  }

  // optional string name = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.Future.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // required int64 new_price = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->new_price(), output);
  }

  // required uint64 volume = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->volume(), output);
  }

  // required int64 match_amt = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->match_amt(), output);
  }

  // optional int64 new_volume = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->new_volume(), output);
  }

  // optional int64 total_position = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->total_position(), output);
  }

  // optional int64 position_change = 11;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->position_change(), output);
  }

  // required int64 bp1 = 12;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->bp1(), output);
  }

  // optional int64 bp2 = 13;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->bp2(), output);
  }

  // optional int64 bp3 = 14;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->bp3(), output);
  }

  // optional int64 bp4 = 15;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->bp4(), output);
  }

  // optional int64 bp5 = 16;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->bp5(), output);
  }

  // required int64 ba1 = 17;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->ba1(), output);
  }

  // optional int64 ba2 = 18;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->ba2(), output);
  }

  // optional int64 ba3 = 19;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->ba3(), output);
  }

  // optional int64 ba4 = 20;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->ba4(), output);
  }

  // optional int64 ba5 = 21;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->ba5(), output);
  }

  // required int64 sp1 = 22;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->sp1(), output);
  }

  // optional int64 sp2 = 23;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->sp2(), output);
  }

  // optional int64 sp3 = 24;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->sp3(), output);
  }

  // optional int64 sp4 = 25;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(25, this->sp4(), output);
  }

  // optional int64 sp5 = 26;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(26, this->sp5(), output);
  }

  // required int64 sa1 = 27;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(27, this->sa1(), output);
  }

  // optional int64 sa2 = 28;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(28, this->sa2(), output);
  }

  // optional int64 sa3 = 29;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(29, this->sa3(), output);
  }

  // optional int64 sa4 = 30;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(30, this->sa4(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int64 sa5 = 31;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(31, this->sa5(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string exchange_id = 32;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange_id().data(), static_cast<int>(this->exchange_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.Future.exchange_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      32, this->exchange_id(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int64 presettlement_price = 33;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(33, this->presettlement_price(), output);
  }

  // optional int64 preclose = 34;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(34, this->preclose(), output);
  }

  // optional int64 preposition = 35;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(35, this->preposition(), output);
  }

  // optional int64 open_price = 36;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(36, this->open_price(), output);
  }

  // optional int64 highest_price = 37;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(37, this->highest_price(), output);
  }

  // optional int64 lowest_price = 38;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(38, this->lowest_price(), output);
  }

  // optional int64 close_price = 39;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(39, this->close_price(), output);
  }

  // optional int64 settlement_price = 40;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(40, this->settlement_price(), output);
  }

  // optional int64 upperlimit_price = 41;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(41, this->upperlimit_price(), output);
  }

  // optional int64 lowerlimit_price = 42;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(42, this->lowerlimit_price(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string update_time = 43;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->update_time().data(), static_cast<int>(this->update_time().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.Future.update_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      43, this->update_time(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 update_millisec = 44;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->update_millisec(), output);
  }

  // optional int64 average_price = 45;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(45, this->average_price(), output);
  }

  // optional int64 open_interest = 46;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(46, this->open_interest(), output);
  }

  // optional int64 bought_volume = 47;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(47, this->bought_volume(), output);
  }

  // optional int64 sold_volume = 48;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(48, this->sold_volume(), output);
  }

  // optional int64 market = 49;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(49, this->market(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:quotation.Future)
}

::google::protobuf::uint8* Future::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quotation.Future)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1 [default = "F"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.Future.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional uint32 trading_day = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->trading_day(), target);
  }

  // required uint32 stamp = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stamp(), target);
  }

  // required string code = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.Future.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->code(), target);
  }

  // optional string name = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.Future.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // required int64 new_price = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->new_price(), target);
  }

  // required uint64 volume = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->volume(), target);
  }

  // required int64 match_amt = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->match_amt(), target);
  }

  // optional int64 new_volume = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->new_volume(), target);
  }

  // optional int64 total_position = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->total_position(), target);
  }

  // optional int64 position_change = 11;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->position_change(), target);
  }

  // required int64 bp1 = 12;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->bp1(), target);
  }

  // optional int64 bp2 = 13;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->bp2(), target);
  }

  // optional int64 bp3 = 14;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->bp3(), target);
  }

  // optional int64 bp4 = 15;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->bp4(), target);
  }

  // optional int64 bp5 = 16;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->bp5(), target);
  }

  // required int64 ba1 = 17;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->ba1(), target);
  }

  // optional int64 ba2 = 18;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->ba2(), target);
  }

  // optional int64 ba3 = 19;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->ba3(), target);
  }

  // optional int64 ba4 = 20;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->ba4(), target);
  }

  // optional int64 ba5 = 21;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->ba5(), target);
  }

  // required int64 sp1 = 22;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->sp1(), target);
  }

  // optional int64 sp2 = 23;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->sp2(), target);
  }

  // optional int64 sp3 = 24;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->sp3(), target);
  }

  // optional int64 sp4 = 25;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(25, this->sp4(), target);
  }

  // optional int64 sp5 = 26;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(26, this->sp5(), target);
  }

  // required int64 sa1 = 27;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(27, this->sa1(), target);
  }

  // optional int64 sa2 = 28;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(28, this->sa2(), target);
  }

  // optional int64 sa3 = 29;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(29, this->sa3(), target);
  }

  // optional int64 sa4 = 30;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(30, this->sa4(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int64 sa5 = 31;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(31, this->sa5(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string exchange_id = 32;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange_id().data(), static_cast<int>(this->exchange_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.Future.exchange_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->exchange_id(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int64 presettlement_price = 33;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(33, this->presettlement_price(), target);
  }

  // optional int64 preclose = 34;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(34, this->preclose(), target);
  }

  // optional int64 preposition = 35;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(35, this->preposition(), target);
  }

  // optional int64 open_price = 36;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(36, this->open_price(), target);
  }

  // optional int64 highest_price = 37;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(37, this->highest_price(), target);
  }

  // optional int64 lowest_price = 38;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(38, this->lowest_price(), target);
  }

  // optional int64 close_price = 39;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(39, this->close_price(), target);
  }

  // optional int64 settlement_price = 40;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(40, this->settlement_price(), target);
  }

  // optional int64 upperlimit_price = 41;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(41, this->upperlimit_price(), target);
  }

  // optional int64 lowerlimit_price = 42;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(42, this->lowerlimit_price(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string update_time = 43;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->update_time().data(), static_cast<int>(this->update_time().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.Future.update_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        43, this->update_time(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 update_millisec = 44;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->update_millisec(), target);
  }

  // optional int64 average_price = 45;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(45, this->average_price(), target);
  }

  // optional int64 open_interest = 46;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(46, this->open_interest(), target);
  }

  // optional int64 bought_volume = 47;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(47, this->bought_volume(), target);
  }

  // optional int64 sold_volume = 48;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(48, this->sold_volume(), target);
  }

  // optional int64 market = 49;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(49, this->market(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quotation.Future)
  return target;
}

size_t Future::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:quotation.Future)
  size_t total_size = 0;

  if (has_code()) {
    // required string code = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_stamp()) {
    // required uint32 stamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stamp());
  }

  if (has_new_price()) {
    // required int64 new_price = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->new_price());
  }

  if (has_volume()) {
    // required uint64 volume = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->volume());
  }

  if (has_match_amt()) {
    // required int64 match_amt = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->match_amt());
  }

  if (has_bp1()) {
    // required int64 bp1 = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bp1());
  }

  if (has_ba1()) {
    // required int64 ba1 = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ba1());
  }

  if (has_sp1()) {
    // required int64 sp1 = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sp1());
  }

  if (has_sa1()) {
    // required int64 sa1 = 27;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sa1());
  }

  return total_size;
}
size_t Future::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quotation.Future)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x108423c2) ^ 0x108423c2) == 0) {  // All required fields are present.
    // required string code = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required uint32 stamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stamp());

    // required int64 new_price = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->new_price());

    // required uint64 volume = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->volume());

    // required int64 match_amt = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->match_amt());

    // required int64 bp1 = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bp1());

    // required int64 ba1 = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ba1());

    // required int64 sp1 = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sp1());

    // required int64 sa1 = 27;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sa1());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string type = 1 [default = "F"];
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  if (_has_bits_[0 / 32] & 60u) {
    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string exchange_id = 32;
    if (has_exchange_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange_id());
    }

    // optional string update_time = 43;
    if (has_update_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->update_time());
    }

    // optional uint32 trading_day = 2;
    if (has_trading_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trading_day());
    }

  }
  if (_has_bits_[8 / 32] & 7168u) {
    // optional int64 new_volume = 9;
    if (has_new_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->new_volume());
    }

    // optional int64 total_position = 10;
    if (has_total_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_position());
    }

    // optional int64 position_change = 11;
    if (has_position_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->position_change());
    }

  }
  if (_has_bits_[8 / 32] & 49152u) {
    // optional int64 bp2 = 13;
    if (has_bp2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bp2());
    }

    // optional int64 bp3 = 14;
    if (has_bp3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bp3());
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional int64 bp4 = 15;
    if (has_bp4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bp4());
    }

    // optional int64 bp5 = 16;
    if (has_bp5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bp5());
    }

  }
  if (_has_bits_[16 / 32] & 7864320u) {
    // optional int64 ba2 = 18;
    if (has_ba2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ba2());
    }

    // optional int64 ba3 = 19;
    if (has_ba3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ba3());
    }

    // optional int64 ba4 = 20;
    if (has_ba4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ba4());
    }

    // optional int64 ba5 = 21;
    if (has_ba5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ba5());
    }

  }
  if (_has_bits_[24 / 32] & 251658240u) {
    // optional int64 sp2 = 23;
    if (has_sp2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sp2());
    }

    // optional int64 sp3 = 24;
    if (has_sp3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sp3());
    }

    // optional int64 sp4 = 25;
    if (has_sp4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sp4());
    }

    // optional int64 sp5 = 26;
    if (has_sp5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sp5());
    }

  }
  if (_has_bits_[24 / 32] & 3758096384u) {
    // optional int64 sa2 = 28;
    if (has_sa2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sa2());
    }

    // optional int64 sa3 = 29;
    if (has_sa3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sa3());
    }

    // optional int64 sa4 = 30;
    if (has_sa4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sa4());
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional int64 sa5 = 31;
    if (has_sa5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sa5());
    }

    // optional int64 presettlement_price = 33;
    if (has_presettlement_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->presettlement_price());
    }

    // optional int64 preclose = 34;
    if (has_preclose()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->preclose());
    }

    // optional int64 preposition = 35;
    if (has_preposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->preposition());
    }

    // optional int64 open_price = 36;
    if (has_open_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->open_price());
    }

    // optional int64 highest_price = 37;
    if (has_highest_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->highest_price());
    }

    // optional int64 lowest_price = 38;
    if (has_lowest_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lowest_price());
    }

    // optional int64 close_price = 39;
    if (has_close_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->close_price());
    }

  }
  if (_has_bits_[40 / 32] & 65280u) {
    // optional int64 settlement_price = 40;
    if (has_settlement_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->settlement_price());
    }

    // optional int64 upperlimit_price = 41;
    if (has_upperlimit_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->upperlimit_price());
    }

    // optional int64 lowerlimit_price = 42;
    if (has_lowerlimit_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lowerlimit_price());
    }

    // optional int64 average_price = 45;
    if (has_average_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->average_price());
    }

    // optional int64 open_interest = 46;
    if (has_open_interest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->open_interest());
    }

    // optional int64 bought_volume = 47;
    if (has_bought_volume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bought_volume());
    }

    // optional int64 sold_volume = 48;
    if (has_sold_volume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sold_volume());
    }

    // optional int64 market = 49;
    if (has_market()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->market());
    }

  }
  // optional uint32 update_millisec = 44;
  if (has_update_millisec()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->update_millisec());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Future::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quotation.Future)
  GOOGLE_DCHECK_NE(&from, this);
  const Future* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Future>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quotation.Future)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quotation.Future)
    MergeFrom(*source);
  }
}

void Future::MergeFrom(const Future& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quotation.Future)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_type();
      type_.AssignWithDefault(&::quotation::Future::_i_give_permission_to_break_this_code_default_type_.get(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_exchange_id();
      exchange_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_update_time();
      update_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_time_);
    }
    if (cached_has_bits & 0x00000020u) {
      trading_day_ = from.trading_day_;
    }
    if (cached_has_bits & 0x00000040u) {
      stamp_ = from.stamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      new_price_ = from.new_price_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      volume_ = from.volume_;
    }
    if (cached_has_bits & 0x00000200u) {
      match_amt_ = from.match_amt_;
    }
    if (cached_has_bits & 0x00000400u) {
      new_volume_ = from.new_volume_;
    }
    if (cached_has_bits & 0x00000800u) {
      total_position_ = from.total_position_;
    }
    if (cached_has_bits & 0x00001000u) {
      position_change_ = from.position_change_;
    }
    if (cached_has_bits & 0x00002000u) {
      bp1_ = from.bp1_;
    }
    if (cached_has_bits & 0x00004000u) {
      bp2_ = from.bp2_;
    }
    if (cached_has_bits & 0x00008000u) {
      bp3_ = from.bp3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      bp4_ = from.bp4_;
    }
    if (cached_has_bits & 0x00020000u) {
      bp5_ = from.bp5_;
    }
    if (cached_has_bits & 0x00040000u) {
      ba1_ = from.ba1_;
    }
    if (cached_has_bits & 0x00080000u) {
      ba2_ = from.ba2_;
    }
    if (cached_has_bits & 0x00100000u) {
      ba3_ = from.ba3_;
    }
    if (cached_has_bits & 0x00200000u) {
      ba4_ = from.ba4_;
    }
    if (cached_has_bits & 0x00400000u) {
      ba5_ = from.ba5_;
    }
    if (cached_has_bits & 0x00800000u) {
      sp1_ = from.sp1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      sp2_ = from.sp2_;
    }
    if (cached_has_bits & 0x02000000u) {
      sp3_ = from.sp3_;
    }
    if (cached_has_bits & 0x04000000u) {
      sp4_ = from.sp4_;
    }
    if (cached_has_bits & 0x08000000u) {
      sp5_ = from.sp5_;
    }
    if (cached_has_bits & 0x10000000u) {
      sa1_ = from.sa1_;
    }
    if (cached_has_bits & 0x20000000u) {
      sa2_ = from.sa2_;
    }
    if (cached_has_bits & 0x40000000u) {
      sa3_ = from.sa3_;
    }
    if (cached_has_bits & 0x80000000u) {
      sa4_ = from.sa4_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      sa5_ = from.sa5_;
    }
    if (cached_has_bits & 0x00000002u) {
      presettlement_price_ = from.presettlement_price_;
    }
    if (cached_has_bits & 0x00000004u) {
      preclose_ = from.preclose_;
    }
    if (cached_has_bits & 0x00000008u) {
      preposition_ = from.preposition_;
    }
    if (cached_has_bits & 0x00000010u) {
      open_price_ = from.open_price_;
    }
    if (cached_has_bits & 0x00000020u) {
      highest_price_ = from.highest_price_;
    }
    if (cached_has_bits & 0x00000040u) {
      lowest_price_ = from.lowest_price_;
    }
    if (cached_has_bits & 0x00000080u) {
      close_price_ = from.close_price_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      settlement_price_ = from.settlement_price_;
    }
    if (cached_has_bits & 0x00000200u) {
      upperlimit_price_ = from.upperlimit_price_;
    }
    if (cached_has_bits & 0x00000400u) {
      lowerlimit_price_ = from.lowerlimit_price_;
    }
    if (cached_has_bits & 0x00000800u) {
      average_price_ = from.average_price_;
    }
    if (cached_has_bits & 0x00001000u) {
      open_interest_ = from.open_interest_;
    }
    if (cached_has_bits & 0x00002000u) {
      bought_volume_ = from.bought_volume_;
    }
    if (cached_has_bits & 0x00004000u) {
      sold_volume_ = from.sold_volume_;
    }
    if (cached_has_bits & 0x00008000u) {
      market_ = from.market_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_update_millisec(from.update_millisec());
  }
}

void Future::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quotation.Future)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Future::CopyFrom(const Future& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quotation.Future)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Future::IsInitialized() const {
  if ((_has_bits_[0] & 0x108423c2) != 0x108423c2) return false;
  return true;
}

void Future::Swap(Future* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Future::InternalSwap(Future* other) {
  using std::swap;
  type_.Swap(&other->type_, &::quotation::Future::_i_give_permission_to_break_this_code_default_type_.get(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_id_.Swap(&other->exchange_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  update_time_.Swap(&other->update_time_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trading_day_, other->trading_day_);
  swap(stamp_, other->stamp_);
  swap(new_price_, other->new_price_);
  swap(volume_, other->volume_);
  swap(match_amt_, other->match_amt_);
  swap(new_volume_, other->new_volume_);
  swap(total_position_, other->total_position_);
  swap(position_change_, other->position_change_);
  swap(bp1_, other->bp1_);
  swap(bp2_, other->bp2_);
  swap(bp3_, other->bp3_);
  swap(bp4_, other->bp4_);
  swap(bp5_, other->bp5_);
  swap(ba1_, other->ba1_);
  swap(ba2_, other->ba2_);
  swap(ba3_, other->ba3_);
  swap(ba4_, other->ba4_);
  swap(ba5_, other->ba5_);
  swap(sp1_, other->sp1_);
  swap(sp2_, other->sp2_);
  swap(sp3_, other->sp3_);
  swap(sp4_, other->sp4_);
  swap(sp5_, other->sp5_);
  swap(sa1_, other->sa1_);
  swap(sa2_, other->sa2_);
  swap(sa3_, other->sa3_);
  swap(sa4_, other->sa4_);
  swap(sa5_, other->sa5_);
  swap(presettlement_price_, other->presettlement_price_);
  swap(preclose_, other->preclose_);
  swap(preposition_, other->preposition_);
  swap(open_price_, other->open_price_);
  swap(highest_price_, other->highest_price_);
  swap(lowest_price_, other->lowest_price_);
  swap(close_price_, other->close_price_);
  swap(settlement_price_, other->settlement_price_);
  swap(upperlimit_price_, other->upperlimit_price_);
  swap(lowerlimit_price_, other->lowerlimit_price_);
  swap(average_price_, other->average_price_);
  swap(open_interest_, other->open_interest_);
  swap(bought_volume_, other->bought_volume_);
  swap(sold_volume_, other->sold_volume_);
  swap(market_, other->market_);
  swap(update_millisec_, other->update_millisec_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Future::GetMetadata() const {
  protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Option::InitAsDefaultInstance() {
}
::google::protobuf::internal::ExplicitlyConstructed<::std::string> Option::_i_give_permission_to_break_this_code_default_type_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Option::kTypeFieldNumber;
const int Option::kTradingDayFieldNumber;
const int Option::kStampFieldNumber;
const int Option::kCodeFieldNumber;
const int Option::kTradeCodeFieldNumber;
const int Option::kNameFieldNumber;
const int Option::kMarketFieldNumber;
const int Option::kStartDateFieldNumber;
const int Option::kEndDateFieldNumber;
const int Option::kExpireDateFieldNumber;
const int Option::kExerciseDateFieldNumber;
const int Option::kExercisePriceFieldNumber;
const int Option::kUnderlyingCodeFieldNumber;
const int Option::kUnderlyingTypeFieldNumber;
const int Option::kCpFlagFieldNumber;
const int Option::kOptionTypeFieldNumber;
const int Option::kPreformanceTypeFieldNumber;
const int Option::kPriceLimitTypeFieldNumber;
const int Option::kContractUnitFieldNumber;
const int Option::kExchangeTimeFieldNumber;
const int Option::kStateFieldNumber;
const int Option::kPreOpenInterestFieldNumber;
const int Option::kPreCloseFieldNumber;
const int Option::kPreSettleFieldNumber;
const int Option::kOpenFieldNumber;
const int Option::kHighFieldNumber;
const int Option::kLowFieldNumber;
const int Option::kLatestFieldNumber;
const int Option::kVolumeFieldNumber;
const int Option::kAmountFieldNumber;
const int Option::kOpenInterestFieldNumber;
const int Option::kCloseFieldNumber;
const int Option::kSettleFieldNumber;
const int Option::kHighLimitFieldNumber;
const int Option::kLowLimitFieldNumber;
const int Option::kPreDeltaFieldNumber;
const int Option::kDeltaFieldNumber;
const int Option::kBp1FieldNumber;
const int Option::kBp2FieldNumber;
const int Option::kBp3FieldNumber;
const int Option::kBp4FieldNumber;
const int Option::kBp5FieldNumber;
const int Option::kBa1FieldNumber;
const int Option::kBa2FieldNumber;
const int Option::kBa3FieldNumber;
const int Option::kBa4FieldNumber;
const int Option::kBa5FieldNumber;
const int Option::kSp1FieldNumber;
const int Option::kSp2FieldNumber;
const int Option::kSp3FieldNumber;
const int Option::kSp4FieldNumber;
const int Option::kSp5FieldNumber;
const int Option::kSa1FieldNumber;
const int Option::kSa2FieldNumber;
const int Option::kSa3FieldNumber;
const int Option::kSa4FieldNumber;
const int Option::kSa5FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Option::Option()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fquotation_2eproto::scc_info_Option.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quotation.Option)
}
Option::Option(const Option& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::quotation::Option::_i_give_permission_to_break_this_code_default_type_.get());
  if (from.has_type()) {
    type_.AssignWithDefault(&::quotation::Option::_i_give_permission_to_break_this_code_default_type_.get(), from.type_);
  }
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  trade_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trade_code()) {
    trade_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trade_code_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  underlying_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_underlying_code()) {
    underlying_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.underlying_code_);
  }
  ::memcpy(&trading_day_, &from.trading_day_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&trading_day_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:quotation.Option)
}

void Option::SharedCtor() {
  type_.UnsafeSetDefault(&::quotation::Option::_i_give_permission_to_break_this_code_default_type_.get());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trade_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  underlying_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&trading_day_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&trading_day_)) + sizeof(state_));
}

Option::~Option() {
  // @@protoc_insertion_point(destructor:quotation.Option)
  SharedDtor();
}

void Option::SharedDtor() {
  type_.DestroyNoArena(&::quotation::Option::_i_give_permission_to_break_this_code_default_type_.get());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trade_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  underlying_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Option::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Option::descriptor() {
  ::protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Option& Option::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fquotation_2eproto::scc_info_Option.base);
  return *internal_default_instance();
}


void Option::Clear() {
// @@protoc_insertion_point(message_clear_start:quotation.Option)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      type_.UnsafeMutablePointer()->assign(*&::quotation::Option::_i_give_permission_to_break_this_code_default_type_.get());
    }
    if (cached_has_bits & 0x00000002u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      trade_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      underlying_code_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&trading_day_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&market_) -
        reinterpret_cast<char*>(&trading_day_)) + sizeof(market_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&start_date_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&option_type_) -
        reinterpret_cast<char*>(&start_date_)) + sizeof(option_type_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&preformance_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&open_) -
        reinterpret_cast<char*>(&preformance_type_)) + sizeof(open_));
  }
  if (cached_has_bits & 4278190080u) {
    ::memset(&high_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&settle_) -
        reinterpret_cast<char*>(&high_)) + sizeof(settle_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 255u) {
    ::memset(&high_limit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bp4_) -
        reinterpret_cast<char*>(&high_limit_)) + sizeof(bp4_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&bp5_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sp2_) -
        reinterpret_cast<char*>(&bp5_)) + sizeof(sp2_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&sp3_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sa5_) -
        reinterpret_cast<char*>(&sp3_)) + sizeof(sa5_));
  }
  state_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Option::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quotation.Option)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1 [default = "O"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.Option.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trading_day = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_trading_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trading_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 stamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_stamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string code = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.Option.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string trade_code = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trade_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trade_code().data(), static_cast<int>(this->trade_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.Option.trade_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.Option.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 market = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_market();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &market_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 start_date = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_start_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 end_date = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_end_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 expire_date = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_expire_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expire_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 exercise_date = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_exercise_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exercise_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 exercise_price = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_exercise_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exercise_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string underlying_code = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->underlying_code().data(), static_cast<int>(this->underlying_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.Option.underlying_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 underlying_type = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_underlying_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &underlying_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cp_flag = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_cp_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cp_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 option_type = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_option_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &option_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 preformance_type = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_preformance_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &preformance_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 price_limit_type = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_price_limit_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_limit_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 contract_unit = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_contract_unit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &contract_unit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 exchange_time = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_exchange_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exchange_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 state = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 pre_open_interest = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_pre_open_interest();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pre_open_interest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 pre_close = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_pre_close();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pre_close_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 pre_settle = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_pre_settle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pre_settle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 open = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_open();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 high = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_high();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &high_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 low = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          set_has_low();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &low_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 latest = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          set_has_latest();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &latest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 volume = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          set_has_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 amount = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 open_interest = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_open_interest();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &open_interest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 close = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {
          set_has_close();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &close_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 settle = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 264 & 0xFF */)) {
          set_has_settle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &settle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 high_limit = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 272 & 0xFF */)) {
          set_has_high_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &high_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 low_limit = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {
          set_has_low_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &low_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 pre_delta = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 288 & 0xFF */)) {
          set_has_pre_delta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pre_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 delta = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 296 & 0xFF */)) {
          set_has_delta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bp1 = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 304 & 0xFF */)) {
          set_has_bp1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bp1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bp2 = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 312 & 0xFF */)) {
          set_has_bp2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bp2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bp3 = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {
          set_has_bp3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bp3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bp4 = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 328 & 0xFF */)) {
          set_has_bp4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bp4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bp5 = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 336 & 0xFF */)) {
          set_has_bp5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bp5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ba1 = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 344 & 0xFF */)) {
          set_has_ba1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ba1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ba2 = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 352 & 0xFF */)) {
          set_has_ba2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ba2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ba3 = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 360 & 0xFF */)) {
          set_has_ba3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ba3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ba4 = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 368 & 0xFF */)) {
          set_has_ba4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ba4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ba5 = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 376 & 0xFF */)) {
          set_has_ba5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ba5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sp1 = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 384 & 0xFF */)) {
          set_has_sp1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sp1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sp2 = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 392 & 0xFF */)) {
          set_has_sp2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sp2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sp3 = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 400 & 0xFF */)) {
          set_has_sp3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sp3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sp4 = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 408 & 0xFF */)) {
          set_has_sp4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sp4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sp5 = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 416 & 0xFF */)) {
          set_has_sp5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sp5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sa1 = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 424 & 0xFF */)) {
          set_has_sa1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sa1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sa2 = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 432 & 0xFF */)) {
          set_has_sa2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sa2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sa3 = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 440 & 0xFF */)) {
          set_has_sa3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sa3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sa4 = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 448 & 0xFF */)) {
          set_has_sa4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sa4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sa5 = 57;
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 456 & 0xFF */)) {
          set_has_sa5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sa5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quotation.Option)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quotation.Option)
  return false;
#undef DO_
}

void Option::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quotation.Option)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1 [default = "O"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.Option.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional uint32 trading_day = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->trading_day(), output);
  }

  // required uint32 stamp = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stamp(), output);
  }

  // required string code = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.Option.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->code(), output);
  }

  // optional string trade_code = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trade_code().data(), static_cast<int>(this->trade_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.Option.trade_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->trade_code(), output);
  }

  // optional string name = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.Option.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->name(), output);
  }

  // optional int64 market = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->market(), output);
  }

  // optional uint32 start_date = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->start_date(), output);
  }

  // optional uint32 end_date = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->end_date(), output);
  }

  // optional uint32 expire_date = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->expire_date(), output);
  }

  // optional uint32 exercise_date = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->exercise_date(), output);
  }

  // optional int64 exercise_price = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->exercise_price(), output);
  }

  // optional string underlying_code = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->underlying_code().data(), static_cast<int>(this->underlying_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.Option.underlying_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->underlying_code(), output);
  }

  // optional int32 underlying_type = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->underlying_type(), output);
  }

  // optional int32 cp_flag = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->cp_flag(), output);
  }

  // optional int32 option_type = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->option_type(), output);
  }

  // optional int32 preformance_type = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->preformance_type(), output);
  }

  // optional int32 price_limit_type = 18;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->price_limit_type(), output);
  }

  // optional int64 contract_unit = 19;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->contract_unit(), output);
  }

  // optional uint32 exchange_time = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->exchange_time(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 state = 21;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->state(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int64 pre_open_interest = 22;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->pre_open_interest(), output);
  }

  // optional int64 pre_close = 23;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->pre_close(), output);
  }

  // optional int64 pre_settle = 24;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->pre_settle(), output);
  }

  // optional int64 open = 25;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(25, this->open(), output);
  }

  // optional int64 high = 26;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(26, this->high(), output);
  }

  // optional int64 low = 27;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(27, this->low(), output);
  }

  // optional int64 latest = 28;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(28, this->latest(), output);
  }

  // optional int64 volume = 29;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(29, this->volume(), output);
  }

  // optional int64 amount = 30;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(30, this->amount(), output);
  }

  // optional int64 open_interest = 31;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(31, this->open_interest(), output);
  }

  // optional int64 close = 32;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(32, this->close(), output);
  }

  // optional int64 settle = 33;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(33, this->settle(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int64 high_limit = 34;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(34, this->high_limit(), output);
  }

  // optional int64 low_limit = 35;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(35, this->low_limit(), output);
  }

  // optional int64 pre_delta = 36;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(36, this->pre_delta(), output);
  }

  // optional int64 delta = 37;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(37, this->delta(), output);
  }

  // optional int64 bp1 = 38;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(38, this->bp1(), output);
  }

  // optional int64 bp2 = 39;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(39, this->bp2(), output);
  }

  // optional int64 bp3 = 40;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(40, this->bp3(), output);
  }

  // optional int64 bp4 = 41;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(41, this->bp4(), output);
  }

  // optional int64 bp5 = 42;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(42, this->bp5(), output);
  }

  // optional int64 ba1 = 43;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(43, this->ba1(), output);
  }

  // optional int64 ba2 = 44;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(44, this->ba2(), output);
  }

  // optional int64 ba3 = 45;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(45, this->ba3(), output);
  }

  // optional int64 ba4 = 46;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(46, this->ba4(), output);
  }

  // optional int64 ba5 = 47;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(47, this->ba5(), output);
  }

  // optional int64 sp1 = 48;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(48, this->sp1(), output);
  }

  // optional int64 sp2 = 49;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(49, this->sp2(), output);
  }

  // optional int64 sp3 = 50;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(50, this->sp3(), output);
  }

  // optional int64 sp4 = 51;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(51, this->sp4(), output);
  }

  // optional int64 sp5 = 52;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(52, this->sp5(), output);
  }

  // optional int64 sa1 = 53;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(53, this->sa1(), output);
  }

  // optional int64 sa2 = 54;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(54, this->sa2(), output);
  }

  // optional int64 sa3 = 55;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(55, this->sa3(), output);
  }

  // optional int64 sa4 = 56;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(56, this->sa4(), output);
  }

  // optional int64 sa5 = 57;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(57, this->sa5(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:quotation.Option)
}

::google::protobuf::uint8* Option::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quotation.Option)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1 [default = "O"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.Option.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional uint32 trading_day = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->trading_day(), target);
  }

  // required uint32 stamp = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stamp(), target);
  }

  // required string code = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.Option.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->code(), target);
  }

  // optional string trade_code = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trade_code().data(), static_cast<int>(this->trade_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.Option.trade_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->trade_code(), target);
  }

  // optional string name = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.Option.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  // optional int64 market = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->market(), target);
  }

  // optional uint32 start_date = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->start_date(), target);
  }

  // optional uint32 end_date = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->end_date(), target);
  }

  // optional uint32 expire_date = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->expire_date(), target);
  }

  // optional uint32 exercise_date = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->exercise_date(), target);
  }

  // optional int64 exercise_price = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->exercise_price(), target);
  }

  // optional string underlying_code = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->underlying_code().data(), static_cast<int>(this->underlying_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.Option.underlying_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->underlying_code(), target);
  }

  // optional int32 underlying_type = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->underlying_type(), target);
  }

  // optional int32 cp_flag = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->cp_flag(), target);
  }

  // optional int32 option_type = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->option_type(), target);
  }

  // optional int32 preformance_type = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->preformance_type(), target);
  }

  // optional int32 price_limit_type = 18;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->price_limit_type(), target);
  }

  // optional int64 contract_unit = 19;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->contract_unit(), target);
  }

  // optional uint32 exchange_time = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->exchange_time(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 state = 21;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->state(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int64 pre_open_interest = 22;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->pre_open_interest(), target);
  }

  // optional int64 pre_close = 23;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->pre_close(), target);
  }

  // optional int64 pre_settle = 24;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->pre_settle(), target);
  }

  // optional int64 open = 25;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(25, this->open(), target);
  }

  // optional int64 high = 26;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(26, this->high(), target);
  }

  // optional int64 low = 27;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(27, this->low(), target);
  }

  // optional int64 latest = 28;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(28, this->latest(), target);
  }

  // optional int64 volume = 29;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(29, this->volume(), target);
  }

  // optional int64 amount = 30;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(30, this->amount(), target);
  }

  // optional int64 open_interest = 31;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(31, this->open_interest(), target);
  }

  // optional int64 close = 32;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(32, this->close(), target);
  }

  // optional int64 settle = 33;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(33, this->settle(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int64 high_limit = 34;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(34, this->high_limit(), target);
  }

  // optional int64 low_limit = 35;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(35, this->low_limit(), target);
  }

  // optional int64 pre_delta = 36;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(36, this->pre_delta(), target);
  }

  // optional int64 delta = 37;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(37, this->delta(), target);
  }

  // optional int64 bp1 = 38;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(38, this->bp1(), target);
  }

  // optional int64 bp2 = 39;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(39, this->bp2(), target);
  }

  // optional int64 bp3 = 40;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(40, this->bp3(), target);
  }

  // optional int64 bp4 = 41;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(41, this->bp4(), target);
  }

  // optional int64 bp5 = 42;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(42, this->bp5(), target);
  }

  // optional int64 ba1 = 43;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(43, this->ba1(), target);
  }

  // optional int64 ba2 = 44;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(44, this->ba2(), target);
  }

  // optional int64 ba3 = 45;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(45, this->ba3(), target);
  }

  // optional int64 ba4 = 46;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(46, this->ba4(), target);
  }

  // optional int64 ba5 = 47;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(47, this->ba5(), target);
  }

  // optional int64 sp1 = 48;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(48, this->sp1(), target);
  }

  // optional int64 sp2 = 49;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(49, this->sp2(), target);
  }

  // optional int64 sp3 = 50;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(50, this->sp3(), target);
  }

  // optional int64 sp4 = 51;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(51, this->sp4(), target);
  }

  // optional int64 sp5 = 52;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(52, this->sp5(), target);
  }

  // optional int64 sa1 = 53;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(53, this->sa1(), target);
  }

  // optional int64 sa2 = 54;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(54, this->sa2(), target);
  }

  // optional int64 sa3 = 55;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(55, this->sa3(), target);
  }

  // optional int64 sa4 = 56;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(56, this->sa4(), target);
  }

  // optional int64 sa5 = 57;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(57, this->sa5(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quotation.Option)
  return target;
}

size_t Option::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:quotation.Option)
  size_t total_size = 0;

  if (has_code()) {
    // required string code = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_stamp()) {
    // required uint32 stamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stamp());
  }

  return total_size;
}
size_t Option::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quotation.Option)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000042) ^ 0x00000042) == 0) {  // All required fields are present.
    // required string code = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required uint32 stamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string type = 1 [default = "O"];
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  if (_has_bits_[0 / 32] & 60u) {
    // optional string trade_code = 5;
    if (has_trade_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trade_code());
    }

    // optional string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string underlying_code = 13;
    if (has_underlying_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying_code());
    }

    // optional uint32 trading_day = 2;
    if (has_trading_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trading_day());
    }

  }
  // optional int64 market = 7;
  if (has_market()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->market());
  }

  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 start_date = 8;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_date());
    }

    // optional uint32 end_date = 9;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_date());
    }

    // optional uint32 expire_date = 10;
    if (has_expire_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expire_date());
    }

    // optional uint32 exercise_date = 11;
    if (has_exercise_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exercise_date());
    }

    // optional int64 exercise_price = 12;
    if (has_exercise_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exercise_price());
    }

    // optional int32 underlying_type = 14;
    if (has_underlying_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->underlying_type());
    }

    // optional int32 cp_flag = 15;
    if (has_cp_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cp_flag());
    }

    // optional int32 option_type = 16;
    if (has_option_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->option_type());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional int32 preformance_type = 17;
    if (has_preformance_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->preformance_type());
    }

    // optional int64 contract_unit = 19;
    if (has_contract_unit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->contract_unit());
    }

    // optional int32 price_limit_type = 18;
    if (has_price_limit_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_limit_type());
    }

    // optional uint32 exchange_time = 20;
    if (has_exchange_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exchange_time());
    }

    // optional int64 pre_open_interest = 22;
    if (has_pre_open_interest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pre_open_interest());
    }

    // optional int64 pre_close = 23;
    if (has_pre_close()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pre_close());
    }

    // optional int64 pre_settle = 24;
    if (has_pre_settle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pre_settle());
    }

    // optional int64 open = 25;
    if (has_open()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->open());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional int64 high = 26;
    if (has_high()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->high());
    }

    // optional int64 low = 27;
    if (has_low()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->low());
    }

    // optional int64 latest = 28;
    if (has_latest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->latest());
    }

    // optional int64 volume = 29;
    if (has_volume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->volume());
    }

    // optional int64 amount = 30;
    if (has_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->amount());
    }

    // optional int64 open_interest = 31;
    if (has_open_interest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->open_interest());
    }

    // optional int64 close = 32;
    if (has_close()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->close());
    }

    // optional int64 settle = 33;
    if (has_settle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->settle());
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional int64 high_limit = 34;
    if (has_high_limit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->high_limit());
    }

    // optional int64 low_limit = 35;
    if (has_low_limit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->low_limit());
    }

    // optional int64 pre_delta = 36;
    if (has_pre_delta()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pre_delta());
    }

    // optional int64 delta = 37;
    if (has_delta()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->delta());
    }

    // optional int64 bp1 = 38;
    if (has_bp1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bp1());
    }

    // optional int64 bp2 = 39;
    if (has_bp2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bp2());
    }

    // optional int64 bp3 = 40;
    if (has_bp3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bp3());
    }

    // optional int64 bp4 = 41;
    if (has_bp4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bp4());
    }

  }
  if (_has_bits_[40 / 32] & 65280u) {
    // optional int64 bp5 = 42;
    if (has_bp5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bp5());
    }

    // optional int64 ba1 = 43;
    if (has_ba1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ba1());
    }

    // optional int64 ba2 = 44;
    if (has_ba2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ba2());
    }

    // optional int64 ba3 = 45;
    if (has_ba3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ba3());
    }

    // optional int64 ba4 = 46;
    if (has_ba4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ba4());
    }

    // optional int64 ba5 = 47;
    if (has_ba5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ba5());
    }

    // optional int64 sp1 = 48;
    if (has_sp1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sp1());
    }

    // optional int64 sp2 = 49;
    if (has_sp2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sp2());
    }

  }
  if (_has_bits_[48 / 32] & 16711680u) {
    // optional int64 sp3 = 50;
    if (has_sp3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sp3());
    }

    // optional int64 sp4 = 51;
    if (has_sp4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sp4());
    }

    // optional int64 sp5 = 52;
    if (has_sp5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sp5());
    }

    // optional int64 sa1 = 53;
    if (has_sa1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sa1());
    }

    // optional int64 sa2 = 54;
    if (has_sa2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sa2());
    }

    // optional int64 sa3 = 55;
    if (has_sa3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sa3());
    }

    // optional int64 sa4 = 56;
    if (has_sa4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sa4());
    }

    // optional int64 sa5 = 57;
    if (has_sa5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sa5());
    }

  }
  // optional int32 state = 21;
  if (has_state()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Option::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quotation.Option)
  GOOGLE_DCHECK_NE(&from, this);
  const Option* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Option>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quotation.Option)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quotation.Option)
    MergeFrom(*source);
  }
}

void Option::MergeFrom(const Option& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quotation.Option)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_type();
      type_.AssignWithDefault(&::quotation::Option::_i_give_permission_to_break_this_code_default_type_.get(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_trade_code();
      trade_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trade_code_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_underlying_code();
      underlying_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.underlying_code_);
    }
    if (cached_has_bits & 0x00000020u) {
      trading_day_ = from.trading_day_;
    }
    if (cached_has_bits & 0x00000040u) {
      stamp_ = from.stamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      market_ = from.market_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      start_date_ = from.start_date_;
    }
    if (cached_has_bits & 0x00000200u) {
      end_date_ = from.end_date_;
    }
    if (cached_has_bits & 0x00000400u) {
      expire_date_ = from.expire_date_;
    }
    if (cached_has_bits & 0x00000800u) {
      exercise_date_ = from.exercise_date_;
    }
    if (cached_has_bits & 0x00001000u) {
      exercise_price_ = from.exercise_price_;
    }
    if (cached_has_bits & 0x00002000u) {
      underlying_type_ = from.underlying_type_;
    }
    if (cached_has_bits & 0x00004000u) {
      cp_flag_ = from.cp_flag_;
    }
    if (cached_has_bits & 0x00008000u) {
      option_type_ = from.option_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      preformance_type_ = from.preformance_type_;
    }
    if (cached_has_bits & 0x00020000u) {
      contract_unit_ = from.contract_unit_;
    }
    if (cached_has_bits & 0x00040000u) {
      price_limit_type_ = from.price_limit_type_;
    }
    if (cached_has_bits & 0x00080000u) {
      exchange_time_ = from.exchange_time_;
    }
    if (cached_has_bits & 0x00100000u) {
      pre_open_interest_ = from.pre_open_interest_;
    }
    if (cached_has_bits & 0x00200000u) {
      pre_close_ = from.pre_close_;
    }
    if (cached_has_bits & 0x00400000u) {
      pre_settle_ = from.pre_settle_;
    }
    if (cached_has_bits & 0x00800000u) {
      open_ = from.open_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      high_ = from.high_;
    }
    if (cached_has_bits & 0x02000000u) {
      low_ = from.low_;
    }
    if (cached_has_bits & 0x04000000u) {
      latest_ = from.latest_;
    }
    if (cached_has_bits & 0x08000000u) {
      volume_ = from.volume_;
    }
    if (cached_has_bits & 0x10000000u) {
      amount_ = from.amount_;
    }
    if (cached_has_bits & 0x20000000u) {
      open_interest_ = from.open_interest_;
    }
    if (cached_has_bits & 0x40000000u) {
      close_ = from.close_;
    }
    if (cached_has_bits & 0x80000000u) {
      settle_ = from.settle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      high_limit_ = from.high_limit_;
    }
    if (cached_has_bits & 0x00000002u) {
      low_limit_ = from.low_limit_;
    }
    if (cached_has_bits & 0x00000004u) {
      pre_delta_ = from.pre_delta_;
    }
    if (cached_has_bits & 0x00000008u) {
      delta_ = from.delta_;
    }
    if (cached_has_bits & 0x00000010u) {
      bp1_ = from.bp1_;
    }
    if (cached_has_bits & 0x00000020u) {
      bp2_ = from.bp2_;
    }
    if (cached_has_bits & 0x00000040u) {
      bp3_ = from.bp3_;
    }
    if (cached_has_bits & 0x00000080u) {
      bp4_ = from.bp4_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      bp5_ = from.bp5_;
    }
    if (cached_has_bits & 0x00000200u) {
      ba1_ = from.ba1_;
    }
    if (cached_has_bits & 0x00000400u) {
      ba2_ = from.ba2_;
    }
    if (cached_has_bits & 0x00000800u) {
      ba3_ = from.ba3_;
    }
    if (cached_has_bits & 0x00001000u) {
      ba4_ = from.ba4_;
    }
    if (cached_has_bits & 0x00002000u) {
      ba5_ = from.ba5_;
    }
    if (cached_has_bits & 0x00004000u) {
      sp1_ = from.sp1_;
    }
    if (cached_has_bits & 0x00008000u) {
      sp2_ = from.sp2_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      sp3_ = from.sp3_;
    }
    if (cached_has_bits & 0x00020000u) {
      sp4_ = from.sp4_;
    }
    if (cached_has_bits & 0x00040000u) {
      sp5_ = from.sp5_;
    }
    if (cached_has_bits & 0x00080000u) {
      sa1_ = from.sa1_;
    }
    if (cached_has_bits & 0x00100000u) {
      sa2_ = from.sa2_;
    }
    if (cached_has_bits & 0x00200000u) {
      sa3_ = from.sa3_;
    }
    if (cached_has_bits & 0x00400000u) {
      sa4_ = from.sa4_;
    }
    if (cached_has_bits & 0x00800000u) {
      sa5_ = from.sa5_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    set_state(from.state());
  }
}

void Option::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quotation.Option)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Option::CopyFrom(const Option& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quotation.Option)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Option::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000042) != 0x00000042) return false;
  return true;
}

void Option::Swap(Option* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Option::InternalSwap(Option* other) {
  using std::swap;
  type_.Swap(&other->type_, &::quotation::Option::_i_give_permission_to_break_this_code_default_type_.get(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trade_code_.Swap(&other->trade_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  underlying_code_.Swap(&other->underlying_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trading_day_, other->trading_day_);
  swap(stamp_, other->stamp_);
  swap(market_, other->market_);
  swap(start_date_, other->start_date_);
  swap(end_date_, other->end_date_);
  swap(expire_date_, other->expire_date_);
  swap(exercise_date_, other->exercise_date_);
  swap(exercise_price_, other->exercise_price_);
  swap(underlying_type_, other->underlying_type_);
  swap(cp_flag_, other->cp_flag_);
  swap(option_type_, other->option_type_);
  swap(preformance_type_, other->preformance_type_);
  swap(contract_unit_, other->contract_unit_);
  swap(price_limit_type_, other->price_limit_type_);
  swap(exchange_time_, other->exchange_time_);
  swap(pre_open_interest_, other->pre_open_interest_);
  swap(pre_close_, other->pre_close_);
  swap(pre_settle_, other->pre_settle_);
  swap(open_, other->open_);
  swap(high_, other->high_);
  swap(low_, other->low_);
  swap(latest_, other->latest_);
  swap(volume_, other->volume_);
  swap(amount_, other->amount_);
  swap(open_interest_, other->open_interest_);
  swap(close_, other->close_);
  swap(settle_, other->settle_);
  swap(high_limit_, other->high_limit_);
  swap(low_limit_, other->low_limit_);
  swap(pre_delta_, other->pre_delta_);
  swap(delta_, other->delta_);
  swap(bp1_, other->bp1_);
  swap(bp2_, other->bp2_);
  swap(bp3_, other->bp3_);
  swap(bp4_, other->bp4_);
  swap(bp5_, other->bp5_);
  swap(ba1_, other->ba1_);
  swap(ba2_, other->ba2_);
  swap(ba3_, other->ba3_);
  swap(ba4_, other->ba4_);
  swap(ba5_, other->ba5_);
  swap(sp1_, other->sp1_);
  swap(sp2_, other->sp2_);
  swap(sp3_, other->sp3_);
  swap(sp4_, other->sp4_);
  swap(sp5_, other->sp5_);
  swap(sa1_, other->sa1_);
  swap(sa2_, other->sa2_);
  swap(sa3_, other->sa3_);
  swap(sa4_, other->sa4_);
  swap(sa5_, other->sa5_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Option::GetMetadata() const {
  protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Index::InitAsDefaultInstance() {
}
::google::protobuf::internal::ExplicitlyConstructed<::std::string> Index::_i_give_permission_to_break_this_code_default_type_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Index::kTypeFieldNumber;
const int Index::kTradingDayFieldNumber;
const int Index::kStampFieldNumber;
const int Index::kNewPriceFieldNumber;
const int Index::kAmountFieldNumber;
const int Index::kSumPriceFieldNumber;
const int Index::kNewVolumeFieldNumber;
const int Index::kCodeFieldNumber;
const int Index::kBp1FieldNumber;
const int Index::kSp1FieldNumber;
const int Index::kPrecloseFieldNumber;
const int Index::kAmountofpriceupanddownNewFieldNumber;
const int Index::kAmountofpriceupanddownBp1FieldNumber;
const int Index::kAmountofpriceupanddownSp1FieldNumber;
const int Index::kNameFieldNumber;
const int Index::kMarketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Index::Index()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fquotation_2eproto::scc_info_Index.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quotation.Index)
}
Index::Index(const Index& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::quotation::Index::_i_give_permission_to_break_this_code_default_type_.get());
  if (from.has_type()) {
    type_.AssignWithDefault(&::quotation::Index::_i_give_permission_to_break_this_code_default_type_.get(), from.type_);
  }
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&trading_day_, &from.trading_day_,
    static_cast<size_t>(reinterpret_cast<char*>(&market_) -
    reinterpret_cast<char*>(&trading_day_)) + sizeof(market_));
  // @@protoc_insertion_point(copy_constructor:quotation.Index)
}

void Index::SharedCtor() {
  type_.UnsafeSetDefault(&::quotation::Index::_i_give_permission_to_break_this_code_default_type_.get());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&trading_day_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&market_) -
      reinterpret_cast<char*>(&trading_day_)) + sizeof(market_));
}

Index::~Index() {
  // @@protoc_insertion_point(destructor:quotation.Index)
  SharedDtor();
}

void Index::SharedDtor() {
  type_.DestroyNoArena(&::quotation::Index::_i_give_permission_to_break_this_code_default_type_.get());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Index::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Index::descriptor() {
  ::protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Index& Index::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fquotation_2eproto::scc_info_Index.base);
  return *internal_default_instance();
}


void Index::Clear() {
// @@protoc_insertion_point(message_clear_start:quotation.Index)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      type_.UnsafeMutablePointer()->assign(*&::quotation::Index::_i_give_permission_to_break_this_code_default_type_.get());
    }
    if (cached_has_bits & 0x00000002u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&trading_day_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sum_price_) -
        reinterpret_cast<char*>(&trading_day_)) + sizeof(sum_price_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&new_volume_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&market_) -
        reinterpret_cast<char*>(&new_volume_)) + sizeof(market_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Index::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quotation.Index)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1 [default = "I"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.Index.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trading_day = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_trading_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trading_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 stamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_stamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 new_price = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_new_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &new_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 amount = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sum_price = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_sum_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sum_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 new_volume = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_new_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &new_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string code = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.Index.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bp1 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_bp1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bp1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sp1 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_sp1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sp1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 preclose = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_preclose();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &preclose_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 amountofpriceupanddown_new = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_amountofpriceupanddown_new();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &amountofpriceupanddown_new_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 amountofpriceupanddown_bp1 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_amountofpriceupanddown_bp1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &amountofpriceupanddown_bp1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 amountofpriceupanddown_sp1 = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_amountofpriceupanddown_sp1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &amountofpriceupanddown_sp1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.Index.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 market = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_market();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &market_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quotation.Index)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quotation.Index)
  return false;
#undef DO_
}

void Index::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quotation.Index)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1 [default = "I"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.Index.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional uint32 trading_day = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->trading_day(), output);
  }

  // required uint32 stamp = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stamp(), output);
  }

  // optional int64 new_price = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->new_price(), output);
  }

  // optional int64 amount = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->amount(), output);
  }

  // optional int64 sum_price = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->sum_price(), output);
  }

  // optional int64 new_volume = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->new_volume(), output);
  }

  // required string code = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.Index.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->code(), output);
  }

  // optional int64 bp1 = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->bp1(), output);
  }

  // optional int64 sp1 = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->sp1(), output);
  }

  // optional int64 preclose = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->preclose(), output);
  }

  // optional int64 amountofpriceupanddown_new = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->amountofpriceupanddown_new(), output);
  }

  // optional int64 amountofpriceupanddown_bp1 = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->amountofpriceupanddown_bp1(), output);
  }

  // optional int64 amountofpriceupanddown_sp1 = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->amountofpriceupanddown_sp1(), output);
  }

  // optional string name = 15;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.Index.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->name(), output);
  }

  // optional int64 market = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->market(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:quotation.Index)
}

::google::protobuf::uint8* Index::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quotation.Index)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1 [default = "I"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.Index.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional uint32 trading_day = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->trading_day(), target);
  }

  // required uint32 stamp = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stamp(), target);
  }

  // optional int64 new_price = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->new_price(), target);
  }

  // optional int64 amount = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->amount(), target);
  }

  // optional int64 sum_price = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->sum_price(), target);
  }

  // optional int64 new_volume = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->new_volume(), target);
  }

  // required string code = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.Index.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->code(), target);
  }

  // optional int64 bp1 = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->bp1(), target);
  }

  // optional int64 sp1 = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->sp1(), target);
  }

  // optional int64 preclose = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->preclose(), target);
  }

  // optional int64 amountofpriceupanddown_new = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->amountofpriceupanddown_new(), target);
  }

  // optional int64 amountofpriceupanddown_bp1 = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->amountofpriceupanddown_bp1(), target);
  }

  // optional int64 amountofpriceupanddown_sp1 = 14;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->amountofpriceupanddown_sp1(), target);
  }

  // optional string name = 15;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.Index.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->name(), target);
  }

  // optional int64 market = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->market(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quotation.Index)
  return target;
}

size_t Index::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:quotation.Index)
  size_t total_size = 0;

  if (has_code()) {
    // required string code = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_stamp()) {
    // required uint32 stamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stamp());
  }

  return total_size;
}
size_t Index::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quotation.Index)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000012) ^ 0x00000012) == 0) {  // All required fields are present.
    // required string code = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required uint32 stamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string type = 1 [default = "I"];
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional string name = 15;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 trading_day = 2;
    if (has_trading_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trading_day());
    }

  }
  if (_has_bits_[0 / 32] & 224u) {
    // optional int64 new_price = 4;
    if (has_new_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->new_price());
    }

    // optional int64 amount = 5;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->amount());
    }

    // optional int64 sum_price = 6;
    if (has_sum_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sum_price());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int64 new_volume = 7;
    if (has_new_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->new_volume());
    }

    // optional int64 bp1 = 9;
    if (has_bp1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bp1());
    }

    // optional int64 sp1 = 10;
    if (has_sp1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sp1());
    }

    // optional int64 preclose = 11;
    if (has_preclose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->preclose());
    }

    // optional int64 amountofpriceupanddown_new = 12;
    if (has_amountofpriceupanddown_new()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->amountofpriceupanddown_new());
    }

    // optional int64 amountofpriceupanddown_bp1 = 13;
    if (has_amountofpriceupanddown_bp1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->amountofpriceupanddown_bp1());
    }

    // optional int64 amountofpriceupanddown_sp1 = 14;
    if (has_amountofpriceupanddown_sp1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->amountofpriceupanddown_sp1());
    }

    // optional int64 market = 16;
    if (has_market()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->market());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Index::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quotation.Index)
  GOOGLE_DCHECK_NE(&from, this);
  const Index* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Index>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quotation.Index)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quotation.Index)
    MergeFrom(*source);
  }
}

void Index::MergeFrom(const Index& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quotation.Index)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_type();
      type_.AssignWithDefault(&::quotation::Index::_i_give_permission_to_break_this_code_default_type_.get(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000008u) {
      trading_day_ = from.trading_day_;
    }
    if (cached_has_bits & 0x00000010u) {
      stamp_ = from.stamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      new_price_ = from.new_price_;
    }
    if (cached_has_bits & 0x00000040u) {
      amount_ = from.amount_;
    }
    if (cached_has_bits & 0x00000080u) {
      sum_price_ = from.sum_price_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      new_volume_ = from.new_volume_;
    }
    if (cached_has_bits & 0x00000200u) {
      bp1_ = from.bp1_;
    }
    if (cached_has_bits & 0x00000400u) {
      sp1_ = from.sp1_;
    }
    if (cached_has_bits & 0x00000800u) {
      preclose_ = from.preclose_;
    }
    if (cached_has_bits & 0x00001000u) {
      amountofpriceupanddown_new_ = from.amountofpriceupanddown_new_;
    }
    if (cached_has_bits & 0x00002000u) {
      amountofpriceupanddown_bp1_ = from.amountofpriceupanddown_bp1_;
    }
    if (cached_has_bits & 0x00004000u) {
      amountofpriceupanddown_sp1_ = from.amountofpriceupanddown_sp1_;
    }
    if (cached_has_bits & 0x00008000u) {
      market_ = from.market_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Index::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quotation.Index)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Index::CopyFrom(const Index& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quotation.Index)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Index::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000012) != 0x00000012) return false;
  return true;
}

void Index::Swap(Index* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Index::InternalSwap(Index* other) {
  using std::swap;
  type_.Swap(&other->type_, &::quotation::Index::_i_give_permission_to_break_this_code_default_type_.get(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trading_day_, other->trading_day_);
  swap(stamp_, other->stamp_);
  swap(new_price_, other->new_price_);
  swap(amount_, other->amount_);
  swap(sum_price_, other->sum_price_);
  swap(new_volume_, other->new_volume_);
  swap(bp1_, other->bp1_);
  swap(sp1_, other->sp1_);
  swap(preclose_, other->preclose_);
  swap(amountofpriceupanddown_new_, other->amountofpriceupanddown_new_);
  swap(amountofpriceupanddown_bp1_, other->amountofpriceupanddown_bp1_);
  swap(amountofpriceupanddown_sp1_, other->amountofpriceupanddown_sp1_);
  swap(market_, other->market_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Index::GetMetadata() const {
  protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VIndex_StockInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VIndex_StockInfo::kCodeFieldNumber;
const int VIndex_StockInfo::kNameFieldNumber;
const int VIndex_StockInfo::kVolumeFieldNumber;
const int VIndex_StockInfo::kAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VIndex_StockInfo::VIndex_StockInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fquotation_2eproto::scc_info_VIndex_StockInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quotation.VIndex.StockInfo)
}
VIndex_StockInfo::VIndex_StockInfo(const VIndex_StockInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&volume_, &from.volume_,
    static_cast<size_t>(reinterpret_cast<char*>(&amount_) -
    reinterpret_cast<char*>(&volume_)) + sizeof(amount_));
  // @@protoc_insertion_point(copy_constructor:quotation.VIndex.StockInfo)
}

void VIndex_StockInfo::SharedCtor() {
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&volume_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) -
      reinterpret_cast<char*>(&volume_)) + sizeof(amount_));
}

VIndex_StockInfo::~VIndex_StockInfo() {
  // @@protoc_insertion_point(destructor:quotation.VIndex.StockInfo)
  SharedDtor();
}

void VIndex_StockInfo::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VIndex_StockInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VIndex_StockInfo::descriptor() {
  ::protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VIndex_StockInfo& VIndex_StockInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fquotation_2eproto::scc_info_VIndex_StockInfo.base);
  return *internal_default_instance();
}


void VIndex_StockInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:quotation.VIndex.StockInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&volume_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&amount_) -
        reinterpret_cast<char*>(&volume_)) + sizeof(amount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VIndex_StockInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quotation.VIndex.StockInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.VIndex.StockInfo.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.VIndex.StockInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 volume = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double amount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quotation.VIndex.StockInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quotation.VIndex.StockInfo)
  return false;
#undef DO_
}

void VIndex_StockInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quotation.VIndex.StockInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.VIndex.StockInfo.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->code(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.VIndex.StockInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int64 volume = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->volume(), output);
  }

  // optional double amount = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->amount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:quotation.VIndex.StockInfo)
}

::google::protobuf::uint8* VIndex_StockInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quotation.VIndex.StockInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.VIndex.StockInfo.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.VIndex.StockInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int64 volume = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->volume(), target);
  }

  // optional double amount = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->amount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quotation.VIndex.StockInfo)
  return target;
}

size_t VIndex_StockInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quotation.VIndex.StockInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 volume = 3;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->volume());
    }

    // optional double amount = 4;
    if (has_amount()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VIndex_StockInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quotation.VIndex.StockInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VIndex_StockInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VIndex_StockInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quotation.VIndex.StockInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quotation.VIndex.StockInfo)
    MergeFrom(*source);
  }
}

void VIndex_StockInfo::MergeFrom(const VIndex_StockInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quotation.VIndex.StockInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      volume_ = from.volume_;
    }
    if (cached_has_bits & 0x00000008u) {
      amount_ = from.amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VIndex_StockInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quotation.VIndex.StockInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VIndex_StockInfo::CopyFrom(const VIndex_StockInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quotation.VIndex.StockInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VIndex_StockInfo::IsInitialized() const {
  return true;
}

void VIndex_StockInfo::Swap(VIndex_StockInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VIndex_StockInfo::InternalSwap(VIndex_StockInfo* other) {
  using std::swap;
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(volume_, other->volume_);
  swap(amount_, other->amount_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VIndex_StockInfo::GetMetadata() const {
  protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VIndex::InitAsDefaultInstance() {
}
::google::protobuf::internal::ExplicitlyConstructed<::std::string> VIndex::_i_give_permission_to_break_this_code_default_type_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VIndex::kTypeFieldNumber;
const int VIndex::kTradingDayFieldNumber;
const int VIndex::kStampFieldNumber;
const int VIndex::kNewPriceFieldNumber;
const int VIndex::kCodeFieldNumber;
const int VIndex::kBp1FieldNumber;
const int VIndex::kSp1FieldNumber;
const int VIndex::kLimitUpAmountFieldNumber;
const int VIndex::kLimitDownAmountFieldNumber;
const int VIndex::kNonMustSuspensionAmountFieldNumber;
const int VIndex::kMustNonSuspensionAmountFieldNumber;
const int VIndex::kLimitUpStocksFieldNumber;
const int VIndex::kLimitDownStocksFieldNumber;
const int VIndex::kNonMustSuspensionStocksFieldNumber;
const int VIndex::kMustNonSuspensionStocksFieldNumber;
const int VIndex::kEtfBp1FieldNumber;
const int VIndex::kEtfSp1FieldNumber;
const int VIndex::kAvg1FieldNumber;
const int VIndex::kLimitUpRateFieldNumber;
const int VIndex::kLimitDownRateFieldNumber;
const int VIndex::kNonMustSuspensionRateFieldNumber;
const int VIndex::kMustNonSuspensionRateFieldNumber;
const int VIndex::kMustNonSuspensionAmendmentValueFieldNumber;
const int VIndex::kMustNonSuspensionAmendmentRateFieldNumber;
const int VIndex::kCreateStockAmendmentValueFieldNumber;
const int VIndex::kCreateStockAmendmentRateFieldNumber;
const int VIndex::kCreateAmendmentValueFieldNumber;
const int VIndex::kCreateAmendmentRateFieldNumber;
const int VIndex::kRedeemStockAmendmentValueFieldNumber;
const int VIndex::kRedeemStockAmendmentRateFieldNumber;
const int VIndex::kRedeemAmendmentValueFieldNumber;
const int VIndex::kRedeemAmendmentRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VIndex::VIndex()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fquotation_2eproto::scc_info_VIndex.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quotation.VIndex)
}
VIndex::VIndex(const VIndex& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      limit_up_stocks_(from.limit_up_stocks_),
      limit_down_stocks_(from.limit_down_stocks_),
      non_must_suspension_stocks_(from.non_must_suspension_stocks_),
      must_non_suspension_stocks_(from.must_non_suspension_stocks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::quotation::VIndex::_i_give_permission_to_break_this_code_default_type_.get());
  if (from.has_type()) {
    type_.AssignWithDefault(&::quotation::VIndex::_i_give_permission_to_break_this_code_default_type_.get(), from.type_);
  }
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  ::memcpy(&trading_day_, &from.trading_day_,
    static_cast<size_t>(reinterpret_cast<char*>(&redeem_amendment_rate_) -
    reinterpret_cast<char*>(&trading_day_)) + sizeof(redeem_amendment_rate_));
  // @@protoc_insertion_point(copy_constructor:quotation.VIndex)
}

void VIndex::SharedCtor() {
  type_.UnsafeSetDefault(&::quotation::VIndex::_i_give_permission_to_break_this_code_default_type_.get());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&trading_day_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&redeem_amendment_rate_) -
      reinterpret_cast<char*>(&trading_day_)) + sizeof(redeem_amendment_rate_));
}

VIndex::~VIndex() {
  // @@protoc_insertion_point(destructor:quotation.VIndex)
  SharedDtor();
}

void VIndex::SharedDtor() {
  type_.DestroyNoArena(&::quotation::VIndex::_i_give_permission_to_break_this_code_default_type_.get());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VIndex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VIndex::descriptor() {
  ::protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VIndex& VIndex::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fquotation_2eproto::scc_info_VIndex.base);
  return *internal_default_instance();
}


void VIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:quotation.VIndex)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  limit_up_stocks_.Clear();
  limit_down_stocks_.Clear();
  non_must_suspension_stocks_.Clear();
  must_non_suspension_stocks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      type_.UnsafeMutablePointer()->assign(*&::quotation::VIndex::_i_give_permission_to_break_this_code_default_type_.get());
    }
    if (cached_has_bits & 0x00000002u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&trading_day_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&limit_up_amount_) -
        reinterpret_cast<char*>(&trading_day_)) + sizeof(limit_up_amount_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&limit_down_amount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&limit_down_rate_) -
        reinterpret_cast<char*>(&limit_down_amount_)) + sizeof(limit_down_rate_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&non_must_suspension_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&create_amendment_rate_) -
        reinterpret_cast<char*>(&non_must_suspension_rate_)) + sizeof(create_amendment_rate_));
  }
  if (cached_has_bits & 251658240u) {
    ::memset(&redeem_stock_amendment_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&redeem_amendment_rate_) -
        reinterpret_cast<char*>(&redeem_stock_amendment_value_)) + sizeof(redeem_amendment_rate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quotation.VIndex)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1 [default = "V"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.VIndex.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trading_day = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_trading_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trading_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 stamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_stamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double new_price = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_new_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &new_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string code = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.VIndex.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double bp1 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_bp1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bp1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double sp1 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_sp1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sp1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double limit_up_amount = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_limit_up_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &limit_up_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double limit_down_amount = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_limit_down_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &limit_down_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double non_must_suspension_amount = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_non_must_suspension_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &non_must_suspension_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double must_non_suspension_amount = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_must_non_suspension_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &must_non_suspension_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .quotation.VIndex.StockInfo limit_up_stocks = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_limit_up_stocks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .quotation.VIndex.StockInfo limit_down_stocks = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_limit_down_stocks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .quotation.VIndex.StockInfo non_must_suspension_stocks = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_non_must_suspension_stocks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .quotation.VIndex.StockInfo must_non_suspension_stocks = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_must_non_suspension_stocks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double etf_bp1 = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {
          set_has_etf_bp1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &etf_bp1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double etf_sp1 = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {
          set_has_etf_sp1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &etf_sp1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double avg1 = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {
          set_has_avg1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &avg1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double limit_up_rate = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 153 & 0xFF */)) {
          set_has_limit_up_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &limit_up_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double limit_down_rate = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u /* 161 & 0xFF */)) {
          set_has_limit_down_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &limit_down_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double non_must_suspension_rate = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {
          set_has_non_must_suspension_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &non_must_suspension_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double must_non_suspension_rate = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u /* 177 & 0xFF */)) {
          set_has_must_non_suspension_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &must_non_suspension_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double must_non_suspension_amendment_value = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u /* 185 & 0xFF */)) {
          set_has_must_non_suspension_amendment_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &must_non_suspension_amendment_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double must_non_suspension_amendment_rate = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u /* 193 & 0xFF */)) {
          set_has_must_non_suspension_amendment_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &must_non_suspension_amendment_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double create_stock_amendment_value = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(201u /* 201 & 0xFF */)) {
          set_has_create_stock_amendment_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &create_stock_amendment_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double create_stock_amendment_rate = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(209u /* 209 & 0xFF */)) {
          set_has_create_stock_amendment_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &create_stock_amendment_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double create_amendment_value = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(217u /* 217 & 0xFF */)) {
          set_has_create_amendment_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &create_amendment_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double create_amendment_rate = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(225u /* 225 & 0xFF */)) {
          set_has_create_amendment_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &create_amendment_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double redeem_stock_amendment_value = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(233u /* 233 & 0xFF */)) {
          set_has_redeem_stock_amendment_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &redeem_stock_amendment_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double redeem_stock_amendment_rate = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(241u /* 241 & 0xFF */)) {
          set_has_redeem_stock_amendment_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &redeem_stock_amendment_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double redeem_amendment_value = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(249u /* 249 & 0xFF */)) {
          set_has_redeem_amendment_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &redeem_amendment_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double redeem_amendment_rate = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1u /* 257 & 0xFF */)) {
          set_has_redeem_amendment_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &redeem_amendment_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quotation.VIndex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quotation.VIndex)
  return false;
#undef DO_
}

void VIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quotation.VIndex)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1 [default = "V"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.VIndex.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional uint32 trading_day = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->trading_day(), output);
  }

  // required uint32 stamp = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stamp(), output);
  }

  // required double new_price = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->new_price(), output);
  }

  // required string code = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.VIndex.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->code(), output);
  }

  // optional double bp1 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->bp1(), output);
  }

  // optional double sp1 = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->sp1(), output);
  }

  // optional double limit_up_amount = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->limit_up_amount(), output);
  }

  // optional double limit_down_amount = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->limit_down_amount(), output);
  }

  // optional double non_must_suspension_amount = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->non_must_suspension_amount(), output);
  }

  // optional double must_non_suspension_amount = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->must_non_suspension_amount(), output);
  }

  // repeated .quotation.VIndex.StockInfo limit_up_stocks = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->limit_up_stocks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->limit_up_stocks(static_cast<int>(i)),
      output);
  }

  // repeated .quotation.VIndex.StockInfo limit_down_stocks = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->limit_down_stocks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13,
      this->limit_down_stocks(static_cast<int>(i)),
      output);
  }

  // repeated .quotation.VIndex.StockInfo non_must_suspension_stocks = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->non_must_suspension_stocks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14,
      this->non_must_suspension_stocks(static_cast<int>(i)),
      output);
  }

  // repeated .quotation.VIndex.StockInfo must_non_suspension_stocks = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->must_non_suspension_stocks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15,
      this->must_non_suspension_stocks(static_cast<int>(i)),
      output);
  }

  // optional double etf_bp1 = 16;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->etf_bp1(), output);
  }

  // optional double etf_sp1 = 17;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->etf_sp1(), output);
  }

  // optional double avg1 = 18;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->avg1(), output);
  }

  // optional double limit_up_rate = 19;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->limit_up_rate(), output);
  }

  // optional double limit_down_rate = 20;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->limit_down_rate(), output);
  }

  // optional double non_must_suspension_rate = 21;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->non_must_suspension_rate(), output);
  }

  // optional double must_non_suspension_rate = 22;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->must_non_suspension_rate(), output);
  }

  // optional double must_non_suspension_amendment_value = 23;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->must_non_suspension_amendment_value(), output);
  }

  // optional double must_non_suspension_amendment_rate = 24;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->must_non_suspension_amendment_rate(), output);
  }

  // optional double create_stock_amendment_value = 25;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->create_stock_amendment_value(), output);
  }

  // optional double create_stock_amendment_rate = 26;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->create_stock_amendment_rate(), output);
  }

  // optional double create_amendment_value = 27;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->create_amendment_value(), output);
  }

  // optional double create_amendment_rate = 28;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->create_amendment_rate(), output);
  }

  // optional double redeem_stock_amendment_value = 29;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->redeem_stock_amendment_value(), output);
  }

  // optional double redeem_stock_amendment_rate = 30;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->redeem_stock_amendment_rate(), output);
  }

  // optional double redeem_amendment_value = 31;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->redeem_amendment_value(), output);
  }

  // optional double redeem_amendment_rate = 32;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->redeem_amendment_rate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:quotation.VIndex)
}

::google::protobuf::uint8* VIndex::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quotation.VIndex)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1 [default = "V"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.VIndex.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional uint32 trading_day = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->trading_day(), target);
  }

  // required uint32 stamp = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stamp(), target);
  }

  // required double new_price = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->new_price(), target);
  }

  // required string code = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.VIndex.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->code(), target);
  }

  // optional double bp1 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->bp1(), target);
  }

  // optional double sp1 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->sp1(), target);
  }

  // optional double limit_up_amount = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->limit_up_amount(), target);
  }

  // optional double limit_down_amount = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->limit_down_amount(), target);
  }

  // optional double non_must_suspension_amount = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->non_must_suspension_amount(), target);
  }

  // optional double must_non_suspension_amount = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->must_non_suspension_amount(), target);
  }

  // repeated .quotation.VIndex.StockInfo limit_up_stocks = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->limit_up_stocks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->limit_up_stocks(static_cast<int>(i)), deterministic, target);
  }

  // repeated .quotation.VIndex.StockInfo limit_down_stocks = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->limit_down_stocks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->limit_down_stocks(static_cast<int>(i)), deterministic, target);
  }

  // repeated .quotation.VIndex.StockInfo non_must_suspension_stocks = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->non_must_suspension_stocks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->non_must_suspension_stocks(static_cast<int>(i)), deterministic, target);
  }

  // repeated .quotation.VIndex.StockInfo must_non_suspension_stocks = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->must_non_suspension_stocks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->must_non_suspension_stocks(static_cast<int>(i)), deterministic, target);
  }

  // optional double etf_bp1 = 16;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->etf_bp1(), target);
  }

  // optional double etf_sp1 = 17;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->etf_sp1(), target);
  }

  // optional double avg1 = 18;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->avg1(), target);
  }

  // optional double limit_up_rate = 19;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->limit_up_rate(), target);
  }

  // optional double limit_down_rate = 20;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->limit_down_rate(), target);
  }

  // optional double non_must_suspension_rate = 21;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->non_must_suspension_rate(), target);
  }

  // optional double must_non_suspension_rate = 22;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->must_non_suspension_rate(), target);
  }

  // optional double must_non_suspension_amendment_value = 23;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->must_non_suspension_amendment_value(), target);
  }

  // optional double must_non_suspension_amendment_rate = 24;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->must_non_suspension_amendment_rate(), target);
  }

  // optional double create_stock_amendment_value = 25;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->create_stock_amendment_value(), target);
  }

  // optional double create_stock_amendment_rate = 26;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->create_stock_amendment_rate(), target);
  }

  // optional double create_amendment_value = 27;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->create_amendment_value(), target);
  }

  // optional double create_amendment_rate = 28;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->create_amendment_rate(), target);
  }

  // optional double redeem_stock_amendment_value = 29;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->redeem_stock_amendment_value(), target);
  }

  // optional double redeem_stock_amendment_rate = 30;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->redeem_stock_amendment_rate(), target);
  }

  // optional double redeem_amendment_value = 31;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->redeem_amendment_value(), target);
  }

  // optional double redeem_amendment_rate = 32;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->redeem_amendment_rate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quotation.VIndex)
  return target;
}

size_t VIndex::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:quotation.VIndex)
  size_t total_size = 0;

  if (has_code()) {
    // required string code = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_stamp()) {
    // required uint32 stamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stamp());
  }

  if (has_new_price()) {
    // required double new_price = 4;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t VIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quotation.VIndex)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001a) ^ 0x0000001a) == 0) {  // All required fields are present.
    // required string code = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required uint32 stamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stamp());

    // required double new_price = 4;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .quotation.VIndex.StockInfo limit_up_stocks = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->limit_up_stocks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->limit_up_stocks(static_cast<int>(i)));
    }
  }

  // repeated .quotation.VIndex.StockInfo limit_down_stocks = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->limit_down_stocks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->limit_down_stocks(static_cast<int>(i)));
    }
  }

  // repeated .quotation.VIndex.StockInfo non_must_suspension_stocks = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->non_must_suspension_stocks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->non_must_suspension_stocks(static_cast<int>(i)));
    }
  }

  // repeated .quotation.VIndex.StockInfo must_non_suspension_stocks = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->must_non_suspension_stocks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->must_non_suspension_stocks(static_cast<int>(i)));
    }
  }

  // optional string type = 1 [default = "V"];
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // optional uint32 trading_day = 2;
  if (has_trading_day()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->trading_day());
  }

  if (_has_bits_[0 / 32] & 224u) {
    // optional double bp1 = 6;
    if (has_bp1()) {
      total_size += 1 + 8;
    }

    // optional double sp1 = 7;
    if (has_sp1()) {
      total_size += 1 + 8;
    }

    // optional double limit_up_amount = 8;
    if (has_limit_up_amount()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double limit_down_amount = 9;
    if (has_limit_down_amount()) {
      total_size += 1 + 8;
    }

    // optional double non_must_suspension_amount = 10;
    if (has_non_must_suspension_amount()) {
      total_size += 1 + 8;
    }

    // optional double must_non_suspension_amount = 11;
    if (has_must_non_suspension_amount()) {
      total_size += 1 + 8;
    }

    // optional double etf_bp1 = 16;
    if (has_etf_bp1()) {
      total_size += 2 + 8;
    }

    // optional double etf_sp1 = 17;
    if (has_etf_sp1()) {
      total_size += 2 + 8;
    }

    // optional double avg1 = 18;
    if (has_avg1()) {
      total_size += 2 + 8;
    }

    // optional double limit_up_rate = 19;
    if (has_limit_up_rate()) {
      total_size += 2 + 8;
    }

    // optional double limit_down_rate = 20;
    if (has_limit_down_rate()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional double non_must_suspension_rate = 21;
    if (has_non_must_suspension_rate()) {
      total_size += 2 + 8;
    }

    // optional double must_non_suspension_rate = 22;
    if (has_must_non_suspension_rate()) {
      total_size += 2 + 8;
    }

    // optional double must_non_suspension_amendment_value = 23;
    if (has_must_non_suspension_amendment_value()) {
      total_size += 2 + 8;
    }

    // optional double must_non_suspension_amendment_rate = 24;
    if (has_must_non_suspension_amendment_rate()) {
      total_size += 2 + 8;
    }

    // optional double create_stock_amendment_value = 25;
    if (has_create_stock_amendment_value()) {
      total_size += 2 + 8;
    }

    // optional double create_stock_amendment_rate = 26;
    if (has_create_stock_amendment_rate()) {
      total_size += 2 + 8;
    }

    // optional double create_amendment_value = 27;
    if (has_create_amendment_value()) {
      total_size += 2 + 8;
    }

    // optional double create_amendment_rate = 28;
    if (has_create_amendment_rate()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & 251658240u) {
    // optional double redeem_stock_amendment_value = 29;
    if (has_redeem_stock_amendment_value()) {
      total_size += 2 + 8;
    }

    // optional double redeem_stock_amendment_rate = 30;
    if (has_redeem_stock_amendment_rate()) {
      total_size += 2 + 8;
    }

    // optional double redeem_amendment_value = 31;
    if (has_redeem_amendment_value()) {
      total_size += 2 + 8;
    }

    // optional double redeem_amendment_rate = 32;
    if (has_redeem_amendment_rate()) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VIndex::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quotation.VIndex)
  GOOGLE_DCHECK_NE(&from, this);
  const VIndex* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VIndex>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quotation.VIndex)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quotation.VIndex)
    MergeFrom(*source);
  }
}

void VIndex::MergeFrom(const VIndex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quotation.VIndex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  limit_up_stocks_.MergeFrom(from.limit_up_stocks_);
  limit_down_stocks_.MergeFrom(from.limit_down_stocks_);
  non_must_suspension_stocks_.MergeFrom(from.non_must_suspension_stocks_);
  must_non_suspension_stocks_.MergeFrom(from.must_non_suspension_stocks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_type();
      type_.AssignWithDefault(&::quotation::VIndex::_i_give_permission_to_break_this_code_default_type_.get(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000004u) {
      trading_day_ = from.trading_day_;
    }
    if (cached_has_bits & 0x00000008u) {
      stamp_ = from.stamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      new_price_ = from.new_price_;
    }
    if (cached_has_bits & 0x00000020u) {
      bp1_ = from.bp1_;
    }
    if (cached_has_bits & 0x00000040u) {
      sp1_ = from.sp1_;
    }
    if (cached_has_bits & 0x00000080u) {
      limit_up_amount_ = from.limit_up_amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      limit_down_amount_ = from.limit_down_amount_;
    }
    if (cached_has_bits & 0x00000200u) {
      non_must_suspension_amount_ = from.non_must_suspension_amount_;
    }
    if (cached_has_bits & 0x00000400u) {
      must_non_suspension_amount_ = from.must_non_suspension_amount_;
    }
    if (cached_has_bits & 0x00000800u) {
      etf_bp1_ = from.etf_bp1_;
    }
    if (cached_has_bits & 0x00001000u) {
      etf_sp1_ = from.etf_sp1_;
    }
    if (cached_has_bits & 0x00002000u) {
      avg1_ = from.avg1_;
    }
    if (cached_has_bits & 0x00004000u) {
      limit_up_rate_ = from.limit_up_rate_;
    }
    if (cached_has_bits & 0x00008000u) {
      limit_down_rate_ = from.limit_down_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      non_must_suspension_rate_ = from.non_must_suspension_rate_;
    }
    if (cached_has_bits & 0x00020000u) {
      must_non_suspension_rate_ = from.must_non_suspension_rate_;
    }
    if (cached_has_bits & 0x00040000u) {
      must_non_suspension_amendment_value_ = from.must_non_suspension_amendment_value_;
    }
    if (cached_has_bits & 0x00080000u) {
      must_non_suspension_amendment_rate_ = from.must_non_suspension_amendment_rate_;
    }
    if (cached_has_bits & 0x00100000u) {
      create_stock_amendment_value_ = from.create_stock_amendment_value_;
    }
    if (cached_has_bits & 0x00200000u) {
      create_stock_amendment_rate_ = from.create_stock_amendment_rate_;
    }
    if (cached_has_bits & 0x00400000u) {
      create_amendment_value_ = from.create_amendment_value_;
    }
    if (cached_has_bits & 0x00800000u) {
      create_amendment_rate_ = from.create_amendment_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 251658240u) {
    if (cached_has_bits & 0x01000000u) {
      redeem_stock_amendment_value_ = from.redeem_stock_amendment_value_;
    }
    if (cached_has_bits & 0x02000000u) {
      redeem_stock_amendment_rate_ = from.redeem_stock_amendment_rate_;
    }
    if (cached_has_bits & 0x04000000u) {
      redeem_amendment_value_ = from.redeem_amendment_value_;
    }
    if (cached_has_bits & 0x08000000u) {
      redeem_amendment_rate_ = from.redeem_amendment_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VIndex::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quotation.VIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VIndex::CopyFrom(const VIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quotation.VIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VIndex::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001a) != 0x0000001a) return false;
  return true;
}

void VIndex::Swap(VIndex* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VIndex::InternalSwap(VIndex* other) {
  using std::swap;
  CastToBase(&limit_up_stocks_)->InternalSwap(CastToBase(&other->limit_up_stocks_));
  CastToBase(&limit_down_stocks_)->InternalSwap(CastToBase(&other->limit_down_stocks_));
  CastToBase(&non_must_suspension_stocks_)->InternalSwap(CastToBase(&other->non_must_suspension_stocks_));
  CastToBase(&must_non_suspension_stocks_)->InternalSwap(CastToBase(&other->must_non_suspension_stocks_));
  type_.Swap(&other->type_, &::quotation::VIndex::_i_give_permission_to_break_this_code_default_type_.get(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trading_day_, other->trading_day_);
  swap(stamp_, other->stamp_);
  swap(new_price_, other->new_price_);
  swap(bp1_, other->bp1_);
  swap(sp1_, other->sp1_);
  swap(limit_up_amount_, other->limit_up_amount_);
  swap(limit_down_amount_, other->limit_down_amount_);
  swap(non_must_suspension_amount_, other->non_must_suspension_amount_);
  swap(must_non_suspension_amount_, other->must_non_suspension_amount_);
  swap(etf_bp1_, other->etf_bp1_);
  swap(etf_sp1_, other->etf_sp1_);
  swap(avg1_, other->avg1_);
  swap(limit_up_rate_, other->limit_up_rate_);
  swap(limit_down_rate_, other->limit_down_rate_);
  swap(non_must_suspension_rate_, other->non_must_suspension_rate_);
  swap(must_non_suspension_rate_, other->must_non_suspension_rate_);
  swap(must_non_suspension_amendment_value_, other->must_non_suspension_amendment_value_);
  swap(must_non_suspension_amendment_rate_, other->must_non_suspension_amendment_rate_);
  swap(create_stock_amendment_value_, other->create_stock_amendment_value_);
  swap(create_stock_amendment_rate_, other->create_stock_amendment_rate_);
  swap(create_amendment_value_, other->create_amendment_value_);
  swap(create_amendment_rate_, other->create_amendment_rate_);
  swap(redeem_stock_amendment_value_, other->redeem_stock_amendment_value_);
  swap(redeem_stock_amendment_rate_, other->redeem_stock_amendment_rate_);
  swap(redeem_amendment_value_, other->redeem_amendment_value_);
  swap(redeem_amendment_rate_, other->redeem_amendment_rate_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VIndex::GetMetadata() const {
  protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GradedFundIopv::InitAsDefaultInstance() {
}
::google::protobuf::internal::ExplicitlyConstructed<::std::string> GradedFundIopv::_i_give_permission_to_break_this_code_default_type_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GradedFundIopv::kTypeFieldNumber;
const int GradedFundIopv::kTradingDayFieldNumber;
const int GradedFundIopv::kStampFieldNumber;
const int GradedFundIopv::kFofCodeFieldNumber;
const int GradedFundIopv::kFofNameFieldNumber;
const int GradedFundIopv::kFofPreNavFieldNumber;
const int GradedFundIopv::kACodeFieldNumber;
const int GradedFundIopv::kANameFieldNumber;
const int GradedFundIopv::kABp1FieldNumber;
const int GradedFundIopv::kASp1FieldNumber;
const int GradedFundIopv::kAQuoteTimeFieldNumber;
const int GradedFundIopv::kBCodeFieldNumber;
const int GradedFundIopv::kBNameFieldNumber;
const int GradedFundIopv::kBBp1FieldNumber;
const int GradedFundIopv::kBSp1FieldNumber;
const int GradedFundIopv::kBQuoteTimeFieldNumber;
const int GradedFundIopv::kUnderlyingCodeFieldNumber;
const int GradedFundIopv::kUnderlyingLatestFieldNumber;
const int GradedFundIopv::kUnderlyingPreCloseFieldNumber;
const int GradedFundIopv::kUnderlyingQuoteTimeFieldNumber;
const int GradedFundIopv::kHs300LatestFieldNumber;
const int GradedFundIopv::kHs300PreCloseFieldNumber;
const int GradedFundIopv::kHs300QuoteTimeFieldNumber;
const int GradedFundIopv::kRatioAFieldNumber;
const int GradedFundIopv::kRatioBFieldNumber;
const int GradedFundIopv::kPositionRateFieldNumber;
const int GradedFundIopv::kDiscountFeeRateFieldNumber;
const int GradedFundIopv::kPremiumFeeRateFieldNumber;
const int GradedFundIopv::kUnderlyingAmplitudeFieldNumber;
const int GradedFundIopv::kHs300AmplitudeFieldNumber;
const int GradedFundIopv::kFofStrengthFieldNumber;
const int GradedFundIopv::kFofIopvFieldNumber;
const int GradedFundIopv::kBp1IopvFieldNumber;
const int GradedFundIopv::kSp1IopvFieldNumber;
const int GradedFundIopv::kBp1IopvStateFieldNumber;
const int GradedFundIopv::kSp1IopvStateFieldNumber;
const int GradedFundIopv::kDiscountBp1FieldNumber;
const int GradedFundIopv::kDiscountSp1FieldNumber;
const int GradedFundIopv::kPremiumBp1FieldNumber;
const int GradedFundIopv::kPremiumSp1FieldNumber;
const int GradedFundIopv::kStateFieldNumber;
const int GradedFundIopv::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GradedFundIopv::GradedFundIopv()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fquotation_2eproto::scc_info_GradedFundIopv.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quotation.GradedFundIopv)
}
GradedFundIopv::GradedFundIopv(const GradedFundIopv& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::quotation::GradedFundIopv::_i_give_permission_to_break_this_code_default_type_.get());
  if (from.has_type()) {
    type_.AssignWithDefault(&::quotation::GradedFundIopv::_i_give_permission_to_break_this_code_default_type_.get(), from.type_);
  }
  fof_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fof_code()) {
    fof_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fof_code_);
  }
  fof_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fof_name()) {
    fof_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fof_name_);
  }
  a_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_a_code()) {
    a_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.a_code_);
  }
  a_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_a_name()) {
    a_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.a_name_);
  }
  b_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_b_code()) {
    b_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.b_code_);
  }
  b_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_b_name()) {
    b_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.b_name_);
  }
  underlying_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_underlying_code()) {
    underlying_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.underlying_code_);
  }
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg()) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&trading_day_, &from.trading_day_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&trading_day_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:quotation.GradedFundIopv)
}

void GradedFundIopv::SharedCtor() {
  type_.UnsafeSetDefault(&::quotation::GradedFundIopv::_i_give_permission_to_break_this_code_default_type_.get());
  fof_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fof_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  a_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  a_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  b_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  b_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  underlying_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&trading_day_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&trading_day_)) + sizeof(state_));
}

GradedFundIopv::~GradedFundIopv() {
  // @@protoc_insertion_point(destructor:quotation.GradedFundIopv)
  SharedDtor();
}

void GradedFundIopv::SharedDtor() {
  type_.DestroyNoArena(&::quotation::GradedFundIopv::_i_give_permission_to_break_this_code_default_type_.get());
  fof_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fof_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  a_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  a_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  b_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  b_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  underlying_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GradedFundIopv::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GradedFundIopv::descriptor() {
  ::protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GradedFundIopv& GradedFundIopv::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fquotation_2eproto::scc_info_GradedFundIopv.base);
  return *internal_default_instance();
}


void GradedFundIopv::Clear() {
// @@protoc_insertion_point(message_clear_start:quotation.GradedFundIopv)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      type_.UnsafeMutablePointer()->assign(*&::quotation::GradedFundIopv::_i_give_permission_to_break_this_code_default_type_.get());
    }
    if (cached_has_bits & 0x00000002u) {
      fof_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      fof_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      a_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      a_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      b_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      b_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      underlying_code_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    msg_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 65024u) {
    ::memset(&trading_day_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&b_quote_time_) -
        reinterpret_cast<char*>(&trading_day_)) + sizeof(b_quote_time_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&b_bp1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hs300_pre_close_) -
        reinterpret_cast<char*>(&b_bp1_)) + sizeof(hs300_pre_close_));
  }
  if (cached_has_bits & 4278190080u) {
    ::memset(&ratio_a_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fof_strength_) -
        reinterpret_cast<char*>(&ratio_a_)) + sizeof(fof_strength_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 255u) {
    ::memset(&fof_iopv_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&premium_bp1_) -
        reinterpret_cast<char*>(&fof_iopv_)) + sizeof(premium_bp1_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&premium_sp1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&premium_sp1_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GradedFundIopv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quotation.GradedFundIopv)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1 [default = "C"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.GradedFundIopv.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trading_day = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_trading_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trading_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 stamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_stamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string fof_code = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fof_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fof_code().data(), static_cast<int>(this->fof_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.GradedFundIopv.fof_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fof_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fof_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fof_name().data(), static_cast<int>(this->fof_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.GradedFundIopv.fof_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double fof_pre_nav = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_fof_pre_nav();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fof_pre_nav_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string a_code = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_a_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->a_code().data(), static_cast<int>(this->a_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.GradedFundIopv.a_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string a_name = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_a_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->a_name().data(), static_cast<int>(this->a_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.GradedFundIopv.a_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double a_bp1 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_a_bp1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_bp1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double a_sp1 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_a_sp1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_sp1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 a_quote_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_a_quote_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &a_quote_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string b_code = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_b_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->b_code().data(), static_cast<int>(this->b_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.GradedFundIopv.b_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string b_name = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_b_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->b_name().data(), static_cast<int>(this->b_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.GradedFundIopv.b_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double b_bp1 = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_b_bp1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &b_bp1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double b_sp1 = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {
          set_has_b_sp1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &b_sp1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 b_quote_time = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_b_quote_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &b_quote_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string underlying_code = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->underlying_code().data(), static_cast<int>(this->underlying_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.GradedFundIopv.underlying_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double underlying_latest = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {
          set_has_underlying_latest();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &underlying_latest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double underlying_pre_close = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 153 & 0xFF */)) {
          set_has_underlying_pre_close();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &underlying_pre_close_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 underlying_quote_time = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_underlying_quote_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &underlying_quote_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double hs300_latest = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {
          set_has_hs300_latest();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hs300_latest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double hs300_pre_close = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u /* 177 & 0xFF */)) {
          set_has_hs300_pre_close();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hs300_pre_close_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hs300_quote_time = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_hs300_quote_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hs300_quote_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ratio_a = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_ratio_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ratio_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ratio_b = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_ratio_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ratio_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double position_rate = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(209u /* 209 & 0xFF */)) {
          set_has_position_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double discount_fee_rate = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(217u /* 217 & 0xFF */)) {
          set_has_discount_fee_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &discount_fee_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double premium_fee_rate = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(225u /* 225 & 0xFF */)) {
          set_has_premium_fee_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &premium_fee_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double underlying_amplitude = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(233u /* 233 & 0xFF */)) {
          set_has_underlying_amplitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &underlying_amplitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double hs300_amplitude = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(241u /* 241 & 0xFF */)) {
          set_has_hs300_amplitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hs300_amplitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double fof_strength = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(249u /* 249 & 0xFF */)) {
          set_has_fof_strength();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fof_strength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double fof_iopv = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1u /* 257 & 0xFF */)) {
          set_has_fof_iopv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fof_iopv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double bp1_iopv = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 265 & 0xFF */)) {
          set_has_bp1_iopv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bp1_iopv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double sp1_iopv = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 273 & 0xFF */)) {
          set_has_sp1_iopv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sp1_iopv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bp1_iopv_state = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {
          set_has_bp1_iopv_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bp1_iopv_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sp1_iopv_state = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 288 & 0xFF */)) {
          set_has_sp1_iopv_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sp1_iopv_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double discount_bp1 = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 297 & 0xFF */)) {
          set_has_discount_bp1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &discount_bp1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double discount_sp1 = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 305 & 0xFF */)) {
          set_has_discount_sp1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &discount_sp1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double premium_bp1 = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 313 & 0xFF */)) {
          set_has_premium_bp1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &premium_bp1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double premium_sp1 = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 321 & 0xFF */)) {
          set_has_premium_sp1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &premium_sp1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 state = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 328 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string msg = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 338 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.GradedFundIopv.msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quotation.GradedFundIopv)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quotation.GradedFundIopv)
  return false;
#undef DO_
}

void GradedFundIopv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quotation.GradedFundIopv)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1 [default = "C"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.GradedFundIopv.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional uint32 trading_day = 2;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->trading_day(), output);
  }

  // required uint32 stamp = 3;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stamp(), output);
  }

  // required string fof_code = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fof_code().data(), static_cast<int>(this->fof_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.GradedFundIopv.fof_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->fof_code(), output);
  }

  // optional string fof_name = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fof_name().data(), static_cast<int>(this->fof_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.GradedFundIopv.fof_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->fof_name(), output);
  }

  // optional double fof_pre_nav = 6;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->fof_pre_nav(), output);
  }

  // required string a_code = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->a_code().data(), static_cast<int>(this->a_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.GradedFundIopv.a_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->a_code(), output);
  }

  // optional string a_name = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->a_name().data(), static_cast<int>(this->a_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.GradedFundIopv.a_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->a_name(), output);
  }

  // optional double a_bp1 = 9;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->a_bp1(), output);
  }

  // optional double a_sp1 = 10;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->a_sp1(), output);
  }

  // optional uint32 a_quote_time = 11;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->a_quote_time(), output);
  }

  // required string b_code = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->b_code().data(), static_cast<int>(this->b_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.GradedFundIopv.b_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->b_code(), output);
  }

  // optional string b_name = 13;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->b_name().data(), static_cast<int>(this->b_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.GradedFundIopv.b_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->b_name(), output);
  }

  // optional double b_bp1 = 14;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->b_bp1(), output);
  }

  // optional double b_sp1 = 15;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->b_sp1(), output);
  }

  // optional uint32 b_quote_time = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->b_quote_time(), output);
  }

  // required string underlying_code = 17;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->underlying_code().data(), static_cast<int>(this->underlying_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.GradedFundIopv.underlying_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->underlying_code(), output);
  }

  // optional double underlying_latest = 18;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->underlying_latest(), output);
  }

  // optional double underlying_pre_close = 19;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->underlying_pre_close(), output);
  }

  // optional uint32 underlying_quote_time = 20;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->underlying_quote_time(), output);
  }

  // optional double hs300_latest = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->hs300_latest(), output);
  }

  // optional double hs300_pre_close = 22;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->hs300_pre_close(), output);
  }

  // optional uint32 hs300_quote_time = 23;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->hs300_quote_time(), output);
  }

  // optional int64 ratio_a = 24;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->ratio_a(), output);
  }

  // optional int64 ratio_b = 25;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(25, this->ratio_b(), output);
  }

  // optional double position_rate = 26;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->position_rate(), output);
  }

  // optional double discount_fee_rate = 27;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->discount_fee_rate(), output);
  }

  // optional double premium_fee_rate = 28;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->premium_fee_rate(), output);
  }

  // optional double underlying_amplitude = 29;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->underlying_amplitude(), output);
  }

  // optional double hs300_amplitude = 30;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->hs300_amplitude(), output);
  }

  // optional double fof_strength = 31;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->fof_strength(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional double fof_iopv = 32;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->fof_iopv(), output);
  }

  // optional double bp1_iopv = 33;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->bp1_iopv(), output);
  }

  // optional double sp1_iopv = 34;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(34, this->sp1_iopv(), output);
  }

  // optional int64 bp1_iopv_state = 35;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(35, this->bp1_iopv_state(), output);
  }

  // optional int64 sp1_iopv_state = 36;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(36, this->sp1_iopv_state(), output);
  }

  // optional double discount_bp1 = 37;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(37, this->discount_bp1(), output);
  }

  // optional double discount_sp1 = 38;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(38, this->discount_sp1(), output);
  }

  // optional double premium_bp1 = 39;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(39, this->premium_bp1(), output);
  }

  // optional double premium_sp1 = 40;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(40, this->premium_sp1(), output);
  }

  // optional int64 state = 41;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(41, this->state(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string msg = 42;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.GradedFundIopv.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      42, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:quotation.GradedFundIopv)
}

::google::protobuf::uint8* GradedFundIopv::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quotation.GradedFundIopv)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1 [default = "C"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.GradedFundIopv.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional uint32 trading_day = 2;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->trading_day(), target);
  }

  // required uint32 stamp = 3;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stamp(), target);
  }

  // required string fof_code = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fof_code().data(), static_cast<int>(this->fof_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.GradedFundIopv.fof_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->fof_code(), target);
  }

  // optional string fof_name = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fof_name().data(), static_cast<int>(this->fof_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.GradedFundIopv.fof_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->fof_name(), target);
  }

  // optional double fof_pre_nav = 6;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->fof_pre_nav(), target);
  }

  // required string a_code = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->a_code().data(), static_cast<int>(this->a_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.GradedFundIopv.a_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->a_code(), target);
  }

  // optional string a_name = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->a_name().data(), static_cast<int>(this->a_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.GradedFundIopv.a_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->a_name(), target);
  }

  // optional double a_bp1 = 9;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->a_bp1(), target);
  }

  // optional double a_sp1 = 10;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->a_sp1(), target);
  }

  // optional uint32 a_quote_time = 11;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->a_quote_time(), target);
  }

  // required string b_code = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->b_code().data(), static_cast<int>(this->b_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.GradedFundIopv.b_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->b_code(), target);
  }

  // optional string b_name = 13;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->b_name().data(), static_cast<int>(this->b_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.GradedFundIopv.b_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->b_name(), target);
  }

  // optional double b_bp1 = 14;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->b_bp1(), target);
  }

  // optional double b_sp1 = 15;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->b_sp1(), target);
  }

  // optional uint32 b_quote_time = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->b_quote_time(), target);
  }

  // required string underlying_code = 17;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->underlying_code().data(), static_cast<int>(this->underlying_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.GradedFundIopv.underlying_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->underlying_code(), target);
  }

  // optional double underlying_latest = 18;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->underlying_latest(), target);
  }

  // optional double underlying_pre_close = 19;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->underlying_pre_close(), target);
  }

  // optional uint32 underlying_quote_time = 20;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->underlying_quote_time(), target);
  }

  // optional double hs300_latest = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->hs300_latest(), target);
  }

  // optional double hs300_pre_close = 22;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->hs300_pre_close(), target);
  }

  // optional uint32 hs300_quote_time = 23;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->hs300_quote_time(), target);
  }

  // optional int64 ratio_a = 24;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->ratio_a(), target);
  }

  // optional int64 ratio_b = 25;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(25, this->ratio_b(), target);
  }

  // optional double position_rate = 26;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->position_rate(), target);
  }

  // optional double discount_fee_rate = 27;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->discount_fee_rate(), target);
  }

  // optional double premium_fee_rate = 28;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->premium_fee_rate(), target);
  }

  // optional double underlying_amplitude = 29;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->underlying_amplitude(), target);
  }

  // optional double hs300_amplitude = 30;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->hs300_amplitude(), target);
  }

  // optional double fof_strength = 31;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->fof_strength(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional double fof_iopv = 32;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->fof_iopv(), target);
  }

  // optional double bp1_iopv = 33;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->bp1_iopv(), target);
  }

  // optional double sp1_iopv = 34;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(34, this->sp1_iopv(), target);
  }

  // optional int64 bp1_iopv_state = 35;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(35, this->bp1_iopv_state(), target);
  }

  // optional int64 sp1_iopv_state = 36;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(36, this->sp1_iopv_state(), target);
  }

  // optional double discount_bp1 = 37;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(37, this->discount_bp1(), target);
  }

  // optional double discount_sp1 = 38;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(38, this->discount_sp1(), target);
  }

  // optional double premium_bp1 = 39;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(39, this->premium_bp1(), target);
  }

  // optional double premium_sp1 = 40;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(40, this->premium_sp1(), target);
  }

  // optional int64 state = 41;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(41, this->state(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string msg = 42;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.GradedFundIopv.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        42, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quotation.GradedFundIopv)
  return target;
}

size_t GradedFundIopv::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:quotation.GradedFundIopv)
  size_t total_size = 0;

  if (has_fof_code()) {
    // required string fof_code = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fof_code());
  }

  if (has_a_code()) {
    // required string a_code = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->a_code());
  }

  if (has_b_code()) {
    // required string b_code = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->b_code());
  }

  if (has_underlying_code()) {
    // required string underlying_code = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->underlying_code());
  }

  if (has_stamp()) {
    // required uint32 stamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stamp());
  }

  return total_size;
}
size_t GradedFundIopv::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quotation.GradedFundIopv)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000004aa) ^ 0x000004aa) == 0) {  // All required fields are present.
    // required string fof_code = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fof_code());

    // required string a_code = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->a_code());

    // required string b_code = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->b_code());

    // required string underlying_code = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->underlying_code());

    // required uint32 stamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string type = 1 [default = "C"];
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // optional string fof_name = 5;
  if (has_fof_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fof_name());
  }

  // optional string a_name = 8;
  if (has_a_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->a_name());
  }

  // optional string b_name = 13;
  if (has_b_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->b_name());
  }

  if (_has_bits_[8 / 32] & 768u) {
    // optional string msg = 42;
    if (has_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional uint32 trading_day = 2;
    if (has_trading_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trading_day());
    }

  }
  if (_has_bits_[8 / 32] & 63488u) {
    // optional double fof_pre_nav = 6;
    if (has_fof_pre_nav()) {
      total_size += 1 + 8;
    }

    // optional double a_bp1 = 9;
    if (has_a_bp1()) {
      total_size += 1 + 8;
    }

    // optional double a_sp1 = 10;
    if (has_a_sp1()) {
      total_size += 1 + 8;
    }

    // optional uint32 a_quote_time = 11;
    if (has_a_quote_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->a_quote_time());
    }

    // optional uint32 b_quote_time = 16;
    if (has_b_quote_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->b_quote_time());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional double b_bp1 = 14;
    if (has_b_bp1()) {
      total_size += 1 + 8;
    }

    // optional double b_sp1 = 15;
    if (has_b_sp1()) {
      total_size += 1 + 8;
    }

    // optional double underlying_latest = 18;
    if (has_underlying_latest()) {
      total_size += 2 + 8;
    }

    // optional double underlying_pre_close = 19;
    if (has_underlying_pre_close()) {
      total_size += 2 + 8;
    }

    // optional double hs300_latest = 21;
    if (has_hs300_latest()) {
      total_size += 2 + 8;
    }

    // optional uint32 underlying_quote_time = 20;
    if (has_underlying_quote_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->underlying_quote_time());
    }

    // optional uint32 hs300_quote_time = 23;
    if (has_hs300_quote_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hs300_quote_time());
    }

    // optional double hs300_pre_close = 22;
    if (has_hs300_pre_close()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional int64 ratio_a = 24;
    if (has_ratio_a()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ratio_a());
    }

    // optional int64 ratio_b = 25;
    if (has_ratio_b()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ratio_b());
    }

    // optional double position_rate = 26;
    if (has_position_rate()) {
      total_size += 2 + 8;
    }

    // optional double discount_fee_rate = 27;
    if (has_discount_fee_rate()) {
      total_size += 2 + 8;
    }

    // optional double premium_fee_rate = 28;
    if (has_premium_fee_rate()) {
      total_size += 2 + 8;
    }

    // optional double underlying_amplitude = 29;
    if (has_underlying_amplitude()) {
      total_size += 2 + 8;
    }

    // optional double hs300_amplitude = 30;
    if (has_hs300_amplitude()) {
      total_size += 2 + 8;
    }

    // optional double fof_strength = 31;
    if (has_fof_strength()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional double fof_iopv = 32;
    if (has_fof_iopv()) {
      total_size += 2 + 8;
    }

    // optional double bp1_iopv = 33;
    if (has_bp1_iopv()) {
      total_size += 2 + 8;
    }

    // optional double sp1_iopv = 34;
    if (has_sp1_iopv()) {
      total_size += 2 + 8;
    }

    // optional int64 bp1_iopv_state = 35;
    if (has_bp1_iopv_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bp1_iopv_state());
    }

    // optional int64 sp1_iopv_state = 36;
    if (has_sp1_iopv_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sp1_iopv_state());
    }

    // optional double discount_bp1 = 37;
    if (has_discount_bp1()) {
      total_size += 2 + 8;
    }

    // optional double discount_sp1 = 38;
    if (has_discount_sp1()) {
      total_size += 2 + 8;
    }

    // optional double premium_bp1 = 39;
    if (has_premium_bp1()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[40 / 32] & 768u) {
    // optional double premium_sp1 = 40;
    if (has_premium_sp1()) {
      total_size += 2 + 8;
    }

    // optional int64 state = 41;
    if (has_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GradedFundIopv::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quotation.GradedFundIopv)
  GOOGLE_DCHECK_NE(&from, this);
  const GradedFundIopv* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GradedFundIopv>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quotation.GradedFundIopv)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quotation.GradedFundIopv)
    MergeFrom(*source);
  }
}

void GradedFundIopv::MergeFrom(const GradedFundIopv& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quotation.GradedFundIopv)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_type();
      type_.AssignWithDefault(&::quotation::GradedFundIopv::_i_give_permission_to_break_this_code_default_type_.get(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_fof_code();
      fof_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fof_code_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_fof_name();
      fof_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fof_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_a_code();
      a_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.a_code_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_a_name();
      a_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.a_name_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_b_code();
      b_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.b_code_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_b_name();
      b_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.b_name_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_underlying_code();
      underlying_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.underlying_code_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
    if (cached_has_bits & 0x00000200u) {
      trading_day_ = from.trading_day_;
    }
    if (cached_has_bits & 0x00000400u) {
      stamp_ = from.stamp_;
    }
    if (cached_has_bits & 0x00000800u) {
      fof_pre_nav_ = from.fof_pre_nav_;
    }
    if (cached_has_bits & 0x00001000u) {
      a_bp1_ = from.a_bp1_;
    }
    if (cached_has_bits & 0x00002000u) {
      a_sp1_ = from.a_sp1_;
    }
    if (cached_has_bits & 0x00004000u) {
      a_quote_time_ = from.a_quote_time_;
    }
    if (cached_has_bits & 0x00008000u) {
      b_quote_time_ = from.b_quote_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      b_bp1_ = from.b_bp1_;
    }
    if (cached_has_bits & 0x00020000u) {
      b_sp1_ = from.b_sp1_;
    }
    if (cached_has_bits & 0x00040000u) {
      underlying_latest_ = from.underlying_latest_;
    }
    if (cached_has_bits & 0x00080000u) {
      underlying_pre_close_ = from.underlying_pre_close_;
    }
    if (cached_has_bits & 0x00100000u) {
      hs300_latest_ = from.hs300_latest_;
    }
    if (cached_has_bits & 0x00200000u) {
      underlying_quote_time_ = from.underlying_quote_time_;
    }
    if (cached_has_bits & 0x00400000u) {
      hs300_quote_time_ = from.hs300_quote_time_;
    }
    if (cached_has_bits & 0x00800000u) {
      hs300_pre_close_ = from.hs300_pre_close_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      ratio_a_ = from.ratio_a_;
    }
    if (cached_has_bits & 0x02000000u) {
      ratio_b_ = from.ratio_b_;
    }
    if (cached_has_bits & 0x04000000u) {
      position_rate_ = from.position_rate_;
    }
    if (cached_has_bits & 0x08000000u) {
      discount_fee_rate_ = from.discount_fee_rate_;
    }
    if (cached_has_bits & 0x10000000u) {
      premium_fee_rate_ = from.premium_fee_rate_;
    }
    if (cached_has_bits & 0x20000000u) {
      underlying_amplitude_ = from.underlying_amplitude_;
    }
    if (cached_has_bits & 0x40000000u) {
      hs300_amplitude_ = from.hs300_amplitude_;
    }
    if (cached_has_bits & 0x80000000u) {
      fof_strength_ = from.fof_strength_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      fof_iopv_ = from.fof_iopv_;
    }
    if (cached_has_bits & 0x00000002u) {
      bp1_iopv_ = from.bp1_iopv_;
    }
    if (cached_has_bits & 0x00000004u) {
      sp1_iopv_ = from.sp1_iopv_;
    }
    if (cached_has_bits & 0x00000008u) {
      bp1_iopv_state_ = from.bp1_iopv_state_;
    }
    if (cached_has_bits & 0x00000010u) {
      sp1_iopv_state_ = from.sp1_iopv_state_;
    }
    if (cached_has_bits & 0x00000020u) {
      discount_bp1_ = from.discount_bp1_;
    }
    if (cached_has_bits & 0x00000040u) {
      discount_sp1_ = from.discount_sp1_;
    }
    if (cached_has_bits & 0x00000080u) {
      premium_bp1_ = from.premium_bp1_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      premium_sp1_ = from.premium_sp1_;
    }
    if (cached_has_bits & 0x00000200u) {
      state_ = from.state_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void GradedFundIopv::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quotation.GradedFundIopv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GradedFundIopv::CopyFrom(const GradedFundIopv& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quotation.GradedFundIopv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GradedFundIopv::IsInitialized() const {
  if ((_has_bits_[0] & 0x000004aa) != 0x000004aa) return false;
  return true;
}

void GradedFundIopv::Swap(GradedFundIopv* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GradedFundIopv::InternalSwap(GradedFundIopv* other) {
  using std::swap;
  type_.Swap(&other->type_, &::quotation::GradedFundIopv::_i_give_permission_to_break_this_code_default_type_.get(),
    GetArenaNoVirtual());
  fof_code_.Swap(&other->fof_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fof_name_.Swap(&other->fof_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  a_code_.Swap(&other->a_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  a_name_.Swap(&other->a_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  b_code_.Swap(&other->b_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  b_name_.Swap(&other->b_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  underlying_code_.Swap(&other->underlying_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  msg_.Swap(&other->msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trading_day_, other->trading_day_);
  swap(stamp_, other->stamp_);
  swap(fof_pre_nav_, other->fof_pre_nav_);
  swap(a_bp1_, other->a_bp1_);
  swap(a_sp1_, other->a_sp1_);
  swap(a_quote_time_, other->a_quote_time_);
  swap(b_quote_time_, other->b_quote_time_);
  swap(b_bp1_, other->b_bp1_);
  swap(b_sp1_, other->b_sp1_);
  swap(underlying_latest_, other->underlying_latest_);
  swap(underlying_pre_close_, other->underlying_pre_close_);
  swap(hs300_latest_, other->hs300_latest_);
  swap(underlying_quote_time_, other->underlying_quote_time_);
  swap(hs300_quote_time_, other->hs300_quote_time_);
  swap(hs300_pre_close_, other->hs300_pre_close_);
  swap(ratio_a_, other->ratio_a_);
  swap(ratio_b_, other->ratio_b_);
  swap(position_rate_, other->position_rate_);
  swap(discount_fee_rate_, other->discount_fee_rate_);
  swap(premium_fee_rate_, other->premium_fee_rate_);
  swap(underlying_amplitude_, other->underlying_amplitude_);
  swap(hs300_amplitude_, other->hs300_amplitude_);
  swap(fof_strength_, other->fof_strength_);
  swap(fof_iopv_, other->fof_iopv_);
  swap(bp1_iopv_, other->bp1_iopv_);
  swap(sp1_iopv_, other->sp1_iopv_);
  swap(bp1_iopv_state_, other->bp1_iopv_state_);
  swap(sp1_iopv_state_, other->sp1_iopv_state_);
  swap(discount_bp1_, other->discount_bp1_);
  swap(discount_sp1_, other->discount_sp1_);
  swap(premium_bp1_, other->premium_bp1_);
  swap(premium_sp1_, other->premium_sp1_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GradedFundIopv::GetMetadata() const {
  protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OptionVolatility::InitAsDefaultInstance() {
}
::google::protobuf::internal::ExplicitlyConstructed<::std::string> OptionVolatility::_i_give_permission_to_break_this_code_default_type_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionVolatility::kTypeFieldNumber;
const int OptionVolatility::kTradingDayFieldNumber;
const int OptionVolatility::kStampFieldNumber;
const int OptionVolatility::kCodeFieldNumber;
const int OptionVolatility::kNameFieldNumber;
const int OptionVolatility::kPriceFieldNumber;
const int OptionVolatility::kQuoteTimeFieldNumber;
const int OptionVolatility::kCpFlagFieldNumber;
const int OptionVolatility::kExpireDateFieldNumber;
const int OptionVolatility::kExercisePriceFieldNumber;
const int OptionVolatility::kUnitFieldNumber;
const int OptionVolatility::kUnderlyingCodeFieldNumber;
const int OptionVolatility::kUnderlyingTypeFieldNumber;
const int OptionVolatility::kUnderlyingPriceFieldNumber;
const int OptionVolatility::kUnderlyingQuoteTimeFieldNumber;
const int OptionVolatility::kInterestRateFieldNumber;
const int OptionVolatility::kVolatilityFieldNumber;
const int OptionVolatility::kStateFieldNumber;
const int OptionVolatility::kImpliedValueFieldNumber;
const int OptionVolatility::kImpliedVolatilityFieldNumber;
const int OptionVolatility::kDeltaFieldNumber;
const int OptionVolatility::kDollarDeltaFieldNumber;
const int OptionVolatility::kThetaFieldNumber;
const int OptionVolatility::kDollarThetaFieldNumber;
const int OptionVolatility::kGammaFieldNumber;
const int OptionVolatility::kDollarGammaFieldNumber;
const int OptionVolatility::kVegaFieldNumber;
const int OptionVolatility::kDollarVegaFieldNumber;
const int OptionVolatility::kRhoFieldNumber;
const int OptionVolatility::kDollarRhoFieldNumber;
const int OptionVolatility::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionVolatility::OptionVolatility()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fquotation_2eproto::scc_info_OptionVolatility.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quotation.OptionVolatility)
}
OptionVolatility::OptionVolatility(const OptionVolatility& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::quotation::OptionVolatility::_i_give_permission_to_break_this_code_default_type_.get());
  if (from.has_type()) {
    type_.AssignWithDefault(&::quotation::OptionVolatility::_i_give_permission_to_break_this_code_default_type_.get(), from.type_);
  }
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  underlying_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_underlying_code()) {
    underlying_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.underlying_code_);
  }
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg()) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&trading_day_, &from.trading_day_,
    static_cast<size_t>(reinterpret_cast<char*>(&underlying_quote_time_) -
    reinterpret_cast<char*>(&trading_day_)) + sizeof(underlying_quote_time_));
  // @@protoc_insertion_point(copy_constructor:quotation.OptionVolatility)
}

void OptionVolatility::SharedCtor() {
  type_.UnsafeSetDefault(&::quotation::OptionVolatility::_i_give_permission_to_break_this_code_default_type_.get());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  underlying_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&trading_day_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&underlying_quote_time_) -
      reinterpret_cast<char*>(&trading_day_)) + sizeof(underlying_quote_time_));
}

OptionVolatility::~OptionVolatility() {
  // @@protoc_insertion_point(destructor:quotation.OptionVolatility)
  SharedDtor();
}

void OptionVolatility::SharedDtor() {
  type_.DestroyNoArena(&::quotation::OptionVolatility::_i_give_permission_to_break_this_code_default_type_.get());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  underlying_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OptionVolatility::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OptionVolatility::descriptor() {
  ::protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OptionVolatility& OptionVolatility::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fquotation_2eproto::scc_info_OptionVolatility.base);
  return *internal_default_instance();
}


void OptionVolatility::Clear() {
// @@protoc_insertion_point(message_clear_start:quotation.OptionVolatility)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      type_.UnsafeMutablePointer()->assign(*&::quotation::OptionVolatility::_i_give_permission_to_break_this_code_default_type_.get());
    }
    if (cached_has_bits & 0x00000002u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      underlying_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      msg_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&trading_day_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&price_) -
        reinterpret_cast<char*>(&trading_day_)) + sizeof(price_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&quote_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&interest_rate_) -
        reinterpret_cast<char*>(&quote_time_)) + sizeof(interest_rate_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&volatility_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dollar_theta_) -
        reinterpret_cast<char*>(&volatility_)) + sizeof(dollar_theta_));
  }
  if (cached_has_bits & 2130706432u) {
    ::memset(&gamma_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&underlying_quote_time_) -
        reinterpret_cast<char*>(&gamma_)) + sizeof(underlying_quote_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OptionVolatility::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quotation.OptionVolatility)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1 [default = "P"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.OptionVolatility.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trading_day = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_trading_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trading_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 stamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_stamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string code = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.OptionVolatility.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.OptionVolatility.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 price = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quote_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_quote_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quote_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cp_flag = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_cp_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cp_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 expire_date = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_expire_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expire_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 exercise_price = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_exercise_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exercise_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 unit = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_unit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &unit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string underlying_code = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->underlying_code().data(), static_cast<int>(this->underlying_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.OptionVolatility.underlying_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 underlying_type = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_underlying_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &underlying_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 underlying_price = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_underlying_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &underlying_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 underlying_quote_time = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_underlying_quote_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &underlying_quote_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double interest_rate = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {
          set_has_interest_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &interest_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double volatility = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {
          set_has_volatility();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volatility_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 state = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double implied_value = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 153 & 0xFF */)) {
          set_has_implied_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &implied_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double implied_volatility = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u /* 161 & 0xFF */)) {
          set_has_implied_volatility();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &implied_volatility_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double delta = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {
          set_has_delta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dollar_delta = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u /* 177 & 0xFF */)) {
          set_has_dollar_delta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dollar_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double theta = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u /* 185 & 0xFF */)) {
          set_has_theta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dollar_theta = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u /* 193 & 0xFF */)) {
          set_has_dollar_theta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dollar_theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double gamma = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(201u /* 201 & 0xFF */)) {
          set_has_gamma();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gamma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dollar_gamma = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(209u /* 209 & 0xFF */)) {
          set_has_dollar_gamma();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dollar_gamma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double vega = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(217u /* 217 & 0xFF */)) {
          set_has_vega();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vega_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dollar_vega = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(225u /* 225 & 0xFF */)) {
          set_has_dollar_vega();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dollar_vega_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double rho = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(233u /* 233 & 0xFF */)) {
          set_has_rho();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rho_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dollar_rho = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(241u /* 241 & 0xFF */)) {
          set_has_dollar_rho();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dollar_rho_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string msg = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.OptionVolatility.msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quotation.OptionVolatility)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quotation.OptionVolatility)
  return false;
#undef DO_
}

void OptionVolatility::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quotation.OptionVolatility)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1 [default = "P"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.OptionVolatility.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional uint32 trading_day = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->trading_day(), output);
  }

  // required uint32 stamp = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stamp(), output);
  }

  // required string code = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.OptionVolatility.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->code(), output);
  }

  // optional string name = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.OptionVolatility.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // optional int64 price = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->price(), output);
  }

  // optional uint32 quote_time = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->quote_time(), output);
  }

  // optional int32 cp_flag = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->cp_flag(), output);
  }

  // optional uint32 expire_date = 9;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->expire_date(), output);
  }

  // optional int64 exercise_price = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->exercise_price(), output);
  }

  // optional int64 unit = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->unit(), output);
  }

  // optional string underlying_code = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->underlying_code().data(), static_cast<int>(this->underlying_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.OptionVolatility.underlying_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->underlying_code(), output);
  }

  // optional int32 underlying_type = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->underlying_type(), output);
  }

  // optional int64 underlying_price = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->underlying_price(), output);
  }

  // optional uint32 underlying_quote_time = 15;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->underlying_quote_time(), output);
  }

  // optional double interest_rate = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->interest_rate(), output);
  }

  // optional double volatility = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->volatility(), output);
  }

  // optional int64 state = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->state(), output);
  }

  // optional double implied_value = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->implied_value(), output);
  }

  // optional double implied_volatility = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->implied_volatility(), output);
  }

  // optional double delta = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->delta(), output);
  }

  // optional double dollar_delta = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->dollar_delta(), output);
  }

  // optional double theta = 23;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->theta(), output);
  }

  // optional double dollar_theta = 24;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->dollar_theta(), output);
  }

  // optional double gamma = 25;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->gamma(), output);
  }

  // optional double dollar_gamma = 26;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->dollar_gamma(), output);
  }

  // optional double vega = 27;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->vega(), output);
  }

  // optional double dollar_vega = 28;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->dollar_vega(), output);
  }

  // optional double rho = 29;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->rho(), output);
  }

  // optional double dollar_rho = 30;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->dollar_rho(), output);
  }

  // optional string msg = 31;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.OptionVolatility.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      31, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:quotation.OptionVolatility)
}

::google::protobuf::uint8* OptionVolatility::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quotation.OptionVolatility)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1 [default = "P"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.OptionVolatility.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional uint32 trading_day = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->trading_day(), target);
  }

  // required uint32 stamp = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stamp(), target);
  }

  // required string code = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.OptionVolatility.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->code(), target);
  }

  // optional string name = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.OptionVolatility.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional int64 price = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->price(), target);
  }

  // optional uint32 quote_time = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->quote_time(), target);
  }

  // optional int32 cp_flag = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->cp_flag(), target);
  }

  // optional uint32 expire_date = 9;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->expire_date(), target);
  }

  // optional int64 exercise_price = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->exercise_price(), target);
  }

  // optional int64 unit = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->unit(), target);
  }

  // optional string underlying_code = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->underlying_code().data(), static_cast<int>(this->underlying_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.OptionVolatility.underlying_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->underlying_code(), target);
  }

  // optional int32 underlying_type = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->underlying_type(), target);
  }

  // optional int64 underlying_price = 14;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->underlying_price(), target);
  }

  // optional uint32 underlying_quote_time = 15;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->underlying_quote_time(), target);
  }

  // optional double interest_rate = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->interest_rate(), target);
  }

  // optional double volatility = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->volatility(), target);
  }

  // optional int64 state = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->state(), target);
  }

  // optional double implied_value = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->implied_value(), target);
  }

  // optional double implied_volatility = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->implied_volatility(), target);
  }

  // optional double delta = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->delta(), target);
  }

  // optional double dollar_delta = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->dollar_delta(), target);
  }

  // optional double theta = 23;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->theta(), target);
  }

  // optional double dollar_theta = 24;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->dollar_theta(), target);
  }

  // optional double gamma = 25;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->gamma(), target);
  }

  // optional double dollar_gamma = 26;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->dollar_gamma(), target);
  }

  // optional double vega = 27;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->vega(), target);
  }

  // optional double dollar_vega = 28;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->dollar_vega(), target);
  }

  // optional double rho = 29;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->rho(), target);
  }

  // optional double dollar_rho = 30;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->dollar_rho(), target);
  }

  // optional string msg = 31;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.OptionVolatility.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quotation.OptionVolatility)
  return target;
}

size_t OptionVolatility::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:quotation.OptionVolatility)
  size_t total_size = 0;

  if (has_code()) {
    // required string code = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_stamp()) {
    // required uint32 stamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stamp());
  }

  return total_size;
}
size_t OptionVolatility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quotation.OptionVolatility)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000042) ^ 0x00000042) == 0) {  // All required fields are present.
    // required string code = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required uint32 stamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string type = 1 [default = "P"];
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  if (_has_bits_[0 / 32] & 60u) {
    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string underlying_code = 12;
    if (has_underlying_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying_code());
    }

    // optional string msg = 31;
    if (has_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional uint32 trading_day = 2;
    if (has_trading_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trading_day());
    }

  }
  // optional int64 price = 6;
  if (has_price()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->price());
  }

  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 quote_time = 7;
    if (has_quote_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quote_time());
    }

    // optional int32 cp_flag = 8;
    if (has_cp_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cp_flag());
    }

    // optional int64 exercise_price = 10;
    if (has_exercise_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exercise_price());
    }

    // optional int64 unit = 11;
    if (has_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->unit());
    }

    // optional uint32 expire_date = 9;
    if (has_expire_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expire_date());
    }

    // optional int32 underlying_type = 13;
    if (has_underlying_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->underlying_type());
    }

    // optional int64 underlying_price = 14;
    if (has_underlying_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->underlying_price());
    }

    // optional double interest_rate = 16;
    if (has_interest_rate()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional double volatility = 17;
    if (has_volatility()) {
      total_size += 2 + 8;
    }

    // optional int64 state = 18;
    if (has_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->state());
    }

    // optional double implied_value = 19;
    if (has_implied_value()) {
      total_size += 2 + 8;
    }

    // optional double implied_volatility = 20;
    if (has_implied_volatility()) {
      total_size += 2 + 8;
    }

    // optional double delta = 21;
    if (has_delta()) {
      total_size += 2 + 8;
    }

    // optional double dollar_delta = 22;
    if (has_dollar_delta()) {
      total_size += 2 + 8;
    }

    // optional double theta = 23;
    if (has_theta()) {
      total_size += 2 + 8;
    }

    // optional double dollar_theta = 24;
    if (has_dollar_theta()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & 2130706432u) {
    // optional double gamma = 25;
    if (has_gamma()) {
      total_size += 2 + 8;
    }

    // optional double dollar_gamma = 26;
    if (has_dollar_gamma()) {
      total_size += 2 + 8;
    }

    // optional double vega = 27;
    if (has_vega()) {
      total_size += 2 + 8;
    }

    // optional double dollar_vega = 28;
    if (has_dollar_vega()) {
      total_size += 2 + 8;
    }

    // optional double rho = 29;
    if (has_rho()) {
      total_size += 2 + 8;
    }

    // optional double dollar_rho = 30;
    if (has_dollar_rho()) {
      total_size += 2 + 8;
    }

    // optional uint32 underlying_quote_time = 15;
    if (has_underlying_quote_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->underlying_quote_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionVolatility::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quotation.OptionVolatility)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionVolatility* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionVolatility>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quotation.OptionVolatility)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quotation.OptionVolatility)
    MergeFrom(*source);
  }
}

void OptionVolatility::MergeFrom(const OptionVolatility& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quotation.OptionVolatility)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_type();
      type_.AssignWithDefault(&::quotation::OptionVolatility::_i_give_permission_to_break_this_code_default_type_.get(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_underlying_code();
      underlying_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.underlying_code_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
    if (cached_has_bits & 0x00000020u) {
      trading_day_ = from.trading_day_;
    }
    if (cached_has_bits & 0x00000040u) {
      stamp_ = from.stamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      price_ = from.price_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      quote_time_ = from.quote_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      cp_flag_ = from.cp_flag_;
    }
    if (cached_has_bits & 0x00000400u) {
      exercise_price_ = from.exercise_price_;
    }
    if (cached_has_bits & 0x00000800u) {
      unit_ = from.unit_;
    }
    if (cached_has_bits & 0x00001000u) {
      expire_date_ = from.expire_date_;
    }
    if (cached_has_bits & 0x00002000u) {
      underlying_type_ = from.underlying_type_;
    }
    if (cached_has_bits & 0x00004000u) {
      underlying_price_ = from.underlying_price_;
    }
    if (cached_has_bits & 0x00008000u) {
      interest_rate_ = from.interest_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      volatility_ = from.volatility_;
    }
    if (cached_has_bits & 0x00020000u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00040000u) {
      implied_value_ = from.implied_value_;
    }
    if (cached_has_bits & 0x00080000u) {
      implied_volatility_ = from.implied_volatility_;
    }
    if (cached_has_bits & 0x00100000u) {
      delta_ = from.delta_;
    }
    if (cached_has_bits & 0x00200000u) {
      dollar_delta_ = from.dollar_delta_;
    }
    if (cached_has_bits & 0x00400000u) {
      theta_ = from.theta_;
    }
    if (cached_has_bits & 0x00800000u) {
      dollar_theta_ = from.dollar_theta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 2130706432u) {
    if (cached_has_bits & 0x01000000u) {
      gamma_ = from.gamma_;
    }
    if (cached_has_bits & 0x02000000u) {
      dollar_gamma_ = from.dollar_gamma_;
    }
    if (cached_has_bits & 0x04000000u) {
      vega_ = from.vega_;
    }
    if (cached_has_bits & 0x08000000u) {
      dollar_vega_ = from.dollar_vega_;
    }
    if (cached_has_bits & 0x10000000u) {
      rho_ = from.rho_;
    }
    if (cached_has_bits & 0x20000000u) {
      dollar_rho_ = from.dollar_rho_;
    }
    if (cached_has_bits & 0x40000000u) {
      underlying_quote_time_ = from.underlying_quote_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OptionVolatility::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quotation.OptionVolatility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionVolatility::CopyFrom(const OptionVolatility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quotation.OptionVolatility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionVolatility::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000042) != 0x00000042) return false;
  return true;
}

void OptionVolatility::Swap(OptionVolatility* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionVolatility::InternalSwap(OptionVolatility* other) {
  using std::swap;
  type_.Swap(&other->type_, &::quotation::OptionVolatility::_i_give_permission_to_break_this_code_default_type_.get(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  underlying_code_.Swap(&other->underlying_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  msg_.Swap(&other->msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trading_day_, other->trading_day_);
  swap(stamp_, other->stamp_);
  swap(price_, other->price_);
  swap(quote_time_, other->quote_time_);
  swap(cp_flag_, other->cp_flag_);
  swap(exercise_price_, other->exercise_price_);
  swap(unit_, other->unit_);
  swap(expire_date_, other->expire_date_);
  swap(underlying_type_, other->underlying_type_);
  swap(underlying_price_, other->underlying_price_);
  swap(interest_rate_, other->interest_rate_);
  swap(volatility_, other->volatility_);
  swap(state_, other->state_);
  swap(implied_value_, other->implied_value_);
  swap(implied_volatility_, other->implied_volatility_);
  swap(delta_, other->delta_);
  swap(dollar_delta_, other->dollar_delta_);
  swap(theta_, other->theta_);
  swap(dollar_theta_, other->dollar_theta_);
  swap(gamma_, other->gamma_);
  swap(dollar_gamma_, other->dollar_gamma_);
  swap(vega_, other->vega_);
  swap(dollar_vega_, other->dollar_vega_);
  swap(rho_, other->rho_);
  swap(dollar_rho_, other->dollar_rho_);
  swap(underlying_quote_time_, other->underlying_quote_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OptionVolatility::GetMetadata() const {
  protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IndexParam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IndexParam::kTypeFieldNumber;
const int IndexParam::kTradingDayFieldNumber;
const int IndexParam::kStampFieldNumber;
const int IndexParam::kWeightFieldNumber;
const int IndexParam::kCalcSharesFieldNumber;
const int IndexParam::kTotalSharesFieldNumber;
const int IndexParam::kCodeFieldNumber;
const int IndexParam::kEffectiveDateFieldNumber;
const int IndexParam::kCFactorFieldNumber;
const int IndexParam::kPreCloseFieldNumber;
const int IndexParam::kAdjPreCloseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IndexParam::IndexParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fquotation_2eproto::scc_info_IndexParam.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quotation.IndexParam)
}
IndexParam::IndexParam(const IndexParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  effective_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_effective_date()) {
    effective_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.effective_date_);
  }
  ::memcpy(&trading_day_, &from.trading_day_,
    static_cast<size_t>(reinterpret_cast<char*>(&adj_pre_close_) -
    reinterpret_cast<char*>(&trading_day_)) + sizeof(adj_pre_close_));
  // @@protoc_insertion_point(copy_constructor:quotation.IndexParam)
}

void IndexParam::SharedCtor() {
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  effective_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&trading_day_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&adj_pre_close_) -
      reinterpret_cast<char*>(&trading_day_)) + sizeof(adj_pre_close_));
}

IndexParam::~IndexParam() {
  // @@protoc_insertion_point(destructor:quotation.IndexParam)
  SharedDtor();
}

void IndexParam::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  effective_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IndexParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* IndexParam::descriptor() {
  ::protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IndexParam& IndexParam::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fquotation_2eproto::scc_info_IndexParam.base);
  return *internal_default_instance();
}


void IndexParam::Clear() {
// @@protoc_insertion_point(message_clear_start:quotation.IndexParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      effective_date_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&trading_day_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_shares_) -
        reinterpret_cast<char*>(&trading_day_)) + sizeof(total_shares_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&c_factor_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&adj_pre_close_) -
        reinterpret_cast<char*>(&c_factor_)) + sizeof(adj_pre_close_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IndexParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quotation.IndexParam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1 [default = ""];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.IndexParam.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trading_day = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_trading_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trading_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 stamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_stamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 calc_shares = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_calc_shares();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &calc_shares_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 total_shares = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_total_shares();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_shares_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string code = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.IndexParam.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string effective_date = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_effective_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->effective_date().data(), static_cast<int>(this->effective_date().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.IndexParam.effective_date");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double c_factor = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_c_factor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double pre_close = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_pre_close();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_close_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double adj_pre_close = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_adj_pre_close();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &adj_pre_close_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quotation.IndexParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quotation.IndexParam)
  return false;
#undef DO_
}

void IndexParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quotation.IndexParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.IndexParam.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional uint32 trading_day = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->trading_day(), output);
  }

  // required uint32 stamp = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stamp(), output);
  }

  // optional double weight = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->weight(), output);
  }

  // optional int64 calc_shares = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->calc_shares(), output);
  }

  // optional int64 total_shares = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->total_shares(), output);
  }

  // required string code = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.IndexParam.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->code(), output);
  }

  // optional string effective_date = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->effective_date().data(), static_cast<int>(this->effective_date().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.IndexParam.effective_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->effective_date(), output);
  }

  // optional double c_factor = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->c_factor(), output);
  }

  // optional double pre_close = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->pre_close(), output);
  }

  // optional double adj_pre_close = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->adj_pre_close(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:quotation.IndexParam)
}

::google::protobuf::uint8* IndexParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quotation.IndexParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.IndexParam.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional uint32 trading_day = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->trading_day(), target);
  }

  // required uint32 stamp = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stamp(), target);
  }

  // optional double weight = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->weight(), target);
  }

  // optional int64 calc_shares = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->calc_shares(), target);
  }

  // optional int64 total_shares = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->total_shares(), target);
  }

  // required string code = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.IndexParam.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->code(), target);
  }

  // optional string effective_date = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->effective_date().data(), static_cast<int>(this->effective_date().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.IndexParam.effective_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->effective_date(), target);
  }

  // optional double c_factor = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->c_factor(), target);
  }

  // optional double pre_close = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->pre_close(), target);
  }

  // optional double adj_pre_close = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->adj_pre_close(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quotation.IndexParam)
  return target;
}

size_t IndexParam::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:quotation.IndexParam)
  size_t total_size = 0;

  if (has_code()) {
    // required string code = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_stamp()) {
    // required uint32 stamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stamp());
  }

  return total_size;
}
size_t IndexParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quotation.IndexParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000012) ^ 0x00000012) == 0) {  // All required fields are present.
    // required string code = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required uint32 stamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string type = 1 [default = ""];
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional string effective_date = 8;
    if (has_effective_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->effective_date());
    }

    // optional uint32 trading_day = 2;
    if (has_trading_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trading_day());
    }

  }
  if (_has_bits_[0 / 32] & 224u) {
    // optional double weight = 4;
    if (has_weight()) {
      total_size += 1 + 8;
    }

    // optional int64 calc_shares = 5;
    if (has_calc_shares()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->calc_shares());
    }

    // optional int64 total_shares = 6;
    if (has_total_shares()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_shares());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional double c_factor = 9;
    if (has_c_factor()) {
      total_size += 1 + 8;
    }

    // optional double pre_close = 10;
    if (has_pre_close()) {
      total_size += 1 + 8;
    }

    // optional double adj_pre_close = 11;
    if (has_adj_pre_close()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IndexParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quotation.IndexParam)
  GOOGLE_DCHECK_NE(&from, this);
  const IndexParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IndexParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quotation.IndexParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quotation.IndexParam)
    MergeFrom(*source);
  }
}

void IndexParam::MergeFrom(const IndexParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quotation.IndexParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_effective_date();
      effective_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.effective_date_);
    }
    if (cached_has_bits & 0x00000008u) {
      trading_day_ = from.trading_day_;
    }
    if (cached_has_bits & 0x00000010u) {
      stamp_ = from.stamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      weight_ = from.weight_;
    }
    if (cached_has_bits & 0x00000040u) {
      calc_shares_ = from.calc_shares_;
    }
    if (cached_has_bits & 0x00000080u) {
      total_shares_ = from.total_shares_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      c_factor_ = from.c_factor_;
    }
    if (cached_has_bits & 0x00000200u) {
      pre_close_ = from.pre_close_;
    }
    if (cached_has_bits & 0x00000400u) {
      adj_pre_close_ = from.adj_pre_close_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IndexParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quotation.IndexParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexParam::CopyFrom(const IndexParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quotation.IndexParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000012) != 0x00000012) return false;
  return true;
}

void IndexParam::Swap(IndexParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IndexParam::InternalSwap(IndexParam* other) {
  using std::swap;
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  effective_date_.Swap(&other->effective_date_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trading_day_, other->trading_day_);
  swap(stamp_, other->stamp_);
  swap(weight_, other->weight_);
  swap(calc_shares_, other->calc_shares_);
  swap(total_shares_, other->total_shares_);
  swap(c_factor_, other->c_factor_);
  swap(pre_close_, other->pre_close_);
  swap(adj_pre_close_, other->adj_pre_close_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata IndexParam::GetMetadata() const {
  protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SecurityOrderInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SecurityOrderInfo::kTypeFieldNumber;
const int SecurityOrderInfo::kTradingDayFieldNumber;
const int SecurityOrderInfo::kStampFieldNumber;
const int SecurityOrderInfo::kStkcodeFieldNumber;
const int SecurityOrderInfo::kOrderQtyFieldNumber;
const int SecurityOrderInfo::kMatchQtyFieldNumber;
const int SecurityOrderInfo::kOrderPriceFieldNumber;
const int SecurityOrderInfo::kMatchAmountFieldNumber;
const int SecurityOrderInfo::kClearAmountFieldNumber;
const int SecurityOrderInfo::kMatchPriceFieldNumber;
const int SecurityOrderInfo::kLastMatchIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SecurityOrderInfo::SecurityOrderInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fquotation_2eproto::scc_info_SecurityOrderInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quotation.SecurityOrderInfo)
}
SecurityOrderInfo::SecurityOrderInfo(const SecurityOrderInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  stkcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_stkcode()) {
    stkcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stkcode_);
  }
  last_match_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_last_match_id()) {
    last_match_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_match_id_);
  }
  ::memcpy(&trading_day_, &from.trading_day_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_price_) -
    reinterpret_cast<char*>(&trading_day_)) + sizeof(match_price_));
  // @@protoc_insertion_point(copy_constructor:quotation.SecurityOrderInfo)
}

void SecurityOrderInfo::SharedCtor() {
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stkcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_match_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&trading_day_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&match_price_) -
      reinterpret_cast<char*>(&trading_day_)) + sizeof(match_price_));
}

SecurityOrderInfo::~SecurityOrderInfo() {
  // @@protoc_insertion_point(destructor:quotation.SecurityOrderInfo)
  SharedDtor();
}

void SecurityOrderInfo::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stkcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_match_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SecurityOrderInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SecurityOrderInfo::descriptor() {
  ::protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SecurityOrderInfo& SecurityOrderInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fquotation_2eproto::scc_info_SecurityOrderInfo.base);
  return *internal_default_instance();
}


void SecurityOrderInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:quotation.SecurityOrderInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      stkcode_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      last_match_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&trading_day_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&order_price_) -
        reinterpret_cast<char*>(&trading_day_)) + sizeof(order_price_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&match_amount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_price_) -
        reinterpret_cast<char*>(&match_amount_)) + sizeof(match_price_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SecurityOrderInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quotation.SecurityOrderInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1 [default = ""];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.SecurityOrderInfo.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trading_day = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_trading_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trading_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 stamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_stamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string stkcode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stkcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stkcode().data(), static_cast<int>(this->stkcode().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.SecurityOrderInfo.stkcode");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 order_qty = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_order_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &order_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 match_qty = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_match_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &match_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 order_price = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_order_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &order_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double match_amount = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_match_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &match_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double clear_amount = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_clear_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &clear_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double match_price = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_match_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &match_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string last_match_id = 11 [default = ""];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_match_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->last_match_id().data(), static_cast<int>(this->last_match_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.SecurityOrderInfo.last_match_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quotation.SecurityOrderInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quotation.SecurityOrderInfo)
  return false;
#undef DO_
}

void SecurityOrderInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quotation.SecurityOrderInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.SecurityOrderInfo.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional uint32 trading_day = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->trading_day(), output);
  }

  // required uint32 stamp = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stamp(), output);
  }

  // required string stkcode = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stkcode().data(), static_cast<int>(this->stkcode().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.SecurityOrderInfo.stkcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->stkcode(), output);
  }

  // required int64 order_qty = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->order_qty(), output);
  }

  // required int64 match_qty = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->match_qty(), output);
  }

  // required int64 order_price = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->order_price(), output);
  }

  // required double match_amount = 8 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->match_amount(), output);
  }

  // required double clear_amount = 9 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->clear_amount(), output);
  }

  // optional double match_price = 10 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->match_price(), output);
  }

  // optional string last_match_id = 11 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_match_id().data(), static_cast<int>(this->last_match_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.SecurityOrderInfo.last_match_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->last_match_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:quotation.SecurityOrderInfo)
}

::google::protobuf::uint8* SecurityOrderInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quotation.SecurityOrderInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.SecurityOrderInfo.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional uint32 trading_day = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->trading_day(), target);
  }

  // required uint32 stamp = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stamp(), target);
  }

  // required string stkcode = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stkcode().data(), static_cast<int>(this->stkcode().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.SecurityOrderInfo.stkcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->stkcode(), target);
  }

  // required int64 order_qty = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->order_qty(), target);
  }

  // required int64 match_qty = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->match_qty(), target);
  }

  // required int64 order_price = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->order_price(), target);
  }

  // required double match_amount = 8 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->match_amount(), target);
  }

  // required double clear_amount = 9 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->clear_amount(), target);
  }

  // optional double match_price = 10 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->match_price(), target);
  }

  // optional string last_match_id = 11 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_match_id().data(), static_cast<int>(this->last_match_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.SecurityOrderInfo.last_match_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->last_match_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quotation.SecurityOrderInfo)
  return target;
}

size_t SecurityOrderInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:quotation.SecurityOrderInfo)
  size_t total_size = 0;

  if (has_stkcode()) {
    // required string stkcode = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stkcode());
  }

  if (has_stamp()) {
    // required uint32 stamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stamp());
  }

  if (has_order_qty()) {
    // required int64 order_qty = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->order_qty());
  }

  if (has_match_qty()) {
    // required int64 match_qty = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->match_qty());
  }

  if (has_order_price()) {
    // required int64 order_price = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->order_price());
  }

  if (has_match_amount()) {
    // required double match_amount = 8 [default = 0];
    total_size += 1 + 8;
  }

  if (has_clear_amount()) {
    // required double clear_amount = 9 [default = 0];
    total_size += 1 + 8;
  }

  return total_size;
}
size_t SecurityOrderInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quotation.SecurityOrderInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000003f2) ^ 0x000003f2) == 0) {  // All required fields are present.
    // required string stkcode = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stkcode());

    // required uint32 stamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stamp());

    // required int64 order_qty = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->order_qty());

    // required int64 match_qty = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->match_qty());

    // required int64 order_price = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->order_price());

    // required double match_amount = 8 [default = 0];
    total_size += 1 + 8;

    // required double clear_amount = 9 [default = 0];
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string type = 1 [default = ""];
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional string last_match_id = 11 [default = ""];
    if (has_last_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_match_id());
    }

    // optional uint32 trading_day = 2;
    if (has_trading_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trading_day());
    }

  }
  // optional double match_price = 10 [default = 0];
  if (has_match_price()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecurityOrderInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quotation.SecurityOrderInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SecurityOrderInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SecurityOrderInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quotation.SecurityOrderInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quotation.SecurityOrderInfo)
    MergeFrom(*source);
  }
}

void SecurityOrderInfo::MergeFrom(const SecurityOrderInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quotation.SecurityOrderInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_stkcode();
      stkcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stkcode_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_last_match_id();
      last_match_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_match_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      trading_day_ = from.trading_day_;
    }
    if (cached_has_bits & 0x00000010u) {
      stamp_ = from.stamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      order_qty_ = from.order_qty_;
    }
    if (cached_has_bits & 0x00000040u) {
      match_qty_ = from.match_qty_;
    }
    if (cached_has_bits & 0x00000080u) {
      order_price_ = from.order_price_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      match_amount_ = from.match_amount_;
    }
    if (cached_has_bits & 0x00000200u) {
      clear_amount_ = from.clear_amount_;
    }
    if (cached_has_bits & 0x00000400u) {
      match_price_ = from.match_price_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SecurityOrderInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quotation.SecurityOrderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecurityOrderInfo::CopyFrom(const SecurityOrderInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quotation.SecurityOrderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityOrderInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003f2) != 0x000003f2) return false;
  return true;
}

void SecurityOrderInfo::Swap(SecurityOrderInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SecurityOrderInfo::InternalSwap(SecurityOrderInfo* other) {
  using std::swap;
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  stkcode_.Swap(&other->stkcode_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_match_id_.Swap(&other->last_match_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trading_day_, other->trading_day_);
  swap(stamp_, other->stamp_);
  swap(order_qty_, other->order_qty_);
  swap(match_qty_, other->match_qty_);
  swap(order_price_, other->order_price_);
  swap(match_amount_, other->match_amount_);
  swap(clear_amount_, other->clear_amount_);
  swap(match_price_, other->match_price_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SecurityOrderInfo::GetMetadata() const {
  protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PublicOrderData::InitAsDefaultInstance() {
}
::google::protobuf::internal::ExplicitlyConstructed<::std::string> PublicOrderData::_i_give_permission_to_break_this_code_default_type_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublicOrderData::kTypeFieldNumber;
const int PublicOrderData::kTradingDayFieldNumber;
const int PublicOrderData::kStampFieldNumber;
const int PublicOrderData::kCodeFieldNumber;
const int PublicOrderData::kOrderDayFieldNumber;
const int PublicOrderData::kOrderTimeFieldNumber;
const int PublicOrderData::kOrderNoFieldNumber;
const int PublicOrderData::kOrderPriceFieldNumber;
const int PublicOrderData::kOrderQtyFieldNumber;
const int PublicOrderData::kOrderTypeFieldNumber;
const int PublicOrderData::kBsFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublicOrderData::PublicOrderData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fquotation_2eproto::scc_info_PublicOrderData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quotation.PublicOrderData)
}
PublicOrderData::PublicOrderData(const PublicOrderData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::quotation::PublicOrderData::_i_give_permission_to_break_this_code_default_type_.get());
  if (from.has_type()) {
    type_.AssignWithDefault(&::quotation::PublicOrderData::_i_give_permission_to_break_this_code_default_type_.get(), from.type_);
  }
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  order_no_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_no()) {
    order_no_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_no_);
  }
  order_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_type()) {
    order_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_type_);
  }
  ::memcpy(&trading_day_, &from.trading_day_,
    static_cast<size_t>(reinterpret_cast<char*>(&bs_flag_) -
    reinterpret_cast<char*>(&trading_day_)) + sizeof(bs_flag_));
  // @@protoc_insertion_point(copy_constructor:quotation.PublicOrderData)
}

void PublicOrderData::SharedCtor() {
  type_.UnsafeSetDefault(&::quotation::PublicOrderData::_i_give_permission_to_break_this_code_default_type_.get());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_no_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&trading_day_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bs_flag_) -
      reinterpret_cast<char*>(&trading_day_)) + sizeof(bs_flag_));
}

PublicOrderData::~PublicOrderData() {
  // @@protoc_insertion_point(destructor:quotation.PublicOrderData)
  SharedDtor();
}

void PublicOrderData::SharedDtor() {
  type_.DestroyNoArena(&::quotation::PublicOrderData::_i_give_permission_to_break_this_code_default_type_.get());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_no_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PublicOrderData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PublicOrderData::descriptor() {
  ::protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PublicOrderData& PublicOrderData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fquotation_2eproto::scc_info_PublicOrderData.base);
  return *internal_default_instance();
}


void PublicOrderData::Clear() {
// @@protoc_insertion_point(message_clear_start:quotation.PublicOrderData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      type_.UnsafeMutablePointer()->assign(*&::quotation::PublicOrderData::_i_give_permission_to_break_this_code_default_type_.get());
    }
    if (cached_has_bits & 0x00000002u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      order_no_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      order_type_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&trading_day_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&order_time_) -
        reinterpret_cast<char*>(&trading_day_)) + sizeof(order_time_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&order_price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bs_flag_) -
        reinterpret_cast<char*>(&order_price_)) + sizeof(bs_flag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PublicOrderData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quotation.PublicOrderData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1 [default = "D"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.PublicOrderData.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trading_day = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_trading_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trading_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 stamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_stamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string code = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.PublicOrderData.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 order_day = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_order_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &order_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 order_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_order_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &order_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_no = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_no()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_no().data(), static_cast<int>(this->order_no().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.PublicOrderData.order_no");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 order_price = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_order_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &order_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 order_qty = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_order_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &order_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_type = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_type().data(), static_cast<int>(this->order_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.PublicOrderData.order_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bs_flag = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_bs_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bs_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quotation.PublicOrderData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quotation.PublicOrderData)
  return false;
#undef DO_
}

void PublicOrderData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quotation.PublicOrderData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1 [default = "D"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.PublicOrderData.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional uint32 trading_day = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->trading_day(), output);
  }

  // required uint32 stamp = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stamp(), output);
  }

  // optional string code = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.PublicOrderData.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->code(), output);
  }

  // optional int64 order_day = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->order_day(), output);
  }

  // optional int64 order_time = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->order_time(), output);
  }

  // optional string order_no = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_no().data(), static_cast<int>(this->order_no().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.PublicOrderData.order_no");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->order_no(), output);
  }

  // optional int64 order_price = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->order_price(), output);
  }

  // optional int64 order_qty = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->order_qty(), output);
  }

  // optional string order_type = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_type().data(), static_cast<int>(this->order_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.PublicOrderData.order_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->order_type(), output);
  }

  // optional int64 bs_flag = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->bs_flag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:quotation.PublicOrderData)
}

::google::protobuf::uint8* PublicOrderData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quotation.PublicOrderData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1 [default = "D"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.PublicOrderData.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional uint32 trading_day = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->trading_day(), target);
  }

  // required uint32 stamp = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stamp(), target);
  }

  // optional string code = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.PublicOrderData.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->code(), target);
  }

  // optional int64 order_day = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->order_day(), target);
  }

  // optional int64 order_time = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->order_time(), target);
  }

  // optional string order_no = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_no().data(), static_cast<int>(this->order_no().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.PublicOrderData.order_no");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->order_no(), target);
  }

  // optional int64 order_price = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->order_price(), target);
  }

  // optional int64 order_qty = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->order_qty(), target);
  }

  // optional string order_type = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_type().data(), static_cast<int>(this->order_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.PublicOrderData.order_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->order_type(), target);
  }

  // optional int64 bs_flag = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->bs_flag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quotation.PublicOrderData)
  return target;
}

size_t PublicOrderData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quotation.PublicOrderData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 stamp = 3;
  if (has_stamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stamp());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string type = 1 [default = "D"];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string code = 4;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional string order_no = 7;
    if (has_order_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_no());
    }

    // optional string order_type = 10;
    if (has_order_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_type());
    }

    // optional uint32 trading_day = 2;
    if (has_trading_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trading_day());
    }

  }
  if (_has_bits_[0 / 32] & 192u) {
    // optional int64 order_day = 5;
    if (has_order_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->order_day());
    }

    // optional int64 order_time = 6;
    if (has_order_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->order_time());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional int64 order_price = 8;
    if (has_order_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->order_price());
    }

    // optional int64 order_qty = 9;
    if (has_order_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->order_qty());
    }

    // optional int64 bs_flag = 11;
    if (has_bs_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bs_flag());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublicOrderData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quotation.PublicOrderData)
  GOOGLE_DCHECK_NE(&from, this);
  const PublicOrderData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublicOrderData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quotation.PublicOrderData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quotation.PublicOrderData)
    MergeFrom(*source);
  }
}

void PublicOrderData::MergeFrom(const PublicOrderData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quotation.PublicOrderData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_type();
      type_.AssignWithDefault(&::quotation::PublicOrderData::_i_give_permission_to_break_this_code_default_type_.get(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_order_no();
      order_no_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_no_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_order_type();
      order_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_type_);
    }
    if (cached_has_bits & 0x00000010u) {
      trading_day_ = from.trading_day_;
    }
    if (cached_has_bits & 0x00000020u) {
      stamp_ = from.stamp_;
    }
    if (cached_has_bits & 0x00000040u) {
      order_day_ = from.order_day_;
    }
    if (cached_has_bits & 0x00000080u) {
      order_time_ = from.order_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      order_price_ = from.order_price_;
    }
    if (cached_has_bits & 0x00000200u) {
      order_qty_ = from.order_qty_;
    }
    if (cached_has_bits & 0x00000400u) {
      bs_flag_ = from.bs_flag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PublicOrderData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quotation.PublicOrderData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublicOrderData::CopyFrom(const PublicOrderData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quotation.PublicOrderData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicOrderData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000020) != 0x00000020) return false;
  return true;
}

void PublicOrderData::Swap(PublicOrderData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublicOrderData::InternalSwap(PublicOrderData* other) {
  using std::swap;
  type_.Swap(&other->type_, &::quotation::PublicOrderData::_i_give_permission_to_break_this_code_default_type_.get(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_no_.Swap(&other->order_no_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_type_.Swap(&other->order_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trading_day_, other->trading_day_);
  swap(stamp_, other->stamp_);
  swap(order_day_, other->order_day_);
  swap(order_time_, other->order_time_);
  swap(order_price_, other->order_price_);
  swap(order_qty_, other->order_qty_);
  swap(bs_flag_, other->bs_flag_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PublicOrderData::GetMetadata() const {
  protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PublicOrderQueueData::InitAsDefaultInstance() {
}
::google::protobuf::internal::ExplicitlyConstructed<::std::string> PublicOrderQueueData::_i_give_permission_to_break_this_code_default_type_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublicOrderQueueData::kTypeFieldNumber;
const int PublicOrderQueueData::kTradingDayFieldNumber;
const int PublicOrderQueueData::kStampFieldNumber;
const int PublicOrderQueueData::kCodeFieldNumber;
const int PublicOrderQueueData::kOrderDayFieldNumber;
const int PublicOrderQueueData::kOrderTimeFieldNumber;
const int PublicOrderQueueData::kBsFlagFieldNumber;
const int PublicOrderQueueData::kOrderPriceFieldNumber;
const int PublicOrderQueueData::kOrderQtyFieldNumber;
const int PublicOrderQueueData::kVolumesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublicOrderQueueData::PublicOrderQueueData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fquotation_2eproto::scc_info_PublicOrderQueueData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quotation.PublicOrderQueueData)
}
PublicOrderQueueData::PublicOrderQueueData(const PublicOrderQueueData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      volumes_(from.volumes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::quotation::PublicOrderQueueData::_i_give_permission_to_break_this_code_default_type_.get());
  if (from.has_type()) {
    type_.AssignWithDefault(&::quotation::PublicOrderQueueData::_i_give_permission_to_break_this_code_default_type_.get(), from.type_);
  }
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  ::memcpy(&trading_day_, &from.trading_day_,
    static_cast<size_t>(reinterpret_cast<char*>(&order_qty_) -
    reinterpret_cast<char*>(&trading_day_)) + sizeof(order_qty_));
  // @@protoc_insertion_point(copy_constructor:quotation.PublicOrderQueueData)
}

void PublicOrderQueueData::SharedCtor() {
  type_.UnsafeSetDefault(&::quotation::PublicOrderQueueData::_i_give_permission_to_break_this_code_default_type_.get());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&trading_day_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&order_qty_) -
      reinterpret_cast<char*>(&trading_day_)) + sizeof(order_qty_));
}

PublicOrderQueueData::~PublicOrderQueueData() {
  // @@protoc_insertion_point(destructor:quotation.PublicOrderQueueData)
  SharedDtor();
}

void PublicOrderQueueData::SharedDtor() {
  type_.DestroyNoArena(&::quotation::PublicOrderQueueData::_i_give_permission_to_break_this_code_default_type_.get());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PublicOrderQueueData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PublicOrderQueueData::descriptor() {
  ::protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PublicOrderQueueData& PublicOrderQueueData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fquotation_2eproto::scc_info_PublicOrderQueueData.base);
  return *internal_default_instance();
}


void PublicOrderQueueData::Clear() {
// @@protoc_insertion_point(message_clear_start:quotation.PublicOrderQueueData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  volumes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      type_.UnsafeMutablePointer()->assign(*&::quotation::PublicOrderQueueData::_i_give_permission_to_break_this_code_default_type_.get());
    }
    if (cached_has_bits & 0x00000002u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&trading_day_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&order_price_) -
        reinterpret_cast<char*>(&trading_day_)) + sizeof(order_price_));
  }
  order_qty_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PublicOrderQueueData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quotation.PublicOrderQueueData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1 [default = "Q"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.PublicOrderQueueData.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trading_day = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_trading_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trading_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 stamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_stamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string code = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.PublicOrderQueueData.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 order_day = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_order_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &order_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 order_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_order_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &order_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bs_flag = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_bs_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bs_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 order_price = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_order_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &order_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 order_qty = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_order_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &order_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 volumes = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 80u, input, this->mutable_volumes())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_volumes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quotation.PublicOrderQueueData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quotation.PublicOrderQueueData)
  return false;
#undef DO_
}

void PublicOrderQueueData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quotation.PublicOrderQueueData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1 [default = "Q"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.PublicOrderQueueData.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional uint32 trading_day = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->trading_day(), output);
  }

  // required uint32 stamp = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stamp(), output);
  }

  // optional string code = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.PublicOrderQueueData.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->code(), output);
  }

  // optional int64 order_day = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->order_day(), output);
  }

  // optional int64 order_time = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->order_time(), output);
  }

  // optional int64 bs_flag = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->bs_flag(), output);
  }

  // optional int64 order_price = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->order_price(), output);
  }

  // optional int64 order_qty = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->order_qty(), output);
  }

  // repeated int64 volumes = 10;
  for (int i = 0, n = this->volumes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      10, this->volumes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:quotation.PublicOrderQueueData)
}

::google::protobuf::uint8* PublicOrderQueueData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quotation.PublicOrderQueueData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1 [default = "Q"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.PublicOrderQueueData.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional uint32 trading_day = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->trading_day(), target);
  }

  // required uint32 stamp = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stamp(), target);
  }

  // optional string code = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.PublicOrderQueueData.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->code(), target);
  }

  // optional int64 order_day = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->order_day(), target);
  }

  // optional int64 order_time = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->order_time(), target);
  }

  // optional int64 bs_flag = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->bs_flag(), target);
  }

  // optional int64 order_price = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->order_price(), target);
  }

  // optional int64 order_qty = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->order_qty(), target);
  }

  // repeated int64 volumes = 10;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(10, this->volumes_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quotation.PublicOrderQueueData)
  return target;
}

size_t PublicOrderQueueData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quotation.PublicOrderQueueData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 stamp = 3;
  if (has_stamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stamp());
  }
  // repeated int64 volumes = 10;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->volumes_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->volumes_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string type = 1 [default = "Q"];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string code = 4;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional uint32 trading_day = 2;
    if (has_trading_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trading_day());
    }

  }
  if (_has_bits_[0 / 32] & 240u) {
    // optional int64 order_day = 5;
    if (has_order_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->order_day());
    }

    // optional int64 order_time = 6;
    if (has_order_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->order_time());
    }

    // optional int64 bs_flag = 7;
    if (has_bs_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bs_flag());
    }

    // optional int64 order_price = 8;
    if (has_order_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->order_price());
    }

  }
  // optional int64 order_qty = 9;
  if (has_order_qty()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->order_qty());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublicOrderQueueData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quotation.PublicOrderQueueData)
  GOOGLE_DCHECK_NE(&from, this);
  const PublicOrderQueueData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublicOrderQueueData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quotation.PublicOrderQueueData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quotation.PublicOrderQueueData)
    MergeFrom(*source);
  }
}

void PublicOrderQueueData::MergeFrom(const PublicOrderQueueData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quotation.PublicOrderQueueData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  volumes_.MergeFrom(from.volumes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_type();
      type_.AssignWithDefault(&::quotation::PublicOrderQueueData::_i_give_permission_to_break_this_code_default_type_.get(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000004u) {
      trading_day_ = from.trading_day_;
    }
    if (cached_has_bits & 0x00000008u) {
      stamp_ = from.stamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      order_day_ = from.order_day_;
    }
    if (cached_has_bits & 0x00000020u) {
      order_time_ = from.order_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      bs_flag_ = from.bs_flag_;
    }
    if (cached_has_bits & 0x00000080u) {
      order_price_ = from.order_price_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_order_qty(from.order_qty());
  }
}

void PublicOrderQueueData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quotation.PublicOrderQueueData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublicOrderQueueData::CopyFrom(const PublicOrderQueueData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quotation.PublicOrderQueueData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicOrderQueueData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  return true;
}

void PublicOrderQueueData::Swap(PublicOrderQueueData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublicOrderQueueData::InternalSwap(PublicOrderQueueData* other) {
  using std::swap;
  volumes_.InternalSwap(&other->volumes_);
  type_.Swap(&other->type_, &::quotation::PublicOrderQueueData::_i_give_permission_to_break_this_code_default_type_.get(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trading_day_, other->trading_day_);
  swap(stamp_, other->stamp_);
  swap(order_day_, other->order_day_);
  swap(order_time_, other->order_time_);
  swap(bs_flag_, other->bs_flag_);
  swap(order_price_, other->order_price_);
  swap(order_qty_, other->order_qty_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PublicOrderQueueData::GetMetadata() const {
  protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PublicOrderTransaction::InitAsDefaultInstance() {
}
::google::protobuf::internal::ExplicitlyConstructed<::std::string> PublicOrderTransaction::_i_give_permission_to_break_this_code_default_type_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublicOrderTransaction::kTypeFieldNumber;
const int PublicOrderTransaction::kTradingDayFieldNumber;
const int PublicOrderTransaction::kStampFieldNumber;
const int PublicOrderTransaction::kCodeFieldNumber;
const int PublicOrderTransaction::kMatchDayFieldNumber;
const int PublicOrderTransaction::kMatchTimeFieldNumber;
const int PublicOrderTransaction::kMatchIdFieldNumber;
const int PublicOrderTransaction::kMatchPriceFieldNumber;
const int PublicOrderTransaction::kMatchQtyFieldNumber;
const int PublicOrderTransaction::kMatchAmtFieldNumber;
const int PublicOrderTransaction::kBsFlagFieldNumber;
const int PublicOrderTransaction::kMatchKindFieldNumber;
const int PublicOrderTransaction::kMatchCodeFieldNumber;
const int PublicOrderTransaction::kAskOrderNoFieldNumber;
const int PublicOrderTransaction::kBidOrderNoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublicOrderTransaction::PublicOrderTransaction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fquotation_2eproto::scc_info_PublicOrderTransaction.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quotation.PublicOrderTransaction)
}
PublicOrderTransaction::PublicOrderTransaction(const PublicOrderTransaction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::quotation::PublicOrderTransaction::_i_give_permission_to_break_this_code_default_type_.get());
  if (from.has_type()) {
    type_.AssignWithDefault(&::quotation::PublicOrderTransaction::_i_give_permission_to_break_this_code_default_type_.get(), from.type_);
  }
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  match_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_match_id()) {
    match_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_id_);
  }
  match_kind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_match_kind()) {
    match_kind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_kind_);
  }
  match_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_match_code()) {
    match_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_code_);
  }
  ask_order_no_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ask_order_no()) {
    ask_order_no_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ask_order_no_);
  }
  bid_order_no_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bid_order_no()) {
    bid_order_no_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bid_order_no_);
  }
  ::memcpy(&trading_day_, &from.trading_day_,
    static_cast<size_t>(reinterpret_cast<char*>(&bs_flag_) -
    reinterpret_cast<char*>(&trading_day_)) + sizeof(bs_flag_));
  // @@protoc_insertion_point(copy_constructor:quotation.PublicOrderTransaction)
}

void PublicOrderTransaction::SharedCtor() {
  type_.UnsafeSetDefault(&::quotation::PublicOrderTransaction::_i_give_permission_to_break_this_code_default_type_.get());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  match_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  match_kind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  match_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ask_order_no_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bid_order_no_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&trading_day_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bs_flag_) -
      reinterpret_cast<char*>(&trading_day_)) + sizeof(bs_flag_));
}

PublicOrderTransaction::~PublicOrderTransaction() {
  // @@protoc_insertion_point(destructor:quotation.PublicOrderTransaction)
  SharedDtor();
}

void PublicOrderTransaction::SharedDtor() {
  type_.DestroyNoArena(&::quotation::PublicOrderTransaction::_i_give_permission_to_break_this_code_default_type_.get());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  match_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  match_kind_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  match_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ask_order_no_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bid_order_no_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PublicOrderTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PublicOrderTransaction::descriptor() {
  ::protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PublicOrderTransaction& PublicOrderTransaction::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fquotation_2eproto::scc_info_PublicOrderTransaction.base);
  return *internal_default_instance();
}


void PublicOrderTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:quotation.PublicOrderTransaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      type_.UnsafeMutablePointer()->assign(*&::quotation::PublicOrderTransaction::_i_give_permission_to_break_this_code_default_type_.get());
    }
    if (cached_has_bits & 0x00000002u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      match_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      match_kind_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      match_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      ask_order_no_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      bid_order_no_.ClearNonDefaultToEmptyNoArena();
    }
  }
  trading_day_ = 0u;
  if (cached_has_bits & 32512u) {
    ::memset(&stamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bs_flag_) -
        reinterpret_cast<char*>(&stamp_)) + sizeof(bs_flag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PublicOrderTransaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quotation.PublicOrderTransaction)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1 [default = "T"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.PublicOrderTransaction.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trading_day = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_trading_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trading_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 stamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_stamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string code = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.PublicOrderTransaction.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 match_day = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_match_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &match_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 match_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_match_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &match_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string match_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_match_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->match_id().data(), static_cast<int>(this->match_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.PublicOrderTransaction.match_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 match_price = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_match_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &match_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 match_qty = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_match_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &match_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 match_amt = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_match_amt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &match_amt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bs_flag = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_bs_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bs_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string match_kind = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_match_kind()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->match_kind().data(), static_cast<int>(this->match_kind().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.PublicOrderTransaction.match_kind");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string match_code = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_match_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->match_code().data(), static_cast<int>(this->match_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.PublicOrderTransaction.match_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ask_order_no = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ask_order_no()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ask_order_no().data(), static_cast<int>(this->ask_order_no().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.PublicOrderTransaction.ask_order_no");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string bid_order_no = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bid_order_no()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bid_order_no().data(), static_cast<int>(this->bid_order_no().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.PublicOrderTransaction.bid_order_no");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quotation.PublicOrderTransaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quotation.PublicOrderTransaction)
  return false;
#undef DO_
}

void PublicOrderTransaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quotation.PublicOrderTransaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1 [default = "T"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.PublicOrderTransaction.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional uint32 trading_day = 2;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->trading_day(), output);
  }

  // required uint32 stamp = 3;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stamp(), output);
  }

  // optional string code = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.PublicOrderTransaction.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->code(), output);
  }

  // optional int64 match_day = 5;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->match_day(), output);
  }

  // optional int64 match_time = 6;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->match_time(), output);
  }

  // optional string match_id = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_id().data(), static_cast<int>(this->match_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.PublicOrderTransaction.match_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->match_id(), output);
  }

  // optional int64 match_price = 8;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->match_price(), output);
  }

  // optional int64 match_qty = 9;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->match_qty(), output);
  }

  // optional int64 match_amt = 10;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->match_amt(), output);
  }

  // optional int64 bs_flag = 11;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->bs_flag(), output);
  }

  // optional string match_kind = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_kind().data(), static_cast<int>(this->match_kind().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.PublicOrderTransaction.match_kind");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->match_kind(), output);
  }

  // optional string match_code = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_code().data(), static_cast<int>(this->match_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.PublicOrderTransaction.match_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->match_code(), output);
  }

  // optional string ask_order_no = 14;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ask_order_no().data(), static_cast<int>(this->ask_order_no().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.PublicOrderTransaction.ask_order_no");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->ask_order_no(), output);
  }

  // optional string bid_order_no = 15;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bid_order_no().data(), static_cast<int>(this->bid_order_no().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.PublicOrderTransaction.bid_order_no");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->bid_order_no(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:quotation.PublicOrderTransaction)
}

::google::protobuf::uint8* PublicOrderTransaction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quotation.PublicOrderTransaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1 [default = "T"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.PublicOrderTransaction.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional uint32 trading_day = 2;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->trading_day(), target);
  }

  // required uint32 stamp = 3;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stamp(), target);
  }

  // optional string code = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.PublicOrderTransaction.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->code(), target);
  }

  // optional int64 match_day = 5;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->match_day(), target);
  }

  // optional int64 match_time = 6;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->match_time(), target);
  }

  // optional string match_id = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_id().data(), static_cast<int>(this->match_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.PublicOrderTransaction.match_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->match_id(), target);
  }

  // optional int64 match_price = 8;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->match_price(), target);
  }

  // optional int64 match_qty = 9;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->match_qty(), target);
  }

  // optional int64 match_amt = 10;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->match_amt(), target);
  }

  // optional int64 bs_flag = 11;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->bs_flag(), target);
  }

  // optional string match_kind = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_kind().data(), static_cast<int>(this->match_kind().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.PublicOrderTransaction.match_kind");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->match_kind(), target);
  }

  // optional string match_code = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_code().data(), static_cast<int>(this->match_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.PublicOrderTransaction.match_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->match_code(), target);
  }

  // optional string ask_order_no = 14;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ask_order_no().data(), static_cast<int>(this->ask_order_no().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.PublicOrderTransaction.ask_order_no");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->ask_order_no(), target);
  }

  // optional string bid_order_no = 15;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bid_order_no().data(), static_cast<int>(this->bid_order_no().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.PublicOrderTransaction.bid_order_no");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->bid_order_no(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quotation.PublicOrderTransaction)
  return target;
}

size_t PublicOrderTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quotation.PublicOrderTransaction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 stamp = 3;
  if (has_stamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stamp());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string type = 1 [default = "T"];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string code = 4;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional string match_id = 7;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->match_id());
    }

    // optional string match_kind = 12;
    if (has_match_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->match_kind());
    }

    // optional string match_code = 13;
    if (has_match_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->match_code());
    }

    // optional string ask_order_no = 14;
    if (has_ask_order_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ask_order_no());
    }

    // optional string bid_order_no = 15;
    if (has_bid_order_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bid_order_no());
    }

    // optional uint32 trading_day = 2;
    if (has_trading_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trading_day());
    }

  }
  if (_has_bits_[8 / 32] & 32256u) {
    // optional int64 match_day = 5;
    if (has_match_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->match_day());
    }

    // optional int64 match_time = 6;
    if (has_match_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->match_time());
    }

    // optional int64 match_price = 8;
    if (has_match_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->match_price());
    }

    // optional int64 match_qty = 9;
    if (has_match_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->match_qty());
    }

    // optional int64 match_amt = 10;
    if (has_match_amt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->match_amt());
    }

    // optional int64 bs_flag = 11;
    if (has_bs_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bs_flag());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublicOrderTransaction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quotation.PublicOrderTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  const PublicOrderTransaction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublicOrderTransaction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quotation.PublicOrderTransaction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quotation.PublicOrderTransaction)
    MergeFrom(*source);
  }
}

void PublicOrderTransaction::MergeFrom(const PublicOrderTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quotation.PublicOrderTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_type();
      type_.AssignWithDefault(&::quotation::PublicOrderTransaction::_i_give_permission_to_break_this_code_default_type_.get(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_match_id();
      match_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_match_kind();
      match_kind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_kind_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_match_code();
      match_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_code_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_ask_order_no();
      ask_order_no_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ask_order_no_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_bid_order_no();
      bid_order_no_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bid_order_no_);
    }
    if (cached_has_bits & 0x00000080u) {
      trading_day_ = from.trading_day_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      stamp_ = from.stamp_;
    }
    if (cached_has_bits & 0x00000200u) {
      match_day_ = from.match_day_;
    }
    if (cached_has_bits & 0x00000400u) {
      match_time_ = from.match_time_;
    }
    if (cached_has_bits & 0x00000800u) {
      match_price_ = from.match_price_;
    }
    if (cached_has_bits & 0x00001000u) {
      match_qty_ = from.match_qty_;
    }
    if (cached_has_bits & 0x00002000u) {
      match_amt_ = from.match_amt_;
    }
    if (cached_has_bits & 0x00004000u) {
      bs_flag_ = from.bs_flag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PublicOrderTransaction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quotation.PublicOrderTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublicOrderTransaction::CopyFrom(const PublicOrderTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quotation.PublicOrderTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicOrderTransaction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000100) != 0x00000100) return false;
  return true;
}

void PublicOrderTransaction::Swap(PublicOrderTransaction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublicOrderTransaction::InternalSwap(PublicOrderTransaction* other) {
  using std::swap;
  type_.Swap(&other->type_, &::quotation::PublicOrderTransaction::_i_give_permission_to_break_this_code_default_type_.get(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  match_id_.Swap(&other->match_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  match_kind_.Swap(&other->match_kind_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  match_code_.Swap(&other->match_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ask_order_no_.Swap(&other->ask_order_no_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bid_order_no_.Swap(&other->bid_order_no_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trading_day_, other->trading_day_);
  swap(stamp_, other->stamp_);
  swap(match_day_, other->match_day_);
  swap(match_time_, other->match_time_);
  swap(match_price_, other->match_price_);
  swap(match_qty_, other->match_qty_);
  swap(match_amt_, other->match_amt_);
  swap(bs_flag_, other->bs_flag_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PublicOrderTransaction::GetMetadata() const {
  protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CurrentBasis::InitAsDefaultInstance() {
}
::google::protobuf::internal::ExplicitlyConstructed<::std::string> CurrentBasis::_i_give_permission_to_break_this_code_default_type_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CurrentBasis::kTypeFieldNumber;
const int CurrentBasis::kTradingDayFieldNumber;
const int CurrentBasis::kStampFieldNumber;
const int CurrentBasis::kDateTimeFieldNumber;
const int CurrentBasis::kCodeFieldNumber;
const int CurrentBasis::kCreateFieldNumber;
const int CurrentBasis::kBuyFieldNumber;
const int CurrentBasis::kSellFieldNumber;
const int CurrentBasis::kRedeemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CurrentBasis::CurrentBasis()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fquotation_2eproto::scc_info_CurrentBasis.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quotation.CurrentBasis)
}
CurrentBasis::CurrentBasis(const CurrentBasis& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::quotation::CurrentBasis::_i_give_permission_to_break_this_code_default_type_.get());
  if (from.has_type()) {
    type_.AssignWithDefault(&::quotation::CurrentBasis::_i_give_permission_to_break_this_code_default_type_.get(), from.type_);
  }
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  ::memcpy(&trading_day_, &from.trading_day_,
    static_cast<size_t>(reinterpret_cast<char*>(&date_time_) -
    reinterpret_cast<char*>(&trading_day_)) + sizeof(date_time_));
  // @@protoc_insertion_point(copy_constructor:quotation.CurrentBasis)
}

void CurrentBasis::SharedCtor() {
  type_.UnsafeSetDefault(&::quotation::CurrentBasis::_i_give_permission_to_break_this_code_default_type_.get());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&trading_day_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&date_time_) -
      reinterpret_cast<char*>(&trading_day_)) + sizeof(date_time_));
}

CurrentBasis::~CurrentBasis() {
  // @@protoc_insertion_point(destructor:quotation.CurrentBasis)
  SharedDtor();
}

void CurrentBasis::SharedDtor() {
  type_.DestroyNoArena(&::quotation::CurrentBasis::_i_give_permission_to_break_this_code_default_type_.get());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CurrentBasis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CurrentBasis::descriptor() {
  ::protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CurrentBasis& CurrentBasis::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fquotation_2eproto::scc_info_CurrentBasis.base);
  return *internal_default_instance();
}


void CurrentBasis::Clear() {
// @@protoc_insertion_point(message_clear_start:quotation.CurrentBasis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      type_.UnsafeMutablePointer()->assign(*&::quotation::CurrentBasis::_i_give_permission_to_break_this_code_default_type_.get());
    }
    if (cached_has_bits & 0x00000002u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&trading_day_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&redeem_) -
        reinterpret_cast<char*>(&trading_day_)) + sizeof(redeem_));
  }
  date_time_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CurrentBasis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quotation.CurrentBasis)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1 [default = "B"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.CurrentBasis.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trading_day = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_trading_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trading_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 stamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_stamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 date_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_date_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &date_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string code = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.CurrentBasis.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double create = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_create();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &create_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double buy = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_buy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &buy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double sell = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_sell();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sell_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double redeem = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_redeem();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &redeem_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quotation.CurrentBasis)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quotation.CurrentBasis)
  return false;
#undef DO_
}

void CurrentBasis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quotation.CurrentBasis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1 [default = "B"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.CurrentBasis.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional uint32 trading_day = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->trading_day(), output);
  }

  // required uint32 stamp = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stamp(), output);
  }

  // required uint32 date_time = 4;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->date_time(), output);
  }

  // required string code = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.CurrentBasis.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->code(), output);
  }

  // required double create = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->create(), output);
  }

  // required double buy = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->buy(), output);
  }

  // required double sell = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->sell(), output);
  }

  // required double redeem = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->redeem(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:quotation.CurrentBasis)
}

::google::protobuf::uint8* CurrentBasis::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quotation.CurrentBasis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1 [default = "B"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.CurrentBasis.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional uint32 trading_day = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->trading_day(), target);
  }

  // required uint32 stamp = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stamp(), target);
  }

  // required uint32 date_time = 4;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->date_time(), target);
  }

  // required string code = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.CurrentBasis.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->code(), target);
  }

  // required double create = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->create(), target);
  }

  // required double buy = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->buy(), target);
  }

  // required double sell = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->sell(), target);
  }

  // required double redeem = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->redeem(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quotation.CurrentBasis)
  return target;
}

size_t CurrentBasis::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:quotation.CurrentBasis)
  size_t total_size = 0;

  if (has_code()) {
    // required string code = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_stamp()) {
    // required uint32 stamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stamp());
  }

  if (has_create()) {
    // required double create = 6;
    total_size += 1 + 8;
  }

  if (has_buy()) {
    // required double buy = 7;
    total_size += 1 + 8;
  }

  if (has_sell()) {
    // required double sell = 8;
    total_size += 1 + 8;
  }

  if (has_redeem()) {
    // required double redeem = 9;
    total_size += 1 + 8;
  }

  if (has_date_time()) {
    // required uint32 date_time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->date_time());
  }

  return total_size;
}
size_t CurrentBasis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quotation.CurrentBasis)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000001fa) ^ 0x000001fa) == 0) {  // All required fields are present.
    // required string code = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required uint32 stamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stamp());

    // required double create = 6;
    total_size += 1 + 8;

    // required double buy = 7;
    total_size += 1 + 8;

    // required double sell = 8;
    total_size += 1 + 8;

    // required double redeem = 9;
    total_size += 1 + 8;

    // required uint32 date_time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->date_time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string type = 1 [default = "B"];
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // optional uint32 trading_day = 2;
  if (has_trading_day()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->trading_day());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CurrentBasis::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quotation.CurrentBasis)
  GOOGLE_DCHECK_NE(&from, this);
  const CurrentBasis* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CurrentBasis>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quotation.CurrentBasis)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quotation.CurrentBasis)
    MergeFrom(*source);
  }
}

void CurrentBasis::MergeFrom(const CurrentBasis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quotation.CurrentBasis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_type();
      type_.AssignWithDefault(&::quotation::CurrentBasis::_i_give_permission_to_break_this_code_default_type_.get(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000004u) {
      trading_day_ = from.trading_day_;
    }
    if (cached_has_bits & 0x00000008u) {
      stamp_ = from.stamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      create_ = from.create_;
    }
    if (cached_has_bits & 0x00000020u) {
      buy_ = from.buy_;
    }
    if (cached_has_bits & 0x00000040u) {
      sell_ = from.sell_;
    }
    if (cached_has_bits & 0x00000080u) {
      redeem_ = from.redeem_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_date_time(from.date_time());
  }
}

void CurrentBasis::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quotation.CurrentBasis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrentBasis::CopyFrom(const CurrentBasis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quotation.CurrentBasis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentBasis::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001fa) != 0x000001fa) return false;
  return true;
}

void CurrentBasis::Swap(CurrentBasis* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CurrentBasis::InternalSwap(CurrentBasis* other) {
  using std::swap;
  type_.Swap(&other->type_, &::quotation::CurrentBasis::_i_give_permission_to_break_this_code_default_type_.get(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trading_day_, other->trading_day_);
  swap(stamp_, other->stamp_);
  swap(create_, other->create_);
  swap(buy_, other->buy_);
  swap(sell_, other->sell_);
  swap(redeem_, other->redeem_);
  swap(date_time_, other->date_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CurrentBasis::GetMetadata() const {
  protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CircleQuotation::InitAsDefaultInstance() {
}
::google::protobuf::internal::ExplicitlyConstructed<::std::string> CircleQuotation::_i_give_permission_to_break_this_code_default_type_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CircleQuotation::kTypeFieldNumber;
const int CircleQuotation::kTradingDayFieldNumber;
const int CircleQuotation::kStampFieldNumber;
const int CircleQuotation::kFuncidFieldNumber;
const int CircleQuotation::kCodeFieldNumber;
const int CircleQuotation::kCircleFieldNumber;
const int CircleQuotation::kOpenFieldNumber;
const int CircleQuotation::kHighFieldNumber;
const int CircleQuotation::kLowFieldNumber;
const int CircleQuotation::kCloseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CircleQuotation::CircleQuotation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fquotation_2eproto::scc_info_CircleQuotation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quotation.CircleQuotation)
}
CircleQuotation::CircleQuotation(const CircleQuotation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::quotation::CircleQuotation::_i_give_permission_to_break_this_code_default_type_.get());
  if (from.has_type()) {
    type_.AssignWithDefault(&::quotation::CircleQuotation::_i_give_permission_to_break_this_code_default_type_.get(), from.type_);
  }
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  ::memcpy(&trading_day_, &from.trading_day_,
    static_cast<size_t>(reinterpret_cast<char*>(&funcid_) -
    reinterpret_cast<char*>(&trading_day_)) + sizeof(funcid_));
  // @@protoc_insertion_point(copy_constructor:quotation.CircleQuotation)
}

void CircleQuotation::SharedCtor() {
  type_.UnsafeSetDefault(&::quotation::CircleQuotation::_i_give_permission_to_break_this_code_default_type_.get());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&trading_day_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&circle_) -
      reinterpret_cast<char*>(&trading_day_)) + sizeof(circle_));
  funcid_ = 10000004;
}

CircleQuotation::~CircleQuotation() {
  // @@protoc_insertion_point(destructor:quotation.CircleQuotation)
  SharedDtor();
}

void CircleQuotation::SharedDtor() {
  type_.DestroyNoArena(&::quotation::CircleQuotation::_i_give_permission_to_break_this_code_default_type_.get());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CircleQuotation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CircleQuotation::descriptor() {
  ::protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CircleQuotation& CircleQuotation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fquotation_2eproto::scc_info_CircleQuotation.base);
  return *internal_default_instance();
}


void CircleQuotation::Clear() {
// @@protoc_insertion_point(message_clear_start:quotation.CircleQuotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      type_.UnsafeMutablePointer()->assign(*&::quotation::CircleQuotation::_i_give_permission_to_break_this_code_default_type_.get());
    }
    if (cached_has_bits & 0x00000002u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&trading_day_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&close_) -
        reinterpret_cast<char*>(&trading_day_)) + sizeof(close_));
  }
  if (cached_has_bits & 768u) {
    circle_ = 0;
    funcid_ = 10000004;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CircleQuotation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quotation.CircleQuotation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1 [default = "CIRCLE"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.CircleQuotation.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trading_day = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_trading_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trading_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 stamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_stamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 funcid = 4 [default = 10000004];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string code = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.CircleQuotation.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 circle = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_circle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &circle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 open = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_open();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 high = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_high();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &high_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 low = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_low();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &low_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 close = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_close();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &close_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quotation.CircleQuotation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quotation.CircleQuotation)
  return false;
#undef DO_
}

void CircleQuotation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quotation.CircleQuotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1 [default = "CIRCLE"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.CircleQuotation.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional uint32 trading_day = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->trading_day(), output);
  }

  // required uint32 stamp = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stamp(), output);
  }

  // optional int32 funcid = 4 [default = 10000004];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->funcid(), output);
  }

  // required string code = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.CircleQuotation.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->code(), output);
  }

  // required int32 circle = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->circle(), output);
  }

  // required int64 open = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->open(), output);
  }

  // required int64 high = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->high(), output);
  }

  // required int64 low = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->low(), output);
  }

  // required int64 close = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->close(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:quotation.CircleQuotation)
}

::google::protobuf::uint8* CircleQuotation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quotation.CircleQuotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1 [default = "CIRCLE"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.CircleQuotation.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional uint32 trading_day = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->trading_day(), target);
  }

  // required uint32 stamp = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stamp(), target);
  }

  // optional int32 funcid = 4 [default = 10000004];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->funcid(), target);
  }

  // required string code = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.CircleQuotation.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->code(), target);
  }

  // required int32 circle = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->circle(), target);
  }

  // required int64 open = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->open(), target);
  }

  // required int64 high = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->high(), target);
  }

  // required int64 low = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->low(), target);
  }

  // required int64 close = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->close(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quotation.CircleQuotation)
  return target;
}

size_t CircleQuotation::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:quotation.CircleQuotation)
  size_t total_size = 0;

  if (has_code()) {
    // required string code = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_stamp()) {
    // required uint32 stamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stamp());
  }

  if (has_open()) {
    // required int64 open = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->open());
  }

  if (has_high()) {
    // required int64 high = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->high());
  }

  if (has_low()) {
    // required int64 low = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->low());
  }

  if (has_close()) {
    // required int64 close = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->close());
  }

  if (has_circle()) {
    // required int32 circle = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->circle());
  }

  return total_size;
}
size_t CircleQuotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quotation.CircleQuotation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000001fa) ^ 0x000001fa) == 0) {  // All required fields are present.
    // required string code = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required uint32 stamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stamp());

    // required int64 open = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->open());

    // required int64 high = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->high());

    // required int64 low = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->low());

    // required int64 close = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->close());

    // required int32 circle = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->circle());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string type = 1 [default = "CIRCLE"];
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // optional uint32 trading_day = 2;
  if (has_trading_day()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->trading_day());
  }

  // optional int32 funcid = 4 [default = 10000004];
  if (has_funcid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->funcid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CircleQuotation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quotation.CircleQuotation)
  GOOGLE_DCHECK_NE(&from, this);
  const CircleQuotation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CircleQuotation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quotation.CircleQuotation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quotation.CircleQuotation)
    MergeFrom(*source);
  }
}

void CircleQuotation::MergeFrom(const CircleQuotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quotation.CircleQuotation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_type();
      type_.AssignWithDefault(&::quotation::CircleQuotation::_i_give_permission_to_break_this_code_default_type_.get(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000004u) {
      trading_day_ = from.trading_day_;
    }
    if (cached_has_bits & 0x00000008u) {
      stamp_ = from.stamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      open_ = from.open_;
    }
    if (cached_has_bits & 0x00000020u) {
      high_ = from.high_;
    }
    if (cached_has_bits & 0x00000040u) {
      low_ = from.low_;
    }
    if (cached_has_bits & 0x00000080u) {
      close_ = from.close_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      circle_ = from.circle_;
    }
    if (cached_has_bits & 0x00000200u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CircleQuotation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quotation.CircleQuotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CircleQuotation::CopyFrom(const CircleQuotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quotation.CircleQuotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CircleQuotation::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001fa) != 0x000001fa) return false;
  return true;
}

void CircleQuotation::Swap(CircleQuotation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CircleQuotation::InternalSwap(CircleQuotation* other) {
  using std::swap;
  type_.Swap(&other->type_, &::quotation::CircleQuotation::_i_give_permission_to_break_this_code_default_type_.get(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trading_day_, other->trading_day_);
  swap(stamp_, other->stamp_);
  swap(open_, other->open_);
  swap(high_, other->high_);
  swap(low_, other->low_);
  swap(close_, other->close_);
  swap(circle_, other->circle_);
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CircleQuotation::GetMetadata() const {
  protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OptionVolatilitySurface_Value::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionVolatilitySurface_Value::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionVolatilitySurface_Value::OptionVolatilitySurface_Value()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fquotation_2eproto::scc_info_OptionVolatilitySurface_Value.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quotation.OptionVolatilitySurface.Value)
}
OptionVolatilitySurface_Value::OptionVolatilitySurface_Value(const OptionVolatilitySurface_Value& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      value_(from.value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:quotation.OptionVolatilitySurface.Value)
}

void OptionVolatilitySurface_Value::SharedCtor() {
}

OptionVolatilitySurface_Value::~OptionVolatilitySurface_Value() {
  // @@protoc_insertion_point(destructor:quotation.OptionVolatilitySurface.Value)
  SharedDtor();
}

void OptionVolatilitySurface_Value::SharedDtor() {
}

void OptionVolatilitySurface_Value::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OptionVolatilitySurface_Value::descriptor() {
  ::protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OptionVolatilitySurface_Value& OptionVolatilitySurface_Value::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fquotation_2eproto::scc_info_OptionVolatilitySurface_Value.base);
  return *internal_default_instance();
}


void OptionVolatilitySurface_Value::Clear() {
// @@protoc_insertion_point(message_clear_start:quotation.OptionVolatilitySurface.Value)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OptionVolatilitySurface_Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quotation.OptionVolatilitySurface.Value)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9u, input, this->mutable_value())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quotation.OptionVolatilitySurface.Value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quotation.OptionVolatilitySurface.Value)
  return false;
#undef DO_
}

void OptionVolatilitySurface_Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quotation.OptionVolatilitySurface.Value)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double value = 1;
  for (int i = 0, n = this->value_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->value(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:quotation.OptionVolatilitySurface.Value)
}

::google::protobuf::uint8* OptionVolatilitySurface_Value::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quotation.OptionVolatilitySurface.Value)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double value = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(1, this->value_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quotation.OptionVolatilitySurface.Value)
  return target;
}

size_t OptionVolatilitySurface_Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quotation.OptionVolatilitySurface.Value)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated double value = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->value_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->value_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionVolatilitySurface_Value::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quotation.OptionVolatilitySurface.Value)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionVolatilitySurface_Value* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionVolatilitySurface_Value>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quotation.OptionVolatilitySurface.Value)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quotation.OptionVolatilitySurface.Value)
    MergeFrom(*source);
  }
}

void OptionVolatilitySurface_Value::MergeFrom(const OptionVolatilitySurface_Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quotation.OptionVolatilitySurface.Value)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void OptionVolatilitySurface_Value::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quotation.OptionVolatilitySurface.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionVolatilitySurface_Value::CopyFrom(const OptionVolatilitySurface_Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quotation.OptionVolatilitySurface.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionVolatilitySurface_Value::IsInitialized() const {
  return true;
}

void OptionVolatilitySurface_Value::Swap(OptionVolatilitySurface_Value* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionVolatilitySurface_Value::InternalSwap(OptionVolatilitySurface_Value* other) {
  using std::swap;
  value_.InternalSwap(&other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OptionVolatilitySurface_Value::GetMetadata() const {
  protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OptionVolatilitySurface::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionVolatilitySurface::kIdFieldNumber;
const int OptionVolatilitySurface::kXFieldNumber;
const int OptionVolatilitySurface::kYFieldNumber;
const int OptionVolatilitySurface::kVFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionVolatilitySurface::OptionVolatilitySurface()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fquotation_2eproto::scc_info_OptionVolatilitySurface.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quotation.OptionVolatilitySurface)
}
OptionVolatilitySurface::OptionVolatilitySurface(const OptionVolatilitySurface& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      x_(from.x_),
      y_(from.y_),
      v_(from.v_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:quotation.OptionVolatilitySurface)
}

void OptionVolatilitySurface::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

OptionVolatilitySurface::~OptionVolatilitySurface() {
  // @@protoc_insertion_point(destructor:quotation.OptionVolatilitySurface)
  SharedDtor();
}

void OptionVolatilitySurface::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OptionVolatilitySurface::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OptionVolatilitySurface::descriptor() {
  ::protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OptionVolatilitySurface& OptionVolatilitySurface::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fquotation_2eproto::scc_info_OptionVolatilitySurface.base);
  return *internal_default_instance();
}


void OptionVolatilitySurface::Clear() {
// @@protoc_insertion_point(message_clear_start:quotation.OptionVolatilitySurface)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  x_.Clear();
  y_.Clear();
  v_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OptionVolatilitySurface::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quotation.OptionVolatilitySurface)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.OptionVolatilitySurface.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17u, input, this->mutable_x())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_x())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_y())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_y())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .quotation.OptionVolatilitySurface.Value v = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_v()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quotation.OptionVolatilitySurface)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quotation.OptionVolatilitySurface)
  return false;
#undef DO_
}

void OptionVolatilitySurface::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quotation.OptionVolatilitySurface)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.OptionVolatilitySurface.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // repeated double x = 2;
  for (int i = 0, n = this->x_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->x(i), output);
  }

  // repeated uint32 y = 3;
  for (int i = 0, n = this->y_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->y(i), output);
  }

  // repeated .quotation.OptionVolatilitySurface.Value v = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->v_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->v(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:quotation.OptionVolatilitySurface)
}

::google::protobuf::uint8* OptionVolatilitySurface::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quotation.OptionVolatilitySurface)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.OptionVolatilitySurface.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated double x = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(2, this->x_, target);

  // repeated uint32 y = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->y_, target);

  // repeated .quotation.OptionVolatilitySurface.Value v = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->v_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->v(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quotation.OptionVolatilitySurface)
  return target;
}

size_t OptionVolatilitySurface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quotation.OptionVolatilitySurface)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }
  // repeated double x = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->x_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->x_size());
    total_size += data_size;
  }

  // repeated uint32 y = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->y_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->y_size());
    total_size += data_size;
  }

  // repeated .quotation.OptionVolatilitySurface.Value v = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->v_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->v(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionVolatilitySurface::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quotation.OptionVolatilitySurface)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionVolatilitySurface* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionVolatilitySurface>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quotation.OptionVolatilitySurface)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quotation.OptionVolatilitySurface)
    MergeFrom(*source);
  }
}

void OptionVolatilitySurface::MergeFrom(const OptionVolatilitySurface& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quotation.OptionVolatilitySurface)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  x_.MergeFrom(from.x_);
  y_.MergeFrom(from.y_);
  v_.MergeFrom(from.v_);
  if (from.has_id()) {
    set_has_id();
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void OptionVolatilitySurface::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quotation.OptionVolatilitySurface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionVolatilitySurface::CopyFrom(const OptionVolatilitySurface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quotation.OptionVolatilitySurface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionVolatilitySurface::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void OptionVolatilitySurface::Swap(OptionVolatilitySurface* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionVolatilitySurface::InternalSwap(OptionVolatilitySurface* other) {
  using std::swap;
  x_.InternalSwap(&other->x_);
  y_.InternalSwap(&other->y_);
  CastToBase(&v_)->InternalSwap(CastToBase(&other->v_));
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OptionVolatilitySurface::GetMetadata() const {
  protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OptionVolatilitySurfaces::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionVolatilitySurfaces::kUnderlyingCodeFieldNumber;
const int OptionVolatilitySurfaces::kItemsFieldNumber;
const int OptionVolatilitySurfaces::kDefaultIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionVolatilitySurfaces::OptionVolatilitySurfaces()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fquotation_2eproto::scc_info_OptionVolatilitySurfaces.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quotation.OptionVolatilitySurfaces)
}
OptionVolatilitySurfaces::OptionVolatilitySurfaces(const OptionVolatilitySurfaces& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  underlying_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_underlying_code()) {
    underlying_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.underlying_code_);
  }
  default_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_default_id()) {
    default_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.default_id_);
  }
  // @@protoc_insertion_point(copy_constructor:quotation.OptionVolatilitySurfaces)
}

void OptionVolatilitySurfaces::SharedCtor() {
  underlying_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  default_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

OptionVolatilitySurfaces::~OptionVolatilitySurfaces() {
  // @@protoc_insertion_point(destructor:quotation.OptionVolatilitySurfaces)
  SharedDtor();
}

void OptionVolatilitySurfaces::SharedDtor() {
  underlying_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  default_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OptionVolatilitySurfaces::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OptionVolatilitySurfaces::descriptor() {
  ::protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OptionVolatilitySurfaces& OptionVolatilitySurfaces::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fquotation_2eproto::scc_info_OptionVolatilitySurfaces.base);
  return *internal_default_instance();
}


void OptionVolatilitySurfaces::Clear() {
// @@protoc_insertion_point(message_clear_start:quotation.OptionVolatilitySurfaces)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      underlying_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      default_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OptionVolatilitySurfaces::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quotation.OptionVolatilitySurfaces)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string underlying_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->underlying_code().data(), static_cast<int>(this->underlying_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.OptionVolatilitySurfaces.underlying_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .quotation.OptionVolatilitySurface items = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string default_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_default_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->default_id().data(), static_cast<int>(this->default_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.OptionVolatilitySurfaces.default_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quotation.OptionVolatilitySurfaces)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quotation.OptionVolatilitySurfaces)
  return false;
#undef DO_
}

void OptionVolatilitySurfaces::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quotation.OptionVolatilitySurfaces)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string underlying_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->underlying_code().data(), static_cast<int>(this->underlying_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.OptionVolatilitySurfaces.underlying_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->underlying_code(), output);
  }

  // repeated .quotation.OptionVolatilitySurface items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->items(static_cast<int>(i)),
      output);
  }

  // optional string default_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->default_id().data(), static_cast<int>(this->default_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.OptionVolatilitySurfaces.default_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->default_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:quotation.OptionVolatilitySurfaces)
}

::google::protobuf::uint8* OptionVolatilitySurfaces::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quotation.OptionVolatilitySurfaces)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string underlying_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->underlying_code().data(), static_cast<int>(this->underlying_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.OptionVolatilitySurfaces.underlying_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->underlying_code(), target);
  }

  // repeated .quotation.OptionVolatilitySurface items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->items(static_cast<int>(i)), deterministic, target);
  }

  // optional string default_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->default_id().data(), static_cast<int>(this->default_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.OptionVolatilitySurfaces.default_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->default_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quotation.OptionVolatilitySurfaces)
  return target;
}

size_t OptionVolatilitySurfaces::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quotation.OptionVolatilitySurfaces)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string underlying_code = 1;
  if (has_underlying_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->underlying_code());
  }
  // repeated .quotation.OptionVolatilitySurface items = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->items(static_cast<int>(i)));
    }
  }

  // optional string default_id = 3;
  if (has_default_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->default_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionVolatilitySurfaces::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quotation.OptionVolatilitySurfaces)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionVolatilitySurfaces* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionVolatilitySurfaces>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quotation.OptionVolatilitySurfaces)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quotation.OptionVolatilitySurfaces)
    MergeFrom(*source);
  }
}

void OptionVolatilitySurfaces::MergeFrom(const OptionVolatilitySurfaces& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quotation.OptionVolatilitySurfaces)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_underlying_code();
      underlying_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.underlying_code_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_default_id();
      default_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.default_id_);
    }
  }
}

void OptionVolatilitySurfaces::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quotation.OptionVolatilitySurfaces)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionVolatilitySurfaces::CopyFrom(const OptionVolatilitySurfaces& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quotation.OptionVolatilitySurfaces)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionVolatilitySurfaces::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void OptionVolatilitySurfaces::Swap(OptionVolatilitySurfaces* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionVolatilitySurfaces::InternalSwap(OptionVolatilitySurfaces* other) {
  using std::swap;
  CastToBase(&items_)->InternalSwap(CastToBase(&other->items_));
  underlying_code_.Swap(&other->underlying_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  default_id_.Swap(&other->default_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OptionVolatilitySurfaces::GetMetadata() const {
  protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SetOptionVolatilitySurfacesReq::InitAsDefaultInstance() {
  ::quotation::_SetOptionVolatilitySurfacesReq_default_instance_._instance.get_mutable()->data_ = const_cast< ::quotation::OptionVolatilitySurfaces*>(
      ::quotation::OptionVolatilitySurfaces::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetOptionVolatilitySurfacesReq::kFuncidFieldNumber;
const int SetOptionVolatilitySurfacesReq::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetOptionVolatilitySurfacesReq::SetOptionVolatilitySurfacesReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fquotation_2eproto::scc_info_SetOptionVolatilitySurfacesReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quotation.SetOptionVolatilitySurfacesReq)
}
SetOptionVolatilitySurfacesReq::SetOptionVolatilitySurfacesReq(const SetOptionVolatilitySurfacesReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::quotation::OptionVolatilitySurfaces(*from.data_);
  } else {
    data_ = NULL;
  }
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:quotation.SetOptionVolatilitySurfacesReq)
}

void SetOptionVolatilitySurfacesReq::SharedCtor() {
  data_ = NULL;
  funcid_ = 21000001;
}

SetOptionVolatilitySurfacesReq::~SetOptionVolatilitySurfacesReq() {
  // @@protoc_insertion_point(destructor:quotation.SetOptionVolatilitySurfacesReq)
  SharedDtor();
}

void SetOptionVolatilitySurfacesReq::SharedDtor() {
  if (this != internal_default_instance()) delete data_;
}

void SetOptionVolatilitySurfacesReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SetOptionVolatilitySurfacesReq::descriptor() {
  ::protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetOptionVolatilitySurfacesReq& SetOptionVolatilitySurfacesReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fquotation_2eproto::scc_info_SetOptionVolatilitySurfacesReq.base);
  return *internal_default_instance();
}


void SetOptionVolatilitySurfacesReq::Clear() {
// @@protoc_insertion_point(message_clear_start:quotation.SetOptionVolatilitySurfacesReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(data_ != NULL);
      data_->Clear();
    }
    funcid_ = 21000001;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SetOptionVolatilitySurfacesReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quotation.SetOptionVolatilitySurfacesReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 21000001];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .quotation.OptionVolatilitySurfaces data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quotation.SetOptionVolatilitySurfacesReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quotation.SetOptionVolatilitySurfacesReq)
  return false;
#undef DO_
}

void SetOptionVolatilitySurfacesReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quotation.SetOptionVolatilitySurfacesReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 21000001];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // required .quotation.OptionVolatilitySurfaces data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:quotation.SetOptionVolatilitySurfacesReq)
}

::google::protobuf::uint8* SetOptionVolatilitySurfacesReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quotation.SetOptionVolatilitySurfacesReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 21000001];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // required .quotation.OptionVolatilitySurfaces data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_data(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quotation.SetOptionVolatilitySurfacesReq)
  return target;
}

size_t SetOptionVolatilitySurfacesReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quotation.SetOptionVolatilitySurfacesReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .quotation.OptionVolatilitySurfaces data = 2;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *data_);
  }
  // optional int32 funcid = 1 [default = 21000001];
  if (has_funcid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->funcid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetOptionVolatilitySurfacesReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quotation.SetOptionVolatilitySurfacesReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetOptionVolatilitySurfacesReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetOptionVolatilitySurfacesReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quotation.SetOptionVolatilitySurfacesReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quotation.SetOptionVolatilitySurfacesReq)
    MergeFrom(*source);
  }
}

void SetOptionVolatilitySurfacesReq::MergeFrom(const SetOptionVolatilitySurfacesReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quotation.SetOptionVolatilitySurfacesReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_data()->::quotation::OptionVolatilitySurfaces::MergeFrom(from.data());
    }
    if (cached_has_bits & 0x00000002u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SetOptionVolatilitySurfacesReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quotation.SetOptionVolatilitySurfacesReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetOptionVolatilitySurfacesReq::CopyFrom(const SetOptionVolatilitySurfacesReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quotation.SetOptionVolatilitySurfacesReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetOptionVolatilitySurfacesReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_data()) {
    if (!this->data_->IsInitialized()) return false;
  }
  return true;
}

void SetOptionVolatilitySurfacesReq::Swap(SetOptionVolatilitySurfacesReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetOptionVolatilitySurfacesReq::InternalSwap(SetOptionVolatilitySurfacesReq* other) {
  using std::swap;
  swap(data_, other->data_);
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SetOptionVolatilitySurfacesReq::GetMetadata() const {
  protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SetOptionVolatilitySurfacesRep::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetOptionVolatilitySurfacesRep::kFuncidFieldNumber;
const int SetOptionVolatilitySurfacesRep::kRcFieldNumber;
const int SetOptionVolatilitySurfacesRep::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetOptionVolatilitySurfacesRep::SetOptionVolatilitySurfacesRep()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fquotation_2eproto::scc_info_SetOptionVolatilitySurfacesRep.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quotation.SetOptionVolatilitySurfacesRep)
}
SetOptionVolatilitySurfacesRep::SetOptionVolatilitySurfacesRep(const SetOptionVolatilitySurfacesRep& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg()) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&rc_, &from.rc_,
    static_cast<size_t>(reinterpret_cast<char*>(&funcid_) -
    reinterpret_cast<char*>(&rc_)) + sizeof(funcid_));
  // @@protoc_insertion_point(copy_constructor:quotation.SetOptionVolatilitySurfacesRep)
}

void SetOptionVolatilitySurfacesRep::SharedCtor() {
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rc_ = GOOGLE_LONGLONG(0);
  funcid_ = 21100001;
}

SetOptionVolatilitySurfacesRep::~SetOptionVolatilitySurfacesRep() {
  // @@protoc_insertion_point(destructor:quotation.SetOptionVolatilitySurfacesRep)
  SharedDtor();
}

void SetOptionVolatilitySurfacesRep::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SetOptionVolatilitySurfacesRep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SetOptionVolatilitySurfacesRep::descriptor() {
  ::protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetOptionVolatilitySurfacesRep& SetOptionVolatilitySurfacesRep::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fquotation_2eproto::scc_info_SetOptionVolatilitySurfacesRep.base);
  return *internal_default_instance();
}


void SetOptionVolatilitySurfacesRep::Clear() {
// @@protoc_insertion_point(message_clear_start:quotation.SetOptionVolatilitySurfacesRep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    msg_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    rc_ = GOOGLE_LONGLONG(0);
    funcid_ = 21100001;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SetOptionVolatilitySurfacesRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quotation.SetOptionVolatilitySurfacesRep)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 21100001];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 rc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_rc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string msg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.SetOptionVolatilitySurfacesRep.msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quotation.SetOptionVolatilitySurfacesRep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quotation.SetOptionVolatilitySurfacesRep)
  return false;
#undef DO_
}

void SetOptionVolatilitySurfacesRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quotation.SetOptionVolatilitySurfacesRep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 21100001];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional int64 rc = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->rc(), output);
  }

  // optional string msg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.SetOptionVolatilitySurfacesRep.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:quotation.SetOptionVolatilitySurfacesRep)
}

::google::protobuf::uint8* SetOptionVolatilitySurfacesRep::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quotation.SetOptionVolatilitySurfacesRep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 21100001];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional int64 rc = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->rc(), target);
  }

  // optional string msg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.SetOptionVolatilitySurfacesRep.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quotation.SetOptionVolatilitySurfacesRep)
  return target;
}

size_t SetOptionVolatilitySurfacesRep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quotation.SetOptionVolatilitySurfacesRep)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional int64 rc = 2;
    if (has_rc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rc());
    }

    // optional int32 funcid = 1 [default = 21100001];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetOptionVolatilitySurfacesRep::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quotation.SetOptionVolatilitySurfacesRep)
  GOOGLE_DCHECK_NE(&from, this);
  const SetOptionVolatilitySurfacesRep* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetOptionVolatilitySurfacesRep>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quotation.SetOptionVolatilitySurfacesRep)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quotation.SetOptionVolatilitySurfacesRep)
    MergeFrom(*source);
  }
}

void SetOptionVolatilitySurfacesRep::MergeFrom(const SetOptionVolatilitySurfacesRep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quotation.SetOptionVolatilitySurfacesRep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      rc_ = from.rc_;
    }
    if (cached_has_bits & 0x00000004u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SetOptionVolatilitySurfacesRep::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quotation.SetOptionVolatilitySurfacesRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetOptionVolatilitySurfacesRep::CopyFrom(const SetOptionVolatilitySurfacesRep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quotation.SetOptionVolatilitySurfacesRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetOptionVolatilitySurfacesRep::IsInitialized() const {
  return true;
}

void SetOptionVolatilitySurfacesRep::Swap(SetOptionVolatilitySurfacesRep* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetOptionVolatilitySurfacesRep::InternalSwap(SetOptionVolatilitySurfacesRep* other) {
  using std::swap;
  msg_.Swap(&other->msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rc_, other->rc_);
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SetOptionVolatilitySurfacesRep::GetMetadata() const {
  protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SecurityState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SecurityState::kCodeFieldNumber;
const int SecurityState::kNameFieldNumber;
const int SecurityState::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SecurityState::SecurityState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fquotation_2eproto::scc_info_SecurityState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quotation.SecurityState)
}
SecurityState::SecurityState(const SecurityState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:quotation.SecurityState)
}

void SecurityState::SharedCtor() {
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0u;
}

SecurityState::~SecurityState() {
  // @@protoc_insertion_point(destructor:quotation.SecurityState)
  SharedDtor();
}

void SecurityState::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SecurityState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SecurityState::descriptor() {
  ::protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SecurityState& SecurityState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fquotation_2eproto::scc_info_SecurityState.base);
  return *internal_default_instance();
}


void SecurityState::Clear() {
// @@protoc_insertion_point(message_clear_start:quotation.SecurityState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  state_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SecurityState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quotation.SecurityState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.SecurityState.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.SecurityState.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quotation.SecurityState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quotation.SecurityState)
  return false;
#undef DO_
}

void SecurityState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quotation.SecurityState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.SecurityState.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->code(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.SecurityState.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 state = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:quotation.SecurityState)
}

::google::protobuf::uint8* SecurityState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quotation.SecurityState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.SecurityState.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.SecurityState.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quotation.SecurityState)
  return target;
}

size_t SecurityState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quotation.SecurityState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string code = 1;
  if (has_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecurityState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quotation.SecurityState)
  GOOGLE_DCHECK_NE(&from, this);
  const SecurityState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SecurityState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quotation.SecurityState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quotation.SecurityState)
    MergeFrom(*source);
  }
}

void SecurityState::MergeFrom(const SecurityState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quotation.SecurityState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SecurityState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quotation.SecurityState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecurityState::CopyFrom(const SecurityState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quotation.SecurityState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SecurityState::Swap(SecurityState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SecurityState::InternalSwap(SecurityState* other) {
  using std::swap;
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SecurityState::GetMetadata() const {
  protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SecurityStateList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SecurityStateList::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SecurityStateList::SecurityStateList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fquotation_2eproto::scc_info_SecurityStateList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quotation.SecurityStateList)
}
SecurityStateList::SecurityStateList(const SecurityStateList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:quotation.SecurityStateList)
}

void SecurityStateList::SharedCtor() {
}

SecurityStateList::~SecurityStateList() {
  // @@protoc_insertion_point(destructor:quotation.SecurityStateList)
  SharedDtor();
}

void SecurityStateList::SharedDtor() {
}

void SecurityStateList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SecurityStateList::descriptor() {
  ::protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SecurityStateList& SecurityStateList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fquotation_2eproto::scc_info_SecurityStateList.base);
  return *internal_default_instance();
}


void SecurityStateList::Clear() {
// @@protoc_insertion_point(message_clear_start:quotation.SecurityStateList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SecurityStateList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quotation.SecurityStateList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .quotation.SecurityState items = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quotation.SecurityStateList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quotation.SecurityStateList)
  return false;
#undef DO_
}

void SecurityStateList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quotation.SecurityStateList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .quotation.SecurityState items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->items(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:quotation.SecurityStateList)
}

::google::protobuf::uint8* SecurityStateList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quotation.SecurityStateList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .quotation.SecurityState items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->items(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quotation.SecurityStateList)
  return target;
}

size_t SecurityStateList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quotation.SecurityStateList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .quotation.SecurityState items = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->items(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecurityStateList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quotation.SecurityStateList)
  GOOGLE_DCHECK_NE(&from, this);
  const SecurityStateList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SecurityStateList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quotation.SecurityStateList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quotation.SecurityStateList)
    MergeFrom(*source);
  }
}

void SecurityStateList::MergeFrom(const SecurityStateList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quotation.SecurityStateList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void SecurityStateList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quotation.SecurityStateList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecurityStateList::CopyFrom(const SecurityStateList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quotation.SecurityStateList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityStateList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void SecurityStateList::Swap(SecurityStateList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SecurityStateList::InternalSwap(SecurityStateList* other) {
  using std::swap;
  CastToBase(&items_)->InternalSwap(CastToBase(&other->items_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SecurityStateList::GetMetadata() const {
  protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TradingDay::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradingDay::kDataDateFieldNumber;
const int TradingDay::kWeekdayFieldNumber;
const int TradingDay::kIsTradingDayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradingDay::TradingDay()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fquotation_2eproto::scc_info_TradingDay.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quotation.TradingDay)
}
TradingDay::TradingDay(const TradingDay& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&data_date_, &from.data_date_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_trading_day_) -
    reinterpret_cast<char*>(&data_date_)) + sizeof(is_trading_day_));
  // @@protoc_insertion_point(copy_constructor:quotation.TradingDay)
}

void TradingDay::SharedCtor() {
  ::memset(&data_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_trading_day_) -
      reinterpret_cast<char*>(&data_date_)) + sizeof(is_trading_day_));
}

TradingDay::~TradingDay() {
  // @@protoc_insertion_point(destructor:quotation.TradingDay)
  SharedDtor();
}

void TradingDay::SharedDtor() {
}

void TradingDay::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TradingDay::descriptor() {
  ::protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TradingDay& TradingDay::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fquotation_2eproto::scc_info_TradingDay.base);
  return *internal_default_instance();
}


void TradingDay::Clear() {
// @@protoc_insertion_point(message_clear_start:quotation.TradingDay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&data_date_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_trading_day_) -
        reinterpret_cast<char*>(&data_date_)) + sizeof(is_trading_day_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TradingDay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quotation.TradingDay)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 data_date = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_data_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 weekday = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_weekday();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weekday_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 is_trading_day = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_is_trading_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_trading_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quotation.TradingDay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quotation.TradingDay)
  return false;
#undef DO_
}

void TradingDay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quotation.TradingDay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 data_date = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->data_date(), output);
  }

  // optional int32 weekday = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->weekday(), output);
  }

  // optional int32 is_trading_day = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->is_trading_day(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:quotation.TradingDay)
}

::google::protobuf::uint8* TradingDay::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quotation.TradingDay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 data_date = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->data_date(), target);
  }

  // optional int32 weekday = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->weekday(), target);
  }

  // optional int32 is_trading_day = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->is_trading_day(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quotation.TradingDay)
  return target;
}

size_t TradingDay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quotation.TradingDay)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 data_date = 1;
  if (has_data_date()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->data_date());
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional int32 weekday = 2;
    if (has_weekday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weekday());
    }

    // optional int32 is_trading_day = 3;
    if (has_is_trading_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_trading_day());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradingDay::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quotation.TradingDay)
  GOOGLE_DCHECK_NE(&from, this);
  const TradingDay* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TradingDay>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quotation.TradingDay)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quotation.TradingDay)
    MergeFrom(*source);
  }
}

void TradingDay::MergeFrom(const TradingDay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quotation.TradingDay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      data_date_ = from.data_date_;
    }
    if (cached_has_bits & 0x00000002u) {
      weekday_ = from.weekday_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_trading_day_ = from.is_trading_day_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TradingDay::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quotation.TradingDay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradingDay::CopyFrom(const TradingDay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quotation.TradingDay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradingDay::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void TradingDay::Swap(TradingDay* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TradingDay::InternalSwap(TradingDay* other) {
  using std::swap;
  swap(data_date_, other->data_date_);
  swap(weekday_, other->weekday_);
  swap(is_trading_day_, other->is_trading_day_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TradingDay::GetMetadata() const {
  protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EtfConstituentStock::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EtfConstituentStock::kStockIdFieldNumber;
const int EtfConstituentStock::kStockNameFieldNumber;
const int EtfConstituentStock::kMarketFieldNumber;
const int EtfConstituentStock::kVolumeFieldNumber;
const int EtfConstituentStock::kCashReplaceFlagFieldNumber;
const int EtfConstituentStock::kCashReplacePremiumRateFieldNumber;
const int EtfConstituentStock::kCashReplaceAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EtfConstituentStock::EtfConstituentStock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fquotation_2eproto::scc_info_EtfConstituentStock.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quotation.EtfConstituentStock)
}
EtfConstituentStock::EtfConstituentStock(const EtfConstituentStock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stock_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_stock_id()) {
    stock_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stock_id_);
  }
  stock_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_stock_name()) {
    stock_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stock_name_);
  }
  ::memcpy(&volume_, &from.volume_,
    static_cast<size_t>(reinterpret_cast<char*>(&cash_replace_amount_) -
    reinterpret_cast<char*>(&volume_)) + sizeof(cash_replace_amount_));
  // @@protoc_insertion_point(copy_constructor:quotation.EtfConstituentStock)
}

void EtfConstituentStock::SharedCtor() {
  stock_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stock_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&volume_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cash_replace_amount_) -
      reinterpret_cast<char*>(&volume_)) + sizeof(cash_replace_amount_));
}

EtfConstituentStock::~EtfConstituentStock() {
  // @@protoc_insertion_point(destructor:quotation.EtfConstituentStock)
  SharedDtor();
}

void EtfConstituentStock::SharedDtor() {
  stock_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stock_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EtfConstituentStock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EtfConstituentStock::descriptor() {
  ::protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EtfConstituentStock& EtfConstituentStock::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fquotation_2eproto::scc_info_EtfConstituentStock.base);
  return *internal_default_instance();
}


void EtfConstituentStock::Clear() {
// @@protoc_insertion_point(message_clear_start:quotation.EtfConstituentStock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      stock_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      stock_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 124u) {
    ::memset(&volume_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cash_replace_amount_) -
        reinterpret_cast<char*>(&volume_)) + sizeof(cash_replace_amount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EtfConstituentStock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quotation.EtfConstituentStock)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string stock_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stock_id().data(), static_cast<int>(this->stock_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.EtfConstituentStock.stock_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string stock_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stock_name().data(), static_cast<int>(this->stock_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.EtfConstituentStock.stock_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 market = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_market();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &market_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 volume = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cash_replace_flag = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_cash_replace_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cash_replace_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cash_replace_premium_rate = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_cash_replace_premium_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cash_replace_premium_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cash_replace_amount = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_cash_replace_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cash_replace_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quotation.EtfConstituentStock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quotation.EtfConstituentStock)
  return false;
#undef DO_
}

void EtfConstituentStock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quotation.EtfConstituentStock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string stock_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stock_id().data(), static_cast<int>(this->stock_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.EtfConstituentStock.stock_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stock_id(), output);
  }

  // optional string stock_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stock_name().data(), static_cast<int>(this->stock_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.EtfConstituentStock.stock_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stock_name(), output);
  }

  // optional int32 market = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->market(), output);
  }

  // optional int64 volume = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->volume(), output);
  }

  // optional int32 cash_replace_flag = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cash_replace_flag(), output);
  }

  // optional double cash_replace_premium_rate = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->cash_replace_premium_rate(), output);
  }

  // optional double cash_replace_amount = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->cash_replace_amount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:quotation.EtfConstituentStock)
}

::google::protobuf::uint8* EtfConstituentStock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quotation.EtfConstituentStock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string stock_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stock_id().data(), static_cast<int>(this->stock_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.EtfConstituentStock.stock_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stock_id(), target);
  }

  // optional string stock_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stock_name().data(), static_cast<int>(this->stock_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.EtfConstituentStock.stock_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stock_name(), target);
  }

  // optional int32 market = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->market(), target);
  }

  // optional int64 volume = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->volume(), target);
  }

  // optional int32 cash_replace_flag = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cash_replace_flag(), target);
  }

  // optional double cash_replace_premium_rate = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->cash_replace_premium_rate(), target);
  }

  // optional double cash_replace_amount = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->cash_replace_amount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quotation.EtfConstituentStock)
  return target;
}

size_t EtfConstituentStock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quotation.EtfConstituentStock)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string stock_id = 1;
  if (has_stock_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stock_id());
  }
  if (_has_bits_[0 / 32] & 126u) {
    // optional string stock_name = 2;
    if (has_stock_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_name());
    }

    // optional int64 volume = 4;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->volume());
    }

    // optional int32 market = 3;
    if (has_market()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->market());
    }

    // optional int32 cash_replace_flag = 5;
    if (has_cash_replace_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cash_replace_flag());
    }

    // optional double cash_replace_premium_rate = 6;
    if (has_cash_replace_premium_rate()) {
      total_size += 1 + 8;
    }

    // optional double cash_replace_amount = 7;
    if (has_cash_replace_amount()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EtfConstituentStock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quotation.EtfConstituentStock)
  GOOGLE_DCHECK_NE(&from, this);
  const EtfConstituentStock* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EtfConstituentStock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quotation.EtfConstituentStock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quotation.EtfConstituentStock)
    MergeFrom(*source);
  }
}

void EtfConstituentStock::MergeFrom(const EtfConstituentStock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quotation.EtfConstituentStock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_stock_id();
      stock_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stock_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_stock_name();
      stock_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stock_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      volume_ = from.volume_;
    }
    if (cached_has_bits & 0x00000008u) {
      market_ = from.market_;
    }
    if (cached_has_bits & 0x00000010u) {
      cash_replace_flag_ = from.cash_replace_flag_;
    }
    if (cached_has_bits & 0x00000020u) {
      cash_replace_premium_rate_ = from.cash_replace_premium_rate_;
    }
    if (cached_has_bits & 0x00000040u) {
      cash_replace_amount_ = from.cash_replace_amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EtfConstituentStock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quotation.EtfConstituentStock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EtfConstituentStock::CopyFrom(const EtfConstituentStock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quotation.EtfConstituentStock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EtfConstituentStock::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void EtfConstituentStock::Swap(EtfConstituentStock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EtfConstituentStock::InternalSwap(EtfConstituentStock* other) {
  using std::swap;
  stock_id_.Swap(&other->stock_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  stock_name_.Swap(&other->stock_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(volume_, other->volume_);
  swap(market_, other->market_);
  swap(cash_replace_flag_, other->cash_replace_flag_);
  swap(cash_replace_premium_rate_, other->cash_replace_premium_rate_);
  swap(cash_replace_amount_, other->cash_replace_amount_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EtfConstituentStock::GetMetadata() const {
  protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EtfListInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EtfListInfo::kDataDateFieldNumber;
const int EtfListInfo::kDataTimeFieldNumber;
const int EtfListInfo::kPreTradingDayFieldNumber;
const int EtfListInfo::kStockIdFieldNumber;
const int EtfListInfo::kPrimaryCodeFieldNumber;
const int EtfListInfo::kUnderlyingCodeFieldNumber;
const int EtfListInfo::kMarketFieldNumber;
const int EtfListInfo::kStockNameFieldNumber;
const int EtfListInfo::kCompanyNameFieldNumber;
const int EtfListInfo::kPreCashDiffFieldNumber;
const int EtfListInfo::kPreUnitIopvFieldNumber;
const int EtfListInfo::kPreIopvFieldNumber;
const int EtfListInfo::kEstimateCashFieldNumber;
const int EtfListInfo::kMaxCashReplaceRateFieldNumber;
const int EtfListInfo::kMaxPurchaseVolumeFieldNumber;
const int EtfListInfo::kMaxRedeemVolumeFieldNumber;
const int EtfListInfo::kIsPublishIopvFieldNumber;
const int EtfListInfo::kUnitVolumeFieldNumber;
const int EtfListInfo::kComposeCountFieldNumber;
const int EtfListInfo::kIsOpenPurchaseFieldNumber;
const int EtfListInfo::kIsOpenRedeemFieldNumber;
const int EtfListInfo::kStocksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EtfListInfo::EtfListInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fquotation_2eproto::scc_info_EtfListInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quotation.EtfListInfo)
}
EtfListInfo::EtfListInfo(const EtfListInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      stocks_(from.stocks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stock_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_stock_id()) {
    stock_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stock_id_);
  }
  primary_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_primary_code()) {
    primary_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_code_);
  }
  underlying_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_underlying_code()) {
    underlying_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.underlying_code_);
  }
  stock_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_stock_name()) {
    stock_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stock_name_);
  }
  company_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_company_name()) {
    company_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.company_name_);
  }
  ::memcpy(&data_date_, &from.data_date_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_open_redeem_) -
    reinterpret_cast<char*>(&data_date_)) + sizeof(is_open_redeem_));
  // @@protoc_insertion_point(copy_constructor:quotation.EtfListInfo)
}

void EtfListInfo::SharedCtor() {
  stock_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  underlying_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stock_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  company_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_open_redeem_) -
      reinterpret_cast<char*>(&data_date_)) + sizeof(is_open_redeem_));
}

EtfListInfo::~EtfListInfo() {
  // @@protoc_insertion_point(destructor:quotation.EtfListInfo)
  SharedDtor();
}

void EtfListInfo::SharedDtor() {
  stock_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  underlying_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stock_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  company_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EtfListInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EtfListInfo::descriptor() {
  ::protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EtfListInfo& EtfListInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fquotation_2eproto::scc_info_EtfListInfo.base);
  return *internal_default_instance();
}


void EtfListInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:quotation.EtfListInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stocks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      stock_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      primary_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      underlying_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      stock_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      company_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&data_date_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pre_trading_day_) -
        reinterpret_cast<char*>(&data_date_)) + sizeof(pre_trading_day_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&market_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_redeem_volume_) -
        reinterpret_cast<char*>(&market_)) + sizeof(max_redeem_volume_));
  }
  if (cached_has_bits & 2031616u) {
    ::memset(&unit_volume_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_open_redeem_) -
        reinterpret_cast<char*>(&unit_volume_)) + sizeof(is_open_redeem_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EtfListInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quotation.EtfListInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 data_date = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_data_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 data_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_data_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pre_trading_day = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_pre_trading_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pre_trading_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string stock_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stock_id().data(), static_cast<int>(this->stock_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.EtfListInfo.stock_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string primary_code = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_primary_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->primary_code().data(), static_cast<int>(this->primary_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.EtfListInfo.primary_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string underlying_code = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->underlying_code().data(), static_cast<int>(this->underlying_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.EtfListInfo.underlying_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 market = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_market();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &market_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string stock_name = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stock_name().data(), static_cast<int>(this->stock_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.EtfListInfo.stock_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string company_name = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_company_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->company_name().data(), static_cast<int>(this->company_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.EtfListInfo.company_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double pre_cash_diff = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_pre_cash_diff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_cash_diff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double pre_unit_iopv = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_pre_unit_iopv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_unit_iopv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double pre_iopv = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_pre_iopv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_iopv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double estimate_cash = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_estimate_cash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &estimate_cash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_cash_replace_rate = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_max_cash_replace_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_cash_replace_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 max_purchase_volume = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_max_purchase_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_purchase_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 max_redeem_volume = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_max_redeem_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_redeem_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 is_publish_iopv = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_is_publish_iopv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_publish_iopv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 unit_volume = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_unit_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &unit_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 compose_count = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_compose_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &compose_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 is_open_purchase = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_is_open_purchase();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_open_purchase_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 is_open_redeem = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_is_open_redeem();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_open_redeem_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .quotation.EtfConstituentStock stocks = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stocks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quotation.EtfListInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quotation.EtfListInfo)
  return false;
#undef DO_
}

void EtfListInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quotation.EtfListInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 data_date = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->data_date(), output);
  }

  // required uint32 data_time = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->data_time(), output);
  }

  // optional uint32 pre_trading_day = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pre_trading_day(), output);
  }

  // optional string stock_id = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stock_id().data(), static_cast<int>(this->stock_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.EtfListInfo.stock_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->stock_id(), output);
  }

  // optional string primary_code = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->primary_code().data(), static_cast<int>(this->primary_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.EtfListInfo.primary_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->primary_code(), output);
  }

  // optional string underlying_code = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->underlying_code().data(), static_cast<int>(this->underlying_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.EtfListInfo.underlying_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->underlying_code(), output);
  }

  // optional int32 market = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->market(), output);
  }

  // optional string stock_name = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stock_name().data(), static_cast<int>(this->stock_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.EtfListInfo.stock_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->stock_name(), output);
  }

  // optional string company_name = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->company_name().data(), static_cast<int>(this->company_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.EtfListInfo.company_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->company_name(), output);
  }

  // optional double pre_cash_diff = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->pre_cash_diff(), output);
  }

  // optional double pre_unit_iopv = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->pre_unit_iopv(), output);
  }

  // optional double pre_iopv = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->pre_iopv(), output);
  }

  // optional double estimate_cash = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->estimate_cash(), output);
  }

  // optional double max_cash_replace_rate = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->max_cash_replace_rate(), output);
  }

  // optional int64 max_purchase_volume = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->max_purchase_volume(), output);
  }

  // optional int64 max_redeem_volume = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->max_redeem_volume(), output);
  }

  // optional int32 is_publish_iopv = 17;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->is_publish_iopv(), output);
  }

  // optional int64 unit_volume = 18;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->unit_volume(), output);
  }

  // optional int64 compose_count = 19;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->compose_count(), output);
  }

  // optional int32 is_open_purchase = 20;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->is_open_purchase(), output);
  }

  // optional int32 is_open_redeem = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->is_open_redeem(), output);
  }

  // repeated .quotation.EtfConstituentStock stocks = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stocks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22,
      this->stocks(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:quotation.EtfListInfo)
}

::google::protobuf::uint8* EtfListInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quotation.EtfListInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 data_date = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->data_date(), target);
  }

  // required uint32 data_time = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->data_time(), target);
  }

  // optional uint32 pre_trading_day = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pre_trading_day(), target);
  }

  // optional string stock_id = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stock_id().data(), static_cast<int>(this->stock_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.EtfListInfo.stock_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->stock_id(), target);
  }

  // optional string primary_code = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->primary_code().data(), static_cast<int>(this->primary_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.EtfListInfo.primary_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->primary_code(), target);
  }

  // optional string underlying_code = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->underlying_code().data(), static_cast<int>(this->underlying_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.EtfListInfo.underlying_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->underlying_code(), target);
  }

  // optional int32 market = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->market(), target);
  }

  // optional string stock_name = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stock_name().data(), static_cast<int>(this->stock_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.EtfListInfo.stock_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->stock_name(), target);
  }

  // optional string company_name = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->company_name().data(), static_cast<int>(this->company_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.EtfListInfo.company_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->company_name(), target);
  }

  // optional double pre_cash_diff = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->pre_cash_diff(), target);
  }

  // optional double pre_unit_iopv = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->pre_unit_iopv(), target);
  }

  // optional double pre_iopv = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->pre_iopv(), target);
  }

  // optional double estimate_cash = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->estimate_cash(), target);
  }

  // optional double max_cash_replace_rate = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->max_cash_replace_rate(), target);
  }

  // optional int64 max_purchase_volume = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->max_purchase_volume(), target);
  }

  // optional int64 max_redeem_volume = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->max_redeem_volume(), target);
  }

  // optional int32 is_publish_iopv = 17;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->is_publish_iopv(), target);
  }

  // optional int64 unit_volume = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->unit_volume(), target);
  }

  // optional int64 compose_count = 19;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->compose_count(), target);
  }

  // optional int32 is_open_purchase = 20;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->is_open_purchase(), target);
  }

  // optional int32 is_open_redeem = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->is_open_redeem(), target);
  }

  // repeated .quotation.EtfConstituentStock stocks = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stocks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, this->stocks(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quotation.EtfListInfo)
  return target;
}

size_t EtfListInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:quotation.EtfListInfo)
  size_t total_size = 0;

  if (has_data_date()) {
    // required uint32 data_date = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->data_date());
  }

  if (has_data_time()) {
    // required uint32 data_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->data_time());
  }

  return total_size;
}
size_t EtfListInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quotation.EtfListInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000060) ^ 0x00000060) == 0) {  // All required fields are present.
    // required uint32 data_date = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->data_date());

    // required uint32 data_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->data_time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .quotation.EtfConstituentStock stocks = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->stocks_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stocks(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string stock_id = 4;
    if (has_stock_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_id());
    }

    // optional string primary_code = 5;
    if (has_primary_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->primary_code());
    }

    // optional string underlying_code = 6;
    if (has_underlying_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying_code());
    }

    // optional string stock_name = 8;
    if (has_stock_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_name());
    }

    // optional string company_name = 9;
    if (has_company_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->company_name());
    }

  }
  // optional uint32 pre_trading_day = 3;
  if (has_pre_trading_day()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pre_trading_day());
  }

  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 market = 7;
    if (has_market()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->market());
    }

    // optional double pre_cash_diff = 10;
    if (has_pre_cash_diff()) {
      total_size += 1 + 8;
    }

    // optional double pre_unit_iopv = 11;
    if (has_pre_unit_iopv()) {
      total_size += 1 + 8;
    }

    // optional double pre_iopv = 12;
    if (has_pre_iopv()) {
      total_size += 1 + 8;
    }

    // optional double estimate_cash = 13;
    if (has_estimate_cash()) {
      total_size += 1 + 8;
    }

    // optional double max_cash_replace_rate = 14;
    if (has_max_cash_replace_rate()) {
      total_size += 1 + 8;
    }

    // optional int64 max_purchase_volume = 15;
    if (has_max_purchase_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_purchase_volume());
    }

    // optional int64 max_redeem_volume = 16;
    if (has_max_redeem_volume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_redeem_volume());
    }

  }
  if (_has_bits_[16 / 32] & 2031616u) {
    // optional int64 unit_volume = 18;
    if (has_unit_volume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->unit_volume());
    }

    // optional int32 is_publish_iopv = 17;
    if (has_is_publish_iopv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_publish_iopv());
    }

    // optional int32 is_open_purchase = 20;
    if (has_is_open_purchase()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_open_purchase());
    }

    // optional int64 compose_count = 19;
    if (has_compose_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->compose_count());
    }

    // optional int32 is_open_redeem = 21;
    if (has_is_open_redeem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_open_redeem());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EtfListInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quotation.EtfListInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EtfListInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EtfListInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quotation.EtfListInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quotation.EtfListInfo)
    MergeFrom(*source);
  }
}

void EtfListInfo::MergeFrom(const EtfListInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quotation.EtfListInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stocks_.MergeFrom(from.stocks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_stock_id();
      stock_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stock_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_primary_code();
      primary_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_code_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_underlying_code();
      underlying_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.underlying_code_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_stock_name();
      stock_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stock_name_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_company_name();
      company_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.company_name_);
    }
    if (cached_has_bits & 0x00000020u) {
      data_date_ = from.data_date_;
    }
    if (cached_has_bits & 0x00000040u) {
      data_time_ = from.data_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      pre_trading_day_ = from.pre_trading_day_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      market_ = from.market_;
    }
    if (cached_has_bits & 0x00000200u) {
      pre_cash_diff_ = from.pre_cash_diff_;
    }
    if (cached_has_bits & 0x00000400u) {
      pre_unit_iopv_ = from.pre_unit_iopv_;
    }
    if (cached_has_bits & 0x00000800u) {
      pre_iopv_ = from.pre_iopv_;
    }
    if (cached_has_bits & 0x00001000u) {
      estimate_cash_ = from.estimate_cash_;
    }
    if (cached_has_bits & 0x00002000u) {
      max_cash_replace_rate_ = from.max_cash_replace_rate_;
    }
    if (cached_has_bits & 0x00004000u) {
      max_purchase_volume_ = from.max_purchase_volume_;
    }
    if (cached_has_bits & 0x00008000u) {
      max_redeem_volume_ = from.max_redeem_volume_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 2031616u) {
    if (cached_has_bits & 0x00010000u) {
      unit_volume_ = from.unit_volume_;
    }
    if (cached_has_bits & 0x00020000u) {
      is_publish_iopv_ = from.is_publish_iopv_;
    }
    if (cached_has_bits & 0x00040000u) {
      is_open_purchase_ = from.is_open_purchase_;
    }
    if (cached_has_bits & 0x00080000u) {
      compose_count_ = from.compose_count_;
    }
    if (cached_has_bits & 0x00100000u) {
      is_open_redeem_ = from.is_open_redeem_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EtfListInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quotation.EtfListInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EtfListInfo::CopyFrom(const EtfListInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quotation.EtfListInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EtfListInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000060) != 0x00000060) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->stocks())) return false;
  return true;
}

void EtfListInfo::Swap(EtfListInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EtfListInfo::InternalSwap(EtfListInfo* other) {
  using std::swap;
  CastToBase(&stocks_)->InternalSwap(CastToBase(&other->stocks_));
  stock_id_.Swap(&other->stock_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  primary_code_.Swap(&other->primary_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  underlying_code_.Swap(&other->underlying_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  stock_name_.Swap(&other->stock_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  company_name_.Swap(&other->company_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_date_, other->data_date_);
  swap(data_time_, other->data_time_);
  swap(pre_trading_day_, other->pre_trading_day_);
  swap(market_, other->market_);
  swap(pre_cash_diff_, other->pre_cash_diff_);
  swap(pre_unit_iopv_, other->pre_unit_iopv_);
  swap(pre_iopv_, other->pre_iopv_);
  swap(estimate_cash_, other->estimate_cash_);
  swap(max_cash_replace_rate_, other->max_cash_replace_rate_);
  swap(max_purchase_volume_, other->max_purchase_volume_);
  swap(max_redeem_volume_, other->max_redeem_volume_);
  swap(unit_volume_, other->unit_volume_);
  swap(is_publish_iopv_, other->is_publish_iopv_);
  swap(is_open_purchase_, other->is_open_purchase_);
  swap(compose_count_, other->compose_count_);
  swap(is_open_redeem_, other->is_open_redeem_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EtfListInfo::GetMetadata() const {
  protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EtfFees_EtfFee::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EtfFees_EtfFee::kCodeFieldNumber;
const int EtfFees_EtfFee::kCreateFeeFieldNumber;
const int EtfFees_EtfFee::kRedeemFeeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EtfFees_EtfFee::EtfFees_EtfFee()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fquotation_2eproto::scc_info_EtfFees_EtfFee.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quotation.EtfFees.EtfFee)
}
EtfFees_EtfFee::EtfFees_EtfFee(const EtfFees_EtfFee& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  ::memcpy(&create_fee_, &from.create_fee_,
    static_cast<size_t>(reinterpret_cast<char*>(&redeem_fee_) -
    reinterpret_cast<char*>(&create_fee_)) + sizeof(redeem_fee_));
  // @@protoc_insertion_point(copy_constructor:quotation.EtfFees.EtfFee)
}

void EtfFees_EtfFee::SharedCtor() {
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&create_fee_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&redeem_fee_) -
      reinterpret_cast<char*>(&create_fee_)) + sizeof(redeem_fee_));
}

EtfFees_EtfFee::~EtfFees_EtfFee() {
  // @@protoc_insertion_point(destructor:quotation.EtfFees.EtfFee)
  SharedDtor();
}

void EtfFees_EtfFee::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EtfFees_EtfFee::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EtfFees_EtfFee::descriptor() {
  ::protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EtfFees_EtfFee& EtfFees_EtfFee::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fquotation_2eproto::scc_info_EtfFees_EtfFee.base);
  return *internal_default_instance();
}


void EtfFees_EtfFee::Clear() {
// @@protoc_insertion_point(message_clear_start:quotation.EtfFees.EtfFee)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    code_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&create_fee_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&redeem_fee_) -
        reinterpret_cast<char*>(&create_fee_)) + sizeof(redeem_fee_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EtfFees_EtfFee::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quotation.EtfFees.EtfFee)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.EtfFees.EtfFee.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double create_fee = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_create_fee();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &create_fee_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double redeem_fee = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_redeem_fee();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &redeem_fee_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quotation.EtfFees.EtfFee)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quotation.EtfFees.EtfFee)
  return false;
#undef DO_
}

void EtfFees_EtfFee::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quotation.EtfFees.EtfFee)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.EtfFees.EtfFee.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->code(), output);
  }

  // optional double create_fee = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->create_fee(), output);
  }

  // optional double redeem_fee = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->redeem_fee(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:quotation.EtfFees.EtfFee)
}

::google::protobuf::uint8* EtfFees_EtfFee::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quotation.EtfFees.EtfFee)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.EtfFees.EtfFee.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  // optional double create_fee = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->create_fee(), target);
  }

  // optional double redeem_fee = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->redeem_fee(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quotation.EtfFees.EtfFee)
  return target;
}

size_t EtfFees_EtfFee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quotation.EtfFees.EtfFee)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string code = 1;
  if (has_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional double create_fee = 2;
    if (has_create_fee()) {
      total_size += 1 + 8;
    }

    // optional double redeem_fee = 3;
    if (has_redeem_fee()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EtfFees_EtfFee::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quotation.EtfFees.EtfFee)
  GOOGLE_DCHECK_NE(&from, this);
  const EtfFees_EtfFee* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EtfFees_EtfFee>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quotation.EtfFees.EtfFee)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quotation.EtfFees.EtfFee)
    MergeFrom(*source);
  }
}

void EtfFees_EtfFee::MergeFrom(const EtfFees_EtfFee& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quotation.EtfFees.EtfFee)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000002u) {
      create_fee_ = from.create_fee_;
    }
    if (cached_has_bits & 0x00000004u) {
      redeem_fee_ = from.redeem_fee_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EtfFees_EtfFee::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quotation.EtfFees.EtfFee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EtfFees_EtfFee::CopyFrom(const EtfFees_EtfFee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quotation.EtfFees.EtfFee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EtfFees_EtfFee::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void EtfFees_EtfFee::Swap(EtfFees_EtfFee* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EtfFees_EtfFee::InternalSwap(EtfFees_EtfFee* other) {
  using std::swap;
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(create_fee_, other->create_fee_);
  swap(redeem_fee_, other->redeem_fee_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EtfFees_EtfFee::GetMetadata() const {
  protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EtfFees::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EtfFees::kTimestampFieldNumber;
const int EtfFees::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EtfFees::EtfFees()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fquotation_2eproto::scc_info_EtfFees.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quotation.EtfFees)
}
EtfFees::EtfFees(const EtfFees& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:quotation.EtfFees)
}

void EtfFees::SharedCtor() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}

EtfFees::~EtfFees() {
  // @@protoc_insertion_point(destructor:quotation.EtfFees)
  SharedDtor();
}

void EtfFees::SharedDtor() {
}

void EtfFees::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EtfFees::descriptor() {
  ::protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EtfFees& EtfFees::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fquotation_2eproto::scc_info_EtfFees.base);
  return *internal_default_instance();
}


void EtfFees::Clear() {
// @@protoc_insertion_point(message_clear_start:quotation.EtfFees)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  timestamp_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EtfFees::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quotation.EtfFees)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .quotation.EtfFees.EtfFee items = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quotation.EtfFees)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quotation.EtfFees)
  return false;
#undef DO_
}

void EtfFees::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quotation.EtfFees)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // repeated .quotation.EtfFees.EtfFee items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->items(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:quotation.EtfFees)
}

::google::protobuf::uint8* EtfFees::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quotation.EtfFees)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // repeated .quotation.EtfFees.EtfFee items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->items(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quotation.EtfFees)
  return target;
}

size_t EtfFees::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quotation.EtfFees)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint64 timestamp = 1;
  if (has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }
  // repeated .quotation.EtfFees.EtfFee items = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->items(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EtfFees::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quotation.EtfFees)
  GOOGLE_DCHECK_NE(&from, this);
  const EtfFees* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EtfFees>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quotation.EtfFees)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quotation.EtfFees)
    MergeFrom(*source);
  }
}

void EtfFees::MergeFrom(const EtfFees& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quotation.EtfFees)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from.has_timestamp()) {
    set_timestamp(from.timestamp());
  }
}

void EtfFees::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quotation.EtfFees)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EtfFees::CopyFrom(const EtfFees& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quotation.EtfFees)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EtfFees::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void EtfFees::Swap(EtfFees* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EtfFees::InternalSwap(EtfFees* other) {
  using std::swap;
  CastToBase(&items_)->InternalSwap(CastToBase(&other->items_));
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EtfFees::GetMetadata() const {
  protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StockAmendments_StockAmendment::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockAmendments_StockAmendment::kCodeFieldNumber;
const int StockAmendments_StockAmendment::kNameFieldNumber;
const int StockAmendments_StockAmendment::kStateFieldNumber;
const int StockAmendments_StockAmendment::kCreateChangeFieldNumber;
const int StockAmendments_StockAmendment::kRedeemChangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockAmendments_StockAmendment::StockAmendments_StockAmendment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fquotation_2eproto::scc_info_StockAmendments_StockAmendment.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quotation.StockAmendments.StockAmendment)
}
StockAmendments_StockAmendment::StockAmendments_StockAmendment(const StockAmendments_StockAmendment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&redeem_change_) -
    reinterpret_cast<char*>(&state_)) + sizeof(redeem_change_));
  // @@protoc_insertion_point(copy_constructor:quotation.StockAmendments.StockAmendment)
}

void StockAmendments_StockAmendment::SharedCtor() {
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&redeem_change_) -
      reinterpret_cast<char*>(&state_)) + sizeof(redeem_change_));
}

StockAmendments_StockAmendment::~StockAmendments_StockAmendment() {
  // @@protoc_insertion_point(destructor:quotation.StockAmendments.StockAmendment)
  SharedDtor();
}

void StockAmendments_StockAmendment::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StockAmendments_StockAmendment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StockAmendments_StockAmendment::descriptor() {
  ::protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StockAmendments_StockAmendment& StockAmendments_StockAmendment::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fquotation_2eproto::scc_info_StockAmendments_StockAmendment.base);
  return *internal_default_instance();
}


void StockAmendments_StockAmendment::Clear() {
// @@protoc_insertion_point(message_clear_start:quotation.StockAmendments.StockAmendment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&redeem_change_) -
        reinterpret_cast<char*>(&state_)) + sizeof(redeem_change_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StockAmendments_StockAmendment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quotation.StockAmendments.StockAmendment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.StockAmendments.StockAmendment.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.StockAmendments.StockAmendment.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double create_change = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_create_change();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &create_change_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double redeem_change = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_redeem_change();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &redeem_change_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quotation.StockAmendments.StockAmendment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quotation.StockAmendments.StockAmendment)
  return false;
#undef DO_
}

void StockAmendments_StockAmendment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quotation.StockAmendments.StockAmendment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.StockAmendments.StockAmendment.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->code(), output);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.StockAmendments.StockAmendment.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int64 state = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->state(), output);
  }

  // optional double create_change = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->create_change(), output);
  }

  // optional double redeem_change = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->redeem_change(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:quotation.StockAmendments.StockAmendment)
}

::google::protobuf::uint8* StockAmendments_StockAmendment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quotation.StockAmendments.StockAmendment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.StockAmendments.StockAmendment.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.StockAmendments.StockAmendment.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int64 state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->state(), target);
  }

  // optional double create_change = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->create_change(), target);
  }

  // optional double redeem_change = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->redeem_change(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quotation.StockAmendments.StockAmendment)
  return target;
}

size_t StockAmendments_StockAmendment::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:quotation.StockAmendments.StockAmendment)
  size_t total_size = 0;

  if (has_code()) {
    // required string code = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  return total_size;
}
size_t StockAmendments_StockAmendment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quotation.StockAmendments.StockAmendment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string code = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 28u) {
    // optional int64 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->state());
    }

    // optional double create_change = 4;
    if (has_create_change()) {
      total_size += 1 + 8;
    }

    // optional double redeem_change = 5;
    if (has_redeem_change()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StockAmendments_StockAmendment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quotation.StockAmendments.StockAmendment)
  GOOGLE_DCHECK_NE(&from, this);
  const StockAmendments_StockAmendment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StockAmendments_StockAmendment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quotation.StockAmendments.StockAmendment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quotation.StockAmendments.StockAmendment)
    MergeFrom(*source);
  }
}

void StockAmendments_StockAmendment::MergeFrom(const StockAmendments_StockAmendment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quotation.StockAmendments.StockAmendment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000008u) {
      create_change_ = from.create_change_;
    }
    if (cached_has_bits & 0x00000010u) {
      redeem_change_ = from.redeem_change_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StockAmendments_StockAmendment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quotation.StockAmendments.StockAmendment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockAmendments_StockAmendment::CopyFrom(const StockAmendments_StockAmendment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quotation.StockAmendments.StockAmendment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockAmendments_StockAmendment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void StockAmendments_StockAmendment::Swap(StockAmendments_StockAmendment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockAmendments_StockAmendment::InternalSwap(StockAmendments_StockAmendment* other) {
  using std::swap;
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
  swap(create_change_, other->create_change_);
  swap(redeem_change_, other->redeem_change_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StockAmendments_StockAmendment::GetMetadata() const {
  protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StockAmendments::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockAmendments::kTimestampFieldNumber;
const int StockAmendments::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockAmendments::StockAmendments()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fquotation_2eproto::scc_info_StockAmendments.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quotation.StockAmendments)
}
StockAmendments::StockAmendments(const StockAmendments& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:quotation.StockAmendments)
}

void StockAmendments::SharedCtor() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}

StockAmendments::~StockAmendments() {
  // @@protoc_insertion_point(destructor:quotation.StockAmendments)
  SharedDtor();
}

void StockAmendments::SharedDtor() {
}

void StockAmendments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StockAmendments::descriptor() {
  ::protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StockAmendments& StockAmendments::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fquotation_2eproto::scc_info_StockAmendments.base);
  return *internal_default_instance();
}


void StockAmendments::Clear() {
// @@protoc_insertion_point(message_clear_start:quotation.StockAmendments)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  timestamp_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StockAmendments::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quotation.StockAmendments)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .quotation.StockAmendments.StockAmendment items = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quotation.StockAmendments)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quotation.StockAmendments)
  return false;
#undef DO_
}

void StockAmendments::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quotation.StockAmendments)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // repeated .quotation.StockAmendments.StockAmendment items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->items(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:quotation.StockAmendments)
}

::google::protobuf::uint8* StockAmendments::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quotation.StockAmendments)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // repeated .quotation.StockAmendments.StockAmendment items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->items(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quotation.StockAmendments)
  return target;
}

size_t StockAmendments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quotation.StockAmendments)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint64 timestamp = 1;
  if (has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }
  // repeated .quotation.StockAmendments.StockAmendment items = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->items(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StockAmendments::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quotation.StockAmendments)
  GOOGLE_DCHECK_NE(&from, this);
  const StockAmendments* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StockAmendments>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quotation.StockAmendments)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quotation.StockAmendments)
    MergeFrom(*source);
  }
}

void StockAmendments::MergeFrom(const StockAmendments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quotation.StockAmendments)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from.has_timestamp()) {
    set_timestamp(from.timestamp());
  }
}

void StockAmendments::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quotation.StockAmendments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockAmendments::CopyFrom(const StockAmendments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quotation.StockAmendments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockAmendments::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void StockAmendments::Swap(StockAmendments* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockAmendments::InternalSwap(StockAmendments* other) {
  using std::swap;
  CastToBase(&items_)->InternalSwap(CastToBase(&other->items_));
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StockAmendments::GetMetadata() const {
  protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GradedFundInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GradedFundInfo::kDataDateFieldNumber;
const int GradedFundInfo::kFofCodeFieldNumber;
const int GradedFundInfo::kFofNameFieldNumber;
const int GradedFundInfo::kFofQuotaFieldNumber;
const int GradedFundInfo::kFofPreNavFieldNumber;
const int GradedFundInfo::kFofNavFieldNumber;
const int GradedFundInfo::kFofMarketValueFieldNumber;
const int GradedFundInfo::kACodeFieldNumber;
const int GradedFundInfo::kANameFieldNumber;
const int GradedFundInfo::kAQuotaFieldNumber;
const int GradedFundInfo::kAPreNavFieldNumber;
const int GradedFundInfo::kANavFieldNumber;
const int GradedFundInfo::kAMarketValueFieldNumber;
const int GradedFundInfo::kAPreCloseFieldNumber;
const int GradedFundInfo::kADiscountPremiumRateFieldNumber;
const int GradedFundInfo::kAAppointedYieldFieldNumber;
const int GradedFundInfo::kBCodeFieldNumber;
const int GradedFundInfo::kBNameFieldNumber;
const int GradedFundInfo::kBQuotaFieldNumber;
const int GradedFundInfo::kBPreNavFieldNumber;
const int GradedFundInfo::kBNavFieldNumber;
const int GradedFundInfo::kBMarketValueFieldNumber;
const int GradedFundInfo::kBPreCloseFieldNumber;
const int GradedFundInfo::kBDiscountPremiumRateFieldNumber;
const int GradedFundInfo::kRatioAFieldNumber;
const int GradedFundInfo::kRatioBFieldNumber;
const int GradedFundInfo::kTotalMarketValueFieldNumber;
const int GradedFundInfo::kUnderlyingCodeFieldNumber;
const int GradedFundInfo::kUnderlyingNameFieldNumber;
const int GradedFundInfo::kUnderlyingFactorFieldNumber;
const int GradedFundInfo::kManagerNameFieldNumber;
const int GradedFundInfo::kListingDateFieldNumber;
const int GradedFundInfo::kTranslationDateFieldNumber;
const int GradedFundInfo::kUpClauseFieldNumber;
const int GradedFundInfo::kDownClauseFieldNumber;
const int GradedFundInfo::kPositionRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GradedFundInfo::GradedFundInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fquotation_2eproto::scc_info_GradedFundInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quotation.GradedFundInfo)
}
GradedFundInfo::GradedFundInfo(const GradedFundInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fof_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fof_code()) {
    fof_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fof_code_);
  }
  fof_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fof_name()) {
    fof_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fof_name_);
  }
  a_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_a_code()) {
    a_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.a_code_);
  }
  a_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_a_name()) {
    a_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.a_name_);
  }
  a_appointed_yield_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_a_appointed_yield()) {
    a_appointed_yield_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.a_appointed_yield_);
  }
  b_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_b_code()) {
    b_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.b_code_);
  }
  b_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_b_name()) {
    b_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.b_name_);
  }
  underlying_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_underlying_code()) {
    underlying_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.underlying_code_);
  }
  underlying_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_underlying_name()) {
    underlying_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.underlying_name_);
  }
  manager_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_manager_name()) {
    manager_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manager_name_);
  }
  up_clause_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_up_clause()) {
    up_clause_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.up_clause_);
  }
  down_clause_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_down_clause()) {
    down_clause_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.down_clause_);
  }
  ::memcpy(&fof_quota_, &from.fof_quota_,
    static_cast<size_t>(reinterpret_cast<char*>(&translation_date_) -
    reinterpret_cast<char*>(&fof_quota_)) + sizeof(translation_date_));
  // @@protoc_insertion_point(copy_constructor:quotation.GradedFundInfo)
}

void GradedFundInfo::SharedCtor() {
  fof_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fof_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  a_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  a_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  a_appointed_yield_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  b_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  b_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  underlying_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  underlying_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manager_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  up_clause_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  down_clause_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fof_quota_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&translation_date_) -
      reinterpret_cast<char*>(&fof_quota_)) + sizeof(translation_date_));
}

GradedFundInfo::~GradedFundInfo() {
  // @@protoc_insertion_point(destructor:quotation.GradedFundInfo)
  SharedDtor();
}

void GradedFundInfo::SharedDtor() {
  fof_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fof_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  a_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  a_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  a_appointed_yield_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  b_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  b_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  underlying_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  underlying_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manager_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  up_clause_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  down_clause_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GradedFundInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GradedFundInfo::descriptor() {
  ::protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GradedFundInfo& GradedFundInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fquotation_2eproto::scc_info_GradedFundInfo.base);
  return *internal_default_instance();
}


void GradedFundInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:quotation.GradedFundInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      fof_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      fof_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      a_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      a_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      a_appointed_yield_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      b_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      b_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      underlying_code_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      underlying_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000200u) {
      manager_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000400u) {
      up_clause_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000800u) {
      down_clause_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 61440u) {
    ::memset(&fof_quota_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fof_market_value_) -
        reinterpret_cast<char*>(&fof_quota_)) + sizeof(fof_market_value_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&a_quota_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&listing_date_) -
        reinterpret_cast<char*>(&a_quota_)) + sizeof(listing_date_));
  }
  if (cached_has_bits & 4278190080u) {
    ::memset(&b_quota_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ratio_b_) -
        reinterpret_cast<char*>(&b_quota_)) + sizeof(ratio_b_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 15u) {
    ::memset(&total_market_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&translation_date_) -
        reinterpret_cast<char*>(&total_market_value_)) + sizeof(translation_date_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GradedFundInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quotation.GradedFundInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 data_date = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_data_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fof_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fof_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fof_code().data(), static_cast<int>(this->fof_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.GradedFundInfo.fof_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fof_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fof_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fof_name().data(), static_cast<int>(this->fof_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.GradedFundInfo.fof_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double fof_quota = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_fof_quota();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fof_quota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double fof_pre_nav = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_fof_pre_nav();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fof_pre_nav_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double fof_nav = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_fof_nav();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fof_nav_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double fof_market_value = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_fof_market_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fof_market_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string a_code = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_a_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->a_code().data(), static_cast<int>(this->a_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.GradedFundInfo.a_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string a_name = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_a_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->a_name().data(), static_cast<int>(this->a_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.GradedFundInfo.a_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double a_quota = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_a_quota();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_quota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double a_pre_nav = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_a_pre_nav();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_pre_nav_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double a_nav = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_a_nav();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_nav_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double a_market_value = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_a_market_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_market_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double a_pre_close = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_a_pre_close();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_pre_close_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double a_discount_premium_rate = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {
          set_has_a_discount_premium_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_discount_premium_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string a_appointed_yield = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_a_appointed_yield()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->a_appointed_yield().data(), static_cast<int>(this->a_appointed_yield().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.GradedFundInfo.a_appointed_yield");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string b_code = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_b_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->b_code().data(), static_cast<int>(this->b_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.GradedFundInfo.b_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string b_name = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_b_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->b_name().data(), static_cast<int>(this->b_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.GradedFundInfo.b_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double b_quota = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 153 & 0xFF */)) {
          set_has_b_quota();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &b_quota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double b_pre_nav = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u /* 161 & 0xFF */)) {
          set_has_b_pre_nav();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &b_pre_nav_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double b_nav = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {
          set_has_b_nav();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &b_nav_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double b_market_value = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u /* 177 & 0xFF */)) {
          set_has_b_market_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &b_market_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double b_pre_close = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u /* 185 & 0xFF */)) {
          set_has_b_pre_close();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &b_pre_close_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double b_discount_premium_rate = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u /* 193 & 0xFF */)) {
          set_has_b_discount_premium_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &b_discount_premium_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ratio_a = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_ratio_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ratio_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ratio_b = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_ratio_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ratio_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double total_market_value = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(217u /* 217 & 0xFF */)) {
          set_has_total_market_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_market_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string underlying_code = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->underlying_code().data(), static_cast<int>(this->underlying_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.GradedFundInfo.underlying_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string underlying_name = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->underlying_name().data(), static_cast<int>(this->underlying_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.GradedFundInfo.underlying_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double underlying_factor = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(241u /* 241 & 0xFF */)) {
          set_has_underlying_factor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &underlying_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string manager_name = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manager_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->manager_name().data(), static_cast<int>(this->manager_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.GradedFundInfo.manager_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 listing_date = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {
          set_has_listing_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &listing_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 translation_date = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 264 & 0xFF */)) {
          set_has_translation_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &translation_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string up_clause = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 274 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_up_clause()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->up_clause().data(), static_cast<int>(this->up_clause().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.GradedFundInfo.up_clause");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string down_clause = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 282 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_down_clause()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->down_clause().data(), static_cast<int>(this->down_clause().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.GradedFundInfo.down_clause");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double position_rate = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 289 & 0xFF */)) {
          set_has_position_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quotation.GradedFundInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quotation.GradedFundInfo)
  return false;
#undef DO_
}

void GradedFundInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quotation.GradedFundInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 data_date = 1;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->data_date(), output);
  }

  // optional string fof_code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fof_code().data(), static_cast<int>(this->fof_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.GradedFundInfo.fof_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fof_code(), output);
  }

  // optional string fof_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fof_name().data(), static_cast<int>(this->fof_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.GradedFundInfo.fof_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fof_name(), output);
  }

  // optional double fof_quota = 4;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->fof_quota(), output);
  }

  // optional double fof_pre_nav = 5;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->fof_pre_nav(), output);
  }

  // optional double fof_nav = 6;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->fof_nav(), output);
  }

  // optional double fof_market_value = 7;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->fof_market_value(), output);
  }

  // optional string a_code = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->a_code().data(), static_cast<int>(this->a_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.GradedFundInfo.a_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->a_code(), output);
  }

  // optional string a_name = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->a_name().data(), static_cast<int>(this->a_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.GradedFundInfo.a_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->a_name(), output);
  }

  // optional double a_quota = 10;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->a_quota(), output);
  }

  // optional double a_pre_nav = 11;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->a_pre_nav(), output);
  }

  // optional double a_nav = 12;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->a_nav(), output);
  }

  // optional double a_market_value = 13;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->a_market_value(), output);
  }

  // optional double a_pre_close = 14;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->a_pre_close(), output);
  }

  // optional double a_discount_premium_rate = 15;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->a_discount_premium_rate(), output);
  }

  // optional string a_appointed_yield = 16;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->a_appointed_yield().data(), static_cast<int>(this->a_appointed_yield().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.GradedFundInfo.a_appointed_yield");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->a_appointed_yield(), output);
  }

  // optional string b_code = 17;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->b_code().data(), static_cast<int>(this->b_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.GradedFundInfo.b_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->b_code(), output);
  }

  // optional string b_name = 18;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->b_name().data(), static_cast<int>(this->b_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.GradedFundInfo.b_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->b_name(), output);
  }

  // optional double b_quota = 19;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->b_quota(), output);
  }

  // optional double b_pre_nav = 20;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->b_pre_nav(), output);
  }

  // optional double b_nav = 21;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->b_nav(), output);
  }

  // optional double b_market_value = 22;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->b_market_value(), output);
  }

  // optional double b_pre_close = 23;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->b_pre_close(), output);
  }

  // optional double b_discount_premium_rate = 24;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->b_discount_premium_rate(), output);
  }

  // optional int64 ratio_a = 25;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(25, this->ratio_a(), output);
  }

  // optional int64 ratio_b = 26;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(26, this->ratio_b(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional double total_market_value = 27;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->total_market_value(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string underlying_code = 28;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->underlying_code().data(), static_cast<int>(this->underlying_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.GradedFundInfo.underlying_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      28, this->underlying_code(), output);
  }

  // optional string underlying_name = 29;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->underlying_name().data(), static_cast<int>(this->underlying_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.GradedFundInfo.underlying_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->underlying_name(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional double underlying_factor = 30;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->underlying_factor(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string manager_name = 31;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->manager_name().data(), static_cast<int>(this->manager_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.GradedFundInfo.manager_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      31, this->manager_name(), output);
  }

  // optional uint32 listing_date = 32;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->listing_date(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 translation_date = 33;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->translation_date(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string up_clause = 34;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->up_clause().data(), static_cast<int>(this->up_clause().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.GradedFundInfo.up_clause");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      34, this->up_clause(), output);
  }

  // optional string down_clause = 35;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->down_clause().data(), static_cast<int>(this->down_clause().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.GradedFundInfo.down_clause");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      35, this->down_clause(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional double position_rate = 36;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(36, this->position_rate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:quotation.GradedFundInfo)
}

::google::protobuf::uint8* GradedFundInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quotation.GradedFundInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 data_date = 1;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->data_date(), target);
  }

  // optional string fof_code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fof_code().data(), static_cast<int>(this->fof_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.GradedFundInfo.fof_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fof_code(), target);
  }

  // optional string fof_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fof_name().data(), static_cast<int>(this->fof_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.GradedFundInfo.fof_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fof_name(), target);
  }

  // optional double fof_quota = 4;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->fof_quota(), target);
  }

  // optional double fof_pre_nav = 5;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->fof_pre_nav(), target);
  }

  // optional double fof_nav = 6;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->fof_nav(), target);
  }

  // optional double fof_market_value = 7;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->fof_market_value(), target);
  }

  // optional string a_code = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->a_code().data(), static_cast<int>(this->a_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.GradedFundInfo.a_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->a_code(), target);
  }

  // optional string a_name = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->a_name().data(), static_cast<int>(this->a_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.GradedFundInfo.a_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->a_name(), target);
  }

  // optional double a_quota = 10;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->a_quota(), target);
  }

  // optional double a_pre_nav = 11;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->a_pre_nav(), target);
  }

  // optional double a_nav = 12;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->a_nav(), target);
  }

  // optional double a_market_value = 13;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->a_market_value(), target);
  }

  // optional double a_pre_close = 14;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->a_pre_close(), target);
  }

  // optional double a_discount_premium_rate = 15;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->a_discount_premium_rate(), target);
  }

  // optional string a_appointed_yield = 16;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->a_appointed_yield().data(), static_cast<int>(this->a_appointed_yield().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.GradedFundInfo.a_appointed_yield");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->a_appointed_yield(), target);
  }

  // optional string b_code = 17;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->b_code().data(), static_cast<int>(this->b_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.GradedFundInfo.b_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->b_code(), target);
  }

  // optional string b_name = 18;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->b_name().data(), static_cast<int>(this->b_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.GradedFundInfo.b_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->b_name(), target);
  }

  // optional double b_quota = 19;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->b_quota(), target);
  }

  // optional double b_pre_nav = 20;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->b_pre_nav(), target);
  }

  // optional double b_nav = 21;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->b_nav(), target);
  }

  // optional double b_market_value = 22;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->b_market_value(), target);
  }

  // optional double b_pre_close = 23;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->b_pre_close(), target);
  }

  // optional double b_discount_premium_rate = 24;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->b_discount_premium_rate(), target);
  }

  // optional int64 ratio_a = 25;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(25, this->ratio_a(), target);
  }

  // optional int64 ratio_b = 26;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(26, this->ratio_b(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional double total_market_value = 27;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->total_market_value(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string underlying_code = 28;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->underlying_code().data(), static_cast<int>(this->underlying_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.GradedFundInfo.underlying_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->underlying_code(), target);
  }

  // optional string underlying_name = 29;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->underlying_name().data(), static_cast<int>(this->underlying_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.GradedFundInfo.underlying_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->underlying_name(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional double underlying_factor = 30;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->underlying_factor(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string manager_name = 31;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->manager_name().data(), static_cast<int>(this->manager_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.GradedFundInfo.manager_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->manager_name(), target);
  }

  // optional uint32 listing_date = 32;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->listing_date(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 translation_date = 33;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->translation_date(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string up_clause = 34;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->up_clause().data(), static_cast<int>(this->up_clause().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.GradedFundInfo.up_clause");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->up_clause(), target);
  }

  // optional string down_clause = 35;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->down_clause().data(), static_cast<int>(this->down_clause().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.GradedFundInfo.down_clause");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        35, this->down_clause(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional double position_rate = 36;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(36, this->position_rate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quotation.GradedFundInfo)
  return target;
}

size_t GradedFundInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quotation.GradedFundInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 data_date = 1;
  if (has_data_date()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->data_date());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string fof_code = 2;
    if (has_fof_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fof_code());
    }

    // optional string fof_name = 3;
    if (has_fof_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fof_name());
    }

    // optional string a_code = 8;
    if (has_a_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->a_code());
    }

    // optional string a_name = 9;
    if (has_a_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->a_name());
    }

    // optional string a_appointed_yield = 16;
    if (has_a_appointed_yield()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->a_appointed_yield());
    }

    // optional string b_code = 17;
    if (has_b_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->b_code());
    }

    // optional string b_name = 18;
    if (has_b_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->b_name());
    }

    // optional string underlying_code = 28;
    if (has_underlying_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying_code());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string underlying_name = 29;
    if (has_underlying_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying_name());
    }

    // optional string manager_name = 31;
    if (has_manager_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manager_name());
    }

    // optional string up_clause = 34;
    if (has_up_clause()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->up_clause());
    }

    // optional string down_clause = 35;
    if (has_down_clause()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->down_clause());
    }

    // optional double fof_quota = 4;
    if (has_fof_quota()) {
      total_size += 1 + 8;
    }

    // optional double fof_pre_nav = 5;
    if (has_fof_pre_nav()) {
      total_size += 1 + 8;
    }

    // optional double fof_nav = 6;
    if (has_fof_nav()) {
      total_size += 1 + 8;
    }

    // optional double fof_market_value = 7;
    if (has_fof_market_value()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional double a_quota = 10;
    if (has_a_quota()) {
      total_size += 1 + 8;
    }

    // optional double a_pre_nav = 11;
    if (has_a_pre_nav()) {
      total_size += 1 + 8;
    }

    // optional double a_nav = 12;
    if (has_a_nav()) {
      total_size += 1 + 8;
    }

    // optional double a_market_value = 13;
    if (has_a_market_value()) {
      total_size += 1 + 8;
    }

    // optional double a_pre_close = 14;
    if (has_a_pre_close()) {
      total_size += 1 + 8;
    }

    // optional double a_discount_premium_rate = 15;
    if (has_a_discount_premium_rate()) {
      total_size += 1 + 8;
    }

  }
  // optional uint32 listing_date = 32;
  if (has_listing_date()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->listing_date());
  }

  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional double b_quota = 19;
    if (has_b_quota()) {
      total_size += 2 + 8;
    }

    // optional double b_pre_nav = 20;
    if (has_b_pre_nav()) {
      total_size += 2 + 8;
    }

    // optional double b_nav = 21;
    if (has_b_nav()) {
      total_size += 2 + 8;
    }

    // optional double b_market_value = 22;
    if (has_b_market_value()) {
      total_size += 2 + 8;
    }

    // optional double b_pre_close = 23;
    if (has_b_pre_close()) {
      total_size += 2 + 8;
    }

    // optional double b_discount_premium_rate = 24;
    if (has_b_discount_premium_rate()) {
      total_size += 2 + 8;
    }

    // optional int64 ratio_a = 25;
    if (has_ratio_a()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ratio_a());
    }

    // optional int64 ratio_b = 26;
    if (has_ratio_b()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ratio_b());
    }

  }
  if (_has_bits_[32 / 32] & 15u) {
    // optional double total_market_value = 27;
    if (has_total_market_value()) {
      total_size += 2 + 8;
    }

    // optional double underlying_factor = 30;
    if (has_underlying_factor()) {
      total_size += 2 + 8;
    }

    // optional double position_rate = 36;
    if (has_position_rate()) {
      total_size += 2 + 8;
    }

    // optional uint32 translation_date = 33;
    if (has_translation_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->translation_date());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GradedFundInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quotation.GradedFundInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GradedFundInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GradedFundInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quotation.GradedFundInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quotation.GradedFundInfo)
    MergeFrom(*source);
  }
}

void GradedFundInfo::MergeFrom(const GradedFundInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quotation.GradedFundInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_fof_code();
      fof_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fof_code_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_fof_name();
      fof_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fof_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_a_code();
      a_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.a_code_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_a_name();
      a_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.a_name_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_a_appointed_yield();
      a_appointed_yield_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.a_appointed_yield_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_b_code();
      b_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.b_code_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_b_name();
      b_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.b_name_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_underlying_code();
      underlying_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.underlying_code_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_underlying_name();
      underlying_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.underlying_name_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_manager_name();
      manager_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manager_name_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_up_clause();
      up_clause_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.up_clause_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_down_clause();
      down_clause_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.down_clause_);
    }
    if (cached_has_bits & 0x00001000u) {
      fof_quota_ = from.fof_quota_;
    }
    if (cached_has_bits & 0x00002000u) {
      fof_pre_nav_ = from.fof_pre_nav_;
    }
    if (cached_has_bits & 0x00004000u) {
      fof_nav_ = from.fof_nav_;
    }
    if (cached_has_bits & 0x00008000u) {
      fof_market_value_ = from.fof_market_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      a_quota_ = from.a_quota_;
    }
    if (cached_has_bits & 0x00020000u) {
      a_pre_nav_ = from.a_pre_nav_;
    }
    if (cached_has_bits & 0x00040000u) {
      a_nav_ = from.a_nav_;
    }
    if (cached_has_bits & 0x00080000u) {
      a_market_value_ = from.a_market_value_;
    }
    if (cached_has_bits & 0x00100000u) {
      a_pre_close_ = from.a_pre_close_;
    }
    if (cached_has_bits & 0x00200000u) {
      a_discount_premium_rate_ = from.a_discount_premium_rate_;
    }
    if (cached_has_bits & 0x00400000u) {
      data_date_ = from.data_date_;
    }
    if (cached_has_bits & 0x00800000u) {
      listing_date_ = from.listing_date_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      b_quota_ = from.b_quota_;
    }
    if (cached_has_bits & 0x02000000u) {
      b_pre_nav_ = from.b_pre_nav_;
    }
    if (cached_has_bits & 0x04000000u) {
      b_nav_ = from.b_nav_;
    }
    if (cached_has_bits & 0x08000000u) {
      b_market_value_ = from.b_market_value_;
    }
    if (cached_has_bits & 0x10000000u) {
      b_pre_close_ = from.b_pre_close_;
    }
    if (cached_has_bits & 0x20000000u) {
      b_discount_premium_rate_ = from.b_discount_premium_rate_;
    }
    if (cached_has_bits & 0x40000000u) {
      ratio_a_ = from.ratio_a_;
    }
    if (cached_has_bits & 0x80000000u) {
      ratio_b_ = from.ratio_b_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      total_market_value_ = from.total_market_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      underlying_factor_ = from.underlying_factor_;
    }
    if (cached_has_bits & 0x00000004u) {
      position_rate_ = from.position_rate_;
    }
    if (cached_has_bits & 0x00000008u) {
      translation_date_ = from.translation_date_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void GradedFundInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quotation.GradedFundInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GradedFundInfo::CopyFrom(const GradedFundInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quotation.GradedFundInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GradedFundInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00400000) != 0x00400000) return false;
  return true;
}

void GradedFundInfo::Swap(GradedFundInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GradedFundInfo::InternalSwap(GradedFundInfo* other) {
  using std::swap;
  fof_code_.Swap(&other->fof_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fof_name_.Swap(&other->fof_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  a_code_.Swap(&other->a_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  a_name_.Swap(&other->a_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  a_appointed_yield_.Swap(&other->a_appointed_yield_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  b_code_.Swap(&other->b_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  b_name_.Swap(&other->b_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  underlying_code_.Swap(&other->underlying_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  underlying_name_.Swap(&other->underlying_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  manager_name_.Swap(&other->manager_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  up_clause_.Swap(&other->up_clause_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  down_clause_.Swap(&other->down_clause_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(fof_quota_, other->fof_quota_);
  swap(fof_pre_nav_, other->fof_pre_nav_);
  swap(fof_nav_, other->fof_nav_);
  swap(fof_market_value_, other->fof_market_value_);
  swap(a_quota_, other->a_quota_);
  swap(a_pre_nav_, other->a_pre_nav_);
  swap(a_nav_, other->a_nav_);
  swap(a_market_value_, other->a_market_value_);
  swap(a_pre_close_, other->a_pre_close_);
  swap(a_discount_premium_rate_, other->a_discount_premium_rate_);
  swap(data_date_, other->data_date_);
  swap(listing_date_, other->listing_date_);
  swap(b_quota_, other->b_quota_);
  swap(b_pre_nav_, other->b_pre_nav_);
  swap(b_nav_, other->b_nav_);
  swap(b_market_value_, other->b_market_value_);
  swap(b_pre_close_, other->b_pre_close_);
  swap(b_discount_premium_rate_, other->b_discount_premium_rate_);
  swap(ratio_a_, other->ratio_a_);
  swap(ratio_b_, other->ratio_b_);
  swap(total_market_value_, other->total_market_value_);
  swap(underlying_factor_, other->underlying_factor_);
  swap(position_rate_, other->position_rate_);
  swap(translation_date_, other->translation_date_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GradedFundInfo::GetMetadata() const {
  protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OptionInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionInfo::kDataDateFieldNumber;
const int OptionInfo::kCodeFieldNumber;
const int OptionInfo::kNameFieldNumber;
const int OptionInfo::kTypeFieldNumber;
const int OptionInfo::kMarketFieldNumber;
const int OptionInfo::kTradeCodeFieldNumber;
const int OptionInfo::kUnderlyingCodeFieldNumber;
const int OptionInfo::kUnderlyingNameFieldNumber;
const int OptionInfo::kUnderlyingTypeFieldNumber;
const int OptionInfo::kUnderlyingPreCloseFieldNumber;
const int OptionInfo::kCpFlagFieldNumber;
const int OptionInfo::kUnitFieldNumber;
const int OptionInfo::kExerciseDateFieldNumber;
const int OptionInfo::kExercisePriceFieldNumber;
const int OptionInfo::kSettleDateFieldNumber;
const int OptionInfo::kExpireDateFieldNumber;
const int OptionInfo::kIsExpiredFieldNumber;
const int OptionInfo::kIsNewFieldNumber;
const int OptionInfo::kIsAdjustedFieldNumber;
const int OptionInfo::kIsOpenFieldNumber;
const int OptionInfo::kHighLimitFieldNumber;
const int OptionInfo::kLowLimitFieldNumber;
const int OptionInfo::kPreSettleFieldNumber;
const int OptionInfo::kDepositFieldNumber;
const int OptionInfo::kAlgebraFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionInfo::OptionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fquotation_2eproto::scc_info_OptionInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quotation.OptionInfo)
}
OptionInfo::OptionInfo(const OptionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  trade_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trade_code()) {
    trade_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trade_code_);
  }
  underlying_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_underlying_code()) {
    underlying_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.underlying_code_);
  }
  underlying_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_underlying_name()) {
    underlying_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.underlying_name_);
  }
  ::memcpy(&market_, &from.market_,
    static_cast<size_t>(reinterpret_cast<char*>(&algebra_) -
    reinterpret_cast<char*>(&market_)) + sizeof(algebra_));
  // @@protoc_insertion_point(copy_constructor:quotation.OptionInfo)
}

void OptionInfo::SharedCtor() {
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trade_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  underlying_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  underlying_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&market_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&algebra_) -
      reinterpret_cast<char*>(&market_)) + sizeof(algebra_));
}

OptionInfo::~OptionInfo() {
  // @@protoc_insertion_point(destructor:quotation.OptionInfo)
  SharedDtor();
}

void OptionInfo::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trade_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  underlying_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  underlying_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OptionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OptionInfo::descriptor() {
  ::protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OptionInfo& OptionInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fquotation_2eproto::scc_info_OptionInfo.base);
  return *internal_default_instance();
}


void OptionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:quotation.OptionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      trade_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      underlying_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      underlying_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&market_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&data_date_) -
        reinterpret_cast<char*>(&market_)) + sizeof(data_date_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&exercise_date_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&expire_date_) -
        reinterpret_cast<char*>(&exercise_date_)) + sizeof(expire_date_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&is_expired_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deposit_) -
        reinterpret_cast<char*>(&is_expired_)) + sizeof(deposit_));
  }
  algebra_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OptionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quotation.OptionInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 data_date = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_data_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.OptionInfo.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.OptionInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.OptionInfo.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 market = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_market();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &market_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string trade_code = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trade_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trade_code().data(), static_cast<int>(this->trade_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.OptionInfo.trade_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string underlying_code = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->underlying_code().data(), static_cast<int>(this->underlying_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.OptionInfo.underlying_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string underlying_name = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->underlying_name().data(), static_cast<int>(this->underlying_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotation.OptionInfo.underlying_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 underlying_type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_underlying_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &underlying_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double underlying_pre_close = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_underlying_pre_close();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &underlying_pre_close_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 cp_flag = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_cp_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cp_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 unit = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_unit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &unit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 exercise_date = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_exercise_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exercise_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double exercise_price = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_exercise_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exercise_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 settle_date = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_settle_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &settle_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 expire_date = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_expire_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expire_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 is_expired = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_is_expired();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &is_expired_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 is_new = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_is_new();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &is_new_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 is_adjusted = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_is_adjusted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &is_adjusted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 is_open = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_is_open();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &is_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double high_limit = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {
          set_has_high_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &high_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double low_limit = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u /* 177 & 0xFF */)) {
          set_has_low_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &low_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double pre_settle = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u /* 185 & 0xFF */)) {
          set_has_pre_settle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_settle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double deposit = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u /* 193 & 0xFF */)) {
          set_has_deposit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &deposit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 algebra = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_algebra();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &algebra_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quotation.OptionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quotation.OptionInfo)
  return false;
#undef DO_
}

void OptionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quotation.OptionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 data_date = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->data_date(), output);
  }

  // required string code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.OptionInfo.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->code(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.OptionInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string type = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.OptionInfo.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->type(), output);
  }

  // optional int64 market = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->market(), output);
  }

  // optional string trade_code = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trade_code().data(), static_cast<int>(this->trade_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.OptionInfo.trade_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->trade_code(), output);
  }

  // optional string underlying_code = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->underlying_code().data(), static_cast<int>(this->underlying_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.OptionInfo.underlying_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->underlying_code(), output);
  }

  // optional string underlying_name = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->underlying_name().data(), static_cast<int>(this->underlying_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.OptionInfo.underlying_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->underlying_name(), output);
  }

  // optional int64 underlying_type = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->underlying_type(), output);
  }

  // optional double underlying_pre_close = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->underlying_pre_close(), output);
  }

  // optional int64 cp_flag = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->cp_flag(), output);
  }

  // optional int64 unit = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->unit(), output);
  }

  // optional uint32 exercise_date = 13;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->exercise_date(), output);
  }

  // optional double exercise_price = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->exercise_price(), output);
  }

  // optional uint32 settle_date = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->settle_date(), output);
  }

  // optional uint32 expire_date = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->expire_date(), output);
  }

  // optional int64 is_expired = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->is_expired(), output);
  }

  // optional int64 is_new = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->is_new(), output);
  }

  // optional int64 is_adjusted = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->is_adjusted(), output);
  }

  // optional int64 is_open = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->is_open(), output);
  }

  // optional double high_limit = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->high_limit(), output);
  }

  // optional double low_limit = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->low_limit(), output);
  }

  // optional double pre_settle = 23;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->pre_settle(), output);
  }

  // optional double deposit = 24;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->deposit(), output);
  }

  // optional int64 algebra = 25;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(25, this->algebra(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:quotation.OptionInfo)
}

::google::protobuf::uint8* OptionInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quotation.OptionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 data_date = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->data_date(), target);
  }

  // required string code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.OptionInfo.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.OptionInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string type = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.OptionInfo.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->type(), target);
  }

  // optional int64 market = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->market(), target);
  }

  // optional string trade_code = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trade_code().data(), static_cast<int>(this->trade_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.OptionInfo.trade_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->trade_code(), target);
  }

  // optional string underlying_code = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->underlying_code().data(), static_cast<int>(this->underlying_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.OptionInfo.underlying_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->underlying_code(), target);
  }

  // optional string underlying_name = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->underlying_name().data(), static_cast<int>(this->underlying_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotation.OptionInfo.underlying_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->underlying_name(), target);
  }

  // optional int64 underlying_type = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->underlying_type(), target);
  }

  // optional double underlying_pre_close = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->underlying_pre_close(), target);
  }

  // optional int64 cp_flag = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->cp_flag(), target);
  }

  // optional int64 unit = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->unit(), target);
  }

  // optional uint32 exercise_date = 13;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->exercise_date(), target);
  }

  // optional double exercise_price = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->exercise_price(), target);
  }

  // optional uint32 settle_date = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->settle_date(), target);
  }

  // optional uint32 expire_date = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->expire_date(), target);
  }

  // optional int64 is_expired = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->is_expired(), target);
  }

  // optional int64 is_new = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->is_new(), target);
  }

  // optional int64 is_adjusted = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->is_adjusted(), target);
  }

  // optional int64 is_open = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->is_open(), target);
  }

  // optional double high_limit = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->high_limit(), target);
  }

  // optional double low_limit = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->low_limit(), target);
  }

  // optional double pre_settle = 23;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->pre_settle(), target);
  }

  // optional double deposit = 24;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->deposit(), target);
  }

  // optional int64 algebra = 25;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(25, this->algebra(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quotation.OptionInfo)
  return target;
}

size_t OptionInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:quotation.OptionInfo)
  size_t total_size = 0;

  if (has_code()) {
    // required string code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_data_date()) {
    // required uint32 data_date = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->data_date());
  }

  return total_size;
}
size_t OptionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quotation.OptionInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000081) ^ 0x00000081) == 0) {  // All required fields are present.
    // required string code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required uint32 data_date = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->data_date());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 126u) {
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string trade_code = 6;
    if (has_trade_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trade_code());
    }

    // optional string underlying_code = 7;
    if (has_underlying_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying_code());
    }

    // optional string underlying_name = 8;
    if (has_underlying_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying_name());
    }

    // optional int64 market = 5;
    if (has_market()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->market());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 exercise_date = 13;
    if (has_exercise_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exercise_date());
    }

    // optional int64 underlying_type = 9;
    if (has_underlying_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->underlying_type());
    }

    // optional double underlying_pre_close = 10;
    if (has_underlying_pre_close()) {
      total_size += 1 + 8;
    }

    // optional int64 cp_flag = 11;
    if (has_cp_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cp_flag());
    }

    // optional int64 unit = 12;
    if (has_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->unit());
    }

    // optional double exercise_price = 14;
    if (has_exercise_price()) {
      total_size += 1 + 8;
    }

    // optional uint32 settle_date = 15;
    if (has_settle_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->settle_date());
    }

    // optional uint32 expire_date = 16;
    if (has_expire_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expire_date());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional int64 is_expired = 17;
    if (has_is_expired()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->is_expired());
    }

    // optional int64 is_new = 18;
    if (has_is_new()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->is_new());
    }

    // optional int64 is_adjusted = 19;
    if (has_is_adjusted()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->is_adjusted());
    }

    // optional int64 is_open = 20;
    if (has_is_open()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->is_open());
    }

    // optional double high_limit = 21;
    if (has_high_limit()) {
      total_size += 2 + 8;
    }

    // optional double low_limit = 22;
    if (has_low_limit()) {
      total_size += 2 + 8;
    }

    // optional double pre_settle = 23;
    if (has_pre_settle()) {
      total_size += 2 + 8;
    }

    // optional double deposit = 24;
    if (has_deposit()) {
      total_size += 2 + 8;
    }

  }
  // optional int64 algebra = 25;
  if (has_algebra()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->algebra());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quotation.OptionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quotation.OptionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quotation.OptionInfo)
    MergeFrom(*source);
  }
}

void OptionInfo::MergeFrom(const OptionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quotation.OptionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_trade_code();
      trade_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trade_code_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_underlying_code();
      underlying_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.underlying_code_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_underlying_name();
      underlying_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.underlying_name_);
    }
    if (cached_has_bits & 0x00000040u) {
      market_ = from.market_;
    }
    if (cached_has_bits & 0x00000080u) {
      data_date_ = from.data_date_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      exercise_date_ = from.exercise_date_;
    }
    if (cached_has_bits & 0x00000200u) {
      underlying_type_ = from.underlying_type_;
    }
    if (cached_has_bits & 0x00000400u) {
      underlying_pre_close_ = from.underlying_pre_close_;
    }
    if (cached_has_bits & 0x00000800u) {
      cp_flag_ = from.cp_flag_;
    }
    if (cached_has_bits & 0x00001000u) {
      unit_ = from.unit_;
    }
    if (cached_has_bits & 0x00002000u) {
      exercise_price_ = from.exercise_price_;
    }
    if (cached_has_bits & 0x00004000u) {
      settle_date_ = from.settle_date_;
    }
    if (cached_has_bits & 0x00008000u) {
      expire_date_ = from.expire_date_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      is_expired_ = from.is_expired_;
    }
    if (cached_has_bits & 0x00020000u) {
      is_new_ = from.is_new_;
    }
    if (cached_has_bits & 0x00040000u) {
      is_adjusted_ = from.is_adjusted_;
    }
    if (cached_has_bits & 0x00080000u) {
      is_open_ = from.is_open_;
    }
    if (cached_has_bits & 0x00100000u) {
      high_limit_ = from.high_limit_;
    }
    if (cached_has_bits & 0x00200000u) {
      low_limit_ = from.low_limit_;
    }
    if (cached_has_bits & 0x00400000u) {
      pre_settle_ = from.pre_settle_;
    }
    if (cached_has_bits & 0x00800000u) {
      deposit_ = from.deposit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    set_algebra(from.algebra());
  }
}

void OptionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quotation.OptionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionInfo::CopyFrom(const OptionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quotation.OptionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000081) != 0x00000081) return false;
  return true;
}

void OptionInfo::Swap(OptionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionInfo::InternalSwap(OptionInfo* other) {
  using std::swap;
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trade_code_.Swap(&other->trade_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  underlying_code_.Swap(&other->underlying_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  underlying_name_.Swap(&other->underlying_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(market_, other->market_);
  swap(data_date_, other->data_date_);
  swap(exercise_date_, other->exercise_date_);
  swap(underlying_type_, other->underlying_type_);
  swap(underlying_pre_close_, other->underlying_pre_close_);
  swap(cp_flag_, other->cp_flag_);
  swap(unit_, other->unit_);
  swap(exercise_price_, other->exercise_price_);
  swap(settle_date_, other->settle_date_);
  swap(expire_date_, other->expire_date_);
  swap(is_expired_, other->is_expired_);
  swap(is_new_, other->is_new_);
  swap(is_adjusted_, other->is_adjusted_);
  swap(is_open_, other->is_open_);
  swap(high_limit_, other->high_limit_);
  swap(low_limit_, other->low_limit_);
  swap(pre_settle_, other->pre_settle_);
  swap(deposit_, other->deposit_);
  swap(algebra_, other->algebra_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OptionInfo::GetMetadata() const {
  protobuf_protos_2fquotation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fquotation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace quotation
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quotation::Stock* Arena::CreateMaybeMessage< ::quotation::Stock >(Arena* arena) {
  return Arena::CreateInternal< ::quotation::Stock >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quotation::Handicap_Item* Arena::CreateMaybeMessage< ::quotation::Handicap_Item >(Arena* arena) {
  return Arena::CreateInternal< ::quotation::Handicap_Item >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quotation::Handicap_Queue* Arena::CreateMaybeMessage< ::quotation::Handicap_Queue >(Arena* arena) {
  return Arena::CreateInternal< ::quotation::Handicap_Queue >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quotation::Handicap* Arena::CreateMaybeMessage< ::quotation::Handicap >(Arena* arena) {
  return Arena::CreateInternal< ::quotation::Handicap >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quotation::Future* Arena::CreateMaybeMessage< ::quotation::Future >(Arena* arena) {
  return Arena::CreateInternal< ::quotation::Future >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quotation::Option* Arena::CreateMaybeMessage< ::quotation::Option >(Arena* arena) {
  return Arena::CreateInternal< ::quotation::Option >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quotation::Index* Arena::CreateMaybeMessage< ::quotation::Index >(Arena* arena) {
  return Arena::CreateInternal< ::quotation::Index >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quotation::VIndex_StockInfo* Arena::CreateMaybeMessage< ::quotation::VIndex_StockInfo >(Arena* arena) {
  return Arena::CreateInternal< ::quotation::VIndex_StockInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quotation::VIndex* Arena::CreateMaybeMessage< ::quotation::VIndex >(Arena* arena) {
  return Arena::CreateInternal< ::quotation::VIndex >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quotation::GradedFundIopv* Arena::CreateMaybeMessage< ::quotation::GradedFundIopv >(Arena* arena) {
  return Arena::CreateInternal< ::quotation::GradedFundIopv >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quotation::OptionVolatility* Arena::CreateMaybeMessage< ::quotation::OptionVolatility >(Arena* arena) {
  return Arena::CreateInternal< ::quotation::OptionVolatility >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quotation::IndexParam* Arena::CreateMaybeMessage< ::quotation::IndexParam >(Arena* arena) {
  return Arena::CreateInternal< ::quotation::IndexParam >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quotation::SecurityOrderInfo* Arena::CreateMaybeMessage< ::quotation::SecurityOrderInfo >(Arena* arena) {
  return Arena::CreateInternal< ::quotation::SecurityOrderInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quotation::PublicOrderData* Arena::CreateMaybeMessage< ::quotation::PublicOrderData >(Arena* arena) {
  return Arena::CreateInternal< ::quotation::PublicOrderData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quotation::PublicOrderQueueData* Arena::CreateMaybeMessage< ::quotation::PublicOrderQueueData >(Arena* arena) {
  return Arena::CreateInternal< ::quotation::PublicOrderQueueData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quotation::PublicOrderTransaction* Arena::CreateMaybeMessage< ::quotation::PublicOrderTransaction >(Arena* arena) {
  return Arena::CreateInternal< ::quotation::PublicOrderTransaction >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quotation::CurrentBasis* Arena::CreateMaybeMessage< ::quotation::CurrentBasis >(Arena* arena) {
  return Arena::CreateInternal< ::quotation::CurrentBasis >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quotation::CircleQuotation* Arena::CreateMaybeMessage< ::quotation::CircleQuotation >(Arena* arena) {
  return Arena::CreateInternal< ::quotation::CircleQuotation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quotation::OptionVolatilitySurface_Value* Arena::CreateMaybeMessage< ::quotation::OptionVolatilitySurface_Value >(Arena* arena) {
  return Arena::CreateInternal< ::quotation::OptionVolatilitySurface_Value >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quotation::OptionVolatilitySurface* Arena::CreateMaybeMessage< ::quotation::OptionVolatilitySurface >(Arena* arena) {
  return Arena::CreateInternal< ::quotation::OptionVolatilitySurface >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quotation::OptionVolatilitySurfaces* Arena::CreateMaybeMessage< ::quotation::OptionVolatilitySurfaces >(Arena* arena) {
  return Arena::CreateInternal< ::quotation::OptionVolatilitySurfaces >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quotation::SetOptionVolatilitySurfacesReq* Arena::CreateMaybeMessage< ::quotation::SetOptionVolatilitySurfacesReq >(Arena* arena) {
  return Arena::CreateInternal< ::quotation::SetOptionVolatilitySurfacesReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quotation::SetOptionVolatilitySurfacesRep* Arena::CreateMaybeMessage< ::quotation::SetOptionVolatilitySurfacesRep >(Arena* arena) {
  return Arena::CreateInternal< ::quotation::SetOptionVolatilitySurfacesRep >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quotation::SecurityState* Arena::CreateMaybeMessage< ::quotation::SecurityState >(Arena* arena) {
  return Arena::CreateInternal< ::quotation::SecurityState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quotation::SecurityStateList* Arena::CreateMaybeMessage< ::quotation::SecurityStateList >(Arena* arena) {
  return Arena::CreateInternal< ::quotation::SecurityStateList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quotation::TradingDay* Arena::CreateMaybeMessage< ::quotation::TradingDay >(Arena* arena) {
  return Arena::CreateInternal< ::quotation::TradingDay >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quotation::EtfConstituentStock* Arena::CreateMaybeMessage< ::quotation::EtfConstituentStock >(Arena* arena) {
  return Arena::CreateInternal< ::quotation::EtfConstituentStock >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quotation::EtfListInfo* Arena::CreateMaybeMessage< ::quotation::EtfListInfo >(Arena* arena) {
  return Arena::CreateInternal< ::quotation::EtfListInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quotation::EtfFees_EtfFee* Arena::CreateMaybeMessage< ::quotation::EtfFees_EtfFee >(Arena* arena) {
  return Arena::CreateInternal< ::quotation::EtfFees_EtfFee >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quotation::EtfFees* Arena::CreateMaybeMessage< ::quotation::EtfFees >(Arena* arena) {
  return Arena::CreateInternal< ::quotation::EtfFees >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quotation::StockAmendments_StockAmendment* Arena::CreateMaybeMessage< ::quotation::StockAmendments_StockAmendment >(Arena* arena) {
  return Arena::CreateInternal< ::quotation::StockAmendments_StockAmendment >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quotation::StockAmendments* Arena::CreateMaybeMessage< ::quotation::StockAmendments >(Arena* arena) {
  return Arena::CreateInternal< ::quotation::StockAmendments >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quotation::GradedFundInfo* Arena::CreateMaybeMessage< ::quotation::GradedFundInfo >(Arena* arena) {
  return Arena::CreateInternal< ::quotation::GradedFundInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quotation::OptionInfo* Arena::CreateMaybeMessage< ::quotation::OptionInfo >(Arena* arena) {
  return Arena::CreateInternal< ::quotation::OptionInfo >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
