// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/qfuture_protocol.proto

#include "protos/qfuture_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_protos_2fqfuture_5fprotocol_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fqfuture_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FutureDealDetail_DealDetail;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fqfuture_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FutureOrderInfo_OrderDetail;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fqfuture_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OneFutureKnock;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fqfuture_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OneFuturePosition;
}  // namespace protobuf_protos_2fqfuture_5fprotocol_2eproto
namespace autotrade {
class FutureLoginReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FutureLoginReqt>
      _instance;
} _FutureLoginReqt_default_instance_;
class FutureLoginRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FutureLoginResp>
      _instance;
} _FutureLoginResp_default_instance_;
class FutureLogoutReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FutureLogoutReqt>
      _instance;
} _FutureLogoutReqt_default_instance_;
class FutureLogoutRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FutureLogoutResp>
      _instance;
} _FutureLogoutResp_default_instance_;
class FutureOrderReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FutureOrderReqt>
      _instance;
} _FutureOrderReqt_default_instance_;
class FutureOrderRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FutureOrderResp>
      _instance;
} _FutureOrderResp_default_instance_;
class FutureDeleteReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FutureDeleteReqt>
      _instance;
} _FutureDeleteReqt_default_instance_;
class FutureDeleteRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FutureDeleteResp>
      _instance;
} _FutureDeleteResp_default_instance_;
class FutureQueryOrderReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FutureQueryOrderReqt>
      _instance;
} _FutureQueryOrderReqt_default_instance_;
class FutureOrderInfo_OrderDetailDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FutureOrderInfo_OrderDetail>
      _instance;
} _FutureOrderInfo_OrderDetail_default_instance_;
class FutureOrderInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FutureOrderInfo>
      _instance;
} _FutureOrderInfo_default_instance_;
class FutureQueryCaptialReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FutureQueryCaptialReqt>
      _instance;
} _FutureQueryCaptialReqt_default_instance_;
class FutureCapitalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FutureCapital>
      _instance;
} _FutureCapital_default_instance_;
class FutureQueryPositionReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FutureQueryPositionReqt>
      _instance;
} _FutureQueryPositionReqt_default_instance_;
class FuturePositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FuturePosition>
      _instance;
} _FuturePosition_default_instance_;
class OneFuturePositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OneFuturePosition>
      _instance;
} _OneFuturePosition_default_instance_;
class FutureQueryDealDetailReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FutureQueryDealDetailReqt>
      _instance;
} _FutureQueryDealDetailReqt_default_instance_;
class FutureDealDetail_DealDetailDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FutureDealDetail_DealDetail>
      _instance;
} _FutureDealDetail_DealDetail_default_instance_;
class FutureDealDetailDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FutureDealDetail>
      _instance;
} _FutureDealDetail_default_instance_;
class OneFutureKnockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OneFutureKnock>
      _instance;
} _OneFutureKnock_default_instance_;
class SumFutureKnockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SumFutureKnock>
      _instance;
} _SumFutureKnock_default_instance_;
class FutureQuerySettlementReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FutureQuerySettlementReqt>
      _instance;
} _FutureQuerySettlementReqt_default_instance_;
class FutureQuerySettlementRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FutureQuerySettlementResp>
      _instance;
} _FutureQuerySettlementResp_default_instance_;
class FutureConfirmSettlementReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FutureConfirmSettlementReqt>
      _instance;
} _FutureConfirmSettlementReqt_default_instance_;
class FutureConfirmSettlementRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FutureConfirmSettlementResp>
      _instance;
} _FutureConfirmSettlementResp_default_instance_;
class FutureQuerySettlementConfirmReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FutureQuerySettlementConfirmReqt>
      _instance;
} _FutureQuerySettlementConfirmReqt_default_instance_;
class FutureQuerySettlementConfirmRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FutureQuerySettlementConfirmResp>
      _instance;
} _FutureQuerySettlementConfirmResp_default_instance_;
class FutureSystemConnectedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FutureSystemConnected>
      _instance;
} _FutureSystemConnected_default_instance_;
class FutureSystemDisconnectedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FutureSystemDisconnected>
      _instance;
} _FutureSystemDisconnected_default_instance_;
class FutureOrderInsertRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FutureOrderInsertResp>
      _instance;
} _FutureOrderInsertResp_default_instance_;
class FutureOrderActionRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FutureOrderActionResp>
      _instance;
} _FutureOrderActionResp_default_instance_;
class FutureRtnOrderInsertErrDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FutureRtnOrderInsertErr>
      _instance;
} _FutureRtnOrderInsertErr_default_instance_;
class FutureRtnOrderActionErrDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FutureRtnOrderActionErr>
      _instance;
} _FutureRtnOrderActionErr_default_instance_;
class FutureRtnOrderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FutureRtnOrder>
      _instance;
} _FutureRtnOrder_default_instance_;
class FutureRtnTradeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FutureRtnTrade>
      _instance;
} _FutureRtnTrade_default_instance_;
class InnerQueryOrderReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InnerQueryOrderReqt>
      _instance;
} _InnerQueryOrderReqt_default_instance_;
class InnerFutureQueryOrderRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InnerFutureQueryOrderResp>
      _instance;
} _InnerFutureQueryOrderResp_default_instance_;
class InnerQueryTradeReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InnerQueryTradeReqt>
      _instance;
} _InnerQueryTradeReqt_default_instance_;
class InnerFutureQueryTradeRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InnerFutureQueryTradeResp>
      _instance;
} _InnerFutureQueryTradeResp_default_instance_;
}  // namespace autotrade
namespace protobuf_protos_2fqfuture_5fprotocol_2eproto {
static void InitDefaultsFutureLoginReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_FutureLoginReqt_default_instance_;
    new (ptr) ::autotrade::FutureLoginReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::FutureLoginReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FutureLoginReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFutureLoginReqt}, {}};

static void InitDefaultsFutureLoginResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_FutureLoginResp_default_instance_;
    new (ptr) ::autotrade::FutureLoginResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::FutureLoginResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FutureLoginResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFutureLoginResp}, {}};

static void InitDefaultsFutureLogoutReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_FutureLogoutReqt_default_instance_;
    new (ptr) ::autotrade::FutureLogoutReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::FutureLogoutReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FutureLogoutReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFutureLogoutReqt}, {}};

static void InitDefaultsFutureLogoutResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_FutureLogoutResp_default_instance_;
    new (ptr) ::autotrade::FutureLogoutResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::FutureLogoutResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FutureLogoutResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFutureLogoutResp}, {}};

static void InitDefaultsFutureOrderReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_FutureOrderReqt_default_instance_;
    new (ptr) ::autotrade::FutureOrderReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::FutureOrderReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FutureOrderReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFutureOrderReqt}, {}};

static void InitDefaultsFutureOrderResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_FutureOrderResp_default_instance_;
    new (ptr) ::autotrade::FutureOrderResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::FutureOrderResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FutureOrderResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFutureOrderResp}, {}};

static void InitDefaultsFutureDeleteReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_FutureDeleteReqt_default_instance_;
    new (ptr) ::autotrade::FutureDeleteReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::FutureDeleteReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FutureDeleteReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFutureDeleteReqt}, {}};

static void InitDefaultsFutureDeleteResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_FutureDeleteResp_default_instance_;
    new (ptr) ::autotrade::FutureDeleteResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::FutureDeleteResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FutureDeleteResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFutureDeleteResp}, {}};

static void InitDefaultsFutureQueryOrderReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_FutureQueryOrderReqt_default_instance_;
    new (ptr) ::autotrade::FutureQueryOrderReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::FutureQueryOrderReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FutureQueryOrderReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFutureQueryOrderReqt}, {}};

static void InitDefaultsFutureOrderInfo_OrderDetail() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_FutureOrderInfo_OrderDetail_default_instance_;
    new (ptr) ::autotrade::FutureOrderInfo_OrderDetail();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::FutureOrderInfo_OrderDetail::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FutureOrderInfo_OrderDetail =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFutureOrderInfo_OrderDetail}, {}};

static void InitDefaultsFutureOrderInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_FutureOrderInfo_default_instance_;
    new (ptr) ::autotrade::FutureOrderInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::FutureOrderInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FutureOrderInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFutureOrderInfo}, {
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureOrderInfo_OrderDetail.base,}};

static void InitDefaultsFutureQueryCaptialReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_FutureQueryCaptialReqt_default_instance_;
    new (ptr) ::autotrade::FutureQueryCaptialReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::FutureQueryCaptialReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FutureQueryCaptialReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFutureQueryCaptialReqt}, {}};

static void InitDefaultsFutureCapital() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_FutureCapital_default_instance_;
    new (ptr) ::autotrade::FutureCapital();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::FutureCapital::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FutureCapital =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFutureCapital}, {}};

static void InitDefaultsFutureQueryPositionReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_FutureQueryPositionReqt_default_instance_;
    new (ptr) ::autotrade::FutureQueryPositionReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::FutureQueryPositionReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FutureQueryPositionReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFutureQueryPositionReqt}, {}};

static void InitDefaultsFuturePosition() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_FuturePosition_default_instance_;
    new (ptr) ::autotrade::FuturePosition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::FuturePosition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FuturePosition =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFuturePosition}, {
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_OneFuturePosition.base,}};

static void InitDefaultsOneFuturePosition() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_OneFuturePosition_default_instance_;
    new (ptr) ::autotrade::OneFuturePosition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::OneFuturePosition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OneFuturePosition =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOneFuturePosition}, {}};

static void InitDefaultsFutureQueryDealDetailReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_FutureQueryDealDetailReqt_default_instance_;
    new (ptr) ::autotrade::FutureQueryDealDetailReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::FutureQueryDealDetailReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FutureQueryDealDetailReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFutureQueryDealDetailReqt}, {}};

static void InitDefaultsFutureDealDetail_DealDetail() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_FutureDealDetail_DealDetail_default_instance_;
    new (ptr) ::autotrade::FutureDealDetail_DealDetail();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::FutureDealDetail_DealDetail::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FutureDealDetail_DealDetail =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFutureDealDetail_DealDetail}, {}};

static void InitDefaultsFutureDealDetail() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_FutureDealDetail_default_instance_;
    new (ptr) ::autotrade::FutureDealDetail();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::FutureDealDetail::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FutureDealDetail =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFutureDealDetail}, {
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureDealDetail_DealDetail.base,}};

static void InitDefaultsOneFutureKnock() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_OneFutureKnock_default_instance_;
    new (ptr) ::autotrade::OneFutureKnock();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::OneFutureKnock::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OneFutureKnock =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOneFutureKnock}, {}};

static void InitDefaultsSumFutureKnock() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::autotrade::SumFutureKnock::_i_give_permission_to_break_this_code_default_type_.DefaultConstruct();
  *::autotrade::SumFutureKnock::_i_give_permission_to_break_this_code_default_type_.get_mutable() = ::std::string("F", 1);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::autotrade::SumFutureKnock::_i_give_permission_to_break_this_code_default_type_.get_mutable());
  {
    void* ptr = &::autotrade::_SumFutureKnock_default_instance_;
    new (ptr) ::autotrade::SumFutureKnock();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::SumFutureKnock::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SumFutureKnock =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSumFutureKnock}, {
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_OneFutureKnock.base,}};

static void InitDefaultsFutureQuerySettlementReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_FutureQuerySettlementReqt_default_instance_;
    new (ptr) ::autotrade::FutureQuerySettlementReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::FutureQuerySettlementReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FutureQuerySettlementReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFutureQuerySettlementReqt}, {}};

static void InitDefaultsFutureQuerySettlementResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_FutureQuerySettlementResp_default_instance_;
    new (ptr) ::autotrade::FutureQuerySettlementResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::FutureQuerySettlementResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FutureQuerySettlementResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFutureQuerySettlementResp}, {}};

static void InitDefaultsFutureConfirmSettlementReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_FutureConfirmSettlementReqt_default_instance_;
    new (ptr) ::autotrade::FutureConfirmSettlementReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::FutureConfirmSettlementReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FutureConfirmSettlementReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFutureConfirmSettlementReqt}, {}};

static void InitDefaultsFutureConfirmSettlementResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_FutureConfirmSettlementResp_default_instance_;
    new (ptr) ::autotrade::FutureConfirmSettlementResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::FutureConfirmSettlementResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FutureConfirmSettlementResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFutureConfirmSettlementResp}, {}};

static void InitDefaultsFutureQuerySettlementConfirmReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_FutureQuerySettlementConfirmReqt_default_instance_;
    new (ptr) ::autotrade::FutureQuerySettlementConfirmReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::FutureQuerySettlementConfirmReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FutureQuerySettlementConfirmReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFutureQuerySettlementConfirmReqt}, {}};

static void InitDefaultsFutureQuerySettlementConfirmResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_FutureQuerySettlementConfirmResp_default_instance_;
    new (ptr) ::autotrade::FutureQuerySettlementConfirmResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::FutureQuerySettlementConfirmResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FutureQuerySettlementConfirmResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFutureQuerySettlementConfirmResp}, {}};

static void InitDefaultsFutureSystemConnected() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_FutureSystemConnected_default_instance_;
    new (ptr) ::autotrade::FutureSystemConnected();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::FutureSystemConnected::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FutureSystemConnected =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFutureSystemConnected}, {}};

static void InitDefaultsFutureSystemDisconnected() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_FutureSystemDisconnected_default_instance_;
    new (ptr) ::autotrade::FutureSystemDisconnected();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::FutureSystemDisconnected::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FutureSystemDisconnected =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFutureSystemDisconnected}, {}};

static void InitDefaultsFutureOrderInsertResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_FutureOrderInsertResp_default_instance_;
    new (ptr) ::autotrade::FutureOrderInsertResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::FutureOrderInsertResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FutureOrderInsertResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFutureOrderInsertResp}, {}};

static void InitDefaultsFutureOrderActionResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_FutureOrderActionResp_default_instance_;
    new (ptr) ::autotrade::FutureOrderActionResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::FutureOrderActionResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FutureOrderActionResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFutureOrderActionResp}, {}};

static void InitDefaultsFutureRtnOrderInsertErr() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_FutureRtnOrderInsertErr_default_instance_;
    new (ptr) ::autotrade::FutureRtnOrderInsertErr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::FutureRtnOrderInsertErr::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FutureRtnOrderInsertErr =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFutureRtnOrderInsertErr}, {}};

static void InitDefaultsFutureRtnOrderActionErr() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_FutureRtnOrderActionErr_default_instance_;
    new (ptr) ::autotrade::FutureRtnOrderActionErr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::FutureRtnOrderActionErr::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FutureRtnOrderActionErr =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFutureRtnOrderActionErr}, {}};

static void InitDefaultsFutureRtnOrder() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_FutureRtnOrder_default_instance_;
    new (ptr) ::autotrade::FutureRtnOrder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::FutureRtnOrder::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FutureRtnOrder =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFutureRtnOrder}, {}};

static void InitDefaultsFutureRtnTrade() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_FutureRtnTrade_default_instance_;
    new (ptr) ::autotrade::FutureRtnTrade();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::FutureRtnTrade::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FutureRtnTrade =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFutureRtnTrade}, {}};

static void InitDefaultsInnerQueryOrderReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_InnerQueryOrderReqt_default_instance_;
    new (ptr) ::autotrade::InnerQueryOrderReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::InnerQueryOrderReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_InnerQueryOrderReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInnerQueryOrderReqt}, {}};

static void InitDefaultsInnerFutureQueryOrderResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_InnerFutureQueryOrderResp_default_instance_;
    new (ptr) ::autotrade::InnerFutureQueryOrderResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::InnerFutureQueryOrderResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_InnerFutureQueryOrderResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInnerFutureQueryOrderResp}, {}};

static void InitDefaultsInnerQueryTradeReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_InnerQueryTradeReqt_default_instance_;
    new (ptr) ::autotrade::InnerQueryTradeReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::InnerQueryTradeReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_InnerQueryTradeReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInnerQueryTradeReqt}, {}};

static void InitDefaultsInnerFutureQueryTradeResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_InnerFutureQueryTradeResp_default_instance_;
    new (ptr) ::autotrade::InnerFutureQueryTradeResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::InnerFutureQueryTradeResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_InnerFutureQueryTradeResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInnerFutureQueryTradeResp}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_FutureLoginReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FutureLoginResp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FutureLogoutReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FutureLogoutResp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FutureOrderReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FutureOrderResp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FutureDeleteReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FutureDeleteResp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FutureQueryOrderReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FutureOrderInfo_OrderDetail.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FutureOrderInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FutureQueryCaptialReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FutureCapital.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FutureQueryPositionReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FuturePosition.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OneFuturePosition.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FutureQueryDealDetailReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FutureDealDetail_DealDetail.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FutureDealDetail.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OneFutureKnock.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SumFutureKnock.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FutureQuerySettlementReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FutureQuerySettlementResp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FutureConfirmSettlementReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FutureConfirmSettlementResp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FutureQuerySettlementConfirmReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FutureQuerySettlementConfirmResp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FutureSystemConnected.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FutureSystemDisconnected.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FutureOrderInsertResp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FutureOrderActionResp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FutureRtnOrderInsertErr.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FutureRtnOrderActionErr.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FutureRtnOrder.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FutureRtnTrade.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InnerQueryOrderReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InnerFutureQueryOrderResp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InnerQueryTradeReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InnerFutureQueryTradeResp.base);
}

::google::protobuf::Metadata file_level_metadata[39];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureLoginReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureLoginReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureLoginReqt, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureLoginReqt, trading_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureLoginReqt, broker_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureLoginReqt, future_account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureLoginReqt, pwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureLoginReqt, request_id_),
  5,
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureLoginResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureLoginResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureLoginResp, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureLoginResp, future_account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureLoginResp, trading_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureLoginResp, login_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureLoginResp, broker_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureLoginResp, system_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureLoginResp, front_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureLoginResp, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureLoginResp, max_order_ref_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureLoginResp, shfe_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureLoginResp, dce_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureLoginResp, czce_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureLoginResp, ffex_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureLoginResp, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureLoginResp, ret_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureLoginResp, ret_message_),
  15,
  0,
  1,
  2,
  3,
  4,
  12,
  13,
  5,
  6,
  7,
  8,
  9,
  10,
  14,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureLogoutReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureLogoutReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureLogoutReqt, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureLogoutReqt, broker_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureLogoutReqt, future_account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureLogoutReqt, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureLogoutReqt, ret_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureLogoutReqt, ret_message_),
  5,
  0,
  1,
  2,
  4,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureLogoutResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureLogoutResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureLogoutResp, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureLogoutResp, broker_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureLogoutResp, future_account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureLogoutResp, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureLogoutResp, ret_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureLogoutResp, ret_message_),
  5,
  0,
  1,
  2,
  4,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderReqt, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderReqt, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderReqt, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderReqt, qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderReqt, bsflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderReqt, kpcbj_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderReqt, stop_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderReqt, hedge_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderReqt, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderReqt, order_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderReqt, order_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderReqt, parent_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderReqt, parent_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderReqt, price_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderReqt, request_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderReqt, active_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderReqt, request_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderReqt, market_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderReqt, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderReqt, fund_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderReqt, trader_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderReqt, session_id_),
  20,
  0,
  10,
  11,
  12,
  14,
  13,
  15,
  1,
  2,
  3,
  4,
  5,
  19,
  16,
  21,
  17,
  18,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderResp, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderResp, order_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderResp, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderResp, order_id_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureDeleteReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureDeleteReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureDeleteReqt, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureDeleteReqt, order_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureDeleteReqt, market_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureDeleteReqt, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureDeleteReqt, fund_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureDeleteReqt, trader_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureDeleteReqt, session_id_),
  6,
  0,
  5,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureDeleteResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureDeleteResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureDeleteResp, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureDeleteResp, request_id_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQueryOrderReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQueryOrderReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQueryOrderReqt, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQueryOrderReqt, orderno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQueryOrderReqt, start_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQueryOrderReqt, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQueryOrderReqt, request_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQueryOrderReqt, request_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQueryOrderReqt, active_interval_),
  5,
  0,
  1,
  2,
  3,
  4,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderInfo_OrderDetail, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderInfo_OrderDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderInfo_OrderDetail, match_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderInfo_OrderDetail, orderno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderInfo_OrderDetail, bsflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderInfo_OrderDetail, sumbit_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderInfo_OrderDetail, order_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderInfo_OrderDetail, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderInfo_OrderDetail, order_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderInfo_OrderDetail, order_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderInfo_OrderDetail, order_frz_amt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderInfo_OrderDetail, match_amt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderInfo_OrderDetail, match_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderInfo_OrderDetail, unmatch_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderInfo_OrderDetail, order_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderInfo_OrderDetail, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderInfo_OrderDetail, match_avg_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderInfo_OrderDetail, market_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderInfo_OrderDetail, cancel_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderInfo_OrderDetail, hedge_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderInfo_OrderDetail, kpcbj_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderInfo_OrderDetail, price_type_),
  3,
  0,
  6,
  4,
  5,
  1,
  8,
  7,
  9,
  10,
  11,
  12,
  13,
  2,
  15,
  14,
  16,
  17,
  18,
  19,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderInfo, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderInfo, detail_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderInfo, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderInfo, last_pos_),
  2,
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQueryCaptialReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQueryCaptialReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQueryCaptialReqt, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQueryCaptialReqt, moneytype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQueryCaptialReqt, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQueryCaptialReqt, request_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQueryCaptialReqt, request_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQueryCaptialReqt, active_interval_),
  4,
  0,
  1,
  2,
  3,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureCapital, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureCapital, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureCapital, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureCapital, moneytype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureCapital, fund_bal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureCapital, fund_ava_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureCapital, market_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureCapital, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureCapital, exchage_margin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureCapital, delivery_margin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureCapital, exchage_delivery_margin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureCapital, islast_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureCapital, ret_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureCapital, ret_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureCapital, curr_margin_),
  12,
  0,
  3,
  4,
  5,
  1,
  6,
  7,
  8,
  9,
  10,
  2,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQueryPositionReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQueryPositionReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQueryPositionReqt, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQueryPositionReqt, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQueryPositionReqt, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQueryPositionReqt, request_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQueryPositionReqt, request_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQueryPositionReqt, active_interval_),
  4,
  0,
  1,
  2,
  3,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FuturePosition, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FuturePosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FuturePosition, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FuturePosition, one_positions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FuturePosition, request_id_),
  1,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneFuturePosition, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneFuturePosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneFuturePosition, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneFuturePosition, market_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneFuturePosition, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneFuturePosition, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneFuturePosition, bsflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneFuturePosition, yd_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneFuturePosition, today_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneFuturePosition, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneFuturePosition, hedge_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneFuturePosition, open_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneFuturePosition, account_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneFuturePosition, islast_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneFuturePosition, ret_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneFuturePosition, ret_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneFuturePosition, can_close_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneFuturePosition, pending_close_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneFuturePosition, today_open_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneFuturePosition, today_close_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneFuturePosition, today_opening_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneFuturePosition, today_closing_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneFuturePosition, yd_closing_volume_),
  20,
  4,
  0,
  1,
  5,
  6,
  7,
  8,
  10,
  9,
  2,
  11,
  19,
  3,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQueryDealDetailReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQueryDealDetailReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQueryDealDetailReqt, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQueryDealDetailReqt, order_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQueryDealDetailReqt, start_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQueryDealDetailReqt, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQueryDealDetailReqt, request_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQueryDealDetailReqt, request_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQueryDealDetailReqt, active_interval_),
  5,
  0,
  1,
  2,
  3,
  4,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureDealDetail_DealDetail, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureDealDetail_DealDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureDealDetail_DealDetail, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureDealDetail_DealDetail, bsflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureDealDetail_DealDetail, orderno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureDealDetail_DealDetail, market_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureDealDetail_DealDetail, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureDealDetail_DealDetail, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureDealDetail_DealDetail, match_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureDealDetail_DealDetail, match_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureDealDetail_DealDetail, match_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureDealDetail_DealDetail, match_amt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureDealDetail_DealDetail, clear_amt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureDealDetail_DealDetail, match_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureDealDetail_DealDetail, order_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureDealDetail_DealDetail, order_price_),
  0,
  4,
  1,
  5,
  2,
  3,
  6,
  9,
  7,
  8,
  11,
  12,
  10,
  13,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureDealDetail, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureDealDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureDealDetail, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureDealDetail, deal_details_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureDealDetail, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureDealDetail, last_pos_),
  2,
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneFutureKnock, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneFutureKnock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneFutureKnock, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneFutureKnock, stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneFutureKnock, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneFutureKnock, order_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneFutureKnock, order_no_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneFutureKnock, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneFutureKnock, order_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneFutureKnock, match_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneFutureKnock, order_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneFutureKnock, match_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneFutureKnock, match_amt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneFutureKnock, bsflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneFutureKnock, account_name_),
  12,
  5,
  0,
  1,
  2,
  3,
  6,
  7,
  8,
  9,
  10,
  11,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::SumFutureKnock, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::SumFutureKnock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::SumFutureKnock, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::SumFutureKnock, stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::SumFutureKnock, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::SumFutureKnock, order_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::SumFutureKnock, order_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::SumFutureKnock, match_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::SumFutureKnock, match_amt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::SumFutureKnock, cancel_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::SumFutureKnock, finished_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::SumFutureKnock, order_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::SumFutureKnock, one_knocks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::SumFutureKnock, account_name_),
  10,
  4,
  0,
  1,
  5,
  6,
  7,
  8,
  9,
  2,
  ~0u,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQuerySettlementReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQuerySettlementReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQuerySettlementReqt, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQuerySettlementReqt, broker_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQuerySettlementReqt, future_account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQuerySettlementReqt, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQuerySettlementReqt, trading_day_),
  4,
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQuerySettlementResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQuerySettlementResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQuerySettlementResp, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQuerySettlementResp, broker_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQuerySettlementResp, future_account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQuerySettlementResp, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQuerySettlementResp, trading_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQuerySettlementResp, sequence_no_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQuerySettlementResp, settlement_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQuerySettlementResp, settlement_content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQuerySettlementResp, ret_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQuerySettlementResp, ret_message_),
  9,
  0,
  1,
  2,
  3,
  6,
  7,
  4,
  8,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureConfirmSettlementReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureConfirmSettlementReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureConfirmSettlementReqt, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureConfirmSettlementReqt, broker_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureConfirmSettlementReqt, future_account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureConfirmSettlementReqt, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureConfirmSettlementReqt, confirm_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureConfirmSettlementReqt, confirm_time_),
  5,
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureConfirmSettlementResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureConfirmSettlementResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureConfirmSettlementResp, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureConfirmSettlementResp, broker_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureConfirmSettlementResp, future_account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureConfirmSettlementResp, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureConfirmSettlementResp, confirm_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureConfirmSettlementResp, confirm_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureConfirmSettlementResp, ret_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureConfirmSettlementResp, ret_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureConfirmSettlementResp, islast_),
  8,
  0,
  1,
  2,
  3,
  4,
  6,
  5,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQuerySettlementConfirmReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQuerySettlementConfirmReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQuerySettlementConfirmReqt, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQuerySettlementConfirmReqt, broker_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQuerySettlementConfirmReqt, future_account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQuerySettlementConfirmReqt, request_id_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQuerySettlementConfirmResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQuerySettlementConfirmResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQuerySettlementConfirmResp, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQuerySettlementConfirmResp, broker_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQuerySettlementConfirmResp, future_account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQuerySettlementConfirmResp, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQuerySettlementConfirmResp, confirm_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQuerySettlementConfirmResp, confirm_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQuerySettlementConfirmResp, ret_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureQuerySettlementConfirmResp, ret_message_),
  7,
  0,
  1,
  2,
  3,
  4,
  6,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureSystemConnected, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureSystemConnected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureSystemConnected, funcid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureSystemDisconnected, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureSystemDisconnected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureSystemDisconnected, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureSystemDisconnected, reason_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderInsertResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderInsertResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderInsertResp, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderInsertResp, ret_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderInsertResp, ret_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderInsertResp, order_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderInsertResp, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderInsertResp, bsflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderInsertResp, kpcbj_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderInsertResp, hedge_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderInsertResp, account_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderInsertResp, front_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderInsertResp, session_id_),
  10,
  4,
  0,
  1,
  2,
  5,
  6,
  7,
  3,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderActionResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderActionResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderActionResp, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderActionResp, ret_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderActionResp, ret_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderActionResp, order_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderActionResp, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderActionResp, account_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderActionResp, front_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureOrderActionResp, session_id_),
  7,
  4,
  0,
  1,
  2,
  3,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrderInsertErr, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrderInsertErr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrderInsertErr, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrderInsertErr, ret_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrderInsertErr, ret_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrderInsertErr, order_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrderInsertErr, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrderInsertErr, bsflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrderInsertErr, kpcbj_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrderInsertErr, hedge_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrderInsertErr, account_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrderInsertErr, front_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrderInsertErr, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrderInsertErr, order_status_),
  11,
  5,
  0,
  1,
  2,
  6,
  7,
  8,
  3,
  9,
  10,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrderActionErr, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrderActionErr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrderActionErr, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrderActionErr, ret_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrderActionErr, ret_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrderActionErr, order_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrderActionErr, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrderActionErr, account_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrderActionErr, front_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrderActionErr, session_id_),
  7,
  4,
  0,
  1,
  2,
  3,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrder, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrder, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrder, front_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrder, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrder, exchange_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrder, account_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrder, order_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrder, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrder, order_sys_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrder, order_submit_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrder, order_local_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrder, order_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrder, order_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrder, match_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrder, unmatch_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrder, bsflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrder, hedge_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrder, kpcbj_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrder, insert_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrder, insert_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrder, active_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrder, suspend_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrder, update_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnOrder, cancel_time_),
  17,
  8,
  9,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  10,
  11,
  12,
  13,
  14,
  15,
  18,
  19,
  20,
  21,
  22,
  16,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnTrade, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnTrade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnTrade, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnTrade, front_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnTrade, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnTrade, exchange_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnTrade, account_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnTrade, order_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnTrade, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnTrade, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnTrade, match_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnTrade, match_amt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnTrade, bsflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnTrade, kpcbj_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnTrade, hedge_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnTrade, stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnTrade, match_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::FutureRtnTrade, order_sys_id_),
  15,
  6,
  7,
  0,
  1,
  2,
  3,
  4,
  8,
  9,
  10,
  11,
  14,
  12,
  13,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerQueryOrderReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerQueryOrderReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerQueryOrderReqt, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerQueryOrderReqt, broker_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerQueryOrderReqt, future_account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerQueryOrderReqt, exchange_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerQueryOrderReqt, order_sys_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerQueryOrderReqt, insert_time_start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerQueryOrderReqt, insert_time_end_),
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, broker_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, future_account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, front_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, ret_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, ret_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, islast_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, order_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, order_price_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, bsflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, kpcbj_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, hedge_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, order_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, order_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, time_condition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, order_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, volume_condition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, min_match_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, contingent_condition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, stop_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, force_close_reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, order_local_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, exchange_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, participant_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, order_submit_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, trading_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, settlement_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, order_sys_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, order_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, order_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, order_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, match_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, remain_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, insert_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, insert_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, active_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, suspend_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, update_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, cancel_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryOrderResp, instrument_id_),
  38,
  0,
  1,
  2,
  18,
  19,
  20,
  3,
  21,
  4,
  5,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  35,
  36,
  39,
  40,
  41,
  42,
  43,
  37,
  17,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerQueryTradeReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerQueryTradeReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerQueryTradeReqt, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerQueryTradeReqt, broker_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerQueryTradeReqt, future_account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerQueryTradeReqt, instrument_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerQueryTradeReqt, exchange_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerQueryTradeReqt, order_sys_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerQueryTradeReqt, insert_time_start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerQueryTradeReqt, insert_time_end_),
  7,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryTradeResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryTradeResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryTradeResp, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryTradeResp, broker_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryTradeResp, future_account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryTradeResp, instrument_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryTradeResp, order_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryTradeResp, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryTradeResp, exchange_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryTradeResp, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryTradeResp, bsflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryTradeResp, order_sys_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryTradeResp, exchange_instrument_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryTradeResp, kpcbj_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryTradeResp, hedge_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryTradeResp, match_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryTradeResp, match_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryTradeResp, match_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryTradeResp, match_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryTradeResp, match_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryTradeResp, order_local_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryTradeResp, clearing_part_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryTradeResp, sequence_no_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryTradeResp, trading_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryTradeResp, settlement_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryTradeResp, ret_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryTradeResp, ret_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::InnerFutureQueryTradeResp, islast_),
  25,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  13,
  7,
  8,
  14,
  16,
  15,
  17,
  18,
  19,
  20,
  9,
  10,
  11,
  21,
  22,
  23,
  12,
  24,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::autotrade::FutureLoginReqt)},
  { 17, 38, sizeof(::autotrade::FutureLoginResp)},
  { 54, 65, sizeof(::autotrade::FutureLogoutReqt)},
  { 71, 82, sizeof(::autotrade::FutureLogoutResp)},
  { 88, 115, sizeof(::autotrade::FutureOrderReqt)},
  { 137, 146, sizeof(::autotrade::FutureOrderResp)},
  { 150, 162, sizeof(::autotrade::FutureDeleteReqt)},
  { 169, 176, sizeof(::autotrade::FutureDeleteResp)},
  { 178, 190, sizeof(::autotrade::FutureQueryOrderReqt)},
  { 197, 222, sizeof(::autotrade::FutureOrderInfo_OrderDetail)},
  { 242, 251, sizeof(::autotrade::FutureOrderInfo)},
  { 255, 266, sizeof(::autotrade::FutureQueryCaptialReqt)},
  { 272, 290, sizeof(::autotrade::FutureCapital)},
  { 303, 314, sizeof(::autotrade::FutureQueryPositionReqt)},
  { 320, 328, sizeof(::autotrade::FuturePosition)},
  { 331, 357, sizeof(::autotrade::OneFuturePosition)},
  { 378, 390, sizeof(::autotrade::FutureQueryDealDetailReqt)},
  { 397, 416, sizeof(::autotrade::FutureDealDetail_DealDetail)},
  { 430, 439, sizeof(::autotrade::FutureDealDetail)},
  { 443, 461, sizeof(::autotrade::OneFutureKnock)},
  { 474, 491, sizeof(::autotrade::SumFutureKnock)},
  { 503, 513, sizeof(::autotrade::FutureQuerySettlementReqt)},
  { 518, 533, sizeof(::autotrade::FutureQuerySettlementResp)},
  { 543, 554, sizeof(::autotrade::FutureConfirmSettlementReqt)},
  { 560, 574, sizeof(::autotrade::FutureConfirmSettlementResp)},
  { 583, 592, sizeof(::autotrade::FutureQuerySettlementConfirmReqt)},
  { 596, 609, sizeof(::autotrade::FutureQuerySettlementConfirmResp)},
  { 617, 623, sizeof(::autotrade::FutureSystemConnected)},
  { 624, 631, sizeof(::autotrade::FutureSystemDisconnected)},
  { 633, 649, sizeof(::autotrade::FutureOrderInsertResp)},
  { 660, 673, sizeof(::autotrade::FutureOrderActionResp)},
  { 681, 698, sizeof(::autotrade::FutureRtnOrderInsertErr)},
  { 710, 723, sizeof(::autotrade::FutureRtnOrderActionErr)},
  { 731, 759, sizeof(::autotrade::FutureRtnOrder)},
  { 782, 803, sizeof(::autotrade::FutureRtnTrade)},
  { 819, 831, sizeof(::autotrade::InnerQueryOrderReqt)},
  { 838, 887, sizeof(::autotrade::InnerFutureQueryOrderResp)},
  { 931, 944, sizeof(::autotrade::InnerQueryTradeReqt)},
  { 952, 983, sizeof(::autotrade::InnerFutureQueryTradeResp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_FutureLoginReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_FutureLoginResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_FutureLogoutReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_FutureLogoutResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_FutureOrderReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_FutureOrderResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_FutureDeleteReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_FutureDeleteResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_FutureQueryOrderReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_FutureOrderInfo_OrderDetail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_FutureOrderInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_FutureQueryCaptialReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_FutureCapital_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_FutureQueryPositionReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_FuturePosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_OneFuturePosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_FutureQueryDealDetailReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_FutureDealDetail_DealDetail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_FutureDealDetail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_OneFutureKnock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_SumFutureKnock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_FutureQuerySettlementReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_FutureQuerySettlementResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_FutureConfirmSettlementReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_FutureConfirmSettlementResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_FutureQuerySettlementConfirmReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_FutureQuerySettlementConfirmResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_FutureSystemConnected_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_FutureSystemDisconnected_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_FutureOrderInsertResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_FutureOrderActionResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_FutureRtnOrderInsertErr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_FutureRtnOrderActionErr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_FutureRtnOrder_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_FutureRtnTrade_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_InnerQueryOrderReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_InnerFutureQueryOrderResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_InnerQueryTradeReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_InnerFutureQueryTradeResp_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "protos/qfuture_protocol.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 39);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\035protos/qfuture_protocol.proto\022\tautotra"
      "de\"\214\001\n\017FutureLoginReqt\022\030\n\006funcid\030\001 \001(\005:\010"
      "12000001\022\023\n\013trading_day\030\002 \001(\t\022\021\n\tbroker_"
      "id\030\003 \001(\t\022\026\n\016future_account\030\004 \001(\t\022\013\n\003pwd\030"
      "\005 \001(\t\022\022\n\nrequest_id\030\006 \001(\t\"\327\002\n\017FutureLogi"
      "nResp\022\030\n\006funcid\030\001 \001(\005:\01012100001\022\026\n\016futur"
      "e_account\030\002 \001(\t\022\023\n\013trading_day\030\003 \001(\t\022\022\n\n"
      "login_time\030\004 \001(\t\022\021\n\tbroker_id\030\005 \001(\t\022\023\n\013s"
      "ystem_name\030\006 \001(\t\022\020\n\010front_id\030\007 \001(\005\022\022\n\nse"
      "ssion_id\030\010 \001(\005\022\025\n\rmax_order_ref\030\t \001(\t\022\021\n"
      "\tshfe_time\030\n \001(\t\022\020\n\010dce_time\030\013 \001(\t\022\021\n\tcz"
      "ce_time\030\014 \001(\t\022\021\n\tffex_time\030\r \001(\t\022\022\n\nrequ"
      "est_id\030\016 \001(\t\022\020\n\010ret_code\030\017 \002(\005\022\023\n\013ret_me"
      "ssage\030\020 \001(\t\"\222\001\n\020FutureLogoutReqt\022\030\n\006func"
      "id\030\001 \001(\005:\01012000002\022\021\n\tbroker_id\030\002 \001(\t\022\026\n"
      "\016future_account\030\003 \001(\t\022\022\n\nrequest_id\030\004 \001("
      "\t\022\020\n\010ret_code\030\005 \002(\005\022\023\n\013ret_message\030\006 \001(\t"
      "\"\222\001\n\020FutureLogoutResp\022\030\n\006funcid\030\001 \001(\005:\0101"
      "2100002\022\021\n\tbroker_id\030\002 \001(\t\022\026\n\016future_acc"
      "ount\030\003 \001(\t\022\022\n\nrequest_id\030\004 \001(\t\022\020\n\010ret_co"
      "de\030\005 \002(\005\022\023\n\013ret_message\030\006 \001(\t\"\305\003\n\017Future"
      "OrderReqt\022\030\n\006funcid\030\001 \001(\005:\01012001001\022\014\n\004c"
      "ode\030\002 \002(\t\022\r\n\005price\030\003 \002(\003\022\013\n\003qty\030\004 \002(\r\022\016\n"
      "\006bsflag\030\005 \002(\r\022\020\n\005kpcbj\030\006 \001(\005:\0010\022\025\n\nstop_"
      "price\030\007 \001(\003:\0010\022\025\n\nhedge_flag\030\010 \001(\005:\0010\022\022\n"
      "\nrequest_id\030\t \001(\t\022\020\n\010order_id\030\n \002(\t\022\022\n\no"
      "rder_type\030\013 \001(\t\022\021\n\tparent_id\030\014 \001(\t\022\023\n\013pa"
      "rent_type\030\r \001(\t\022\025\n\nprice_type\030\016 \001(\005:\0010\022\027"
      "\n\014request_time\030\017 \001(\003:\0010\022\035\n\017active_interv"
      "al\030\020 \001(\003:\0041000\022\027\n\014request_date\030\021 \001(\003:\0010\022"
      "\016\n\006market\030\022 \001(\003\022\014\n\004name\030\023 \001(\t\022\017\n\007fund_id"
      "\030\024 \001(\t\022\021\n\ttrader_id\030\025 \001(\t\022\022\n\nsession_id\030"
      "\026 \001(\t\"f\n\017FutureOrderResp\022\030\n\006funcid\030\001 \001(\005"
      ":\01012101001\022\023\n\013order_group\030\002 \002(\t\022\022\n\nreque"
      "st_id\030\003 \001(\t\022\020\n\010order_id\030\004 \002(\t\"\240\001\n\020Future"
      "DeleteReqt\022\030\n\006funcid\030\001 \001(\005:\01012001002\022\023\n\013"
      "order_group\030\002 \002(\t\022\021\n\006market\030\003 \001(\r:\0010\022\022\n\n"
      "request_id\030\004 \001(\t\022\017\n\007fund_id\030\005 \001(\t\022\021\n\ttra"
      "der_id\030\006 \001(\t\022\022\n\nsession_id\030\007 \001(\t\"@\n\020Futu"
      "reDeleteResp\022\030\n\006funcid\030\001 \001(\005:\01012101002\022\022"
      "\n\nrequest_id\030\002 \001(\t\"\270\001\n\024FutureQueryOrderR"
      "eqt\022\030\n\006funcid\030\001 \001(\005:\01012002002\022\021\n\007orderno"
      "\030\002 \001(\t:\000\022\023\n\tstart_pos\030\003 \001(\t:\000\022\022\n\nrequest"
      "_id\030\004 \001(\t\022\024\n\014request_date\030\005 \001(\003\022\024\n\014reque"
      "st_time\030\006 \001(\003\022\036\n\017active_interval\030\007 \001(\003:\005"
      "10000\"\234\004\n\017FutureOrderInfo\022\030\n\006funcid\030\001 \001("
      "\005:\01012102002\022;\n\013detail_list\030\002 \003(\0132&.autot"
      "rade.FutureOrderInfo.OrderDetail\022\022\n\nrequ"
      "est_id\030\003 \001(\t\022\020\n\010last_pos\030\004 \001(\t\032\213\003\n\013Order"
      "Detail\022\022\n\nmatch_time\030\001 \001(\004\022\017\n\007orderno\030\002 "
      "\002(\t\022\016\n\006bsflag\030\003 \002(\r\022\023\n\013sumbit_time\030\005 \001(\004"
      "\022\022\n\norder_time\030\006 \002(\004\022\014\n\004code\030\010 \002(\t\022\023\n\013or"
      "der_price\030\t \002(\003\022\021\n\torder_qty\030\n \002(\r\022\025\n\ror"
      "der_frz_amt\030\013 \002(\001\022\021\n\tmatch_amt\030\014 \002(\001\022\021\n\t"
      "match_qty\030\r \002(\r\022\023\n\013unmatch_qty\030\016 \002(\r\022\024\n\014"
      "order_status\030\017 \002(\r\022\014\n\004name\030\020 \001(\t\022\027\n\017matc"
      "h_avg_price\030\021 \002(\003\022\016\n\006market\030\022 \001(\r\022\022\n\ncan"
      "cel_qty\030\023 \001(\003\022\022\n\nhedge_flag\030\024 \001(\003\022\r\n\005kpc"
      "bj\030\025 \001(\003\022\022\n\nprice_type\030\026 \001(\003\"\245\001\n\026FutureQ"
      "ueryCaptialReqt\022\030\n\006funcid\030\001 \001(\005:\0101200200"
      "1\022\021\n\tmoneytype\030\002 \001(\t\022\022\n\nrequest_id\030\003 \001(\t"
      "\022\024\n\014request_date\030\004 \001(\003\022\024\n\014request_time\030\005"
      " \001(\003\022\036\n\017active_interval\030\006 \001(\003:\00510000\"\250\002\n"
      "\rFutureCapital\022\030\n\006funcid\030\001 \001(\005:\01012102001"
      "\022\021\n\tmoneytype\030\002 \001(\t\022\020\n\010fund_bal\030\003 \002(\001\022\020\n"
      "\010fund_ava\030\004 \002(\001\022\024\n\014market_value\030\005 \002(\001\022\022\n"
      "\nrequest_id\030\006 \001(\t\022\026\n\016exchage_margin\030\007 \001("
      "\001\022\027\n\017delivery_margin\030\010 \001(\001\022\037\n\027exchage_de"
      "livery_margin\030\t \001(\001\022\016\n\006islast\030\n \001(\010\022\020\n\010r"
      "et_code\030\013 \001(\005\022\023\n\013ret_message\030\014 \001(\t\022\023\n\013cu"
      "rr_margin\030\r \001(\001\"\241\001\n\027FutureQueryPositionR"
      "eqt\022\030\n\006funcid\030\001 \001(\005:\01012002005\022\014\n\004code\030\002 "
      "\001(\t\022\022\n\nrequest_id\030\003 \001(\t\022\024\n\014request_date\030"
      "\004 \001(\003\022\024\n\014request_time\030\005 \001(\003\022\036\n\017active_in"
      "terval\030\006 \001(\003:\00510000\"s\n\016FuturePosition\022\030\n"
      "\006funcid\030\001 \001(\005:\01012102005\0223\n\rone_positions"
      "\030\002 \003(\0132\034.autotrade.OneFuturePosition\022\022\n\n"
      "request_id\030\003 \001(\t\"\202\004\n\021OneFuturePosition\022\030"
      "\n\006funcid\030\014 \001(\005:\01012002009\022\016\n\006market\030\001 \001(\r"
      "\022\014\n\004code\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\016\n\006bsflag\030\004"
      " \001(\r\022\026\n\013yd_position\030\005 \001(\003:\0010\022\031\n\016today_po"
      "sition\030\006 \001(\003:\0010\022\023\n\010position\030\007 \001(\003:\0010\022\022\n\n"
      "hedge_flag\030\010 \001(\005\022\024\n\topen_cost\030\t \001(\001:\0010\022\024"
      "\n\014account_name\030\n \001(\t\022\016\n\006islast\030\013 \001(\010\022\023\n\010"
      "ret_code\030\r \001(\005:\0010\022\025\n\013ret_message\030\016 \001(\t:\000"
      "\022\030\n\rcan_close_qty\030\017 \001(\003:\0010\022\034\n\021pending_cl"
      "ose_qty\030\020 \001(\003:\0010\022\034\n\021today_open_volume\030\021 "
      "\001(\003:\0010\022\035\n\022today_close_volume\030\022 \001(\003:\0010\022\037\n"
      "\024today_opening_volume\030\023 \001(\003:\0010\022\037\n\024today_"
      "closing_volume\030\024 \001(\003:\0010\022\034\n\021yd_closing_vo"
      "lume\030\025 \001(\003:\0010\"\301\001\n\031FutureQueryDealDetailR"
      "eqt\022\030\n\006funcid\030\001 \001(\005:\01012002003\022\025\n\013order_g"
      "roup\030\002 \001(\t:\000\022\023\n\tstart_pos\030\003 \001(\t:\000\022\022\n\nreq"
      "uest_id\030\004 \001(\t\022\024\n\014request_date\030\005 \001(\003\022\024\n\014r"
      "equest_time\030\006 \001(\003\022\036\n\017active_interval\030\007 \001"
      "(\003:\00510000\"\234\003\n\020FutureDealDetail\022\030\n\006funcid"
      "\030\001 \001(\005:\01012102003\022<\n\014deal_details\030\002 \003(\0132&"
      ".autotrade.FutureDealDetail.DealDetail\022\022"
      "\n\nrequest_id\030\003 \001(\t\022\020\n\010last_pos\030\004 \001(\t\032\211\002\n"
      "\nDealDetail\022\020\n\010match_id\030\001 \002(\t\022\016\n\006bsflag\030"
      "\002 \002(\r\022\017\n\007orderno\030\003 \002(\t\022\016\n\006market\030\004 \001(\r\022\014"
      "\n\004code\030\005 \002(\t\022\014\n\004name\030\006 \001(\t\022\022\n\nmatch_time"
      "\030\007 \001(\004\022\021\n\tmatch_qty\030\010 \002(\r\022\023\n\013match_price"
      "\030\t \002(\003\022\021\n\tmatch_amt\030\n \002(\003\022\021\n\tclear_amt\030\013"
      " \002(\001\022\022\n\nmatch_type\030\014 \002(\003\022\021\n\torder_qty\030\r "
      "\002(\r\022\023\n\013order_price\030\016 \002(\003\"\211\002\n\016OneFutureKn"
      "ock\022\030\n\006funcid\030\001 \001(\005:\01012003002\022\r\n\005stamp\030\002"
      " \002(\004\022\014\n\004code\030\003 \002(\t\022\023\n\013order_group\030\004 \002(\t\022"
      "\020\n\010order_no\030\005 \001(\t\022\020\n\010match_id\030\006 \001(\t\022\023\n\013o"
      "rder_price\030\007 \002(\003\022\023\n\013match_price\030\010 \002(\003\022\021\n"
      "\torder_qty\030\t \002(\004\022\021\n\tmatch_qty\030\n \002(\004\022\021\n\tm"
      "atch_amt\030\013 \001(\001\022\016\n\006bsflag\030\014 \001(\r\022\024\n\014accoun"
      "t_name\030\r \001(\t\"\241\002\n\016SumFutureKnock\022\030\n\006funci"
      "d\030\001 \001(\005:\01012003003\022\r\n\005stamp\030\002 \002(\004\022\017\n\004type"
      "\030\003 \001(\t:\001F\022\023\n\013order_group\030\004 \002(\t\022\021\n\torder_"
      "qty\030\005 \002(\004\022\021\n\tmatch_qty\030\006 \002(\004\022\021\n\tmatch_am"
      "t\030\007 \001(\001\022\025\n\ncancel_qty\030\010 \002(\004:\0010\022\027\n\010finish"
      "ed\030\t \002(\010:\005false\022\020\n\010order_id\030\n \002(\t\022-\n\none"
      "_knocks\030\013 \003(\0132\031.autotrade.OneFutureKnock"
      "\022\026\n\014account_name\030\014 \001(\t:\000\"\211\001\n\031FutureQuery"
      "SettlementReqt\022\030\n\006funcid\030\001 \001(\005:\01012002006"
      "\022\021\n\tbroker_id\030\002 \001(\t\022\026\n\016future_account\030\003 "
      "\001(\t\022\022\n\nrequest_id\030\004 \001(\t\022\023\n\013trading_day\030\005"
      " \001(\t\"\370\001\n\031FutureQuerySettlementResp\022\030\n\006fu"
      "ncid\030\001 \001(\005:\01012102006\022\021\n\tbroker_id\030\002 \001(\t\022"
      "\026\n\016future_account\030\003 \001(\t\022\022\n\nrequest_id\030\004 "
      "\001(\t\022\023\n\013trading_day\030\005 \001(\t\022\023\n\013sequence_no\030"
      "\006 \001(\005\022\025\n\rsettlement_id\030\007 \001(\005\022\032\n\022settleme"
      "nt_content\030\010 \001(\t\022\020\n\010ret_code\030\t \002(\005\022\023\n\013re"
      "t_message\030\n \001(\t\"\242\001\n\033FutureConfirmSettlem"
      "entReqt\022\030\n\006funcid\030\001 \001(\005:\01012102007\022\021\n\tbro"
      "ker_id\030\002 \001(\t\022\026\n\016future_account\030\003 \001(\t\022\022\n\n"
      "request_id\030\004 \001(\t\022\024\n\014confirm_date\030\005 \001(\t\022\024"
      "\n\014confirm_time\030\006 \001(\t\"\340\001\n\033FutureConfirmSe"
      "ttlementResp\022\030\n\006funcid\030\001 \001(\005:\01012102007\022\021"
      "\n\tbroker_id\030\002 \001(\t\022\026\n\016future_account\030\003 \001("
      "\t\022\022\n\nrequest_id\030\004 \001(\t\022\024\n\014confirm_date\030\005 "
      "\001(\t\022\024\n\014confirm_time\030\006 \001(\t\022\020\n\010ret_code\030\007 "
      "\002(\005\022\023\n\013ret_message\030\010 \001(\t\022\025\n\006islast\030\t \001(\010"
      ":\005false\"{\n FutureQuerySettlementConfirmR"
      "eqt\022\030\n\006funcid\030\001 \001(\005:\01012102008\022\021\n\tbroker_"
      "id\030\002 \001(\t\022\026\n\016future_account\030\003 \001(\t\022\022\n\nrequ"
      "est_id\030\004 \001(\t\"\316\001\n FutureQuerySettlementCo"
      "nfirmResp\022\030\n\006funcid\030\001 \001(\005:\01012102008\022\021\n\tb"
      "roker_id\030\002 \001(\t\022\026\n\016future_account\030\003 \001(\t\022\022"
      "\n\nrequest_id\030\004 \001(\t\022\024\n\014confirm_date\030\005 \001(\t"
      "\022\024\n\014confirm_time\030\006 \001(\t\022\020\n\010ret_code\030\007 \002(\005"
      "\022\023\n\013ret_message\030\010 \001(\t\"1\n\025FutureSystemCon"
      "nected\022\030\n\006funcid\030\001 \001(\005:\01012003004\"D\n\030Futu"
      "reSystemDisconnected\022\030\n\006funcid\030\001 \001(\005:\01012"
      "003005\022\016\n\006reason\030\002 \002(\005\"\352\001\n\025FutureOrderIn"
      "sertResp\022\030\n\006funcid\030\001 \001(\005:\01012003006\022\020\n\010re"
      "t_code\030\002 \002(\005\022\023\n\013ret_message\030\003 \001(\t\022\023\n\013ord"
      "er_group\030\004 \001(\t\022\014\n\004code\030\005 \001(\t\022\016\n\006bsflag\030\006"
      " \001(\005\022\r\n\005kpcbj\030\007 \001(\005\022\022\n\nhedge_flag\030\010 \001(\005\022"
      "\024\n\014account_name\030\t \001(\t\022\020\n\010front_id\030\n \001(\005\022"
      "\022\n\nsession_id\030\013 \001(\005\"\267\001\n\025FutureOrderActio"
      "nResp\022\030\n\006funcid\030\001 \001(\005:\01012003007\022\020\n\010ret_c"
      "ode\030\002 \002(\005\022\023\n\013ret_message\030\003 \001(\t\022\023\n\013order_"
      "group\030\004 \001(\t\022\014\n\004code\030\005 \001(\t\022\024\n\014account_nam"
      "e\030\006 \001(\t\022\020\n\010front_id\030\007 \001(\005\022\022\n\nsession_id\030"
      "\010 \001(\005\"\202\002\n\027FutureRtnOrderInsertErr\022\030\n\006fun"
      "cid\030\001 \001(\005:\01012003008\022\020\n\010ret_code\030\002 \002(\005\022\023\n"
      "\013ret_message\030\003 \001(\t\022\023\n\013order_group\030\004 \001(\t\022"
      "\014\n\004code\030\005 \001(\t\022\016\n\006bsflag\030\006 \001(\005\022\r\n\005kpcbj\030\007"
      " \001(\005\022\022\n\nhedge_flag\030\010 \001(\005\022\024\n\014account_name"
      "\030\t \001(\t\022\020\n\010front_id\030\n \001(\005\022\022\n\nsession_id\030\013"
      " \001(\005\022\024\n\014order_status\030\014 \001(\t\"\271\001\n\027FutureRtn"
      "OrderActionErr\022\030\n\006funcid\030\001 \001(\005:\01012003009"
      "\022\020\n\010ret_code\030\002 \002(\005\022\023\n\013ret_message\030\003 \001(\t\022"
      "\023\n\013order_group\030\004 \001(\t\022\014\n\004code\030\005 \001(\t\022\024\n\014ac"
      "count_name\030\006 \001(\t\022\020\n\010front_id\030\007 \001(\005\022\022\n\nse"
      "ssion_id\030\010 \001(\005\"\204\004\n\016FutureRtnOrder\022\030\n\006fun"
      "cid\030\001 \001(\005:\01012003010\022\020\n\010front_id\030\002 \001(\005\022\022\n"
      "\nsession_id\030\003 \001(\005\022\023\n\013exchange_id\030\004 \001(\t\022\024"
      "\n\014account_name\030\005 \001(\t\022\023\n\013order_group\030\006 \001("
      "\t\022\014\n\004code\030\007 \001(\t\022\024\n\014order_sys_id\030\010 \001(\t\022\033\n"
      "\023order_submit_status\030\t \001(\t\022\026\n\016order_loca"
      "l_id\030\n \001(\t\022\024\n\014order_status\030\013 \001(\t\022\021\n\torde"
      "r_qty\030\014 \001(\003\022\021\n\tmatch_qty\030\r \001(\003\022\023\n\013unmatc"
      "h_qty\030\016 \001(\003\022\016\n\006bsflag\030\017 \001(\005\022\022\n\nhedge_fla"
      "g\030\020 \001(\005\022\r\n\005kpcbj\030\021 \001(\005\022\027\n\013insert_date\030\022 "
      "\001(\005:\002-1\022\027\n\013insert_time\030\023 \001(\005:\002-1\022\027\n\013acti"
      "ve_time\030\024 \001(\005:\002-1\022\030\n\014suspend_time\030\025 \001(\005:"
      "\002-1\022\027\n\013update_time\030\026 \001(\005:\002-1\022\027\n\013cancel_t"
      "ime\030\027 \001(\005:\002-1\"\303\002\n\016FutureRtnTrade\022\030\n\006func"
      "id\030\001 \001(\005:\01012003011\022\020\n\010front_id\030\002 \001(\005\022\022\n\n"
      "session_id\030\003 \001(\005\022\023\n\013exchange_id\030\004 \001(\t\022\024\n"
      "\014account_name\030\005 \001(\t\022\023\n\013order_group\030\006 \001(\t"
      "\022\014\n\004code\030\007 \001(\t\022\020\n\010match_id\030\010 \001(\t\022\021\n\tmatc"
      "h_qty\030\t \001(\003\022\021\n\tmatch_amt\030\n \001(\001\022\016\n\006bsflag"
      "\030\013 \001(\005\022\r\n\005kpcbj\030\014 \001(\005\022\022\n\nhedge_flag\030\r \001("
      "\005\022\r\n\005stamp\030\016 \001(\003\022\023\n\013match_price\030\017 \001(\003\022\024\n"
      "\014order_sys_id\030\020 \001(\t\"\271\001\n\023InnerQueryOrderR"
      "eqt\022\030\n\006funcid\030\001 \001(\005:\01012003012\022\021\n\tbroker_"
      "id\030\002 \001(\t\022\026\n\016future_account\030\003 \001(\t\022\023\n\013exch"
      "ange_id\030\004 \001(\t\022\024\n\014order_sys_id\030\005 \001(\t\022\031\n\021i"
      "nsert_time_start\030\006 \001(\t\022\027\n\017insert_time_en"
      "d\030\007 \001(\t\"\360\007\n\031InnerFutureQueryOrderResp\022\030\n"
      "\006funcid\030\001 \001(\005:\01012103012\022\021\n\tbroker_id\030\002 \001"
      "(\t\022\026\n\016future_account\030\003 \001(\t\022\022\n\nrequest_id"
      "\030\004 \001(\t\022\020\n\010front_id\030\005 \001(\005\022\022\n\nsession_id\030\006"
      " \001(\005\022\023\n\010ret_code\030\007 \001(\005:\0010\022\023\n\013ret_message"
      "\030\010 \001(\t\022\025\n\006islast\030\t \001(\010:\005false\022\023\n\013order_g"
      "roup\030\n \001(\t\022\017\n\007user_id\030\013 \001(\t\022\030\n\020order_pri"
      "ce_type\030\014 \001(\005\022\016\n\006bsflag\030\r \001(\005\022\r\n\005kpcbj\030\016"
      " \001(\005\022\022\n\nhedge_flag\030\017 \001(\005\022\023\n\013order_price\030"
      "\020 \001(\003\022\021\n\torder_qty\030\021 \001(\005\022\026\n\016time_conditi"
      "on\030\022 \001(\005\022\022\n\norder_date\030\023 \001(\005\022\030\n\020volume_c"
      "ondition\030\024 \001(\005\022\030\n\020min_match_volume\030\025 \001(\005"
      "\022\034\n\024contingent_condition\030\026 \001(\005\022\022\n\nstop_p"
      "rice\030\027 \001(\003\022\032\n\022force_close_reason\030\030 \001(\005\022\026"
      "\n\016order_local_id\030\031 \001(\t\022\023\n\013exchange_id\030\032 "
      "\001(\t\022\026\n\016participant_id\030\033 \001(\t\022\021\n\tclient_id"
      "\030\034 \001(\t\022\033\n\023order_submit_status\030\035 \001(\t\022\023\n\013t"
      "rading_day\030\036 \001(\t\022\025\n\rsettlement_id\030\037 \001(\t\022"
      "\024\n\014order_sys_id\030  \001(\t\022\024\n\014order_source\030! "
      "\001(\t\022\024\n\014order_status\030\" \001(\t\022\022\n\norder_type\030"
      "# \001(\t\022\021\n\tmatch_qty\030$ \001(\005\022\022\n\nremain_qty\030%"
      " \001(\005\022\027\n\013insert_date\030& \001(\005:\002-1\022\027\n\013insert_"
      "time\030\' \001(\005:\002-1\022\027\n\013active_time\030( \001(\005:\002-1\022"
      "\030\n\014suspend_time\030) \001(\005:\002-1\022\027\n\013update_time"
      "\030* \001(\005:\002-1\022\027\n\013cancel_time\030+ \001(\005:\002-1\022\025\n\ri"
      "nstrument_id\030, \001(\t\"\320\001\n\023InnerQueryTradeRe"
      "qt\022\030\n\006funcid\030\001 \001(\005:\01012003013\022\021\n\tbroker_i"
      "d\030\002 \001(\t\022\026\n\016future_account\030\003 \001(\t\022\025\n\rinstr"
      "ument_id\030\004 \001(\t\022\023\n\013exchange_id\030\005 \001(\t\022\024\n\014o"
      "rder_sys_id\030\006 \001(\t\022\031\n\021insert_time_start\030\007"
      " \001(\t\022\027\n\017insert_time_end\030\010 \001(\t\"\305\004\n\031InnerF"
      "utureQueryTradeResp\022\030\n\006funcid\030\001 \001(\005:\010121"
      "03013\022\021\n\tbroker_id\030\002 \001(\t\022\026\n\016future_accou"
      "nt\030\003 \001(\t\022\025\n\rinstrument_id\030\004 \001(\t\022\023\n\013order"
      "_group\030\005 \001(\t\022\017\n\007user_id\030\006 \001(\t\022\023\n\013exchang"
      "e_id\030\007 \001(\t\022\020\n\010match_id\030\010 \001(\t\022\016\n\006bsflag\030\t"
      " \001(\005\022\024\n\014order_sys_id\030\n \001(\t\022\036\n\026exchange_i"
      "nstrument_id\030\013 \001(\t\022\r\n\005kpcbj\030\014 \001(\005\022\022\n\nhed"
      "ge_flag\030\r \001(\005\022\023\n\013match_price\030\016 \001(\003\022\021\n\tma"
      "tch_qty\030\017 \001(\005\022\022\n\nmatch_date\030\020 \001(\005\022\022\n\nmat"
      "ch_time\030\021 \001(\005\022\022\n\nmatch_type\030\022 \001(\005\022\026\n\016ord"
      "er_local_id\030\023 \001(\t\022\030\n\020clearing_part_id\030\024 "
      "\001(\t\022\023\n\013sequence_no\030\025 \001(\t\022\023\n\013trading_day\030"
      "\026 \001(\005\022\025\n\rsettlement_id\030\027 \001(\005\022\023\n\010ret_code"
      "\030\030 \001(\005:\0010\022\023\n\013ret_message\030\031 \001(\t\022\025\n\006islast"
      "\030\032 \001(\010:\005falseB\002H\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 9737);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protos/qfuture_protocol.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_protos_2fqfuture_5fprotocol_2eproto
namespace autotrade {

// ===================================================================

void FutureLoginReqt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FutureLoginReqt::kFuncidFieldNumber;
const int FutureLoginReqt::kTradingDayFieldNumber;
const int FutureLoginReqt::kBrokerIdFieldNumber;
const int FutureLoginReqt::kFutureAccountFieldNumber;
const int FutureLoginReqt::kPwdFieldNumber;
const int FutureLoginReqt::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FutureLoginReqt::FutureLoginReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureLoginReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.FutureLoginReqt)
}
FutureLoginReqt::FutureLoginReqt(const FutureLoginReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trading_day_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trading_day()) {
    trading_day_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trading_day_);
  }
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_broker_id()) {
    broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
  }
  future_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_future_account()) {
    future_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.future_account_);
  }
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pwd()) {
    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:autotrade.FutureLoginReqt)
}

void FutureLoginReqt::SharedCtor() {
  trading_day_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  future_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  funcid_ = 12000001;
}

FutureLoginReqt::~FutureLoginReqt() {
  // @@protoc_insertion_point(destructor:autotrade.FutureLoginReqt)
  SharedDtor();
}

void FutureLoginReqt::SharedDtor() {
  trading_day_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  broker_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  future_account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FutureLoginReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FutureLoginReqt::descriptor() {
  ::protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FutureLoginReqt& FutureLoginReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureLoginReqt.base);
  return *internal_default_instance();
}


void FutureLoginReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.FutureLoginReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      trading_day_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      broker_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      future_account_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      pwd_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    funcid_ = 12000001;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FutureLoginReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.FutureLoginReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 12000001];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string trading_day = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trading_day()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trading_day().data(), static_cast<int>(this->trading_day().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureLoginReqt.trading_day");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string broker_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_broker_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->broker_id().data(), static_cast<int>(this->broker_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureLoginReqt.broker_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string future_account = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_future_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->future_account().data(), static_cast<int>(this->future_account().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureLoginReqt.future_account");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pwd = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pwd().data(), static_cast<int>(this->pwd().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureLoginReqt.pwd");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureLoginReqt.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.FutureLoginReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.FutureLoginReqt)
  return false;
#undef DO_
}

void FutureLoginReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.FutureLoginReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12000001];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional string trading_day = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trading_day().data(), static_cast<int>(this->trading_day().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLoginReqt.trading_day");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->trading_day(), output);
  }

  // optional string broker_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLoginReqt.broker_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->broker_id(), output);
  }

  // optional string future_account = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->future_account().data(), static_cast<int>(this->future_account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLoginReqt.future_account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->future_account(), output);
  }

  // optional string pwd = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), static_cast<int>(this->pwd().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLoginReqt.pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->pwd(), output);
  }

  // optional string request_id = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLoginReqt.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.FutureLoginReqt)
}

::google::protobuf::uint8* FutureLoginReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.FutureLoginReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12000001];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional string trading_day = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trading_day().data(), static_cast<int>(this->trading_day().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLoginReqt.trading_day");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->trading_day(), target);
  }

  // optional string broker_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLoginReqt.broker_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->broker_id(), target);
  }

  // optional string future_account = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->future_account().data(), static_cast<int>(this->future_account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLoginReqt.future_account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->future_account(), target);
  }

  // optional string pwd = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), static_cast<int>(this->pwd().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLoginReqt.pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->pwd(), target);
  }

  // optional string request_id = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLoginReqt.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.FutureLoginReqt)
  return target;
}

size_t FutureLoginReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.FutureLoginReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string trading_day = 2;
    if (has_trading_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trading_day());
    }

    // optional string broker_id = 3;
    if (has_broker_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->broker_id());
    }

    // optional string future_account = 4;
    if (has_future_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->future_account());
    }

    // optional string pwd = 5;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }

    // optional string request_id = 6;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional int32 funcid = 1 [default = 12000001];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FutureLoginReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.FutureLoginReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const FutureLoginReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FutureLoginReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.FutureLoginReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.FutureLoginReqt)
    MergeFrom(*source);
  }
}

void FutureLoginReqt::MergeFrom(const FutureLoginReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.FutureLoginReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_trading_day();
      trading_day_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trading_day_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_broker_id();
      broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_future_account();
      future_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.future_account_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_pwd();
      pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000020u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FutureLoginReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.FutureLoginReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureLoginReqt::CopyFrom(const FutureLoginReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.FutureLoginReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureLoginReqt::IsInitialized() const {
  return true;
}

void FutureLoginReqt::Swap(FutureLoginReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FutureLoginReqt::InternalSwap(FutureLoginReqt* other) {
  using std::swap;
  trading_day_.Swap(&other->trading_day_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  broker_id_.Swap(&other->broker_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  future_account_.Swap(&other->future_account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pwd_.Swap(&other->pwd_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FutureLoginReqt::GetMetadata() const {
  protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FutureLoginResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FutureLoginResp::kFuncidFieldNumber;
const int FutureLoginResp::kFutureAccountFieldNumber;
const int FutureLoginResp::kTradingDayFieldNumber;
const int FutureLoginResp::kLoginTimeFieldNumber;
const int FutureLoginResp::kBrokerIdFieldNumber;
const int FutureLoginResp::kSystemNameFieldNumber;
const int FutureLoginResp::kFrontIdFieldNumber;
const int FutureLoginResp::kSessionIdFieldNumber;
const int FutureLoginResp::kMaxOrderRefFieldNumber;
const int FutureLoginResp::kShfeTimeFieldNumber;
const int FutureLoginResp::kDceTimeFieldNumber;
const int FutureLoginResp::kCzceTimeFieldNumber;
const int FutureLoginResp::kFfexTimeFieldNumber;
const int FutureLoginResp::kRequestIdFieldNumber;
const int FutureLoginResp::kRetCodeFieldNumber;
const int FutureLoginResp::kRetMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FutureLoginResp::FutureLoginResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureLoginResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.FutureLoginResp)
}
FutureLoginResp::FutureLoginResp(const FutureLoginResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  future_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_future_account()) {
    future_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.future_account_);
  }
  trading_day_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trading_day()) {
    trading_day_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trading_day_);
  }
  login_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_login_time()) {
    login_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.login_time_);
  }
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_broker_id()) {
    broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
  }
  system_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_system_name()) {
    system_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_name_);
  }
  max_order_ref_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_max_order_ref()) {
    max_order_ref_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.max_order_ref_);
  }
  shfe_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_shfe_time()) {
    shfe_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shfe_time_);
  }
  dce_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dce_time()) {
    dce_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dce_time_);
  }
  czce_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_czce_time()) {
    czce_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.czce_time_);
  }
  ffex_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ffex_time()) {
    ffex_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ffex_time_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  ret_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ret_message()) {
    ret_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_message_);
  }
  ::memcpy(&front_id_, &from.front_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&funcid_) -
    reinterpret_cast<char*>(&front_id_)) + sizeof(funcid_));
  // @@protoc_insertion_point(copy_constructor:autotrade.FutureLoginResp)
}

void FutureLoginResp::SharedCtor() {
  future_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trading_day_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  login_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_order_ref_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shfe_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dce_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  czce_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ffex_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&front_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_code_) -
      reinterpret_cast<char*>(&front_id_)) + sizeof(ret_code_));
  funcid_ = 12100001;
}

FutureLoginResp::~FutureLoginResp() {
  // @@protoc_insertion_point(destructor:autotrade.FutureLoginResp)
  SharedDtor();
}

void FutureLoginResp::SharedDtor() {
  future_account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trading_day_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  login_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  broker_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_order_ref_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shfe_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dce_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  czce_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ffex_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FutureLoginResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FutureLoginResp::descriptor() {
  ::protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FutureLoginResp& FutureLoginResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureLoginResp.base);
  return *internal_default_instance();
}


void FutureLoginResp::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.FutureLoginResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      future_account_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      trading_day_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      login_time_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      broker_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      system_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      max_order_ref_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      shfe_time_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      dce_time_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      czce_time_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000200u) {
      ffex_time_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000400u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000800u) {
      ret_message_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 61440u) {
    ::memset(&front_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_code_) -
        reinterpret_cast<char*>(&front_id_)) + sizeof(ret_code_));
    funcid_ = 12100001;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FutureLoginResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.FutureLoginResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 12100001];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string future_account = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_future_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->future_account().data(), static_cast<int>(this->future_account().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureLoginResp.future_account");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string trading_day = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trading_day()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trading_day().data(), static_cast<int>(this->trading_day().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureLoginResp.trading_day");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string login_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->login_time().data(), static_cast<int>(this->login_time().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureLoginResp.login_time");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string broker_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_broker_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->broker_id().data(), static_cast<int>(this->broker_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureLoginResp.broker_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string system_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_system_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->system_name().data(), static_cast<int>(this->system_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureLoginResp.system_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 front_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_front_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &front_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 session_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_session_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string max_order_ref = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_max_order_ref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->max_order_ref().data(), static_cast<int>(this->max_order_ref().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureLoginResp.max_order_ref");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string shfe_time = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shfe_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->shfe_time().data(), static_cast<int>(this->shfe_time().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureLoginResp.shfe_time");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string dce_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dce_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dce_time().data(), static_cast<int>(this->dce_time().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureLoginResp.dce_time");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string czce_time = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_czce_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->czce_time().data(), static_cast<int>(this->czce_time().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureLoginResp.czce_time");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ffex_time = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ffex_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ffex_time().data(), static_cast<int>(this->ffex_time().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureLoginResp.ffex_time");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureLoginResp.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ret_code = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_ret_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ret_message = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ret_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ret_message().data(), static_cast<int>(this->ret_message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureLoginResp.ret_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.FutureLoginResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.FutureLoginResp)
  return false;
#undef DO_
}

void FutureLoginResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.FutureLoginResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12100001];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional string future_account = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->future_account().data(), static_cast<int>(this->future_account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLoginResp.future_account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->future_account(), output);
  }

  // optional string trading_day = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trading_day().data(), static_cast<int>(this->trading_day().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLoginResp.trading_day");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->trading_day(), output);
  }

  // optional string login_time = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login_time().data(), static_cast<int>(this->login_time().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLoginResp.login_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->login_time(), output);
  }

  // optional string broker_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLoginResp.broker_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->broker_id(), output);
  }

  // optional string system_name = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->system_name().data(), static_cast<int>(this->system_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLoginResp.system_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->system_name(), output);
  }

  // optional int32 front_id = 7;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->front_id(), output);
  }

  // optional int32 session_id = 8;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->session_id(), output);
  }

  // optional string max_order_ref = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->max_order_ref().data(), static_cast<int>(this->max_order_ref().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLoginResp.max_order_ref");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->max_order_ref(), output);
  }

  // optional string shfe_time = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shfe_time().data(), static_cast<int>(this->shfe_time().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLoginResp.shfe_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->shfe_time(), output);
  }

  // optional string dce_time = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dce_time().data(), static_cast<int>(this->dce_time().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLoginResp.dce_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->dce_time(), output);
  }

  // optional string czce_time = 12;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->czce_time().data(), static_cast<int>(this->czce_time().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLoginResp.czce_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->czce_time(), output);
  }

  // optional string ffex_time = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ffex_time().data(), static_cast<int>(this->ffex_time().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLoginResp.ffex_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->ffex_time(), output);
  }

  // optional string request_id = 14;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLoginResp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->request_id(), output);
  }

  // required int32 ret_code = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->ret_code(), output);
  }

  // optional string ret_message = 16;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_message().data(), static_cast<int>(this->ret_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLoginResp.ret_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->ret_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.FutureLoginResp)
}

::google::protobuf::uint8* FutureLoginResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.FutureLoginResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12100001];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional string future_account = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->future_account().data(), static_cast<int>(this->future_account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLoginResp.future_account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->future_account(), target);
  }

  // optional string trading_day = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trading_day().data(), static_cast<int>(this->trading_day().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLoginResp.trading_day");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->trading_day(), target);
  }

  // optional string login_time = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login_time().data(), static_cast<int>(this->login_time().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLoginResp.login_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->login_time(), target);
  }

  // optional string broker_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLoginResp.broker_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->broker_id(), target);
  }

  // optional string system_name = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->system_name().data(), static_cast<int>(this->system_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLoginResp.system_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->system_name(), target);
  }

  // optional int32 front_id = 7;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->front_id(), target);
  }

  // optional int32 session_id = 8;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->session_id(), target);
  }

  // optional string max_order_ref = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->max_order_ref().data(), static_cast<int>(this->max_order_ref().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLoginResp.max_order_ref");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->max_order_ref(), target);
  }

  // optional string shfe_time = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shfe_time().data(), static_cast<int>(this->shfe_time().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLoginResp.shfe_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->shfe_time(), target);
  }

  // optional string dce_time = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dce_time().data(), static_cast<int>(this->dce_time().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLoginResp.dce_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->dce_time(), target);
  }

  // optional string czce_time = 12;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->czce_time().data(), static_cast<int>(this->czce_time().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLoginResp.czce_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->czce_time(), target);
  }

  // optional string ffex_time = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ffex_time().data(), static_cast<int>(this->ffex_time().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLoginResp.ffex_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->ffex_time(), target);
  }

  // optional string request_id = 14;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLoginResp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->request_id(), target);
  }

  // required int32 ret_code = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->ret_code(), target);
  }

  // optional string ret_message = 16;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_message().data(), static_cast<int>(this->ret_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLoginResp.ret_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->ret_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.FutureLoginResp)
  return target;
}

size_t FutureLoginResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.FutureLoginResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 ret_code = 15;
  if (has_ret_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret_code());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string future_account = 2;
    if (has_future_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->future_account());
    }

    // optional string trading_day = 3;
    if (has_trading_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trading_day());
    }

    // optional string login_time = 4;
    if (has_login_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login_time());
    }

    // optional string broker_id = 5;
    if (has_broker_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->broker_id());
    }

    // optional string system_name = 6;
    if (has_system_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->system_name());
    }

    // optional string max_order_ref = 9;
    if (has_max_order_ref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->max_order_ref());
    }

    // optional string shfe_time = 10;
    if (has_shfe_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shfe_time());
    }

    // optional string dce_time = 11;
    if (has_dce_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dce_time());
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional string czce_time = 12;
    if (has_czce_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->czce_time());
    }

    // optional string ffex_time = 13;
    if (has_ffex_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ffex_time());
    }

    // optional string request_id = 14;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional string ret_message = 16;
    if (has_ret_message()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ret_message());
    }

    // optional int32 front_id = 7;
    if (has_front_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->front_id());
    }

    // optional int32 session_id = 8;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session_id());
    }

  }
  // optional int32 funcid = 1 [default = 12100001];
  if (has_funcid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->funcid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FutureLoginResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.FutureLoginResp)
  GOOGLE_DCHECK_NE(&from, this);
  const FutureLoginResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FutureLoginResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.FutureLoginResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.FutureLoginResp)
    MergeFrom(*source);
  }
}

void FutureLoginResp::MergeFrom(const FutureLoginResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.FutureLoginResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_future_account();
      future_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.future_account_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_trading_day();
      trading_day_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trading_day_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_login_time();
      login_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.login_time_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_broker_id();
      broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_system_name();
      system_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_name_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_max_order_ref();
      max_order_ref_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.max_order_ref_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_shfe_time();
      shfe_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shfe_time_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_dce_time();
      dce_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dce_time_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_czce_time();
      czce_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.czce_time_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_ffex_time();
      ffex_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ffex_time_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_ret_message();
      ret_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_message_);
    }
    if (cached_has_bits & 0x00001000u) {
      front_id_ = from.front_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00004000u) {
      ret_code_ = from.ret_code_;
    }
    if (cached_has_bits & 0x00008000u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FutureLoginResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.FutureLoginResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureLoginResp::CopyFrom(const FutureLoginResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.FutureLoginResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureLoginResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00004000) != 0x00004000) return false;
  return true;
}

void FutureLoginResp::Swap(FutureLoginResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FutureLoginResp::InternalSwap(FutureLoginResp* other) {
  using std::swap;
  future_account_.Swap(&other->future_account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trading_day_.Swap(&other->trading_day_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  login_time_.Swap(&other->login_time_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  broker_id_.Swap(&other->broker_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  system_name_.Swap(&other->system_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  max_order_ref_.Swap(&other->max_order_ref_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  shfe_time_.Swap(&other->shfe_time_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dce_time_.Swap(&other->dce_time_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  czce_time_.Swap(&other->czce_time_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ffex_time_.Swap(&other->ffex_time_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ret_message_.Swap(&other->ret_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(front_id_, other->front_id_);
  swap(session_id_, other->session_id_);
  swap(ret_code_, other->ret_code_);
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FutureLoginResp::GetMetadata() const {
  protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FutureLogoutReqt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FutureLogoutReqt::kFuncidFieldNumber;
const int FutureLogoutReqt::kBrokerIdFieldNumber;
const int FutureLogoutReqt::kFutureAccountFieldNumber;
const int FutureLogoutReqt::kRequestIdFieldNumber;
const int FutureLogoutReqt::kRetCodeFieldNumber;
const int FutureLogoutReqt::kRetMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FutureLogoutReqt::FutureLogoutReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureLogoutReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.FutureLogoutReqt)
}
FutureLogoutReqt::FutureLogoutReqt(const FutureLogoutReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_broker_id()) {
    broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
  }
  future_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_future_account()) {
    future_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.future_account_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  ret_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ret_message()) {
    ret_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_message_);
  }
  ::memcpy(&ret_code_, &from.ret_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&funcid_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(funcid_));
  // @@protoc_insertion_point(copy_constructor:autotrade.FutureLogoutReqt)
}

void FutureLogoutReqt::SharedCtor() {
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  future_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_code_ = 0;
  funcid_ = 12000002;
}

FutureLogoutReqt::~FutureLogoutReqt() {
  // @@protoc_insertion_point(destructor:autotrade.FutureLogoutReqt)
  SharedDtor();
}

void FutureLogoutReqt::SharedDtor() {
  broker_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  future_account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FutureLogoutReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FutureLogoutReqt::descriptor() {
  ::protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FutureLogoutReqt& FutureLogoutReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureLogoutReqt.base);
  return *internal_default_instance();
}


void FutureLogoutReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.FutureLogoutReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      broker_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      future_account_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      ret_message_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 48u) {
    ret_code_ = 0;
    funcid_ = 12000002;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FutureLogoutReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.FutureLogoutReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 12000002];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string broker_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_broker_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->broker_id().data(), static_cast<int>(this->broker_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureLogoutReqt.broker_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string future_account = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_future_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->future_account().data(), static_cast<int>(this->future_account().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureLogoutReqt.future_account");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureLogoutReqt.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ret_code = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_ret_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ret_message = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ret_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ret_message().data(), static_cast<int>(this->ret_message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureLogoutReqt.ret_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.FutureLogoutReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.FutureLogoutReqt)
  return false;
#undef DO_
}

void FutureLogoutReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.FutureLogoutReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12000002];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional string broker_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLogoutReqt.broker_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->broker_id(), output);
  }

  // optional string future_account = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->future_account().data(), static_cast<int>(this->future_account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLogoutReqt.future_account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->future_account(), output);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLogoutReqt.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->request_id(), output);
  }

  // required int32 ret_code = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ret_code(), output);
  }

  // optional string ret_message = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_message().data(), static_cast<int>(this->ret_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLogoutReqt.ret_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->ret_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.FutureLogoutReqt)
}

::google::protobuf::uint8* FutureLogoutReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.FutureLogoutReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12000002];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional string broker_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLogoutReqt.broker_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->broker_id(), target);
  }

  // optional string future_account = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->future_account().data(), static_cast<int>(this->future_account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLogoutReqt.future_account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->future_account(), target);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLogoutReqt.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->request_id(), target);
  }

  // required int32 ret_code = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ret_code(), target);
  }

  // optional string ret_message = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_message().data(), static_cast<int>(this->ret_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLogoutReqt.ret_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ret_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.FutureLogoutReqt)
  return target;
}

size_t FutureLogoutReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.FutureLogoutReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 ret_code = 5;
  if (has_ret_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret_code());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string broker_id = 2;
    if (has_broker_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->broker_id());
    }

    // optional string future_account = 3;
    if (has_future_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->future_account());
    }

    // optional string request_id = 4;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional string ret_message = 6;
    if (has_ret_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ret_message());
    }

  }
  // optional int32 funcid = 1 [default = 12000002];
  if (has_funcid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->funcid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FutureLogoutReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.FutureLogoutReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const FutureLogoutReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FutureLogoutReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.FutureLogoutReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.FutureLogoutReqt)
    MergeFrom(*source);
  }
}

void FutureLogoutReqt::MergeFrom(const FutureLogoutReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.FutureLogoutReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_broker_id();
      broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_future_account();
      future_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.future_account_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_ret_message();
      ret_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_message_);
    }
    if (cached_has_bits & 0x00000010u) {
      ret_code_ = from.ret_code_;
    }
    if (cached_has_bits & 0x00000020u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FutureLogoutReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.FutureLogoutReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureLogoutReqt::CopyFrom(const FutureLogoutReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.FutureLogoutReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureLogoutReqt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;
  return true;
}

void FutureLogoutReqt::Swap(FutureLogoutReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FutureLogoutReqt::InternalSwap(FutureLogoutReqt* other) {
  using std::swap;
  broker_id_.Swap(&other->broker_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  future_account_.Swap(&other->future_account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ret_message_.Swap(&other->ret_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ret_code_, other->ret_code_);
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FutureLogoutReqt::GetMetadata() const {
  protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FutureLogoutResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FutureLogoutResp::kFuncidFieldNumber;
const int FutureLogoutResp::kBrokerIdFieldNumber;
const int FutureLogoutResp::kFutureAccountFieldNumber;
const int FutureLogoutResp::kRequestIdFieldNumber;
const int FutureLogoutResp::kRetCodeFieldNumber;
const int FutureLogoutResp::kRetMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FutureLogoutResp::FutureLogoutResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureLogoutResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.FutureLogoutResp)
}
FutureLogoutResp::FutureLogoutResp(const FutureLogoutResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_broker_id()) {
    broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
  }
  future_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_future_account()) {
    future_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.future_account_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  ret_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ret_message()) {
    ret_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_message_);
  }
  ::memcpy(&ret_code_, &from.ret_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&funcid_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(funcid_));
  // @@protoc_insertion_point(copy_constructor:autotrade.FutureLogoutResp)
}

void FutureLogoutResp::SharedCtor() {
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  future_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_code_ = 0;
  funcid_ = 12100002;
}

FutureLogoutResp::~FutureLogoutResp() {
  // @@protoc_insertion_point(destructor:autotrade.FutureLogoutResp)
  SharedDtor();
}

void FutureLogoutResp::SharedDtor() {
  broker_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  future_account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FutureLogoutResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FutureLogoutResp::descriptor() {
  ::protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FutureLogoutResp& FutureLogoutResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureLogoutResp.base);
  return *internal_default_instance();
}


void FutureLogoutResp::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.FutureLogoutResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      broker_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      future_account_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      ret_message_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 48u) {
    ret_code_ = 0;
    funcid_ = 12100002;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FutureLogoutResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.FutureLogoutResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 12100002];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string broker_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_broker_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->broker_id().data(), static_cast<int>(this->broker_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureLogoutResp.broker_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string future_account = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_future_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->future_account().data(), static_cast<int>(this->future_account().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureLogoutResp.future_account");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureLogoutResp.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ret_code = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_ret_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ret_message = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ret_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ret_message().data(), static_cast<int>(this->ret_message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureLogoutResp.ret_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.FutureLogoutResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.FutureLogoutResp)
  return false;
#undef DO_
}

void FutureLogoutResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.FutureLogoutResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12100002];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional string broker_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLogoutResp.broker_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->broker_id(), output);
  }

  // optional string future_account = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->future_account().data(), static_cast<int>(this->future_account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLogoutResp.future_account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->future_account(), output);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLogoutResp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->request_id(), output);
  }

  // required int32 ret_code = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ret_code(), output);
  }

  // optional string ret_message = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_message().data(), static_cast<int>(this->ret_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLogoutResp.ret_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->ret_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.FutureLogoutResp)
}

::google::protobuf::uint8* FutureLogoutResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.FutureLogoutResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12100002];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional string broker_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLogoutResp.broker_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->broker_id(), target);
  }

  // optional string future_account = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->future_account().data(), static_cast<int>(this->future_account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLogoutResp.future_account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->future_account(), target);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLogoutResp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->request_id(), target);
  }

  // required int32 ret_code = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ret_code(), target);
  }

  // optional string ret_message = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_message().data(), static_cast<int>(this->ret_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureLogoutResp.ret_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ret_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.FutureLogoutResp)
  return target;
}

size_t FutureLogoutResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.FutureLogoutResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 ret_code = 5;
  if (has_ret_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret_code());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string broker_id = 2;
    if (has_broker_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->broker_id());
    }

    // optional string future_account = 3;
    if (has_future_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->future_account());
    }

    // optional string request_id = 4;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional string ret_message = 6;
    if (has_ret_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ret_message());
    }

  }
  // optional int32 funcid = 1 [default = 12100002];
  if (has_funcid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->funcid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FutureLogoutResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.FutureLogoutResp)
  GOOGLE_DCHECK_NE(&from, this);
  const FutureLogoutResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FutureLogoutResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.FutureLogoutResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.FutureLogoutResp)
    MergeFrom(*source);
  }
}

void FutureLogoutResp::MergeFrom(const FutureLogoutResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.FutureLogoutResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_broker_id();
      broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_future_account();
      future_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.future_account_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_ret_message();
      ret_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_message_);
    }
    if (cached_has_bits & 0x00000010u) {
      ret_code_ = from.ret_code_;
    }
    if (cached_has_bits & 0x00000020u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FutureLogoutResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.FutureLogoutResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureLogoutResp::CopyFrom(const FutureLogoutResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.FutureLogoutResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureLogoutResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;
  return true;
}

void FutureLogoutResp::Swap(FutureLogoutResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FutureLogoutResp::InternalSwap(FutureLogoutResp* other) {
  using std::swap;
  broker_id_.Swap(&other->broker_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  future_account_.Swap(&other->future_account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ret_message_.Swap(&other->ret_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ret_code_, other->ret_code_);
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FutureLogoutResp::GetMetadata() const {
  protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FutureOrderReqt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FutureOrderReqt::kFuncidFieldNumber;
const int FutureOrderReqt::kCodeFieldNumber;
const int FutureOrderReqt::kPriceFieldNumber;
const int FutureOrderReqt::kQtyFieldNumber;
const int FutureOrderReqt::kBsflagFieldNumber;
const int FutureOrderReqt::kKpcbjFieldNumber;
const int FutureOrderReqt::kStopPriceFieldNumber;
const int FutureOrderReqt::kHedgeFlagFieldNumber;
const int FutureOrderReqt::kRequestIdFieldNumber;
const int FutureOrderReqt::kOrderIdFieldNumber;
const int FutureOrderReqt::kOrderTypeFieldNumber;
const int FutureOrderReqt::kParentIdFieldNumber;
const int FutureOrderReqt::kParentTypeFieldNumber;
const int FutureOrderReqt::kPriceTypeFieldNumber;
const int FutureOrderReqt::kRequestTimeFieldNumber;
const int FutureOrderReqt::kActiveIntervalFieldNumber;
const int FutureOrderReqt::kRequestDateFieldNumber;
const int FutureOrderReqt::kMarketFieldNumber;
const int FutureOrderReqt::kNameFieldNumber;
const int FutureOrderReqt::kFundIdFieldNumber;
const int FutureOrderReqt::kTraderIdFieldNumber;
const int FutureOrderReqt::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FutureOrderReqt::FutureOrderReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureOrderReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.FutureOrderReqt)
}
FutureOrderReqt::FutureOrderReqt(const FutureOrderReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_id()) {
    order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
  }
  order_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_type()) {
    order_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_type_);
  }
  parent_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_parent_id()) {
    parent_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_id_);
  }
  parent_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_parent_type()) {
    parent_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_type_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  fund_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fund_id()) {
    fund_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fund_id_);
  }
  trader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trader_id()) {
    trader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trader_id_);
  }
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_session_id()) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_interval_) -
    reinterpret_cast<char*>(&price_)) + sizeof(active_interval_));
  // @@protoc_insertion_point(copy_constructor:autotrade.FutureOrderReqt)
}

void FutureOrderReqt::SharedCtor() {
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fund_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_type_) -
      reinterpret_cast<char*>(&price_)) + sizeof(price_type_));
  funcid_ = 12001001;
  active_interval_ = GOOGLE_LONGLONG(1000);
}

FutureOrderReqt::~FutureOrderReqt() {
  // @@protoc_insertion_point(destructor:autotrade.FutureOrderReqt)
  SharedDtor();
}

void FutureOrderReqt::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fund_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trader_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FutureOrderReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FutureOrderReqt::descriptor() {
  ::protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FutureOrderReqt& FutureOrderReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureOrderReqt.base);
  return *internal_default_instance();
}


void FutureOrderReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.FutureOrderReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      order_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      order_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      parent_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      parent_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      fund_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      trader_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000200u) {
      session_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 64512u) {
    ::memset(&price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hedge_flag_) -
        reinterpret_cast<char*>(&price_)) + sizeof(hedge_flag_));
  }
  if (cached_has_bits & 4128768u) {
    ::memset(&request_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&price_type_) -
        reinterpret_cast<char*>(&request_time_)) + sizeof(price_type_));
    funcid_ = 12001001;
    active_interval_ = GOOGLE_LONGLONG(1000);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FutureOrderReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.FutureOrderReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 12001001];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureOrderReqt.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 price = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 qty = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 bsflag = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_bsflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bsflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 kpcbj = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_kpcbj();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kpcbj_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 stop_price = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_stop_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stop_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hedge_flag = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_hedge_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hedge_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureOrderReqt.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string order_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_id().data(), static_cast<int>(this->order_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureOrderReqt.order_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_type = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_type().data(), static_cast<int>(this->order_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureOrderReqt.order_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string parent_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parent_id().data(), static_cast<int>(this->parent_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureOrderReqt.parent_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string parent_type = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parent_type().data(), static_cast<int>(this->parent_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureOrderReqt.parent_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 price_type = 14 [default = 0];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_price_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 request_time = 15 [default = 0];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_request_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 active_interval = 16 [default = 1000];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_active_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &active_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 request_date = 17 [default = 0];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_request_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 market = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_market();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &market_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureOrderReqt.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fund_id = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fund_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fund_id().data(), static_cast<int>(this->fund_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureOrderReqt.fund_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string trader_id = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trader_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trader_id().data(), static_cast<int>(this->trader_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureOrderReqt.trader_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string session_id = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureOrderReqt.session_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.FutureOrderReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.FutureOrderReqt)
  return false;
#undef DO_
}

void FutureOrderReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.FutureOrderReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12001001];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // required string code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderReqt.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->code(), output);
  }

  // required int64 price = 3;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->price(), output);
  }

  // required uint32 qty = 4;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->qty(), output);
  }

  // required uint32 bsflag = 5;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->bsflag(), output);
  }

  // optional int32 kpcbj = 6 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->kpcbj(), output);
  }

  // optional int64 stop_price = 7 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->stop_price(), output);
  }

  // optional int32 hedge_flag = 8 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->hedge_flag(), output);
  }

  // optional string request_id = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderReqt.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->request_id(), output);
  }

  // required string order_id = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderReqt.order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->order_id(), output);
  }

  // optional string order_type = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_type().data(), static_cast<int>(this->order_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderReqt.order_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->order_type(), output);
  }

  // optional string parent_id = 12;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parent_id().data(), static_cast<int>(this->parent_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderReqt.parent_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->parent_id(), output);
  }

  // optional string parent_type = 13;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parent_type().data(), static_cast<int>(this->parent_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderReqt.parent_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->parent_type(), output);
  }

  // optional int32 price_type = 14 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->price_type(), output);
  }

  // optional int64 request_time = 15 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->request_time(), output);
  }

  // optional int64 active_interval = 16 [default = 1000];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->active_interval(), output);
  }

  // optional int64 request_date = 17 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->request_date(), output);
  }

  // optional int64 market = 18;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->market(), output);
  }

  // optional string name = 19;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderReqt.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->name(), output);
  }

  // optional string fund_id = 20;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fund_id().data(), static_cast<int>(this->fund_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderReqt.fund_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->fund_id(), output);
  }

  // optional string trader_id = 21;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trader_id().data(), static_cast<int>(this->trader_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderReqt.trader_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->trader_id(), output);
  }

  // optional string session_id = 22;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderReqt.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->session_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.FutureOrderReqt)
}

::google::protobuf::uint8* FutureOrderReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.FutureOrderReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12001001];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // required string code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderReqt.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  // required int64 price = 3;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->price(), target);
  }

  // required uint32 qty = 4;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->qty(), target);
  }

  // required uint32 bsflag = 5;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->bsflag(), target);
  }

  // optional int32 kpcbj = 6 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->kpcbj(), target);
  }

  // optional int64 stop_price = 7 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->stop_price(), target);
  }

  // optional int32 hedge_flag = 8 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->hedge_flag(), target);
  }

  // optional string request_id = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderReqt.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->request_id(), target);
  }

  // required string order_id = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderReqt.order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->order_id(), target);
  }

  // optional string order_type = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_type().data(), static_cast<int>(this->order_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderReqt.order_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->order_type(), target);
  }

  // optional string parent_id = 12;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parent_id().data(), static_cast<int>(this->parent_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderReqt.parent_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->parent_id(), target);
  }

  // optional string parent_type = 13;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parent_type().data(), static_cast<int>(this->parent_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderReqt.parent_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->parent_type(), target);
  }

  // optional int32 price_type = 14 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->price_type(), target);
  }

  // optional int64 request_time = 15 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->request_time(), target);
  }

  // optional int64 active_interval = 16 [default = 1000];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->active_interval(), target);
  }

  // optional int64 request_date = 17 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->request_date(), target);
  }

  // optional int64 market = 18;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->market(), target);
  }

  // optional string name = 19;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderReqt.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->name(), target);
  }

  // optional string fund_id = 20;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fund_id().data(), static_cast<int>(this->fund_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderReqt.fund_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->fund_id(), target);
  }

  // optional string trader_id = 21;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trader_id().data(), static_cast<int>(this->trader_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderReqt.trader_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->trader_id(), target);
  }

  // optional string session_id = 22;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderReqt.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->session_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.FutureOrderReqt)
  return target;
}

size_t FutureOrderReqt::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autotrade.FutureOrderReqt)
  size_t total_size = 0;

  if (has_code()) {
    // required string code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_order_id()) {
    // required string order_id = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_id());
  }

  if (has_price()) {
    // required int64 price = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->price());
  }

  if (has_qty()) {
    // required uint32 qty = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->qty());
  }

  if (has_bsflag()) {
    // required uint32 bsflag = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bsflag());
  }

  return total_size;
}
size_t FutureOrderReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.FutureOrderReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00001c05) ^ 0x00001c05) == 0) {  // All required fields are present.
    // required string code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required string order_id = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_id());

    // required int64 price = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->price());

    // required uint32 qty = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->qty());

    // required uint32 bsflag = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bsflag());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string request_id = 9;
  if (has_request_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  if (_has_bits_[0 / 32] & 248u) {
    // optional string order_type = 11;
    if (has_order_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_type());
    }

    // optional string parent_id = 12;
    if (has_parent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parent_id());
    }

    // optional string parent_type = 13;
    if (has_parent_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parent_type());
    }

    // optional string name = 19;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string fund_id = 20;
    if (has_fund_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fund_id());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional string trader_id = 21;
    if (has_trader_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trader_id());
    }

    // optional string session_id = 22;
    if (has_session_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }

  }
  if (_has_bits_[8 / 32] & 57344u) {
    // optional int64 stop_price = 7 [default = 0];
    if (has_stop_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->stop_price());
    }

    // optional int32 kpcbj = 6 [default = 0];
    if (has_kpcbj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kpcbj());
    }

    // optional int32 hedge_flag = 8 [default = 0];
    if (has_hedge_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hedge_flag());
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional int64 request_time = 15 [default = 0];
    if (has_request_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->request_time());
    }

    // optional int64 request_date = 17 [default = 0];
    if (has_request_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->request_date());
    }

    // optional int64 market = 18;
    if (has_market()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->market());
    }

    // optional int32 price_type = 14 [default = 0];
    if (has_price_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_type());
    }

    // optional int32 funcid = 1 [default = 12001001];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

    // optional int64 active_interval = 16 [default = 1000];
    if (has_active_interval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->active_interval());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FutureOrderReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.FutureOrderReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const FutureOrderReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FutureOrderReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.FutureOrderReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.FutureOrderReqt)
    MergeFrom(*source);
  }
}

void FutureOrderReqt::MergeFrom(const FutureOrderReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.FutureOrderReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_order_id();
      order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_order_type();
      order_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_type_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_parent_id();
      parent_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_id_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_parent_type();
      parent_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_type_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_fund_id();
      fund_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fund_id_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_trader_id();
      trader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trader_id_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_session_id();
      session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
    }
    if (cached_has_bits & 0x00000400u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000800u) {
      qty_ = from.qty_;
    }
    if (cached_has_bits & 0x00001000u) {
      bsflag_ = from.bsflag_;
    }
    if (cached_has_bits & 0x00002000u) {
      stop_price_ = from.stop_price_;
    }
    if (cached_has_bits & 0x00004000u) {
      kpcbj_ = from.kpcbj_;
    }
    if (cached_has_bits & 0x00008000u) {
      hedge_flag_ = from.hedge_flag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4128768u) {
    if (cached_has_bits & 0x00010000u) {
      request_time_ = from.request_time_;
    }
    if (cached_has_bits & 0x00020000u) {
      request_date_ = from.request_date_;
    }
    if (cached_has_bits & 0x00040000u) {
      market_ = from.market_;
    }
    if (cached_has_bits & 0x00080000u) {
      price_type_ = from.price_type_;
    }
    if (cached_has_bits & 0x00100000u) {
      funcid_ = from.funcid_;
    }
    if (cached_has_bits & 0x00200000u) {
      active_interval_ = from.active_interval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FutureOrderReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.FutureOrderReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureOrderReqt::CopyFrom(const FutureOrderReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.FutureOrderReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureOrderReqt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001c05) != 0x00001c05) return false;
  return true;
}

void FutureOrderReqt::Swap(FutureOrderReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FutureOrderReqt::InternalSwap(FutureOrderReqt* other) {
  using std::swap;
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_id_.Swap(&other->order_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_type_.Swap(&other->order_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  parent_id_.Swap(&other->parent_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  parent_type_.Swap(&other->parent_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fund_id_.Swap(&other->fund_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trader_id_.Swap(&other->trader_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  session_id_.Swap(&other->session_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(price_, other->price_);
  swap(qty_, other->qty_);
  swap(bsflag_, other->bsflag_);
  swap(stop_price_, other->stop_price_);
  swap(kpcbj_, other->kpcbj_);
  swap(hedge_flag_, other->hedge_flag_);
  swap(request_time_, other->request_time_);
  swap(request_date_, other->request_date_);
  swap(market_, other->market_);
  swap(price_type_, other->price_type_);
  swap(funcid_, other->funcid_);
  swap(active_interval_, other->active_interval_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FutureOrderReqt::GetMetadata() const {
  protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FutureOrderResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FutureOrderResp::kFuncidFieldNumber;
const int FutureOrderResp::kOrderGroupFieldNumber;
const int FutureOrderResp::kRequestIdFieldNumber;
const int FutureOrderResp::kOrderIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FutureOrderResp::FutureOrderResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureOrderResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.FutureOrderResp)
}
FutureOrderResp::FutureOrderResp(const FutureOrderResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_group()) {
    order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_id()) {
    order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
  }
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:autotrade.FutureOrderResp)
}

void FutureOrderResp::SharedCtor() {
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  funcid_ = 12101001;
}

FutureOrderResp::~FutureOrderResp() {
  // @@protoc_insertion_point(destructor:autotrade.FutureOrderResp)
  SharedDtor();
}

void FutureOrderResp::SharedDtor() {
  order_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FutureOrderResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FutureOrderResp::descriptor() {
  ::protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FutureOrderResp& FutureOrderResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureOrderResp.base);
  return *internal_default_instance();
}


void FutureOrderResp::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.FutureOrderResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      order_group_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      order_id_.ClearNonDefaultToEmptyNoArena();
    }
    funcid_ = 12101001;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FutureOrderResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.FutureOrderResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 12101001];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string order_group = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_group().data(), static_cast<int>(this->order_group().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureOrderResp.order_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureOrderResp.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string order_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_id().data(), static_cast<int>(this->order_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureOrderResp.order_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.FutureOrderResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.FutureOrderResp)
  return false;
#undef DO_
}

void FutureOrderResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.FutureOrderResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12101001];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // required string order_group = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderResp.order_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->order_group(), output);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderResp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->request_id(), output);
  }

  // required string order_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderResp.order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->order_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.FutureOrderResp)
}

::google::protobuf::uint8* FutureOrderResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.FutureOrderResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12101001];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // required string order_group = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderResp.order_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->order_group(), target);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderResp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->request_id(), target);
  }

  // required string order_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderResp.order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->order_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.FutureOrderResp)
  return target;
}

size_t FutureOrderResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autotrade.FutureOrderResp)
  size_t total_size = 0;

  if (has_order_group()) {
    // required string order_group = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_group());
  }

  if (has_order_id()) {
    // required string order_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_id());
  }

  return total_size;
}
size_t FutureOrderResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.FutureOrderResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string order_group = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_group());

    // required string order_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string request_id = 3;
  if (has_request_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // optional int32 funcid = 1 [default = 12101001];
  if (has_funcid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->funcid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FutureOrderResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.FutureOrderResp)
  GOOGLE_DCHECK_NE(&from, this);
  const FutureOrderResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FutureOrderResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.FutureOrderResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.FutureOrderResp)
    MergeFrom(*source);
  }
}

void FutureOrderResp::MergeFrom(const FutureOrderResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.FutureOrderResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_order_group();
      order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_order_id();
      order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FutureOrderResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.FutureOrderResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureOrderResp::CopyFrom(const FutureOrderResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.FutureOrderResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureOrderResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void FutureOrderResp::Swap(FutureOrderResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FutureOrderResp::InternalSwap(FutureOrderResp* other) {
  using std::swap;
  order_group_.Swap(&other->order_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_id_.Swap(&other->order_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FutureOrderResp::GetMetadata() const {
  protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FutureDeleteReqt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FutureDeleteReqt::kFuncidFieldNumber;
const int FutureDeleteReqt::kOrderGroupFieldNumber;
const int FutureDeleteReqt::kMarketFieldNumber;
const int FutureDeleteReqt::kRequestIdFieldNumber;
const int FutureDeleteReqt::kFundIdFieldNumber;
const int FutureDeleteReqt::kTraderIdFieldNumber;
const int FutureDeleteReqt::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FutureDeleteReqt::FutureDeleteReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureDeleteReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.FutureDeleteReqt)
}
FutureDeleteReqt::FutureDeleteReqt(const FutureDeleteReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_group()) {
    order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  fund_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fund_id()) {
    fund_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fund_id_);
  }
  trader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trader_id()) {
    trader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trader_id_);
  }
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_session_id()) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  ::memcpy(&market_, &from.market_,
    static_cast<size_t>(reinterpret_cast<char*>(&funcid_) -
    reinterpret_cast<char*>(&market_)) + sizeof(funcid_));
  // @@protoc_insertion_point(copy_constructor:autotrade.FutureDeleteReqt)
}

void FutureDeleteReqt::SharedCtor() {
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fund_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  market_ = 0u;
  funcid_ = 12001002;
}

FutureDeleteReqt::~FutureDeleteReqt() {
  // @@protoc_insertion_point(destructor:autotrade.FutureDeleteReqt)
  SharedDtor();
}

void FutureDeleteReqt::SharedDtor() {
  order_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fund_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trader_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FutureDeleteReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FutureDeleteReqt::descriptor() {
  ::protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FutureDeleteReqt& FutureDeleteReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureDeleteReqt.base);
  return *internal_default_instance();
}


void FutureDeleteReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.FutureDeleteReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      order_group_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      fund_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      trader_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      session_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 96u) {
    market_ = 0u;
    funcid_ = 12001002;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FutureDeleteReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.FutureDeleteReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 12001002];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string order_group = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_group().data(), static_cast<int>(this->order_group().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureDeleteReqt.order_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 market = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_market();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &market_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureDeleteReqt.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fund_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fund_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fund_id().data(), static_cast<int>(this->fund_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureDeleteReqt.fund_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string trader_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trader_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trader_id().data(), static_cast<int>(this->trader_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureDeleteReqt.trader_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string session_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureDeleteReqt.session_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.FutureDeleteReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.FutureDeleteReqt)
  return false;
#undef DO_
}

void FutureDeleteReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.FutureDeleteReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12001002];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // required string order_group = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureDeleteReqt.order_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->order_group(), output);
  }

  // optional uint32 market = 3 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->market(), output);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureDeleteReqt.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->request_id(), output);
  }

  // optional string fund_id = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fund_id().data(), static_cast<int>(this->fund_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureDeleteReqt.fund_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->fund_id(), output);
  }

  // optional string trader_id = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trader_id().data(), static_cast<int>(this->trader_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureDeleteReqt.trader_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->trader_id(), output);
  }

  // optional string session_id = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureDeleteReqt.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->session_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.FutureDeleteReqt)
}

::google::protobuf::uint8* FutureDeleteReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.FutureDeleteReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12001002];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // required string order_group = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureDeleteReqt.order_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->order_group(), target);
  }

  // optional uint32 market = 3 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->market(), target);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureDeleteReqt.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->request_id(), target);
  }

  // optional string fund_id = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fund_id().data(), static_cast<int>(this->fund_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureDeleteReqt.fund_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->fund_id(), target);
  }

  // optional string trader_id = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trader_id().data(), static_cast<int>(this->trader_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureDeleteReqt.trader_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->trader_id(), target);
  }

  // optional string session_id = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureDeleteReqt.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->session_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.FutureDeleteReqt)
  return target;
}

size_t FutureDeleteReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.FutureDeleteReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string order_group = 2;
  if (has_order_group()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_group());
  }
  if (_has_bits_[0 / 32] & 126u) {
    // optional string request_id = 4;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional string fund_id = 5;
    if (has_fund_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fund_id());
    }

    // optional string trader_id = 6;
    if (has_trader_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trader_id());
    }

    // optional string session_id = 7;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }

    // optional uint32 market = 3 [default = 0];
    if (has_market()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->market());
    }

    // optional int32 funcid = 1 [default = 12001002];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FutureDeleteReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.FutureDeleteReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const FutureDeleteReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FutureDeleteReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.FutureDeleteReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.FutureDeleteReqt)
    MergeFrom(*source);
  }
}

void FutureDeleteReqt::MergeFrom(const FutureDeleteReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.FutureDeleteReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_order_group();
      order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_fund_id();
      fund_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fund_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_trader_id();
      trader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trader_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_session_id();
      session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
    }
    if (cached_has_bits & 0x00000020u) {
      market_ = from.market_;
    }
    if (cached_has_bits & 0x00000040u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FutureDeleteReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.FutureDeleteReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureDeleteReqt::CopyFrom(const FutureDeleteReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.FutureDeleteReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureDeleteReqt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void FutureDeleteReqt::Swap(FutureDeleteReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FutureDeleteReqt::InternalSwap(FutureDeleteReqt* other) {
  using std::swap;
  order_group_.Swap(&other->order_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fund_id_.Swap(&other->fund_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trader_id_.Swap(&other->trader_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  session_id_.Swap(&other->session_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(market_, other->market_);
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FutureDeleteReqt::GetMetadata() const {
  protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FutureDeleteResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FutureDeleteResp::kFuncidFieldNumber;
const int FutureDeleteResp::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FutureDeleteResp::FutureDeleteResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureDeleteResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.FutureDeleteResp)
}
FutureDeleteResp::FutureDeleteResp(const FutureDeleteResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:autotrade.FutureDeleteResp)
}

void FutureDeleteResp::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  funcid_ = 12101002;
}

FutureDeleteResp::~FutureDeleteResp() {
  // @@protoc_insertion_point(destructor:autotrade.FutureDeleteResp)
  SharedDtor();
}

void FutureDeleteResp::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FutureDeleteResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FutureDeleteResp::descriptor() {
  ::protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FutureDeleteResp& FutureDeleteResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureDeleteResp.base);
  return *internal_default_instance();
}


void FutureDeleteResp::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.FutureDeleteResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    funcid_ = 12101002;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FutureDeleteResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.FutureDeleteResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 12101002];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureDeleteResp.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.FutureDeleteResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.FutureDeleteResp)
  return false;
#undef DO_
}

void FutureDeleteResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.FutureDeleteResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12101002];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional string request_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureDeleteResp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.FutureDeleteResp)
}

::google::protobuf::uint8* FutureDeleteResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.FutureDeleteResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12101002];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional string request_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureDeleteResp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.FutureDeleteResp)
  return target;
}

size_t FutureDeleteResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.FutureDeleteResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string request_id = 2;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional int32 funcid = 1 [default = 12101002];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FutureDeleteResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.FutureDeleteResp)
  GOOGLE_DCHECK_NE(&from, this);
  const FutureDeleteResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FutureDeleteResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.FutureDeleteResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.FutureDeleteResp)
    MergeFrom(*source);
  }
}

void FutureDeleteResp::MergeFrom(const FutureDeleteResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.FutureDeleteResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FutureDeleteResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.FutureDeleteResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureDeleteResp::CopyFrom(const FutureDeleteResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.FutureDeleteResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureDeleteResp::IsInitialized() const {
  return true;
}

void FutureDeleteResp::Swap(FutureDeleteResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FutureDeleteResp::InternalSwap(FutureDeleteResp* other) {
  using std::swap;
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FutureDeleteResp::GetMetadata() const {
  protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FutureQueryOrderReqt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FutureQueryOrderReqt::kFuncidFieldNumber;
const int FutureQueryOrderReqt::kOrdernoFieldNumber;
const int FutureQueryOrderReqt::kStartPosFieldNumber;
const int FutureQueryOrderReqt::kRequestIdFieldNumber;
const int FutureQueryOrderReqt::kRequestDateFieldNumber;
const int FutureQueryOrderReqt::kRequestTimeFieldNumber;
const int FutureQueryOrderReqt::kActiveIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FutureQueryOrderReqt::FutureQueryOrderReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureQueryOrderReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.FutureQueryOrderReqt)
}
FutureQueryOrderReqt::FutureQueryOrderReqt(const FutureQueryOrderReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  orderno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_orderno()) {
    orderno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderno_);
  }
  start_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_start_pos()) {
    start_pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_pos_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  ::memcpy(&request_date_, &from.request_date_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_interval_) -
    reinterpret_cast<char*>(&request_date_)) + sizeof(active_interval_));
  // @@protoc_insertion_point(copy_constructor:autotrade.FutureQueryOrderReqt)
}

void FutureQueryOrderReqt::SharedCtor() {
  orderno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&request_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_time_) -
      reinterpret_cast<char*>(&request_date_)) + sizeof(request_time_));
  funcid_ = 12002002;
  active_interval_ = GOOGLE_LONGLONG(10000);
}

FutureQueryOrderReqt::~FutureQueryOrderReqt() {
  // @@protoc_insertion_point(destructor:autotrade.FutureQueryOrderReqt)
  SharedDtor();
}

void FutureQueryOrderReqt::SharedDtor() {
  orderno_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_pos_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FutureQueryOrderReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FutureQueryOrderReqt::descriptor() {
  ::protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FutureQueryOrderReqt& FutureQueryOrderReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureQueryOrderReqt.base);
  return *internal_default_instance();
}


void FutureQueryOrderReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.FutureQueryOrderReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      orderno_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      start_pos_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 120u) {
    ::memset(&request_date_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&request_time_) -
        reinterpret_cast<char*>(&request_date_)) + sizeof(request_time_));
    funcid_ = 12002002;
    active_interval_ = GOOGLE_LONGLONG(10000);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FutureQueryOrderReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.FutureQueryOrderReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 12002002];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string orderno = 2 [default = ""];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orderno().data(), static_cast<int>(this->orderno().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureQueryOrderReqt.orderno");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string start_pos = 3 [default = ""];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_pos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->start_pos().data(), static_cast<int>(this->start_pos().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureQueryOrderReqt.start_pos");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureQueryOrderReqt.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 request_date = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_request_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 request_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_request_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 active_interval = 7 [default = 10000];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_active_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &active_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.FutureQueryOrderReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.FutureQueryOrderReqt)
  return false;
#undef DO_
}

void FutureQueryOrderReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.FutureQueryOrderReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12002002];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional string orderno = 2 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderno().data(), static_cast<int>(this->orderno().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQueryOrderReqt.orderno");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->orderno(), output);
  }

  // optional string start_pos = 3 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_pos().data(), static_cast<int>(this->start_pos().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQueryOrderReqt.start_pos");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->start_pos(), output);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQueryOrderReqt.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->request_id(), output);
  }

  // optional int64 request_date = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->request_date(), output);
  }

  // optional int64 request_time = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->request_time(), output);
  }

  // optional int64 active_interval = 7 [default = 10000];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->active_interval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.FutureQueryOrderReqt)
}

::google::protobuf::uint8* FutureQueryOrderReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.FutureQueryOrderReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12002002];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional string orderno = 2 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderno().data(), static_cast<int>(this->orderno().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQueryOrderReqt.orderno");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->orderno(), target);
  }

  // optional string start_pos = 3 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_pos().data(), static_cast<int>(this->start_pos().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQueryOrderReqt.start_pos");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->start_pos(), target);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQueryOrderReqt.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->request_id(), target);
  }

  // optional int64 request_date = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->request_date(), target);
  }

  // optional int64 request_time = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->request_time(), target);
  }

  // optional int64 active_interval = 7 [default = 10000];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->active_interval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.FutureQueryOrderReqt)
  return target;
}

size_t FutureQueryOrderReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.FutureQueryOrderReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string orderno = 2 [default = ""];
    if (has_orderno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderno());
    }

    // optional string start_pos = 3 [default = ""];
    if (has_start_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start_pos());
    }

    // optional string request_id = 4;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional int64 request_date = 5;
    if (has_request_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->request_date());
    }

    // optional int64 request_time = 6;
    if (has_request_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->request_time());
    }

    // optional int32 funcid = 1 [default = 12002002];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

    // optional int64 active_interval = 7 [default = 10000];
    if (has_active_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->active_interval());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FutureQueryOrderReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.FutureQueryOrderReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const FutureQueryOrderReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FutureQueryOrderReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.FutureQueryOrderReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.FutureQueryOrderReqt)
    MergeFrom(*source);
  }
}

void FutureQueryOrderReqt::MergeFrom(const FutureQueryOrderReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.FutureQueryOrderReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_orderno();
      orderno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderno_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_start_pos();
      start_pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_pos_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      request_date_ = from.request_date_;
    }
    if (cached_has_bits & 0x00000010u) {
      request_time_ = from.request_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      funcid_ = from.funcid_;
    }
    if (cached_has_bits & 0x00000040u) {
      active_interval_ = from.active_interval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FutureQueryOrderReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.FutureQueryOrderReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureQueryOrderReqt::CopyFrom(const FutureQueryOrderReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.FutureQueryOrderReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureQueryOrderReqt::IsInitialized() const {
  return true;
}

void FutureQueryOrderReqt::Swap(FutureQueryOrderReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FutureQueryOrderReqt::InternalSwap(FutureQueryOrderReqt* other) {
  using std::swap;
  orderno_.Swap(&other->orderno_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  start_pos_.Swap(&other->start_pos_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(request_date_, other->request_date_);
  swap(request_time_, other->request_time_);
  swap(funcid_, other->funcid_);
  swap(active_interval_, other->active_interval_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FutureQueryOrderReqt::GetMetadata() const {
  protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FutureOrderInfo_OrderDetail::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FutureOrderInfo_OrderDetail::kMatchTimeFieldNumber;
const int FutureOrderInfo_OrderDetail::kOrdernoFieldNumber;
const int FutureOrderInfo_OrderDetail::kBsflagFieldNumber;
const int FutureOrderInfo_OrderDetail::kSumbitTimeFieldNumber;
const int FutureOrderInfo_OrderDetail::kOrderTimeFieldNumber;
const int FutureOrderInfo_OrderDetail::kCodeFieldNumber;
const int FutureOrderInfo_OrderDetail::kOrderPriceFieldNumber;
const int FutureOrderInfo_OrderDetail::kOrderQtyFieldNumber;
const int FutureOrderInfo_OrderDetail::kOrderFrzAmtFieldNumber;
const int FutureOrderInfo_OrderDetail::kMatchAmtFieldNumber;
const int FutureOrderInfo_OrderDetail::kMatchQtyFieldNumber;
const int FutureOrderInfo_OrderDetail::kUnmatchQtyFieldNumber;
const int FutureOrderInfo_OrderDetail::kOrderStatusFieldNumber;
const int FutureOrderInfo_OrderDetail::kNameFieldNumber;
const int FutureOrderInfo_OrderDetail::kMatchAvgPriceFieldNumber;
const int FutureOrderInfo_OrderDetail::kMarketFieldNumber;
const int FutureOrderInfo_OrderDetail::kCancelQtyFieldNumber;
const int FutureOrderInfo_OrderDetail::kHedgeFlagFieldNumber;
const int FutureOrderInfo_OrderDetail::kKpcbjFieldNumber;
const int FutureOrderInfo_OrderDetail::kPriceTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FutureOrderInfo_OrderDetail::FutureOrderInfo_OrderDetail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureOrderInfo_OrderDetail.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.FutureOrderInfo.OrderDetail)
}
FutureOrderInfo_OrderDetail::FutureOrderInfo_OrderDetail(const FutureOrderInfo_OrderDetail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  orderno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_orderno()) {
    orderno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderno_);
  }
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&match_time_, &from.match_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&price_type_) -
    reinterpret_cast<char*>(&match_time_)) + sizeof(price_type_));
  // @@protoc_insertion_point(copy_constructor:autotrade.FutureOrderInfo.OrderDetail)
}

void FutureOrderInfo_OrderDetail::SharedCtor() {
  orderno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&match_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_type_) -
      reinterpret_cast<char*>(&match_time_)) + sizeof(price_type_));
}

FutureOrderInfo_OrderDetail::~FutureOrderInfo_OrderDetail() {
  // @@protoc_insertion_point(destructor:autotrade.FutureOrderInfo.OrderDetail)
  SharedDtor();
}

void FutureOrderInfo_OrderDetail::SharedDtor() {
  orderno_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FutureOrderInfo_OrderDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FutureOrderInfo_OrderDetail::descriptor() {
  ::protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FutureOrderInfo_OrderDetail& FutureOrderInfo_OrderDetail::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureOrderInfo_OrderDetail.base);
  return *internal_default_instance();
}


void FutureOrderInfo_OrderDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.FutureOrderInfo.OrderDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      orderno_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&match_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&order_qty_) -
        reinterpret_cast<char*>(&match_time_)) + sizeof(order_qty_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&order_price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_avg_price_) -
        reinterpret_cast<char*>(&order_price_)) + sizeof(match_avg_price_));
  }
  if (cached_has_bits & 983040u) {
    ::memset(&cancel_qty_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&price_type_) -
        reinterpret_cast<char*>(&cancel_qty_)) + sizeof(price_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FutureOrderInfo_OrderDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.FutureOrderInfo.OrderDetail)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_match_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string orderno = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orderno().data(), static_cast<int>(this->orderno().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureOrderInfo.OrderDetail.orderno");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 bsflag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_bsflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bsflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 sumbit_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_sumbit_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sumbit_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 order_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_order_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &order_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string code = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureOrderInfo.OrderDetail.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 order_price = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_order_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &order_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 order_qty = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_order_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double order_frz_amt = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_order_frz_amt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &order_frz_amt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double match_amt = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_match_amt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &match_amt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 match_qty = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_match_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 unmatch_qty = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_unmatch_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unmatch_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 order_status = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_order_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureOrderInfo.OrderDetail.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 match_avg_price = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_match_avg_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &match_avg_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 market = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_market();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &market_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 cancel_qty = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_cancel_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cancel_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 hedge_flag = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_hedge_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hedge_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 kpcbj = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_kpcbj();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &kpcbj_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 price_type = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_price_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &price_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.FutureOrderInfo.OrderDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.FutureOrderInfo.OrderDetail)
  return false;
#undef DO_
}

void FutureOrderInfo_OrderDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.FutureOrderInfo.OrderDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_time = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_time(), output);
  }

  // required string orderno = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderno().data(), static_cast<int>(this->orderno().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderInfo.OrderDetail.orderno");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->orderno(), output);
  }

  // required uint32 bsflag = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bsflag(), output);
  }

  // optional uint64 sumbit_time = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->sumbit_time(), output);
  }

  // required uint64 order_time = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->order_time(), output);
  }

  // required string code = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderInfo.OrderDetail.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->code(), output);
  }

  // required int64 order_price = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->order_price(), output);
  }

  // required uint32 order_qty = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->order_qty(), output);
  }

  // required double order_frz_amt = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->order_frz_amt(), output);
  }

  // required double match_amt = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->match_amt(), output);
  }

  // required uint32 match_qty = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->match_qty(), output);
  }

  // required uint32 unmatch_qty = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->unmatch_qty(), output);
  }

  // required uint32 order_status = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->order_status(), output);
  }

  // optional string name = 16;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderInfo.OrderDetail.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->name(), output);
  }

  // required int64 match_avg_price = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->match_avg_price(), output);
  }

  // optional uint32 market = 18;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->market(), output);
  }

  // optional int64 cancel_qty = 19;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->cancel_qty(), output);
  }

  // optional int64 hedge_flag = 20;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->hedge_flag(), output);
  }

  // optional int64 kpcbj = 21;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->kpcbj(), output);
  }

  // optional int64 price_type = 22;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->price_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.FutureOrderInfo.OrderDetail)
}

::google::protobuf::uint8* FutureOrderInfo_OrderDetail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.FutureOrderInfo.OrderDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_time = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_time(), target);
  }

  // required string orderno = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderno().data(), static_cast<int>(this->orderno().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderInfo.OrderDetail.orderno");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->orderno(), target);
  }

  // required uint32 bsflag = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bsflag(), target);
  }

  // optional uint64 sumbit_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->sumbit_time(), target);
  }

  // required uint64 order_time = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->order_time(), target);
  }

  // required string code = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderInfo.OrderDetail.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->code(), target);
  }

  // required int64 order_price = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->order_price(), target);
  }

  // required uint32 order_qty = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->order_qty(), target);
  }

  // required double order_frz_amt = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->order_frz_amt(), target);
  }

  // required double match_amt = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->match_amt(), target);
  }

  // required uint32 match_qty = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->match_qty(), target);
  }

  // required uint32 unmatch_qty = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->unmatch_qty(), target);
  }

  // required uint32 order_status = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->order_status(), target);
  }

  // optional string name = 16;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderInfo.OrderDetail.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->name(), target);
  }

  // required int64 match_avg_price = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->match_avg_price(), target);
  }

  // optional uint32 market = 18;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->market(), target);
  }

  // optional int64 cancel_qty = 19;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->cancel_qty(), target);
  }

  // optional int64 hedge_flag = 20;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->hedge_flag(), target);
  }

  // optional int64 kpcbj = 21;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->kpcbj(), target);
  }

  // optional int64 price_type = 22;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->price_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.FutureOrderInfo.OrderDetail)
  return target;
}

size_t FutureOrderInfo_OrderDetail::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autotrade.FutureOrderInfo.OrderDetail)
  size_t total_size = 0;

  if (has_orderno()) {
    // required string orderno = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderno());
  }

  if (has_code()) {
    // required string code = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_order_time()) {
    // required uint64 order_time = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->order_time());
  }

  if (has_bsflag()) {
    // required uint32 bsflag = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bsflag());
  }

  if (has_order_qty()) {
    // required uint32 order_qty = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->order_qty());
  }

  if (has_order_price()) {
    // required int64 order_price = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->order_price());
  }

  if (has_order_frz_amt()) {
    // required double order_frz_amt = 11;
    total_size += 1 + 8;
  }

  if (has_match_amt()) {
    // required double match_amt = 12;
    total_size += 1 + 8;
  }

  if (has_match_qty()) {
    // required uint32 match_qty = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->match_qty());
  }

  if (has_unmatch_qty()) {
    // required uint32 unmatch_qty = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->unmatch_qty());
  }

  if (has_order_status()) {
    // required uint32 order_status = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->order_status());
  }

  if (has_match_avg_price()) {
    // required int64 match_avg_price = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->match_avg_price());
  }

  return total_size;
}
size_t FutureOrderInfo_OrderDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.FutureOrderInfo.OrderDetail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000bfe3) ^ 0x0000bfe3) == 0) {  // All required fields are present.
    // required string orderno = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderno());

    // required string code = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required uint64 order_time = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->order_time());

    // required uint32 bsflag = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bsflag());

    // required uint32 order_qty = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->order_qty());

    // required int64 order_price = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->order_price());

    // required double order_frz_amt = 11;
    total_size += 1 + 8;

    // required double match_amt = 12;
    total_size += 1 + 8;

    // required uint32 match_qty = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->match_qty());

    // required uint32 unmatch_qty = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->unmatch_qty());

    // required uint32 order_status = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->order_status());

    // required int64 match_avg_price = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->match_avg_price());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 28u) {
    // optional string name = 16;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 match_time = 1;
    if (has_match_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_time());
    }

    // optional uint64 sumbit_time = 5;
    if (has_sumbit_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sumbit_time());
    }

  }
  // optional uint32 market = 18;
  if (has_market()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->market());
  }

  if (_has_bits_[16 / 32] & 983040u) {
    // optional int64 cancel_qty = 19;
    if (has_cancel_qty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cancel_qty());
    }

    // optional int64 hedge_flag = 20;
    if (has_hedge_flag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hedge_flag());
    }

    // optional int64 kpcbj = 21;
    if (has_kpcbj()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->kpcbj());
    }

    // optional int64 price_type = 22;
    if (has_price_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->price_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FutureOrderInfo_OrderDetail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.FutureOrderInfo.OrderDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const FutureOrderInfo_OrderDetail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FutureOrderInfo_OrderDetail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.FutureOrderInfo.OrderDetail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.FutureOrderInfo.OrderDetail)
    MergeFrom(*source);
  }
}

void FutureOrderInfo_OrderDetail::MergeFrom(const FutureOrderInfo_OrderDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.FutureOrderInfo.OrderDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_orderno();
      orderno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderno_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000008u) {
      match_time_ = from.match_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      sumbit_time_ = from.sumbit_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      order_time_ = from.order_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      bsflag_ = from.bsflag_;
    }
    if (cached_has_bits & 0x00000080u) {
      order_qty_ = from.order_qty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      order_price_ = from.order_price_;
    }
    if (cached_has_bits & 0x00000200u) {
      order_frz_amt_ = from.order_frz_amt_;
    }
    if (cached_has_bits & 0x00000400u) {
      match_amt_ = from.match_amt_;
    }
    if (cached_has_bits & 0x00000800u) {
      match_qty_ = from.match_qty_;
    }
    if (cached_has_bits & 0x00001000u) {
      unmatch_qty_ = from.unmatch_qty_;
    }
    if (cached_has_bits & 0x00002000u) {
      order_status_ = from.order_status_;
    }
    if (cached_has_bits & 0x00004000u) {
      market_ = from.market_;
    }
    if (cached_has_bits & 0x00008000u) {
      match_avg_price_ = from.match_avg_price_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 983040u) {
    if (cached_has_bits & 0x00010000u) {
      cancel_qty_ = from.cancel_qty_;
    }
    if (cached_has_bits & 0x00020000u) {
      hedge_flag_ = from.hedge_flag_;
    }
    if (cached_has_bits & 0x00040000u) {
      kpcbj_ = from.kpcbj_;
    }
    if (cached_has_bits & 0x00080000u) {
      price_type_ = from.price_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FutureOrderInfo_OrderDetail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.FutureOrderInfo.OrderDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureOrderInfo_OrderDetail::CopyFrom(const FutureOrderInfo_OrderDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.FutureOrderInfo.OrderDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureOrderInfo_OrderDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000bfe3) != 0x0000bfe3) return false;
  return true;
}

void FutureOrderInfo_OrderDetail::Swap(FutureOrderInfo_OrderDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FutureOrderInfo_OrderDetail::InternalSwap(FutureOrderInfo_OrderDetail* other) {
  using std::swap;
  orderno_.Swap(&other->orderno_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(match_time_, other->match_time_);
  swap(sumbit_time_, other->sumbit_time_);
  swap(order_time_, other->order_time_);
  swap(bsflag_, other->bsflag_);
  swap(order_qty_, other->order_qty_);
  swap(order_price_, other->order_price_);
  swap(order_frz_amt_, other->order_frz_amt_);
  swap(match_amt_, other->match_amt_);
  swap(match_qty_, other->match_qty_);
  swap(unmatch_qty_, other->unmatch_qty_);
  swap(order_status_, other->order_status_);
  swap(market_, other->market_);
  swap(match_avg_price_, other->match_avg_price_);
  swap(cancel_qty_, other->cancel_qty_);
  swap(hedge_flag_, other->hedge_flag_);
  swap(kpcbj_, other->kpcbj_);
  swap(price_type_, other->price_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FutureOrderInfo_OrderDetail::GetMetadata() const {
  protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FutureOrderInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FutureOrderInfo::kFuncidFieldNumber;
const int FutureOrderInfo::kDetailListFieldNumber;
const int FutureOrderInfo::kRequestIdFieldNumber;
const int FutureOrderInfo::kLastPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FutureOrderInfo::FutureOrderInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureOrderInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.FutureOrderInfo)
}
FutureOrderInfo::FutureOrderInfo(const FutureOrderInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      detail_list_(from.detail_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  last_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_last_pos()) {
    last_pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_pos_);
  }
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:autotrade.FutureOrderInfo)
}

void FutureOrderInfo::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  funcid_ = 12102002;
}

FutureOrderInfo::~FutureOrderInfo() {
  // @@protoc_insertion_point(destructor:autotrade.FutureOrderInfo)
  SharedDtor();
}

void FutureOrderInfo::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_pos_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FutureOrderInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FutureOrderInfo::descriptor() {
  ::protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FutureOrderInfo& FutureOrderInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureOrderInfo.base);
  return *internal_default_instance();
}


void FutureOrderInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.FutureOrderInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detail_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      last_pos_.ClearNonDefaultToEmptyNoArena();
    }
    funcid_ = 12102002;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FutureOrderInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.FutureOrderInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 12102002];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autotrade.FutureOrderInfo.OrderDetail detail_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_detail_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureOrderInfo.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string last_pos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_pos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->last_pos().data(), static_cast<int>(this->last_pos().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureOrderInfo.last_pos");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.FutureOrderInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.FutureOrderInfo)
  return false;
#undef DO_
}

void FutureOrderInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.FutureOrderInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12102002];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // repeated .autotrade.FutureOrderInfo.OrderDetail detail_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detail_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->detail_list(static_cast<int>(i)),
      output);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderInfo.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->request_id(), output);
  }

  // optional string last_pos = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_pos().data(), static_cast<int>(this->last_pos().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderInfo.last_pos");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->last_pos(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.FutureOrderInfo)
}

::google::protobuf::uint8* FutureOrderInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.FutureOrderInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12102002];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // repeated .autotrade.FutureOrderInfo.OrderDetail detail_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detail_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->detail_list(static_cast<int>(i)), deterministic, target);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderInfo.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->request_id(), target);
  }

  // optional string last_pos = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_pos().data(), static_cast<int>(this->last_pos().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderInfo.last_pos");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->last_pos(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.FutureOrderInfo)
  return target;
}

size_t FutureOrderInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.FutureOrderInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .autotrade.FutureOrderInfo.OrderDetail detail_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->detail_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->detail_list(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string request_id = 3;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional string last_pos = 4;
    if (has_last_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_pos());
    }

    // optional int32 funcid = 1 [default = 12102002];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FutureOrderInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.FutureOrderInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FutureOrderInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FutureOrderInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.FutureOrderInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.FutureOrderInfo)
    MergeFrom(*source);
  }
}

void FutureOrderInfo::MergeFrom(const FutureOrderInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.FutureOrderInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detail_list_.MergeFrom(from.detail_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_last_pos();
      last_pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_pos_);
    }
    if (cached_has_bits & 0x00000004u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FutureOrderInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.FutureOrderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureOrderInfo::CopyFrom(const FutureOrderInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.FutureOrderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureOrderInfo::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->detail_list())) return false;
  return true;
}

void FutureOrderInfo::Swap(FutureOrderInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FutureOrderInfo::InternalSwap(FutureOrderInfo* other) {
  using std::swap;
  CastToBase(&detail_list_)->InternalSwap(CastToBase(&other->detail_list_));
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_pos_.Swap(&other->last_pos_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FutureOrderInfo::GetMetadata() const {
  protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FutureQueryCaptialReqt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FutureQueryCaptialReqt::kFuncidFieldNumber;
const int FutureQueryCaptialReqt::kMoneytypeFieldNumber;
const int FutureQueryCaptialReqt::kRequestIdFieldNumber;
const int FutureQueryCaptialReqt::kRequestDateFieldNumber;
const int FutureQueryCaptialReqt::kRequestTimeFieldNumber;
const int FutureQueryCaptialReqt::kActiveIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FutureQueryCaptialReqt::FutureQueryCaptialReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureQueryCaptialReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.FutureQueryCaptialReqt)
}
FutureQueryCaptialReqt::FutureQueryCaptialReqt(const FutureQueryCaptialReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  moneytype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_moneytype()) {
    moneytype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.moneytype_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  ::memcpy(&request_date_, &from.request_date_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_interval_) -
    reinterpret_cast<char*>(&request_date_)) + sizeof(active_interval_));
  // @@protoc_insertion_point(copy_constructor:autotrade.FutureQueryCaptialReqt)
}

void FutureQueryCaptialReqt::SharedCtor() {
  moneytype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&request_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_time_) -
      reinterpret_cast<char*>(&request_date_)) + sizeof(request_time_));
  funcid_ = 12002001;
  active_interval_ = GOOGLE_LONGLONG(10000);
}

FutureQueryCaptialReqt::~FutureQueryCaptialReqt() {
  // @@protoc_insertion_point(destructor:autotrade.FutureQueryCaptialReqt)
  SharedDtor();
}

void FutureQueryCaptialReqt::SharedDtor() {
  moneytype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FutureQueryCaptialReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FutureQueryCaptialReqt::descriptor() {
  ::protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FutureQueryCaptialReqt& FutureQueryCaptialReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureQueryCaptialReqt.base);
  return *internal_default_instance();
}


void FutureQueryCaptialReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.FutureQueryCaptialReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      moneytype_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&request_date_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&request_time_) -
        reinterpret_cast<char*>(&request_date_)) + sizeof(request_time_));
    funcid_ = 12002001;
    active_interval_ = GOOGLE_LONGLONG(10000);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FutureQueryCaptialReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.FutureQueryCaptialReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 12002001];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string moneytype = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_moneytype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->moneytype().data(), static_cast<int>(this->moneytype().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureQueryCaptialReqt.moneytype");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureQueryCaptialReqt.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 request_date = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_request_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 request_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_request_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 active_interval = 6 [default = 10000];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_active_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &active_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.FutureQueryCaptialReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.FutureQueryCaptialReqt)
  return false;
#undef DO_
}

void FutureQueryCaptialReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.FutureQueryCaptialReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12002001];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional string moneytype = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->moneytype().data(), static_cast<int>(this->moneytype().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQueryCaptialReqt.moneytype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->moneytype(), output);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQueryCaptialReqt.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->request_id(), output);
  }

  // optional int64 request_date = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->request_date(), output);
  }

  // optional int64 request_time = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->request_time(), output);
  }

  // optional int64 active_interval = 6 [default = 10000];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->active_interval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.FutureQueryCaptialReqt)
}

::google::protobuf::uint8* FutureQueryCaptialReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.FutureQueryCaptialReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12002001];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional string moneytype = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->moneytype().data(), static_cast<int>(this->moneytype().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQueryCaptialReqt.moneytype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->moneytype(), target);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQueryCaptialReqt.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->request_id(), target);
  }

  // optional int64 request_date = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->request_date(), target);
  }

  // optional int64 request_time = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->request_time(), target);
  }

  // optional int64 active_interval = 6 [default = 10000];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->active_interval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.FutureQueryCaptialReqt)
  return target;
}

size_t FutureQueryCaptialReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.FutureQueryCaptialReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string moneytype = 2;
    if (has_moneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->moneytype());
    }

    // optional string request_id = 3;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional int64 request_date = 4;
    if (has_request_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->request_date());
    }

    // optional int64 request_time = 5;
    if (has_request_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->request_time());
    }

    // optional int32 funcid = 1 [default = 12002001];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

    // optional int64 active_interval = 6 [default = 10000];
    if (has_active_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->active_interval());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FutureQueryCaptialReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.FutureQueryCaptialReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const FutureQueryCaptialReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FutureQueryCaptialReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.FutureQueryCaptialReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.FutureQueryCaptialReqt)
    MergeFrom(*source);
  }
}

void FutureQueryCaptialReqt::MergeFrom(const FutureQueryCaptialReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.FutureQueryCaptialReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_moneytype();
      moneytype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.moneytype_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      request_date_ = from.request_date_;
    }
    if (cached_has_bits & 0x00000008u) {
      request_time_ = from.request_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      funcid_ = from.funcid_;
    }
    if (cached_has_bits & 0x00000020u) {
      active_interval_ = from.active_interval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FutureQueryCaptialReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.FutureQueryCaptialReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureQueryCaptialReqt::CopyFrom(const FutureQueryCaptialReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.FutureQueryCaptialReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureQueryCaptialReqt::IsInitialized() const {
  return true;
}

void FutureQueryCaptialReqt::Swap(FutureQueryCaptialReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FutureQueryCaptialReqt::InternalSwap(FutureQueryCaptialReqt* other) {
  using std::swap;
  moneytype_.Swap(&other->moneytype_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(request_date_, other->request_date_);
  swap(request_time_, other->request_time_);
  swap(funcid_, other->funcid_);
  swap(active_interval_, other->active_interval_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FutureQueryCaptialReqt::GetMetadata() const {
  protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FutureCapital::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FutureCapital::kFuncidFieldNumber;
const int FutureCapital::kMoneytypeFieldNumber;
const int FutureCapital::kFundBalFieldNumber;
const int FutureCapital::kFundAvaFieldNumber;
const int FutureCapital::kMarketValueFieldNumber;
const int FutureCapital::kRequestIdFieldNumber;
const int FutureCapital::kExchageMarginFieldNumber;
const int FutureCapital::kDeliveryMarginFieldNumber;
const int FutureCapital::kExchageDeliveryMarginFieldNumber;
const int FutureCapital::kIslastFieldNumber;
const int FutureCapital::kRetCodeFieldNumber;
const int FutureCapital::kRetMessageFieldNumber;
const int FutureCapital::kCurrMarginFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FutureCapital::FutureCapital()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureCapital.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.FutureCapital)
}
FutureCapital::FutureCapital(const FutureCapital& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  moneytype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_moneytype()) {
    moneytype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.moneytype_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  ret_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ret_message()) {
    ret_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_message_);
  }
  ::memcpy(&fund_bal_, &from.fund_bal_,
    static_cast<size_t>(reinterpret_cast<char*>(&funcid_) -
    reinterpret_cast<char*>(&fund_bal_)) + sizeof(funcid_));
  // @@protoc_insertion_point(copy_constructor:autotrade.FutureCapital)
}

void FutureCapital::SharedCtor() {
  moneytype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fund_bal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curr_margin_) -
      reinterpret_cast<char*>(&fund_bal_)) + sizeof(curr_margin_));
  funcid_ = 12102001;
}

FutureCapital::~FutureCapital() {
  // @@protoc_insertion_point(destructor:autotrade.FutureCapital)
  SharedDtor();
}

void FutureCapital::SharedDtor() {
  moneytype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FutureCapital::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FutureCapital::descriptor() {
  ::protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FutureCapital& FutureCapital::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureCapital.base);
  return *internal_default_instance();
}


void FutureCapital::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.FutureCapital)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      moneytype_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      ret_message_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&fund_bal_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&delivery_margin_) -
        reinterpret_cast<char*>(&fund_bal_)) + sizeof(delivery_margin_));
  }
  if (cached_has_bits & 7936u) {
    ::memset(&exchage_delivery_margin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&curr_margin_) -
        reinterpret_cast<char*>(&exchage_delivery_margin_)) + sizeof(curr_margin_));
    funcid_ = 12102001;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FutureCapital::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.FutureCapital)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 12102001];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string moneytype = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_moneytype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->moneytype().data(), static_cast<int>(this->moneytype().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureCapital.moneytype");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double fund_bal = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_fund_bal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fund_bal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double fund_ava = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_fund_ava();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fund_ava_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double market_value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_market_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &market_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureCapital.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double exchage_margin = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_exchage_margin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exchage_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double delivery_margin = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_delivery_margin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delivery_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double exchage_delivery_margin = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_exchage_delivery_margin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exchage_delivery_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool islast = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_islast();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islast_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ret_code = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_ret_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ret_message = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ret_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ret_message().data(), static_cast<int>(this->ret_message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureCapital.ret_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double curr_margin = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_curr_margin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curr_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.FutureCapital)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.FutureCapital)
  return false;
#undef DO_
}

void FutureCapital::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.FutureCapital)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12102001];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional string moneytype = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->moneytype().data(), static_cast<int>(this->moneytype().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureCapital.moneytype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->moneytype(), output);
  }

  // required double fund_bal = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->fund_bal(), output);
  }

  // required double fund_ava = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->fund_ava(), output);
  }

  // required double market_value = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->market_value(), output);
  }

  // optional string request_id = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureCapital.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->request_id(), output);
  }

  // optional double exchage_margin = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->exchage_margin(), output);
  }

  // optional double delivery_margin = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->delivery_margin(), output);
  }

  // optional double exchage_delivery_margin = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->exchage_delivery_margin(), output);
  }

  // optional bool islast = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->islast(), output);
  }

  // optional int32 ret_code = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->ret_code(), output);
  }

  // optional string ret_message = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_message().data(), static_cast<int>(this->ret_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureCapital.ret_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->ret_message(), output);
  }

  // optional double curr_margin = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->curr_margin(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.FutureCapital)
}

::google::protobuf::uint8* FutureCapital::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.FutureCapital)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12102001];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional string moneytype = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->moneytype().data(), static_cast<int>(this->moneytype().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureCapital.moneytype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->moneytype(), target);
  }

  // required double fund_bal = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->fund_bal(), target);
  }

  // required double fund_ava = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->fund_ava(), target);
  }

  // required double market_value = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->market_value(), target);
  }

  // optional string request_id = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureCapital.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->request_id(), target);
  }

  // optional double exchage_margin = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->exchage_margin(), target);
  }

  // optional double delivery_margin = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->delivery_margin(), target);
  }

  // optional double exchage_delivery_margin = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->exchage_delivery_margin(), target);
  }

  // optional bool islast = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->islast(), target);
  }

  // optional int32 ret_code = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->ret_code(), target);
  }

  // optional string ret_message = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_message().data(), static_cast<int>(this->ret_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureCapital.ret_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->ret_message(), target);
  }

  // optional double curr_margin = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->curr_margin(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.FutureCapital)
  return target;
}

size_t FutureCapital::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autotrade.FutureCapital)
  size_t total_size = 0;

  if (has_fund_bal()) {
    // required double fund_bal = 3;
    total_size += 1 + 8;
  }

  if (has_fund_ava()) {
    // required double fund_ava = 4;
    total_size += 1 + 8;
  }

  if (has_market_value()) {
    // required double market_value = 5;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t FutureCapital::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.FutureCapital)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000038) ^ 0x00000038) == 0) {  // All required fields are present.
    // required double fund_bal = 3;
    total_size += 1 + 8;

    // required double fund_ava = 4;
    total_size += 1 + 8;

    // required double market_value = 5;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string moneytype = 2;
    if (has_moneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->moneytype());
    }

    // optional string request_id = 6;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional string ret_message = 12;
    if (has_ret_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ret_message());
    }

  }
  if (_has_bits_[0 / 32] & 192u) {
    // optional double exchage_margin = 7;
    if (has_exchage_margin()) {
      total_size += 1 + 8;
    }

    // optional double delivery_margin = 8;
    if (has_delivery_margin()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional double exchage_delivery_margin = 9;
    if (has_exchage_delivery_margin()) {
      total_size += 1 + 8;
    }

    // optional bool islast = 10;
    if (has_islast()) {
      total_size += 1 + 1;
    }

    // optional int32 ret_code = 11;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional double curr_margin = 13;
    if (has_curr_margin()) {
      total_size += 1 + 8;
    }

    // optional int32 funcid = 1 [default = 12102001];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FutureCapital::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.FutureCapital)
  GOOGLE_DCHECK_NE(&from, this);
  const FutureCapital* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FutureCapital>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.FutureCapital)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.FutureCapital)
    MergeFrom(*source);
  }
}

void FutureCapital::MergeFrom(const FutureCapital& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.FutureCapital)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_moneytype();
      moneytype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.moneytype_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_ret_message();
      ret_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_message_);
    }
    if (cached_has_bits & 0x00000008u) {
      fund_bal_ = from.fund_bal_;
    }
    if (cached_has_bits & 0x00000010u) {
      fund_ava_ = from.fund_ava_;
    }
    if (cached_has_bits & 0x00000020u) {
      market_value_ = from.market_value_;
    }
    if (cached_has_bits & 0x00000040u) {
      exchage_margin_ = from.exchage_margin_;
    }
    if (cached_has_bits & 0x00000080u) {
      delivery_margin_ = from.delivery_margin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      exchage_delivery_margin_ = from.exchage_delivery_margin_;
    }
    if (cached_has_bits & 0x00000200u) {
      islast_ = from.islast_;
    }
    if (cached_has_bits & 0x00000400u) {
      ret_code_ = from.ret_code_;
    }
    if (cached_has_bits & 0x00000800u) {
      curr_margin_ = from.curr_margin_;
    }
    if (cached_has_bits & 0x00001000u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FutureCapital::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.FutureCapital)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureCapital::CopyFrom(const FutureCapital& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.FutureCapital)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureCapital::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000038) != 0x00000038) return false;
  return true;
}

void FutureCapital::Swap(FutureCapital* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FutureCapital::InternalSwap(FutureCapital* other) {
  using std::swap;
  moneytype_.Swap(&other->moneytype_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ret_message_.Swap(&other->ret_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(fund_bal_, other->fund_bal_);
  swap(fund_ava_, other->fund_ava_);
  swap(market_value_, other->market_value_);
  swap(exchage_margin_, other->exchage_margin_);
  swap(delivery_margin_, other->delivery_margin_);
  swap(exchage_delivery_margin_, other->exchage_delivery_margin_);
  swap(islast_, other->islast_);
  swap(ret_code_, other->ret_code_);
  swap(curr_margin_, other->curr_margin_);
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FutureCapital::GetMetadata() const {
  protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FutureQueryPositionReqt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FutureQueryPositionReqt::kFuncidFieldNumber;
const int FutureQueryPositionReqt::kCodeFieldNumber;
const int FutureQueryPositionReqt::kRequestIdFieldNumber;
const int FutureQueryPositionReqt::kRequestDateFieldNumber;
const int FutureQueryPositionReqt::kRequestTimeFieldNumber;
const int FutureQueryPositionReqt::kActiveIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FutureQueryPositionReqt::FutureQueryPositionReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureQueryPositionReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.FutureQueryPositionReqt)
}
FutureQueryPositionReqt::FutureQueryPositionReqt(const FutureQueryPositionReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  ::memcpy(&request_date_, &from.request_date_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_interval_) -
    reinterpret_cast<char*>(&request_date_)) + sizeof(active_interval_));
  // @@protoc_insertion_point(copy_constructor:autotrade.FutureQueryPositionReqt)
}

void FutureQueryPositionReqt::SharedCtor() {
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&request_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_time_) -
      reinterpret_cast<char*>(&request_date_)) + sizeof(request_time_));
  funcid_ = 12002005;
  active_interval_ = GOOGLE_LONGLONG(10000);
}

FutureQueryPositionReqt::~FutureQueryPositionReqt() {
  // @@protoc_insertion_point(destructor:autotrade.FutureQueryPositionReqt)
  SharedDtor();
}

void FutureQueryPositionReqt::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FutureQueryPositionReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FutureQueryPositionReqt::descriptor() {
  ::protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FutureQueryPositionReqt& FutureQueryPositionReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureQueryPositionReqt.base);
  return *internal_default_instance();
}


void FutureQueryPositionReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.FutureQueryPositionReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&request_date_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&request_time_) -
        reinterpret_cast<char*>(&request_date_)) + sizeof(request_time_));
    funcid_ = 12002005;
    active_interval_ = GOOGLE_LONGLONG(10000);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FutureQueryPositionReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.FutureQueryPositionReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 12002005];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureQueryPositionReqt.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureQueryPositionReqt.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 request_date = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_request_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 request_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_request_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 active_interval = 6 [default = 10000];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_active_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &active_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.FutureQueryPositionReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.FutureQueryPositionReqt)
  return false;
#undef DO_
}

void FutureQueryPositionReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.FutureQueryPositionReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12002005];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional string code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQueryPositionReqt.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->code(), output);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQueryPositionReqt.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->request_id(), output);
  }

  // optional int64 request_date = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->request_date(), output);
  }

  // optional int64 request_time = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->request_time(), output);
  }

  // optional int64 active_interval = 6 [default = 10000];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->active_interval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.FutureQueryPositionReqt)
}

::google::protobuf::uint8* FutureQueryPositionReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.FutureQueryPositionReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12002005];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional string code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQueryPositionReqt.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQueryPositionReqt.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->request_id(), target);
  }

  // optional int64 request_date = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->request_date(), target);
  }

  // optional int64 request_time = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->request_time(), target);
  }

  // optional int64 active_interval = 6 [default = 10000];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->active_interval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.FutureQueryPositionReqt)
  return target;
}

size_t FutureQueryPositionReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.FutureQueryPositionReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional string request_id = 3;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional int64 request_date = 4;
    if (has_request_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->request_date());
    }

    // optional int64 request_time = 5;
    if (has_request_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->request_time());
    }

    // optional int32 funcid = 1 [default = 12002005];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

    // optional int64 active_interval = 6 [default = 10000];
    if (has_active_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->active_interval());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FutureQueryPositionReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.FutureQueryPositionReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const FutureQueryPositionReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FutureQueryPositionReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.FutureQueryPositionReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.FutureQueryPositionReqt)
    MergeFrom(*source);
  }
}

void FutureQueryPositionReqt::MergeFrom(const FutureQueryPositionReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.FutureQueryPositionReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      request_date_ = from.request_date_;
    }
    if (cached_has_bits & 0x00000008u) {
      request_time_ = from.request_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      funcid_ = from.funcid_;
    }
    if (cached_has_bits & 0x00000020u) {
      active_interval_ = from.active_interval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FutureQueryPositionReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.FutureQueryPositionReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureQueryPositionReqt::CopyFrom(const FutureQueryPositionReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.FutureQueryPositionReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureQueryPositionReqt::IsInitialized() const {
  return true;
}

void FutureQueryPositionReqt::Swap(FutureQueryPositionReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FutureQueryPositionReqt::InternalSwap(FutureQueryPositionReqt* other) {
  using std::swap;
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(request_date_, other->request_date_);
  swap(request_time_, other->request_time_);
  swap(funcid_, other->funcid_);
  swap(active_interval_, other->active_interval_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FutureQueryPositionReqt::GetMetadata() const {
  protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FuturePosition::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FuturePosition::kFuncidFieldNumber;
const int FuturePosition::kOnePositionsFieldNumber;
const int FuturePosition::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FuturePosition::FuturePosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FuturePosition.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.FuturePosition)
}
FuturePosition::FuturePosition(const FuturePosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      one_positions_(from.one_positions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:autotrade.FuturePosition)
}

void FuturePosition::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  funcid_ = 12102005;
}

FuturePosition::~FuturePosition() {
  // @@protoc_insertion_point(destructor:autotrade.FuturePosition)
  SharedDtor();
}

void FuturePosition::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FuturePosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FuturePosition::descriptor() {
  ::protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FuturePosition& FuturePosition::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FuturePosition.base);
  return *internal_default_instance();
}


void FuturePosition::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.FuturePosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  one_positions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    funcid_ = 12102005;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FuturePosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.FuturePosition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 12102005];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autotrade.OneFuturePosition one_positions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_one_positions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FuturePosition.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.FuturePosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.FuturePosition)
  return false;
#undef DO_
}

void FuturePosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.FuturePosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12102005];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // repeated .autotrade.OneFuturePosition one_positions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->one_positions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->one_positions(static_cast<int>(i)),
      output);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FuturePosition.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.FuturePosition)
}

::google::protobuf::uint8* FuturePosition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.FuturePosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12102005];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // repeated .autotrade.OneFuturePosition one_positions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->one_positions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->one_positions(static_cast<int>(i)), deterministic, target);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FuturePosition.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.FuturePosition)
  return target;
}

size_t FuturePosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.FuturePosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .autotrade.OneFuturePosition one_positions = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->one_positions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->one_positions(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string request_id = 3;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional int32 funcid = 1 [default = 12102005];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FuturePosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.FuturePosition)
  GOOGLE_DCHECK_NE(&from, this);
  const FuturePosition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FuturePosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.FuturePosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.FuturePosition)
    MergeFrom(*source);
  }
}

void FuturePosition::MergeFrom(const FuturePosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.FuturePosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  one_positions_.MergeFrom(from.one_positions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FuturePosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.FuturePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FuturePosition::CopyFrom(const FuturePosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.FuturePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FuturePosition::IsInitialized() const {
  return true;
}

void FuturePosition::Swap(FuturePosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FuturePosition::InternalSwap(FuturePosition* other) {
  using std::swap;
  CastToBase(&one_positions_)->InternalSwap(CastToBase(&other->one_positions_));
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FuturePosition::GetMetadata() const {
  protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OneFuturePosition::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OneFuturePosition::kFuncidFieldNumber;
const int OneFuturePosition::kMarketFieldNumber;
const int OneFuturePosition::kCodeFieldNumber;
const int OneFuturePosition::kNameFieldNumber;
const int OneFuturePosition::kBsflagFieldNumber;
const int OneFuturePosition::kYdPositionFieldNumber;
const int OneFuturePosition::kTodayPositionFieldNumber;
const int OneFuturePosition::kPositionFieldNumber;
const int OneFuturePosition::kHedgeFlagFieldNumber;
const int OneFuturePosition::kOpenCostFieldNumber;
const int OneFuturePosition::kAccountNameFieldNumber;
const int OneFuturePosition::kIslastFieldNumber;
const int OneFuturePosition::kRetCodeFieldNumber;
const int OneFuturePosition::kRetMessageFieldNumber;
const int OneFuturePosition::kCanCloseQtyFieldNumber;
const int OneFuturePosition::kPendingCloseQtyFieldNumber;
const int OneFuturePosition::kTodayOpenVolumeFieldNumber;
const int OneFuturePosition::kTodayCloseVolumeFieldNumber;
const int OneFuturePosition::kTodayOpeningVolumeFieldNumber;
const int OneFuturePosition::kTodayClosingVolumeFieldNumber;
const int OneFuturePosition::kYdClosingVolumeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OneFuturePosition::OneFuturePosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_OneFuturePosition.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.OneFuturePosition)
}
OneFuturePosition::OneFuturePosition(const OneFuturePosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account_name()) {
    account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
  }
  ret_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ret_message()) {
    ret_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_message_);
  }
  ::memcpy(&market_, &from.market_,
    static_cast<size_t>(reinterpret_cast<char*>(&funcid_) -
    reinterpret_cast<char*>(&market_)) + sizeof(funcid_));
  // @@protoc_insertion_point(copy_constructor:autotrade.OneFuturePosition)
}

void OneFuturePosition::SharedCtor() {
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&market_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_code_) -
      reinterpret_cast<char*>(&market_)) + sizeof(ret_code_));
  funcid_ = 12002009;
}

OneFuturePosition::~OneFuturePosition() {
  // @@protoc_insertion_point(destructor:autotrade.OneFuturePosition)
  SharedDtor();
}

void OneFuturePosition::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OneFuturePosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OneFuturePosition::descriptor() {
  ::protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OneFuturePosition& OneFuturePosition::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_OneFuturePosition.base);
  return *internal_default_instance();
}


void OneFuturePosition::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.OneFuturePosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      account_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      ret_message_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&market_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&today_position_) -
        reinterpret_cast<char*>(&market_)) + sizeof(today_position_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&position_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&today_close_volume_) -
        reinterpret_cast<char*>(&position_)) + sizeof(today_close_volume_));
  }
  if (cached_has_bits & 2031616u) {
    ::memset(&today_opening_volume_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_code_) -
        reinterpret_cast<char*>(&today_opening_volume_)) + sizeof(ret_code_));
    funcid_ = 12002009;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OneFuturePosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.OneFuturePosition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 market = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_market();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &market_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OneFuturePosition.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OneFuturePosition.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bsflag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_bsflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bsflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 yd_position = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_yd_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &yd_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 today_position = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_today_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &today_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 position = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hedge_flag = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_hedge_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hedge_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double open_cost = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_open_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &open_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string account_name = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account_name().data(), static_cast<int>(this->account_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OneFuturePosition.account_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool islast = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_islast();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islast_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 funcid = 12 [default = 12002009];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ret_code = 13 [default = 0];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_ret_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ret_message = 14 [default = ""];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ret_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ret_message().data(), static_cast<int>(this->ret_message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OneFuturePosition.ret_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 can_close_qty = 15 [default = 0];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_can_close_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &can_close_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 pending_close_qty = 16 [default = 0];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_pending_close_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pending_close_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 today_open_volume = 17 [default = 0];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_today_open_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &today_open_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 today_close_volume = 18 [default = 0];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_today_close_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &today_close_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 today_opening_volume = 19 [default = 0];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_today_opening_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &today_opening_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 today_closing_volume = 20 [default = 0];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_today_closing_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &today_closing_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 yd_closing_volume = 21 [default = 0];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_yd_closing_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &yd_closing_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.OneFuturePosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.OneFuturePosition)
  return false;
#undef DO_
}

void OneFuturePosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.OneFuturePosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 market = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->market(), output);
  }

  // optional string code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OneFuturePosition.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->code(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OneFuturePosition.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional uint32 bsflag = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bsflag(), output);
  }

  // optional int64 yd_position = 5 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->yd_position(), output);
  }

  // optional int64 today_position = 6 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->today_position(), output);
  }

  // optional int64 position = 7 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->position(), output);
  }

  // optional int32 hedge_flag = 8;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->hedge_flag(), output);
  }

  // optional double open_cost = 9 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->open_cost(), output);
  }

  // optional string account_name = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OneFuturePosition.account_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->account_name(), output);
  }

  // optional bool islast = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->islast(), output);
  }

  // optional int32 funcid = 12 [default = 12002009];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->funcid(), output);
  }

  // optional int32 ret_code = 13 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->ret_code(), output);
  }

  // optional string ret_message = 14 [default = ""];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_message().data(), static_cast<int>(this->ret_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OneFuturePosition.ret_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->ret_message(), output);
  }

  // optional int64 can_close_qty = 15 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->can_close_qty(), output);
  }

  // optional int64 pending_close_qty = 16 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->pending_close_qty(), output);
  }

  // optional int64 today_open_volume = 17 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->today_open_volume(), output);
  }

  // optional int64 today_close_volume = 18 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->today_close_volume(), output);
  }

  // optional int64 today_opening_volume = 19 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->today_opening_volume(), output);
  }

  // optional int64 today_closing_volume = 20 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->today_closing_volume(), output);
  }

  // optional int64 yd_closing_volume = 21 [default = 0];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->yd_closing_volume(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.OneFuturePosition)
}

::google::protobuf::uint8* OneFuturePosition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.OneFuturePosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 market = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->market(), target);
  }

  // optional string code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OneFuturePosition.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OneFuturePosition.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint32 bsflag = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bsflag(), target);
  }

  // optional int64 yd_position = 5 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->yd_position(), target);
  }

  // optional int64 today_position = 6 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->today_position(), target);
  }

  // optional int64 position = 7 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->position(), target);
  }

  // optional int32 hedge_flag = 8;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->hedge_flag(), target);
  }

  // optional double open_cost = 9 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->open_cost(), target);
  }

  // optional string account_name = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OneFuturePosition.account_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->account_name(), target);
  }

  // optional bool islast = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->islast(), target);
  }

  // optional int32 funcid = 12 [default = 12002009];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->funcid(), target);
  }

  // optional int32 ret_code = 13 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->ret_code(), target);
  }

  // optional string ret_message = 14 [default = ""];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_message().data(), static_cast<int>(this->ret_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OneFuturePosition.ret_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->ret_message(), target);
  }

  // optional int64 can_close_qty = 15 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->can_close_qty(), target);
  }

  // optional int64 pending_close_qty = 16 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->pending_close_qty(), target);
  }

  // optional int64 today_open_volume = 17 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->today_open_volume(), target);
  }

  // optional int64 today_close_volume = 18 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->today_close_volume(), target);
  }

  // optional int64 today_opening_volume = 19 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->today_opening_volume(), target);
  }

  // optional int64 today_closing_volume = 20 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->today_closing_volume(), target);
  }

  // optional int64 yd_closing_volume = 21 [default = 0];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->yd_closing_volume(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.OneFuturePosition)
  return target;
}

size_t OneFuturePosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.OneFuturePosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string account_name = 10;
    if (has_account_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name());
    }

    // optional string ret_message = 14 [default = ""];
    if (has_ret_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ret_message());
    }

    // optional uint32 market = 1;
    if (has_market()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->market());
    }

    // optional uint32 bsflag = 4;
    if (has_bsflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bsflag());
    }

    // optional int64 yd_position = 5 [default = 0];
    if (has_yd_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->yd_position());
    }

    // optional int64 today_position = 6 [default = 0];
    if (has_today_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->today_position());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int64 position = 7 [default = 0];
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->position());
    }

    // optional double open_cost = 9 [default = 0];
    if (has_open_cost()) {
      total_size += 1 + 8;
    }

    // optional int32 hedge_flag = 8;
    if (has_hedge_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hedge_flag());
    }

    // optional bool islast = 11;
    if (has_islast()) {
      total_size += 1 + 1;
    }

    // optional int64 can_close_qty = 15 [default = 0];
    if (has_can_close_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->can_close_qty());
    }

    // optional int64 pending_close_qty = 16 [default = 0];
    if (has_pending_close_qty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pending_close_qty());
    }

    // optional int64 today_open_volume = 17 [default = 0];
    if (has_today_open_volume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->today_open_volume());
    }

    // optional int64 today_close_volume = 18 [default = 0];
    if (has_today_close_volume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->today_close_volume());
    }

  }
  if (_has_bits_[16 / 32] & 2031616u) {
    // optional int64 today_opening_volume = 19 [default = 0];
    if (has_today_opening_volume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->today_opening_volume());
    }

    // optional int64 today_closing_volume = 20 [default = 0];
    if (has_today_closing_volume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->today_closing_volume());
    }

    // optional int64 yd_closing_volume = 21 [default = 0];
    if (has_yd_closing_volume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->yd_closing_volume());
    }

    // optional int32 ret_code = 13 [default = 0];
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional int32 funcid = 12 [default = 12002009];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OneFuturePosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.OneFuturePosition)
  GOOGLE_DCHECK_NE(&from, this);
  const OneFuturePosition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OneFuturePosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.OneFuturePosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.OneFuturePosition)
    MergeFrom(*source);
  }
}

void OneFuturePosition::MergeFrom(const OneFuturePosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.OneFuturePosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_account_name();
      account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_ret_message();
      ret_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_message_);
    }
    if (cached_has_bits & 0x00000010u) {
      market_ = from.market_;
    }
    if (cached_has_bits & 0x00000020u) {
      bsflag_ = from.bsflag_;
    }
    if (cached_has_bits & 0x00000040u) {
      yd_position_ = from.yd_position_;
    }
    if (cached_has_bits & 0x00000080u) {
      today_position_ = from.today_position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      position_ = from.position_;
    }
    if (cached_has_bits & 0x00000200u) {
      open_cost_ = from.open_cost_;
    }
    if (cached_has_bits & 0x00000400u) {
      hedge_flag_ = from.hedge_flag_;
    }
    if (cached_has_bits & 0x00000800u) {
      islast_ = from.islast_;
    }
    if (cached_has_bits & 0x00001000u) {
      can_close_qty_ = from.can_close_qty_;
    }
    if (cached_has_bits & 0x00002000u) {
      pending_close_qty_ = from.pending_close_qty_;
    }
    if (cached_has_bits & 0x00004000u) {
      today_open_volume_ = from.today_open_volume_;
    }
    if (cached_has_bits & 0x00008000u) {
      today_close_volume_ = from.today_close_volume_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 2031616u) {
    if (cached_has_bits & 0x00010000u) {
      today_opening_volume_ = from.today_opening_volume_;
    }
    if (cached_has_bits & 0x00020000u) {
      today_closing_volume_ = from.today_closing_volume_;
    }
    if (cached_has_bits & 0x00040000u) {
      yd_closing_volume_ = from.yd_closing_volume_;
    }
    if (cached_has_bits & 0x00080000u) {
      ret_code_ = from.ret_code_;
    }
    if (cached_has_bits & 0x00100000u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OneFuturePosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.OneFuturePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneFuturePosition::CopyFrom(const OneFuturePosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.OneFuturePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneFuturePosition::IsInitialized() const {
  return true;
}

void OneFuturePosition::Swap(OneFuturePosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OneFuturePosition::InternalSwap(OneFuturePosition* other) {
  using std::swap;
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_name_.Swap(&other->account_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ret_message_.Swap(&other->ret_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(market_, other->market_);
  swap(bsflag_, other->bsflag_);
  swap(yd_position_, other->yd_position_);
  swap(today_position_, other->today_position_);
  swap(position_, other->position_);
  swap(open_cost_, other->open_cost_);
  swap(hedge_flag_, other->hedge_flag_);
  swap(islast_, other->islast_);
  swap(can_close_qty_, other->can_close_qty_);
  swap(pending_close_qty_, other->pending_close_qty_);
  swap(today_open_volume_, other->today_open_volume_);
  swap(today_close_volume_, other->today_close_volume_);
  swap(today_opening_volume_, other->today_opening_volume_);
  swap(today_closing_volume_, other->today_closing_volume_);
  swap(yd_closing_volume_, other->yd_closing_volume_);
  swap(ret_code_, other->ret_code_);
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OneFuturePosition::GetMetadata() const {
  protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FutureQueryDealDetailReqt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FutureQueryDealDetailReqt::kFuncidFieldNumber;
const int FutureQueryDealDetailReqt::kOrderGroupFieldNumber;
const int FutureQueryDealDetailReqt::kStartPosFieldNumber;
const int FutureQueryDealDetailReqt::kRequestIdFieldNumber;
const int FutureQueryDealDetailReqt::kRequestDateFieldNumber;
const int FutureQueryDealDetailReqt::kRequestTimeFieldNumber;
const int FutureQueryDealDetailReqt::kActiveIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FutureQueryDealDetailReqt::FutureQueryDealDetailReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureQueryDealDetailReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.FutureQueryDealDetailReqt)
}
FutureQueryDealDetailReqt::FutureQueryDealDetailReqt(const FutureQueryDealDetailReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_group()) {
    order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
  }
  start_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_start_pos()) {
    start_pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_pos_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  ::memcpy(&request_date_, &from.request_date_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_interval_) -
    reinterpret_cast<char*>(&request_date_)) + sizeof(active_interval_));
  // @@protoc_insertion_point(copy_constructor:autotrade.FutureQueryDealDetailReqt)
}

void FutureQueryDealDetailReqt::SharedCtor() {
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&request_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_time_) -
      reinterpret_cast<char*>(&request_date_)) + sizeof(request_time_));
  funcid_ = 12002003;
  active_interval_ = GOOGLE_LONGLONG(10000);
}

FutureQueryDealDetailReqt::~FutureQueryDealDetailReqt() {
  // @@protoc_insertion_point(destructor:autotrade.FutureQueryDealDetailReqt)
  SharedDtor();
}

void FutureQueryDealDetailReqt::SharedDtor() {
  order_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_pos_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FutureQueryDealDetailReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FutureQueryDealDetailReqt::descriptor() {
  ::protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FutureQueryDealDetailReqt& FutureQueryDealDetailReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureQueryDealDetailReqt.base);
  return *internal_default_instance();
}


void FutureQueryDealDetailReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.FutureQueryDealDetailReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      order_group_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      start_pos_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 120u) {
    ::memset(&request_date_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&request_time_) -
        reinterpret_cast<char*>(&request_date_)) + sizeof(request_time_));
    funcid_ = 12002003;
    active_interval_ = GOOGLE_LONGLONG(10000);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FutureQueryDealDetailReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.FutureQueryDealDetailReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 12002003];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_group = 2 [default = ""];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_group().data(), static_cast<int>(this->order_group().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureQueryDealDetailReqt.order_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string start_pos = 3 [default = ""];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_pos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->start_pos().data(), static_cast<int>(this->start_pos().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureQueryDealDetailReqt.start_pos");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureQueryDealDetailReqt.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 request_date = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_request_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 request_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_request_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 active_interval = 7 [default = 10000];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_active_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &active_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.FutureQueryDealDetailReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.FutureQueryDealDetailReqt)
  return false;
#undef DO_
}

void FutureQueryDealDetailReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.FutureQueryDealDetailReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12002003];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional string order_group = 2 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQueryDealDetailReqt.order_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->order_group(), output);
  }

  // optional string start_pos = 3 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_pos().data(), static_cast<int>(this->start_pos().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQueryDealDetailReqt.start_pos");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->start_pos(), output);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQueryDealDetailReqt.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->request_id(), output);
  }

  // optional int64 request_date = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->request_date(), output);
  }

  // optional int64 request_time = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->request_time(), output);
  }

  // optional int64 active_interval = 7 [default = 10000];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->active_interval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.FutureQueryDealDetailReqt)
}

::google::protobuf::uint8* FutureQueryDealDetailReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.FutureQueryDealDetailReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12002003];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional string order_group = 2 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQueryDealDetailReqt.order_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->order_group(), target);
  }

  // optional string start_pos = 3 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_pos().data(), static_cast<int>(this->start_pos().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQueryDealDetailReqt.start_pos");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->start_pos(), target);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQueryDealDetailReqt.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->request_id(), target);
  }

  // optional int64 request_date = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->request_date(), target);
  }

  // optional int64 request_time = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->request_time(), target);
  }

  // optional int64 active_interval = 7 [default = 10000];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->active_interval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.FutureQueryDealDetailReqt)
  return target;
}

size_t FutureQueryDealDetailReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.FutureQueryDealDetailReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string order_group = 2 [default = ""];
    if (has_order_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_group());
    }

    // optional string start_pos = 3 [default = ""];
    if (has_start_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start_pos());
    }

    // optional string request_id = 4;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional int64 request_date = 5;
    if (has_request_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->request_date());
    }

    // optional int64 request_time = 6;
    if (has_request_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->request_time());
    }

    // optional int32 funcid = 1 [default = 12002003];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

    // optional int64 active_interval = 7 [default = 10000];
    if (has_active_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->active_interval());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FutureQueryDealDetailReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.FutureQueryDealDetailReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const FutureQueryDealDetailReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FutureQueryDealDetailReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.FutureQueryDealDetailReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.FutureQueryDealDetailReqt)
    MergeFrom(*source);
  }
}

void FutureQueryDealDetailReqt::MergeFrom(const FutureQueryDealDetailReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.FutureQueryDealDetailReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_order_group();
      order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_start_pos();
      start_pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_pos_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      request_date_ = from.request_date_;
    }
    if (cached_has_bits & 0x00000010u) {
      request_time_ = from.request_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      funcid_ = from.funcid_;
    }
    if (cached_has_bits & 0x00000040u) {
      active_interval_ = from.active_interval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FutureQueryDealDetailReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.FutureQueryDealDetailReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureQueryDealDetailReqt::CopyFrom(const FutureQueryDealDetailReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.FutureQueryDealDetailReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureQueryDealDetailReqt::IsInitialized() const {
  return true;
}

void FutureQueryDealDetailReqt::Swap(FutureQueryDealDetailReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FutureQueryDealDetailReqt::InternalSwap(FutureQueryDealDetailReqt* other) {
  using std::swap;
  order_group_.Swap(&other->order_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  start_pos_.Swap(&other->start_pos_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(request_date_, other->request_date_);
  swap(request_time_, other->request_time_);
  swap(funcid_, other->funcid_);
  swap(active_interval_, other->active_interval_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FutureQueryDealDetailReqt::GetMetadata() const {
  protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FutureDealDetail_DealDetail::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FutureDealDetail_DealDetail::kMatchIdFieldNumber;
const int FutureDealDetail_DealDetail::kBsflagFieldNumber;
const int FutureDealDetail_DealDetail::kOrdernoFieldNumber;
const int FutureDealDetail_DealDetail::kMarketFieldNumber;
const int FutureDealDetail_DealDetail::kCodeFieldNumber;
const int FutureDealDetail_DealDetail::kNameFieldNumber;
const int FutureDealDetail_DealDetail::kMatchTimeFieldNumber;
const int FutureDealDetail_DealDetail::kMatchQtyFieldNumber;
const int FutureDealDetail_DealDetail::kMatchPriceFieldNumber;
const int FutureDealDetail_DealDetail::kMatchAmtFieldNumber;
const int FutureDealDetail_DealDetail::kClearAmtFieldNumber;
const int FutureDealDetail_DealDetail::kMatchTypeFieldNumber;
const int FutureDealDetail_DealDetail::kOrderQtyFieldNumber;
const int FutureDealDetail_DealDetail::kOrderPriceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FutureDealDetail_DealDetail::FutureDealDetail_DealDetail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureDealDetail_DealDetail.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.FutureDealDetail.DealDetail)
}
FutureDealDetail_DealDetail::FutureDealDetail_DealDetail(const FutureDealDetail_DealDetail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  match_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_match_id()) {
    match_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_id_);
  }
  orderno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_orderno()) {
    orderno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderno_);
  }
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&bsflag_, &from.bsflag_,
    static_cast<size_t>(reinterpret_cast<char*>(&order_price_) -
    reinterpret_cast<char*>(&bsflag_)) + sizeof(order_price_));
  // @@protoc_insertion_point(copy_constructor:autotrade.FutureDealDetail.DealDetail)
}

void FutureDealDetail_DealDetail::SharedCtor() {
  match_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bsflag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&order_price_) -
      reinterpret_cast<char*>(&bsflag_)) + sizeof(order_price_));
}

FutureDealDetail_DealDetail::~FutureDealDetail_DealDetail() {
  // @@protoc_insertion_point(destructor:autotrade.FutureDealDetail.DealDetail)
  SharedDtor();
}

void FutureDealDetail_DealDetail::SharedDtor() {
  match_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderno_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FutureDealDetail_DealDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FutureDealDetail_DealDetail::descriptor() {
  ::protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FutureDealDetail_DealDetail& FutureDealDetail_DealDetail::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureDealDetail_DealDetail.base);
  return *internal_default_instance();
}


void FutureDealDetail_DealDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.FutureDealDetail.DealDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      orderno_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&bsflag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_price_) -
        reinterpret_cast<char*>(&bsflag_)) + sizeof(match_price_));
  }
  if (cached_has_bits & 16128u) {
    ::memset(&match_amt_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&order_price_) -
        reinterpret_cast<char*>(&match_amt_)) + sizeof(order_price_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FutureDealDetail_DealDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.FutureDealDetail.DealDetail)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_match_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->match_id().data(), static_cast<int>(this->match_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureDealDetail.DealDetail.match_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 bsflag = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_bsflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bsflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string orderno = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orderno().data(), static_cast<int>(this->orderno().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureDealDetail.DealDetail.orderno");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 market = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_market();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &market_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string code = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureDealDetail.DealDetail.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureDealDetail.DealDetail.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_match_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 match_qty = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_match_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 match_price = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_match_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &match_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 match_amt = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_match_amt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &match_amt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double clear_amt = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_clear_amt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &clear_amt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 match_type = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_match_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &match_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 order_qty = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_order_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 order_price = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_order_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &order_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.FutureDealDetail.DealDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.FutureDealDetail.DealDetail)
  return false;
#undef DO_
}

void FutureDealDetail_DealDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.FutureDealDetail.DealDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_id().data(), static_cast<int>(this->match_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureDealDetail.DealDetail.match_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->match_id(), output);
  }

  // required uint32 bsflag = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bsflag(), output);
  }

  // required string orderno = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderno().data(), static_cast<int>(this->orderno().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureDealDetail.DealDetail.orderno");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->orderno(), output);
  }

  // optional uint32 market = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->market(), output);
  }

  // required string code = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureDealDetail.DealDetail.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->code(), output);
  }

  // optional string name = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureDealDetail.DealDetail.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->name(), output);
  }

  // optional uint64 match_time = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->match_time(), output);
  }

  // required uint32 match_qty = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->match_qty(), output);
  }

  // required int64 match_price = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->match_price(), output);
  }

  // required int64 match_amt = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->match_amt(), output);
  }

  // required double clear_amt = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->clear_amt(), output);
  }

  // required int64 match_type = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->match_type(), output);
  }

  // required uint32 order_qty = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->order_qty(), output);
  }

  // required int64 order_price = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->order_price(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.FutureDealDetail.DealDetail)
}

::google::protobuf::uint8* FutureDealDetail_DealDetail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.FutureDealDetail.DealDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_id().data(), static_cast<int>(this->match_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureDealDetail.DealDetail.match_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->match_id(), target);
  }

  // required uint32 bsflag = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bsflag(), target);
  }

  // required string orderno = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderno().data(), static_cast<int>(this->orderno().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureDealDetail.DealDetail.orderno");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->orderno(), target);
  }

  // optional uint32 market = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->market(), target);
  }

  // required string code = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureDealDetail.DealDetail.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->code(), target);
  }

  // optional string name = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureDealDetail.DealDetail.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  // optional uint64 match_time = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->match_time(), target);
  }

  // required uint32 match_qty = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->match_qty(), target);
  }

  // required int64 match_price = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->match_price(), target);
  }

  // required int64 match_amt = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->match_amt(), target);
  }

  // required double clear_amt = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->clear_amt(), target);
  }

  // required int64 match_type = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->match_type(), target);
  }

  // required uint32 order_qty = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->order_qty(), target);
  }

  // required int64 order_price = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->order_price(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.FutureDealDetail.DealDetail)
  return target;
}

size_t FutureDealDetail_DealDetail::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autotrade.FutureDealDetail.DealDetail)
  size_t total_size = 0;

  if (has_match_id()) {
    // required string match_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->match_id());
  }

  if (has_orderno()) {
    // required string orderno = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderno());
  }

  if (has_code()) {
    // required string code = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_bsflag()) {
    // required uint32 bsflag = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bsflag());
  }

  if (has_match_price()) {
    // required int64 match_price = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->match_price());
  }

  if (has_match_amt()) {
    // required int64 match_amt = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->match_amt());
  }

  if (has_match_qty()) {
    // required uint32 match_qty = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->match_qty());
  }

  if (has_order_qty()) {
    // required uint32 order_qty = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->order_qty());
  }

  if (has_clear_amt()) {
    // required double clear_amt = 11;
    total_size += 1 + 8;
  }

  if (has_match_type()) {
    // required int64 match_type = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->match_type());
  }

  if (has_order_price()) {
    // required int64 order_price = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->order_price());
  }

  return total_size;
}
size_t FutureDealDetail_DealDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.FutureDealDetail.DealDetail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00003f97) ^ 0x00003f97) == 0) {  // All required fields are present.
    // required string match_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->match_id());

    // required string orderno = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderno());

    // required string code = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required uint32 bsflag = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bsflag());

    // required int64 match_price = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->match_price());

    // required int64 match_amt = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->match_amt());

    // required uint32 match_qty = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->match_qty());

    // required uint32 order_qty = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->order_qty());

    // required double clear_amt = 11;
    total_size += 1 + 8;

    // required int64 match_type = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->match_type());

    // required int64 order_price = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->order_price());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string name = 6;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (_has_bits_[0 / 32] & 96u) {
    // optional uint32 market = 4;
    if (has_market()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->market());
    }

    // optional uint64 match_time = 7;
    if (has_match_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FutureDealDetail_DealDetail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.FutureDealDetail.DealDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const FutureDealDetail_DealDetail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FutureDealDetail_DealDetail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.FutureDealDetail.DealDetail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.FutureDealDetail.DealDetail)
    MergeFrom(*source);
  }
}

void FutureDealDetail_DealDetail::MergeFrom(const FutureDealDetail_DealDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.FutureDealDetail.DealDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_match_id();
      match_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_orderno();
      orderno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderno_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000010u) {
      bsflag_ = from.bsflag_;
    }
    if (cached_has_bits & 0x00000020u) {
      market_ = from.market_;
    }
    if (cached_has_bits & 0x00000040u) {
      match_time_ = from.match_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      match_price_ = from.match_price_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      match_amt_ = from.match_amt_;
    }
    if (cached_has_bits & 0x00000200u) {
      match_qty_ = from.match_qty_;
    }
    if (cached_has_bits & 0x00000400u) {
      order_qty_ = from.order_qty_;
    }
    if (cached_has_bits & 0x00000800u) {
      clear_amt_ = from.clear_amt_;
    }
    if (cached_has_bits & 0x00001000u) {
      match_type_ = from.match_type_;
    }
    if (cached_has_bits & 0x00002000u) {
      order_price_ = from.order_price_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FutureDealDetail_DealDetail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.FutureDealDetail.DealDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureDealDetail_DealDetail::CopyFrom(const FutureDealDetail_DealDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.FutureDealDetail.DealDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureDealDetail_DealDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003f97) != 0x00003f97) return false;
  return true;
}

void FutureDealDetail_DealDetail::Swap(FutureDealDetail_DealDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FutureDealDetail_DealDetail::InternalSwap(FutureDealDetail_DealDetail* other) {
  using std::swap;
  match_id_.Swap(&other->match_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  orderno_.Swap(&other->orderno_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bsflag_, other->bsflag_);
  swap(market_, other->market_);
  swap(match_time_, other->match_time_);
  swap(match_price_, other->match_price_);
  swap(match_amt_, other->match_amt_);
  swap(match_qty_, other->match_qty_);
  swap(order_qty_, other->order_qty_);
  swap(clear_amt_, other->clear_amt_);
  swap(match_type_, other->match_type_);
  swap(order_price_, other->order_price_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FutureDealDetail_DealDetail::GetMetadata() const {
  protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FutureDealDetail::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FutureDealDetail::kFuncidFieldNumber;
const int FutureDealDetail::kDealDetailsFieldNumber;
const int FutureDealDetail::kRequestIdFieldNumber;
const int FutureDealDetail::kLastPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FutureDealDetail::FutureDealDetail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureDealDetail.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.FutureDealDetail)
}
FutureDealDetail::FutureDealDetail(const FutureDealDetail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      deal_details_(from.deal_details_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  last_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_last_pos()) {
    last_pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_pos_);
  }
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:autotrade.FutureDealDetail)
}

void FutureDealDetail::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  funcid_ = 12102003;
}

FutureDealDetail::~FutureDealDetail() {
  // @@protoc_insertion_point(destructor:autotrade.FutureDealDetail)
  SharedDtor();
}

void FutureDealDetail::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_pos_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FutureDealDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FutureDealDetail::descriptor() {
  ::protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FutureDealDetail& FutureDealDetail::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureDealDetail.base);
  return *internal_default_instance();
}


void FutureDealDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.FutureDealDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deal_details_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      last_pos_.ClearNonDefaultToEmptyNoArena();
    }
    funcid_ = 12102003;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FutureDealDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.FutureDealDetail)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 12102003];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autotrade.FutureDealDetail.DealDetail deal_details = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_deal_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureDealDetail.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string last_pos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_pos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->last_pos().data(), static_cast<int>(this->last_pos().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureDealDetail.last_pos");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.FutureDealDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.FutureDealDetail)
  return false;
#undef DO_
}

void FutureDealDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.FutureDealDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12102003];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // repeated .autotrade.FutureDealDetail.DealDetail deal_details = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->deal_details_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->deal_details(static_cast<int>(i)),
      output);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureDealDetail.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->request_id(), output);
  }

  // optional string last_pos = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_pos().data(), static_cast<int>(this->last_pos().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureDealDetail.last_pos");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->last_pos(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.FutureDealDetail)
}

::google::protobuf::uint8* FutureDealDetail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.FutureDealDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12102003];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // repeated .autotrade.FutureDealDetail.DealDetail deal_details = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->deal_details_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->deal_details(static_cast<int>(i)), deterministic, target);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureDealDetail.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->request_id(), target);
  }

  // optional string last_pos = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_pos().data(), static_cast<int>(this->last_pos().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureDealDetail.last_pos");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->last_pos(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.FutureDealDetail)
  return target;
}

size_t FutureDealDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.FutureDealDetail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .autotrade.FutureDealDetail.DealDetail deal_details = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->deal_details_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->deal_details(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string request_id = 3;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional string last_pos = 4;
    if (has_last_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_pos());
    }

    // optional int32 funcid = 1 [default = 12102003];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FutureDealDetail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.FutureDealDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const FutureDealDetail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FutureDealDetail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.FutureDealDetail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.FutureDealDetail)
    MergeFrom(*source);
  }
}

void FutureDealDetail::MergeFrom(const FutureDealDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.FutureDealDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  deal_details_.MergeFrom(from.deal_details_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_last_pos();
      last_pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_pos_);
    }
    if (cached_has_bits & 0x00000004u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FutureDealDetail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.FutureDealDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureDealDetail::CopyFrom(const FutureDealDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.FutureDealDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureDealDetail::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->deal_details())) return false;
  return true;
}

void FutureDealDetail::Swap(FutureDealDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FutureDealDetail::InternalSwap(FutureDealDetail* other) {
  using std::swap;
  CastToBase(&deal_details_)->InternalSwap(CastToBase(&other->deal_details_));
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_pos_.Swap(&other->last_pos_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FutureDealDetail::GetMetadata() const {
  protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OneFutureKnock::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OneFutureKnock::kFuncidFieldNumber;
const int OneFutureKnock::kStampFieldNumber;
const int OneFutureKnock::kCodeFieldNumber;
const int OneFutureKnock::kOrderGroupFieldNumber;
const int OneFutureKnock::kOrderNoFieldNumber;
const int OneFutureKnock::kMatchIdFieldNumber;
const int OneFutureKnock::kOrderPriceFieldNumber;
const int OneFutureKnock::kMatchPriceFieldNumber;
const int OneFutureKnock::kOrderQtyFieldNumber;
const int OneFutureKnock::kMatchQtyFieldNumber;
const int OneFutureKnock::kMatchAmtFieldNumber;
const int OneFutureKnock::kBsflagFieldNumber;
const int OneFutureKnock::kAccountNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OneFutureKnock::OneFutureKnock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_OneFutureKnock.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.OneFutureKnock)
}
OneFutureKnock::OneFutureKnock(const OneFutureKnock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_group()) {
    order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
  }
  order_no_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_no()) {
    order_no_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_no_);
  }
  match_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_match_id()) {
    match_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_id_);
  }
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account_name()) {
    account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
  }
  ::memcpy(&stamp_, &from.stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&funcid_) -
    reinterpret_cast<char*>(&stamp_)) + sizeof(funcid_));
  // @@protoc_insertion_point(copy_constructor:autotrade.OneFutureKnock)
}

void OneFutureKnock::SharedCtor() {
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_no_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  match_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bsflag_) -
      reinterpret_cast<char*>(&stamp_)) + sizeof(bsflag_));
  funcid_ = 12003002;
}

OneFutureKnock::~OneFutureKnock() {
  // @@protoc_insertion_point(destructor:autotrade.OneFutureKnock)
  SharedDtor();
}

void OneFutureKnock::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_no_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  match_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OneFutureKnock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OneFutureKnock::descriptor() {
  ::protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OneFutureKnock& OneFutureKnock::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_OneFutureKnock.base);
  return *internal_default_instance();
}


void OneFutureKnock::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.OneFutureKnock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      order_group_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      order_no_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      match_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      account_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&stamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_price_) -
        reinterpret_cast<char*>(&stamp_)) + sizeof(match_price_));
  }
  if (cached_has_bits & 7936u) {
    ::memset(&order_qty_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bsflag_) -
        reinterpret_cast<char*>(&order_qty_)) + sizeof(bsflag_));
    funcid_ = 12003002;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OneFutureKnock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.OneFutureKnock)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 12003002];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 stamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_stamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OneFutureKnock.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string order_group = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_group().data(), static_cast<int>(this->order_group().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OneFutureKnock.order_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_no = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_no()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_no().data(), static_cast<int>(this->order_no().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OneFutureKnock.order_no");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string match_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_match_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->match_id().data(), static_cast<int>(this->match_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OneFutureKnock.match_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 order_price = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_order_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &order_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 match_price = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_match_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &match_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 order_qty = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_order_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &order_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 match_qty = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_match_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double match_amt = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_match_amt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &match_amt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bsflag = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_bsflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bsflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string account_name = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account_name().data(), static_cast<int>(this->account_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OneFutureKnock.account_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.OneFutureKnock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.OneFutureKnock)
  return false;
#undef DO_
}

void OneFutureKnock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.OneFutureKnock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12003002];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // required uint64 stamp = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->stamp(), output);
  }

  // required string code = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OneFutureKnock.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->code(), output);
  }

  // required string order_group = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OneFutureKnock.order_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->order_group(), output);
  }

  // optional string order_no = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_no().data(), static_cast<int>(this->order_no().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OneFutureKnock.order_no");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->order_no(), output);
  }

  // optional string match_id = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_id().data(), static_cast<int>(this->match_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OneFutureKnock.match_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->match_id(), output);
  }

  // required int64 order_price = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->order_price(), output);
  }

  // required int64 match_price = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->match_price(), output);
  }

  // required uint64 order_qty = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->order_qty(), output);
  }

  // required uint64 match_qty = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->match_qty(), output);
  }

  // optional double match_amt = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->match_amt(), output);
  }

  // optional uint32 bsflag = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->bsflag(), output);
  }

  // optional string account_name = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OneFutureKnock.account_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->account_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.OneFutureKnock)
}

::google::protobuf::uint8* OneFutureKnock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.OneFutureKnock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12003002];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // required uint64 stamp = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->stamp(), target);
  }

  // required string code = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OneFutureKnock.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->code(), target);
  }

  // required string order_group = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OneFutureKnock.order_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->order_group(), target);
  }

  // optional string order_no = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_no().data(), static_cast<int>(this->order_no().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OneFutureKnock.order_no");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->order_no(), target);
  }

  // optional string match_id = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_id().data(), static_cast<int>(this->match_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OneFutureKnock.match_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->match_id(), target);
  }

  // required int64 order_price = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->order_price(), target);
  }

  // required int64 match_price = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->match_price(), target);
  }

  // required uint64 order_qty = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->order_qty(), target);
  }

  // required uint64 match_qty = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->match_qty(), target);
  }

  // optional double match_amt = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->match_amt(), target);
  }

  // optional uint32 bsflag = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->bsflag(), target);
  }

  // optional string account_name = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OneFutureKnock.account_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->account_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.OneFutureKnock)
  return target;
}

size_t OneFutureKnock::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autotrade.OneFutureKnock)
  size_t total_size = 0;

  if (has_code()) {
    // required string code = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_order_group()) {
    // required string order_group = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_group());
  }

  if (has_stamp()) {
    // required uint64 stamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->stamp());
  }

  if (has_order_price()) {
    // required int64 order_price = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->order_price());
  }

  if (has_match_price()) {
    // required int64 match_price = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->match_price());
  }

  if (has_order_qty()) {
    // required uint64 order_qty = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->order_qty());
  }

  if (has_match_qty()) {
    // required uint64 match_qty = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->match_qty());
  }

  return total_size;
}
size_t OneFutureKnock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.OneFutureKnock)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000003e3) ^ 0x000003e3) == 0) {  // All required fields are present.
    // required string code = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required string order_group = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_group());

    // required uint64 stamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->stamp());

    // required int64 order_price = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->order_price());

    // required int64 match_price = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->match_price());

    // required uint64 order_qty = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->order_qty());

    // required uint64 match_qty = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->match_qty());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 28u) {
    // optional string order_no = 5;
    if (has_order_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_no());
    }

    // optional string match_id = 6;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->match_id());
    }

    // optional string account_name = 13;
    if (has_account_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name());
    }

  }
  if (_has_bits_[8 / 32] & 7168u) {
    // optional double match_amt = 11;
    if (has_match_amt()) {
      total_size += 1 + 8;
    }

    // optional uint32 bsflag = 12;
    if (has_bsflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bsflag());
    }

    // optional int32 funcid = 1 [default = 12003002];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OneFutureKnock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.OneFutureKnock)
  GOOGLE_DCHECK_NE(&from, this);
  const OneFutureKnock* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OneFutureKnock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.OneFutureKnock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.OneFutureKnock)
    MergeFrom(*source);
  }
}

void OneFutureKnock::MergeFrom(const OneFutureKnock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.OneFutureKnock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_order_group();
      order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_order_no();
      order_no_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_no_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_match_id();
      match_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_account_name();
      account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
    }
    if (cached_has_bits & 0x00000020u) {
      stamp_ = from.stamp_;
    }
    if (cached_has_bits & 0x00000040u) {
      order_price_ = from.order_price_;
    }
    if (cached_has_bits & 0x00000080u) {
      match_price_ = from.match_price_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      order_qty_ = from.order_qty_;
    }
    if (cached_has_bits & 0x00000200u) {
      match_qty_ = from.match_qty_;
    }
    if (cached_has_bits & 0x00000400u) {
      match_amt_ = from.match_amt_;
    }
    if (cached_has_bits & 0x00000800u) {
      bsflag_ = from.bsflag_;
    }
    if (cached_has_bits & 0x00001000u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OneFutureKnock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.OneFutureKnock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneFutureKnock::CopyFrom(const OneFutureKnock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.OneFutureKnock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneFutureKnock::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003e3) != 0x000003e3) return false;
  return true;
}

void OneFutureKnock::Swap(OneFutureKnock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OneFutureKnock::InternalSwap(OneFutureKnock* other) {
  using std::swap;
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_group_.Swap(&other->order_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_no_.Swap(&other->order_no_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  match_id_.Swap(&other->match_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_name_.Swap(&other->account_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(stamp_, other->stamp_);
  swap(order_price_, other->order_price_);
  swap(match_price_, other->match_price_);
  swap(order_qty_, other->order_qty_);
  swap(match_qty_, other->match_qty_);
  swap(match_amt_, other->match_amt_);
  swap(bsflag_, other->bsflag_);
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OneFutureKnock::GetMetadata() const {
  protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SumFutureKnock::InitAsDefaultInstance() {
}
::google::protobuf::internal::ExplicitlyConstructed<::std::string> SumFutureKnock::_i_give_permission_to_break_this_code_default_type_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SumFutureKnock::kFuncidFieldNumber;
const int SumFutureKnock::kStampFieldNumber;
const int SumFutureKnock::kTypeFieldNumber;
const int SumFutureKnock::kOrderGroupFieldNumber;
const int SumFutureKnock::kOrderQtyFieldNumber;
const int SumFutureKnock::kMatchQtyFieldNumber;
const int SumFutureKnock::kMatchAmtFieldNumber;
const int SumFutureKnock::kCancelQtyFieldNumber;
const int SumFutureKnock::kFinishedFieldNumber;
const int SumFutureKnock::kOrderIdFieldNumber;
const int SumFutureKnock::kOneKnocksFieldNumber;
const int SumFutureKnock::kAccountNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SumFutureKnock::SumFutureKnock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_SumFutureKnock.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.SumFutureKnock)
}
SumFutureKnock::SumFutureKnock(const SumFutureKnock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      one_knocks_(from.one_knocks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::autotrade::SumFutureKnock::_i_give_permission_to_break_this_code_default_type_.get());
  if (from.has_type()) {
    type_.AssignWithDefault(&::autotrade::SumFutureKnock::_i_give_permission_to_break_this_code_default_type_.get(), from.type_);
  }
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_group()) {
    order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
  }
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_id()) {
    order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
  }
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account_name()) {
    account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
  }
  ::memcpy(&stamp_, &from.stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&funcid_) -
    reinterpret_cast<char*>(&stamp_)) + sizeof(funcid_));
  // @@protoc_insertion_point(copy_constructor:autotrade.SumFutureKnock)
}

void SumFutureKnock::SharedCtor() {
  type_.UnsafeSetDefault(&::autotrade::SumFutureKnock::_i_give_permission_to_break_this_code_default_type_.get());
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finished_) -
      reinterpret_cast<char*>(&stamp_)) + sizeof(finished_));
  funcid_ = 12003003;
}

SumFutureKnock::~SumFutureKnock() {
  // @@protoc_insertion_point(destructor:autotrade.SumFutureKnock)
  SharedDtor();
}

void SumFutureKnock::SharedDtor() {
  type_.DestroyNoArena(&::autotrade::SumFutureKnock::_i_give_permission_to_break_this_code_default_type_.get());
  order_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SumFutureKnock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SumFutureKnock::descriptor() {
  ::protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SumFutureKnock& SumFutureKnock::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_SumFutureKnock.base);
  return *internal_default_instance();
}


void SumFutureKnock::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.SumFutureKnock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  one_knocks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      type_.UnsafeMutablePointer()->assign(*&::autotrade::SumFutureKnock::_i_give_permission_to_break_this_code_default_type_.get());
    }
    if (cached_has_bits & 0x00000002u) {
      order_group_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      order_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      account_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&stamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_amt_) -
        reinterpret_cast<char*>(&stamp_)) + sizeof(match_amt_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&cancel_qty_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&finished_) -
        reinterpret_cast<char*>(&cancel_qty_)) + sizeof(finished_));
    funcid_ = 12003003;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SumFutureKnock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.SumFutureKnock)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 12003003];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 stamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_stamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string type = 3 [default = "F"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.SumFutureKnock.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string order_group = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_group().data(), static_cast<int>(this->order_group().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.SumFutureKnock.order_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 order_qty = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_order_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &order_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 match_qty = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_match_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double match_amt = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_match_amt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &match_amt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 cancel_qty = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_cancel_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cancel_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool finished = 9 [default = false];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_finished();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finished_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string order_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_id().data(), static_cast<int>(this->order_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.SumFutureKnock.order_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autotrade.OneFutureKnock one_knocks = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_one_knocks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string account_name = 12 [default = ""];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account_name().data(), static_cast<int>(this->account_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.SumFutureKnock.account_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.SumFutureKnock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.SumFutureKnock)
  return false;
#undef DO_
}

void SumFutureKnock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.SumFutureKnock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12003003];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // required uint64 stamp = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->stamp(), output);
  }

  // optional string type = 3 [default = "F"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.SumFutureKnock.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type(), output);
  }

  // required string order_group = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.SumFutureKnock.order_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->order_group(), output);
  }

  // required uint64 order_qty = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->order_qty(), output);
  }

  // required uint64 match_qty = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->match_qty(), output);
  }

  // optional double match_amt = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->match_amt(), output);
  }

  // required uint64 cancel_qty = 8 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->cancel_qty(), output);
  }

  // required bool finished = 9 [default = false];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->finished(), output);
  }

  // required string order_id = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.SumFutureKnock.order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->order_id(), output);
  }

  // repeated .autotrade.OneFutureKnock one_knocks = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->one_knocks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->one_knocks(static_cast<int>(i)),
      output);
  }

  // optional string account_name = 12 [default = ""];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.SumFutureKnock.account_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->account_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.SumFutureKnock)
}

::google::protobuf::uint8* SumFutureKnock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.SumFutureKnock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12003003];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // required uint64 stamp = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->stamp(), target);
  }

  // optional string type = 3 [default = "F"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.SumFutureKnock.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }

  // required string order_group = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.SumFutureKnock.order_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->order_group(), target);
  }

  // required uint64 order_qty = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->order_qty(), target);
  }

  // required uint64 match_qty = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->match_qty(), target);
  }

  // optional double match_amt = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->match_amt(), target);
  }

  // required uint64 cancel_qty = 8 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->cancel_qty(), target);
  }

  // required bool finished = 9 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->finished(), target);
  }

  // required string order_id = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.SumFutureKnock.order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->order_id(), target);
  }

  // repeated .autotrade.OneFutureKnock one_knocks = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->one_knocks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->one_knocks(static_cast<int>(i)), deterministic, target);
  }

  // optional string account_name = 12 [default = ""];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.SumFutureKnock.account_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->account_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.SumFutureKnock)
  return target;
}

size_t SumFutureKnock::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autotrade.SumFutureKnock)
  size_t total_size = 0;

  if (has_order_group()) {
    // required string order_group = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_group());
  }

  if (has_order_id()) {
    // required string order_id = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_id());
  }

  if (has_stamp()) {
    // required uint64 stamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->stamp());
  }

  if (has_order_qty()) {
    // required uint64 order_qty = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->order_qty());
  }

  if (has_match_qty()) {
    // required uint64 match_qty = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->match_qty());
  }

  if (has_cancel_qty()) {
    // required uint64 cancel_qty = 8 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cancel_qty());
  }

  if (has_finished()) {
    // required bool finished = 9 [default = false];
    total_size += 1 + 1;
  }

  return total_size;
}
size_t SumFutureKnock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.SumFutureKnock)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000376) ^ 0x00000376) == 0) {  // All required fields are present.
    // required string order_group = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_group());

    // required string order_id = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_id());

    // required uint64 stamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->stamp());

    // required uint64 order_qty = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->order_qty());

    // required uint64 match_qty = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->match_qty());

    // required uint64 cancel_qty = 8 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cancel_qty());

    // required bool finished = 9 [default = false];
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .autotrade.OneFutureKnock one_knocks = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->one_knocks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->one_knocks(static_cast<int>(i)));
    }
  }

  // optional string type = 3 [default = "F"];
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // optional string account_name = 12 [default = ""];
  if (has_account_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account_name());
  }

  // optional double match_amt = 7;
  if (has_match_amt()) {
    total_size += 1 + 8;
  }

  // optional int32 funcid = 1 [default = 12003003];
  if (has_funcid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->funcid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SumFutureKnock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.SumFutureKnock)
  GOOGLE_DCHECK_NE(&from, this);
  const SumFutureKnock* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SumFutureKnock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.SumFutureKnock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.SumFutureKnock)
    MergeFrom(*source);
  }
}

void SumFutureKnock::MergeFrom(const SumFutureKnock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.SumFutureKnock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  one_knocks_.MergeFrom(from.one_knocks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_type();
      type_.AssignWithDefault(&::autotrade::SumFutureKnock::_i_give_permission_to_break_this_code_default_type_.get(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_order_group();
      order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_order_id();
      order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_account_name();
      account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
    }
    if (cached_has_bits & 0x00000010u) {
      stamp_ = from.stamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      order_qty_ = from.order_qty_;
    }
    if (cached_has_bits & 0x00000040u) {
      match_qty_ = from.match_qty_;
    }
    if (cached_has_bits & 0x00000080u) {
      match_amt_ = from.match_amt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      cancel_qty_ = from.cancel_qty_;
    }
    if (cached_has_bits & 0x00000200u) {
      finished_ = from.finished_;
    }
    if (cached_has_bits & 0x00000400u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SumFutureKnock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.SumFutureKnock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SumFutureKnock::CopyFrom(const SumFutureKnock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.SumFutureKnock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SumFutureKnock::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000376) != 0x00000376) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->one_knocks())) return false;
  return true;
}

void SumFutureKnock::Swap(SumFutureKnock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SumFutureKnock::InternalSwap(SumFutureKnock* other) {
  using std::swap;
  CastToBase(&one_knocks_)->InternalSwap(CastToBase(&other->one_knocks_));
  type_.Swap(&other->type_, &::autotrade::SumFutureKnock::_i_give_permission_to_break_this_code_default_type_.get(),
    GetArenaNoVirtual());
  order_group_.Swap(&other->order_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_id_.Swap(&other->order_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_name_.Swap(&other->account_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(stamp_, other->stamp_);
  swap(order_qty_, other->order_qty_);
  swap(match_qty_, other->match_qty_);
  swap(match_amt_, other->match_amt_);
  swap(cancel_qty_, other->cancel_qty_);
  swap(finished_, other->finished_);
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SumFutureKnock::GetMetadata() const {
  protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FutureQuerySettlementReqt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FutureQuerySettlementReqt::kFuncidFieldNumber;
const int FutureQuerySettlementReqt::kBrokerIdFieldNumber;
const int FutureQuerySettlementReqt::kFutureAccountFieldNumber;
const int FutureQuerySettlementReqt::kRequestIdFieldNumber;
const int FutureQuerySettlementReqt::kTradingDayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FutureQuerySettlementReqt::FutureQuerySettlementReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureQuerySettlementReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.FutureQuerySettlementReqt)
}
FutureQuerySettlementReqt::FutureQuerySettlementReqt(const FutureQuerySettlementReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_broker_id()) {
    broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
  }
  future_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_future_account()) {
    future_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.future_account_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  trading_day_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trading_day()) {
    trading_day_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trading_day_);
  }
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:autotrade.FutureQuerySettlementReqt)
}

void FutureQuerySettlementReqt::SharedCtor() {
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  future_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trading_day_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  funcid_ = 12002006;
}

FutureQuerySettlementReqt::~FutureQuerySettlementReqt() {
  // @@protoc_insertion_point(destructor:autotrade.FutureQuerySettlementReqt)
  SharedDtor();
}

void FutureQuerySettlementReqt::SharedDtor() {
  broker_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  future_account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trading_day_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FutureQuerySettlementReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FutureQuerySettlementReqt::descriptor() {
  ::protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FutureQuerySettlementReqt& FutureQuerySettlementReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureQuerySettlementReqt.base);
  return *internal_default_instance();
}


void FutureQuerySettlementReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.FutureQuerySettlementReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      broker_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      future_account_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      trading_day_.ClearNonDefaultToEmptyNoArena();
    }
    funcid_ = 12002006;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FutureQuerySettlementReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.FutureQuerySettlementReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 12002006];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string broker_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_broker_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->broker_id().data(), static_cast<int>(this->broker_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureQuerySettlementReqt.broker_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string future_account = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_future_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->future_account().data(), static_cast<int>(this->future_account().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureQuerySettlementReqt.future_account");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureQuerySettlementReqt.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string trading_day = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trading_day()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trading_day().data(), static_cast<int>(this->trading_day().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureQuerySettlementReqt.trading_day");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.FutureQuerySettlementReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.FutureQuerySettlementReqt)
  return false;
#undef DO_
}

void FutureQuerySettlementReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.FutureQuerySettlementReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12002006];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional string broker_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQuerySettlementReqt.broker_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->broker_id(), output);
  }

  // optional string future_account = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->future_account().data(), static_cast<int>(this->future_account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQuerySettlementReqt.future_account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->future_account(), output);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQuerySettlementReqt.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->request_id(), output);
  }

  // optional string trading_day = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trading_day().data(), static_cast<int>(this->trading_day().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQuerySettlementReqt.trading_day");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->trading_day(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.FutureQuerySettlementReqt)
}

::google::protobuf::uint8* FutureQuerySettlementReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.FutureQuerySettlementReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12002006];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional string broker_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQuerySettlementReqt.broker_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->broker_id(), target);
  }

  // optional string future_account = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->future_account().data(), static_cast<int>(this->future_account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQuerySettlementReqt.future_account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->future_account(), target);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQuerySettlementReqt.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->request_id(), target);
  }

  // optional string trading_day = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trading_day().data(), static_cast<int>(this->trading_day().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQuerySettlementReqt.trading_day");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->trading_day(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.FutureQuerySettlementReqt)
  return target;
}

size_t FutureQuerySettlementReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.FutureQuerySettlementReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string broker_id = 2;
    if (has_broker_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->broker_id());
    }

    // optional string future_account = 3;
    if (has_future_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->future_account());
    }

    // optional string request_id = 4;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional string trading_day = 5;
    if (has_trading_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trading_day());
    }

    // optional int32 funcid = 1 [default = 12002006];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FutureQuerySettlementReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.FutureQuerySettlementReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const FutureQuerySettlementReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FutureQuerySettlementReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.FutureQuerySettlementReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.FutureQuerySettlementReqt)
    MergeFrom(*source);
  }
}

void FutureQuerySettlementReqt::MergeFrom(const FutureQuerySettlementReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.FutureQuerySettlementReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_broker_id();
      broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_future_account();
      future_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.future_account_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_trading_day();
      trading_day_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trading_day_);
    }
    if (cached_has_bits & 0x00000010u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FutureQuerySettlementReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.FutureQuerySettlementReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureQuerySettlementReqt::CopyFrom(const FutureQuerySettlementReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.FutureQuerySettlementReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureQuerySettlementReqt::IsInitialized() const {
  return true;
}

void FutureQuerySettlementReqt::Swap(FutureQuerySettlementReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FutureQuerySettlementReqt::InternalSwap(FutureQuerySettlementReqt* other) {
  using std::swap;
  broker_id_.Swap(&other->broker_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  future_account_.Swap(&other->future_account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trading_day_.Swap(&other->trading_day_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FutureQuerySettlementReqt::GetMetadata() const {
  protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FutureQuerySettlementResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FutureQuerySettlementResp::kFuncidFieldNumber;
const int FutureQuerySettlementResp::kBrokerIdFieldNumber;
const int FutureQuerySettlementResp::kFutureAccountFieldNumber;
const int FutureQuerySettlementResp::kRequestIdFieldNumber;
const int FutureQuerySettlementResp::kTradingDayFieldNumber;
const int FutureQuerySettlementResp::kSequenceNoFieldNumber;
const int FutureQuerySettlementResp::kSettlementIdFieldNumber;
const int FutureQuerySettlementResp::kSettlementContentFieldNumber;
const int FutureQuerySettlementResp::kRetCodeFieldNumber;
const int FutureQuerySettlementResp::kRetMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FutureQuerySettlementResp::FutureQuerySettlementResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureQuerySettlementResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.FutureQuerySettlementResp)
}
FutureQuerySettlementResp::FutureQuerySettlementResp(const FutureQuerySettlementResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_broker_id()) {
    broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
  }
  future_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_future_account()) {
    future_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.future_account_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  trading_day_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trading_day()) {
    trading_day_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trading_day_);
  }
  settlement_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_settlement_content()) {
    settlement_content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.settlement_content_);
  }
  ret_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ret_message()) {
    ret_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_message_);
  }
  ::memcpy(&sequence_no_, &from.sequence_no_,
    static_cast<size_t>(reinterpret_cast<char*>(&funcid_) -
    reinterpret_cast<char*>(&sequence_no_)) + sizeof(funcid_));
  // @@protoc_insertion_point(copy_constructor:autotrade.FutureQuerySettlementResp)
}

void FutureQuerySettlementResp::SharedCtor() {
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  future_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trading_day_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  settlement_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sequence_no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_code_) -
      reinterpret_cast<char*>(&sequence_no_)) + sizeof(ret_code_));
  funcid_ = 12102006;
}

FutureQuerySettlementResp::~FutureQuerySettlementResp() {
  // @@protoc_insertion_point(destructor:autotrade.FutureQuerySettlementResp)
  SharedDtor();
}

void FutureQuerySettlementResp::SharedDtor() {
  broker_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  future_account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trading_day_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  settlement_content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FutureQuerySettlementResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FutureQuerySettlementResp::descriptor() {
  ::protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FutureQuerySettlementResp& FutureQuerySettlementResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureQuerySettlementResp.base);
  return *internal_default_instance();
}


void FutureQuerySettlementResp::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.FutureQuerySettlementResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      broker_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      future_account_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      trading_day_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      settlement_content_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      ret_message_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&sequence_no_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&settlement_id_) -
        reinterpret_cast<char*>(&sequence_no_)) + sizeof(settlement_id_));
  }
  if (cached_has_bits & 768u) {
    ret_code_ = 0;
    funcid_ = 12102006;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FutureQuerySettlementResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.FutureQuerySettlementResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 12102006];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string broker_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_broker_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->broker_id().data(), static_cast<int>(this->broker_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureQuerySettlementResp.broker_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string future_account = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_future_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->future_account().data(), static_cast<int>(this->future_account().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureQuerySettlementResp.future_account");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureQuerySettlementResp.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string trading_day = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trading_day()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trading_day().data(), static_cast<int>(this->trading_day().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureQuerySettlementResp.trading_day");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sequence_no = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_sequence_no();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_no_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 settlement_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_settlement_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &settlement_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string settlement_content = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_settlement_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->settlement_content().data(), static_cast<int>(this->settlement_content().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureQuerySettlementResp.settlement_content");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ret_code = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_ret_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ret_message = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ret_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ret_message().data(), static_cast<int>(this->ret_message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureQuerySettlementResp.ret_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.FutureQuerySettlementResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.FutureQuerySettlementResp)
  return false;
#undef DO_
}

void FutureQuerySettlementResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.FutureQuerySettlementResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12102006];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional string broker_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQuerySettlementResp.broker_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->broker_id(), output);
  }

  // optional string future_account = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->future_account().data(), static_cast<int>(this->future_account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQuerySettlementResp.future_account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->future_account(), output);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQuerySettlementResp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->request_id(), output);
  }

  // optional string trading_day = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trading_day().data(), static_cast<int>(this->trading_day().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQuerySettlementResp.trading_day");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->trading_day(), output);
  }

  // optional int32 sequence_no = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sequence_no(), output);
  }

  // optional int32 settlement_id = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->settlement_id(), output);
  }

  // optional string settlement_content = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->settlement_content().data(), static_cast<int>(this->settlement_content().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQuerySettlementResp.settlement_content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->settlement_content(), output);
  }

  // required int32 ret_code = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->ret_code(), output);
  }

  // optional string ret_message = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_message().data(), static_cast<int>(this->ret_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQuerySettlementResp.ret_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->ret_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.FutureQuerySettlementResp)
}

::google::protobuf::uint8* FutureQuerySettlementResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.FutureQuerySettlementResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12102006];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional string broker_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQuerySettlementResp.broker_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->broker_id(), target);
  }

  // optional string future_account = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->future_account().data(), static_cast<int>(this->future_account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQuerySettlementResp.future_account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->future_account(), target);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQuerySettlementResp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->request_id(), target);
  }

  // optional string trading_day = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trading_day().data(), static_cast<int>(this->trading_day().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQuerySettlementResp.trading_day");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->trading_day(), target);
  }

  // optional int32 sequence_no = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sequence_no(), target);
  }

  // optional int32 settlement_id = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->settlement_id(), target);
  }

  // optional string settlement_content = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->settlement_content().data(), static_cast<int>(this->settlement_content().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQuerySettlementResp.settlement_content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->settlement_content(), target);
  }

  // required int32 ret_code = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->ret_code(), target);
  }

  // optional string ret_message = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_message().data(), static_cast<int>(this->ret_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQuerySettlementResp.ret_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->ret_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.FutureQuerySettlementResp)
  return target;
}

size_t FutureQuerySettlementResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.FutureQuerySettlementResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 ret_code = 9;
  if (has_ret_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret_code());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string broker_id = 2;
    if (has_broker_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->broker_id());
    }

    // optional string future_account = 3;
    if (has_future_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->future_account());
    }

    // optional string request_id = 4;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional string trading_day = 5;
    if (has_trading_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trading_day());
    }

    // optional string settlement_content = 8;
    if (has_settlement_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->settlement_content());
    }

    // optional string ret_message = 10;
    if (has_ret_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ret_message());
    }

    // optional int32 sequence_no = 6;
    if (has_sequence_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sequence_no());
    }

    // optional int32 settlement_id = 7;
    if (has_settlement_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->settlement_id());
    }

  }
  // optional int32 funcid = 1 [default = 12102006];
  if (has_funcid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->funcid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FutureQuerySettlementResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.FutureQuerySettlementResp)
  GOOGLE_DCHECK_NE(&from, this);
  const FutureQuerySettlementResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FutureQuerySettlementResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.FutureQuerySettlementResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.FutureQuerySettlementResp)
    MergeFrom(*source);
  }
}

void FutureQuerySettlementResp::MergeFrom(const FutureQuerySettlementResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.FutureQuerySettlementResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_broker_id();
      broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_future_account();
      future_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.future_account_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_trading_day();
      trading_day_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trading_day_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_settlement_content();
      settlement_content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.settlement_content_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_ret_message();
      ret_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_message_);
    }
    if (cached_has_bits & 0x00000040u) {
      sequence_no_ = from.sequence_no_;
    }
    if (cached_has_bits & 0x00000080u) {
      settlement_id_ = from.settlement_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      ret_code_ = from.ret_code_;
    }
    if (cached_has_bits & 0x00000200u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FutureQuerySettlementResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.FutureQuerySettlementResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureQuerySettlementResp::CopyFrom(const FutureQuerySettlementResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.FutureQuerySettlementResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureQuerySettlementResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000100) != 0x00000100) return false;
  return true;
}

void FutureQuerySettlementResp::Swap(FutureQuerySettlementResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FutureQuerySettlementResp::InternalSwap(FutureQuerySettlementResp* other) {
  using std::swap;
  broker_id_.Swap(&other->broker_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  future_account_.Swap(&other->future_account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trading_day_.Swap(&other->trading_day_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  settlement_content_.Swap(&other->settlement_content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ret_message_.Swap(&other->ret_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sequence_no_, other->sequence_no_);
  swap(settlement_id_, other->settlement_id_);
  swap(ret_code_, other->ret_code_);
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FutureQuerySettlementResp::GetMetadata() const {
  protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FutureConfirmSettlementReqt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FutureConfirmSettlementReqt::kFuncidFieldNumber;
const int FutureConfirmSettlementReqt::kBrokerIdFieldNumber;
const int FutureConfirmSettlementReqt::kFutureAccountFieldNumber;
const int FutureConfirmSettlementReqt::kRequestIdFieldNumber;
const int FutureConfirmSettlementReqt::kConfirmDateFieldNumber;
const int FutureConfirmSettlementReqt::kConfirmTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FutureConfirmSettlementReqt::FutureConfirmSettlementReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureConfirmSettlementReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.FutureConfirmSettlementReqt)
}
FutureConfirmSettlementReqt::FutureConfirmSettlementReqt(const FutureConfirmSettlementReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_broker_id()) {
    broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
  }
  future_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_future_account()) {
    future_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.future_account_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  confirm_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_confirm_date()) {
    confirm_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.confirm_date_);
  }
  confirm_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_confirm_time()) {
    confirm_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.confirm_time_);
  }
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:autotrade.FutureConfirmSettlementReqt)
}

void FutureConfirmSettlementReqt::SharedCtor() {
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  future_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confirm_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confirm_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  funcid_ = 12102007;
}

FutureConfirmSettlementReqt::~FutureConfirmSettlementReqt() {
  // @@protoc_insertion_point(destructor:autotrade.FutureConfirmSettlementReqt)
  SharedDtor();
}

void FutureConfirmSettlementReqt::SharedDtor() {
  broker_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  future_account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confirm_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confirm_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FutureConfirmSettlementReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FutureConfirmSettlementReqt::descriptor() {
  ::protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FutureConfirmSettlementReqt& FutureConfirmSettlementReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureConfirmSettlementReqt.base);
  return *internal_default_instance();
}


void FutureConfirmSettlementReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.FutureConfirmSettlementReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      broker_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      future_account_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      confirm_date_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      confirm_time_.ClearNonDefaultToEmptyNoArena();
    }
    funcid_ = 12102007;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FutureConfirmSettlementReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.FutureConfirmSettlementReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 12102007];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string broker_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_broker_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->broker_id().data(), static_cast<int>(this->broker_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureConfirmSettlementReqt.broker_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string future_account = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_future_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->future_account().data(), static_cast<int>(this->future_account().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureConfirmSettlementReqt.future_account");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureConfirmSettlementReqt.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string confirm_date = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_confirm_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->confirm_date().data(), static_cast<int>(this->confirm_date().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureConfirmSettlementReqt.confirm_date");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string confirm_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_confirm_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->confirm_time().data(), static_cast<int>(this->confirm_time().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureConfirmSettlementReqt.confirm_time");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.FutureConfirmSettlementReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.FutureConfirmSettlementReqt)
  return false;
#undef DO_
}

void FutureConfirmSettlementReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.FutureConfirmSettlementReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12102007];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional string broker_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureConfirmSettlementReqt.broker_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->broker_id(), output);
  }

  // optional string future_account = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->future_account().data(), static_cast<int>(this->future_account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureConfirmSettlementReqt.future_account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->future_account(), output);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureConfirmSettlementReqt.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->request_id(), output);
  }

  // optional string confirm_date = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->confirm_date().data(), static_cast<int>(this->confirm_date().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureConfirmSettlementReqt.confirm_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->confirm_date(), output);
  }

  // optional string confirm_time = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->confirm_time().data(), static_cast<int>(this->confirm_time().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureConfirmSettlementReqt.confirm_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->confirm_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.FutureConfirmSettlementReqt)
}

::google::protobuf::uint8* FutureConfirmSettlementReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.FutureConfirmSettlementReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12102007];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional string broker_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureConfirmSettlementReqt.broker_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->broker_id(), target);
  }

  // optional string future_account = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->future_account().data(), static_cast<int>(this->future_account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureConfirmSettlementReqt.future_account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->future_account(), target);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureConfirmSettlementReqt.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->request_id(), target);
  }

  // optional string confirm_date = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->confirm_date().data(), static_cast<int>(this->confirm_date().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureConfirmSettlementReqt.confirm_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->confirm_date(), target);
  }

  // optional string confirm_time = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->confirm_time().data(), static_cast<int>(this->confirm_time().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureConfirmSettlementReqt.confirm_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->confirm_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.FutureConfirmSettlementReqt)
  return target;
}

size_t FutureConfirmSettlementReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.FutureConfirmSettlementReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string broker_id = 2;
    if (has_broker_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->broker_id());
    }

    // optional string future_account = 3;
    if (has_future_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->future_account());
    }

    // optional string request_id = 4;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional string confirm_date = 5;
    if (has_confirm_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->confirm_date());
    }

    // optional string confirm_time = 6;
    if (has_confirm_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->confirm_time());
    }

    // optional int32 funcid = 1 [default = 12102007];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FutureConfirmSettlementReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.FutureConfirmSettlementReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const FutureConfirmSettlementReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FutureConfirmSettlementReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.FutureConfirmSettlementReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.FutureConfirmSettlementReqt)
    MergeFrom(*source);
  }
}

void FutureConfirmSettlementReqt::MergeFrom(const FutureConfirmSettlementReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.FutureConfirmSettlementReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_broker_id();
      broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_future_account();
      future_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.future_account_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_confirm_date();
      confirm_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.confirm_date_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_confirm_time();
      confirm_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.confirm_time_);
    }
    if (cached_has_bits & 0x00000020u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FutureConfirmSettlementReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.FutureConfirmSettlementReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureConfirmSettlementReqt::CopyFrom(const FutureConfirmSettlementReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.FutureConfirmSettlementReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureConfirmSettlementReqt::IsInitialized() const {
  return true;
}

void FutureConfirmSettlementReqt::Swap(FutureConfirmSettlementReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FutureConfirmSettlementReqt::InternalSwap(FutureConfirmSettlementReqt* other) {
  using std::swap;
  broker_id_.Swap(&other->broker_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  future_account_.Swap(&other->future_account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  confirm_date_.Swap(&other->confirm_date_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  confirm_time_.Swap(&other->confirm_time_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FutureConfirmSettlementReqt::GetMetadata() const {
  protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FutureConfirmSettlementResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FutureConfirmSettlementResp::kFuncidFieldNumber;
const int FutureConfirmSettlementResp::kBrokerIdFieldNumber;
const int FutureConfirmSettlementResp::kFutureAccountFieldNumber;
const int FutureConfirmSettlementResp::kRequestIdFieldNumber;
const int FutureConfirmSettlementResp::kConfirmDateFieldNumber;
const int FutureConfirmSettlementResp::kConfirmTimeFieldNumber;
const int FutureConfirmSettlementResp::kRetCodeFieldNumber;
const int FutureConfirmSettlementResp::kRetMessageFieldNumber;
const int FutureConfirmSettlementResp::kIslastFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FutureConfirmSettlementResp::FutureConfirmSettlementResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureConfirmSettlementResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.FutureConfirmSettlementResp)
}
FutureConfirmSettlementResp::FutureConfirmSettlementResp(const FutureConfirmSettlementResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_broker_id()) {
    broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
  }
  future_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_future_account()) {
    future_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.future_account_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  confirm_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_confirm_date()) {
    confirm_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.confirm_date_);
  }
  confirm_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_confirm_time()) {
    confirm_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.confirm_time_);
  }
  ret_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ret_message()) {
    ret_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_message_);
  }
  ::memcpy(&ret_code_, &from.ret_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&funcid_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(funcid_));
  // @@protoc_insertion_point(copy_constructor:autotrade.FutureConfirmSettlementResp)
}

void FutureConfirmSettlementResp::SharedCtor() {
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  future_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confirm_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confirm_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ret_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&islast_) -
      reinterpret_cast<char*>(&ret_code_)) + sizeof(islast_));
  funcid_ = 12102007;
}

FutureConfirmSettlementResp::~FutureConfirmSettlementResp() {
  // @@protoc_insertion_point(destructor:autotrade.FutureConfirmSettlementResp)
  SharedDtor();
}

void FutureConfirmSettlementResp::SharedDtor() {
  broker_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  future_account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confirm_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confirm_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FutureConfirmSettlementResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FutureConfirmSettlementResp::descriptor() {
  ::protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FutureConfirmSettlementResp& FutureConfirmSettlementResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureConfirmSettlementResp.base);
  return *internal_default_instance();
}


void FutureConfirmSettlementResp::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.FutureConfirmSettlementResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      broker_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      future_account_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      confirm_date_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      confirm_time_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      ret_message_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&ret_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&islast_) -
        reinterpret_cast<char*>(&ret_code_)) + sizeof(islast_));
  }
  funcid_ = 12102007;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FutureConfirmSettlementResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.FutureConfirmSettlementResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 12102007];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string broker_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_broker_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->broker_id().data(), static_cast<int>(this->broker_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureConfirmSettlementResp.broker_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string future_account = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_future_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->future_account().data(), static_cast<int>(this->future_account().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureConfirmSettlementResp.future_account");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureConfirmSettlementResp.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string confirm_date = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_confirm_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->confirm_date().data(), static_cast<int>(this->confirm_date().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureConfirmSettlementResp.confirm_date");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string confirm_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_confirm_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->confirm_time().data(), static_cast<int>(this->confirm_time().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureConfirmSettlementResp.confirm_time");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ret_code = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_ret_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ret_message = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ret_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ret_message().data(), static_cast<int>(this->ret_message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureConfirmSettlementResp.ret_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool islast = 9 [default = false];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_islast();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islast_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.FutureConfirmSettlementResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.FutureConfirmSettlementResp)
  return false;
#undef DO_
}

void FutureConfirmSettlementResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.FutureConfirmSettlementResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12102007];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional string broker_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureConfirmSettlementResp.broker_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->broker_id(), output);
  }

  // optional string future_account = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->future_account().data(), static_cast<int>(this->future_account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureConfirmSettlementResp.future_account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->future_account(), output);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureConfirmSettlementResp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->request_id(), output);
  }

  // optional string confirm_date = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->confirm_date().data(), static_cast<int>(this->confirm_date().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureConfirmSettlementResp.confirm_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->confirm_date(), output);
  }

  // optional string confirm_time = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->confirm_time().data(), static_cast<int>(this->confirm_time().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureConfirmSettlementResp.confirm_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->confirm_time(), output);
  }

  // required int32 ret_code = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ret_code(), output);
  }

  // optional string ret_message = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_message().data(), static_cast<int>(this->ret_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureConfirmSettlementResp.ret_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->ret_message(), output);
  }

  // optional bool islast = 9 [default = false];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->islast(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.FutureConfirmSettlementResp)
}

::google::protobuf::uint8* FutureConfirmSettlementResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.FutureConfirmSettlementResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12102007];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional string broker_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureConfirmSettlementResp.broker_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->broker_id(), target);
  }

  // optional string future_account = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->future_account().data(), static_cast<int>(this->future_account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureConfirmSettlementResp.future_account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->future_account(), target);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureConfirmSettlementResp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->request_id(), target);
  }

  // optional string confirm_date = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->confirm_date().data(), static_cast<int>(this->confirm_date().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureConfirmSettlementResp.confirm_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->confirm_date(), target);
  }

  // optional string confirm_time = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->confirm_time().data(), static_cast<int>(this->confirm_time().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureConfirmSettlementResp.confirm_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->confirm_time(), target);
  }

  // required int32 ret_code = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ret_code(), target);
  }

  // optional string ret_message = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_message().data(), static_cast<int>(this->ret_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureConfirmSettlementResp.ret_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->ret_message(), target);
  }

  // optional bool islast = 9 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->islast(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.FutureConfirmSettlementResp)
  return target;
}

size_t FutureConfirmSettlementResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.FutureConfirmSettlementResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 ret_code = 7;
  if (has_ret_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret_code());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string broker_id = 2;
    if (has_broker_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->broker_id());
    }

    // optional string future_account = 3;
    if (has_future_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->future_account());
    }

    // optional string request_id = 4;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional string confirm_date = 5;
    if (has_confirm_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->confirm_date());
    }

    // optional string confirm_time = 6;
    if (has_confirm_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->confirm_time());
    }

    // optional string ret_message = 8;
    if (has_ret_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ret_message());
    }

  }
  // optional bool islast = 9 [default = false];
  if (has_islast()) {
    total_size += 1 + 1;
  }

  // optional int32 funcid = 1 [default = 12102007];
  if (has_funcid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->funcid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FutureConfirmSettlementResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.FutureConfirmSettlementResp)
  GOOGLE_DCHECK_NE(&from, this);
  const FutureConfirmSettlementResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FutureConfirmSettlementResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.FutureConfirmSettlementResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.FutureConfirmSettlementResp)
    MergeFrom(*source);
  }
}

void FutureConfirmSettlementResp::MergeFrom(const FutureConfirmSettlementResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.FutureConfirmSettlementResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_broker_id();
      broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_future_account();
      future_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.future_account_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_confirm_date();
      confirm_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.confirm_date_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_confirm_time();
      confirm_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.confirm_time_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_ret_message();
      ret_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_message_);
    }
    if (cached_has_bits & 0x00000040u) {
      ret_code_ = from.ret_code_;
    }
    if (cached_has_bits & 0x00000080u) {
      islast_ = from.islast_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_funcid(from.funcid());
  }
}

void FutureConfirmSettlementResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.FutureConfirmSettlementResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureConfirmSettlementResp::CopyFrom(const FutureConfirmSettlementResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.FutureConfirmSettlementResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureConfirmSettlementResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000040) != 0x00000040) return false;
  return true;
}

void FutureConfirmSettlementResp::Swap(FutureConfirmSettlementResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FutureConfirmSettlementResp::InternalSwap(FutureConfirmSettlementResp* other) {
  using std::swap;
  broker_id_.Swap(&other->broker_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  future_account_.Swap(&other->future_account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  confirm_date_.Swap(&other->confirm_date_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  confirm_time_.Swap(&other->confirm_time_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ret_message_.Swap(&other->ret_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ret_code_, other->ret_code_);
  swap(islast_, other->islast_);
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FutureConfirmSettlementResp::GetMetadata() const {
  protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FutureQuerySettlementConfirmReqt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FutureQuerySettlementConfirmReqt::kFuncidFieldNumber;
const int FutureQuerySettlementConfirmReqt::kBrokerIdFieldNumber;
const int FutureQuerySettlementConfirmReqt::kFutureAccountFieldNumber;
const int FutureQuerySettlementConfirmReqt::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FutureQuerySettlementConfirmReqt::FutureQuerySettlementConfirmReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureQuerySettlementConfirmReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.FutureQuerySettlementConfirmReqt)
}
FutureQuerySettlementConfirmReqt::FutureQuerySettlementConfirmReqt(const FutureQuerySettlementConfirmReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_broker_id()) {
    broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
  }
  future_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_future_account()) {
    future_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.future_account_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:autotrade.FutureQuerySettlementConfirmReqt)
}

void FutureQuerySettlementConfirmReqt::SharedCtor() {
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  future_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  funcid_ = 12102008;
}

FutureQuerySettlementConfirmReqt::~FutureQuerySettlementConfirmReqt() {
  // @@protoc_insertion_point(destructor:autotrade.FutureQuerySettlementConfirmReqt)
  SharedDtor();
}

void FutureQuerySettlementConfirmReqt::SharedDtor() {
  broker_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  future_account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FutureQuerySettlementConfirmReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FutureQuerySettlementConfirmReqt::descriptor() {
  ::protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FutureQuerySettlementConfirmReqt& FutureQuerySettlementConfirmReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureQuerySettlementConfirmReqt.base);
  return *internal_default_instance();
}


void FutureQuerySettlementConfirmReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.FutureQuerySettlementConfirmReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      broker_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      future_account_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    funcid_ = 12102008;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FutureQuerySettlementConfirmReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.FutureQuerySettlementConfirmReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 12102008];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string broker_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_broker_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->broker_id().data(), static_cast<int>(this->broker_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureQuerySettlementConfirmReqt.broker_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string future_account = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_future_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->future_account().data(), static_cast<int>(this->future_account().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureQuerySettlementConfirmReqt.future_account");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureQuerySettlementConfirmReqt.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.FutureQuerySettlementConfirmReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.FutureQuerySettlementConfirmReqt)
  return false;
#undef DO_
}

void FutureQuerySettlementConfirmReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.FutureQuerySettlementConfirmReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12102008];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional string broker_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQuerySettlementConfirmReqt.broker_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->broker_id(), output);
  }

  // optional string future_account = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->future_account().data(), static_cast<int>(this->future_account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQuerySettlementConfirmReqt.future_account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->future_account(), output);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQuerySettlementConfirmReqt.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.FutureQuerySettlementConfirmReqt)
}

::google::protobuf::uint8* FutureQuerySettlementConfirmReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.FutureQuerySettlementConfirmReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12102008];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional string broker_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQuerySettlementConfirmReqt.broker_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->broker_id(), target);
  }

  // optional string future_account = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->future_account().data(), static_cast<int>(this->future_account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQuerySettlementConfirmReqt.future_account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->future_account(), target);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQuerySettlementConfirmReqt.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.FutureQuerySettlementConfirmReqt)
  return target;
}

size_t FutureQuerySettlementConfirmReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.FutureQuerySettlementConfirmReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string broker_id = 2;
    if (has_broker_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->broker_id());
    }

    // optional string future_account = 3;
    if (has_future_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->future_account());
    }

    // optional string request_id = 4;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional int32 funcid = 1 [default = 12102008];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FutureQuerySettlementConfirmReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.FutureQuerySettlementConfirmReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const FutureQuerySettlementConfirmReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FutureQuerySettlementConfirmReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.FutureQuerySettlementConfirmReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.FutureQuerySettlementConfirmReqt)
    MergeFrom(*source);
  }
}

void FutureQuerySettlementConfirmReqt::MergeFrom(const FutureQuerySettlementConfirmReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.FutureQuerySettlementConfirmReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_broker_id();
      broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_future_account();
      future_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.future_account_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FutureQuerySettlementConfirmReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.FutureQuerySettlementConfirmReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureQuerySettlementConfirmReqt::CopyFrom(const FutureQuerySettlementConfirmReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.FutureQuerySettlementConfirmReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureQuerySettlementConfirmReqt::IsInitialized() const {
  return true;
}

void FutureQuerySettlementConfirmReqt::Swap(FutureQuerySettlementConfirmReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FutureQuerySettlementConfirmReqt::InternalSwap(FutureQuerySettlementConfirmReqt* other) {
  using std::swap;
  broker_id_.Swap(&other->broker_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  future_account_.Swap(&other->future_account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FutureQuerySettlementConfirmReqt::GetMetadata() const {
  protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FutureQuerySettlementConfirmResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FutureQuerySettlementConfirmResp::kFuncidFieldNumber;
const int FutureQuerySettlementConfirmResp::kBrokerIdFieldNumber;
const int FutureQuerySettlementConfirmResp::kFutureAccountFieldNumber;
const int FutureQuerySettlementConfirmResp::kRequestIdFieldNumber;
const int FutureQuerySettlementConfirmResp::kConfirmDateFieldNumber;
const int FutureQuerySettlementConfirmResp::kConfirmTimeFieldNumber;
const int FutureQuerySettlementConfirmResp::kRetCodeFieldNumber;
const int FutureQuerySettlementConfirmResp::kRetMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FutureQuerySettlementConfirmResp::FutureQuerySettlementConfirmResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureQuerySettlementConfirmResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.FutureQuerySettlementConfirmResp)
}
FutureQuerySettlementConfirmResp::FutureQuerySettlementConfirmResp(const FutureQuerySettlementConfirmResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_broker_id()) {
    broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
  }
  future_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_future_account()) {
    future_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.future_account_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  confirm_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_confirm_date()) {
    confirm_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.confirm_date_);
  }
  confirm_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_confirm_time()) {
    confirm_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.confirm_time_);
  }
  ret_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ret_message()) {
    ret_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_message_);
  }
  ::memcpy(&ret_code_, &from.ret_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&funcid_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(funcid_));
  // @@protoc_insertion_point(copy_constructor:autotrade.FutureQuerySettlementConfirmResp)
}

void FutureQuerySettlementConfirmResp::SharedCtor() {
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  future_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confirm_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confirm_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_code_ = 0;
  funcid_ = 12102008;
}

FutureQuerySettlementConfirmResp::~FutureQuerySettlementConfirmResp() {
  // @@protoc_insertion_point(destructor:autotrade.FutureQuerySettlementConfirmResp)
  SharedDtor();
}

void FutureQuerySettlementConfirmResp::SharedDtor() {
  broker_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  future_account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confirm_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confirm_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FutureQuerySettlementConfirmResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FutureQuerySettlementConfirmResp::descriptor() {
  ::protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FutureQuerySettlementConfirmResp& FutureQuerySettlementConfirmResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureQuerySettlementConfirmResp.base);
  return *internal_default_instance();
}


void FutureQuerySettlementConfirmResp::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.FutureQuerySettlementConfirmResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      broker_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      future_account_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      confirm_date_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      confirm_time_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      ret_message_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 192u) {
    ret_code_ = 0;
    funcid_ = 12102008;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FutureQuerySettlementConfirmResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.FutureQuerySettlementConfirmResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 12102008];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string broker_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_broker_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->broker_id().data(), static_cast<int>(this->broker_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureQuerySettlementConfirmResp.broker_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string future_account = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_future_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->future_account().data(), static_cast<int>(this->future_account().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureQuerySettlementConfirmResp.future_account");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureQuerySettlementConfirmResp.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string confirm_date = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_confirm_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->confirm_date().data(), static_cast<int>(this->confirm_date().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureQuerySettlementConfirmResp.confirm_date");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string confirm_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_confirm_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->confirm_time().data(), static_cast<int>(this->confirm_time().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureQuerySettlementConfirmResp.confirm_time");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ret_code = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_ret_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ret_message = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ret_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ret_message().data(), static_cast<int>(this->ret_message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureQuerySettlementConfirmResp.ret_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.FutureQuerySettlementConfirmResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.FutureQuerySettlementConfirmResp)
  return false;
#undef DO_
}

void FutureQuerySettlementConfirmResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.FutureQuerySettlementConfirmResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12102008];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional string broker_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQuerySettlementConfirmResp.broker_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->broker_id(), output);
  }

  // optional string future_account = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->future_account().data(), static_cast<int>(this->future_account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQuerySettlementConfirmResp.future_account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->future_account(), output);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQuerySettlementConfirmResp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->request_id(), output);
  }

  // optional string confirm_date = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->confirm_date().data(), static_cast<int>(this->confirm_date().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQuerySettlementConfirmResp.confirm_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->confirm_date(), output);
  }

  // optional string confirm_time = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->confirm_time().data(), static_cast<int>(this->confirm_time().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQuerySettlementConfirmResp.confirm_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->confirm_time(), output);
  }

  // required int32 ret_code = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ret_code(), output);
  }

  // optional string ret_message = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_message().data(), static_cast<int>(this->ret_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQuerySettlementConfirmResp.ret_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->ret_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.FutureQuerySettlementConfirmResp)
}

::google::protobuf::uint8* FutureQuerySettlementConfirmResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.FutureQuerySettlementConfirmResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12102008];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional string broker_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQuerySettlementConfirmResp.broker_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->broker_id(), target);
  }

  // optional string future_account = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->future_account().data(), static_cast<int>(this->future_account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQuerySettlementConfirmResp.future_account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->future_account(), target);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQuerySettlementConfirmResp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->request_id(), target);
  }

  // optional string confirm_date = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->confirm_date().data(), static_cast<int>(this->confirm_date().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQuerySettlementConfirmResp.confirm_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->confirm_date(), target);
  }

  // optional string confirm_time = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->confirm_time().data(), static_cast<int>(this->confirm_time().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQuerySettlementConfirmResp.confirm_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->confirm_time(), target);
  }

  // required int32 ret_code = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ret_code(), target);
  }

  // optional string ret_message = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_message().data(), static_cast<int>(this->ret_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureQuerySettlementConfirmResp.ret_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->ret_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.FutureQuerySettlementConfirmResp)
  return target;
}

size_t FutureQuerySettlementConfirmResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.FutureQuerySettlementConfirmResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 ret_code = 7;
  if (has_ret_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret_code());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string broker_id = 2;
    if (has_broker_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->broker_id());
    }

    // optional string future_account = 3;
    if (has_future_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->future_account());
    }

    // optional string request_id = 4;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional string confirm_date = 5;
    if (has_confirm_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->confirm_date());
    }

    // optional string confirm_time = 6;
    if (has_confirm_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->confirm_time());
    }

    // optional string ret_message = 8;
    if (has_ret_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ret_message());
    }

  }
  // optional int32 funcid = 1 [default = 12102008];
  if (has_funcid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->funcid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FutureQuerySettlementConfirmResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.FutureQuerySettlementConfirmResp)
  GOOGLE_DCHECK_NE(&from, this);
  const FutureQuerySettlementConfirmResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FutureQuerySettlementConfirmResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.FutureQuerySettlementConfirmResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.FutureQuerySettlementConfirmResp)
    MergeFrom(*source);
  }
}

void FutureQuerySettlementConfirmResp::MergeFrom(const FutureQuerySettlementConfirmResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.FutureQuerySettlementConfirmResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_broker_id();
      broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_future_account();
      future_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.future_account_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_confirm_date();
      confirm_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.confirm_date_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_confirm_time();
      confirm_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.confirm_time_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_ret_message();
      ret_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_message_);
    }
    if (cached_has_bits & 0x00000040u) {
      ret_code_ = from.ret_code_;
    }
    if (cached_has_bits & 0x00000080u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FutureQuerySettlementConfirmResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.FutureQuerySettlementConfirmResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureQuerySettlementConfirmResp::CopyFrom(const FutureQuerySettlementConfirmResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.FutureQuerySettlementConfirmResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureQuerySettlementConfirmResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000040) != 0x00000040) return false;
  return true;
}

void FutureQuerySettlementConfirmResp::Swap(FutureQuerySettlementConfirmResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FutureQuerySettlementConfirmResp::InternalSwap(FutureQuerySettlementConfirmResp* other) {
  using std::swap;
  broker_id_.Swap(&other->broker_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  future_account_.Swap(&other->future_account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  confirm_date_.Swap(&other->confirm_date_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  confirm_time_.Swap(&other->confirm_time_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ret_message_.Swap(&other->ret_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ret_code_, other->ret_code_);
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FutureQuerySettlementConfirmResp::GetMetadata() const {
  protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FutureSystemConnected::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FutureSystemConnected::kFuncidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FutureSystemConnected::FutureSystemConnected()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureSystemConnected.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.FutureSystemConnected)
}
FutureSystemConnected::FutureSystemConnected(const FutureSystemConnected& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:autotrade.FutureSystemConnected)
}

void FutureSystemConnected::SharedCtor() {
  funcid_ = 12003004;
}

FutureSystemConnected::~FutureSystemConnected() {
  // @@protoc_insertion_point(destructor:autotrade.FutureSystemConnected)
  SharedDtor();
}

void FutureSystemConnected::SharedDtor() {
}

void FutureSystemConnected::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FutureSystemConnected::descriptor() {
  ::protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FutureSystemConnected& FutureSystemConnected::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureSystemConnected.base);
  return *internal_default_instance();
}


void FutureSystemConnected::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.FutureSystemConnected)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  funcid_ = 12003004;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FutureSystemConnected::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.FutureSystemConnected)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 12003004];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.FutureSystemConnected)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.FutureSystemConnected)
  return false;
#undef DO_
}

void FutureSystemConnected::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.FutureSystemConnected)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12003004];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.FutureSystemConnected)
}

::google::protobuf::uint8* FutureSystemConnected::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.FutureSystemConnected)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12003004];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.FutureSystemConnected)
  return target;
}

size_t FutureSystemConnected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.FutureSystemConnected)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 funcid = 1 [default = 12003004];
  if (has_funcid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->funcid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FutureSystemConnected::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.FutureSystemConnected)
  GOOGLE_DCHECK_NE(&from, this);
  const FutureSystemConnected* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FutureSystemConnected>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.FutureSystemConnected)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.FutureSystemConnected)
    MergeFrom(*source);
  }
}

void FutureSystemConnected::MergeFrom(const FutureSystemConnected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.FutureSystemConnected)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_funcid()) {
    set_funcid(from.funcid());
  }
}

void FutureSystemConnected::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.FutureSystemConnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureSystemConnected::CopyFrom(const FutureSystemConnected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.FutureSystemConnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureSystemConnected::IsInitialized() const {
  return true;
}

void FutureSystemConnected::Swap(FutureSystemConnected* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FutureSystemConnected::InternalSwap(FutureSystemConnected* other) {
  using std::swap;
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FutureSystemConnected::GetMetadata() const {
  protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FutureSystemDisconnected::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FutureSystemDisconnected::kFuncidFieldNumber;
const int FutureSystemDisconnected::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FutureSystemDisconnected::FutureSystemDisconnected()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureSystemDisconnected.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.FutureSystemDisconnected)
}
FutureSystemDisconnected::FutureSystemDisconnected(const FutureSystemDisconnected& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&reason_, &from.reason_,
    static_cast<size_t>(reinterpret_cast<char*>(&funcid_) -
    reinterpret_cast<char*>(&reason_)) + sizeof(funcid_));
  // @@protoc_insertion_point(copy_constructor:autotrade.FutureSystemDisconnected)
}

void FutureSystemDisconnected::SharedCtor() {
  reason_ = 0;
  funcid_ = 12003005;
}

FutureSystemDisconnected::~FutureSystemDisconnected() {
  // @@protoc_insertion_point(destructor:autotrade.FutureSystemDisconnected)
  SharedDtor();
}

void FutureSystemDisconnected::SharedDtor() {
}

void FutureSystemDisconnected::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FutureSystemDisconnected::descriptor() {
  ::protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FutureSystemDisconnected& FutureSystemDisconnected::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureSystemDisconnected.base);
  return *internal_default_instance();
}


void FutureSystemDisconnected::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.FutureSystemDisconnected)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    reason_ = 0;
    funcid_ = 12003005;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FutureSystemDisconnected::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.FutureSystemDisconnected)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 12003005];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 reason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_reason();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.FutureSystemDisconnected)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.FutureSystemDisconnected)
  return false;
#undef DO_
}

void FutureSystemDisconnected::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.FutureSystemDisconnected)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12003005];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // required int32 reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.FutureSystemDisconnected)
}

::google::protobuf::uint8* FutureSystemDisconnected::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.FutureSystemDisconnected)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12003005];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // required int32 reason = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.FutureSystemDisconnected)
  return target;
}

size_t FutureSystemDisconnected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.FutureSystemDisconnected)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 reason = 2;
  if (has_reason()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reason());
  }
  // optional int32 funcid = 1 [default = 12003005];
  if (has_funcid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->funcid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FutureSystemDisconnected::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.FutureSystemDisconnected)
  GOOGLE_DCHECK_NE(&from, this);
  const FutureSystemDisconnected* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FutureSystemDisconnected>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.FutureSystemDisconnected)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.FutureSystemDisconnected)
    MergeFrom(*source);
  }
}

void FutureSystemDisconnected::MergeFrom(const FutureSystemDisconnected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.FutureSystemDisconnected)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      reason_ = from.reason_;
    }
    if (cached_has_bits & 0x00000002u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FutureSystemDisconnected::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.FutureSystemDisconnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureSystemDisconnected::CopyFrom(const FutureSystemDisconnected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.FutureSystemDisconnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureSystemDisconnected::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void FutureSystemDisconnected::Swap(FutureSystemDisconnected* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FutureSystemDisconnected::InternalSwap(FutureSystemDisconnected* other) {
  using std::swap;
  swap(reason_, other->reason_);
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FutureSystemDisconnected::GetMetadata() const {
  protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FutureOrderInsertResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FutureOrderInsertResp::kFuncidFieldNumber;
const int FutureOrderInsertResp::kRetCodeFieldNumber;
const int FutureOrderInsertResp::kRetMessageFieldNumber;
const int FutureOrderInsertResp::kOrderGroupFieldNumber;
const int FutureOrderInsertResp::kCodeFieldNumber;
const int FutureOrderInsertResp::kBsflagFieldNumber;
const int FutureOrderInsertResp::kKpcbjFieldNumber;
const int FutureOrderInsertResp::kHedgeFlagFieldNumber;
const int FutureOrderInsertResp::kAccountNameFieldNumber;
const int FutureOrderInsertResp::kFrontIdFieldNumber;
const int FutureOrderInsertResp::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FutureOrderInsertResp::FutureOrderInsertResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureOrderInsertResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.FutureOrderInsertResp)
}
FutureOrderInsertResp::FutureOrderInsertResp(const FutureOrderInsertResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ret_message()) {
    ret_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_message_);
  }
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_group()) {
    order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
  }
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account_name()) {
    account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
  }
  ::memcpy(&ret_code_, &from.ret_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&funcid_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(funcid_));
  // @@protoc_insertion_point(copy_constructor:autotrade.FutureOrderInsertResp)
}

void FutureOrderInsertResp::SharedCtor() {
  ret_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ret_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_id_) -
      reinterpret_cast<char*>(&ret_code_)) + sizeof(session_id_));
  funcid_ = 12003006;
}

FutureOrderInsertResp::~FutureOrderInsertResp() {
  // @@protoc_insertion_point(destructor:autotrade.FutureOrderInsertResp)
  SharedDtor();
}

void FutureOrderInsertResp::SharedDtor() {
  ret_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FutureOrderInsertResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FutureOrderInsertResp::descriptor() {
  ::protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FutureOrderInsertResp& FutureOrderInsertResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureOrderInsertResp.base);
  return *internal_default_instance();
}


void FutureOrderInsertResp::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.FutureOrderInsertResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      ret_message_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      order_group_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      account_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&ret_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hedge_flag_) -
        reinterpret_cast<char*>(&ret_code_)) + sizeof(hedge_flag_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&front_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&session_id_) -
        reinterpret_cast<char*>(&front_id_)) + sizeof(session_id_));
    funcid_ = 12003006;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FutureOrderInsertResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.FutureOrderInsertResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 12003006];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ret_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ret_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ret_message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ret_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ret_message().data(), static_cast<int>(this->ret_message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureOrderInsertResp.ret_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_group = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_group().data(), static_cast<int>(this->order_group().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureOrderInsertResp.order_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string code = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureOrderInsertResp.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bsflag = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_bsflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bsflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 kpcbj = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_kpcbj();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kpcbj_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hedge_flag = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_hedge_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hedge_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string account_name = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account_name().data(), static_cast<int>(this->account_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureOrderInsertResp.account_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 front_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_front_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &front_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 session_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_session_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.FutureOrderInsertResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.FutureOrderInsertResp)
  return false;
#undef DO_
}

void FutureOrderInsertResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.FutureOrderInsertResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12003006];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // required int32 ret_code = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret_code(), output);
  }

  // optional string ret_message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_message().data(), static_cast<int>(this->ret_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderInsertResp.ret_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ret_message(), output);
  }

  // optional string order_group = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderInsertResp.order_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->order_group(), output);
  }

  // optional string code = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderInsertResp.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->code(), output);
  }

  // optional int32 bsflag = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bsflag(), output);
  }

  // optional int32 kpcbj = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->kpcbj(), output);
  }

  // optional int32 hedge_flag = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->hedge_flag(), output);
  }

  // optional string account_name = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderInsertResp.account_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->account_name(), output);
  }

  // optional int32 front_id = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->front_id(), output);
  }

  // optional int32 session_id = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->session_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.FutureOrderInsertResp)
}

::google::protobuf::uint8* FutureOrderInsertResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.FutureOrderInsertResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12003006];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // required int32 ret_code = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret_code(), target);
  }

  // optional string ret_message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_message().data(), static_cast<int>(this->ret_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderInsertResp.ret_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ret_message(), target);
  }

  // optional string order_group = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderInsertResp.order_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->order_group(), target);
  }

  // optional string code = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderInsertResp.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->code(), target);
  }

  // optional int32 bsflag = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bsflag(), target);
  }

  // optional int32 kpcbj = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->kpcbj(), target);
  }

  // optional int32 hedge_flag = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->hedge_flag(), target);
  }

  // optional string account_name = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderInsertResp.account_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->account_name(), target);
  }

  // optional int32 front_id = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->front_id(), target);
  }

  // optional int32 session_id = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->session_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.FutureOrderInsertResp)
  return target;
}

size_t FutureOrderInsertResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.FutureOrderInsertResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 ret_code = 2;
  if (has_ret_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret_code());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string ret_message = 3;
    if (has_ret_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ret_message());
    }

    // optional string order_group = 4;
    if (has_order_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_group());
    }

    // optional string code = 5;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional string account_name = 9;
    if (has_account_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name());
    }

  }
  if (_has_bits_[0 / 32] & 224u) {
    // optional int32 bsflag = 6;
    if (has_bsflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bsflag());
    }

    // optional int32 kpcbj = 7;
    if (has_kpcbj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kpcbj());
    }

    // optional int32 hedge_flag = 8;
    if (has_hedge_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hedge_flag());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional int32 front_id = 10;
    if (has_front_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->front_id());
    }

    // optional int32 session_id = 11;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session_id());
    }

    // optional int32 funcid = 1 [default = 12003006];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FutureOrderInsertResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.FutureOrderInsertResp)
  GOOGLE_DCHECK_NE(&from, this);
  const FutureOrderInsertResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FutureOrderInsertResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.FutureOrderInsertResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.FutureOrderInsertResp)
    MergeFrom(*source);
  }
}

void FutureOrderInsertResp::MergeFrom(const FutureOrderInsertResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.FutureOrderInsertResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ret_message();
      ret_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_order_group();
      order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_account_name();
      account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
    }
    if (cached_has_bits & 0x00000010u) {
      ret_code_ = from.ret_code_;
    }
    if (cached_has_bits & 0x00000020u) {
      bsflag_ = from.bsflag_;
    }
    if (cached_has_bits & 0x00000040u) {
      kpcbj_ = from.kpcbj_;
    }
    if (cached_has_bits & 0x00000080u) {
      hedge_flag_ = from.hedge_flag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      front_id_ = from.front_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FutureOrderInsertResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.FutureOrderInsertResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureOrderInsertResp::CopyFrom(const FutureOrderInsertResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.FutureOrderInsertResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureOrderInsertResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;
  return true;
}

void FutureOrderInsertResp::Swap(FutureOrderInsertResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FutureOrderInsertResp::InternalSwap(FutureOrderInsertResp* other) {
  using std::swap;
  ret_message_.Swap(&other->ret_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_group_.Swap(&other->order_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_name_.Swap(&other->account_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ret_code_, other->ret_code_);
  swap(bsflag_, other->bsflag_);
  swap(kpcbj_, other->kpcbj_);
  swap(hedge_flag_, other->hedge_flag_);
  swap(front_id_, other->front_id_);
  swap(session_id_, other->session_id_);
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FutureOrderInsertResp::GetMetadata() const {
  protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FutureOrderActionResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FutureOrderActionResp::kFuncidFieldNumber;
const int FutureOrderActionResp::kRetCodeFieldNumber;
const int FutureOrderActionResp::kRetMessageFieldNumber;
const int FutureOrderActionResp::kOrderGroupFieldNumber;
const int FutureOrderActionResp::kCodeFieldNumber;
const int FutureOrderActionResp::kAccountNameFieldNumber;
const int FutureOrderActionResp::kFrontIdFieldNumber;
const int FutureOrderActionResp::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FutureOrderActionResp::FutureOrderActionResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureOrderActionResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.FutureOrderActionResp)
}
FutureOrderActionResp::FutureOrderActionResp(const FutureOrderActionResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ret_message()) {
    ret_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_message_);
  }
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_group()) {
    order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
  }
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account_name()) {
    account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
  }
  ::memcpy(&ret_code_, &from.ret_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&funcid_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(funcid_));
  // @@protoc_insertion_point(copy_constructor:autotrade.FutureOrderActionResp)
}

void FutureOrderActionResp::SharedCtor() {
  ret_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ret_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_id_) -
      reinterpret_cast<char*>(&ret_code_)) + sizeof(session_id_));
  funcid_ = 12003007;
}

FutureOrderActionResp::~FutureOrderActionResp() {
  // @@protoc_insertion_point(destructor:autotrade.FutureOrderActionResp)
  SharedDtor();
}

void FutureOrderActionResp::SharedDtor() {
  ret_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FutureOrderActionResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FutureOrderActionResp::descriptor() {
  ::protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FutureOrderActionResp& FutureOrderActionResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureOrderActionResp.base);
  return *internal_default_instance();
}


void FutureOrderActionResp::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.FutureOrderActionResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      ret_message_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      order_group_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      account_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&ret_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&session_id_) -
        reinterpret_cast<char*>(&ret_code_)) + sizeof(session_id_));
    funcid_ = 12003007;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FutureOrderActionResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.FutureOrderActionResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 12003007];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ret_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ret_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ret_message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ret_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ret_message().data(), static_cast<int>(this->ret_message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureOrderActionResp.ret_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_group = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_group().data(), static_cast<int>(this->order_group().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureOrderActionResp.order_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string code = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureOrderActionResp.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string account_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account_name().data(), static_cast<int>(this->account_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureOrderActionResp.account_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 front_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_front_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &front_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 session_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_session_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.FutureOrderActionResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.FutureOrderActionResp)
  return false;
#undef DO_
}

void FutureOrderActionResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.FutureOrderActionResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12003007];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // required int32 ret_code = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret_code(), output);
  }

  // optional string ret_message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_message().data(), static_cast<int>(this->ret_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderActionResp.ret_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ret_message(), output);
  }

  // optional string order_group = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderActionResp.order_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->order_group(), output);
  }

  // optional string code = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderActionResp.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->code(), output);
  }

  // optional string account_name = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderActionResp.account_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->account_name(), output);
  }

  // optional int32 front_id = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->front_id(), output);
  }

  // optional int32 session_id = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->session_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.FutureOrderActionResp)
}

::google::protobuf::uint8* FutureOrderActionResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.FutureOrderActionResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12003007];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // required int32 ret_code = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret_code(), target);
  }

  // optional string ret_message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_message().data(), static_cast<int>(this->ret_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderActionResp.ret_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ret_message(), target);
  }

  // optional string order_group = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderActionResp.order_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->order_group(), target);
  }

  // optional string code = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderActionResp.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->code(), target);
  }

  // optional string account_name = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureOrderActionResp.account_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->account_name(), target);
  }

  // optional int32 front_id = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->front_id(), target);
  }

  // optional int32 session_id = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->session_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.FutureOrderActionResp)
  return target;
}

size_t FutureOrderActionResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.FutureOrderActionResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 ret_code = 2;
  if (has_ret_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret_code());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string ret_message = 3;
    if (has_ret_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ret_message());
    }

    // optional string order_group = 4;
    if (has_order_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_group());
    }

    // optional string code = 5;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional string account_name = 6;
    if (has_account_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name());
    }

  }
  if (_has_bits_[0 / 32] & 224u) {
    // optional int32 front_id = 7;
    if (has_front_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->front_id());
    }

    // optional int32 session_id = 8;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session_id());
    }

    // optional int32 funcid = 1 [default = 12003007];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FutureOrderActionResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.FutureOrderActionResp)
  GOOGLE_DCHECK_NE(&from, this);
  const FutureOrderActionResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FutureOrderActionResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.FutureOrderActionResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.FutureOrderActionResp)
    MergeFrom(*source);
  }
}

void FutureOrderActionResp::MergeFrom(const FutureOrderActionResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.FutureOrderActionResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ret_message();
      ret_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_order_group();
      order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_account_name();
      account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
    }
    if (cached_has_bits & 0x00000010u) {
      ret_code_ = from.ret_code_;
    }
    if (cached_has_bits & 0x00000020u) {
      front_id_ = from.front_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FutureOrderActionResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.FutureOrderActionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureOrderActionResp::CopyFrom(const FutureOrderActionResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.FutureOrderActionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureOrderActionResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;
  return true;
}

void FutureOrderActionResp::Swap(FutureOrderActionResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FutureOrderActionResp::InternalSwap(FutureOrderActionResp* other) {
  using std::swap;
  ret_message_.Swap(&other->ret_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_group_.Swap(&other->order_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_name_.Swap(&other->account_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ret_code_, other->ret_code_);
  swap(front_id_, other->front_id_);
  swap(session_id_, other->session_id_);
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FutureOrderActionResp::GetMetadata() const {
  protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FutureRtnOrderInsertErr::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FutureRtnOrderInsertErr::kFuncidFieldNumber;
const int FutureRtnOrderInsertErr::kRetCodeFieldNumber;
const int FutureRtnOrderInsertErr::kRetMessageFieldNumber;
const int FutureRtnOrderInsertErr::kOrderGroupFieldNumber;
const int FutureRtnOrderInsertErr::kCodeFieldNumber;
const int FutureRtnOrderInsertErr::kBsflagFieldNumber;
const int FutureRtnOrderInsertErr::kKpcbjFieldNumber;
const int FutureRtnOrderInsertErr::kHedgeFlagFieldNumber;
const int FutureRtnOrderInsertErr::kAccountNameFieldNumber;
const int FutureRtnOrderInsertErr::kFrontIdFieldNumber;
const int FutureRtnOrderInsertErr::kSessionIdFieldNumber;
const int FutureRtnOrderInsertErr::kOrderStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FutureRtnOrderInsertErr::FutureRtnOrderInsertErr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureRtnOrderInsertErr.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.FutureRtnOrderInsertErr)
}
FutureRtnOrderInsertErr::FutureRtnOrderInsertErr(const FutureRtnOrderInsertErr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ret_message()) {
    ret_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_message_);
  }
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_group()) {
    order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
  }
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account_name()) {
    account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
  }
  order_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_status()) {
    order_status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_status_);
  }
  ::memcpy(&ret_code_, &from.ret_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&funcid_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(funcid_));
  // @@protoc_insertion_point(copy_constructor:autotrade.FutureRtnOrderInsertErr)
}

void FutureRtnOrderInsertErr::SharedCtor() {
  ret_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ret_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_id_) -
      reinterpret_cast<char*>(&ret_code_)) + sizeof(session_id_));
  funcid_ = 12003008;
}

FutureRtnOrderInsertErr::~FutureRtnOrderInsertErr() {
  // @@protoc_insertion_point(destructor:autotrade.FutureRtnOrderInsertErr)
  SharedDtor();
}

void FutureRtnOrderInsertErr::SharedDtor() {
  ret_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FutureRtnOrderInsertErr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FutureRtnOrderInsertErr::descriptor() {
  ::protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FutureRtnOrderInsertErr& FutureRtnOrderInsertErr::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureRtnOrderInsertErr.base);
  return *internal_default_instance();
}


void FutureRtnOrderInsertErr::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.FutureRtnOrderInsertErr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      ret_message_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      order_group_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      account_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      order_status_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&ret_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&kpcbj_) -
        reinterpret_cast<char*>(&ret_code_)) + sizeof(kpcbj_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&hedge_flag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&session_id_) -
        reinterpret_cast<char*>(&hedge_flag_)) + sizeof(session_id_));
    funcid_ = 12003008;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FutureRtnOrderInsertErr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.FutureRtnOrderInsertErr)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 12003008];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ret_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ret_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ret_message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ret_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ret_message().data(), static_cast<int>(this->ret_message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureRtnOrderInsertErr.ret_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_group = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_group().data(), static_cast<int>(this->order_group().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureRtnOrderInsertErr.order_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string code = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureRtnOrderInsertErr.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bsflag = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_bsflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bsflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 kpcbj = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_kpcbj();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kpcbj_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hedge_flag = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_hedge_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hedge_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string account_name = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account_name().data(), static_cast<int>(this->account_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureRtnOrderInsertErr.account_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 front_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_front_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &front_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 session_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_session_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_status = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_status().data(), static_cast<int>(this->order_status().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureRtnOrderInsertErr.order_status");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.FutureRtnOrderInsertErr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.FutureRtnOrderInsertErr)
  return false;
#undef DO_
}

void FutureRtnOrderInsertErr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.FutureRtnOrderInsertErr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12003008];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // required int32 ret_code = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret_code(), output);
  }

  // optional string ret_message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_message().data(), static_cast<int>(this->ret_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnOrderInsertErr.ret_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ret_message(), output);
  }

  // optional string order_group = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnOrderInsertErr.order_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->order_group(), output);
  }

  // optional string code = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnOrderInsertErr.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->code(), output);
  }

  // optional int32 bsflag = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bsflag(), output);
  }

  // optional int32 kpcbj = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->kpcbj(), output);
  }

  // optional int32 hedge_flag = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->hedge_flag(), output);
  }

  // optional string account_name = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnOrderInsertErr.account_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->account_name(), output);
  }

  // optional int32 front_id = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->front_id(), output);
  }

  // optional int32 session_id = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->session_id(), output);
  }

  // optional string order_status = 12;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_status().data(), static_cast<int>(this->order_status().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnOrderInsertErr.order_status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->order_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.FutureRtnOrderInsertErr)
}

::google::protobuf::uint8* FutureRtnOrderInsertErr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.FutureRtnOrderInsertErr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12003008];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // required int32 ret_code = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret_code(), target);
  }

  // optional string ret_message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_message().data(), static_cast<int>(this->ret_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnOrderInsertErr.ret_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ret_message(), target);
  }

  // optional string order_group = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnOrderInsertErr.order_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->order_group(), target);
  }

  // optional string code = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnOrderInsertErr.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->code(), target);
  }

  // optional int32 bsflag = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bsflag(), target);
  }

  // optional int32 kpcbj = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->kpcbj(), target);
  }

  // optional int32 hedge_flag = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->hedge_flag(), target);
  }

  // optional string account_name = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnOrderInsertErr.account_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->account_name(), target);
  }

  // optional int32 front_id = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->front_id(), target);
  }

  // optional int32 session_id = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->session_id(), target);
  }

  // optional string order_status = 12;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_status().data(), static_cast<int>(this->order_status().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnOrderInsertErr.order_status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->order_status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.FutureRtnOrderInsertErr)
  return target;
}

size_t FutureRtnOrderInsertErr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.FutureRtnOrderInsertErr)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 ret_code = 2;
  if (has_ret_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret_code());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string ret_message = 3;
    if (has_ret_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ret_message());
    }

    // optional string order_group = 4;
    if (has_order_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_group());
    }

    // optional string code = 5;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional string account_name = 9;
    if (has_account_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name());
    }

    // optional string order_status = 12;
    if (has_order_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_status());
    }

  }
  if (_has_bits_[0 / 32] & 192u) {
    // optional int32 bsflag = 6;
    if (has_bsflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bsflag());
    }

    // optional int32 kpcbj = 7;
    if (has_kpcbj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kpcbj());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional int32 hedge_flag = 8;
    if (has_hedge_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hedge_flag());
    }

    // optional int32 front_id = 10;
    if (has_front_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->front_id());
    }

    // optional int32 session_id = 11;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session_id());
    }

    // optional int32 funcid = 1 [default = 12003008];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FutureRtnOrderInsertErr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.FutureRtnOrderInsertErr)
  GOOGLE_DCHECK_NE(&from, this);
  const FutureRtnOrderInsertErr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FutureRtnOrderInsertErr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.FutureRtnOrderInsertErr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.FutureRtnOrderInsertErr)
    MergeFrom(*source);
  }
}

void FutureRtnOrderInsertErr::MergeFrom(const FutureRtnOrderInsertErr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.FutureRtnOrderInsertErr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ret_message();
      ret_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_order_group();
      order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_account_name();
      account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_order_status();
      order_status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_status_);
    }
    if (cached_has_bits & 0x00000020u) {
      ret_code_ = from.ret_code_;
    }
    if (cached_has_bits & 0x00000040u) {
      bsflag_ = from.bsflag_;
    }
    if (cached_has_bits & 0x00000080u) {
      kpcbj_ = from.kpcbj_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      hedge_flag_ = from.hedge_flag_;
    }
    if (cached_has_bits & 0x00000200u) {
      front_id_ = from.front_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FutureRtnOrderInsertErr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.FutureRtnOrderInsertErr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureRtnOrderInsertErr::CopyFrom(const FutureRtnOrderInsertErr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.FutureRtnOrderInsertErr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureRtnOrderInsertErr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000020) != 0x00000020) return false;
  return true;
}

void FutureRtnOrderInsertErr::Swap(FutureRtnOrderInsertErr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FutureRtnOrderInsertErr::InternalSwap(FutureRtnOrderInsertErr* other) {
  using std::swap;
  ret_message_.Swap(&other->ret_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_group_.Swap(&other->order_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_name_.Swap(&other->account_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_status_.Swap(&other->order_status_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ret_code_, other->ret_code_);
  swap(bsflag_, other->bsflag_);
  swap(kpcbj_, other->kpcbj_);
  swap(hedge_flag_, other->hedge_flag_);
  swap(front_id_, other->front_id_);
  swap(session_id_, other->session_id_);
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FutureRtnOrderInsertErr::GetMetadata() const {
  protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FutureRtnOrderActionErr::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FutureRtnOrderActionErr::kFuncidFieldNumber;
const int FutureRtnOrderActionErr::kRetCodeFieldNumber;
const int FutureRtnOrderActionErr::kRetMessageFieldNumber;
const int FutureRtnOrderActionErr::kOrderGroupFieldNumber;
const int FutureRtnOrderActionErr::kCodeFieldNumber;
const int FutureRtnOrderActionErr::kAccountNameFieldNumber;
const int FutureRtnOrderActionErr::kFrontIdFieldNumber;
const int FutureRtnOrderActionErr::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FutureRtnOrderActionErr::FutureRtnOrderActionErr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureRtnOrderActionErr.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.FutureRtnOrderActionErr)
}
FutureRtnOrderActionErr::FutureRtnOrderActionErr(const FutureRtnOrderActionErr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ret_message()) {
    ret_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_message_);
  }
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_group()) {
    order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
  }
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account_name()) {
    account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
  }
  ::memcpy(&ret_code_, &from.ret_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&funcid_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(funcid_));
  // @@protoc_insertion_point(copy_constructor:autotrade.FutureRtnOrderActionErr)
}

void FutureRtnOrderActionErr::SharedCtor() {
  ret_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ret_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_id_) -
      reinterpret_cast<char*>(&ret_code_)) + sizeof(session_id_));
  funcid_ = 12003009;
}

FutureRtnOrderActionErr::~FutureRtnOrderActionErr() {
  // @@protoc_insertion_point(destructor:autotrade.FutureRtnOrderActionErr)
  SharedDtor();
}

void FutureRtnOrderActionErr::SharedDtor() {
  ret_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FutureRtnOrderActionErr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FutureRtnOrderActionErr::descriptor() {
  ::protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FutureRtnOrderActionErr& FutureRtnOrderActionErr::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureRtnOrderActionErr.base);
  return *internal_default_instance();
}


void FutureRtnOrderActionErr::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.FutureRtnOrderActionErr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      ret_message_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      order_group_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      account_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&ret_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&session_id_) -
        reinterpret_cast<char*>(&ret_code_)) + sizeof(session_id_));
    funcid_ = 12003009;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FutureRtnOrderActionErr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.FutureRtnOrderActionErr)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 12003009];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ret_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ret_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ret_message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ret_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ret_message().data(), static_cast<int>(this->ret_message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureRtnOrderActionErr.ret_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_group = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_group().data(), static_cast<int>(this->order_group().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureRtnOrderActionErr.order_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string code = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureRtnOrderActionErr.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string account_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account_name().data(), static_cast<int>(this->account_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureRtnOrderActionErr.account_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 front_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_front_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &front_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 session_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_session_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.FutureRtnOrderActionErr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.FutureRtnOrderActionErr)
  return false;
#undef DO_
}

void FutureRtnOrderActionErr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.FutureRtnOrderActionErr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12003009];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // required int32 ret_code = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret_code(), output);
  }

  // optional string ret_message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_message().data(), static_cast<int>(this->ret_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnOrderActionErr.ret_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ret_message(), output);
  }

  // optional string order_group = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnOrderActionErr.order_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->order_group(), output);
  }

  // optional string code = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnOrderActionErr.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->code(), output);
  }

  // optional string account_name = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnOrderActionErr.account_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->account_name(), output);
  }

  // optional int32 front_id = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->front_id(), output);
  }

  // optional int32 session_id = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->session_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.FutureRtnOrderActionErr)
}

::google::protobuf::uint8* FutureRtnOrderActionErr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.FutureRtnOrderActionErr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12003009];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // required int32 ret_code = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret_code(), target);
  }

  // optional string ret_message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_message().data(), static_cast<int>(this->ret_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnOrderActionErr.ret_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ret_message(), target);
  }

  // optional string order_group = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnOrderActionErr.order_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->order_group(), target);
  }

  // optional string code = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnOrderActionErr.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->code(), target);
  }

  // optional string account_name = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnOrderActionErr.account_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->account_name(), target);
  }

  // optional int32 front_id = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->front_id(), target);
  }

  // optional int32 session_id = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->session_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.FutureRtnOrderActionErr)
  return target;
}

size_t FutureRtnOrderActionErr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.FutureRtnOrderActionErr)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 ret_code = 2;
  if (has_ret_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret_code());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string ret_message = 3;
    if (has_ret_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ret_message());
    }

    // optional string order_group = 4;
    if (has_order_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_group());
    }

    // optional string code = 5;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional string account_name = 6;
    if (has_account_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name());
    }

  }
  if (_has_bits_[0 / 32] & 224u) {
    // optional int32 front_id = 7;
    if (has_front_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->front_id());
    }

    // optional int32 session_id = 8;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session_id());
    }

    // optional int32 funcid = 1 [default = 12003009];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FutureRtnOrderActionErr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.FutureRtnOrderActionErr)
  GOOGLE_DCHECK_NE(&from, this);
  const FutureRtnOrderActionErr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FutureRtnOrderActionErr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.FutureRtnOrderActionErr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.FutureRtnOrderActionErr)
    MergeFrom(*source);
  }
}

void FutureRtnOrderActionErr::MergeFrom(const FutureRtnOrderActionErr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.FutureRtnOrderActionErr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ret_message();
      ret_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_order_group();
      order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_account_name();
      account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
    }
    if (cached_has_bits & 0x00000010u) {
      ret_code_ = from.ret_code_;
    }
    if (cached_has_bits & 0x00000020u) {
      front_id_ = from.front_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FutureRtnOrderActionErr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.FutureRtnOrderActionErr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureRtnOrderActionErr::CopyFrom(const FutureRtnOrderActionErr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.FutureRtnOrderActionErr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureRtnOrderActionErr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;
  return true;
}

void FutureRtnOrderActionErr::Swap(FutureRtnOrderActionErr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FutureRtnOrderActionErr::InternalSwap(FutureRtnOrderActionErr* other) {
  using std::swap;
  ret_message_.Swap(&other->ret_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_group_.Swap(&other->order_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_name_.Swap(&other->account_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ret_code_, other->ret_code_);
  swap(front_id_, other->front_id_);
  swap(session_id_, other->session_id_);
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FutureRtnOrderActionErr::GetMetadata() const {
  protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FutureRtnOrder::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FutureRtnOrder::kFuncidFieldNumber;
const int FutureRtnOrder::kFrontIdFieldNumber;
const int FutureRtnOrder::kSessionIdFieldNumber;
const int FutureRtnOrder::kExchangeIdFieldNumber;
const int FutureRtnOrder::kAccountNameFieldNumber;
const int FutureRtnOrder::kOrderGroupFieldNumber;
const int FutureRtnOrder::kCodeFieldNumber;
const int FutureRtnOrder::kOrderSysIdFieldNumber;
const int FutureRtnOrder::kOrderSubmitStatusFieldNumber;
const int FutureRtnOrder::kOrderLocalIdFieldNumber;
const int FutureRtnOrder::kOrderStatusFieldNumber;
const int FutureRtnOrder::kOrderQtyFieldNumber;
const int FutureRtnOrder::kMatchQtyFieldNumber;
const int FutureRtnOrder::kUnmatchQtyFieldNumber;
const int FutureRtnOrder::kBsflagFieldNumber;
const int FutureRtnOrder::kHedgeFlagFieldNumber;
const int FutureRtnOrder::kKpcbjFieldNumber;
const int FutureRtnOrder::kInsertDateFieldNumber;
const int FutureRtnOrder::kInsertTimeFieldNumber;
const int FutureRtnOrder::kActiveTimeFieldNumber;
const int FutureRtnOrder::kSuspendTimeFieldNumber;
const int FutureRtnOrder::kUpdateTimeFieldNumber;
const int FutureRtnOrder::kCancelTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FutureRtnOrder::FutureRtnOrder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureRtnOrder.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.FutureRtnOrder)
}
FutureRtnOrder::FutureRtnOrder(const FutureRtnOrder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  exchange_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exchange_id()) {
    exchange_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_id_);
  }
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account_name()) {
    account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
  }
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_group()) {
    order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
  }
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  order_sys_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_sys_id()) {
    order_sys_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_sys_id_);
  }
  order_submit_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_submit_status()) {
    order_submit_status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_submit_status_);
  }
  order_local_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_local_id()) {
    order_local_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_local_id_);
  }
  order_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_status()) {
    order_status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_status_);
  }
  ::memcpy(&front_id_, &from.front_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&update_time_) -
    reinterpret_cast<char*>(&front_id_)) + sizeof(update_time_));
  // @@protoc_insertion_point(copy_constructor:autotrade.FutureRtnOrder)
}

void FutureRtnOrder::SharedCtor() {
  exchange_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_sys_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_submit_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_local_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&front_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kpcbj_) -
      reinterpret_cast<char*>(&front_id_)) + sizeof(kpcbj_));
  cancel_time_ = -1;
  funcid_ = 12003010;
  insert_date_ = -1;
  insert_time_ = -1;
  active_time_ = -1;
  suspend_time_ = -1;
  update_time_ = -1;
}

FutureRtnOrder::~FutureRtnOrder() {
  // @@protoc_insertion_point(destructor:autotrade.FutureRtnOrder)
  SharedDtor();
}

void FutureRtnOrder::SharedDtor() {
  exchange_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_sys_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_submit_status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_local_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FutureRtnOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FutureRtnOrder::descriptor() {
  ::protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FutureRtnOrder& FutureRtnOrder::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureRtnOrder.base);
  return *internal_default_instance();
}


void FutureRtnOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.FutureRtnOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      exchange_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      account_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      order_group_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      order_sys_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      order_submit_status_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      order_local_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      order_status_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 65280u) {
    ::memset(&front_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&kpcbj_) -
        reinterpret_cast<char*>(&front_id_)) + sizeof(kpcbj_));
  }
  if (cached_has_bits & 8323072u) {
    cancel_time_ = -1;
    funcid_ = 12003010;
    insert_date_ = -1;
    insert_time_ = -1;
    active_time_ = -1;
    suspend_time_ = -1;
    update_time_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FutureRtnOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.FutureRtnOrder)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 12003010];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 front_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_front_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &front_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 session_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_session_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string exchange_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange_id().data(), static_cast<int>(this->exchange_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureRtnOrder.exchange_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string account_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account_name().data(), static_cast<int>(this->account_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureRtnOrder.account_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_group = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_group().data(), static_cast<int>(this->order_group().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureRtnOrder.order_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string code = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureRtnOrder.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_sys_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_sys_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_sys_id().data(), static_cast<int>(this->order_sys_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureRtnOrder.order_sys_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_submit_status = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_submit_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_submit_status().data(), static_cast<int>(this->order_submit_status().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureRtnOrder.order_submit_status");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_local_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_local_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_local_id().data(), static_cast<int>(this->order_local_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureRtnOrder.order_local_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_status = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_status().data(), static_cast<int>(this->order_status().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureRtnOrder.order_status");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 order_qty = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_order_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &order_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 match_qty = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_match_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &match_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 unmatch_qty = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_unmatch_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &unmatch_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bsflag = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_bsflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bsflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hedge_flag = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_hedge_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hedge_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 kpcbj = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_kpcbj();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kpcbj_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 insert_date = 18 [default = -1];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_insert_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &insert_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 insert_time = 19 [default = -1];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_insert_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &insert_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 active_time = 20 [default = -1];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_active_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 suspend_time = 21 [default = -1];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_suspend_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &suspend_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 update_time = 22 [default = -1];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_update_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cancel_time = 23 [default = -1];
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_cancel_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cancel_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.FutureRtnOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.FutureRtnOrder)
  return false;
#undef DO_
}

void FutureRtnOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.FutureRtnOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12003010];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional int32 front_id = 2;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->front_id(), output);
  }

  // optional int32 session_id = 3;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->session_id(), output);
  }

  // optional string exchange_id = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange_id().data(), static_cast<int>(this->exchange_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnOrder.exchange_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->exchange_id(), output);
  }

  // optional string account_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnOrder.account_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->account_name(), output);
  }

  // optional string order_group = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnOrder.order_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->order_group(), output);
  }

  // optional string code = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnOrder.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->code(), output);
  }

  // optional string order_sys_id = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_sys_id().data(), static_cast<int>(this->order_sys_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnOrder.order_sys_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->order_sys_id(), output);
  }

  // optional string order_submit_status = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_submit_status().data(), static_cast<int>(this->order_submit_status().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnOrder.order_submit_status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->order_submit_status(), output);
  }

  // optional string order_local_id = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_local_id().data(), static_cast<int>(this->order_local_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnOrder.order_local_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->order_local_id(), output);
  }

  // optional string order_status = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_status().data(), static_cast<int>(this->order_status().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnOrder.order_status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->order_status(), output);
  }

  // optional int64 order_qty = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->order_qty(), output);
  }

  // optional int64 match_qty = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->match_qty(), output);
  }

  // optional int64 unmatch_qty = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->unmatch_qty(), output);
  }

  // optional int32 bsflag = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->bsflag(), output);
  }

  // optional int32 hedge_flag = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->hedge_flag(), output);
  }

  // optional int32 kpcbj = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->kpcbj(), output);
  }

  // optional int32 insert_date = 18 [default = -1];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->insert_date(), output);
  }

  // optional int32 insert_time = 19 [default = -1];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->insert_time(), output);
  }

  // optional int32 active_time = 20 [default = -1];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->active_time(), output);
  }

  // optional int32 suspend_time = 21 [default = -1];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->suspend_time(), output);
  }

  // optional int32 update_time = 22 [default = -1];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->update_time(), output);
  }

  // optional int32 cancel_time = 23 [default = -1];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->cancel_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.FutureRtnOrder)
}

::google::protobuf::uint8* FutureRtnOrder::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.FutureRtnOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12003010];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional int32 front_id = 2;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->front_id(), target);
  }

  // optional int32 session_id = 3;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->session_id(), target);
  }

  // optional string exchange_id = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange_id().data(), static_cast<int>(this->exchange_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnOrder.exchange_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->exchange_id(), target);
  }

  // optional string account_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnOrder.account_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->account_name(), target);
  }

  // optional string order_group = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnOrder.order_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->order_group(), target);
  }

  // optional string code = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnOrder.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->code(), target);
  }

  // optional string order_sys_id = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_sys_id().data(), static_cast<int>(this->order_sys_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnOrder.order_sys_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->order_sys_id(), target);
  }

  // optional string order_submit_status = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_submit_status().data(), static_cast<int>(this->order_submit_status().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnOrder.order_submit_status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->order_submit_status(), target);
  }

  // optional string order_local_id = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_local_id().data(), static_cast<int>(this->order_local_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnOrder.order_local_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->order_local_id(), target);
  }

  // optional string order_status = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_status().data(), static_cast<int>(this->order_status().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnOrder.order_status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->order_status(), target);
  }

  // optional int64 order_qty = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->order_qty(), target);
  }

  // optional int64 match_qty = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->match_qty(), target);
  }

  // optional int64 unmatch_qty = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->unmatch_qty(), target);
  }

  // optional int32 bsflag = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->bsflag(), target);
  }

  // optional int32 hedge_flag = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->hedge_flag(), target);
  }

  // optional int32 kpcbj = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->kpcbj(), target);
  }

  // optional int32 insert_date = 18 [default = -1];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->insert_date(), target);
  }

  // optional int32 insert_time = 19 [default = -1];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->insert_time(), target);
  }

  // optional int32 active_time = 20 [default = -1];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->active_time(), target);
  }

  // optional int32 suspend_time = 21 [default = -1];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->suspend_time(), target);
  }

  // optional int32 update_time = 22 [default = -1];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->update_time(), target);
  }

  // optional int32 cancel_time = 23 [default = -1];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->cancel_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.FutureRtnOrder)
  return target;
}

size_t FutureRtnOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.FutureRtnOrder)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string exchange_id = 4;
    if (has_exchange_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange_id());
    }

    // optional string account_name = 5;
    if (has_account_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name());
    }

    // optional string order_group = 6;
    if (has_order_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_group());
    }

    // optional string code = 7;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional string order_sys_id = 8;
    if (has_order_sys_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_sys_id());
    }

    // optional string order_submit_status = 9;
    if (has_order_submit_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_submit_status());
    }

    // optional string order_local_id = 10;
    if (has_order_local_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_local_id());
    }

    // optional string order_status = 11;
    if (has_order_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_status());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 front_id = 2;
    if (has_front_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->front_id());
    }

    // optional int32 session_id = 3;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session_id());
    }

    // optional int64 order_qty = 12;
    if (has_order_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->order_qty());
    }

    // optional int64 match_qty = 13;
    if (has_match_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->match_qty());
    }

    // optional int64 unmatch_qty = 14;
    if (has_unmatch_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->unmatch_qty());
    }

    // optional int32 bsflag = 15;
    if (has_bsflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bsflag());
    }

    // optional int32 hedge_flag = 16;
    if (has_hedge_flag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hedge_flag());
    }

    // optional int32 kpcbj = 17;
    if (has_kpcbj()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kpcbj());
    }

  }
  if (_has_bits_[16 / 32] & 8323072u) {
    // optional int32 cancel_time = 23 [default = -1];
    if (has_cancel_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cancel_time());
    }

    // optional int32 funcid = 1 [default = 12003010];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

    // optional int32 insert_date = 18 [default = -1];
    if (has_insert_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->insert_date());
    }

    // optional int32 insert_time = 19 [default = -1];
    if (has_insert_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->insert_time());
    }

    // optional int32 active_time = 20 [default = -1];
    if (has_active_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active_time());
    }

    // optional int32 suspend_time = 21 [default = -1];
    if (has_suspend_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->suspend_time());
    }

    // optional int32 update_time = 22 [default = -1];
    if (has_update_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->update_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FutureRtnOrder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.FutureRtnOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const FutureRtnOrder* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FutureRtnOrder>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.FutureRtnOrder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.FutureRtnOrder)
    MergeFrom(*source);
  }
}

void FutureRtnOrder::MergeFrom(const FutureRtnOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.FutureRtnOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_exchange_id();
      exchange_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_account_name();
      account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_order_group();
      order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_order_sys_id();
      order_sys_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_sys_id_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_order_submit_status();
      order_submit_status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_submit_status_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_order_local_id();
      order_local_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_local_id_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_order_status();
      order_status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_status_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      front_id_ = from.front_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      order_qty_ = from.order_qty_;
    }
    if (cached_has_bits & 0x00000800u) {
      match_qty_ = from.match_qty_;
    }
    if (cached_has_bits & 0x00001000u) {
      unmatch_qty_ = from.unmatch_qty_;
    }
    if (cached_has_bits & 0x00002000u) {
      bsflag_ = from.bsflag_;
    }
    if (cached_has_bits & 0x00004000u) {
      hedge_flag_ = from.hedge_flag_;
    }
    if (cached_has_bits & 0x00008000u) {
      kpcbj_ = from.kpcbj_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 8323072u) {
    if (cached_has_bits & 0x00010000u) {
      cancel_time_ = from.cancel_time_;
    }
    if (cached_has_bits & 0x00020000u) {
      funcid_ = from.funcid_;
    }
    if (cached_has_bits & 0x00040000u) {
      insert_date_ = from.insert_date_;
    }
    if (cached_has_bits & 0x00080000u) {
      insert_time_ = from.insert_time_;
    }
    if (cached_has_bits & 0x00100000u) {
      active_time_ = from.active_time_;
    }
    if (cached_has_bits & 0x00200000u) {
      suspend_time_ = from.suspend_time_;
    }
    if (cached_has_bits & 0x00400000u) {
      update_time_ = from.update_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FutureRtnOrder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.FutureRtnOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureRtnOrder::CopyFrom(const FutureRtnOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.FutureRtnOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureRtnOrder::IsInitialized() const {
  return true;
}

void FutureRtnOrder::Swap(FutureRtnOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FutureRtnOrder::InternalSwap(FutureRtnOrder* other) {
  using std::swap;
  exchange_id_.Swap(&other->exchange_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_name_.Swap(&other->account_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_group_.Swap(&other->order_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_sys_id_.Swap(&other->order_sys_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_submit_status_.Swap(&other->order_submit_status_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_local_id_.Swap(&other->order_local_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_status_.Swap(&other->order_status_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(front_id_, other->front_id_);
  swap(session_id_, other->session_id_);
  swap(order_qty_, other->order_qty_);
  swap(match_qty_, other->match_qty_);
  swap(unmatch_qty_, other->unmatch_qty_);
  swap(bsflag_, other->bsflag_);
  swap(hedge_flag_, other->hedge_flag_);
  swap(kpcbj_, other->kpcbj_);
  swap(cancel_time_, other->cancel_time_);
  swap(funcid_, other->funcid_);
  swap(insert_date_, other->insert_date_);
  swap(insert_time_, other->insert_time_);
  swap(active_time_, other->active_time_);
  swap(suspend_time_, other->suspend_time_);
  swap(update_time_, other->update_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FutureRtnOrder::GetMetadata() const {
  protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FutureRtnTrade::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FutureRtnTrade::kFuncidFieldNumber;
const int FutureRtnTrade::kFrontIdFieldNumber;
const int FutureRtnTrade::kSessionIdFieldNumber;
const int FutureRtnTrade::kExchangeIdFieldNumber;
const int FutureRtnTrade::kAccountNameFieldNumber;
const int FutureRtnTrade::kOrderGroupFieldNumber;
const int FutureRtnTrade::kCodeFieldNumber;
const int FutureRtnTrade::kMatchIdFieldNumber;
const int FutureRtnTrade::kMatchQtyFieldNumber;
const int FutureRtnTrade::kMatchAmtFieldNumber;
const int FutureRtnTrade::kBsflagFieldNumber;
const int FutureRtnTrade::kKpcbjFieldNumber;
const int FutureRtnTrade::kHedgeFlagFieldNumber;
const int FutureRtnTrade::kStampFieldNumber;
const int FutureRtnTrade::kMatchPriceFieldNumber;
const int FutureRtnTrade::kOrderSysIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FutureRtnTrade::FutureRtnTrade()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureRtnTrade.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.FutureRtnTrade)
}
FutureRtnTrade::FutureRtnTrade(const FutureRtnTrade& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  exchange_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exchange_id()) {
    exchange_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_id_);
  }
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account_name()) {
    account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
  }
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_group()) {
    order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
  }
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  match_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_match_id()) {
    match_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_id_);
  }
  order_sys_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_sys_id()) {
    order_sys_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_sys_id_);
  }
  ::memcpy(&front_id_, &from.front_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&funcid_) -
    reinterpret_cast<char*>(&front_id_)) + sizeof(funcid_));
  // @@protoc_insertion_point(copy_constructor:autotrade.FutureRtnTrade)
}

void FutureRtnTrade::SharedCtor() {
  exchange_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  match_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_sys_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&front_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hedge_flag_) -
      reinterpret_cast<char*>(&front_id_)) + sizeof(hedge_flag_));
  funcid_ = 12003011;
}

FutureRtnTrade::~FutureRtnTrade() {
  // @@protoc_insertion_point(destructor:autotrade.FutureRtnTrade)
  SharedDtor();
}

void FutureRtnTrade::SharedDtor() {
  exchange_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  match_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_sys_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FutureRtnTrade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FutureRtnTrade::descriptor() {
  ::protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FutureRtnTrade& FutureRtnTrade::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_FutureRtnTrade.base);
  return *internal_default_instance();
}


void FutureRtnTrade::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.FutureRtnTrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      exchange_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      account_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      order_group_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      match_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      order_sys_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&front_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&session_id_) -
        reinterpret_cast<char*>(&front_id_)) + sizeof(session_id_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&match_qty_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hedge_flag_) -
        reinterpret_cast<char*>(&match_qty_)) + sizeof(hedge_flag_));
    funcid_ = 12003011;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FutureRtnTrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.FutureRtnTrade)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 12003011];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 front_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_front_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &front_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 session_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_session_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string exchange_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange_id().data(), static_cast<int>(this->exchange_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureRtnTrade.exchange_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string account_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account_name().data(), static_cast<int>(this->account_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureRtnTrade.account_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_group = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_group().data(), static_cast<int>(this->order_group().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureRtnTrade.order_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string code = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureRtnTrade.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string match_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_match_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->match_id().data(), static_cast<int>(this->match_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureRtnTrade.match_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 match_qty = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_match_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &match_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double match_amt = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_match_amt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &match_amt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bsflag = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_bsflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bsflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 kpcbj = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_kpcbj();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kpcbj_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hedge_flag = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_hedge_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hedge_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 stamp = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_stamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 match_price = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_match_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &match_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_sys_id = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_sys_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_sys_id().data(), static_cast<int>(this->order_sys_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.FutureRtnTrade.order_sys_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.FutureRtnTrade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.FutureRtnTrade)
  return false;
#undef DO_
}

void FutureRtnTrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.FutureRtnTrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12003011];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional int32 front_id = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->front_id(), output);
  }

  // optional int32 session_id = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->session_id(), output);
  }

  // optional string exchange_id = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange_id().data(), static_cast<int>(this->exchange_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnTrade.exchange_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->exchange_id(), output);
  }

  // optional string account_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnTrade.account_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->account_name(), output);
  }

  // optional string order_group = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnTrade.order_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->order_group(), output);
  }

  // optional string code = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnTrade.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->code(), output);
  }

  // optional string match_id = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_id().data(), static_cast<int>(this->match_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnTrade.match_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->match_id(), output);
  }

  // optional int64 match_qty = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->match_qty(), output);
  }

  // optional double match_amt = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->match_amt(), output);
  }

  // optional int32 bsflag = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->bsflag(), output);
  }

  // optional int32 kpcbj = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->kpcbj(), output);
  }

  // optional int32 hedge_flag = 13;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->hedge_flag(), output);
  }

  // optional int64 stamp = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->stamp(), output);
  }

  // optional int64 match_price = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->match_price(), output);
  }

  // optional string order_sys_id = 16;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_sys_id().data(), static_cast<int>(this->order_sys_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnTrade.order_sys_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->order_sys_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.FutureRtnTrade)
}

::google::protobuf::uint8* FutureRtnTrade::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.FutureRtnTrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12003011];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional int32 front_id = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->front_id(), target);
  }

  // optional int32 session_id = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->session_id(), target);
  }

  // optional string exchange_id = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange_id().data(), static_cast<int>(this->exchange_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnTrade.exchange_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->exchange_id(), target);
  }

  // optional string account_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnTrade.account_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->account_name(), target);
  }

  // optional string order_group = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnTrade.order_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->order_group(), target);
  }

  // optional string code = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnTrade.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->code(), target);
  }

  // optional string match_id = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_id().data(), static_cast<int>(this->match_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnTrade.match_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->match_id(), target);
  }

  // optional int64 match_qty = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->match_qty(), target);
  }

  // optional double match_amt = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->match_amt(), target);
  }

  // optional int32 bsflag = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->bsflag(), target);
  }

  // optional int32 kpcbj = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->kpcbj(), target);
  }

  // optional int32 hedge_flag = 13;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->hedge_flag(), target);
  }

  // optional int64 stamp = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->stamp(), target);
  }

  // optional int64 match_price = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->match_price(), target);
  }

  // optional string order_sys_id = 16;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_sys_id().data(), static_cast<int>(this->order_sys_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.FutureRtnTrade.order_sys_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->order_sys_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.FutureRtnTrade)
  return target;
}

size_t FutureRtnTrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.FutureRtnTrade)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string exchange_id = 4;
    if (has_exchange_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange_id());
    }

    // optional string account_name = 5;
    if (has_account_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name());
    }

    // optional string order_group = 6;
    if (has_order_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_group());
    }

    // optional string code = 7;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional string match_id = 8;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->match_id());
    }

    // optional string order_sys_id = 16;
    if (has_order_sys_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_sys_id());
    }

    // optional int32 front_id = 2;
    if (has_front_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->front_id());
    }

    // optional int32 session_id = 3;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session_id());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int64 match_qty = 9;
    if (has_match_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->match_qty());
    }

    // optional double match_amt = 10;
    if (has_match_amt()) {
      total_size += 1 + 8;
    }

    // optional int32 bsflag = 11;
    if (has_bsflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bsflag());
    }

    // optional int32 kpcbj = 12;
    if (has_kpcbj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kpcbj());
    }

    // optional int64 stamp = 14;
    if (has_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->stamp());
    }

    // optional int64 match_price = 15;
    if (has_match_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->match_price());
    }

    // optional int32 hedge_flag = 13;
    if (has_hedge_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hedge_flag());
    }

    // optional int32 funcid = 1 [default = 12003011];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FutureRtnTrade::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.FutureRtnTrade)
  GOOGLE_DCHECK_NE(&from, this);
  const FutureRtnTrade* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FutureRtnTrade>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.FutureRtnTrade)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.FutureRtnTrade)
    MergeFrom(*source);
  }
}

void FutureRtnTrade::MergeFrom(const FutureRtnTrade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.FutureRtnTrade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_exchange_id();
      exchange_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_account_name();
      account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_order_group();
      order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_match_id();
      match_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_id_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_order_sys_id();
      order_sys_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_sys_id_);
    }
    if (cached_has_bits & 0x00000040u) {
      front_id_ = from.front_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      session_id_ = from.session_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      match_qty_ = from.match_qty_;
    }
    if (cached_has_bits & 0x00000200u) {
      match_amt_ = from.match_amt_;
    }
    if (cached_has_bits & 0x00000400u) {
      bsflag_ = from.bsflag_;
    }
    if (cached_has_bits & 0x00000800u) {
      kpcbj_ = from.kpcbj_;
    }
    if (cached_has_bits & 0x00001000u) {
      stamp_ = from.stamp_;
    }
    if (cached_has_bits & 0x00002000u) {
      match_price_ = from.match_price_;
    }
    if (cached_has_bits & 0x00004000u) {
      hedge_flag_ = from.hedge_flag_;
    }
    if (cached_has_bits & 0x00008000u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FutureRtnTrade::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.FutureRtnTrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureRtnTrade::CopyFrom(const FutureRtnTrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.FutureRtnTrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureRtnTrade::IsInitialized() const {
  return true;
}

void FutureRtnTrade::Swap(FutureRtnTrade* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FutureRtnTrade::InternalSwap(FutureRtnTrade* other) {
  using std::swap;
  exchange_id_.Swap(&other->exchange_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_name_.Swap(&other->account_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_group_.Swap(&other->order_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  match_id_.Swap(&other->match_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_sys_id_.Swap(&other->order_sys_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(front_id_, other->front_id_);
  swap(session_id_, other->session_id_);
  swap(match_qty_, other->match_qty_);
  swap(match_amt_, other->match_amt_);
  swap(bsflag_, other->bsflag_);
  swap(kpcbj_, other->kpcbj_);
  swap(stamp_, other->stamp_);
  swap(match_price_, other->match_price_);
  swap(hedge_flag_, other->hedge_flag_);
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FutureRtnTrade::GetMetadata() const {
  protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InnerQueryOrderReqt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InnerQueryOrderReqt::kFuncidFieldNumber;
const int InnerQueryOrderReqt::kBrokerIdFieldNumber;
const int InnerQueryOrderReqt::kFutureAccountFieldNumber;
const int InnerQueryOrderReqt::kExchangeIdFieldNumber;
const int InnerQueryOrderReqt::kOrderSysIdFieldNumber;
const int InnerQueryOrderReqt::kInsertTimeStartFieldNumber;
const int InnerQueryOrderReqt::kInsertTimeEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InnerQueryOrderReqt::InnerQueryOrderReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_InnerQueryOrderReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.InnerQueryOrderReqt)
}
InnerQueryOrderReqt::InnerQueryOrderReqt(const InnerQueryOrderReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_broker_id()) {
    broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
  }
  future_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_future_account()) {
    future_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.future_account_);
  }
  exchange_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exchange_id()) {
    exchange_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_id_);
  }
  order_sys_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_sys_id()) {
    order_sys_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_sys_id_);
  }
  insert_time_start_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_insert_time_start()) {
    insert_time_start_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.insert_time_start_);
  }
  insert_time_end_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_insert_time_end()) {
    insert_time_end_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.insert_time_end_);
  }
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:autotrade.InnerQueryOrderReqt)
}

void InnerQueryOrderReqt::SharedCtor() {
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  future_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_sys_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  insert_time_start_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  insert_time_end_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  funcid_ = 12003012;
}

InnerQueryOrderReqt::~InnerQueryOrderReqt() {
  // @@protoc_insertion_point(destructor:autotrade.InnerQueryOrderReqt)
  SharedDtor();
}

void InnerQueryOrderReqt::SharedDtor() {
  broker_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  future_account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_sys_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  insert_time_start_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  insert_time_end_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InnerQueryOrderReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* InnerQueryOrderReqt::descriptor() {
  ::protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InnerQueryOrderReqt& InnerQueryOrderReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_InnerQueryOrderReqt.base);
  return *internal_default_instance();
}


void InnerQueryOrderReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.InnerQueryOrderReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      broker_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      future_account_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      exchange_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      order_sys_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      insert_time_start_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      insert_time_end_.ClearNonDefaultToEmptyNoArena();
    }
    funcid_ = 12003012;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InnerQueryOrderReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.InnerQueryOrderReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 12003012];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string broker_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_broker_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->broker_id().data(), static_cast<int>(this->broker_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerQueryOrderReqt.broker_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string future_account = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_future_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->future_account().data(), static_cast<int>(this->future_account().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerQueryOrderReqt.future_account");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string exchange_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange_id().data(), static_cast<int>(this->exchange_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerQueryOrderReqt.exchange_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_sys_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_sys_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_sys_id().data(), static_cast<int>(this->order_sys_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerQueryOrderReqt.order_sys_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string insert_time_start = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_insert_time_start()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->insert_time_start().data(), static_cast<int>(this->insert_time_start().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerQueryOrderReqt.insert_time_start");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string insert_time_end = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_insert_time_end()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->insert_time_end().data(), static_cast<int>(this->insert_time_end().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerQueryOrderReqt.insert_time_end");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.InnerQueryOrderReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.InnerQueryOrderReqt)
  return false;
#undef DO_
}

void InnerQueryOrderReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.InnerQueryOrderReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12003012];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional string broker_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerQueryOrderReqt.broker_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->broker_id(), output);
  }

  // optional string future_account = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->future_account().data(), static_cast<int>(this->future_account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerQueryOrderReqt.future_account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->future_account(), output);
  }

  // optional string exchange_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange_id().data(), static_cast<int>(this->exchange_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerQueryOrderReqt.exchange_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->exchange_id(), output);
  }

  // optional string order_sys_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_sys_id().data(), static_cast<int>(this->order_sys_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerQueryOrderReqt.order_sys_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->order_sys_id(), output);
  }

  // optional string insert_time_start = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->insert_time_start().data(), static_cast<int>(this->insert_time_start().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerQueryOrderReqt.insert_time_start");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->insert_time_start(), output);
  }

  // optional string insert_time_end = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->insert_time_end().data(), static_cast<int>(this->insert_time_end().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerQueryOrderReqt.insert_time_end");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->insert_time_end(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.InnerQueryOrderReqt)
}

::google::protobuf::uint8* InnerQueryOrderReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.InnerQueryOrderReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12003012];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional string broker_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerQueryOrderReqt.broker_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->broker_id(), target);
  }

  // optional string future_account = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->future_account().data(), static_cast<int>(this->future_account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerQueryOrderReqt.future_account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->future_account(), target);
  }

  // optional string exchange_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange_id().data(), static_cast<int>(this->exchange_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerQueryOrderReqt.exchange_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->exchange_id(), target);
  }

  // optional string order_sys_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_sys_id().data(), static_cast<int>(this->order_sys_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerQueryOrderReqt.order_sys_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->order_sys_id(), target);
  }

  // optional string insert_time_start = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->insert_time_start().data(), static_cast<int>(this->insert_time_start().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerQueryOrderReqt.insert_time_start");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->insert_time_start(), target);
  }

  // optional string insert_time_end = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->insert_time_end().data(), static_cast<int>(this->insert_time_end().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerQueryOrderReqt.insert_time_end");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->insert_time_end(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.InnerQueryOrderReqt)
  return target;
}

size_t InnerQueryOrderReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.InnerQueryOrderReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string broker_id = 2;
    if (has_broker_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->broker_id());
    }

    // optional string future_account = 3;
    if (has_future_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->future_account());
    }

    // optional string exchange_id = 4;
    if (has_exchange_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange_id());
    }

    // optional string order_sys_id = 5;
    if (has_order_sys_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_sys_id());
    }

    // optional string insert_time_start = 6;
    if (has_insert_time_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->insert_time_start());
    }

    // optional string insert_time_end = 7;
    if (has_insert_time_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->insert_time_end());
    }

    // optional int32 funcid = 1 [default = 12003012];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InnerQueryOrderReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.InnerQueryOrderReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const InnerQueryOrderReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InnerQueryOrderReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.InnerQueryOrderReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.InnerQueryOrderReqt)
    MergeFrom(*source);
  }
}

void InnerQueryOrderReqt::MergeFrom(const InnerQueryOrderReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.InnerQueryOrderReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_broker_id();
      broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_future_account();
      future_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.future_account_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_exchange_id();
      exchange_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_order_sys_id();
      order_sys_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_sys_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_insert_time_start();
      insert_time_start_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.insert_time_start_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_insert_time_end();
      insert_time_end_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.insert_time_end_);
    }
    if (cached_has_bits & 0x00000040u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InnerQueryOrderReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.InnerQueryOrderReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InnerQueryOrderReqt::CopyFrom(const InnerQueryOrderReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.InnerQueryOrderReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerQueryOrderReqt::IsInitialized() const {
  return true;
}

void InnerQueryOrderReqt::Swap(InnerQueryOrderReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InnerQueryOrderReqt::InternalSwap(InnerQueryOrderReqt* other) {
  using std::swap;
  broker_id_.Swap(&other->broker_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  future_account_.Swap(&other->future_account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_id_.Swap(&other->exchange_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_sys_id_.Swap(&other->order_sys_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  insert_time_start_.Swap(&other->insert_time_start_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  insert_time_end_.Swap(&other->insert_time_end_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata InnerQueryOrderReqt::GetMetadata() const {
  protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InnerFutureQueryOrderResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InnerFutureQueryOrderResp::kFuncidFieldNumber;
const int InnerFutureQueryOrderResp::kBrokerIdFieldNumber;
const int InnerFutureQueryOrderResp::kFutureAccountFieldNumber;
const int InnerFutureQueryOrderResp::kRequestIdFieldNumber;
const int InnerFutureQueryOrderResp::kFrontIdFieldNumber;
const int InnerFutureQueryOrderResp::kSessionIdFieldNumber;
const int InnerFutureQueryOrderResp::kRetCodeFieldNumber;
const int InnerFutureQueryOrderResp::kRetMessageFieldNumber;
const int InnerFutureQueryOrderResp::kIslastFieldNumber;
const int InnerFutureQueryOrderResp::kOrderGroupFieldNumber;
const int InnerFutureQueryOrderResp::kUserIdFieldNumber;
const int InnerFutureQueryOrderResp::kOrderPriceTypeFieldNumber;
const int InnerFutureQueryOrderResp::kBsflagFieldNumber;
const int InnerFutureQueryOrderResp::kKpcbjFieldNumber;
const int InnerFutureQueryOrderResp::kHedgeFlagFieldNumber;
const int InnerFutureQueryOrderResp::kOrderPriceFieldNumber;
const int InnerFutureQueryOrderResp::kOrderQtyFieldNumber;
const int InnerFutureQueryOrderResp::kTimeConditionFieldNumber;
const int InnerFutureQueryOrderResp::kOrderDateFieldNumber;
const int InnerFutureQueryOrderResp::kVolumeConditionFieldNumber;
const int InnerFutureQueryOrderResp::kMinMatchVolumeFieldNumber;
const int InnerFutureQueryOrderResp::kContingentConditionFieldNumber;
const int InnerFutureQueryOrderResp::kStopPriceFieldNumber;
const int InnerFutureQueryOrderResp::kForceCloseReasonFieldNumber;
const int InnerFutureQueryOrderResp::kOrderLocalIdFieldNumber;
const int InnerFutureQueryOrderResp::kExchangeIdFieldNumber;
const int InnerFutureQueryOrderResp::kParticipantIdFieldNumber;
const int InnerFutureQueryOrderResp::kClientIdFieldNumber;
const int InnerFutureQueryOrderResp::kOrderSubmitStatusFieldNumber;
const int InnerFutureQueryOrderResp::kTradingDayFieldNumber;
const int InnerFutureQueryOrderResp::kSettlementIdFieldNumber;
const int InnerFutureQueryOrderResp::kOrderSysIdFieldNumber;
const int InnerFutureQueryOrderResp::kOrderSourceFieldNumber;
const int InnerFutureQueryOrderResp::kOrderStatusFieldNumber;
const int InnerFutureQueryOrderResp::kOrderTypeFieldNumber;
const int InnerFutureQueryOrderResp::kMatchQtyFieldNumber;
const int InnerFutureQueryOrderResp::kRemainQtyFieldNumber;
const int InnerFutureQueryOrderResp::kInsertDateFieldNumber;
const int InnerFutureQueryOrderResp::kInsertTimeFieldNumber;
const int InnerFutureQueryOrderResp::kActiveTimeFieldNumber;
const int InnerFutureQueryOrderResp::kSuspendTimeFieldNumber;
const int InnerFutureQueryOrderResp::kUpdateTimeFieldNumber;
const int InnerFutureQueryOrderResp::kCancelTimeFieldNumber;
const int InnerFutureQueryOrderResp::kInstrumentIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InnerFutureQueryOrderResp::InnerFutureQueryOrderResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_InnerFutureQueryOrderResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.InnerFutureQueryOrderResp)
}
InnerFutureQueryOrderResp::InnerFutureQueryOrderResp(const InnerFutureQueryOrderResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_broker_id()) {
    broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
  }
  future_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_future_account()) {
    future_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.future_account_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  ret_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ret_message()) {
    ret_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_message_);
  }
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_group()) {
    order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_id()) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  order_local_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_local_id()) {
    order_local_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_local_id_);
  }
  exchange_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exchange_id()) {
    exchange_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_id_);
  }
  participant_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_participant_id()) {
    participant_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.participant_id_);
  }
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_client_id()) {
    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  order_submit_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_submit_status()) {
    order_submit_status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_submit_status_);
  }
  trading_day_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trading_day()) {
    trading_day_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trading_day_);
  }
  settlement_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_settlement_id()) {
    settlement_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.settlement_id_);
  }
  order_sys_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_sys_id()) {
    order_sys_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_sys_id_);
  }
  order_source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_source()) {
    order_source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_source_);
  }
  order_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_status()) {
    order_status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_status_);
  }
  order_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_type()) {
    order_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_type_);
  }
  instrument_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_instrument_id()) {
    instrument_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrument_id_);
  }
  ::memcpy(&front_id_, &from.front_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&update_time_) -
    reinterpret_cast<char*>(&front_id_)) + sizeof(update_time_));
  // @@protoc_insertion_point(copy_constructor:autotrade.InnerFutureQueryOrderResp)
}

void InnerFutureQueryOrderResp::SharedCtor() {
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  future_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_local_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  participant_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_submit_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trading_day_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  settlement_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_sys_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrument_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&front_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remain_qty_) -
      reinterpret_cast<char*>(&front_id_)) + sizeof(remain_qty_));
  cancel_time_ = -1;
  funcid_ = 12103012;
  insert_date_ = -1;
  insert_time_ = -1;
  active_time_ = -1;
  suspend_time_ = -1;
  update_time_ = -1;
}

InnerFutureQueryOrderResp::~InnerFutureQueryOrderResp() {
  // @@protoc_insertion_point(destructor:autotrade.InnerFutureQueryOrderResp)
  SharedDtor();
}

void InnerFutureQueryOrderResp::SharedDtor() {
  broker_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  future_account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_local_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  participant_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_submit_status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trading_day_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  settlement_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_sys_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrument_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InnerFutureQueryOrderResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* InnerFutureQueryOrderResp::descriptor() {
  ::protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InnerFutureQueryOrderResp& InnerFutureQueryOrderResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_InnerFutureQueryOrderResp.base);
  return *internal_default_instance();
}


void InnerFutureQueryOrderResp::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.InnerFutureQueryOrderResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      broker_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      future_account_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      ret_message_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      order_group_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      user_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      order_local_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      exchange_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      participant_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000200u) {
      client_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000400u) {
      order_submit_status_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000800u) {
      trading_day_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00001000u) {
      settlement_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00002000u) {
      order_sys_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00004000u) {
      order_source_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00008000u) {
      order_status_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      order_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00020000u) {
      instrument_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 16515072u) {
    ::memset(&front_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bsflag_) -
        reinterpret_cast<char*>(&front_id_)) + sizeof(bsflag_));
  }
  if (cached_has_bits & 4278190080u) {
    ::memset(&kpcbj_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_match_volume_) -
        reinterpret_cast<char*>(&kpcbj_)) + sizeof(min_match_volume_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 255u) {
    ::memset(&contingent_condition_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&remain_qty_) -
        reinterpret_cast<char*>(&contingent_condition_)) + sizeof(remain_qty_));
    cancel_time_ = -1;
    funcid_ = 12103012;
    insert_date_ = -1;
  }
  if (cached_has_bits & 3840u) {
    insert_time_ = -1;
    active_time_ = -1;
    suspend_time_ = -1;
    update_time_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InnerFutureQueryOrderResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.InnerFutureQueryOrderResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 12103012];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string broker_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_broker_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->broker_id().data(), static_cast<int>(this->broker_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerFutureQueryOrderResp.broker_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string future_account = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_future_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->future_account().data(), static_cast<int>(this->future_account().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerFutureQueryOrderResp.future_account");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerFutureQueryOrderResp.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 front_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_front_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &front_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 session_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_session_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ret_code = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_ret_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ret_message = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ret_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ret_message().data(), static_cast<int>(this->ret_message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerFutureQueryOrderResp.ret_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool islast = 9 [default = false];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_islast();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islast_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_group = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_group().data(), static_cast<int>(this->order_group().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerFutureQueryOrderResp.order_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerFutureQueryOrderResp.user_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 order_price_type = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_order_price_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_price_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bsflag = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_bsflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bsflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 kpcbj = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_kpcbj();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kpcbj_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hedge_flag = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_hedge_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hedge_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 order_price = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_order_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &order_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 order_qty = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_order_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 time_condition = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_time_condition();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_condition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 order_date = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_order_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 volume_condition = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_volume_condition();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_condition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 min_match_volume = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_min_match_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_match_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 contingent_condition = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_contingent_condition();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contingent_condition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 stop_price = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_stop_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stop_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 force_close_reason = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_force_close_reason();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &force_close_reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_local_id = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_local_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_local_id().data(), static_cast<int>(this->order_local_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerFutureQueryOrderResp.order_local_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string exchange_id = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange_id().data(), static_cast<int>(this->exchange_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerFutureQueryOrderResp.exchange_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string participant_id = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_participant_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->participant_id().data(), static_cast<int>(this->participant_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerFutureQueryOrderResp.participant_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string client_id = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_id().data(), static_cast<int>(this->client_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerFutureQueryOrderResp.client_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_submit_status = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_submit_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_submit_status().data(), static_cast<int>(this->order_submit_status().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerFutureQueryOrderResp.order_submit_status");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string trading_day = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trading_day()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trading_day().data(), static_cast<int>(this->trading_day().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerFutureQueryOrderResp.trading_day");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string settlement_id = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_settlement_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->settlement_id().data(), static_cast<int>(this->settlement_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerFutureQueryOrderResp.settlement_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_sys_id = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_sys_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_sys_id().data(), static_cast<int>(this->order_sys_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerFutureQueryOrderResp.order_sys_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_source = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 266 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_source().data(), static_cast<int>(this->order_source().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerFutureQueryOrderResp.order_source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_status = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 274 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_status().data(), static_cast<int>(this->order_status().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerFutureQueryOrderResp.order_status");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_type = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 282 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_type().data(), static_cast<int>(this->order_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerFutureQueryOrderResp.order_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 match_qty = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 288 & 0xFF */)) {
          set_has_match_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 remain_qty = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 296 & 0xFF */)) {
          set_has_remain_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 insert_date = 38 [default = -1];
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 304 & 0xFF */)) {
          set_has_insert_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &insert_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 insert_time = 39 [default = -1];
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 312 & 0xFF */)) {
          set_has_insert_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &insert_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 active_time = 40 [default = -1];
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {
          set_has_active_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 suspend_time = 41 [default = -1];
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 328 & 0xFF */)) {
          set_has_suspend_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &suspend_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 update_time = 42 [default = -1];
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 336 & 0xFF */)) {
          set_has_update_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cancel_time = 43 [default = -1];
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 344 & 0xFF */)) {
          set_has_cancel_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cancel_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string instrument_id = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 354 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrument_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->instrument_id().data(), static_cast<int>(this->instrument_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerFutureQueryOrderResp.instrument_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.InnerFutureQueryOrderResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.InnerFutureQueryOrderResp)
  return false;
#undef DO_
}

void InnerFutureQueryOrderResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.InnerFutureQueryOrderResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[1];
  // optional int32 funcid = 1 [default = 12103012];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string broker_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryOrderResp.broker_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->broker_id(), output);
  }

  // optional string future_account = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->future_account().data(), static_cast<int>(this->future_account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryOrderResp.future_account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->future_account(), output);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryOrderResp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->request_id(), output);
  }

  // optional int32 front_id = 5;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->front_id(), output);
  }

  // optional int32 session_id = 6;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->session_id(), output);
  }

  // optional int32 ret_code = 7 [default = 0];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ret_code(), output);
  }

  // optional string ret_message = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_message().data(), static_cast<int>(this->ret_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryOrderResp.ret_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->ret_message(), output);
  }

  // optional bool islast = 9 [default = false];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->islast(), output);
  }

  // optional string order_group = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryOrderResp.order_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->order_group(), output);
  }

  // optional string user_id = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryOrderResp.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->user_id(), output);
  }

  // optional int32 order_price_type = 12;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->order_price_type(), output);
  }

  // optional int32 bsflag = 13;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->bsflag(), output);
  }

  // optional int32 kpcbj = 14;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->kpcbj(), output);
  }

  // optional int32 hedge_flag = 15;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->hedge_flag(), output);
  }

  // optional int64 order_price = 16;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->order_price(), output);
  }

  // optional int32 order_qty = 17;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->order_qty(), output);
  }

  // optional int32 time_condition = 18;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->time_condition(), output);
  }

  // optional int32 order_date = 19;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->order_date(), output);
  }

  // optional int32 volume_condition = 20;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->volume_condition(), output);
  }

  // optional int32 min_match_volume = 21;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->min_match_volume(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 contingent_condition = 22;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->contingent_condition(), output);
  }

  // optional int64 stop_price = 23;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->stop_price(), output);
  }

  // optional int32 force_close_reason = 24;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->force_close_reason(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string order_local_id = 25;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_local_id().data(), static_cast<int>(this->order_local_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryOrderResp.order_local_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->order_local_id(), output);
  }

  // optional string exchange_id = 26;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange_id().data(), static_cast<int>(this->exchange_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryOrderResp.exchange_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->exchange_id(), output);
  }

  // optional string participant_id = 27;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->participant_id().data(), static_cast<int>(this->participant_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryOrderResp.participant_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->participant_id(), output);
  }

  // optional string client_id = 28;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryOrderResp.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      28, this->client_id(), output);
  }

  // optional string order_submit_status = 29;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_submit_status().data(), static_cast<int>(this->order_submit_status().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryOrderResp.order_submit_status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->order_submit_status(), output);
  }

  // optional string trading_day = 30;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trading_day().data(), static_cast<int>(this->trading_day().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryOrderResp.trading_day");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->trading_day(), output);
  }

  // optional string settlement_id = 31;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->settlement_id().data(), static_cast<int>(this->settlement_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryOrderResp.settlement_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      31, this->settlement_id(), output);
  }

  // optional string order_sys_id = 32;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_sys_id().data(), static_cast<int>(this->order_sys_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryOrderResp.order_sys_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      32, this->order_sys_id(), output);
  }

  // optional string order_source = 33;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_source().data(), static_cast<int>(this->order_source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryOrderResp.order_source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      33, this->order_source(), output);
  }

  // optional string order_status = 34;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_status().data(), static_cast<int>(this->order_status().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryOrderResp.order_status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      34, this->order_status(), output);
  }

  // optional string order_type = 35;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_type().data(), static_cast<int>(this->order_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryOrderResp.order_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      35, this->order_type(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 match_qty = 36;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->match_qty(), output);
  }

  // optional int32 remain_qty = 37;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->remain_qty(), output);
  }

  // optional int32 insert_date = 38 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->insert_date(), output);
  }

  // optional int32 insert_time = 39 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->insert_time(), output);
  }

  // optional int32 active_time = 40 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->active_time(), output);
  }

  // optional int32 suspend_time = 41 [default = -1];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->suspend_time(), output);
  }

  // optional int32 update_time = 42 [default = -1];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->update_time(), output);
  }

  // optional int32 cancel_time = 43 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->cancel_time(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string instrument_id = 44;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instrument_id().data(), static_cast<int>(this->instrument_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryOrderResp.instrument_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      44, this->instrument_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.InnerFutureQueryOrderResp)
}

::google::protobuf::uint8* InnerFutureQueryOrderResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.InnerFutureQueryOrderResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[1];
  // optional int32 funcid = 1 [default = 12103012];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string broker_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryOrderResp.broker_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->broker_id(), target);
  }

  // optional string future_account = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->future_account().data(), static_cast<int>(this->future_account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryOrderResp.future_account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->future_account(), target);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryOrderResp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->request_id(), target);
  }

  // optional int32 front_id = 5;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->front_id(), target);
  }

  // optional int32 session_id = 6;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->session_id(), target);
  }

  // optional int32 ret_code = 7 [default = 0];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ret_code(), target);
  }

  // optional string ret_message = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_message().data(), static_cast<int>(this->ret_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryOrderResp.ret_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->ret_message(), target);
  }

  // optional bool islast = 9 [default = false];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->islast(), target);
  }

  // optional string order_group = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryOrderResp.order_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->order_group(), target);
  }

  // optional string user_id = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryOrderResp.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->user_id(), target);
  }

  // optional int32 order_price_type = 12;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->order_price_type(), target);
  }

  // optional int32 bsflag = 13;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->bsflag(), target);
  }

  // optional int32 kpcbj = 14;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->kpcbj(), target);
  }

  // optional int32 hedge_flag = 15;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->hedge_flag(), target);
  }

  // optional int64 order_price = 16;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->order_price(), target);
  }

  // optional int32 order_qty = 17;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->order_qty(), target);
  }

  // optional int32 time_condition = 18;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->time_condition(), target);
  }

  // optional int32 order_date = 19;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->order_date(), target);
  }

  // optional int32 volume_condition = 20;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->volume_condition(), target);
  }

  // optional int32 min_match_volume = 21;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->min_match_volume(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 contingent_condition = 22;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->contingent_condition(), target);
  }

  // optional int64 stop_price = 23;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->stop_price(), target);
  }

  // optional int32 force_close_reason = 24;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->force_close_reason(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string order_local_id = 25;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_local_id().data(), static_cast<int>(this->order_local_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryOrderResp.order_local_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->order_local_id(), target);
  }

  // optional string exchange_id = 26;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange_id().data(), static_cast<int>(this->exchange_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryOrderResp.exchange_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->exchange_id(), target);
  }

  // optional string participant_id = 27;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->participant_id().data(), static_cast<int>(this->participant_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryOrderResp.participant_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->participant_id(), target);
  }

  // optional string client_id = 28;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryOrderResp.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->client_id(), target);
  }

  // optional string order_submit_status = 29;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_submit_status().data(), static_cast<int>(this->order_submit_status().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryOrderResp.order_submit_status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->order_submit_status(), target);
  }

  // optional string trading_day = 30;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trading_day().data(), static_cast<int>(this->trading_day().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryOrderResp.trading_day");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->trading_day(), target);
  }

  // optional string settlement_id = 31;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->settlement_id().data(), static_cast<int>(this->settlement_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryOrderResp.settlement_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->settlement_id(), target);
  }

  // optional string order_sys_id = 32;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_sys_id().data(), static_cast<int>(this->order_sys_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryOrderResp.order_sys_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->order_sys_id(), target);
  }

  // optional string order_source = 33;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_source().data(), static_cast<int>(this->order_source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryOrderResp.order_source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->order_source(), target);
  }

  // optional string order_status = 34;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_status().data(), static_cast<int>(this->order_status().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryOrderResp.order_status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->order_status(), target);
  }

  // optional string order_type = 35;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_type().data(), static_cast<int>(this->order_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryOrderResp.order_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        35, this->order_type(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 match_qty = 36;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->match_qty(), target);
  }

  // optional int32 remain_qty = 37;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->remain_qty(), target);
  }

  // optional int32 insert_date = 38 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->insert_date(), target);
  }

  // optional int32 insert_time = 39 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->insert_time(), target);
  }

  // optional int32 active_time = 40 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->active_time(), target);
  }

  // optional int32 suspend_time = 41 [default = -1];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->suspend_time(), target);
  }

  // optional int32 update_time = 42 [default = -1];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->update_time(), target);
  }

  // optional int32 cancel_time = 43 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->cancel_time(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string instrument_id = 44;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instrument_id().data(), static_cast<int>(this->instrument_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryOrderResp.instrument_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        44, this->instrument_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.InnerFutureQueryOrderResp)
  return target;
}

size_t InnerFutureQueryOrderResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.InnerFutureQueryOrderResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string broker_id = 2;
    if (has_broker_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->broker_id());
    }

    // optional string future_account = 3;
    if (has_future_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->future_account());
    }

    // optional string request_id = 4;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional string ret_message = 8;
    if (has_ret_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ret_message());
    }

    // optional string order_group = 10;
    if (has_order_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_group());
    }

    // optional string user_id = 11;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

    // optional string order_local_id = 25;
    if (has_order_local_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_local_id());
    }

    // optional string exchange_id = 26;
    if (has_exchange_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange_id());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string participant_id = 27;
    if (has_participant_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->participant_id());
    }

    // optional string client_id = 28;
    if (has_client_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_id());
    }

    // optional string order_submit_status = 29;
    if (has_order_submit_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_submit_status());
    }

    // optional string trading_day = 30;
    if (has_trading_day()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trading_day());
    }

    // optional string settlement_id = 31;
    if (has_settlement_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->settlement_id());
    }

    // optional string order_sys_id = 32;
    if (has_order_sys_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_sys_id());
    }

    // optional string order_source = 33;
    if (has_order_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_source());
    }

    // optional string order_status = 34;
    if (has_order_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_status());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional string order_type = 35;
    if (has_order_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_type());
    }

    // optional string instrument_id = 44;
    if (has_instrument_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrument_id());
    }

    // optional int32 front_id = 5;
    if (has_front_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->front_id());
    }

    // optional int32 session_id = 6;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session_id());
    }

    // optional int32 ret_code = 7 [default = 0];
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional bool islast = 9 [default = false];
    if (has_islast()) {
      total_size += 1 + 1;
    }

    // optional int32 order_price_type = 12;
    if (has_order_price_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order_price_type());
    }

    // optional int32 bsflag = 13;
    if (has_bsflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bsflag());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional int32 kpcbj = 14;
    if (has_kpcbj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kpcbj());
    }

    // optional int32 hedge_flag = 15;
    if (has_hedge_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hedge_flag());
    }

    // optional int64 order_price = 16;
    if (has_order_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->order_price());
    }

    // optional int32 order_qty = 17;
    if (has_order_qty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order_qty());
    }

    // optional int32 time_condition = 18;
    if (has_time_condition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_condition());
    }

    // optional int32 order_date = 19;
    if (has_order_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order_date());
    }

    // optional int32 volume_condition = 20;
    if (has_volume_condition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volume_condition());
    }

    // optional int32 min_match_volume = 21;
    if (has_min_match_volume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_match_volume());
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional int32 contingent_condition = 22;
    if (has_contingent_condition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contingent_condition());
    }

    // optional int64 stop_price = 23;
    if (has_stop_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->stop_price());
    }

    // optional int32 force_close_reason = 24;
    if (has_force_close_reason()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->force_close_reason());
    }

    // optional int32 match_qty = 36;
    if (has_match_qty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->match_qty());
    }

    // optional int32 remain_qty = 37;
    if (has_remain_qty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain_qty());
    }

    // optional int32 cancel_time = 43 [default = -1];
    if (has_cancel_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cancel_time());
    }

    // optional int32 funcid = 1 [default = 12103012];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

    // optional int32 insert_date = 38 [default = -1];
    if (has_insert_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->insert_date());
    }

  }
  if (_has_bits_[40 / 32] & 3840u) {
    // optional int32 insert_time = 39 [default = -1];
    if (has_insert_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->insert_time());
    }

    // optional int32 active_time = 40 [default = -1];
    if (has_active_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active_time());
    }

    // optional int32 suspend_time = 41 [default = -1];
    if (has_suspend_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->suspend_time());
    }

    // optional int32 update_time = 42 [default = -1];
    if (has_update_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->update_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InnerFutureQueryOrderResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.InnerFutureQueryOrderResp)
  GOOGLE_DCHECK_NE(&from, this);
  const InnerFutureQueryOrderResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InnerFutureQueryOrderResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.InnerFutureQueryOrderResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.InnerFutureQueryOrderResp)
    MergeFrom(*source);
  }
}

void InnerFutureQueryOrderResp::MergeFrom(const InnerFutureQueryOrderResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.InnerFutureQueryOrderResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_broker_id();
      broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_future_account();
      future_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.future_account_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_ret_message();
      ret_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_message_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_order_group();
      order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_order_local_id();
      order_local_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_local_id_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_exchange_id();
      exchange_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_id_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_participant_id();
      participant_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.participant_id_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_client_id();
      client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_order_submit_status();
      order_submit_status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_submit_status_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_trading_day();
      trading_day_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trading_day_);
    }
    if (cached_has_bits & 0x00001000u) {
      set_has_settlement_id();
      settlement_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.settlement_id_);
    }
    if (cached_has_bits & 0x00002000u) {
      set_has_order_sys_id();
      order_sys_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_sys_id_);
    }
    if (cached_has_bits & 0x00004000u) {
      set_has_order_source();
      order_source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_source_);
    }
    if (cached_has_bits & 0x00008000u) {
      set_has_order_status();
      order_status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_status_);
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      set_has_order_type();
      order_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_type_);
    }
    if (cached_has_bits & 0x00020000u) {
      set_has_instrument_id();
      instrument_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrument_id_);
    }
    if (cached_has_bits & 0x00040000u) {
      front_id_ = from.front_id_;
    }
    if (cached_has_bits & 0x00080000u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00100000u) {
      ret_code_ = from.ret_code_;
    }
    if (cached_has_bits & 0x00200000u) {
      islast_ = from.islast_;
    }
    if (cached_has_bits & 0x00400000u) {
      order_price_type_ = from.order_price_type_;
    }
    if (cached_has_bits & 0x00800000u) {
      bsflag_ = from.bsflag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      kpcbj_ = from.kpcbj_;
    }
    if (cached_has_bits & 0x02000000u) {
      hedge_flag_ = from.hedge_flag_;
    }
    if (cached_has_bits & 0x04000000u) {
      order_price_ = from.order_price_;
    }
    if (cached_has_bits & 0x08000000u) {
      order_qty_ = from.order_qty_;
    }
    if (cached_has_bits & 0x10000000u) {
      time_condition_ = from.time_condition_;
    }
    if (cached_has_bits & 0x20000000u) {
      order_date_ = from.order_date_;
    }
    if (cached_has_bits & 0x40000000u) {
      volume_condition_ = from.volume_condition_;
    }
    if (cached_has_bits & 0x80000000u) {
      min_match_volume_ = from.min_match_volume_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      contingent_condition_ = from.contingent_condition_;
    }
    if (cached_has_bits & 0x00000002u) {
      stop_price_ = from.stop_price_;
    }
    if (cached_has_bits & 0x00000004u) {
      force_close_reason_ = from.force_close_reason_;
    }
    if (cached_has_bits & 0x00000008u) {
      match_qty_ = from.match_qty_;
    }
    if (cached_has_bits & 0x00000010u) {
      remain_qty_ = from.remain_qty_;
    }
    if (cached_has_bits & 0x00000020u) {
      cancel_time_ = from.cancel_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      funcid_ = from.funcid_;
    }
    if (cached_has_bits & 0x00000080u) {
      insert_date_ = from.insert_date_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      insert_time_ = from.insert_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      active_time_ = from.active_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      suspend_time_ = from.suspend_time_;
    }
    if (cached_has_bits & 0x00000800u) {
      update_time_ = from.update_time_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void InnerFutureQueryOrderResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.InnerFutureQueryOrderResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InnerFutureQueryOrderResp::CopyFrom(const InnerFutureQueryOrderResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.InnerFutureQueryOrderResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerFutureQueryOrderResp::IsInitialized() const {
  return true;
}

void InnerFutureQueryOrderResp::Swap(InnerFutureQueryOrderResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InnerFutureQueryOrderResp::InternalSwap(InnerFutureQueryOrderResp* other) {
  using std::swap;
  broker_id_.Swap(&other->broker_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  future_account_.Swap(&other->future_account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ret_message_.Swap(&other->ret_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_group_.Swap(&other->order_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_local_id_.Swap(&other->order_local_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_id_.Swap(&other->exchange_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  participant_id_.Swap(&other->participant_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  client_id_.Swap(&other->client_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_submit_status_.Swap(&other->order_submit_status_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trading_day_.Swap(&other->trading_day_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  settlement_id_.Swap(&other->settlement_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_sys_id_.Swap(&other->order_sys_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_source_.Swap(&other->order_source_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_status_.Swap(&other->order_status_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_type_.Swap(&other->order_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  instrument_id_.Swap(&other->instrument_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(front_id_, other->front_id_);
  swap(session_id_, other->session_id_);
  swap(ret_code_, other->ret_code_);
  swap(islast_, other->islast_);
  swap(order_price_type_, other->order_price_type_);
  swap(bsflag_, other->bsflag_);
  swap(kpcbj_, other->kpcbj_);
  swap(hedge_flag_, other->hedge_flag_);
  swap(order_price_, other->order_price_);
  swap(order_qty_, other->order_qty_);
  swap(time_condition_, other->time_condition_);
  swap(order_date_, other->order_date_);
  swap(volume_condition_, other->volume_condition_);
  swap(min_match_volume_, other->min_match_volume_);
  swap(contingent_condition_, other->contingent_condition_);
  swap(stop_price_, other->stop_price_);
  swap(force_close_reason_, other->force_close_reason_);
  swap(match_qty_, other->match_qty_);
  swap(remain_qty_, other->remain_qty_);
  swap(cancel_time_, other->cancel_time_);
  swap(funcid_, other->funcid_);
  swap(insert_date_, other->insert_date_);
  swap(insert_time_, other->insert_time_);
  swap(active_time_, other->active_time_);
  swap(suspend_time_, other->suspend_time_);
  swap(update_time_, other->update_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata InnerFutureQueryOrderResp::GetMetadata() const {
  protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InnerQueryTradeReqt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InnerQueryTradeReqt::kFuncidFieldNumber;
const int InnerQueryTradeReqt::kBrokerIdFieldNumber;
const int InnerQueryTradeReqt::kFutureAccountFieldNumber;
const int InnerQueryTradeReqt::kInstrumentIdFieldNumber;
const int InnerQueryTradeReqt::kExchangeIdFieldNumber;
const int InnerQueryTradeReqt::kOrderSysIdFieldNumber;
const int InnerQueryTradeReqt::kInsertTimeStartFieldNumber;
const int InnerQueryTradeReqt::kInsertTimeEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InnerQueryTradeReqt::InnerQueryTradeReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_InnerQueryTradeReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.InnerQueryTradeReqt)
}
InnerQueryTradeReqt::InnerQueryTradeReqt(const InnerQueryTradeReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_broker_id()) {
    broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
  }
  future_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_future_account()) {
    future_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.future_account_);
  }
  instrument_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_instrument_id()) {
    instrument_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrument_id_);
  }
  exchange_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exchange_id()) {
    exchange_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_id_);
  }
  order_sys_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_sys_id()) {
    order_sys_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_sys_id_);
  }
  insert_time_start_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_insert_time_start()) {
    insert_time_start_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.insert_time_start_);
  }
  insert_time_end_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_insert_time_end()) {
    insert_time_end_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.insert_time_end_);
  }
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:autotrade.InnerQueryTradeReqt)
}

void InnerQueryTradeReqt::SharedCtor() {
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  future_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrument_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_sys_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  insert_time_start_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  insert_time_end_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  funcid_ = 12003013;
}

InnerQueryTradeReqt::~InnerQueryTradeReqt() {
  // @@protoc_insertion_point(destructor:autotrade.InnerQueryTradeReqt)
  SharedDtor();
}

void InnerQueryTradeReqt::SharedDtor() {
  broker_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  future_account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrument_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_sys_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  insert_time_start_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  insert_time_end_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InnerQueryTradeReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* InnerQueryTradeReqt::descriptor() {
  ::protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InnerQueryTradeReqt& InnerQueryTradeReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_InnerQueryTradeReqt.base);
  return *internal_default_instance();
}


void InnerQueryTradeReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.InnerQueryTradeReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      broker_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      future_account_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      instrument_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      exchange_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      order_sys_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      insert_time_start_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      insert_time_end_.ClearNonDefaultToEmptyNoArena();
    }
    funcid_ = 12003013;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InnerQueryTradeReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.InnerQueryTradeReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 12003013];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string broker_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_broker_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->broker_id().data(), static_cast<int>(this->broker_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerQueryTradeReqt.broker_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string future_account = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_future_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->future_account().data(), static_cast<int>(this->future_account().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerQueryTradeReqt.future_account");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string instrument_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrument_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->instrument_id().data(), static_cast<int>(this->instrument_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerQueryTradeReqt.instrument_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string exchange_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange_id().data(), static_cast<int>(this->exchange_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerQueryTradeReqt.exchange_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_sys_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_sys_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_sys_id().data(), static_cast<int>(this->order_sys_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerQueryTradeReqt.order_sys_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string insert_time_start = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_insert_time_start()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->insert_time_start().data(), static_cast<int>(this->insert_time_start().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerQueryTradeReqt.insert_time_start");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string insert_time_end = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_insert_time_end()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->insert_time_end().data(), static_cast<int>(this->insert_time_end().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerQueryTradeReqt.insert_time_end");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.InnerQueryTradeReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.InnerQueryTradeReqt)
  return false;
#undef DO_
}

void InnerQueryTradeReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.InnerQueryTradeReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12003013];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional string broker_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerQueryTradeReqt.broker_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->broker_id(), output);
  }

  // optional string future_account = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->future_account().data(), static_cast<int>(this->future_account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerQueryTradeReqt.future_account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->future_account(), output);
  }

  // optional string instrument_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instrument_id().data(), static_cast<int>(this->instrument_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerQueryTradeReqt.instrument_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->instrument_id(), output);
  }

  // optional string exchange_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange_id().data(), static_cast<int>(this->exchange_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerQueryTradeReqt.exchange_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->exchange_id(), output);
  }

  // optional string order_sys_id = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_sys_id().data(), static_cast<int>(this->order_sys_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerQueryTradeReqt.order_sys_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->order_sys_id(), output);
  }

  // optional string insert_time_start = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->insert_time_start().data(), static_cast<int>(this->insert_time_start().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerQueryTradeReqt.insert_time_start");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->insert_time_start(), output);
  }

  // optional string insert_time_end = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->insert_time_end().data(), static_cast<int>(this->insert_time_end().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerQueryTradeReqt.insert_time_end");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->insert_time_end(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.InnerQueryTradeReqt)
}

::google::protobuf::uint8* InnerQueryTradeReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.InnerQueryTradeReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12003013];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional string broker_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerQueryTradeReqt.broker_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->broker_id(), target);
  }

  // optional string future_account = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->future_account().data(), static_cast<int>(this->future_account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerQueryTradeReqt.future_account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->future_account(), target);
  }

  // optional string instrument_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instrument_id().data(), static_cast<int>(this->instrument_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerQueryTradeReqt.instrument_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->instrument_id(), target);
  }

  // optional string exchange_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange_id().data(), static_cast<int>(this->exchange_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerQueryTradeReqt.exchange_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->exchange_id(), target);
  }

  // optional string order_sys_id = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_sys_id().data(), static_cast<int>(this->order_sys_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerQueryTradeReqt.order_sys_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->order_sys_id(), target);
  }

  // optional string insert_time_start = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->insert_time_start().data(), static_cast<int>(this->insert_time_start().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerQueryTradeReqt.insert_time_start");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->insert_time_start(), target);
  }

  // optional string insert_time_end = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->insert_time_end().data(), static_cast<int>(this->insert_time_end().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerQueryTradeReqt.insert_time_end");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->insert_time_end(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.InnerQueryTradeReqt)
  return target;
}

size_t InnerQueryTradeReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.InnerQueryTradeReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string broker_id = 2;
    if (has_broker_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->broker_id());
    }

    // optional string future_account = 3;
    if (has_future_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->future_account());
    }

    // optional string instrument_id = 4;
    if (has_instrument_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrument_id());
    }

    // optional string exchange_id = 5;
    if (has_exchange_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange_id());
    }

    // optional string order_sys_id = 6;
    if (has_order_sys_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_sys_id());
    }

    // optional string insert_time_start = 7;
    if (has_insert_time_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->insert_time_start());
    }

    // optional string insert_time_end = 8;
    if (has_insert_time_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->insert_time_end());
    }

    // optional int32 funcid = 1 [default = 12003013];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InnerQueryTradeReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.InnerQueryTradeReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const InnerQueryTradeReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InnerQueryTradeReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.InnerQueryTradeReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.InnerQueryTradeReqt)
    MergeFrom(*source);
  }
}

void InnerQueryTradeReqt::MergeFrom(const InnerQueryTradeReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.InnerQueryTradeReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_broker_id();
      broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_future_account();
      future_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.future_account_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_instrument_id();
      instrument_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrument_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_exchange_id();
      exchange_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_order_sys_id();
      order_sys_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_sys_id_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_insert_time_start();
      insert_time_start_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.insert_time_start_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_insert_time_end();
      insert_time_end_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.insert_time_end_);
    }
    if (cached_has_bits & 0x00000080u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InnerQueryTradeReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.InnerQueryTradeReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InnerQueryTradeReqt::CopyFrom(const InnerQueryTradeReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.InnerQueryTradeReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerQueryTradeReqt::IsInitialized() const {
  return true;
}

void InnerQueryTradeReqt::Swap(InnerQueryTradeReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InnerQueryTradeReqt::InternalSwap(InnerQueryTradeReqt* other) {
  using std::swap;
  broker_id_.Swap(&other->broker_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  future_account_.Swap(&other->future_account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  instrument_id_.Swap(&other->instrument_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_id_.Swap(&other->exchange_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_sys_id_.Swap(&other->order_sys_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  insert_time_start_.Swap(&other->insert_time_start_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  insert_time_end_.Swap(&other->insert_time_end_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata InnerQueryTradeReqt::GetMetadata() const {
  protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InnerFutureQueryTradeResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InnerFutureQueryTradeResp::kFuncidFieldNumber;
const int InnerFutureQueryTradeResp::kBrokerIdFieldNumber;
const int InnerFutureQueryTradeResp::kFutureAccountFieldNumber;
const int InnerFutureQueryTradeResp::kInstrumentIdFieldNumber;
const int InnerFutureQueryTradeResp::kOrderGroupFieldNumber;
const int InnerFutureQueryTradeResp::kUserIdFieldNumber;
const int InnerFutureQueryTradeResp::kExchangeIdFieldNumber;
const int InnerFutureQueryTradeResp::kMatchIdFieldNumber;
const int InnerFutureQueryTradeResp::kBsflagFieldNumber;
const int InnerFutureQueryTradeResp::kOrderSysIdFieldNumber;
const int InnerFutureQueryTradeResp::kExchangeInstrumentIdFieldNumber;
const int InnerFutureQueryTradeResp::kKpcbjFieldNumber;
const int InnerFutureQueryTradeResp::kHedgeFlagFieldNumber;
const int InnerFutureQueryTradeResp::kMatchPriceFieldNumber;
const int InnerFutureQueryTradeResp::kMatchQtyFieldNumber;
const int InnerFutureQueryTradeResp::kMatchDateFieldNumber;
const int InnerFutureQueryTradeResp::kMatchTimeFieldNumber;
const int InnerFutureQueryTradeResp::kMatchTypeFieldNumber;
const int InnerFutureQueryTradeResp::kOrderLocalIdFieldNumber;
const int InnerFutureQueryTradeResp::kClearingPartIdFieldNumber;
const int InnerFutureQueryTradeResp::kSequenceNoFieldNumber;
const int InnerFutureQueryTradeResp::kTradingDayFieldNumber;
const int InnerFutureQueryTradeResp::kSettlementIdFieldNumber;
const int InnerFutureQueryTradeResp::kRetCodeFieldNumber;
const int InnerFutureQueryTradeResp::kRetMessageFieldNumber;
const int InnerFutureQueryTradeResp::kIslastFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InnerFutureQueryTradeResp::InnerFutureQueryTradeResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_InnerFutureQueryTradeResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.InnerFutureQueryTradeResp)
}
InnerFutureQueryTradeResp::InnerFutureQueryTradeResp(const InnerFutureQueryTradeResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_broker_id()) {
    broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
  }
  future_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_future_account()) {
    future_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.future_account_);
  }
  instrument_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_instrument_id()) {
    instrument_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrument_id_);
  }
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_group()) {
    order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_id()) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  exchange_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exchange_id()) {
    exchange_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_id_);
  }
  match_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_match_id()) {
    match_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_id_);
  }
  order_sys_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_sys_id()) {
    order_sys_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_sys_id_);
  }
  exchange_instrument_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exchange_instrument_id()) {
    exchange_instrument_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_instrument_id_);
  }
  order_local_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_local_id()) {
    order_local_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_local_id_);
  }
  clearing_part_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clearing_part_id()) {
    clearing_part_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clearing_part_id_);
  }
  sequence_no_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sequence_no()) {
    sequence_no_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence_no_);
  }
  ret_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ret_message()) {
    ret_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_message_);
  }
  ::memcpy(&bsflag_, &from.bsflag_,
    static_cast<size_t>(reinterpret_cast<char*>(&funcid_) -
    reinterpret_cast<char*>(&bsflag_)) + sizeof(funcid_));
  // @@protoc_insertion_point(copy_constructor:autotrade.InnerFutureQueryTradeResp)
}

void InnerFutureQueryTradeResp::SharedCtor() {
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  future_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrument_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  match_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_sys_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_instrument_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_local_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clearing_part_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequence_no_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bsflag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&islast_) -
      reinterpret_cast<char*>(&bsflag_)) + sizeof(islast_));
  funcid_ = 12103013;
}

InnerFutureQueryTradeResp::~InnerFutureQueryTradeResp() {
  // @@protoc_insertion_point(destructor:autotrade.InnerFutureQueryTradeResp)
  SharedDtor();
}

void InnerFutureQueryTradeResp::SharedDtor() {
  broker_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  future_account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrument_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  match_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_sys_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_instrument_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_local_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clearing_part_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequence_no_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InnerFutureQueryTradeResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* InnerFutureQueryTradeResp::descriptor() {
  ::protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InnerFutureQueryTradeResp& InnerFutureQueryTradeResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqfuture_5fprotocol_2eproto::scc_info_InnerFutureQueryTradeResp.base);
  return *internal_default_instance();
}


void InnerFutureQueryTradeResp::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.InnerFutureQueryTradeResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      broker_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      future_account_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      instrument_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      order_group_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      user_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      exchange_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      match_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      order_sys_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      exchange_instrument_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000200u) {
      order_local_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000400u) {
      clearing_part_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000800u) {
      sequence_no_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00001000u) {
      ret_message_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 57344u) {
    ::memset(&bsflag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_price_) -
        reinterpret_cast<char*>(&bsflag_)) + sizeof(match_price_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&hedge_flag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_code_) -
        reinterpret_cast<char*>(&hedge_flag_)) + sizeof(ret_code_));
  }
  if (cached_has_bits & 50331648u) {
    islast_ = false;
    funcid_ = 12103013;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InnerFutureQueryTradeResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.InnerFutureQueryTradeResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 12103013];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string broker_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_broker_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->broker_id().data(), static_cast<int>(this->broker_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerFutureQueryTradeResp.broker_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string future_account = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_future_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->future_account().data(), static_cast<int>(this->future_account().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerFutureQueryTradeResp.future_account");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string instrument_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrument_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->instrument_id().data(), static_cast<int>(this->instrument_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerFutureQueryTradeResp.instrument_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_group = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_group().data(), static_cast<int>(this->order_group().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerFutureQueryTradeResp.order_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerFutureQueryTradeResp.user_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string exchange_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange_id().data(), static_cast<int>(this->exchange_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerFutureQueryTradeResp.exchange_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string match_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_match_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->match_id().data(), static_cast<int>(this->match_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerFutureQueryTradeResp.match_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bsflag = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_bsflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bsflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_sys_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_sys_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_sys_id().data(), static_cast<int>(this->order_sys_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerFutureQueryTradeResp.order_sys_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string exchange_instrument_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange_instrument_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange_instrument_id().data(), static_cast<int>(this->exchange_instrument_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerFutureQueryTradeResp.exchange_instrument_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 kpcbj = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_kpcbj();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kpcbj_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hedge_flag = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_hedge_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hedge_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 match_price = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_match_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &match_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 match_qty = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_match_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 match_date = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_match_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 match_time = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_match_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 match_type = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_match_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_local_id = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_local_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_local_id().data(), static_cast<int>(this->order_local_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerFutureQueryTradeResp.order_local_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string clearing_part_id = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clearing_part_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clearing_part_id().data(), static_cast<int>(this->clearing_part_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerFutureQueryTradeResp.clearing_part_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sequence_no = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sequence_no()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sequence_no().data(), static_cast<int>(this->sequence_no().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerFutureQueryTradeResp.sequence_no");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 trading_day = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_trading_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trading_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 settlement_id = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_settlement_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &settlement_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ret_code = 24 [default = 0];
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_ret_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ret_message = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ret_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ret_message().data(), static_cast<int>(this->ret_message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.InnerFutureQueryTradeResp.ret_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool islast = 26 [default = false];
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_islast();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islast_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.InnerFutureQueryTradeResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.InnerFutureQueryTradeResp)
  return false;
#undef DO_
}

void InnerFutureQueryTradeResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.InnerFutureQueryTradeResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12103013];
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional string broker_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryTradeResp.broker_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->broker_id(), output);
  }

  // optional string future_account = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->future_account().data(), static_cast<int>(this->future_account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryTradeResp.future_account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->future_account(), output);
  }

  // optional string instrument_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instrument_id().data(), static_cast<int>(this->instrument_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryTradeResp.instrument_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->instrument_id(), output);
  }

  // optional string order_group = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryTradeResp.order_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->order_group(), output);
  }

  // optional string user_id = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryTradeResp.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->user_id(), output);
  }

  // optional string exchange_id = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange_id().data(), static_cast<int>(this->exchange_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryTradeResp.exchange_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->exchange_id(), output);
  }

  // optional string match_id = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_id().data(), static_cast<int>(this->match_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryTradeResp.match_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->match_id(), output);
  }

  // optional int32 bsflag = 9;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bsflag(), output);
  }

  // optional string order_sys_id = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_sys_id().data(), static_cast<int>(this->order_sys_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryTradeResp.order_sys_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->order_sys_id(), output);
  }

  // optional string exchange_instrument_id = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange_instrument_id().data(), static_cast<int>(this->exchange_instrument_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryTradeResp.exchange_instrument_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->exchange_instrument_id(), output);
  }

  // optional int32 kpcbj = 12;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->kpcbj(), output);
  }

  // optional int32 hedge_flag = 13;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->hedge_flag(), output);
  }

  // optional int64 match_price = 14;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->match_price(), output);
  }

  // optional int32 match_qty = 15;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->match_qty(), output);
  }

  // optional int32 match_date = 16;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->match_date(), output);
  }

  // optional int32 match_time = 17;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->match_time(), output);
  }

  // optional int32 match_type = 18;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->match_type(), output);
  }

  // optional string order_local_id = 19;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_local_id().data(), static_cast<int>(this->order_local_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryTradeResp.order_local_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->order_local_id(), output);
  }

  // optional string clearing_part_id = 20;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clearing_part_id().data(), static_cast<int>(this->clearing_part_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryTradeResp.clearing_part_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->clearing_part_id(), output);
  }

  // optional string sequence_no = 21;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sequence_no().data(), static_cast<int>(this->sequence_no().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryTradeResp.sequence_no");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->sequence_no(), output);
  }

  // optional int32 trading_day = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->trading_day(), output);
  }

  // optional int32 settlement_id = 23;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->settlement_id(), output);
  }

  // optional int32 ret_code = 24 [default = 0];
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->ret_code(), output);
  }

  // optional string ret_message = 25;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_message().data(), static_cast<int>(this->ret_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryTradeResp.ret_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->ret_message(), output);
  }

  // optional bool islast = 26 [default = false];
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->islast(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.InnerFutureQueryTradeResp)
}

::google::protobuf::uint8* InnerFutureQueryTradeResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.InnerFutureQueryTradeResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 12103013];
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional string broker_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryTradeResp.broker_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->broker_id(), target);
  }

  // optional string future_account = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->future_account().data(), static_cast<int>(this->future_account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryTradeResp.future_account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->future_account(), target);
  }

  // optional string instrument_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instrument_id().data(), static_cast<int>(this->instrument_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryTradeResp.instrument_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->instrument_id(), target);
  }

  // optional string order_group = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryTradeResp.order_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->order_group(), target);
  }

  // optional string user_id = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryTradeResp.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->user_id(), target);
  }

  // optional string exchange_id = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange_id().data(), static_cast<int>(this->exchange_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryTradeResp.exchange_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->exchange_id(), target);
  }

  // optional string match_id = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_id().data(), static_cast<int>(this->match_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryTradeResp.match_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->match_id(), target);
  }

  // optional int32 bsflag = 9;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->bsflag(), target);
  }

  // optional string order_sys_id = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_sys_id().data(), static_cast<int>(this->order_sys_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryTradeResp.order_sys_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->order_sys_id(), target);
  }

  // optional string exchange_instrument_id = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange_instrument_id().data(), static_cast<int>(this->exchange_instrument_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryTradeResp.exchange_instrument_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->exchange_instrument_id(), target);
  }

  // optional int32 kpcbj = 12;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->kpcbj(), target);
  }

  // optional int32 hedge_flag = 13;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->hedge_flag(), target);
  }

  // optional int64 match_price = 14;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->match_price(), target);
  }

  // optional int32 match_qty = 15;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->match_qty(), target);
  }

  // optional int32 match_date = 16;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->match_date(), target);
  }

  // optional int32 match_time = 17;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->match_time(), target);
  }

  // optional int32 match_type = 18;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->match_type(), target);
  }

  // optional string order_local_id = 19;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_local_id().data(), static_cast<int>(this->order_local_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryTradeResp.order_local_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->order_local_id(), target);
  }

  // optional string clearing_part_id = 20;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clearing_part_id().data(), static_cast<int>(this->clearing_part_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryTradeResp.clearing_part_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->clearing_part_id(), target);
  }

  // optional string sequence_no = 21;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sequence_no().data(), static_cast<int>(this->sequence_no().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryTradeResp.sequence_no");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->sequence_no(), target);
  }

  // optional int32 trading_day = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->trading_day(), target);
  }

  // optional int32 settlement_id = 23;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->settlement_id(), target);
  }

  // optional int32 ret_code = 24 [default = 0];
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->ret_code(), target);
  }

  // optional string ret_message = 25;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_message().data(), static_cast<int>(this->ret_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.InnerFutureQueryTradeResp.ret_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->ret_message(), target);
  }

  // optional bool islast = 26 [default = false];
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->islast(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.InnerFutureQueryTradeResp)
  return target;
}

size_t InnerFutureQueryTradeResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.InnerFutureQueryTradeResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string broker_id = 2;
    if (has_broker_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->broker_id());
    }

    // optional string future_account = 3;
    if (has_future_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->future_account());
    }

    // optional string instrument_id = 4;
    if (has_instrument_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrument_id());
    }

    // optional string order_group = 5;
    if (has_order_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_group());
    }

    // optional string user_id = 6;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

    // optional string exchange_id = 7;
    if (has_exchange_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange_id());
    }

    // optional string match_id = 8;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->match_id());
    }

    // optional string order_sys_id = 10;
    if (has_order_sys_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_sys_id());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string exchange_instrument_id = 11;
    if (has_exchange_instrument_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange_instrument_id());
    }

    // optional string order_local_id = 19;
    if (has_order_local_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_local_id());
    }

    // optional string clearing_part_id = 20;
    if (has_clearing_part_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clearing_part_id());
    }

    // optional string sequence_no = 21;
    if (has_sequence_no()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sequence_no());
    }

    // optional string ret_message = 25;
    if (has_ret_message()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ret_message());
    }

    // optional int32 bsflag = 9;
    if (has_bsflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bsflag());
    }

    // optional int32 kpcbj = 12;
    if (has_kpcbj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kpcbj());
    }

    // optional int64 match_price = 14;
    if (has_match_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->match_price());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional int32 hedge_flag = 13;
    if (has_hedge_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hedge_flag());
    }

    // optional int32 match_qty = 15;
    if (has_match_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->match_qty());
    }

    // optional int32 match_date = 16;
    if (has_match_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->match_date());
    }

    // optional int32 match_time = 17;
    if (has_match_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->match_time());
    }

    // optional int32 match_type = 18;
    if (has_match_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->match_type());
    }

    // optional int32 trading_day = 22;
    if (has_trading_day()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trading_day());
    }

    // optional int32 settlement_id = 23;
    if (has_settlement_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->settlement_id());
    }

    // optional int32 ret_code = 24 [default = 0];
    if (has_ret_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

  }
  if (_has_bits_[24 / 32] & 50331648u) {
    // optional bool islast = 26 [default = false];
    if (has_islast()) {
      total_size += 2 + 1;
    }

    // optional int32 funcid = 1 [default = 12103013];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InnerFutureQueryTradeResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.InnerFutureQueryTradeResp)
  GOOGLE_DCHECK_NE(&from, this);
  const InnerFutureQueryTradeResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InnerFutureQueryTradeResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.InnerFutureQueryTradeResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.InnerFutureQueryTradeResp)
    MergeFrom(*source);
  }
}

void InnerFutureQueryTradeResp::MergeFrom(const InnerFutureQueryTradeResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.InnerFutureQueryTradeResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_broker_id();
      broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_future_account();
      future_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.future_account_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_instrument_id();
      instrument_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrument_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_order_group();
      order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_exchange_id();
      exchange_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_id_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_match_id();
      match_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_id_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_order_sys_id();
      order_sys_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_sys_id_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_exchange_instrument_id();
      exchange_instrument_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_instrument_id_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_order_local_id();
      order_local_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_local_id_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_clearing_part_id();
      clearing_part_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clearing_part_id_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_sequence_no();
      sequence_no_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence_no_);
    }
    if (cached_has_bits & 0x00001000u) {
      set_has_ret_message();
      ret_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_message_);
    }
    if (cached_has_bits & 0x00002000u) {
      bsflag_ = from.bsflag_;
    }
    if (cached_has_bits & 0x00004000u) {
      kpcbj_ = from.kpcbj_;
    }
    if (cached_has_bits & 0x00008000u) {
      match_price_ = from.match_price_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      hedge_flag_ = from.hedge_flag_;
    }
    if (cached_has_bits & 0x00020000u) {
      match_qty_ = from.match_qty_;
    }
    if (cached_has_bits & 0x00040000u) {
      match_date_ = from.match_date_;
    }
    if (cached_has_bits & 0x00080000u) {
      match_time_ = from.match_time_;
    }
    if (cached_has_bits & 0x00100000u) {
      match_type_ = from.match_type_;
    }
    if (cached_has_bits & 0x00200000u) {
      trading_day_ = from.trading_day_;
    }
    if (cached_has_bits & 0x00400000u) {
      settlement_id_ = from.settlement_id_;
    }
    if (cached_has_bits & 0x00800000u) {
      ret_code_ = from.ret_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 50331648u) {
    if (cached_has_bits & 0x01000000u) {
      islast_ = from.islast_;
    }
    if (cached_has_bits & 0x02000000u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InnerFutureQueryTradeResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.InnerFutureQueryTradeResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InnerFutureQueryTradeResp::CopyFrom(const InnerFutureQueryTradeResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.InnerFutureQueryTradeResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerFutureQueryTradeResp::IsInitialized() const {
  return true;
}

void InnerFutureQueryTradeResp::Swap(InnerFutureQueryTradeResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InnerFutureQueryTradeResp::InternalSwap(InnerFutureQueryTradeResp* other) {
  using std::swap;
  broker_id_.Swap(&other->broker_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  future_account_.Swap(&other->future_account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  instrument_id_.Swap(&other->instrument_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_group_.Swap(&other->order_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_id_.Swap(&other->exchange_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  match_id_.Swap(&other->match_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_sys_id_.Swap(&other->order_sys_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_instrument_id_.Swap(&other->exchange_instrument_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_local_id_.Swap(&other->order_local_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  clearing_part_id_.Swap(&other->clearing_part_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sequence_no_.Swap(&other->sequence_no_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ret_message_.Swap(&other->ret_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bsflag_, other->bsflag_);
  swap(kpcbj_, other->kpcbj_);
  swap(match_price_, other->match_price_);
  swap(hedge_flag_, other->hedge_flag_);
  swap(match_qty_, other->match_qty_);
  swap(match_date_, other->match_date_);
  swap(match_time_, other->match_time_);
  swap(match_type_, other->match_type_);
  swap(trading_day_, other->trading_day_);
  swap(settlement_id_, other->settlement_id_);
  swap(ret_code_, other->ret_code_);
  swap(islast_, other->islast_);
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata InnerFutureQueryTradeResp::GetMetadata() const {
  protobuf_protos_2fqfuture_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqfuture_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace autotrade
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::FutureLoginReqt* Arena::CreateMaybeMessage< ::autotrade::FutureLoginReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::FutureLoginReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::FutureLoginResp* Arena::CreateMaybeMessage< ::autotrade::FutureLoginResp >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::FutureLoginResp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::FutureLogoutReqt* Arena::CreateMaybeMessage< ::autotrade::FutureLogoutReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::FutureLogoutReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::FutureLogoutResp* Arena::CreateMaybeMessage< ::autotrade::FutureLogoutResp >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::FutureLogoutResp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::FutureOrderReqt* Arena::CreateMaybeMessage< ::autotrade::FutureOrderReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::FutureOrderReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::FutureOrderResp* Arena::CreateMaybeMessage< ::autotrade::FutureOrderResp >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::FutureOrderResp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::FutureDeleteReqt* Arena::CreateMaybeMessage< ::autotrade::FutureDeleteReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::FutureDeleteReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::FutureDeleteResp* Arena::CreateMaybeMessage< ::autotrade::FutureDeleteResp >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::FutureDeleteResp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::FutureQueryOrderReqt* Arena::CreateMaybeMessage< ::autotrade::FutureQueryOrderReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::FutureQueryOrderReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::FutureOrderInfo_OrderDetail* Arena::CreateMaybeMessage< ::autotrade::FutureOrderInfo_OrderDetail >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::FutureOrderInfo_OrderDetail >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::FutureOrderInfo* Arena::CreateMaybeMessage< ::autotrade::FutureOrderInfo >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::FutureOrderInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::FutureQueryCaptialReqt* Arena::CreateMaybeMessage< ::autotrade::FutureQueryCaptialReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::FutureQueryCaptialReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::FutureCapital* Arena::CreateMaybeMessage< ::autotrade::FutureCapital >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::FutureCapital >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::FutureQueryPositionReqt* Arena::CreateMaybeMessage< ::autotrade::FutureQueryPositionReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::FutureQueryPositionReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::FuturePosition* Arena::CreateMaybeMessage< ::autotrade::FuturePosition >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::FuturePosition >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::OneFuturePosition* Arena::CreateMaybeMessage< ::autotrade::OneFuturePosition >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::OneFuturePosition >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::FutureQueryDealDetailReqt* Arena::CreateMaybeMessage< ::autotrade::FutureQueryDealDetailReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::FutureQueryDealDetailReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::FutureDealDetail_DealDetail* Arena::CreateMaybeMessage< ::autotrade::FutureDealDetail_DealDetail >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::FutureDealDetail_DealDetail >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::FutureDealDetail* Arena::CreateMaybeMessage< ::autotrade::FutureDealDetail >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::FutureDealDetail >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::OneFutureKnock* Arena::CreateMaybeMessage< ::autotrade::OneFutureKnock >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::OneFutureKnock >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::SumFutureKnock* Arena::CreateMaybeMessage< ::autotrade::SumFutureKnock >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::SumFutureKnock >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::FutureQuerySettlementReqt* Arena::CreateMaybeMessage< ::autotrade::FutureQuerySettlementReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::FutureQuerySettlementReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::FutureQuerySettlementResp* Arena::CreateMaybeMessage< ::autotrade::FutureQuerySettlementResp >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::FutureQuerySettlementResp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::FutureConfirmSettlementReqt* Arena::CreateMaybeMessage< ::autotrade::FutureConfirmSettlementReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::FutureConfirmSettlementReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::FutureConfirmSettlementResp* Arena::CreateMaybeMessage< ::autotrade::FutureConfirmSettlementResp >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::FutureConfirmSettlementResp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::FutureQuerySettlementConfirmReqt* Arena::CreateMaybeMessage< ::autotrade::FutureQuerySettlementConfirmReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::FutureQuerySettlementConfirmReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::FutureQuerySettlementConfirmResp* Arena::CreateMaybeMessage< ::autotrade::FutureQuerySettlementConfirmResp >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::FutureQuerySettlementConfirmResp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::FutureSystemConnected* Arena::CreateMaybeMessage< ::autotrade::FutureSystemConnected >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::FutureSystemConnected >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::FutureSystemDisconnected* Arena::CreateMaybeMessage< ::autotrade::FutureSystemDisconnected >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::FutureSystemDisconnected >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::FutureOrderInsertResp* Arena::CreateMaybeMessage< ::autotrade::FutureOrderInsertResp >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::FutureOrderInsertResp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::FutureOrderActionResp* Arena::CreateMaybeMessage< ::autotrade::FutureOrderActionResp >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::FutureOrderActionResp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::FutureRtnOrderInsertErr* Arena::CreateMaybeMessage< ::autotrade::FutureRtnOrderInsertErr >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::FutureRtnOrderInsertErr >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::FutureRtnOrderActionErr* Arena::CreateMaybeMessage< ::autotrade::FutureRtnOrderActionErr >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::FutureRtnOrderActionErr >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::FutureRtnOrder* Arena::CreateMaybeMessage< ::autotrade::FutureRtnOrder >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::FutureRtnOrder >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::FutureRtnTrade* Arena::CreateMaybeMessage< ::autotrade::FutureRtnTrade >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::FutureRtnTrade >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::InnerQueryOrderReqt* Arena::CreateMaybeMessage< ::autotrade::InnerQueryOrderReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::InnerQueryOrderReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::InnerFutureQueryOrderResp* Arena::CreateMaybeMessage< ::autotrade::InnerFutureQueryOrderResp >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::InnerFutureQueryOrderResp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::InnerQueryTradeReqt* Arena::CreateMaybeMessage< ::autotrade::InnerQueryTradeReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::InnerQueryTradeReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::InnerFutureQueryTradeResp* Arena::CreateMaybeMessage< ::autotrade::InnerFutureQueryTradeResp >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::InnerFutureQueryTradeResp >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
