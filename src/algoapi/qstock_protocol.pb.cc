// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/qstock_protocol.proto

#include "protos/qstock_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_protos_2fqstock_5fprotocol_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fqstock_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ETFBasicInfoQueryResp_ETFBasicInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fqstock_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ETFBasketDynamicInfo_DynamicInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fqstock_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ETFBasketListQueryResp_ConstituentStockInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fqstock_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OneStockKnock;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fqstock_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RawStockKnock;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fqstock_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StockOrdersCreateResp_OrderList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fqstock_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StockOrdersReqt_SingleOrder;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fqstock_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StockOrdersResp_OrderResult;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fqstock_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StockPosition_Position;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fqstock_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StockQueryOrderResp_OrderDetail;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fqstock_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StockQueryOrdersResp_OrderDetail;
}  // namespace protobuf_protos_2fqstock_5fprotocol_2eproto
namespace autotrade {
class StockLoginReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StockLoginReqt>
      _instance;
} _StockLoginReqt_default_instance_;
class StockLoginRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StockLoginResp>
      _instance;
} _StockLoginResp_default_instance_;
class StockOrderReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StockOrderReqt>
      _instance;
} _StockOrderReqt_default_instance_;
class StockOrderRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StockOrderResp>
      _instance;
} _StockOrderResp_default_instance_;
class StockOrdersReqt_SingleOrderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StockOrdersReqt_SingleOrder>
      _instance;
} _StockOrdersReqt_SingleOrder_default_instance_;
class StockOrdersReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StockOrdersReqt>
      _instance;
} _StockOrdersReqt_default_instance_;
class StockOrdersResp_OrderResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StockOrdersResp_OrderResult>
      _instance;
} _StockOrdersResp_OrderResult_default_instance_;
class StockOrdersRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StockOrdersResp>
      _instance;
} _StockOrdersResp_default_instance_;
class StockOrdersRecievedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StockOrdersRecieved>
      _instance;
} _StockOrdersRecieved_default_instance_;
class StockOrdersCreateResp_OrderListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StockOrdersCreateResp_OrderList>
      _instance;
} _StockOrdersCreateResp_OrderList_default_instance_;
class StockOrdersCreateRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StockOrdersCreateResp>
      _instance;
} _StockOrdersCreateResp_default_instance_;
class StockDeleteReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StockDeleteReqt>
      _instance;
} _StockDeleteReqt_default_instance_;
class StockDeleteRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StockDeleteResp>
      _instance;
} _StockDeleteResp_default_instance_;
class StockDeletesReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StockDeletesReqt>
      _instance;
} _StockDeletesReqt_default_instance_;
class StockDeletesRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StockDeletesResp>
      _instance;
} _StockDeletesResp_default_instance_;
class StockCreateRedeemReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StockCreateRedeemReqt>
      _instance;
} _StockCreateRedeemReqt_default_instance_;
class StockCreateRedeemRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StockCreateRedeemResp>
      _instance;
} _StockCreateRedeemResp_default_instance_;
class StockQueryOrderReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StockQueryOrderReqt>
      _instance;
} _StockQueryOrderReqt_default_instance_;
class StockQueryOrderResp_OrderDetailDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StockQueryOrderResp_OrderDetail>
      _instance;
} _StockQueryOrderResp_OrderDetail_default_instance_;
class StockQueryOrderRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StockQueryOrderResp>
      _instance;
} _StockQueryOrderResp_default_instance_;
class StockQueryOrdersReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StockQueryOrdersReqt>
      _instance;
} _StockQueryOrdersReqt_default_instance_;
class StockQueryOrdersResp_OrderDetailDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StockQueryOrdersResp_OrderDetail>
      _instance;
} _StockQueryOrdersResp_OrderDetail_default_instance_;
class StockQueryOrdersRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StockQueryOrdersResp>
      _instance;
} _StockQueryOrdersResp_default_instance_;
class ETFBasicInfoQueryReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ETFBasicInfoQueryReqt>
      _instance;
} _ETFBasicInfoQueryReqt_default_instance_;
class ETFBasicInfoQueryResp_ETFBasicInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ETFBasicInfoQueryResp_ETFBasicInfo>
      _instance;
} _ETFBasicInfoQueryResp_ETFBasicInfo_default_instance_;
class ETFBasicInfoQueryRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ETFBasicInfoQueryResp>
      _instance;
} _ETFBasicInfoQueryResp_default_instance_;
class ETFBasketListQueryReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ETFBasketListQueryReqt>
      _instance;
} _ETFBasketListQueryReqt_default_instance_;
class ETFBasketListQueryResp_ConstituentStockInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ETFBasketListQueryResp_ConstituentStockInfo>
      _instance;
} _ETFBasketListQueryResp_ConstituentStockInfo_default_instance_;
class ETFBasketListQueryRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ETFBasketListQueryResp>
      _instance;
} _ETFBasketListQueryResp_default_instance_;
class StockQueryCaptialReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StockQueryCaptialReqt>
      _instance;
} _StockQueryCaptialReqt_default_instance_;
class StockQueryCapitalReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StockQueryCapitalReqt>
      _instance;
} _StockQueryCapitalReqt_default_instance_;
class StockCapitalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StockCapital>
      _instance;
} _StockCapital_default_instance_;
class StockQueryPositionReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StockQueryPositionReqt>
      _instance;
} _StockQueryPositionReqt_default_instance_;
class StockPosition_PositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StockPosition_Position>
      _instance;
} _StockPosition_Position_default_instance_;
class StockPositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StockPosition>
      _instance;
} _StockPosition_default_instance_;
class StockQueryDealDetailReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StockQueryDealDetailReqt>
      _instance;
} _StockQueryDealDetailReqt_default_instance_;
class StockDealDetailDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StockDealDetail>
      _instance;
} _StockDealDetail_default_instance_;
class ETFBasketDynamicInfoReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ETFBasketDynamicInfoReqt>
      _instance;
} _ETFBasketDynamicInfoReqt_default_instance_;
class ETFBasketDynamicInfo_DynamicInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ETFBasketDynamicInfo_DynamicInfo>
      _instance;
} _ETFBasketDynamicInfo_DynamicInfo_default_instance_;
class ETFBasketDynamicInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ETFBasketDynamicInfo>
      _instance;
} _ETFBasketDynamicInfo_default_instance_;
class RawStockKnockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RawStockKnock>
      _instance;
} _RawStockKnock_default_instance_;
class OneStockKnockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OneStockKnock>
      _instance;
} _OneStockKnock_default_instance_;
class SumStockKnockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SumStockKnock>
      _instance;
} _SumStockKnock_default_instance_;
class CStockAvailableBalanceQueryReqtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CStockAvailableBalanceQueryReqt>
      _instance;
} _CStockAvailableBalanceQueryReqt_default_instance_;
class CStockAvailableBalanceQueryRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CStockAvailableBalanceQueryResp>
      _instance;
} _CStockAvailableBalanceQueryResp_default_instance_;
}  // namespace autotrade
namespace protobuf_protos_2fqstock_5fprotocol_2eproto {
static void InitDefaultsStockLoginReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_StockLoginReqt_default_instance_;
    new (ptr) ::autotrade::StockLoginReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::StockLoginReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StockLoginReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStockLoginReqt}, {}};

static void InitDefaultsStockLoginResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_StockLoginResp_default_instance_;
    new (ptr) ::autotrade::StockLoginResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::StockLoginResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StockLoginResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStockLoginResp}, {}};

static void InitDefaultsStockOrderReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_StockOrderReqt_default_instance_;
    new (ptr) ::autotrade::StockOrderReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::StockOrderReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StockOrderReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStockOrderReqt}, {}};

static void InitDefaultsStockOrderResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_StockOrderResp_default_instance_;
    new (ptr) ::autotrade::StockOrderResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::StockOrderResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StockOrderResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStockOrderResp}, {}};

static void InitDefaultsStockOrdersReqt_SingleOrder() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_StockOrdersReqt_SingleOrder_default_instance_;
    new (ptr) ::autotrade::StockOrdersReqt_SingleOrder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::StockOrdersReqt_SingleOrder::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StockOrdersReqt_SingleOrder =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStockOrdersReqt_SingleOrder}, {}};

static void InitDefaultsStockOrdersReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_StockOrdersReqt_default_instance_;
    new (ptr) ::autotrade::StockOrdersReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::StockOrdersReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StockOrdersReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStockOrdersReqt}, {
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockOrdersReqt_SingleOrder.base,}};

static void InitDefaultsStockOrdersResp_OrderResult() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_StockOrdersResp_OrderResult_default_instance_;
    new (ptr) ::autotrade::StockOrdersResp_OrderResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::StockOrdersResp_OrderResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StockOrdersResp_OrderResult =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStockOrdersResp_OrderResult}, {}};

static void InitDefaultsStockOrdersResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_StockOrdersResp_default_instance_;
    new (ptr) ::autotrade::StockOrdersResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::StockOrdersResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StockOrdersResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStockOrdersResp}, {
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockOrdersResp_OrderResult.base,}};

static void InitDefaultsStockOrdersRecieved() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_StockOrdersRecieved_default_instance_;
    new (ptr) ::autotrade::StockOrdersRecieved();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::StockOrdersRecieved::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StockOrdersRecieved =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStockOrdersRecieved}, {}};

static void InitDefaultsStockOrdersCreateResp_OrderList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_StockOrdersCreateResp_OrderList_default_instance_;
    new (ptr) ::autotrade::StockOrdersCreateResp_OrderList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::StockOrdersCreateResp_OrderList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StockOrdersCreateResp_OrderList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStockOrdersCreateResp_OrderList}, {}};

static void InitDefaultsStockOrdersCreateResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_StockOrdersCreateResp_default_instance_;
    new (ptr) ::autotrade::StockOrdersCreateResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::StockOrdersCreateResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StockOrdersCreateResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStockOrdersCreateResp}, {
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockOrdersCreateResp_OrderList.base,}};

static void InitDefaultsStockDeleteReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_StockDeleteReqt_default_instance_;
    new (ptr) ::autotrade::StockDeleteReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::StockDeleteReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StockDeleteReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStockDeleteReqt}, {}};

static void InitDefaultsStockDeleteResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_StockDeleteResp_default_instance_;
    new (ptr) ::autotrade::StockDeleteResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::StockDeleteResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StockDeleteResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStockDeleteResp}, {}};

static void InitDefaultsStockDeletesReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_StockDeletesReqt_default_instance_;
    new (ptr) ::autotrade::StockDeletesReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::StockDeletesReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StockDeletesReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStockDeletesReqt}, {}};

static void InitDefaultsStockDeletesResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_StockDeletesResp_default_instance_;
    new (ptr) ::autotrade::StockDeletesResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::StockDeletesResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StockDeletesResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStockDeletesResp}, {}};

static void InitDefaultsStockCreateRedeemReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_StockCreateRedeemReqt_default_instance_;
    new (ptr) ::autotrade::StockCreateRedeemReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::StockCreateRedeemReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StockCreateRedeemReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStockCreateRedeemReqt}, {}};

static void InitDefaultsStockCreateRedeemResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_StockCreateRedeemResp_default_instance_;
    new (ptr) ::autotrade::StockCreateRedeemResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::StockCreateRedeemResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StockCreateRedeemResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStockCreateRedeemResp}, {}};

static void InitDefaultsStockQueryOrderReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_StockQueryOrderReqt_default_instance_;
    new (ptr) ::autotrade::StockQueryOrderReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::StockQueryOrderReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StockQueryOrderReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStockQueryOrderReqt}, {}};

static void InitDefaultsStockQueryOrderResp_OrderDetail() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_StockQueryOrderResp_OrderDetail_default_instance_;
    new (ptr) ::autotrade::StockQueryOrderResp_OrderDetail();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::StockQueryOrderResp_OrderDetail::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StockQueryOrderResp_OrderDetail =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStockQueryOrderResp_OrderDetail}, {}};

static void InitDefaultsStockQueryOrderResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_StockQueryOrderResp_default_instance_;
    new (ptr) ::autotrade::StockQueryOrderResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::StockQueryOrderResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StockQueryOrderResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStockQueryOrderResp}, {
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockQueryOrderResp_OrderDetail.base,}};

static void InitDefaultsStockQueryOrdersReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_StockQueryOrdersReqt_default_instance_;
    new (ptr) ::autotrade::StockQueryOrdersReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::StockQueryOrdersReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StockQueryOrdersReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStockQueryOrdersReqt}, {}};

static void InitDefaultsStockQueryOrdersResp_OrderDetail() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_StockQueryOrdersResp_OrderDetail_default_instance_;
    new (ptr) ::autotrade::StockQueryOrdersResp_OrderDetail();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::StockQueryOrdersResp_OrderDetail::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StockQueryOrdersResp_OrderDetail =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStockQueryOrdersResp_OrderDetail}, {}};

static void InitDefaultsStockQueryOrdersResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_StockQueryOrdersResp_default_instance_;
    new (ptr) ::autotrade::StockQueryOrdersResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::StockQueryOrdersResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StockQueryOrdersResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStockQueryOrdersResp}, {
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockQueryOrdersResp_OrderDetail.base,}};

static void InitDefaultsETFBasicInfoQueryReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_ETFBasicInfoQueryReqt_default_instance_;
    new (ptr) ::autotrade::ETFBasicInfoQueryReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::ETFBasicInfoQueryReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ETFBasicInfoQueryReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsETFBasicInfoQueryReqt}, {}};

static void InitDefaultsETFBasicInfoQueryResp_ETFBasicInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_ETFBasicInfoQueryResp_ETFBasicInfo_default_instance_;
    new (ptr) ::autotrade::ETFBasicInfoQueryResp_ETFBasicInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::ETFBasicInfoQueryResp_ETFBasicInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ETFBasicInfoQueryResp_ETFBasicInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsETFBasicInfoQueryResp_ETFBasicInfo}, {}};

static void InitDefaultsETFBasicInfoQueryResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_ETFBasicInfoQueryResp_default_instance_;
    new (ptr) ::autotrade::ETFBasicInfoQueryResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::ETFBasicInfoQueryResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ETFBasicInfoQueryResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsETFBasicInfoQueryResp}, {
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_ETFBasicInfoQueryResp_ETFBasicInfo.base,}};

static void InitDefaultsETFBasketListQueryReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_ETFBasketListQueryReqt_default_instance_;
    new (ptr) ::autotrade::ETFBasketListQueryReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::ETFBasketListQueryReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ETFBasketListQueryReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsETFBasketListQueryReqt}, {}};

static void InitDefaultsETFBasketListQueryResp_ConstituentStockInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_ETFBasketListQueryResp_ConstituentStockInfo_default_instance_;
    new (ptr) ::autotrade::ETFBasketListQueryResp_ConstituentStockInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::ETFBasketListQueryResp_ConstituentStockInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ETFBasketListQueryResp_ConstituentStockInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsETFBasketListQueryResp_ConstituentStockInfo}, {}};

static void InitDefaultsETFBasketListQueryResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_ETFBasketListQueryResp_default_instance_;
    new (ptr) ::autotrade::ETFBasketListQueryResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::ETFBasketListQueryResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ETFBasketListQueryResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsETFBasketListQueryResp}, {
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_ETFBasketListQueryResp_ConstituentStockInfo.base,}};

static void InitDefaultsStockQueryCaptialReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_StockQueryCaptialReqt_default_instance_;
    new (ptr) ::autotrade::StockQueryCaptialReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::StockQueryCaptialReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StockQueryCaptialReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStockQueryCaptialReqt}, {}};

static void InitDefaultsStockQueryCapitalReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_StockQueryCapitalReqt_default_instance_;
    new (ptr) ::autotrade::StockQueryCapitalReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::StockQueryCapitalReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StockQueryCapitalReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStockQueryCapitalReqt}, {}};

static void InitDefaultsStockCapital() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_StockCapital_default_instance_;
    new (ptr) ::autotrade::StockCapital();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::StockCapital::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StockCapital =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStockCapital}, {}};

static void InitDefaultsStockQueryPositionReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_StockQueryPositionReqt_default_instance_;
    new (ptr) ::autotrade::StockQueryPositionReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::StockQueryPositionReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StockQueryPositionReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStockQueryPositionReqt}, {}};

static void InitDefaultsStockPosition_Position() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_StockPosition_Position_default_instance_;
    new (ptr) ::autotrade::StockPosition_Position();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::StockPosition_Position::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StockPosition_Position =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStockPosition_Position}, {}};

static void InitDefaultsStockPosition() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_StockPosition_default_instance_;
    new (ptr) ::autotrade::StockPosition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::StockPosition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StockPosition =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStockPosition}, {
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockPosition_Position.base,}};

static void InitDefaultsStockQueryDealDetailReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_StockQueryDealDetailReqt_default_instance_;
    new (ptr) ::autotrade::StockQueryDealDetailReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::StockQueryDealDetailReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StockQueryDealDetailReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStockQueryDealDetailReqt}, {}};

static void InitDefaultsStockDealDetail() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_StockDealDetail_default_instance_;
    new (ptr) ::autotrade::StockDealDetail();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::StockDealDetail::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StockDealDetail =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStockDealDetail}, {
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_RawStockKnock.base,}};

static void InitDefaultsETFBasketDynamicInfoReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_ETFBasketDynamicInfoReqt_default_instance_;
    new (ptr) ::autotrade::ETFBasketDynamicInfoReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::ETFBasketDynamicInfoReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ETFBasketDynamicInfoReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsETFBasketDynamicInfoReqt}, {}};

static void InitDefaultsETFBasketDynamicInfo_DynamicInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_ETFBasketDynamicInfo_DynamicInfo_default_instance_;
    new (ptr) ::autotrade::ETFBasketDynamicInfo_DynamicInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::ETFBasketDynamicInfo_DynamicInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ETFBasketDynamicInfo_DynamicInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsETFBasketDynamicInfo_DynamicInfo}, {}};

static void InitDefaultsETFBasketDynamicInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_ETFBasketDynamicInfo_default_instance_;
    new (ptr) ::autotrade::ETFBasketDynamicInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::ETFBasketDynamicInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ETFBasketDynamicInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsETFBasketDynamicInfo}, {
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_ETFBasketDynamicInfo_DynamicInfo.base,}};

static void InitDefaultsRawStockKnock() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_RawStockKnock_default_instance_;
    new (ptr) ::autotrade::RawStockKnock();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::RawStockKnock::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RawStockKnock =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRawStockKnock}, {}};

static void InitDefaultsOneStockKnock() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_OneStockKnock_default_instance_;
    new (ptr) ::autotrade::OneStockKnock();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::OneStockKnock::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OneStockKnock =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOneStockKnock}, {}};

static void InitDefaultsSumStockKnock() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::autotrade::SumStockKnock::_i_give_permission_to_break_this_code_default_type_.DefaultConstruct();
  *::autotrade::SumStockKnock::_i_give_permission_to_break_this_code_default_type_.get_mutable() = ::std::string("S", 1);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::autotrade::SumStockKnock::_i_give_permission_to_break_this_code_default_type_.get_mutable());
  {
    void* ptr = &::autotrade::_SumStockKnock_default_instance_;
    new (ptr) ::autotrade::SumStockKnock();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::SumStockKnock::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SumStockKnock =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSumStockKnock}, {
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_OneStockKnock.base,}};

static void InitDefaultsCStockAvailableBalanceQueryReqt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_CStockAvailableBalanceQueryReqt_default_instance_;
    new (ptr) ::autotrade::CStockAvailableBalanceQueryReqt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::CStockAvailableBalanceQueryReqt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CStockAvailableBalanceQueryReqt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCStockAvailableBalanceQueryReqt}, {}};

static void InitDefaultsCStockAvailableBalanceQueryResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autotrade::_CStockAvailableBalanceQueryResp_default_instance_;
    new (ptr) ::autotrade::CStockAvailableBalanceQueryResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autotrade::CStockAvailableBalanceQueryResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CStockAvailableBalanceQueryResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCStockAvailableBalanceQueryResp}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_StockLoginReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StockLoginResp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StockOrderReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StockOrderResp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StockOrdersReqt_SingleOrder.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StockOrdersReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StockOrdersResp_OrderResult.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StockOrdersResp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StockOrdersRecieved.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StockOrdersCreateResp_OrderList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StockOrdersCreateResp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StockDeleteReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StockDeleteResp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StockDeletesReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StockDeletesResp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StockCreateRedeemReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StockCreateRedeemResp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StockQueryOrderReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StockQueryOrderResp_OrderDetail.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StockQueryOrderResp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StockQueryOrdersReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StockQueryOrdersResp_OrderDetail.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StockQueryOrdersResp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ETFBasicInfoQueryReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ETFBasicInfoQueryResp_ETFBasicInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ETFBasicInfoQueryResp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ETFBasketListQueryReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ETFBasketListQueryResp_ConstituentStockInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ETFBasketListQueryResp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StockQueryCaptialReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StockQueryCapitalReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StockCapital.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StockQueryPositionReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StockPosition_Position.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StockPosition.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StockQueryDealDetailReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StockDealDetail.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ETFBasketDynamicInfoReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ETFBasketDynamicInfo_DynamicInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ETFBasketDynamicInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RawStockKnock.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OneStockKnock.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SumStockKnock.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CStockAvailableBalanceQueryReqt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CStockAvailableBalanceQueryResp.base);
}

::google::protobuf::Metadata file_level_metadata[45];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockLoginReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockLoginReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockLoginReqt, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockLoginReqt, request_id_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockLoginResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockLoginResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockLoginResp, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockLoginResp, fund_account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockLoginResp, request_id_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrderReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrderReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrderReqt, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrderReqt, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrderReqt, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrderReqt, qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrderReqt, bsflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrderReqt, market_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrderReqt, order_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrderReqt, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrderReqt, order_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrderReqt, parent_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrderReqt, parent_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrderReqt, robot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrderReqt, trader_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrderReqt, request_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrderReqt, active_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrderReqt, request_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrderReqt, fund_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrderReqt, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrderReqt, name_),
  17,
  0,
  11,
  12,
  13,
  16,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  14,
  18,
  15,
  8,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrderResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrderResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrderResp, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrderResp, order_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrderResp, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrderResp, order_id_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersReqt_SingleOrder, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersReqt_SingleOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersReqt_SingleOrder, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersReqt_SingleOrder, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersReqt_SingleOrder, qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersReqt_SingleOrder, name_),
  0,
  2,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersReqt, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersReqt, order_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersReqt, bsflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersReqt, market_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersReqt, order_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersReqt, order_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersReqt, parent_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersReqt, parent_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersReqt, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersReqt, robot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersReqt, trader_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersReqt, request_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersReqt, active_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersReqt, request_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersReqt, fund_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersReqt, session_id_),
  13,
  ~0u,
  9,
  10,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  11,
  14,
  12,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersResp_OrderResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersResp_OrderResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersResp_OrderResult, ret_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersResp_OrderResult, ret_msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersResp_OrderResult, orderno_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersResp, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersResp, order_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersResp, results_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersResp, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersResp, order_id_),
  3,
  0,
  ~0u,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersRecieved, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersRecieved, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersRecieved, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersRecieved, request_id_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersCreateResp_OrderList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersCreateResp_OrderList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersCreateResp_OrderList, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersCreateResp_OrderList, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersCreateResp_OrderList, qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersCreateResp_OrderList, orderno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersCreateResp_OrderList, ret_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersCreateResp_OrderList, ret_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersCreateResp_OrderList, name_),
  0,
  4,
  5,
  1,
  6,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersCreateResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersCreateResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersCreateResp, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersCreateResp, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersCreateResp, order_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersCreateResp, order_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersCreateResp, trader_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersCreateResp, robot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersCreateResp, data_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersCreateResp, data_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersCreateResp, fund_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersCreateResp, market_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersCreateResp, bsflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersCreateResp, order_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockOrdersCreateResp, account_name_),
  11,
  0,
  1,
  2,
  3,
  4,
  7,
  8,
  5,
  9,
  10,
  ~0u,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockDeleteReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockDeleteReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockDeleteReqt, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockDeleteReqt, order_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockDeleteReqt, market_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockDeleteReqt, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockDeleteReqt, asset_prop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockDeleteReqt, fund_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockDeleteReqt, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockDeleteReqt, trader_id_),
  7,
  0,
  5,
  1,
  6,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockDeleteResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockDeleteResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockDeleteResp, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockDeleteResp, order_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockDeleteResp, request_id_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockDeletesReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockDeletesReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockDeletesReqt, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockDeletesReqt, order_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockDeletesReqt, market_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockDeletesReqt, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockDeletesReqt, asset_prop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockDeletesReqt, fund_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockDeletesReqt, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockDeletesReqt, trader_id_),
  7,
  0,
  5,
  1,
  6,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockDeletesResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockDeletesResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockDeletesResp, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockDeletesResp, order_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockDeletesResp, request_id_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockCreateRedeemReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockCreateRedeemReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockCreateRedeemReqt, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockCreateRedeemReqt, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockCreateRedeemReqt, qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockCreateRedeemReqt, basket_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockCreateRedeemReqt, bsflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockCreateRedeemReqt, market_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockCreateRedeemReqt, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockCreateRedeemReqt, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockCreateRedeemReqt, request_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockCreateRedeemReqt, active_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockCreateRedeemReqt, request_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockCreateRedeemReqt, order_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockCreateRedeemReqt, robot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockCreateRedeemReqt, trader_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockCreateRedeemReqt, fund_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockCreateRedeemReqt, session_id_),
  14,
  0,
  7,
  8,
  9,
  10,
  11,
  1,
  12,
  15,
  13,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockCreateRedeemResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockCreateRedeemResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockCreateRedeemResp, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockCreateRedeemResp, order_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockCreateRedeemResp, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockCreateRedeemResp, order_id_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrderReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrderReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrderReqt, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrderReqt, order_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrderReqt, query_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrderReqt, query_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrderReqt, start_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrderReqt, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrderReqt, request_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrderReqt, active_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrderReqt, fund_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrderReqt, session_id_),
  7,
  0,
  6,
  8,
  1,
  2,
  5,
  9,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrderResp_OrderDetail, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrderResp_OrderDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrderResp_OrderDetail, match_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrderResp_OrderDetail, orderno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrderResp_OrderDetail, bsflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrderResp_OrderDetail, orderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrderResp_OrderDetail, sumbit_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrderResp_OrderDetail, order_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrderResp_OrderDetail, market_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrderResp_OrderDetail, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrderResp_OrderDetail, order_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrderResp_OrderDetail, order_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrderResp_OrderDetail, order_frz_amt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrderResp_OrderDetail, match_amt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrderResp_OrderDetail, match_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrderResp_OrderDetail, cancel_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrderResp_OrderDetail, order_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrderResp_OrderDetail, code_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrderResp_OrderDetail, clear_amt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrderResp_OrderDetail, order_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrderResp_OrderDetail, info_),
  6,
  0,
  8,
  1,
  7,
  10,
  9,
  2,
  11,
  13,
  12,
  15,
  14,
  18,
  16,
  3,
  17,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrderResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrderResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrderResp, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrderResp, detail_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrderResp, last_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrderResp, request_id_),
  2,
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrdersReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrdersReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrdersReqt, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrdersReqt, order_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrdersReqt, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrdersReqt, request_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrdersReqt, active_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrdersReqt, fund_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrdersReqt, session_id_),
  5,
  0,
  1,
  4,
  6,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrdersResp_OrderDetail, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrdersResp_OrderDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrdersResp_OrderDetail, match_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrdersResp_OrderDetail, orderno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrdersResp_OrderDetail, order_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrdersResp_OrderDetail, bsflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrdersResp_OrderDetail, submit_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrdersResp_OrderDetail, order_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrdersResp_OrderDetail, market_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrdersResp_OrderDetail, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrdersResp_OrderDetail, order_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrdersResp_OrderDetail, order_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrdersResp_OrderDetail, order_frz_amt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrdersResp_OrderDetail, match_amt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrdersResp_OrderDetail, match_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrdersResp_OrderDetail, cancel_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrdersResp_OrderDetail, order_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrdersResp_OrderDetail, code_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrdersResp_OrderDetail, clear_amt_),
  5,
  0,
  1,
  7,
  6,
  9,
  8,
  2,
  10,
  12,
  11,
  14,
  13,
  16,
  3,
  4,
  15,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrdersResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrdersResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrdersResp, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrdersResp, detail_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryOrdersResp, request_id_),
  1,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasicInfoQueryReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasicInfoQueryReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasicInfoQueryReqt, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasicInfoQueryReqt, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasicInfoQueryReqt, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasicInfoQueryReqt, request_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasicInfoQueryReqt, active_interval_),
  3,
  0,
  1,
  2,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasicInfoQueryResp_ETFBasicInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasicInfoQueryResp_ETFBasicInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasicInfoQueryResp_ETFBasicInfo, market_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasicInfoQueryResp_ETFBasicInfo, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasicInfoQueryResp_ETFBasicInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasicInfoQueryResp_ETFBasicInfo, level1_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasicInfoQueryResp_ETFBasicInfo, level2_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasicInfoQueryResp_ETFBasicInfo, capital_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasicInfoQueryResp_ETFBasicInfo, trade_unit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasicInfoQueryResp_ETFBasicInfo, ecash_component_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasicInfoQueryResp_ETFBasicInfo, publish_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasicInfoQueryResp_ETFBasicInfo, trade_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasicInfoQueryResp_ETFBasicInfo, record_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasicInfoQueryResp_ETFBasicInfo, trading_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasicInfoQueryResp_ETFBasicInfo, maxcashratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasicInfoQueryResp_ETFBasicInfo, pretrading_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasicInfoQueryResp_ETFBasicInfo, cash_component_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasicInfoQueryResp_ETFBasicInfo, navpercu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasicInfoQueryResp_ETFBasicInfo, nav_),
  9,
  0,
  1,
  2,
  3,
  4,
  10,
  11,
  5,
  6,
  16,
  7,
  12,
  8,
  13,
  14,
  15,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasicInfoQueryResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasicInfoQueryResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasicInfoQueryResp, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasicInfoQueryResp, infos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasicInfoQueryResp, request_id_),
  1,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasketListQueryReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasketListQueryReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasketListQueryReqt, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasketListQueryReqt, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasketListQueryReqt, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasketListQueryReqt, request_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasketListQueryReqt, active_interval_),
  3,
  0,
  1,
  2,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasketListQueryResp_ConstituentStockInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasketListQueryResp_ConstituentStockInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasketListQueryResp_ConstituentStockInfo, market_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasketListQueryResp_ConstituentStockInfo, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasketListQueryResp_ConstituentStockInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasketListQueryResp_ConstituentStockInfo, qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasketListQueryResp_ConstituentStockInfo, replaceflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasketListQueryResp_ConstituentStockInfo, overpricerate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasketListQueryResp_ConstituentStockInfo, replaceamt_),
  3,
  0,
  1,
  4,
  2,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasketListQueryResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasketListQueryResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasketListQueryResp, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasketListQueryResp, stock_infos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasketListQueryResp, request_id_),
  1,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryCaptialReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryCaptialReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryCaptialReqt, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryCaptialReqt, moneytype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryCaptialReqt, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryCaptialReqt, request_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryCaptialReqt, active_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryCaptialReqt, fund_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryCaptialReqt, session_id_),
  5,
  0,
  1,
  4,
  6,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryCapitalReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryCapitalReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryCapitalReqt, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryCapitalReqt, moneytype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryCapitalReqt, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryCapitalReqt, request_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryCapitalReqt, active_interval_),
  3,
  0,
  1,
  2,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockCapital, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockCapital, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockCapital, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockCapital, moneytype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockCapital, fund_bal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockCapital, fund_ava_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockCapital, market_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockCapital, request_id_),
  5,
  0,
  2,
  3,
  4,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryPositionReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryPositionReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryPositionReqt, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryPositionReqt, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryPositionReqt, market_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryPositionReqt, query_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryPositionReqt, query_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryPositionReqt, start_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryPositionReqt, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryPositionReqt, request_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryPositionReqt, active_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryPositionReqt, fund_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryPositionReqt, session_id_),
  8,
  0,
  5,
  9,
  6,
  1,
  2,
  7,
  10,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockPosition_Position, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockPosition_Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockPosition_Position, market_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockPosition_Position, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockPosition_Position, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockPosition_Position, bal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockPosition_Position, can_sell_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockPosition_Position, can_create_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockPosition_Position, can_redeem_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockPosition_Position, buy_frz_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockPosition_Position, sell_frz_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockPosition_Position, td_buy_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockPosition_Position, td_sell_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockPosition_Position, yd_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockPosition_Position, market_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockPosition_Position, cost_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockPosition_Position, start_pos_),
  14,
  0,
  1,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockPosition, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockPosition, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockPosition, positions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockPosition, last_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockPosition, request_id_),
  2,
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryDealDetailReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryDealDetailReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryDealDetailReqt, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryDealDetailReqt, orderno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryDealDetailReqt, query_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryDealDetailReqt, query_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryDealDetailReqt, start_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryDealDetailReqt, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryDealDetailReqt, request_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryDealDetailReqt, active_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryDealDetailReqt, fund_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockQueryDealDetailReqt, session_id_),
  7,
  0,
  8,
  6,
  1,
  2,
  5,
  9,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockDealDetail, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockDealDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockDealDetail, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockDealDetail, knocks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockDealDetail, last_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::StockDealDetail, request_id_),
  2,
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasketDynamicInfoReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasketDynamicInfoReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasketDynamicInfoReqt, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasketDynamicInfoReqt, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasketDynamicInfoReqt, market_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasketDynamicInfoReqt, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasketDynamicInfoReqt, request_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasketDynamicInfoReqt, active_interval_),
  4,
  0,
  3,
  1,
  2,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasketDynamicInfo_DynamicInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasketDynamicInfo_DynamicInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasketDynamicInfo_DynamicInfo, market_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasketDynamicInfo_DynamicInfo, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasketDynamicInfo_DynamicInfo, creatable_qty_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasketDynamicInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasketDynamicInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasketDynamicInfo, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasketDynamicInfo, dynamic_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::ETFBasketDynamicInfo, request_id_),
  1,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawStockKnock, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawStockKnock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawStockKnock, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawStockKnock, stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawStockKnock, order_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawStockKnock, orderno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawStockKnock, market_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawStockKnock, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawStockKnock, order_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawStockKnock, match_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawStockKnock, order_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawStockKnock, bsflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawStockKnock, match_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawStockKnock, clear_amt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawStockKnock, match_amt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawStockKnock, match_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawStockKnock, order_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawStockKnock, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawStockKnock, stock_account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawStockKnock, oppo_account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawStockKnock, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawStockKnock, start_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::RawStockKnock, fund_id_),
  20,
  9,
  0,
  1,
  11,
  2,
  10,
  13,
  12,
  14,
  15,
  16,
  17,
  18,
  19,
  3,
  4,
  5,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneStockKnock, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneStockKnock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneStockKnock, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneStockKnock, stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneStockKnock, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneStockKnock, order_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneStockKnock, orderno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneStockKnock, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneStockKnock, order_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneStockKnock, match_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneStockKnock, order_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneStockKnock, match_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneStockKnock, match_amt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneStockKnock, bsflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::OneStockKnock, fund_id_),
  12,
  5,
  0,
  1,
  2,
  3,
  6,
  7,
  8,
  9,
  10,
  11,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::SumStockKnock, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::SumStockKnock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::SumStockKnock, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::SumStockKnock, stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::SumStockKnock, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::SumStockKnock, order_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::SumStockKnock, order_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::SumStockKnock, match_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::SumStockKnock, match_amt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::SumStockKnock, cancel_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::SumStockKnock, finished_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::SumStockKnock, order_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::SumStockKnock, one_knocks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::SumStockKnock, account_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::SumStockKnock, fund_id_),
  11,
  5,
  0,
  1,
  6,
  7,
  8,
  9,
  10,
  2,
  ~0u,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::CStockAvailableBalanceQueryReqt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::CStockAvailableBalanceQueryReqt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::CStockAvailableBalanceQueryReqt, funcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::CStockAvailableBalanceQueryReqt, fund_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::CStockAvailableBalanceQueryReqt, session_id_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::CStockAvailableBalanceQueryResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::CStockAvailableBalanceQueryResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autotrade::CStockAvailableBalanceQueryResp, funcid_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::autotrade::StockLoginReqt)},
  { 9, 17, sizeof(::autotrade::StockLoginResp)},
  { 20, 44, sizeof(::autotrade::StockOrderReqt)},
  { 63, 72, sizeof(::autotrade::StockOrderResp)},
  { 76, 85, sizeof(::autotrade::StockOrdersReqt_SingleOrder)},
  { 89, 110, sizeof(::autotrade::StockOrdersReqt)},
  { 126, 134, sizeof(::autotrade::StockOrdersResp_OrderResult)},
  { 137, 147, sizeof(::autotrade::StockOrdersResp)},
  { 152, 159, sizeof(::autotrade::StockOrdersRecieved)},
  { 161, 173, sizeof(::autotrade::StockOrdersCreateResp_OrderList)},
  { 180, 198, sizeof(::autotrade::StockOrdersCreateResp)},
  { 211, 224, sizeof(::autotrade::StockDeleteReqt)},
  { 232, 240, sizeof(::autotrade::StockDeleteResp)},
  { 243, 256, sizeof(::autotrade::StockDeletesReqt)},
  { 264, 272, sizeof(::autotrade::StockDeletesResp)},
  { 275, 296, sizeof(::autotrade::StockCreateRedeemReqt)},
  { 312, 321, sizeof(::autotrade::StockCreateRedeemResp)},
  { 325, 340, sizeof(::autotrade::StockQueryOrderReqt)},
  { 350, 374, sizeof(::autotrade::StockQueryOrderResp_OrderDetail)},
  { 393, 402, sizeof(::autotrade::StockQueryOrderResp)},
  { 406, 418, sizeof(::autotrade::StockQueryOrdersReqt)},
  { 425, 447, sizeof(::autotrade::StockQueryOrdersResp_OrderDetail)},
  { 464, 472, sizeof(::autotrade::StockQueryOrdersResp)},
  { 475, 485, sizeof(::autotrade::ETFBasicInfoQueryReqt)},
  { 490, 512, sizeof(::autotrade::ETFBasicInfoQueryResp_ETFBasicInfo)},
  { 529, 537, sizeof(::autotrade::ETFBasicInfoQueryResp)},
  { 540, 550, sizeof(::autotrade::ETFBasketListQueryReqt)},
  { 555, 567, sizeof(::autotrade::ETFBasketListQueryResp_ConstituentStockInfo)},
  { 574, 582, sizeof(::autotrade::ETFBasketListQueryResp)},
  { 585, 597, sizeof(::autotrade::StockQueryCaptialReqt)},
  { 604, 614, sizeof(::autotrade::StockQueryCapitalReqt)},
  { 619, 630, sizeof(::autotrade::StockCapital)},
  { 636, 652, sizeof(::autotrade::StockQueryPositionReqt)},
  { 663, 683, sizeof(::autotrade::StockPosition_Position)},
  { 698, 707, sizeof(::autotrade::StockPosition)},
  { 711, 726, sizeof(::autotrade::StockQueryDealDetailReqt)},
  { 736, 745, sizeof(::autotrade::StockDealDetail)},
  { 749, 760, sizeof(::autotrade::ETFBasketDynamicInfoReqt)},
  { 766, 774, sizeof(::autotrade::ETFBasketDynamicInfo_DynamicInfo)},
  { 777, 785, sizeof(::autotrade::ETFBasketDynamicInfo)},
  { 788, 814, sizeof(::autotrade::RawStockKnock)},
  { 835, 853, sizeof(::autotrade::OneStockKnock)},
  { 866, 884, sizeof(::autotrade::SumStockKnock)},
  { 897, 905, sizeof(::autotrade::CStockAvailableBalanceQueryReqt)},
  { 908, 914, sizeof(::autotrade::CStockAvailableBalanceQueryResp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_StockLoginReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_StockLoginResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_StockOrderReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_StockOrderResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_StockOrdersReqt_SingleOrder_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_StockOrdersReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_StockOrdersResp_OrderResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_StockOrdersResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_StockOrdersRecieved_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_StockOrdersCreateResp_OrderList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_StockOrdersCreateResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_StockDeleteReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_StockDeleteResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_StockDeletesReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_StockDeletesResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_StockCreateRedeemReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_StockCreateRedeemResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_StockQueryOrderReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_StockQueryOrderResp_OrderDetail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_StockQueryOrderResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_StockQueryOrdersReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_StockQueryOrdersResp_OrderDetail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_StockQueryOrdersResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_ETFBasicInfoQueryReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_ETFBasicInfoQueryResp_ETFBasicInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_ETFBasicInfoQueryResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_ETFBasketListQueryReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_ETFBasketListQueryResp_ConstituentStockInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_ETFBasketListQueryResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_StockQueryCaptialReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_StockQueryCapitalReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_StockCapital_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_StockQueryPositionReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_StockPosition_Position_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_StockPosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_StockQueryDealDetailReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_StockDealDetail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_ETFBasketDynamicInfoReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_ETFBasketDynamicInfo_DynamicInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_ETFBasketDynamicInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_RawStockKnock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_OneStockKnock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_SumStockKnock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_CStockAvailableBalanceQueryReqt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autotrade::_CStockAvailableBalanceQueryResp_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "protos/qstock_protocol.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 45);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\034protos/qstock_protocol.proto\022\tautotrad"
      "e\">\n\016StockLoginReqt\022\030\n\006funcid\030\001 \001(\005:\010110"
      "00001\022\022\n\nrequest_id\030\002 \001(\t\"T\n\016StockLoginR"
      "esp\022\030\n\006funcid\030\001 \001(\005:\01011100001\022\024\n\014fund_ac"
      "count\030\002 \002(\t\022\022\n\nrequest_id\030\003 \001(\t\"\377\002\n\016Stoc"
      "kOrderReqt\022\030\n\006funcid\030\001 \001(\005:\01011001001\022\014\n\004"
      "code\030\002 \002(\t\022\r\n\005price\030\003 \002(\003\022\013\n\003qty\030\004 \002(\r\022\016"
      "\n\006bsflag\030\005 \002(\r\022\016\n\006market\030\006 \002(\r\022\020\n\010order_"
      "id\030\007 \002(\t\022\022\n\nrequest_id\030\010 \001(\t\022\022\n\norder_ty"
      "pe\030\t \001(\t\022\021\n\tparent_id\030\n \001(\t\022\023\n\013parent_ty"
      "pe\030\013 \001(\t\022\020\n\010robot_id\030\014 \001(\t\022\021\n\ttrader_id\030"
      "\r \001(\t\022\027\n\014request_time\030\016 \001(\003:\0010\022\035\n\017active"
      "_interval\030\017 \001(\003:\0041000\022\027\n\014request_date\030\020 "
      "\001(\003:\0010\022\017\n\007fund_id\030\021 \001(\t\022\022\n\nsession_id\030\022 "
      "\001(\t\022\014\n\004name\030\023 \001(\t\"e\n\016StockOrderResp\022\030\n\006f"
      "uncid\030\001 \001(\005:\01011101001\022\023\n\013order_group\030\002 \002"
      "(\t\022\022\n\nrequest_id\030\003 \001(\t\022\020\n\010order_id\030\004 \002(\t"
      "\"\313\003\n\017StockOrdersReqt\022\030\n\006funcid\030\001 \001(\005:\01011"
      "001002\022:\n\norder_list\030\002 \003(\0132&.autotrade.S"
      "tockOrdersReqt.SingleOrder\022\016\n\006bsflag\030\003 \002"
      "(\r\022\016\n\006market\030\004 \002(\r\022\020\n\010order_id\030\005 \002(\t\022\022\n\n"
      "order_type\030\006 \001(\t\022\021\n\tparent_id\030\007 \001(\t\022\023\n\013p"
      "arent_type\030\010 \001(\t\022\022\n\nrequest_id\030\t \001(\t\022\020\n\010"
      "robot_id\030\n \001(\t\022\021\n\ttrader_id\030\013 \001(\t\022\027\n\014req"
      "uest_time\030\014 \001(\003:\0010\022\035\n\017active_interval\030\r "
      "\001(\003:\0041000\022\027\n\014request_date\030\016 \001(\003:\0010\022\017\n\007fu"
      "nd_id\030\017 \001(\t\022\022\n\nsession_id\030\020 \001(\t\032E\n\013Singl"
      "eOrder\022\014\n\004code\030\001 \002(\t\022\r\n\005price\030\002 \002(\003\022\013\n\003q"
      "ty\030\003 \002(\r\022\014\n\004name\030\004 \001(\t\"\342\001\n\017StockOrdersRe"
      "sp\022\030\n\006funcid\030\001 \001(\005:\01011101002\022\023\n\013order_gr"
      "oup\030\002 \002(\t\0227\n\007results\030\003 \003(\0132&.autotrade.S"
      "tockOrdersResp.OrderResult\022\022\n\nrequest_id"
      "\030\004 \001(\t\022\020\n\010order_id\030\005 \002(\t\032A\n\013OrderResult\022"
      "\020\n\010ret_code\030\001 \002(\005\022\017\n\007ret_msg\030\002 \001(\t\022\017\n\007or"
      "derno\030\003 \001(\t\"C\n\023StockOrdersRecieved\022\030\n\006fu"
      "ncid\030\001 \001(\005:\01011101010\022\022\n\nrequest_id\030\002 \001(\t"
      "\"\275\003\n\025StockOrdersCreateResp\022\030\n\006funcid\030\001 \001"
      "(\005:\01011101014\022\022\n\nrequest_id\030\002 \001(\t\022\020\n\010orde"
      "r_id\030\003 \002(\t\022\023\n\013order_group\030\004 \002(\t\022\021\n\ttrade"
      "r_id\030\005 \001(\t\022\020\n\010robot_id\030\006 \001(\t\022\021\n\tdata_dat"
      "e\030\007 \001(\r\022\021\n\tdata_time\030\010 \002(\r\022\017\n\007fund_id\030\t "
      "\002(\t\022\016\n\006market\030\n \001(\003\022\016\n\006bsflag\030\013 \001(\003\022>\n\no"
      "rder_list\030\014 \003(\0132*.autotrade.StockOrdersC"
      "reateResp.OrderList\022\026\n\014account_name\030\r \001("
      "\t:\000\032{\n\tOrderList\022\014\n\004code\030\001 \002(\t\022\r\n\005price\030"
      "\002 \002(\003\022\013\n\003qty\030\003 \002(\r\022\017\n\007orderno\030\004 \001(\t\022\020\n\010r"
      "et_code\030\005 \001(\005\022\023\n\013ret_message\030\006 \001(\t\022\014\n\004na"
      "me\030\007 \001(\t\"\260\001\n\017StockDeleteReqt\022\030\n\006funcid\030\001"
      " \001(\005:\01011001004\022\023\n\013order_group\030\002 \002(\t\022\016\n\006m"
      "arket\030\003 \002(\r\022\022\n\nrequest_id\030\004 \001(\t\022\022\n\nasset"
      "_prop\030\005 \001(\005\022\017\n\007fund_id\030\006 \001(\t\022\022\n\nsession_"
      "id\030\007 \001(\t\022\021\n\ttrader_id\030\010 \001(\t\"T\n\017StockDele"
      "teResp\022\030\n\006funcid\030\001 \001(\005:\01011101004\022\023\n\013orde"
      "r_group\030\002 \001(\t\022\022\n\nrequest_id\030\003 \001(\t\"\261\001\n\020St"
      "ockDeletesReqt\022\030\n\006funcid\030\001 \001(\005:\01011001005"
      "\022\023\n\013order_group\030\002 \002(\t\022\016\n\006market\030\003 \002(\r\022\022\n"
      "\nrequest_id\030\004 \001(\t\022\022\n\nasset_prop\030\005 \001(\005\022\017\n"
      "\007fund_id\030\006 \001(\t\022\022\n\nsession_id\030\007 \001(\t\022\021\n\ttr"
      "ader_id\030\010 \001(\t\"U\n\020StockDeletesResp\022\030\n\006fun"
      "cid\030\001 \001(\005:\01011101005\022\023\n\013order_group\030\002 \001(\t"
      "\022\022\n\nrequest_id\030\003 \001(\t\"\320\002\n\025StockCreateRede"
      "emReqt\022\030\n\006funcid\030\001 \001(\005:\01011001003\022\014\n\004code"
      "\030\002 \002(\t\022\013\n\003qty\030\003 \002(\003\022\022\n\nbasket_qty\030\004 \002(\003\022"
      "\016\n\006bsflag\030\005 \002(\r\022\016\n\006market\030\006 \002(\r\022\r\n\005price"
      "\030\007 \001(\003\022\022\n\nrequest_id\030\010 \001(\t\022\027\n\014request_ti"
      "me\030\t \001(\003:\0010\022\035\n\017active_interval\030\n \001(\003:\00410"
      "00\022\027\n\014request_date\030\013 \001(\003:\0010\022\020\n\010order_id\030"
      "\014 \001(\t\022\020\n\010robot_id\030\r \001(\t\022\021\n\ttrader_id\030\016 \001"
      "(\t\022\017\n\007fund_id\030\017 \001(\t\022\022\n\nsession_id\030\020 \001(\t\""
      "l\n\025StockCreateRedeemResp\022\030\n\006funcid\030\001 \001(\005"
      ":\01011101003\022\023\n\013order_group\030\002 \002(\t\022\022\n\nreque"
      "st_id\030\003 \001(\t\022\020\n\010order_id\030\004 \002(\t\"\342\003\n\023StockQ"
      "ueryOrderReqt\022\030\n\006funcid\030\001 \001(\005:\01011002002\022"
      "\025\n\013order_group\030\002 \001(\t:\000\022G\n\nquery_type\030\003 \001"
      "(\0162(.autotrade.StockQueryOrderReqt.Query"
      "Type:\tType_ONCE\022L\n\nquery_flag\030\004 \001(\0162(.au"
      "totrade.StockQueryOrderReqt.QueryFlag:\016T"
      "ype_NO_DELETE\022\023\n\tstart_pos\030\005 \001(\t:\000\022\022\n\nre"
      "quest_id\030\006 \001(\t\022\027\n\014request_time\030\n \001(\003:\0010\022"
      "\035\n\017active_interval\030\013 \001(\003:\0041000\022\017\n\007fund_i"
      "d\030\014 \001(\t\022\022\n\nsession_id\030\r \001(\t\"7\n\tQueryType"
      "\022\r\n\tType_ONCE\020\000\022\r\n\tType_MORE\020\001\022\014\n\010Type_A"
      "LL\020\002\"D\n\tQueryFlag\022\022\n\016Type_Query_ALL\020\000\022\022\n"
      "\016Type_NO_DELETE\020\001\022\017\n\013Type_DELETE\020\002\"\213\004\n\023S"
      "tockQueryOrderResp\022\030\n\006funcid\030\001 \001(\005:\0101110"
      "2002\022\?\n\013detail_list\030\002 \003(\0132*.autotrade.St"
      "ockQueryOrderResp.OrderDetail\022\020\n\010last_po"
      "s\030\003 \001(\t\022\022\n\nrequest_id\030\004 \001(\t\032\362\002\n\013OrderDet"
      "ail\022\022\n\nmatch_time\030\001 \001(\004\022\017\n\007orderno\030\002 \002(\t"
      "\022\016\n\006bsflag\030\003 \002(\r\022\017\n\007orderid\030\004 \001(\t\022\023\n\013sum"
      "bit_time\030\005 \001(\004\022\022\n\norder_time\030\006 \001(\004\022\016\n\006ma"
      "rket\030\007 \002(\r\022\014\n\004code\030\010 \002(\t\022\023\n\013order_price\030"
      "\t \002(\003\022\021\n\torder_qty\030\n \002(\r\022\025\n\rorder_frz_am"
      "t\030\013 \001(\001\022\021\n\tmatch_amt\030\014 \001(\001\022\021\n\tmatch_qty\030"
      "\r \002(\r\022\022\n\ncancel_qty\030\016 \002(\r\022\024\n\014order_statu"
      "s\030\017 \002(\003\022\021\n\tcode_name\030\020 \001(\t\022\021\n\tclear_amt\030"
      "\021 \001(\001\022\023\n\013order_group\030\022 \001(\t\022\014\n\004info\030\023 \001(\t"
      "\"\270\001\n\024StockQueryOrdersReqt\022\030\n\006funcid\030\001 \001("
      "\005:\01011002003\022\025\n\013order_group\030\002 \001(\t:\000\022\022\n\nre"
      "quest_id\030\003 \001(\t\022\027\n\014request_time\030\004 \001(\003:\0010\022"
      "\035\n\017active_interval\030\005 \001(\003:\0041000\022\017\n\007fund_i"
      "d\030\006 \001(\t\022\022\n\nsession_id\030\007 \001(\t\"\334\003\n\024StockQue"
      "ryOrdersResp\022\030\n\006funcid\030\001 \001(\005:\01011102003\022@"
      "\n\013detail_list\030\002 \003(\0132+.autotrade.StockQue"
      "ryOrdersResp.OrderDetail\022\022\n\nrequest_id\030\003"
      " \001(\t\032\323\002\n\013OrderDetail\022\022\n\nmatch_time\030\001 \001(\004"
      "\022\017\n\007orderno\030\002 \002(\t\022\023\n\013order_group\030\003 \002(\t\022\016"
      "\n\006bsflag\030\004 \002(\r\022\023\n\013submit_time\030\005 \001(\004\022\022\n\no"
      "rder_time\030\006 \001(\004\022\016\n\006market\030\007 \002(\r\022\014\n\004code\030"
      "\010 \002(\t\022\023\n\013order_price\030\t \002(\003\022\021\n\torder_qty\030"
      "\n \002(\r\022\025\n\rorder_frz_amt\030\013 \001(\001\022\021\n\tmatch_am"
      "t\030\014 \001(\001\022\021\n\tmatch_qty\030\r \002(\r\022\022\n\ncancel_qty"
      "\030\016 \002(\r\022\024\n\014order_status\030\017 \002(\t\022\021\n\tcode_nam"
      "e\030\020 \002(\t\022\021\n\tclear_amt\030\021 \001(\001\"\213\001\n\025ETFBasicI"
      "nfoQueryReqt\022\030\n\006funcid\030\001 \001(\005:\01011002008\022\014"
      "\n\004code\030\002 \002(\t\022\022\n\nrequest_id\030\003 \001(\t\022\027\n\014requ"
      "est_time\030\004 \001(\003:\0010\022\035\n\017active_interval\030\005 \001"
      "(\003:\0041000\"\345\003\n\025ETFBasicInfoQueryResp\022\030\n\006fu"
      "ncid\030\001 \001(\005:\01011102008\022<\n\005infos\030\002 \003(\0132-.au"
      "totrade.ETFBasicInfoQueryResp.ETFBasicIn"
      "fo\022\022\n\nrequest_id\030\003 \001(\t\032\337\002\n\014ETFBasicInfo\022"
      "\016\n\006market\030\002 \002(\r\022\014\n\004code\030\003 \002(\t\022\014\n\004name\030\004 "
      "\001(\t\022\023\n\013level1_code\030\005 \002(\t\022\023\n\013level2_code\030"
      "\006 \002(\t\022\024\n\014capital_code\030\007 \001(\t\022\022\n\ntrade_uni"
      "t\030\010 \002(\r\022\027\n\017ecash_component\030\t \001(\001\022\024\n\014publ"
      "ish_flag\030\n \002(\t\022\022\n\ntrade_stat\030\013 \002(\t\022\022\n\nre"
      "cord_num\030\014 \002(\r\022\023\n\013trading_day\030\r \002(\t\022\024\n\014m"
      "axcashratio\030\016 \002(\001\022\026\n\016pretrading_day\030\017 \002("
      "\t\022\026\n\016cash_component\030\020 \002(\001\022\020\n\010navpercu\030\021 "
      "\002(\001\022\013\n\003nav\030\022 \002(\001\"\214\001\n\026ETFBasketListQueryR"
      "eqt\022\030\n\006funcid\030\001 \001(\005:\01011002009\022\014\n\004code\030\002 "
      "\002(\t\022\022\n\nrequest_id\030\003 \001(\t\022\027\n\014request_time\030"
      "\004 \001(\003:\0010\022\035\n\017active_interval\030\005 \001(\003:\0041000\""
      "\245\002\n\026ETFBasketListQueryResp\022\030\n\006funcid\030\001 \001"
      "(\005:\01011102009\022K\n\013stock_infos\030\002 \003(\01326.auto"
      "trade.ETFBasketListQueryResp.Constituent"
      "StockInfo\022\022\n\nrequest_id\030\003 \001(\t\032\217\001\n\024Consti"
      "tuentStockInfo\022\016\n\006market\030\001 \002(\r\022\014\n\004code\030\002"
      " \002(\t\022\014\n\004name\030\003 \001(\t\022\013\n\003qty\030\004 \002(\005\022\023\n\013repla"
      "ceflag\030\005 \002(\t\022\025\n\roverpricerate\030\006 \002(\001\022\022\n\nr"
      "eplaceamt\030\007 \002(\001\"\265\001\n\025StockQueryCaptialReq"
      "t\022\030\n\006funcid\030\001 \001(\005:\01011002010\022\021\n\tmoneytype"
      "\030\002 \001(\t\022\022\n\nrequest_id\030\003 \001(\t\022\027\n\014request_ti"
      "me\030\004 \001(\003:\0010\022\035\n\017active_interval\030\005 \001(\003:\00410"
      "00\022\017\n\007fund_id\030\006 \001(\t\022\022\n\nsession_id\030\007 \001(\t\""
      "\220\001\n\025StockQueryCapitalReqt\022\030\n\006funcid\030\001 \001("
      "\005:\01011002010\022\021\n\tmoneytype\030\002 \001(\t\022\022\n\nreques"
      "t_id\030\003 \001(\t\022\027\n\014request_time\030\004 \001(\003:\0010\022\035\n\017a"
      "ctive_interval\030\005 \001(\003:\0041000\"\211\001\n\014StockCapi"
      "tal\022\030\n\006funcid\030\001 \001(\005:\01011102010\022\021\n\tmoneyty"
      "pe\030\002 \001(\t\022\020\n\010fund_bal\030\003 \002(\001\022\020\n\010fund_ava\030\004"
      " \002(\001\022\024\n\014market_value\030\005 \002(\001\022\022\n\nrequest_id"
      "\030\006 \001(\t\"\365\002\n\026StockQueryPositionReqt\022\030\n\006fun"
      "cid\030\001 \001(\005:\01011002006\022\014\n\004code\030\002 \001(\t\022\016\n\006mar"
      "ket\030\003 \001(\r\022\030\n\013query_count\030\004 \001(\r:\003500\022J\n\nq"
      "uery_type\030\005 \001(\0162+.autotrade.StockQueryPo"
      "sitionReqt.QueryType:\tType_ONCE\022\023\n\tstart"
      "_pos\030\006 \001(\t:\000\022\022\n\nrequest_id\030\007 \001(\t\022\027\n\014requ"
      "est_time\030\010 \001(\003:\0010\022\035\n\017active_interval\030\t \001"
      "(\003:\0041000\022\017\n\007fund_id\030\n \001(\t\022\022\n\nsession_id\030"
      "\013 \001(\t\"7\n\tQueryType\022\r\n\tType_ONCE\020\000\022\r\n\tTyp"
      "e_MORE\020\001\022\014\n\010Type_ALL\020\002\"\262\003\n\rStockPosition"
      "\022\030\n\006funcid\030\001 \001(\005:\01011102006\0224\n\tpositions\030"
      "\002 \003(\0132!.autotrade.StockPosition.Position"
      "\022\020\n\010last_pos\030\003 \001(\t\022\022\n\nrequest_id\030\004 \001(\t\032\252"
      "\002\n\010Position\022\016\n\006market\030\001 \002(\r\022\014\n\004code\030\002 \002("
      "\t\022\014\n\004name\030\003 \001(\t\022\013\n\003bal\030\004 \002(\003\022\024\n\014can_sell"
      "_qty\030\005 \002(\003\022\026\n\016can_create_qty\030\006 \001(\003\022\026\n\016ca"
      "n_redeem_qty\030\007 \001(\003\022\023\n\013buy_frz_qty\030\010 \001(\003\022"
      "\024\n\014sell_frz_qty\030\t \001(\003\022\022\n\ntd_buy_qty\030\n \001("
      "\003\022\023\n\013td_sell_qty\030\013 \001(\003\022\016\n\006yd_qty\030\014 \001(\003\022\024"
      "\n\014market_value\030\r \002(\001\022\022\n\ncost_price\030\016 \002(\001"
      "\022\021\n\tstart_pos\030\017 \001(\t\"\356\002\n\030StockQueryDealDe"
      "tailReqt\022\030\n\006funcid\030\001 \001(\005:\01011002004\022\021\n\007or"
      "derno\030\002 \001(\t:\000\022\030\n\013query_count\030\003 \001(\r:\003500\022"
      "L\n\nquery_type\030\004 \001(\0162-.autotrade.StockQue"
      "ryDealDetailReqt.QueryType:\tType_ONCE\022\023\n"
      "\tstart_pos\030\005 \001(\t:\000\022\022\n\nrequest_id\030\006 \001(\t\022\027"
      "\n\014request_time\030\007 \001(\003:\0010\022\035\n\017active_interv"
      "al\030\010 \001(\003:\0041000\022\017\n\007fund_id\030\t \001(\t\022\022\n\nsessi"
      "on_id\030\n \001(\t\"7\n\tQueryType\022\r\n\tType_ONCE\020\000\022"
      "\r\n\tType_MORE\020\001\022\014\n\010Type_ALL\020\002\"{\n\017StockDea"
      "lDetail\022\030\n\006funcid\030\001 \001(\005:\01011102004\022(\n\006kno"
      "cks\030\002 \003(\0132\030.autotrade.RawStockKnock\022\020\n\010l"
      "ast_pos\030\003 \001(\t\022\022\n\nrequest_id\030\004 \001(\t\"\236\001\n\030ET"
      "FBasketDynamicInfoReqt\022\030\n\006funcid\030\001 \001(\005:\010"
      "11002011\022\014\n\004code\030\002 \002(\t\022\016\n\006market\030\003 \002(\r\022\022"
      "\n\nrequest_id\030\004 \001(\t\022\027\n\014request_time\030\005 \001(\003"
      ":\0010\022\035\n\017active_interval\030\006 \001(\003:\0041000\"\313\001\n\024E"
      "TFBasketDynamicInfo\022\030\n\006funcid\030\001 \001(\005:\010111"
      "02011\022A\n\014dynamic_info\030\002 \003(\0132+.autotrade."
      "ETFBasketDynamicInfo.DynamicInfo\022\022\n\nrequ"
      "est_id\030\003 \001(\t\032B\n\013DynamicInfo\022\016\n\006market\030\001 "
      "\001(\r\022\014\n\004code\030\002 \002(\t\022\025\n\rcreatable_qty\030\003 \002(\r"
      "\"\233\003\n\rRawStockKnock\022\030\n\006funcid\030\001 \001(\005:\0101100"
      "3001\022\r\n\005stamp\030\002 \002(\004\022\023\n\013order_group\030\003 \002(\t"
      "\022\017\n\007orderno\030\004 \002(\t\022\016\n\006market\030\005 \001(\r\022\014\n\004cod"
      "e\030\006 \002(\t\022\023\n\013order_price\030\007 \001(\003\022\021\n\tmatch_qt"
      "y\030\010 \002(\003\022\021\n\torder_qty\030\t \002(\r\022\016\n\006bsflag\030\n \002"
      "(\r\022\022\n\nmatch_type\030\013 \002(\005\022\021\n\tclear_amt\030\014 \001("
      "\001\022\021\n\tmatch_amt\030\r \002(\001\022\023\n\013match_price\030\016 \002("
      "\003\022\022\n\norder_type\030\017 \001(\005\022\020\n\010match_id\030\020 \002(\t\022"
      "\025\n\rstock_account\030\021 \002(\t\022\024\n\014oppo_account\030\022"
      " \001(\t\022\014\n\004name\030\023 \001(\t\022\021\n\tstart_pos\030\024 \001(\t\022\017\n"
      "\007fund_id\030\025 \001(\t\"\202\002\n\rOneStockKnock\022\030\n\006func"
      "id\030\001 \001(\005:\01011003002\022\r\n\005stamp\030\002 \002(\004\022\014\n\004cod"
      "e\030\003 \002(\t\022\023\n\013order_group\030\004 \002(\t\022\017\n\007orderno\030"
      "\005 \002(\t\022\020\n\010match_id\030\006 \002(\t\022\021\n\torder_qty\030\007 \002"
      "(\r\022\021\n\tmatch_qty\030\010 \002(\r\022\023\n\013order_price\030\t \001"
      "(\003\022\023\n\013match_price\030\n \002(\001\022\021\n\tmatch_amt\030\013 \002"
      "(\001\022\016\n\006bsflag\030\014 \002(\r\022\017\n\007fund_id\030\r \001(\t\"\260\002\n\r"
      "SumStockKnock\022\030\n\006funcid\030\001 \001(\005:\01011003003\022"
      "\r\n\005stamp\030\002 \002(\004\022\017\n\004type\030\003 \001(\t:\001S\022\023\n\013order"
      "_group\030\004 \002(\t\022\021\n\torder_qty\030\005 \002(\004\022\021\n\tmatch"
      "_qty\030\006 \002(\004\022\021\n\tmatch_amt\030\007 \001(\001\022\025\n\ncancel_"
      "qty\030\010 \002(\004:\0010\022\027\n\010finished\030\t \002(\010:\005false\022\020\n"
      "\010order_id\030\n \002(\t\022,\n\none_knocks\030\013 \003(\0132\030.au"
      "totrade.OneStockKnock\022\026\n\014account_name\030\014 "
      "\001(\t:\000\022\017\n\007fund_id\030\r \001(\t\"`\n\037CStockAvailabl"
      "eBalanceQueryReqt\022\030\n\006funcid\030\001 \001(\005:\01011003"
      "004\022\017\n\007fund_id\030\002 \001(\t\022\022\n\nsession_id\030\003 \001(\t"
      "\";\n\037CStockAvailableBalanceQueryResp\022\030\n\006f"
      "uncid\030\001 \001(\005:\01011103004B\002H\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 8905);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protos/qstock_protocol.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_protos_2fqstock_5fprotocol_2eproto
namespace autotrade {
const ::google::protobuf::EnumDescriptor* StockQueryOrderReqt_QueryType_descriptor() {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_enum_descriptors[0];
}
bool StockQueryOrderReqt_QueryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StockQueryOrderReqt_QueryType StockQueryOrderReqt::Type_ONCE;
const StockQueryOrderReqt_QueryType StockQueryOrderReqt::Type_MORE;
const StockQueryOrderReqt_QueryType StockQueryOrderReqt::Type_ALL;
const StockQueryOrderReqt_QueryType StockQueryOrderReqt::QueryType_MIN;
const StockQueryOrderReqt_QueryType StockQueryOrderReqt::QueryType_MAX;
const int StockQueryOrderReqt::QueryType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* StockQueryOrderReqt_QueryFlag_descriptor() {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_enum_descriptors[1];
}
bool StockQueryOrderReqt_QueryFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StockQueryOrderReqt_QueryFlag StockQueryOrderReqt::Type_Query_ALL;
const StockQueryOrderReqt_QueryFlag StockQueryOrderReqt::Type_NO_DELETE;
const StockQueryOrderReqt_QueryFlag StockQueryOrderReqt::Type_DELETE;
const StockQueryOrderReqt_QueryFlag StockQueryOrderReqt::QueryFlag_MIN;
const StockQueryOrderReqt_QueryFlag StockQueryOrderReqt::QueryFlag_MAX;
const int StockQueryOrderReqt::QueryFlag_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* StockQueryPositionReqt_QueryType_descriptor() {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_enum_descriptors[2];
}
bool StockQueryPositionReqt_QueryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StockQueryPositionReqt_QueryType StockQueryPositionReqt::Type_ONCE;
const StockQueryPositionReqt_QueryType StockQueryPositionReqt::Type_MORE;
const StockQueryPositionReqt_QueryType StockQueryPositionReqt::Type_ALL;
const StockQueryPositionReqt_QueryType StockQueryPositionReqt::QueryType_MIN;
const StockQueryPositionReqt_QueryType StockQueryPositionReqt::QueryType_MAX;
const int StockQueryPositionReqt::QueryType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* StockQueryDealDetailReqt_QueryType_descriptor() {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_enum_descriptors[3];
}
bool StockQueryDealDetailReqt_QueryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StockQueryDealDetailReqt_QueryType StockQueryDealDetailReqt::Type_ONCE;
const StockQueryDealDetailReqt_QueryType StockQueryDealDetailReqt::Type_MORE;
const StockQueryDealDetailReqt_QueryType StockQueryDealDetailReqt::Type_ALL;
const StockQueryDealDetailReqt_QueryType StockQueryDealDetailReqt::QueryType_MIN;
const StockQueryDealDetailReqt_QueryType StockQueryDealDetailReqt::QueryType_MAX;
const int StockQueryDealDetailReqt::QueryType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void StockLoginReqt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockLoginReqt::kFuncidFieldNumber;
const int StockLoginReqt::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockLoginReqt::StockLoginReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockLoginReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.StockLoginReqt)
}
StockLoginReqt::StockLoginReqt(const StockLoginReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:autotrade.StockLoginReqt)
}

void StockLoginReqt::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  funcid_ = 11000001;
}

StockLoginReqt::~StockLoginReqt() {
  // @@protoc_insertion_point(destructor:autotrade.StockLoginReqt)
  SharedDtor();
}

void StockLoginReqt::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StockLoginReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StockLoginReqt::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StockLoginReqt& StockLoginReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockLoginReqt.base);
  return *internal_default_instance();
}


void StockLoginReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.StockLoginReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    funcid_ = 11000001;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StockLoginReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.StockLoginReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 11000001];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockLoginReqt.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.StockLoginReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.StockLoginReqt)
  return false;
#undef DO_
}

void StockLoginReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.StockLoginReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11000001];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional string request_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockLoginReqt.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.StockLoginReqt)
}

::google::protobuf::uint8* StockLoginReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.StockLoginReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11000001];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional string request_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockLoginReqt.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.StockLoginReqt)
  return target;
}

size_t StockLoginReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.StockLoginReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string request_id = 2;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional int32 funcid = 1 [default = 11000001];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StockLoginReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.StockLoginReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const StockLoginReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StockLoginReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.StockLoginReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.StockLoginReqt)
    MergeFrom(*source);
  }
}

void StockLoginReqt::MergeFrom(const StockLoginReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.StockLoginReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StockLoginReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.StockLoginReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockLoginReqt::CopyFrom(const StockLoginReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.StockLoginReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockLoginReqt::IsInitialized() const {
  return true;
}

void StockLoginReqt::Swap(StockLoginReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockLoginReqt::InternalSwap(StockLoginReqt* other) {
  using std::swap;
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StockLoginReqt::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StockLoginResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockLoginResp::kFuncidFieldNumber;
const int StockLoginResp::kFundAccountFieldNumber;
const int StockLoginResp::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockLoginResp::StockLoginResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockLoginResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.StockLoginResp)
}
StockLoginResp::StockLoginResp(const StockLoginResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fund_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fund_account()) {
    fund_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fund_account_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:autotrade.StockLoginResp)
}

void StockLoginResp::SharedCtor() {
  fund_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  funcid_ = 11100001;
}

StockLoginResp::~StockLoginResp() {
  // @@protoc_insertion_point(destructor:autotrade.StockLoginResp)
  SharedDtor();
}

void StockLoginResp::SharedDtor() {
  fund_account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StockLoginResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StockLoginResp::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StockLoginResp& StockLoginResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockLoginResp.base);
  return *internal_default_instance();
}


void StockLoginResp::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.StockLoginResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      fund_account_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    funcid_ = 11100001;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StockLoginResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.StockLoginResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 11100001];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string fund_account = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fund_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fund_account().data(), static_cast<int>(this->fund_account().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockLoginResp.fund_account");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockLoginResp.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.StockLoginResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.StockLoginResp)
  return false;
#undef DO_
}

void StockLoginResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.StockLoginResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11100001];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // required string fund_account = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fund_account().data(), static_cast<int>(this->fund_account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockLoginResp.fund_account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fund_account(), output);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockLoginResp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.StockLoginResp)
}

::google::protobuf::uint8* StockLoginResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.StockLoginResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11100001];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // required string fund_account = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fund_account().data(), static_cast<int>(this->fund_account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockLoginResp.fund_account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fund_account(), target);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockLoginResp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.StockLoginResp)
  return target;
}

size_t StockLoginResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.StockLoginResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string fund_account = 2;
  if (has_fund_account()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fund_account());
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional string request_id = 3;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional int32 funcid = 1 [default = 11100001];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StockLoginResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.StockLoginResp)
  GOOGLE_DCHECK_NE(&from, this);
  const StockLoginResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StockLoginResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.StockLoginResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.StockLoginResp)
    MergeFrom(*source);
  }
}

void StockLoginResp::MergeFrom(const StockLoginResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.StockLoginResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_fund_account();
      fund_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fund_account_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StockLoginResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.StockLoginResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockLoginResp::CopyFrom(const StockLoginResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.StockLoginResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockLoginResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void StockLoginResp::Swap(StockLoginResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockLoginResp::InternalSwap(StockLoginResp* other) {
  using std::swap;
  fund_account_.Swap(&other->fund_account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StockLoginResp::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StockOrderReqt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockOrderReqt::kFuncidFieldNumber;
const int StockOrderReqt::kCodeFieldNumber;
const int StockOrderReqt::kPriceFieldNumber;
const int StockOrderReqt::kQtyFieldNumber;
const int StockOrderReqt::kBsflagFieldNumber;
const int StockOrderReqt::kMarketFieldNumber;
const int StockOrderReqt::kOrderIdFieldNumber;
const int StockOrderReqt::kRequestIdFieldNumber;
const int StockOrderReqt::kOrderTypeFieldNumber;
const int StockOrderReqt::kParentIdFieldNumber;
const int StockOrderReqt::kParentTypeFieldNumber;
const int StockOrderReqt::kRobotIdFieldNumber;
const int StockOrderReqt::kTraderIdFieldNumber;
const int StockOrderReqt::kRequestTimeFieldNumber;
const int StockOrderReqt::kActiveIntervalFieldNumber;
const int StockOrderReqt::kRequestDateFieldNumber;
const int StockOrderReqt::kFundIdFieldNumber;
const int StockOrderReqt::kSessionIdFieldNumber;
const int StockOrderReqt::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockOrderReqt::StockOrderReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockOrderReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.StockOrderReqt)
}
StockOrderReqt::StockOrderReqt(const StockOrderReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_id()) {
    order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  order_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_type()) {
    order_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_type_);
  }
  parent_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_parent_id()) {
    parent_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_id_);
  }
  parent_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_parent_type()) {
    parent_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_type_);
  }
  robot_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_robot_id()) {
    robot_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robot_id_);
  }
  trader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trader_id()) {
    trader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trader_id_);
  }
  fund_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fund_id()) {
    fund_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fund_id_);
  }
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_session_id()) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_interval_) -
    reinterpret_cast<char*>(&price_)) + sizeof(active_interval_));
  // @@protoc_insertion_point(copy_constructor:autotrade.StockOrderReqt)
}

void StockOrderReqt::SharedCtor() {
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robot_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fund_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&market_) -
      reinterpret_cast<char*>(&price_)) + sizeof(market_));
  funcid_ = 11001001;
  active_interval_ = GOOGLE_LONGLONG(1000);
}

StockOrderReqt::~StockOrderReqt() {
  // @@protoc_insertion_point(destructor:autotrade.StockOrderReqt)
  SharedDtor();
}

void StockOrderReqt::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robot_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trader_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fund_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StockOrderReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StockOrderReqt::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StockOrderReqt& StockOrderReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockOrderReqt.base);
  return *internal_default_instance();
}


void StockOrderReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.StockOrderReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      order_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      order_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      parent_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      parent_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      robot_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      trader_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      fund_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000200u) {
      session_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000400u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 63488u) {
    ::memset(&price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&request_date_) -
        reinterpret_cast<char*>(&price_)) + sizeof(request_date_));
  }
  if (cached_has_bits & 458752u) {
    market_ = 0u;
    funcid_ = 11001001;
    active_interval_ = GOOGLE_LONGLONG(1000);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StockOrderReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.StockOrderReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 11001001];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockOrderReqt.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 price = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 qty = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 bsflag = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_bsflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bsflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 market = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_market();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &market_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string order_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_id().data(), static_cast<int>(this->order_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockOrderReqt.order_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockOrderReqt.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_type().data(), static_cast<int>(this->order_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockOrderReqt.order_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string parent_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parent_id().data(), static_cast<int>(this->parent_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockOrderReqt.parent_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string parent_type = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parent_type().data(), static_cast<int>(this->parent_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockOrderReqt.parent_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string robot_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robot_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->robot_id().data(), static_cast<int>(this->robot_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockOrderReqt.robot_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string trader_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trader_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trader_id().data(), static_cast<int>(this->trader_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockOrderReqt.trader_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 request_time = 14 [default = 0];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_request_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 active_interval = 15 [default = 1000];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_active_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &active_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 request_date = 16 [default = 0];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_request_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fund_id = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fund_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fund_id().data(), static_cast<int>(this->fund_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockOrderReqt.fund_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string session_id = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockOrderReqt.session_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockOrderReqt.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.StockOrderReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.StockOrderReqt)
  return false;
#undef DO_
}

void StockOrderReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.StockOrderReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11001001];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // required string code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrderReqt.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->code(), output);
  }

  // required int64 price = 3;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->price(), output);
  }

  // required uint32 qty = 4;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->qty(), output);
  }

  // required uint32 bsflag = 5;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->bsflag(), output);
  }

  // required uint32 market = 6;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->market(), output);
  }

  // required string order_id = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrderReqt.order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->order_id(), output);
  }

  // optional string request_id = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrderReqt.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->request_id(), output);
  }

  // optional string order_type = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_type().data(), static_cast<int>(this->order_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrderReqt.order_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->order_type(), output);
  }

  // optional string parent_id = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parent_id().data(), static_cast<int>(this->parent_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrderReqt.parent_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->parent_id(), output);
  }

  // optional string parent_type = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parent_type().data(), static_cast<int>(this->parent_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrderReqt.parent_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->parent_type(), output);
  }

  // optional string robot_id = 12;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robot_id().data(), static_cast<int>(this->robot_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrderReqt.robot_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->robot_id(), output);
  }

  // optional string trader_id = 13;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trader_id().data(), static_cast<int>(this->trader_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrderReqt.trader_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->trader_id(), output);
  }

  // optional int64 request_time = 14 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->request_time(), output);
  }

  // optional int64 active_interval = 15 [default = 1000];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->active_interval(), output);
  }

  // optional int64 request_date = 16 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->request_date(), output);
  }

  // optional string fund_id = 17;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fund_id().data(), static_cast<int>(this->fund_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrderReqt.fund_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->fund_id(), output);
  }

  // optional string session_id = 18;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrderReqt.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->session_id(), output);
  }

  // optional string name = 19;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrderReqt.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.StockOrderReqt)
}

::google::protobuf::uint8* StockOrderReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.StockOrderReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11001001];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // required string code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrderReqt.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  // required int64 price = 3;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->price(), target);
  }

  // required uint32 qty = 4;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->qty(), target);
  }

  // required uint32 bsflag = 5;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->bsflag(), target);
  }

  // required uint32 market = 6;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->market(), target);
  }

  // required string order_id = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrderReqt.order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->order_id(), target);
  }

  // optional string request_id = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrderReqt.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->request_id(), target);
  }

  // optional string order_type = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_type().data(), static_cast<int>(this->order_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrderReqt.order_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->order_type(), target);
  }

  // optional string parent_id = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parent_id().data(), static_cast<int>(this->parent_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrderReqt.parent_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->parent_id(), target);
  }

  // optional string parent_type = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parent_type().data(), static_cast<int>(this->parent_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrderReqt.parent_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->parent_type(), target);
  }

  // optional string robot_id = 12;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robot_id().data(), static_cast<int>(this->robot_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrderReqt.robot_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->robot_id(), target);
  }

  // optional string trader_id = 13;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trader_id().data(), static_cast<int>(this->trader_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrderReqt.trader_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->trader_id(), target);
  }

  // optional int64 request_time = 14 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->request_time(), target);
  }

  // optional int64 active_interval = 15 [default = 1000];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->active_interval(), target);
  }

  // optional int64 request_date = 16 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->request_date(), target);
  }

  // optional string fund_id = 17;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fund_id().data(), static_cast<int>(this->fund_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrderReqt.fund_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->fund_id(), target);
  }

  // optional string session_id = 18;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrderReqt.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->session_id(), target);
  }

  // optional string name = 19;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrderReqt.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.StockOrderReqt)
  return target;
}

size_t StockOrderReqt::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autotrade.StockOrderReqt)
  size_t total_size = 0;

  if (has_code()) {
    // required string code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_order_id()) {
    // required string order_id = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_id());
  }

  if (has_price()) {
    // required int64 price = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->price());
  }

  if (has_qty()) {
    // required uint32 qty = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->qty());
  }

  if (has_bsflag()) {
    // required uint32 bsflag = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bsflag());
  }

  if (has_market()) {
    // required uint32 market = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->market());
  }

  return total_size;
}
size_t StockOrderReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.StockOrderReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00013803) ^ 0x00013803) == 0) {  // All required fields are present.
    // required string code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required string order_id = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_id());

    // required int64 price = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->price());

    // required uint32 qty = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->qty());

    // required uint32 bsflag = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bsflag());

    // required uint32 market = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->market());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 252u) {
    // optional string request_id = 8;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional string order_type = 9;
    if (has_order_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_type());
    }

    // optional string parent_id = 10;
    if (has_parent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parent_id());
    }

    // optional string parent_type = 11;
    if (has_parent_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parent_type());
    }

    // optional string robot_id = 12;
    if (has_robot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->robot_id());
    }

    // optional string trader_id = 13;
    if (has_trader_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trader_id());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional string fund_id = 17;
    if (has_fund_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fund_id());
    }

    // optional string session_id = 18;
    if (has_session_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }

    // optional string name = 19;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (_has_bits_[8 / 32] & 49152u) {
    // optional int64 request_time = 14 [default = 0];
    if (has_request_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->request_time());
    }

    // optional int64 request_date = 16 [default = 0];
    if (has_request_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->request_date());
    }

  }
  if (_has_bits_[16 / 32] & 393216u) {
    // optional int32 funcid = 1 [default = 11001001];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

    // optional int64 active_interval = 15 [default = 1000];
    if (has_active_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->active_interval());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StockOrderReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.StockOrderReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const StockOrderReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StockOrderReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.StockOrderReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.StockOrderReqt)
    MergeFrom(*source);
  }
}

void StockOrderReqt::MergeFrom(const StockOrderReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.StockOrderReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_order_id();
      order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_order_type();
      order_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_type_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_parent_id();
      parent_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_id_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_parent_type();
      parent_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_type_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_robot_id();
      robot_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robot_id_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_trader_id();
      trader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trader_id_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_fund_id();
      fund_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fund_id_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_session_id();
      session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000800u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00001000u) {
      qty_ = from.qty_;
    }
    if (cached_has_bits & 0x00002000u) {
      bsflag_ = from.bsflag_;
    }
    if (cached_has_bits & 0x00004000u) {
      request_time_ = from.request_time_;
    }
    if (cached_has_bits & 0x00008000u) {
      request_date_ = from.request_date_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 458752u) {
    if (cached_has_bits & 0x00010000u) {
      market_ = from.market_;
    }
    if (cached_has_bits & 0x00020000u) {
      funcid_ = from.funcid_;
    }
    if (cached_has_bits & 0x00040000u) {
      active_interval_ = from.active_interval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StockOrderReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.StockOrderReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockOrderReqt::CopyFrom(const StockOrderReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.StockOrderReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockOrderReqt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00013803) != 0x00013803) return false;
  return true;
}

void StockOrderReqt::Swap(StockOrderReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockOrderReqt::InternalSwap(StockOrderReqt* other) {
  using std::swap;
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_id_.Swap(&other->order_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_type_.Swap(&other->order_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  parent_id_.Swap(&other->parent_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  parent_type_.Swap(&other->parent_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  robot_id_.Swap(&other->robot_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trader_id_.Swap(&other->trader_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fund_id_.Swap(&other->fund_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  session_id_.Swap(&other->session_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(price_, other->price_);
  swap(qty_, other->qty_);
  swap(bsflag_, other->bsflag_);
  swap(request_time_, other->request_time_);
  swap(request_date_, other->request_date_);
  swap(market_, other->market_);
  swap(funcid_, other->funcid_);
  swap(active_interval_, other->active_interval_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StockOrderReqt::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StockOrderResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockOrderResp::kFuncidFieldNumber;
const int StockOrderResp::kOrderGroupFieldNumber;
const int StockOrderResp::kRequestIdFieldNumber;
const int StockOrderResp::kOrderIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockOrderResp::StockOrderResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockOrderResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.StockOrderResp)
}
StockOrderResp::StockOrderResp(const StockOrderResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_group()) {
    order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_id()) {
    order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
  }
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:autotrade.StockOrderResp)
}

void StockOrderResp::SharedCtor() {
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  funcid_ = 11101001;
}

StockOrderResp::~StockOrderResp() {
  // @@protoc_insertion_point(destructor:autotrade.StockOrderResp)
  SharedDtor();
}

void StockOrderResp::SharedDtor() {
  order_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StockOrderResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StockOrderResp::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StockOrderResp& StockOrderResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockOrderResp.base);
  return *internal_default_instance();
}


void StockOrderResp::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.StockOrderResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      order_group_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      order_id_.ClearNonDefaultToEmptyNoArena();
    }
    funcid_ = 11101001;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StockOrderResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.StockOrderResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 11101001];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string order_group = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_group().data(), static_cast<int>(this->order_group().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockOrderResp.order_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockOrderResp.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string order_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_id().data(), static_cast<int>(this->order_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockOrderResp.order_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.StockOrderResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.StockOrderResp)
  return false;
#undef DO_
}

void StockOrderResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.StockOrderResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11101001];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // required string order_group = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrderResp.order_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->order_group(), output);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrderResp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->request_id(), output);
  }

  // required string order_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrderResp.order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->order_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.StockOrderResp)
}

::google::protobuf::uint8* StockOrderResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.StockOrderResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11101001];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // required string order_group = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrderResp.order_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->order_group(), target);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrderResp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->request_id(), target);
  }

  // required string order_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrderResp.order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->order_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.StockOrderResp)
  return target;
}

size_t StockOrderResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autotrade.StockOrderResp)
  size_t total_size = 0;

  if (has_order_group()) {
    // required string order_group = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_group());
  }

  if (has_order_id()) {
    // required string order_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_id());
  }

  return total_size;
}
size_t StockOrderResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.StockOrderResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string order_group = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_group());

    // required string order_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string request_id = 3;
  if (has_request_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // optional int32 funcid = 1 [default = 11101001];
  if (has_funcid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->funcid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StockOrderResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.StockOrderResp)
  GOOGLE_DCHECK_NE(&from, this);
  const StockOrderResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StockOrderResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.StockOrderResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.StockOrderResp)
    MergeFrom(*source);
  }
}

void StockOrderResp::MergeFrom(const StockOrderResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.StockOrderResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_order_group();
      order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_order_id();
      order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StockOrderResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.StockOrderResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockOrderResp::CopyFrom(const StockOrderResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.StockOrderResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockOrderResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void StockOrderResp::Swap(StockOrderResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockOrderResp::InternalSwap(StockOrderResp* other) {
  using std::swap;
  order_group_.Swap(&other->order_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_id_.Swap(&other->order_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StockOrderResp::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StockOrdersReqt_SingleOrder::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockOrdersReqt_SingleOrder::kCodeFieldNumber;
const int StockOrdersReqt_SingleOrder::kPriceFieldNumber;
const int StockOrdersReqt_SingleOrder::kQtyFieldNumber;
const int StockOrdersReqt_SingleOrder::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockOrdersReqt_SingleOrder::StockOrdersReqt_SingleOrder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockOrdersReqt_SingleOrder.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.StockOrdersReqt.SingleOrder)
}
StockOrdersReqt_SingleOrder::StockOrdersReqt_SingleOrder(const StockOrdersReqt_SingleOrder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&qty_) -
    reinterpret_cast<char*>(&price_)) + sizeof(qty_));
  // @@protoc_insertion_point(copy_constructor:autotrade.StockOrdersReqt.SingleOrder)
}

void StockOrdersReqt_SingleOrder::SharedCtor() {
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qty_) -
      reinterpret_cast<char*>(&price_)) + sizeof(qty_));
}

StockOrdersReqt_SingleOrder::~StockOrdersReqt_SingleOrder() {
  // @@protoc_insertion_point(destructor:autotrade.StockOrdersReqt.SingleOrder)
  SharedDtor();
}

void StockOrdersReqt_SingleOrder::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StockOrdersReqt_SingleOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StockOrdersReqt_SingleOrder::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StockOrdersReqt_SingleOrder& StockOrdersReqt_SingleOrder::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockOrdersReqt_SingleOrder.base);
  return *internal_default_instance();
}


void StockOrdersReqt_SingleOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.StockOrdersReqt.SingleOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&qty_) -
        reinterpret_cast<char*>(&price_)) + sizeof(qty_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StockOrdersReqt_SingleOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.StockOrdersReqt.SingleOrder)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockOrdersReqt.SingleOrder.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 price = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 qty = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockOrdersReqt.SingleOrder.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.StockOrdersReqt.SingleOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.StockOrdersReqt.SingleOrder)
  return false;
#undef DO_
}

void StockOrdersReqt_SingleOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.StockOrdersReqt.SingleOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersReqt.SingleOrder.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->code(), output);
  }

  // required int64 price = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->price(), output);
  }

  // required uint32 qty = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->qty(), output);
  }

  // optional string name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersReqt.SingleOrder.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.StockOrdersReqt.SingleOrder)
}

::google::protobuf::uint8* StockOrdersReqt_SingleOrder::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.StockOrdersReqt.SingleOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersReqt.SingleOrder.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  // required int64 price = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->price(), target);
  }

  // required uint32 qty = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->qty(), target);
  }

  // optional string name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersReqt.SingleOrder.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.StockOrdersReqt.SingleOrder)
  return target;
}

size_t StockOrdersReqt_SingleOrder::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autotrade.StockOrdersReqt.SingleOrder)
  size_t total_size = 0;

  if (has_code()) {
    // required string code = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_price()) {
    // required int64 price = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->price());
  }

  if (has_qty()) {
    // required uint32 qty = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->qty());
  }

  return total_size;
}
size_t StockOrdersReqt_SingleOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.StockOrdersReqt.SingleOrder)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required string code = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required int64 price = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->price());

    // required uint32 qty = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->qty());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string name = 4;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StockOrdersReqt_SingleOrder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.StockOrdersReqt.SingleOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const StockOrdersReqt_SingleOrder* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StockOrdersReqt_SingleOrder>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.StockOrdersReqt.SingleOrder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.StockOrdersReqt.SingleOrder)
    MergeFrom(*source);
  }
}

void StockOrdersReqt_SingleOrder::MergeFrom(const StockOrdersReqt_SingleOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.StockOrdersReqt.SingleOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000008u) {
      qty_ = from.qty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StockOrdersReqt_SingleOrder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.StockOrdersReqt.SingleOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockOrdersReqt_SingleOrder::CopyFrom(const StockOrdersReqt_SingleOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.StockOrdersReqt.SingleOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockOrdersReqt_SingleOrder::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  return true;
}

void StockOrdersReqt_SingleOrder::Swap(StockOrdersReqt_SingleOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockOrdersReqt_SingleOrder::InternalSwap(StockOrdersReqt_SingleOrder* other) {
  using std::swap;
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(price_, other->price_);
  swap(qty_, other->qty_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StockOrdersReqt_SingleOrder::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StockOrdersReqt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockOrdersReqt::kFuncidFieldNumber;
const int StockOrdersReqt::kOrderListFieldNumber;
const int StockOrdersReqt::kBsflagFieldNumber;
const int StockOrdersReqt::kMarketFieldNumber;
const int StockOrdersReqt::kOrderIdFieldNumber;
const int StockOrdersReqt::kOrderTypeFieldNumber;
const int StockOrdersReqt::kParentIdFieldNumber;
const int StockOrdersReqt::kParentTypeFieldNumber;
const int StockOrdersReqt::kRequestIdFieldNumber;
const int StockOrdersReqt::kRobotIdFieldNumber;
const int StockOrdersReqt::kTraderIdFieldNumber;
const int StockOrdersReqt::kRequestTimeFieldNumber;
const int StockOrdersReqt::kActiveIntervalFieldNumber;
const int StockOrdersReqt::kRequestDateFieldNumber;
const int StockOrdersReqt::kFundIdFieldNumber;
const int StockOrdersReqt::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockOrdersReqt::StockOrdersReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockOrdersReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.StockOrdersReqt)
}
StockOrdersReqt::StockOrdersReqt(const StockOrdersReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      order_list_(from.order_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_id()) {
    order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
  }
  order_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_type()) {
    order_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_type_);
  }
  parent_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_parent_id()) {
    parent_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_id_);
  }
  parent_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_parent_type()) {
    parent_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_type_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  robot_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_robot_id()) {
    robot_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robot_id_);
  }
  trader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trader_id()) {
    trader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trader_id_);
  }
  fund_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fund_id()) {
    fund_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fund_id_);
  }
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_session_id()) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  ::memcpy(&bsflag_, &from.bsflag_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_interval_) -
    reinterpret_cast<char*>(&bsflag_)) + sizeof(active_interval_));
  // @@protoc_insertion_point(copy_constructor:autotrade.StockOrdersReqt)
}

void StockOrdersReqt::SharedCtor() {
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robot_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fund_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bsflag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_date_) -
      reinterpret_cast<char*>(&bsflag_)) + sizeof(request_date_));
  funcid_ = 11001002;
  active_interval_ = GOOGLE_LONGLONG(1000);
}

StockOrdersReqt::~StockOrdersReqt() {
  // @@protoc_insertion_point(destructor:autotrade.StockOrdersReqt)
  SharedDtor();
}

void StockOrdersReqt::SharedDtor() {
  order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robot_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trader_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fund_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StockOrdersReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StockOrdersReqt::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StockOrdersReqt& StockOrdersReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockOrdersReqt.base);
  return *internal_default_instance();
}


void StockOrdersReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.StockOrdersReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  order_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      order_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      order_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      parent_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      parent_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      robot_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      trader_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      fund_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    session_id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 32256u) {
    ::memset(&bsflag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&request_date_) -
        reinterpret_cast<char*>(&bsflag_)) + sizeof(request_date_));
    funcid_ = 11001002;
    active_interval_ = GOOGLE_LONGLONG(1000);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StockOrdersReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.StockOrdersReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 11001002];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autotrade.StockOrdersReqt.SingleOrder order_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_order_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 bsflag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_bsflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bsflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 market = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_market();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &market_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string order_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_id().data(), static_cast<int>(this->order_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockOrdersReqt.order_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_type().data(), static_cast<int>(this->order_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockOrdersReqt.order_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string parent_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parent_id().data(), static_cast<int>(this->parent_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockOrdersReqt.parent_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string parent_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parent_type().data(), static_cast<int>(this->parent_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockOrdersReqt.parent_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockOrdersReqt.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string robot_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robot_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->robot_id().data(), static_cast<int>(this->robot_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockOrdersReqt.robot_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string trader_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trader_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trader_id().data(), static_cast<int>(this->trader_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockOrdersReqt.trader_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 request_time = 12 [default = 0];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_request_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 active_interval = 13 [default = 1000];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_active_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &active_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 request_date = 14 [default = 0];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_request_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fund_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fund_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fund_id().data(), static_cast<int>(this->fund_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockOrdersReqt.fund_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string session_id = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockOrdersReqt.session_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.StockOrdersReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.StockOrdersReqt)
  return false;
#undef DO_
}

void StockOrdersReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.StockOrdersReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11001002];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // repeated .autotrade.StockOrdersReqt.SingleOrder order_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->order_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->order_list(static_cast<int>(i)),
      output);
  }

  // required uint32 bsflag = 3;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bsflag(), output);
  }

  // required uint32 market = 4;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->market(), output);
  }

  // required string order_id = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersReqt.order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->order_id(), output);
  }

  // optional string order_type = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_type().data(), static_cast<int>(this->order_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersReqt.order_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->order_type(), output);
  }

  // optional string parent_id = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parent_id().data(), static_cast<int>(this->parent_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersReqt.parent_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->parent_id(), output);
  }

  // optional string parent_type = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parent_type().data(), static_cast<int>(this->parent_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersReqt.parent_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->parent_type(), output);
  }

  // optional string request_id = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersReqt.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->request_id(), output);
  }

  // optional string robot_id = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robot_id().data(), static_cast<int>(this->robot_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersReqt.robot_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->robot_id(), output);
  }

  // optional string trader_id = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trader_id().data(), static_cast<int>(this->trader_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersReqt.trader_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->trader_id(), output);
  }

  // optional int64 request_time = 12 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->request_time(), output);
  }

  // optional int64 active_interval = 13 [default = 1000];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->active_interval(), output);
  }

  // optional int64 request_date = 14 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->request_date(), output);
  }

  // optional string fund_id = 15;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fund_id().data(), static_cast<int>(this->fund_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersReqt.fund_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->fund_id(), output);
  }

  // optional string session_id = 16;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersReqt.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->session_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.StockOrdersReqt)
}

::google::protobuf::uint8* StockOrdersReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.StockOrdersReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11001002];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // repeated .autotrade.StockOrdersReqt.SingleOrder order_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->order_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->order_list(static_cast<int>(i)), deterministic, target);
  }

  // required uint32 bsflag = 3;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bsflag(), target);
  }

  // required uint32 market = 4;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->market(), target);
  }

  // required string order_id = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersReqt.order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->order_id(), target);
  }

  // optional string order_type = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_type().data(), static_cast<int>(this->order_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersReqt.order_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->order_type(), target);
  }

  // optional string parent_id = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parent_id().data(), static_cast<int>(this->parent_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersReqt.parent_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->parent_id(), target);
  }

  // optional string parent_type = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parent_type().data(), static_cast<int>(this->parent_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersReqt.parent_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->parent_type(), target);
  }

  // optional string request_id = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersReqt.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->request_id(), target);
  }

  // optional string robot_id = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robot_id().data(), static_cast<int>(this->robot_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersReqt.robot_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->robot_id(), target);
  }

  // optional string trader_id = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trader_id().data(), static_cast<int>(this->trader_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersReqt.trader_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->trader_id(), target);
  }

  // optional int64 request_time = 12 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->request_time(), target);
  }

  // optional int64 active_interval = 13 [default = 1000];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->active_interval(), target);
  }

  // optional int64 request_date = 14 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->request_date(), target);
  }

  // optional string fund_id = 15;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fund_id().data(), static_cast<int>(this->fund_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersReqt.fund_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->fund_id(), target);
  }

  // optional string session_id = 16;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersReqt.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->session_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.StockOrdersReqt)
  return target;
}

size_t StockOrdersReqt::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autotrade.StockOrdersReqt)
  size_t total_size = 0;

  if (has_order_id()) {
    // required string order_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_id());
  }

  if (has_bsflag()) {
    // required uint32 bsflag = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bsflag());
  }

  if (has_market()) {
    // required uint32 market = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->market());
  }

  return total_size;
}
size_t StockOrdersReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.StockOrdersReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000601) ^ 0x00000601) == 0) {  // All required fields are present.
    // required string order_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_id());

    // required uint32 bsflag = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bsflag());

    // required uint32 market = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->market());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .autotrade.StockOrdersReqt.SingleOrder order_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->order_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->order_list(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 254u) {
    // optional string order_type = 6;
    if (has_order_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_type());
    }

    // optional string parent_id = 7;
    if (has_parent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parent_id());
    }

    // optional string parent_type = 8;
    if (has_parent_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parent_type());
    }

    // optional string request_id = 9;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional string robot_id = 10;
    if (has_robot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->robot_id());
    }

    // optional string trader_id = 11;
    if (has_trader_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trader_id());
    }

    // optional string fund_id = 15;
    if (has_fund_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fund_id());
    }

  }
  // optional string session_id = 16;
  if (has_session_id()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  if (_has_bits_[8 / 32] & 30720u) {
    // optional int64 request_time = 12 [default = 0];
    if (has_request_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->request_time());
    }

    // optional int64 request_date = 14 [default = 0];
    if (has_request_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->request_date());
    }

    // optional int32 funcid = 1 [default = 11001002];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

    // optional int64 active_interval = 13 [default = 1000];
    if (has_active_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->active_interval());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StockOrdersReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.StockOrdersReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const StockOrdersReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StockOrdersReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.StockOrdersReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.StockOrdersReqt)
    MergeFrom(*source);
  }
}

void StockOrdersReqt::MergeFrom(const StockOrdersReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.StockOrdersReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  order_list_.MergeFrom(from.order_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_order_id();
      order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_order_type();
      order_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_type_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_parent_id();
      parent_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_parent_type();
      parent_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_type_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_robot_id();
      robot_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robot_id_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_trader_id();
      trader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trader_id_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_fund_id();
      fund_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fund_id_);
    }
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_session_id();
      session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
    }
    if (cached_has_bits & 0x00000200u) {
      bsflag_ = from.bsflag_;
    }
    if (cached_has_bits & 0x00000400u) {
      market_ = from.market_;
    }
    if (cached_has_bits & 0x00000800u) {
      request_time_ = from.request_time_;
    }
    if (cached_has_bits & 0x00001000u) {
      request_date_ = from.request_date_;
    }
    if (cached_has_bits & 0x00002000u) {
      funcid_ = from.funcid_;
    }
    if (cached_has_bits & 0x00004000u) {
      active_interval_ = from.active_interval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StockOrdersReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.StockOrdersReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockOrdersReqt::CopyFrom(const StockOrdersReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.StockOrdersReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockOrdersReqt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000601) != 0x00000601) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->order_list())) return false;
  return true;
}

void StockOrdersReqt::Swap(StockOrdersReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockOrdersReqt::InternalSwap(StockOrdersReqt* other) {
  using std::swap;
  CastToBase(&order_list_)->InternalSwap(CastToBase(&other->order_list_));
  order_id_.Swap(&other->order_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_type_.Swap(&other->order_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  parent_id_.Swap(&other->parent_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  parent_type_.Swap(&other->parent_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  robot_id_.Swap(&other->robot_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trader_id_.Swap(&other->trader_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fund_id_.Swap(&other->fund_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  session_id_.Swap(&other->session_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bsflag_, other->bsflag_);
  swap(market_, other->market_);
  swap(request_time_, other->request_time_);
  swap(request_date_, other->request_date_);
  swap(funcid_, other->funcid_);
  swap(active_interval_, other->active_interval_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StockOrdersReqt::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StockOrdersResp_OrderResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockOrdersResp_OrderResult::kRetCodeFieldNumber;
const int StockOrdersResp_OrderResult::kRetMsgFieldNumber;
const int StockOrdersResp_OrderResult::kOrdernoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockOrdersResp_OrderResult::StockOrdersResp_OrderResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockOrdersResp_OrderResult.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.StockOrdersResp.OrderResult)
}
StockOrdersResp_OrderResult::StockOrdersResp_OrderResult(const StockOrdersResp_OrderResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ret_msg()) {
    ret_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_msg_);
  }
  orderno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_orderno()) {
    orderno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderno_);
  }
  ret_code_ = from.ret_code_;
  // @@protoc_insertion_point(copy_constructor:autotrade.StockOrdersResp.OrderResult)
}

void StockOrdersResp_OrderResult::SharedCtor() {
  ret_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_code_ = 0;
}

StockOrdersResp_OrderResult::~StockOrdersResp_OrderResult() {
  // @@protoc_insertion_point(destructor:autotrade.StockOrdersResp.OrderResult)
  SharedDtor();
}

void StockOrdersResp_OrderResult::SharedDtor() {
  ret_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderno_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StockOrdersResp_OrderResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StockOrdersResp_OrderResult::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StockOrdersResp_OrderResult& StockOrdersResp_OrderResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockOrdersResp_OrderResult.base);
  return *internal_default_instance();
}


void StockOrdersResp_OrderResult::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.StockOrdersResp.OrderResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      ret_msg_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      orderno_.ClearNonDefaultToEmptyNoArena();
    }
  }
  ret_code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StockOrdersResp_OrderResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.StockOrdersResp.OrderResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ret_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ret_msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ret_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ret_msg().data(), static_cast<int>(this->ret_msg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockOrdersResp.OrderResult.ret_msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string orderno = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orderno().data(), static_cast<int>(this->orderno().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockOrdersResp.OrderResult.orderno");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.StockOrdersResp.OrderResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.StockOrdersResp.OrderResult)
  return false;
#undef DO_
}

void StockOrdersResp_OrderResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.StockOrdersResp.OrderResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 ret_code = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional string ret_msg = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_msg().data(), static_cast<int>(this->ret_msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersResp.OrderResult.ret_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ret_msg(), output);
  }

  // optional string orderno = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderno().data(), static_cast<int>(this->orderno().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersResp.OrderResult.orderno");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->orderno(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.StockOrdersResp.OrderResult)
}

::google::protobuf::uint8* StockOrdersResp_OrderResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.StockOrdersResp.OrderResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 ret_code = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional string ret_msg = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_msg().data(), static_cast<int>(this->ret_msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersResp.OrderResult.ret_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ret_msg(), target);
  }

  // optional string orderno = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderno().data(), static_cast<int>(this->orderno().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersResp.OrderResult.orderno");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->orderno(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.StockOrdersResp.OrderResult)
  return target;
}

size_t StockOrdersResp_OrderResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.StockOrdersResp.OrderResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 ret_code = 1;
  if (has_ret_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret_code());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string ret_msg = 2;
    if (has_ret_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ret_msg());
    }

    // optional string orderno = 3;
    if (has_orderno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderno());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StockOrdersResp_OrderResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.StockOrdersResp.OrderResult)
  GOOGLE_DCHECK_NE(&from, this);
  const StockOrdersResp_OrderResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StockOrdersResp_OrderResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.StockOrdersResp.OrderResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.StockOrdersResp.OrderResult)
    MergeFrom(*source);
  }
}

void StockOrdersResp_OrderResult::MergeFrom(const StockOrdersResp_OrderResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.StockOrdersResp.OrderResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ret_msg();
      ret_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_orderno();
      orderno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderno_);
    }
    if (cached_has_bits & 0x00000004u) {
      ret_code_ = from.ret_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StockOrdersResp_OrderResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.StockOrdersResp.OrderResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockOrdersResp_OrderResult::CopyFrom(const StockOrdersResp_OrderResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.StockOrdersResp.OrderResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockOrdersResp_OrderResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void StockOrdersResp_OrderResult::Swap(StockOrdersResp_OrderResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockOrdersResp_OrderResult::InternalSwap(StockOrdersResp_OrderResult* other) {
  using std::swap;
  ret_msg_.Swap(&other->ret_msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  orderno_.Swap(&other->orderno_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ret_code_, other->ret_code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StockOrdersResp_OrderResult::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StockOrdersResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockOrdersResp::kFuncidFieldNumber;
const int StockOrdersResp::kOrderGroupFieldNumber;
const int StockOrdersResp::kResultsFieldNumber;
const int StockOrdersResp::kRequestIdFieldNumber;
const int StockOrdersResp::kOrderIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockOrdersResp::StockOrdersResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockOrdersResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.StockOrdersResp)
}
StockOrdersResp::StockOrdersResp(const StockOrdersResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      results_(from.results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_group()) {
    order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_id()) {
    order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
  }
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:autotrade.StockOrdersResp)
}

void StockOrdersResp::SharedCtor() {
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  funcid_ = 11101002;
}

StockOrdersResp::~StockOrdersResp() {
  // @@protoc_insertion_point(destructor:autotrade.StockOrdersResp)
  SharedDtor();
}

void StockOrdersResp::SharedDtor() {
  order_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StockOrdersResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StockOrdersResp::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StockOrdersResp& StockOrdersResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockOrdersResp.base);
  return *internal_default_instance();
}


void StockOrdersResp::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.StockOrdersResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      order_group_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      order_id_.ClearNonDefaultToEmptyNoArena();
    }
    funcid_ = 11101002;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StockOrdersResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.StockOrdersResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 11101002];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string order_group = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_group().data(), static_cast<int>(this->order_group().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockOrdersResp.order_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autotrade.StockOrdersResp.OrderResult results = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockOrdersResp.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string order_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_id().data(), static_cast<int>(this->order_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockOrdersResp.order_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.StockOrdersResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.StockOrdersResp)
  return false;
#undef DO_
}

void StockOrdersResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.StockOrdersResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11101002];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // required string order_group = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersResp.order_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->order_group(), output);
  }

  // repeated .autotrade.StockOrdersResp.OrderResult results = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->results(static_cast<int>(i)),
      output);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersResp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->request_id(), output);
  }

  // required string order_id = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersResp.order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->order_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.StockOrdersResp)
}

::google::protobuf::uint8* StockOrdersResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.StockOrdersResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11101002];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // required string order_group = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersResp.order_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->order_group(), target);
  }

  // repeated .autotrade.StockOrdersResp.OrderResult results = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->results(static_cast<int>(i)), deterministic, target);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersResp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->request_id(), target);
  }

  // required string order_id = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersResp.order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->order_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.StockOrdersResp)
  return target;
}

size_t StockOrdersResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autotrade.StockOrdersResp)
  size_t total_size = 0;

  if (has_order_group()) {
    // required string order_group = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_group());
  }

  if (has_order_id()) {
    // required string order_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_id());
  }

  return total_size;
}
size_t StockOrdersResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.StockOrdersResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string order_group = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_group());

    // required string order_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .autotrade.StockOrdersResp.OrderResult results = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->results(static_cast<int>(i)));
    }
  }

  // optional string request_id = 4;
  if (has_request_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // optional int32 funcid = 1 [default = 11101002];
  if (has_funcid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->funcid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StockOrdersResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.StockOrdersResp)
  GOOGLE_DCHECK_NE(&from, this);
  const StockOrdersResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StockOrdersResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.StockOrdersResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.StockOrdersResp)
    MergeFrom(*source);
  }
}

void StockOrdersResp::MergeFrom(const StockOrdersResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.StockOrdersResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_order_group();
      order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_order_id();
      order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StockOrdersResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.StockOrdersResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockOrdersResp::CopyFrom(const StockOrdersResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.StockOrdersResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockOrdersResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->results())) return false;
  return true;
}

void StockOrdersResp::Swap(StockOrdersResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockOrdersResp::InternalSwap(StockOrdersResp* other) {
  using std::swap;
  CastToBase(&results_)->InternalSwap(CastToBase(&other->results_));
  order_group_.Swap(&other->order_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_id_.Swap(&other->order_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StockOrdersResp::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StockOrdersRecieved::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockOrdersRecieved::kFuncidFieldNumber;
const int StockOrdersRecieved::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockOrdersRecieved::StockOrdersRecieved()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockOrdersRecieved.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.StockOrdersRecieved)
}
StockOrdersRecieved::StockOrdersRecieved(const StockOrdersRecieved& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:autotrade.StockOrdersRecieved)
}

void StockOrdersRecieved::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  funcid_ = 11101010;
}

StockOrdersRecieved::~StockOrdersRecieved() {
  // @@protoc_insertion_point(destructor:autotrade.StockOrdersRecieved)
  SharedDtor();
}

void StockOrdersRecieved::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StockOrdersRecieved::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StockOrdersRecieved::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StockOrdersRecieved& StockOrdersRecieved::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockOrdersRecieved.base);
  return *internal_default_instance();
}


void StockOrdersRecieved::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.StockOrdersRecieved)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    funcid_ = 11101010;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StockOrdersRecieved::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.StockOrdersRecieved)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 11101010];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockOrdersRecieved.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.StockOrdersRecieved)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.StockOrdersRecieved)
  return false;
#undef DO_
}

void StockOrdersRecieved::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.StockOrdersRecieved)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11101010];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional string request_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersRecieved.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.StockOrdersRecieved)
}

::google::protobuf::uint8* StockOrdersRecieved::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.StockOrdersRecieved)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11101010];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional string request_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersRecieved.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.StockOrdersRecieved)
  return target;
}

size_t StockOrdersRecieved::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.StockOrdersRecieved)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string request_id = 2;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional int32 funcid = 1 [default = 11101010];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StockOrdersRecieved::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.StockOrdersRecieved)
  GOOGLE_DCHECK_NE(&from, this);
  const StockOrdersRecieved* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StockOrdersRecieved>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.StockOrdersRecieved)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.StockOrdersRecieved)
    MergeFrom(*source);
  }
}

void StockOrdersRecieved::MergeFrom(const StockOrdersRecieved& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.StockOrdersRecieved)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StockOrdersRecieved::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.StockOrdersRecieved)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockOrdersRecieved::CopyFrom(const StockOrdersRecieved& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.StockOrdersRecieved)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockOrdersRecieved::IsInitialized() const {
  return true;
}

void StockOrdersRecieved::Swap(StockOrdersRecieved* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockOrdersRecieved::InternalSwap(StockOrdersRecieved* other) {
  using std::swap;
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StockOrdersRecieved::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StockOrdersCreateResp_OrderList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockOrdersCreateResp_OrderList::kCodeFieldNumber;
const int StockOrdersCreateResp_OrderList::kPriceFieldNumber;
const int StockOrdersCreateResp_OrderList::kQtyFieldNumber;
const int StockOrdersCreateResp_OrderList::kOrdernoFieldNumber;
const int StockOrdersCreateResp_OrderList::kRetCodeFieldNumber;
const int StockOrdersCreateResp_OrderList::kRetMessageFieldNumber;
const int StockOrdersCreateResp_OrderList::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockOrdersCreateResp_OrderList::StockOrdersCreateResp_OrderList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockOrdersCreateResp_OrderList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.StockOrdersCreateResp.OrderList)
}
StockOrdersCreateResp_OrderList::StockOrdersCreateResp_OrderList(const StockOrdersCreateResp_OrderList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  orderno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_orderno()) {
    orderno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderno_);
  }
  ret_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ret_message()) {
    ret_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_message_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_code_) -
    reinterpret_cast<char*>(&price_)) + sizeof(ret_code_));
  // @@protoc_insertion_point(copy_constructor:autotrade.StockOrdersCreateResp.OrderList)
}

void StockOrdersCreateResp_OrderList::SharedCtor() {
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_code_) -
      reinterpret_cast<char*>(&price_)) + sizeof(ret_code_));
}

StockOrdersCreateResp_OrderList::~StockOrdersCreateResp_OrderList() {
  // @@protoc_insertion_point(destructor:autotrade.StockOrdersCreateResp.OrderList)
  SharedDtor();
}

void StockOrdersCreateResp_OrderList::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderno_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StockOrdersCreateResp_OrderList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StockOrdersCreateResp_OrderList::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StockOrdersCreateResp_OrderList& StockOrdersCreateResp_OrderList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockOrdersCreateResp_OrderList.base);
  return *internal_default_instance();
}


void StockOrdersCreateResp_OrderList::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.StockOrdersCreateResp.OrderList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      orderno_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      ret_message_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 112u) {
    ::memset(&price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_code_) -
        reinterpret_cast<char*>(&price_)) + sizeof(ret_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StockOrdersCreateResp_OrderList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.StockOrdersCreateResp.OrderList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockOrdersCreateResp.OrderList.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 price = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 qty = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string orderno = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orderno().data(), static_cast<int>(this->orderno().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockOrdersCreateResp.OrderList.orderno");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ret_code = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_ret_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ret_message = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ret_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ret_message().data(), static_cast<int>(this->ret_message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockOrdersCreateResp.OrderList.ret_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockOrdersCreateResp.OrderList.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.StockOrdersCreateResp.OrderList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.StockOrdersCreateResp.OrderList)
  return false;
#undef DO_
}

void StockOrdersCreateResp_OrderList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.StockOrdersCreateResp.OrderList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersCreateResp.OrderList.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->code(), output);
  }

  // required int64 price = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->price(), output);
  }

  // required uint32 qty = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->qty(), output);
  }

  // optional string orderno = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderno().data(), static_cast<int>(this->orderno().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersCreateResp.OrderList.orderno");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->orderno(), output);
  }

  // optional int32 ret_code = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ret_code(), output);
  }

  // optional string ret_message = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_message().data(), static_cast<int>(this->ret_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersCreateResp.OrderList.ret_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->ret_message(), output);
  }

  // optional string name = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersCreateResp.OrderList.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.StockOrdersCreateResp.OrderList)
}

::google::protobuf::uint8* StockOrdersCreateResp_OrderList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.StockOrdersCreateResp.OrderList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersCreateResp.OrderList.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  // required int64 price = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->price(), target);
  }

  // required uint32 qty = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->qty(), target);
  }

  // optional string orderno = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderno().data(), static_cast<int>(this->orderno().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersCreateResp.OrderList.orderno");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->orderno(), target);
  }

  // optional int32 ret_code = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ret_code(), target);
  }

  // optional string ret_message = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_message().data(), static_cast<int>(this->ret_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersCreateResp.OrderList.ret_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ret_message(), target);
  }

  // optional string name = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersCreateResp.OrderList.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.StockOrdersCreateResp.OrderList)
  return target;
}

size_t StockOrdersCreateResp_OrderList::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autotrade.StockOrdersCreateResp.OrderList)
  size_t total_size = 0;

  if (has_code()) {
    // required string code = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_price()) {
    // required int64 price = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->price());
  }

  if (has_qty()) {
    // required uint32 qty = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->qty());
  }

  return total_size;
}
size_t StockOrdersCreateResp_OrderList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.StockOrdersCreateResp.OrderList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000031) ^ 0x00000031) == 0) {  // All required fields are present.
    // required string code = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required int64 price = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->price());

    // required uint32 qty = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->qty());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 14u) {
    // optional string orderno = 4;
    if (has_orderno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderno());
    }

    // optional string ret_message = 6;
    if (has_ret_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ret_message());
    }

    // optional string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // optional int32 ret_code = 5;
  if (has_ret_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StockOrdersCreateResp_OrderList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.StockOrdersCreateResp.OrderList)
  GOOGLE_DCHECK_NE(&from, this);
  const StockOrdersCreateResp_OrderList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StockOrdersCreateResp_OrderList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.StockOrdersCreateResp.OrderList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.StockOrdersCreateResp.OrderList)
    MergeFrom(*source);
  }
}

void StockOrdersCreateResp_OrderList::MergeFrom(const StockOrdersCreateResp_OrderList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.StockOrdersCreateResp.OrderList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_orderno();
      orderno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderno_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_ret_message();
      ret_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_message_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000010u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000020u) {
      qty_ = from.qty_;
    }
    if (cached_has_bits & 0x00000040u) {
      ret_code_ = from.ret_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StockOrdersCreateResp_OrderList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.StockOrdersCreateResp.OrderList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockOrdersCreateResp_OrderList::CopyFrom(const StockOrdersCreateResp_OrderList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.StockOrdersCreateResp.OrderList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockOrdersCreateResp_OrderList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000031) != 0x00000031) return false;
  return true;
}

void StockOrdersCreateResp_OrderList::Swap(StockOrdersCreateResp_OrderList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockOrdersCreateResp_OrderList::InternalSwap(StockOrdersCreateResp_OrderList* other) {
  using std::swap;
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  orderno_.Swap(&other->orderno_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ret_message_.Swap(&other->ret_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(price_, other->price_);
  swap(qty_, other->qty_);
  swap(ret_code_, other->ret_code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StockOrdersCreateResp_OrderList::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StockOrdersCreateResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockOrdersCreateResp::kFuncidFieldNumber;
const int StockOrdersCreateResp::kRequestIdFieldNumber;
const int StockOrdersCreateResp::kOrderIdFieldNumber;
const int StockOrdersCreateResp::kOrderGroupFieldNumber;
const int StockOrdersCreateResp::kTraderIdFieldNumber;
const int StockOrdersCreateResp::kRobotIdFieldNumber;
const int StockOrdersCreateResp::kDataDateFieldNumber;
const int StockOrdersCreateResp::kDataTimeFieldNumber;
const int StockOrdersCreateResp::kFundIdFieldNumber;
const int StockOrdersCreateResp::kMarketFieldNumber;
const int StockOrdersCreateResp::kBsflagFieldNumber;
const int StockOrdersCreateResp::kOrderListFieldNumber;
const int StockOrdersCreateResp::kAccountNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockOrdersCreateResp::StockOrdersCreateResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockOrdersCreateResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.StockOrdersCreateResp)
}
StockOrdersCreateResp::StockOrdersCreateResp(const StockOrdersCreateResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      order_list_(from.order_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_id()) {
    order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
  }
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_group()) {
    order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
  }
  trader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trader_id()) {
    trader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trader_id_);
  }
  robot_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_robot_id()) {
    robot_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robot_id_);
  }
  fund_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fund_id()) {
    fund_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fund_id_);
  }
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account_name()) {
    account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
  }
  ::memcpy(&data_date_, &from.data_date_,
    static_cast<size_t>(reinterpret_cast<char*>(&funcid_) -
    reinterpret_cast<char*>(&data_date_)) + sizeof(funcid_));
  // @@protoc_insertion_point(copy_constructor:autotrade.StockOrdersCreateResp)
}

void StockOrdersCreateResp::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robot_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fund_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bsflag_) -
      reinterpret_cast<char*>(&data_date_)) + sizeof(bsflag_));
  funcid_ = 11101014;
}

StockOrdersCreateResp::~StockOrdersCreateResp() {
  // @@protoc_insertion_point(destructor:autotrade.StockOrdersCreateResp)
  SharedDtor();
}

void StockOrdersCreateResp::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trader_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robot_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fund_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StockOrdersCreateResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StockOrdersCreateResp::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StockOrdersCreateResp& StockOrdersCreateResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockOrdersCreateResp.base);
  return *internal_default_instance();
}


void StockOrdersCreateResp::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.StockOrdersCreateResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  order_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      order_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      order_group_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      trader_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      robot_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      fund_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      account_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  data_date_ = 0u;
  if (cached_has_bits & 3840u) {
    ::memset(&data_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bsflag_) -
        reinterpret_cast<char*>(&data_time_)) + sizeof(bsflag_));
    funcid_ = 11101014;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StockOrdersCreateResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.StockOrdersCreateResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 11101014];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockOrdersCreateResp.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string order_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_id().data(), static_cast<int>(this->order_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockOrdersCreateResp.order_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string order_group = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_group().data(), static_cast<int>(this->order_group().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockOrdersCreateResp.order_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string trader_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trader_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trader_id().data(), static_cast<int>(this->trader_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockOrdersCreateResp.trader_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string robot_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robot_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->robot_id().data(), static_cast<int>(this->robot_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockOrdersCreateResp.robot_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 data_date = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_data_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 data_time = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_data_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string fund_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fund_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fund_id().data(), static_cast<int>(this->fund_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockOrdersCreateResp.fund_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 market = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_market();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &market_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bsflag = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_bsflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bsflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autotrade.StockOrdersCreateResp.OrderList order_list = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_order_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string account_name = 13 [default = ""];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account_name().data(), static_cast<int>(this->account_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockOrdersCreateResp.account_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.StockOrdersCreateResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.StockOrdersCreateResp)
  return false;
#undef DO_
}

void StockOrdersCreateResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.StockOrdersCreateResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11101014];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional string request_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersCreateResp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->request_id(), output);
  }

  // required string order_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersCreateResp.order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->order_id(), output);
  }

  // required string order_group = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersCreateResp.order_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->order_group(), output);
  }

  // optional string trader_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trader_id().data(), static_cast<int>(this->trader_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersCreateResp.trader_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->trader_id(), output);
  }

  // optional string robot_id = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robot_id().data(), static_cast<int>(this->robot_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersCreateResp.robot_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->robot_id(), output);
  }

  // optional uint32 data_date = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->data_date(), output);
  }

  // required uint32 data_time = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->data_time(), output);
  }

  // required string fund_id = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fund_id().data(), static_cast<int>(this->fund_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersCreateResp.fund_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->fund_id(), output);
  }

  // optional int64 market = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->market(), output);
  }

  // optional int64 bsflag = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->bsflag(), output);
  }

  // repeated .autotrade.StockOrdersCreateResp.OrderList order_list = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->order_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->order_list(static_cast<int>(i)),
      output);
  }

  // optional string account_name = 13 [default = ""];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersCreateResp.account_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->account_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.StockOrdersCreateResp)
}

::google::protobuf::uint8* StockOrdersCreateResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.StockOrdersCreateResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11101014];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional string request_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersCreateResp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->request_id(), target);
  }

  // required string order_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersCreateResp.order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->order_id(), target);
  }

  // required string order_group = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersCreateResp.order_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->order_group(), target);
  }

  // optional string trader_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trader_id().data(), static_cast<int>(this->trader_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersCreateResp.trader_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->trader_id(), target);
  }

  // optional string robot_id = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robot_id().data(), static_cast<int>(this->robot_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersCreateResp.robot_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->robot_id(), target);
  }

  // optional uint32 data_date = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->data_date(), target);
  }

  // required uint32 data_time = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->data_time(), target);
  }

  // required string fund_id = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fund_id().data(), static_cast<int>(this->fund_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersCreateResp.fund_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->fund_id(), target);
  }

  // optional int64 market = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->market(), target);
  }

  // optional int64 bsflag = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->bsflag(), target);
  }

  // repeated .autotrade.StockOrdersCreateResp.OrderList order_list = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->order_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->order_list(static_cast<int>(i)), deterministic, target);
  }

  // optional string account_name = 13 [default = ""];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockOrdersCreateResp.account_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->account_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.StockOrdersCreateResp)
  return target;
}

size_t StockOrdersCreateResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autotrade.StockOrdersCreateResp)
  size_t total_size = 0;

  if (has_order_id()) {
    // required string order_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_id());
  }

  if (has_order_group()) {
    // required string order_group = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_group());
  }

  if (has_fund_id()) {
    // required string fund_id = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fund_id());
  }

  if (has_data_time()) {
    // required uint32 data_time = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->data_time());
  }

  return total_size;
}
size_t StockOrdersCreateResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.StockOrdersCreateResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000126) ^ 0x00000126) == 0) {  // All required fields are present.
    // required string order_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_id());

    // required string order_group = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_group());

    // required string fund_id = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fund_id());

    // required uint32 data_time = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->data_time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .autotrade.StockOrdersCreateResp.OrderList order_list = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->order_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->order_list(static_cast<int>(i)));
    }
  }

  // optional string request_id = 2;
  if (has_request_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  if (_has_bits_[0 / 32] & 24u) {
    // optional string trader_id = 5;
    if (has_trader_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trader_id());
    }

    // optional string robot_id = 6;
    if (has_robot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->robot_id());
    }

  }
  if (_has_bits_[0 / 32] & 192u) {
    // optional string account_name = 13 [default = ""];
    if (has_account_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name());
    }

    // optional uint32 data_date = 7;
    if (has_data_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_date());
    }

  }
  if (_has_bits_[8 / 32] & 3584u) {
    // optional int64 market = 10;
    if (has_market()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->market());
    }

    // optional int64 bsflag = 11;
    if (has_bsflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bsflag());
    }

    // optional int32 funcid = 1 [default = 11101014];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StockOrdersCreateResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.StockOrdersCreateResp)
  GOOGLE_DCHECK_NE(&from, this);
  const StockOrdersCreateResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StockOrdersCreateResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.StockOrdersCreateResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.StockOrdersCreateResp)
    MergeFrom(*source);
  }
}

void StockOrdersCreateResp::MergeFrom(const StockOrdersCreateResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.StockOrdersCreateResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  order_list_.MergeFrom(from.order_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_order_id();
      order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_order_group();
      order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_trader_id();
      trader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trader_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_robot_id();
      robot_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robot_id_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_fund_id();
      fund_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fund_id_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_account_name();
      account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
    }
    if (cached_has_bits & 0x00000080u) {
      data_date_ = from.data_date_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      data_time_ = from.data_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      market_ = from.market_;
    }
    if (cached_has_bits & 0x00000400u) {
      bsflag_ = from.bsflag_;
    }
    if (cached_has_bits & 0x00000800u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StockOrdersCreateResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.StockOrdersCreateResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockOrdersCreateResp::CopyFrom(const StockOrdersCreateResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.StockOrdersCreateResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockOrdersCreateResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000126) != 0x00000126) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->order_list())) return false;
  return true;
}

void StockOrdersCreateResp::Swap(StockOrdersCreateResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockOrdersCreateResp::InternalSwap(StockOrdersCreateResp* other) {
  using std::swap;
  CastToBase(&order_list_)->InternalSwap(CastToBase(&other->order_list_));
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_id_.Swap(&other->order_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_group_.Swap(&other->order_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trader_id_.Swap(&other->trader_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  robot_id_.Swap(&other->robot_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fund_id_.Swap(&other->fund_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_name_.Swap(&other->account_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_date_, other->data_date_);
  swap(data_time_, other->data_time_);
  swap(market_, other->market_);
  swap(bsflag_, other->bsflag_);
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StockOrdersCreateResp::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StockDeleteReqt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockDeleteReqt::kFuncidFieldNumber;
const int StockDeleteReqt::kOrderGroupFieldNumber;
const int StockDeleteReqt::kMarketFieldNumber;
const int StockDeleteReqt::kRequestIdFieldNumber;
const int StockDeleteReqt::kAssetPropFieldNumber;
const int StockDeleteReqt::kFundIdFieldNumber;
const int StockDeleteReqt::kSessionIdFieldNumber;
const int StockDeleteReqt::kTraderIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockDeleteReqt::StockDeleteReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockDeleteReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.StockDeleteReqt)
}
StockDeleteReqt::StockDeleteReqt(const StockDeleteReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_group()) {
    order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  fund_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fund_id()) {
    fund_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fund_id_);
  }
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_session_id()) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  trader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trader_id()) {
    trader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trader_id_);
  }
  ::memcpy(&market_, &from.market_,
    static_cast<size_t>(reinterpret_cast<char*>(&funcid_) -
    reinterpret_cast<char*>(&market_)) + sizeof(funcid_));
  // @@protoc_insertion_point(copy_constructor:autotrade.StockDeleteReqt)
}

void StockDeleteReqt::SharedCtor() {
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fund_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&market_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&asset_prop_) -
      reinterpret_cast<char*>(&market_)) + sizeof(asset_prop_));
  funcid_ = 11001004;
}

StockDeleteReqt::~StockDeleteReqt() {
  // @@protoc_insertion_point(destructor:autotrade.StockDeleteReqt)
  SharedDtor();
}

void StockDeleteReqt::SharedDtor() {
  order_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fund_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trader_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StockDeleteReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StockDeleteReqt::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StockDeleteReqt& StockDeleteReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockDeleteReqt.base);
  return *internal_default_instance();
}


void StockDeleteReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.StockDeleteReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      order_group_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      fund_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      session_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      trader_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&market_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&asset_prop_) -
        reinterpret_cast<char*>(&market_)) + sizeof(asset_prop_));
    funcid_ = 11001004;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StockDeleteReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.StockDeleteReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 11001004];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string order_group = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_group().data(), static_cast<int>(this->order_group().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockDeleteReqt.order_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 market = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_market();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &market_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockDeleteReqt.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 asset_prop = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_asset_prop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &asset_prop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fund_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fund_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fund_id().data(), static_cast<int>(this->fund_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockDeleteReqt.fund_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string session_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockDeleteReqt.session_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string trader_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trader_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trader_id().data(), static_cast<int>(this->trader_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockDeleteReqt.trader_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.StockDeleteReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.StockDeleteReqt)
  return false;
#undef DO_
}

void StockDeleteReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.StockDeleteReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11001004];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // required string order_group = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockDeleteReqt.order_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->order_group(), output);
  }

  // required uint32 market = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->market(), output);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockDeleteReqt.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->request_id(), output);
  }

  // optional int32 asset_prop = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->asset_prop(), output);
  }

  // optional string fund_id = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fund_id().data(), static_cast<int>(this->fund_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockDeleteReqt.fund_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->fund_id(), output);
  }

  // optional string session_id = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockDeleteReqt.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->session_id(), output);
  }

  // optional string trader_id = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trader_id().data(), static_cast<int>(this->trader_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockDeleteReqt.trader_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->trader_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.StockDeleteReqt)
}

::google::protobuf::uint8* StockDeleteReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.StockDeleteReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11001004];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // required string order_group = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockDeleteReqt.order_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->order_group(), target);
  }

  // required uint32 market = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->market(), target);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockDeleteReqt.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->request_id(), target);
  }

  // optional int32 asset_prop = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->asset_prop(), target);
  }

  // optional string fund_id = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fund_id().data(), static_cast<int>(this->fund_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockDeleteReqt.fund_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->fund_id(), target);
  }

  // optional string session_id = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockDeleteReqt.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->session_id(), target);
  }

  // optional string trader_id = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trader_id().data(), static_cast<int>(this->trader_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockDeleteReqt.trader_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->trader_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.StockDeleteReqt)
  return target;
}

size_t StockDeleteReqt::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autotrade.StockDeleteReqt)
  size_t total_size = 0;

  if (has_order_group()) {
    // required string order_group = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_group());
  }

  if (has_market()) {
    // required uint32 market = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->market());
  }

  return total_size;
}
size_t StockDeleteReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.StockDeleteReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000021) ^ 0x00000021) == 0) {  // All required fields are present.
    // required string order_group = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_group());

    // required uint32 market = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->market());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 30u) {
    // optional string request_id = 4;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional string fund_id = 6;
    if (has_fund_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fund_id());
    }

    // optional string session_id = 7;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }

    // optional string trader_id = 8;
    if (has_trader_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trader_id());
    }

  }
  if (_has_bits_[0 / 32] & 192u) {
    // optional int32 asset_prop = 5;
    if (has_asset_prop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->asset_prop());
    }

    // optional int32 funcid = 1 [default = 11001004];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StockDeleteReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.StockDeleteReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const StockDeleteReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StockDeleteReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.StockDeleteReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.StockDeleteReqt)
    MergeFrom(*source);
  }
}

void StockDeleteReqt::MergeFrom(const StockDeleteReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.StockDeleteReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_order_group();
      order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_fund_id();
      fund_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fund_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_session_id();
      session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_trader_id();
      trader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trader_id_);
    }
    if (cached_has_bits & 0x00000020u) {
      market_ = from.market_;
    }
    if (cached_has_bits & 0x00000040u) {
      asset_prop_ = from.asset_prop_;
    }
    if (cached_has_bits & 0x00000080u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StockDeleteReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.StockDeleteReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockDeleteReqt::CopyFrom(const StockDeleteReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.StockDeleteReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockDeleteReqt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000021) != 0x00000021) return false;
  return true;
}

void StockDeleteReqt::Swap(StockDeleteReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockDeleteReqt::InternalSwap(StockDeleteReqt* other) {
  using std::swap;
  order_group_.Swap(&other->order_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fund_id_.Swap(&other->fund_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  session_id_.Swap(&other->session_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trader_id_.Swap(&other->trader_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(market_, other->market_);
  swap(asset_prop_, other->asset_prop_);
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StockDeleteReqt::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StockDeleteResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockDeleteResp::kFuncidFieldNumber;
const int StockDeleteResp::kOrderGroupFieldNumber;
const int StockDeleteResp::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockDeleteResp::StockDeleteResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockDeleteResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.StockDeleteResp)
}
StockDeleteResp::StockDeleteResp(const StockDeleteResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_group()) {
    order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:autotrade.StockDeleteResp)
}

void StockDeleteResp::SharedCtor() {
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  funcid_ = 11101004;
}

StockDeleteResp::~StockDeleteResp() {
  // @@protoc_insertion_point(destructor:autotrade.StockDeleteResp)
  SharedDtor();
}

void StockDeleteResp::SharedDtor() {
  order_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StockDeleteResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StockDeleteResp::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StockDeleteResp& StockDeleteResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockDeleteResp.base);
  return *internal_default_instance();
}


void StockDeleteResp::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.StockDeleteResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      order_group_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    funcid_ = 11101004;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StockDeleteResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.StockDeleteResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 11101004];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_group = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_group().data(), static_cast<int>(this->order_group().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockDeleteResp.order_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockDeleteResp.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.StockDeleteResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.StockDeleteResp)
  return false;
#undef DO_
}

void StockDeleteResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.StockDeleteResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11101004];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional string order_group = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockDeleteResp.order_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->order_group(), output);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockDeleteResp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.StockDeleteResp)
}

::google::protobuf::uint8* StockDeleteResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.StockDeleteResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11101004];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional string order_group = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockDeleteResp.order_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->order_group(), target);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockDeleteResp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.StockDeleteResp)
  return target;
}

size_t StockDeleteResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.StockDeleteResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string order_group = 2;
    if (has_order_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_group());
    }

    // optional string request_id = 3;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional int32 funcid = 1 [default = 11101004];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StockDeleteResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.StockDeleteResp)
  GOOGLE_DCHECK_NE(&from, this);
  const StockDeleteResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StockDeleteResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.StockDeleteResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.StockDeleteResp)
    MergeFrom(*source);
  }
}

void StockDeleteResp::MergeFrom(const StockDeleteResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.StockDeleteResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_order_group();
      order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StockDeleteResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.StockDeleteResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockDeleteResp::CopyFrom(const StockDeleteResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.StockDeleteResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockDeleteResp::IsInitialized() const {
  return true;
}

void StockDeleteResp::Swap(StockDeleteResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockDeleteResp::InternalSwap(StockDeleteResp* other) {
  using std::swap;
  order_group_.Swap(&other->order_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StockDeleteResp::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StockDeletesReqt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockDeletesReqt::kFuncidFieldNumber;
const int StockDeletesReqt::kOrderGroupFieldNumber;
const int StockDeletesReqt::kMarketFieldNumber;
const int StockDeletesReqt::kRequestIdFieldNumber;
const int StockDeletesReqt::kAssetPropFieldNumber;
const int StockDeletesReqt::kFundIdFieldNumber;
const int StockDeletesReqt::kSessionIdFieldNumber;
const int StockDeletesReqt::kTraderIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockDeletesReqt::StockDeletesReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockDeletesReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.StockDeletesReqt)
}
StockDeletesReqt::StockDeletesReqt(const StockDeletesReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_group()) {
    order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  fund_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fund_id()) {
    fund_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fund_id_);
  }
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_session_id()) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  trader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trader_id()) {
    trader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trader_id_);
  }
  ::memcpy(&market_, &from.market_,
    static_cast<size_t>(reinterpret_cast<char*>(&funcid_) -
    reinterpret_cast<char*>(&market_)) + sizeof(funcid_));
  // @@protoc_insertion_point(copy_constructor:autotrade.StockDeletesReqt)
}

void StockDeletesReqt::SharedCtor() {
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fund_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&market_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&asset_prop_) -
      reinterpret_cast<char*>(&market_)) + sizeof(asset_prop_));
  funcid_ = 11001005;
}

StockDeletesReqt::~StockDeletesReqt() {
  // @@protoc_insertion_point(destructor:autotrade.StockDeletesReqt)
  SharedDtor();
}

void StockDeletesReqt::SharedDtor() {
  order_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fund_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trader_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StockDeletesReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StockDeletesReqt::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StockDeletesReqt& StockDeletesReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockDeletesReqt.base);
  return *internal_default_instance();
}


void StockDeletesReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.StockDeletesReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      order_group_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      fund_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      session_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      trader_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&market_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&asset_prop_) -
        reinterpret_cast<char*>(&market_)) + sizeof(asset_prop_));
    funcid_ = 11001005;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StockDeletesReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.StockDeletesReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 11001005];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string order_group = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_group().data(), static_cast<int>(this->order_group().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockDeletesReqt.order_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 market = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_market();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &market_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockDeletesReqt.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 asset_prop = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_asset_prop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &asset_prop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fund_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fund_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fund_id().data(), static_cast<int>(this->fund_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockDeletesReqt.fund_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string session_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockDeletesReqt.session_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string trader_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trader_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trader_id().data(), static_cast<int>(this->trader_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockDeletesReqt.trader_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.StockDeletesReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.StockDeletesReqt)
  return false;
#undef DO_
}

void StockDeletesReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.StockDeletesReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11001005];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // required string order_group = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockDeletesReqt.order_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->order_group(), output);
  }

  // required uint32 market = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->market(), output);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockDeletesReqt.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->request_id(), output);
  }

  // optional int32 asset_prop = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->asset_prop(), output);
  }

  // optional string fund_id = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fund_id().data(), static_cast<int>(this->fund_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockDeletesReqt.fund_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->fund_id(), output);
  }

  // optional string session_id = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockDeletesReqt.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->session_id(), output);
  }

  // optional string trader_id = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trader_id().data(), static_cast<int>(this->trader_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockDeletesReqt.trader_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->trader_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.StockDeletesReqt)
}

::google::protobuf::uint8* StockDeletesReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.StockDeletesReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11001005];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // required string order_group = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockDeletesReqt.order_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->order_group(), target);
  }

  // required uint32 market = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->market(), target);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockDeletesReqt.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->request_id(), target);
  }

  // optional int32 asset_prop = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->asset_prop(), target);
  }

  // optional string fund_id = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fund_id().data(), static_cast<int>(this->fund_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockDeletesReqt.fund_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->fund_id(), target);
  }

  // optional string session_id = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockDeletesReqt.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->session_id(), target);
  }

  // optional string trader_id = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trader_id().data(), static_cast<int>(this->trader_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockDeletesReqt.trader_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->trader_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.StockDeletesReqt)
  return target;
}

size_t StockDeletesReqt::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autotrade.StockDeletesReqt)
  size_t total_size = 0;

  if (has_order_group()) {
    // required string order_group = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_group());
  }

  if (has_market()) {
    // required uint32 market = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->market());
  }

  return total_size;
}
size_t StockDeletesReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.StockDeletesReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000021) ^ 0x00000021) == 0) {  // All required fields are present.
    // required string order_group = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_group());

    // required uint32 market = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->market());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 30u) {
    // optional string request_id = 4;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional string fund_id = 6;
    if (has_fund_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fund_id());
    }

    // optional string session_id = 7;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }

    // optional string trader_id = 8;
    if (has_trader_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trader_id());
    }

  }
  if (_has_bits_[0 / 32] & 192u) {
    // optional int32 asset_prop = 5;
    if (has_asset_prop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->asset_prop());
    }

    // optional int32 funcid = 1 [default = 11001005];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StockDeletesReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.StockDeletesReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const StockDeletesReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StockDeletesReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.StockDeletesReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.StockDeletesReqt)
    MergeFrom(*source);
  }
}

void StockDeletesReqt::MergeFrom(const StockDeletesReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.StockDeletesReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_order_group();
      order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_fund_id();
      fund_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fund_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_session_id();
      session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_trader_id();
      trader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trader_id_);
    }
    if (cached_has_bits & 0x00000020u) {
      market_ = from.market_;
    }
    if (cached_has_bits & 0x00000040u) {
      asset_prop_ = from.asset_prop_;
    }
    if (cached_has_bits & 0x00000080u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StockDeletesReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.StockDeletesReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockDeletesReqt::CopyFrom(const StockDeletesReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.StockDeletesReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockDeletesReqt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000021) != 0x00000021) return false;
  return true;
}

void StockDeletesReqt::Swap(StockDeletesReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockDeletesReqt::InternalSwap(StockDeletesReqt* other) {
  using std::swap;
  order_group_.Swap(&other->order_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fund_id_.Swap(&other->fund_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  session_id_.Swap(&other->session_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trader_id_.Swap(&other->trader_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(market_, other->market_);
  swap(asset_prop_, other->asset_prop_);
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StockDeletesReqt::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StockDeletesResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockDeletesResp::kFuncidFieldNumber;
const int StockDeletesResp::kOrderGroupFieldNumber;
const int StockDeletesResp::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockDeletesResp::StockDeletesResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockDeletesResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.StockDeletesResp)
}
StockDeletesResp::StockDeletesResp(const StockDeletesResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_group()) {
    order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:autotrade.StockDeletesResp)
}

void StockDeletesResp::SharedCtor() {
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  funcid_ = 11101005;
}

StockDeletesResp::~StockDeletesResp() {
  // @@protoc_insertion_point(destructor:autotrade.StockDeletesResp)
  SharedDtor();
}

void StockDeletesResp::SharedDtor() {
  order_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StockDeletesResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StockDeletesResp::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StockDeletesResp& StockDeletesResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockDeletesResp.base);
  return *internal_default_instance();
}


void StockDeletesResp::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.StockDeletesResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      order_group_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    funcid_ = 11101005;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StockDeletesResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.StockDeletesResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 11101005];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_group = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_group().data(), static_cast<int>(this->order_group().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockDeletesResp.order_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockDeletesResp.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.StockDeletesResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.StockDeletesResp)
  return false;
#undef DO_
}

void StockDeletesResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.StockDeletesResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11101005];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional string order_group = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockDeletesResp.order_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->order_group(), output);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockDeletesResp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.StockDeletesResp)
}

::google::protobuf::uint8* StockDeletesResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.StockDeletesResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11101005];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional string order_group = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockDeletesResp.order_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->order_group(), target);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockDeletesResp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.StockDeletesResp)
  return target;
}

size_t StockDeletesResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.StockDeletesResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string order_group = 2;
    if (has_order_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_group());
    }

    // optional string request_id = 3;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional int32 funcid = 1 [default = 11101005];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StockDeletesResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.StockDeletesResp)
  GOOGLE_DCHECK_NE(&from, this);
  const StockDeletesResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StockDeletesResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.StockDeletesResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.StockDeletesResp)
    MergeFrom(*source);
  }
}

void StockDeletesResp::MergeFrom(const StockDeletesResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.StockDeletesResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_order_group();
      order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StockDeletesResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.StockDeletesResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockDeletesResp::CopyFrom(const StockDeletesResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.StockDeletesResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockDeletesResp::IsInitialized() const {
  return true;
}

void StockDeletesResp::Swap(StockDeletesResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockDeletesResp::InternalSwap(StockDeletesResp* other) {
  using std::swap;
  order_group_.Swap(&other->order_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StockDeletesResp::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StockCreateRedeemReqt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockCreateRedeemReqt::kFuncidFieldNumber;
const int StockCreateRedeemReqt::kCodeFieldNumber;
const int StockCreateRedeemReqt::kQtyFieldNumber;
const int StockCreateRedeemReqt::kBasketQtyFieldNumber;
const int StockCreateRedeemReqt::kBsflagFieldNumber;
const int StockCreateRedeemReqt::kMarketFieldNumber;
const int StockCreateRedeemReqt::kPriceFieldNumber;
const int StockCreateRedeemReqt::kRequestIdFieldNumber;
const int StockCreateRedeemReqt::kRequestTimeFieldNumber;
const int StockCreateRedeemReqt::kActiveIntervalFieldNumber;
const int StockCreateRedeemReqt::kRequestDateFieldNumber;
const int StockCreateRedeemReqt::kOrderIdFieldNumber;
const int StockCreateRedeemReqt::kRobotIdFieldNumber;
const int StockCreateRedeemReqt::kTraderIdFieldNumber;
const int StockCreateRedeemReqt::kFundIdFieldNumber;
const int StockCreateRedeemReqt::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockCreateRedeemReqt::StockCreateRedeemReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockCreateRedeemReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.StockCreateRedeemReqt)
}
StockCreateRedeemReqt::StockCreateRedeemReqt(const StockCreateRedeemReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_id()) {
    order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
  }
  robot_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_robot_id()) {
    robot_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robot_id_);
  }
  trader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trader_id()) {
    trader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trader_id_);
  }
  fund_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fund_id()) {
    fund_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fund_id_);
  }
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_session_id()) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  ::memcpy(&qty_, &from.qty_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_interval_) -
    reinterpret_cast<char*>(&qty_)) + sizeof(active_interval_));
  // @@protoc_insertion_point(copy_constructor:autotrade.StockCreateRedeemReqt)
}

void StockCreateRedeemReqt::SharedCtor() {
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robot_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fund_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&qty_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_date_) -
      reinterpret_cast<char*>(&qty_)) + sizeof(request_date_));
  funcid_ = 11001003;
  active_interval_ = GOOGLE_LONGLONG(1000);
}

StockCreateRedeemReqt::~StockCreateRedeemReqt() {
  // @@protoc_insertion_point(destructor:autotrade.StockCreateRedeemReqt)
  SharedDtor();
}

void StockCreateRedeemReqt::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robot_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trader_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fund_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StockCreateRedeemReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StockCreateRedeemReqt::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StockCreateRedeemReqt& StockCreateRedeemReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockCreateRedeemReqt.base);
  return *internal_default_instance();
}


void StockCreateRedeemReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.StockCreateRedeemReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      order_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      robot_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      trader_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      fund_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      session_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  qty_ = GOOGLE_LONGLONG(0);
  if (cached_has_bits & 65280u) {
    ::memset(&basket_qty_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&request_date_) -
        reinterpret_cast<char*>(&basket_qty_)) + sizeof(request_date_));
    funcid_ = 11001003;
    active_interval_ = GOOGLE_LONGLONG(1000);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StockCreateRedeemReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.StockCreateRedeemReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 11001003];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockCreateRedeemReqt.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 qty = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 basket_qty = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_basket_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &basket_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 bsflag = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_bsflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bsflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 market = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_market();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &market_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 price = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockCreateRedeemReqt.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 request_time = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_request_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 active_interval = 10 [default = 1000];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_active_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &active_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 request_date = 11 [default = 0];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_request_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_id().data(), static_cast<int>(this->order_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockCreateRedeemReqt.order_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string robot_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robot_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->robot_id().data(), static_cast<int>(this->robot_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockCreateRedeemReqt.robot_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string trader_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trader_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trader_id().data(), static_cast<int>(this->trader_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockCreateRedeemReqt.trader_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fund_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fund_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fund_id().data(), static_cast<int>(this->fund_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockCreateRedeemReqt.fund_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string session_id = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockCreateRedeemReqt.session_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.StockCreateRedeemReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.StockCreateRedeemReqt)
  return false;
#undef DO_
}

void StockCreateRedeemReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.StockCreateRedeemReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11001003];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // required string code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockCreateRedeemReqt.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->code(), output);
  }

  // required int64 qty = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->qty(), output);
  }

  // required int64 basket_qty = 4;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->basket_qty(), output);
  }

  // required uint32 bsflag = 5;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->bsflag(), output);
  }

  // required uint32 market = 6;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->market(), output);
  }

  // optional int64 price = 7;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->price(), output);
  }

  // optional string request_id = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockCreateRedeemReqt.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->request_id(), output);
  }

  // optional int64 request_time = 9 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->request_time(), output);
  }

  // optional int64 active_interval = 10 [default = 1000];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->active_interval(), output);
  }

  // optional int64 request_date = 11 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->request_date(), output);
  }

  // optional string order_id = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockCreateRedeemReqt.order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->order_id(), output);
  }

  // optional string robot_id = 13;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robot_id().data(), static_cast<int>(this->robot_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockCreateRedeemReqt.robot_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->robot_id(), output);
  }

  // optional string trader_id = 14;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trader_id().data(), static_cast<int>(this->trader_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockCreateRedeemReqt.trader_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->trader_id(), output);
  }

  // optional string fund_id = 15;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fund_id().data(), static_cast<int>(this->fund_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockCreateRedeemReqt.fund_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->fund_id(), output);
  }

  // optional string session_id = 16;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockCreateRedeemReqt.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->session_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.StockCreateRedeemReqt)
}

::google::protobuf::uint8* StockCreateRedeemReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.StockCreateRedeemReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11001003];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // required string code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockCreateRedeemReqt.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  // required int64 qty = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->qty(), target);
  }

  // required int64 basket_qty = 4;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->basket_qty(), target);
  }

  // required uint32 bsflag = 5;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->bsflag(), target);
  }

  // required uint32 market = 6;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->market(), target);
  }

  // optional int64 price = 7;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->price(), target);
  }

  // optional string request_id = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockCreateRedeemReqt.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->request_id(), target);
  }

  // optional int64 request_time = 9 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->request_time(), target);
  }

  // optional int64 active_interval = 10 [default = 1000];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->active_interval(), target);
  }

  // optional int64 request_date = 11 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->request_date(), target);
  }

  // optional string order_id = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockCreateRedeemReqt.order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->order_id(), target);
  }

  // optional string robot_id = 13;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robot_id().data(), static_cast<int>(this->robot_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockCreateRedeemReqt.robot_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->robot_id(), target);
  }

  // optional string trader_id = 14;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trader_id().data(), static_cast<int>(this->trader_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockCreateRedeemReqt.trader_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->trader_id(), target);
  }

  // optional string fund_id = 15;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fund_id().data(), static_cast<int>(this->fund_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockCreateRedeemReqt.fund_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->fund_id(), target);
  }

  // optional string session_id = 16;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockCreateRedeemReqt.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->session_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.StockCreateRedeemReqt)
  return target;
}

size_t StockCreateRedeemReqt::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autotrade.StockCreateRedeemReqt)
  size_t total_size = 0;

  if (has_code()) {
    // required string code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_qty()) {
    // required int64 qty = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->qty());
  }

  if (has_basket_qty()) {
    // required int64 basket_qty = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->basket_qty());
  }

  if (has_bsflag()) {
    // required uint32 bsflag = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bsflag());
  }

  if (has_market()) {
    // required uint32 market = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->market());
  }

  return total_size;
}
size_t StockCreateRedeemReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.StockCreateRedeemReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000781) ^ 0x00000781) == 0) {  // All required fields are present.
    // required string code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required int64 qty = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->qty());

    // required int64 basket_qty = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->basket_qty());

    // required uint32 bsflag = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bsflag());

    // required uint32 market = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->market());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 126u) {
    // optional string request_id = 8;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional string order_id = 12;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_id());
    }

    // optional string robot_id = 13;
    if (has_robot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->robot_id());
    }

    // optional string trader_id = 14;
    if (has_trader_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trader_id());
    }

    // optional string fund_id = 15;
    if (has_fund_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fund_id());
    }

    // optional string session_id = 16;
    if (has_session_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }

  }
  if (_has_bits_[8 / 32] & 63488u) {
    // optional int64 price = 7;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->price());
    }

    // optional int64 request_time = 9 [default = 0];
    if (has_request_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->request_time());
    }

    // optional int64 request_date = 11 [default = 0];
    if (has_request_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->request_date());
    }

    // optional int32 funcid = 1 [default = 11001003];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

    // optional int64 active_interval = 10 [default = 1000];
    if (has_active_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->active_interval());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StockCreateRedeemReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.StockCreateRedeemReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const StockCreateRedeemReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StockCreateRedeemReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.StockCreateRedeemReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.StockCreateRedeemReqt)
    MergeFrom(*source);
  }
}

void StockCreateRedeemReqt::MergeFrom(const StockCreateRedeemReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.StockCreateRedeemReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_order_id();
      order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_robot_id();
      robot_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robot_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_trader_id();
      trader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trader_id_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_fund_id();
      fund_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fund_id_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_session_id();
      session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
    }
    if (cached_has_bits & 0x00000080u) {
      qty_ = from.qty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      basket_qty_ = from.basket_qty_;
    }
    if (cached_has_bits & 0x00000200u) {
      bsflag_ = from.bsflag_;
    }
    if (cached_has_bits & 0x00000400u) {
      market_ = from.market_;
    }
    if (cached_has_bits & 0x00000800u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00001000u) {
      request_time_ = from.request_time_;
    }
    if (cached_has_bits & 0x00002000u) {
      request_date_ = from.request_date_;
    }
    if (cached_has_bits & 0x00004000u) {
      funcid_ = from.funcid_;
    }
    if (cached_has_bits & 0x00008000u) {
      active_interval_ = from.active_interval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StockCreateRedeemReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.StockCreateRedeemReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockCreateRedeemReqt::CopyFrom(const StockCreateRedeemReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.StockCreateRedeemReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockCreateRedeemReqt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000781) != 0x00000781) return false;
  return true;
}

void StockCreateRedeemReqt::Swap(StockCreateRedeemReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockCreateRedeemReqt::InternalSwap(StockCreateRedeemReqt* other) {
  using std::swap;
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_id_.Swap(&other->order_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  robot_id_.Swap(&other->robot_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trader_id_.Swap(&other->trader_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fund_id_.Swap(&other->fund_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  session_id_.Swap(&other->session_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(qty_, other->qty_);
  swap(basket_qty_, other->basket_qty_);
  swap(bsflag_, other->bsflag_);
  swap(market_, other->market_);
  swap(price_, other->price_);
  swap(request_time_, other->request_time_);
  swap(request_date_, other->request_date_);
  swap(funcid_, other->funcid_);
  swap(active_interval_, other->active_interval_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StockCreateRedeemReqt::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StockCreateRedeemResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockCreateRedeemResp::kFuncidFieldNumber;
const int StockCreateRedeemResp::kOrderGroupFieldNumber;
const int StockCreateRedeemResp::kRequestIdFieldNumber;
const int StockCreateRedeemResp::kOrderIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockCreateRedeemResp::StockCreateRedeemResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockCreateRedeemResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.StockCreateRedeemResp)
}
StockCreateRedeemResp::StockCreateRedeemResp(const StockCreateRedeemResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_group()) {
    order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_id()) {
    order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
  }
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:autotrade.StockCreateRedeemResp)
}

void StockCreateRedeemResp::SharedCtor() {
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  funcid_ = 11101003;
}

StockCreateRedeemResp::~StockCreateRedeemResp() {
  // @@protoc_insertion_point(destructor:autotrade.StockCreateRedeemResp)
  SharedDtor();
}

void StockCreateRedeemResp::SharedDtor() {
  order_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StockCreateRedeemResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StockCreateRedeemResp::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StockCreateRedeemResp& StockCreateRedeemResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockCreateRedeemResp.base);
  return *internal_default_instance();
}


void StockCreateRedeemResp::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.StockCreateRedeemResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      order_group_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      order_id_.ClearNonDefaultToEmptyNoArena();
    }
    funcid_ = 11101003;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StockCreateRedeemResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.StockCreateRedeemResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 11101003];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string order_group = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_group().data(), static_cast<int>(this->order_group().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockCreateRedeemResp.order_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockCreateRedeemResp.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string order_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_id().data(), static_cast<int>(this->order_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockCreateRedeemResp.order_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.StockCreateRedeemResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.StockCreateRedeemResp)
  return false;
#undef DO_
}

void StockCreateRedeemResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.StockCreateRedeemResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11101003];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // required string order_group = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockCreateRedeemResp.order_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->order_group(), output);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockCreateRedeemResp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->request_id(), output);
  }

  // required string order_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockCreateRedeemResp.order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->order_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.StockCreateRedeemResp)
}

::google::protobuf::uint8* StockCreateRedeemResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.StockCreateRedeemResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11101003];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // required string order_group = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockCreateRedeemResp.order_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->order_group(), target);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockCreateRedeemResp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->request_id(), target);
  }

  // required string order_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockCreateRedeemResp.order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->order_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.StockCreateRedeemResp)
  return target;
}

size_t StockCreateRedeemResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autotrade.StockCreateRedeemResp)
  size_t total_size = 0;

  if (has_order_group()) {
    // required string order_group = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_group());
  }

  if (has_order_id()) {
    // required string order_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_id());
  }

  return total_size;
}
size_t StockCreateRedeemResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.StockCreateRedeemResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string order_group = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_group());

    // required string order_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string request_id = 3;
  if (has_request_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // optional int32 funcid = 1 [default = 11101003];
  if (has_funcid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->funcid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StockCreateRedeemResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.StockCreateRedeemResp)
  GOOGLE_DCHECK_NE(&from, this);
  const StockCreateRedeemResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StockCreateRedeemResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.StockCreateRedeemResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.StockCreateRedeemResp)
    MergeFrom(*source);
  }
}

void StockCreateRedeemResp::MergeFrom(const StockCreateRedeemResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.StockCreateRedeemResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_order_group();
      order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_order_id();
      order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StockCreateRedeemResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.StockCreateRedeemResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockCreateRedeemResp::CopyFrom(const StockCreateRedeemResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.StockCreateRedeemResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockCreateRedeemResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void StockCreateRedeemResp::Swap(StockCreateRedeemResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockCreateRedeemResp::InternalSwap(StockCreateRedeemResp* other) {
  using std::swap;
  order_group_.Swap(&other->order_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_id_.Swap(&other->order_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StockCreateRedeemResp::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StockQueryOrderReqt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockQueryOrderReqt::kFuncidFieldNumber;
const int StockQueryOrderReqt::kOrderGroupFieldNumber;
const int StockQueryOrderReqt::kQueryTypeFieldNumber;
const int StockQueryOrderReqt::kQueryFlagFieldNumber;
const int StockQueryOrderReqt::kStartPosFieldNumber;
const int StockQueryOrderReqt::kRequestIdFieldNumber;
const int StockQueryOrderReqt::kRequestTimeFieldNumber;
const int StockQueryOrderReqt::kActiveIntervalFieldNumber;
const int StockQueryOrderReqt::kFundIdFieldNumber;
const int StockQueryOrderReqt::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockQueryOrderReqt::StockQueryOrderReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockQueryOrderReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.StockQueryOrderReqt)
}
StockQueryOrderReqt::StockQueryOrderReqt(const StockQueryOrderReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_group()) {
    order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
  }
  start_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_start_pos()) {
    start_pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_pos_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  fund_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fund_id()) {
    fund_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fund_id_);
  }
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_session_id()) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  ::memcpy(&request_time_, &from.request_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_interval_) -
    reinterpret_cast<char*>(&request_time_)) + sizeof(active_interval_));
  // @@protoc_insertion_point(copy_constructor:autotrade.StockQueryOrderReqt)
}

void StockQueryOrderReqt::SharedCtor() {
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fund_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&request_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&query_type_) -
      reinterpret_cast<char*>(&request_time_)) + sizeof(query_type_));
  funcid_ = 11002002;
  query_flag_ = 1;
  active_interval_ = GOOGLE_LONGLONG(1000);
}

StockQueryOrderReqt::~StockQueryOrderReqt() {
  // @@protoc_insertion_point(destructor:autotrade.StockQueryOrderReqt)
  SharedDtor();
}

void StockQueryOrderReqt::SharedDtor() {
  order_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_pos_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fund_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StockQueryOrderReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StockQueryOrderReqt::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StockQueryOrderReqt& StockQueryOrderReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockQueryOrderReqt.base);
  return *internal_default_instance();
}


void StockQueryOrderReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.StockQueryOrderReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      order_group_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      start_pos_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      fund_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      session_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&request_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&query_type_) -
        reinterpret_cast<char*>(&request_time_)) + sizeof(query_type_));
    funcid_ = 11002002;
  }
  if (cached_has_bits & 768u) {
    query_flag_ = 1;
    active_interval_ = GOOGLE_LONGLONG(1000);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StockQueryOrderReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.StockQueryOrderReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 11002002];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_group = 2 [default = ""];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_group().data(), static_cast<int>(this->order_group().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockQueryOrderReqt.order_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autotrade.StockQueryOrderReqt.QueryType query_type = 3 [default = Type_ONCE];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::autotrade::StockQueryOrderReqt_QueryType_IsValid(value)) {
            set_query_type(static_cast< ::autotrade::StockQueryOrderReqt_QueryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autotrade.StockQueryOrderReqt.QueryFlag query_flag = 4 [default = Type_NO_DELETE];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::autotrade::StockQueryOrderReqt_QueryFlag_IsValid(value)) {
            set_query_flag(static_cast< ::autotrade::StockQueryOrderReqt_QueryFlag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string start_pos = 5 [default = ""];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_pos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->start_pos().data(), static_cast<int>(this->start_pos().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockQueryOrderReqt.start_pos");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockQueryOrderReqt.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 request_time = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_request_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 active_interval = 11 [default = 1000];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_active_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &active_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fund_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fund_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fund_id().data(), static_cast<int>(this->fund_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockQueryOrderReqt.fund_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string session_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockQueryOrderReqt.session_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.StockQueryOrderReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.StockQueryOrderReqt)
  return false;
#undef DO_
}

void StockQueryOrderReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.StockQueryOrderReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11002002];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional string order_group = 2 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrderReqt.order_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->order_group(), output);
  }

  // optional .autotrade.StockQueryOrderReqt.QueryType query_type = 3 [default = Type_ONCE];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->query_type(), output);
  }

  // optional .autotrade.StockQueryOrderReqt.QueryFlag query_flag = 4 [default = Type_NO_DELETE];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->query_flag(), output);
  }

  // optional string start_pos = 5 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_pos().data(), static_cast<int>(this->start_pos().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrderReqt.start_pos");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->start_pos(), output);
  }

  // optional string request_id = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrderReqt.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->request_id(), output);
  }

  // optional int64 request_time = 10 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->request_time(), output);
  }

  // optional int64 active_interval = 11 [default = 1000];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->active_interval(), output);
  }

  // optional string fund_id = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fund_id().data(), static_cast<int>(this->fund_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrderReqt.fund_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->fund_id(), output);
  }

  // optional string session_id = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrderReqt.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->session_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.StockQueryOrderReqt)
}

::google::protobuf::uint8* StockQueryOrderReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.StockQueryOrderReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11002002];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional string order_group = 2 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrderReqt.order_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->order_group(), target);
  }

  // optional .autotrade.StockQueryOrderReqt.QueryType query_type = 3 [default = Type_ONCE];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->query_type(), target);
  }

  // optional .autotrade.StockQueryOrderReqt.QueryFlag query_flag = 4 [default = Type_NO_DELETE];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->query_flag(), target);
  }

  // optional string start_pos = 5 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_pos().data(), static_cast<int>(this->start_pos().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrderReqt.start_pos");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->start_pos(), target);
  }

  // optional string request_id = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrderReqt.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->request_id(), target);
  }

  // optional int64 request_time = 10 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->request_time(), target);
  }

  // optional int64 active_interval = 11 [default = 1000];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->active_interval(), target);
  }

  // optional string fund_id = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fund_id().data(), static_cast<int>(this->fund_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrderReqt.fund_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->fund_id(), target);
  }

  // optional string session_id = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrderReqt.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->session_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.StockQueryOrderReqt)
  return target;
}

size_t StockQueryOrderReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.StockQueryOrderReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string order_group = 2 [default = ""];
    if (has_order_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_group());
    }

    // optional string start_pos = 5 [default = ""];
    if (has_start_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start_pos());
    }

    // optional string request_id = 6;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional string fund_id = 12;
    if (has_fund_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fund_id());
    }

    // optional string session_id = 13;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }

    // optional int64 request_time = 10 [default = 0];
    if (has_request_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->request_time());
    }

    // optional .autotrade.StockQueryOrderReqt.QueryType query_type = 3 [default = Type_ONCE];
    if (has_query_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->query_type());
    }

    // optional int32 funcid = 1 [default = 11002002];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional .autotrade.StockQueryOrderReqt.QueryFlag query_flag = 4 [default = Type_NO_DELETE];
    if (has_query_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->query_flag());
    }

    // optional int64 active_interval = 11 [default = 1000];
    if (has_active_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->active_interval());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StockQueryOrderReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.StockQueryOrderReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const StockQueryOrderReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StockQueryOrderReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.StockQueryOrderReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.StockQueryOrderReqt)
    MergeFrom(*source);
  }
}

void StockQueryOrderReqt::MergeFrom(const StockQueryOrderReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.StockQueryOrderReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_order_group();
      order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_start_pos();
      start_pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_pos_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_fund_id();
      fund_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fund_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_session_id();
      session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
    }
    if (cached_has_bits & 0x00000020u) {
      request_time_ = from.request_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      query_type_ = from.query_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      query_flag_ = from.query_flag_;
    }
    if (cached_has_bits & 0x00000200u) {
      active_interval_ = from.active_interval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StockQueryOrderReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.StockQueryOrderReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockQueryOrderReqt::CopyFrom(const StockQueryOrderReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.StockQueryOrderReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockQueryOrderReqt::IsInitialized() const {
  return true;
}

void StockQueryOrderReqt::Swap(StockQueryOrderReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockQueryOrderReqt::InternalSwap(StockQueryOrderReqt* other) {
  using std::swap;
  order_group_.Swap(&other->order_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  start_pos_.Swap(&other->start_pos_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fund_id_.Swap(&other->fund_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  session_id_.Swap(&other->session_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(request_time_, other->request_time_);
  swap(query_type_, other->query_type_);
  swap(funcid_, other->funcid_);
  swap(query_flag_, other->query_flag_);
  swap(active_interval_, other->active_interval_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StockQueryOrderReqt::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StockQueryOrderResp_OrderDetail::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockQueryOrderResp_OrderDetail::kMatchTimeFieldNumber;
const int StockQueryOrderResp_OrderDetail::kOrdernoFieldNumber;
const int StockQueryOrderResp_OrderDetail::kBsflagFieldNumber;
const int StockQueryOrderResp_OrderDetail::kOrderidFieldNumber;
const int StockQueryOrderResp_OrderDetail::kSumbitTimeFieldNumber;
const int StockQueryOrderResp_OrderDetail::kOrderTimeFieldNumber;
const int StockQueryOrderResp_OrderDetail::kMarketFieldNumber;
const int StockQueryOrderResp_OrderDetail::kCodeFieldNumber;
const int StockQueryOrderResp_OrderDetail::kOrderPriceFieldNumber;
const int StockQueryOrderResp_OrderDetail::kOrderQtyFieldNumber;
const int StockQueryOrderResp_OrderDetail::kOrderFrzAmtFieldNumber;
const int StockQueryOrderResp_OrderDetail::kMatchAmtFieldNumber;
const int StockQueryOrderResp_OrderDetail::kMatchQtyFieldNumber;
const int StockQueryOrderResp_OrderDetail::kCancelQtyFieldNumber;
const int StockQueryOrderResp_OrderDetail::kOrderStatusFieldNumber;
const int StockQueryOrderResp_OrderDetail::kCodeNameFieldNumber;
const int StockQueryOrderResp_OrderDetail::kClearAmtFieldNumber;
const int StockQueryOrderResp_OrderDetail::kOrderGroupFieldNumber;
const int StockQueryOrderResp_OrderDetail::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockQueryOrderResp_OrderDetail::StockQueryOrderResp_OrderDetail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockQueryOrderResp_OrderDetail.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.StockQueryOrderResp.OrderDetail)
}
StockQueryOrderResp_OrderDetail::StockQueryOrderResp_OrderDetail(const StockQueryOrderResp_OrderDetail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  orderno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_orderno()) {
    orderno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderno_);
  }
  orderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_orderid()) {
    orderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  code_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code_name()) {
    code_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_name_);
  }
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_group()) {
    order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
  }
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_info()) {
    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  ::memcpy(&match_time_, &from.match_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&cancel_qty_) -
    reinterpret_cast<char*>(&match_time_)) + sizeof(cancel_qty_));
  // @@protoc_insertion_point(copy_constructor:autotrade.StockQueryOrderResp.OrderDetail)
}

void StockQueryOrderResp_OrderDetail::SharedCtor() {
  orderno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&match_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cancel_qty_) -
      reinterpret_cast<char*>(&match_time_)) + sizeof(cancel_qty_));
}

StockQueryOrderResp_OrderDetail::~StockQueryOrderResp_OrderDetail() {
  // @@protoc_insertion_point(destructor:autotrade.StockQueryOrderResp.OrderDetail)
  SharedDtor();
}

void StockQueryOrderResp_OrderDetail::SharedDtor() {
  orderno_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StockQueryOrderResp_OrderDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StockQueryOrderResp_OrderDetail::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StockQueryOrderResp_OrderDetail& StockQueryOrderResp_OrderDetail::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockQueryOrderResp_OrderDetail.base);
  return *internal_default_instance();
}


void StockQueryOrderResp_OrderDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.StockQueryOrderResp.OrderDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      orderno_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      orderid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      code_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      order_group_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      info_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&match_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sumbit_time_) -
        reinterpret_cast<char*>(&match_time_)) + sizeof(sumbit_time_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&bsflag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_amt_) -
        reinterpret_cast<char*>(&bsflag_)) + sizeof(match_amt_));
  }
  if (cached_has_bits & 458752u) {
    ::memset(&order_status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cancel_qty_) -
        reinterpret_cast<char*>(&order_status_)) + sizeof(cancel_qty_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StockQueryOrderResp_OrderDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.StockQueryOrderResp.OrderDetail)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_match_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string orderno = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orderno().data(), static_cast<int>(this->orderno().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockQueryOrderResp.OrderDetail.orderno");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 bsflag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_bsflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bsflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string orderid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orderid().data(), static_cast<int>(this->orderid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockQueryOrderResp.OrderDetail.orderid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 sumbit_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_sumbit_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sumbit_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 order_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_order_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &order_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 market = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_market();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &market_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string code = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockQueryOrderResp.OrderDetail.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 order_price = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_order_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &order_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 order_qty = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_order_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double order_frz_amt = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_order_frz_amt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &order_frz_amt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double match_amt = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_match_amt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &match_amt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 match_qty = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_match_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 cancel_qty = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_cancel_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cancel_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 order_status = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_order_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &order_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string code_name = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code_name().data(), static_cast<int>(this->code_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockQueryOrderResp.OrderDetail.code_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double clear_amt = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {
          set_has_clear_amt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &clear_amt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_group = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_group().data(), static_cast<int>(this->order_group().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockQueryOrderResp.OrderDetail.order_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string info = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info().data(), static_cast<int>(this->info().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockQueryOrderResp.OrderDetail.info");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.StockQueryOrderResp.OrderDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.StockQueryOrderResp.OrderDetail)
  return false;
#undef DO_
}

void StockQueryOrderResp_OrderDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.StockQueryOrderResp.OrderDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_time = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_time(), output);
  }

  // required string orderno = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderno().data(), static_cast<int>(this->orderno().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrderResp.OrderDetail.orderno");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->orderno(), output);
  }

  // required uint32 bsflag = 3;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bsflag(), output);
  }

  // optional string orderid = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderid().data(), static_cast<int>(this->orderid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrderResp.OrderDetail.orderid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->orderid(), output);
  }

  // optional uint64 sumbit_time = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->sumbit_time(), output);
  }

  // optional uint64 order_time = 6;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->order_time(), output);
  }

  // required uint32 market = 7;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->market(), output);
  }

  // required string code = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrderResp.OrderDetail.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->code(), output);
  }

  // required int64 order_price = 9;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->order_price(), output);
  }

  // required uint32 order_qty = 10;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->order_qty(), output);
  }

  // optional double order_frz_amt = 11;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->order_frz_amt(), output);
  }

  // optional double match_amt = 12;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->match_amt(), output);
  }

  // required uint32 match_qty = 13;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->match_qty(), output);
  }

  // required uint32 cancel_qty = 14;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->cancel_qty(), output);
  }

  // required int64 order_status = 15;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->order_status(), output);
  }

  // optional string code_name = 16;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code_name().data(), static_cast<int>(this->code_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrderResp.OrderDetail.code_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->code_name(), output);
  }

  // optional double clear_amt = 17;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->clear_amt(), output);
  }

  // optional string order_group = 18;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrderResp.OrderDetail.order_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->order_group(), output);
  }

  // optional string info = 19;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), static_cast<int>(this->info().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrderResp.OrderDetail.info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.StockQueryOrderResp.OrderDetail)
}

::google::protobuf::uint8* StockQueryOrderResp_OrderDetail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.StockQueryOrderResp.OrderDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_time = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_time(), target);
  }

  // required string orderno = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderno().data(), static_cast<int>(this->orderno().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrderResp.OrderDetail.orderno");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->orderno(), target);
  }

  // required uint32 bsflag = 3;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bsflag(), target);
  }

  // optional string orderid = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderid().data(), static_cast<int>(this->orderid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrderResp.OrderDetail.orderid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->orderid(), target);
  }

  // optional uint64 sumbit_time = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->sumbit_time(), target);
  }

  // optional uint64 order_time = 6;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->order_time(), target);
  }

  // required uint32 market = 7;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->market(), target);
  }

  // required string code = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrderResp.OrderDetail.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->code(), target);
  }

  // required int64 order_price = 9;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->order_price(), target);
  }

  // required uint32 order_qty = 10;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->order_qty(), target);
  }

  // optional double order_frz_amt = 11;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->order_frz_amt(), target);
  }

  // optional double match_amt = 12;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->match_amt(), target);
  }

  // required uint32 match_qty = 13;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->match_qty(), target);
  }

  // required uint32 cancel_qty = 14;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->cancel_qty(), target);
  }

  // required int64 order_status = 15;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->order_status(), target);
  }

  // optional string code_name = 16;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code_name().data(), static_cast<int>(this->code_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrderResp.OrderDetail.code_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->code_name(), target);
  }

  // optional double clear_amt = 17;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->clear_amt(), target);
  }

  // optional string order_group = 18;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrderResp.OrderDetail.order_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->order_group(), target);
  }

  // optional string info = 19;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), static_cast<int>(this->info().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrderResp.OrderDetail.info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->info(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.StockQueryOrderResp.OrderDetail)
  return target;
}

size_t StockQueryOrderResp_OrderDetail::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autotrade.StockQueryOrderResp.OrderDetail)
  size_t total_size = 0;

  if (has_orderno()) {
    // required string orderno = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderno());
  }

  if (has_code()) {
    // required string code = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_bsflag()) {
    // required uint32 bsflag = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bsflag());
  }

  if (has_market()) {
    // required uint32 market = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->market());
  }

  if (has_order_price()) {
    // required int64 order_price = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->order_price());
  }

  if (has_order_qty()) {
    // required uint32 order_qty = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->order_qty());
  }

  if (has_match_qty()) {
    // required uint32 match_qty = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->match_qty());
  }

  if (has_order_status()) {
    // required int64 order_status = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->order_status());
  }

  if (has_cancel_qty()) {
    // required uint32 cancel_qty = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cancel_qty());
  }

  return total_size;
}
size_t StockQueryOrderResp_OrderDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.StockQueryOrderResp.OrderDetail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00056b05) ^ 0x00056b05) == 0) {  // All required fields are present.
    // required string orderno = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderno());

    // required string code = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required uint32 bsflag = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bsflag());

    // required uint32 market = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->market());

    // required int64 order_price = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->order_price());

    // required uint32 order_qty = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->order_qty());

    // required uint32 match_qty = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->match_qty());

    // required int64 order_status = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->order_status());

    // required uint32 cancel_qty = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cancel_qty());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string orderid = 4;
  if (has_orderid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderid());
  }

  if (_has_bits_[0 / 32] & 248u) {
    // optional string code_name = 16;
    if (has_code_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code_name());
    }

    // optional string order_group = 18;
    if (has_order_group()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_group());
    }

    // optional string info = 19;
    if (has_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

    // optional uint64 match_time = 1;
    if (has_match_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_time());
    }

    // optional uint64 sumbit_time = 5;
    if (has_sumbit_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sumbit_time());
    }

  }
  // optional uint64 order_time = 6;
  if (has_order_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->order_time());
  }

  // optional double order_frz_amt = 11;
  if (has_order_frz_amt()) {
    total_size += 1 + 8;
  }

  // optional double match_amt = 12;
  if (has_match_amt()) {
    total_size += 1 + 8;
  }

  // optional double clear_amt = 17;
  if (has_clear_amt()) {
    total_size += 2 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StockQueryOrderResp_OrderDetail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.StockQueryOrderResp.OrderDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const StockQueryOrderResp_OrderDetail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StockQueryOrderResp_OrderDetail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.StockQueryOrderResp.OrderDetail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.StockQueryOrderResp.OrderDetail)
    MergeFrom(*source);
  }
}

void StockQueryOrderResp_OrderDetail::MergeFrom(const StockQueryOrderResp_OrderDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.StockQueryOrderResp.OrderDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_orderno();
      orderno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderno_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_orderid();
      orderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderid_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_code_name();
      code_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_name_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_order_group();
      order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_info();
      info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
    }
    if (cached_has_bits & 0x00000040u) {
      match_time_ = from.match_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      sumbit_time_ = from.sumbit_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      bsflag_ = from.bsflag_;
    }
    if (cached_has_bits & 0x00000200u) {
      market_ = from.market_;
    }
    if (cached_has_bits & 0x00000400u) {
      order_time_ = from.order_time_;
    }
    if (cached_has_bits & 0x00000800u) {
      order_price_ = from.order_price_;
    }
    if (cached_has_bits & 0x00001000u) {
      order_frz_amt_ = from.order_frz_amt_;
    }
    if (cached_has_bits & 0x00002000u) {
      order_qty_ = from.order_qty_;
    }
    if (cached_has_bits & 0x00004000u) {
      match_qty_ = from.match_qty_;
    }
    if (cached_has_bits & 0x00008000u) {
      match_amt_ = from.match_amt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 458752u) {
    if (cached_has_bits & 0x00010000u) {
      order_status_ = from.order_status_;
    }
    if (cached_has_bits & 0x00020000u) {
      clear_amt_ = from.clear_amt_;
    }
    if (cached_has_bits & 0x00040000u) {
      cancel_qty_ = from.cancel_qty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StockQueryOrderResp_OrderDetail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.StockQueryOrderResp.OrderDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockQueryOrderResp_OrderDetail::CopyFrom(const StockQueryOrderResp_OrderDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.StockQueryOrderResp.OrderDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockQueryOrderResp_OrderDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00056b05) != 0x00056b05) return false;
  return true;
}

void StockQueryOrderResp_OrderDetail::Swap(StockQueryOrderResp_OrderDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockQueryOrderResp_OrderDetail::InternalSwap(StockQueryOrderResp_OrderDetail* other) {
  using std::swap;
  orderno_.Swap(&other->orderno_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  orderid_.Swap(&other->orderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  code_name_.Swap(&other->code_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_group_.Swap(&other->order_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  info_.Swap(&other->info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(match_time_, other->match_time_);
  swap(sumbit_time_, other->sumbit_time_);
  swap(bsflag_, other->bsflag_);
  swap(market_, other->market_);
  swap(order_time_, other->order_time_);
  swap(order_price_, other->order_price_);
  swap(order_frz_amt_, other->order_frz_amt_);
  swap(order_qty_, other->order_qty_);
  swap(match_qty_, other->match_qty_);
  swap(match_amt_, other->match_amt_);
  swap(order_status_, other->order_status_);
  swap(clear_amt_, other->clear_amt_);
  swap(cancel_qty_, other->cancel_qty_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StockQueryOrderResp_OrderDetail::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StockQueryOrderResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockQueryOrderResp::kFuncidFieldNumber;
const int StockQueryOrderResp::kDetailListFieldNumber;
const int StockQueryOrderResp::kLastPosFieldNumber;
const int StockQueryOrderResp::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockQueryOrderResp::StockQueryOrderResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockQueryOrderResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.StockQueryOrderResp)
}
StockQueryOrderResp::StockQueryOrderResp(const StockQueryOrderResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      detail_list_(from.detail_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  last_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_last_pos()) {
    last_pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_pos_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:autotrade.StockQueryOrderResp)
}

void StockQueryOrderResp::SharedCtor() {
  last_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  funcid_ = 11102002;
}

StockQueryOrderResp::~StockQueryOrderResp() {
  // @@protoc_insertion_point(destructor:autotrade.StockQueryOrderResp)
  SharedDtor();
}

void StockQueryOrderResp::SharedDtor() {
  last_pos_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StockQueryOrderResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StockQueryOrderResp::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StockQueryOrderResp& StockQueryOrderResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockQueryOrderResp.base);
  return *internal_default_instance();
}


void StockQueryOrderResp::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.StockQueryOrderResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detail_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      last_pos_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    funcid_ = 11102002;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StockQueryOrderResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.StockQueryOrderResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 11102002];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autotrade.StockQueryOrderResp.OrderDetail detail_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_detail_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string last_pos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_pos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->last_pos().data(), static_cast<int>(this->last_pos().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockQueryOrderResp.last_pos");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockQueryOrderResp.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.StockQueryOrderResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.StockQueryOrderResp)
  return false;
#undef DO_
}

void StockQueryOrderResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.StockQueryOrderResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11102002];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // repeated .autotrade.StockQueryOrderResp.OrderDetail detail_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detail_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->detail_list(static_cast<int>(i)),
      output);
  }

  // optional string last_pos = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_pos().data(), static_cast<int>(this->last_pos().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrderResp.last_pos");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->last_pos(), output);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrderResp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.StockQueryOrderResp)
}

::google::protobuf::uint8* StockQueryOrderResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.StockQueryOrderResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11102002];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // repeated .autotrade.StockQueryOrderResp.OrderDetail detail_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detail_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->detail_list(static_cast<int>(i)), deterministic, target);
  }

  // optional string last_pos = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_pos().data(), static_cast<int>(this->last_pos().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrderResp.last_pos");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->last_pos(), target);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrderResp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.StockQueryOrderResp)
  return target;
}

size_t StockQueryOrderResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.StockQueryOrderResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .autotrade.StockQueryOrderResp.OrderDetail detail_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->detail_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->detail_list(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string last_pos = 3;
    if (has_last_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_pos());
    }

    // optional string request_id = 4;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional int32 funcid = 1 [default = 11102002];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StockQueryOrderResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.StockQueryOrderResp)
  GOOGLE_DCHECK_NE(&from, this);
  const StockQueryOrderResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StockQueryOrderResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.StockQueryOrderResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.StockQueryOrderResp)
    MergeFrom(*source);
  }
}

void StockQueryOrderResp::MergeFrom(const StockQueryOrderResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.StockQueryOrderResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detail_list_.MergeFrom(from.detail_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_last_pos();
      last_pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_pos_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StockQueryOrderResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.StockQueryOrderResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockQueryOrderResp::CopyFrom(const StockQueryOrderResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.StockQueryOrderResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockQueryOrderResp::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->detail_list())) return false;
  return true;
}

void StockQueryOrderResp::Swap(StockQueryOrderResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockQueryOrderResp::InternalSwap(StockQueryOrderResp* other) {
  using std::swap;
  CastToBase(&detail_list_)->InternalSwap(CastToBase(&other->detail_list_));
  last_pos_.Swap(&other->last_pos_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StockQueryOrderResp::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StockQueryOrdersReqt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockQueryOrdersReqt::kFuncidFieldNumber;
const int StockQueryOrdersReqt::kOrderGroupFieldNumber;
const int StockQueryOrdersReqt::kRequestIdFieldNumber;
const int StockQueryOrdersReqt::kRequestTimeFieldNumber;
const int StockQueryOrdersReqt::kActiveIntervalFieldNumber;
const int StockQueryOrdersReqt::kFundIdFieldNumber;
const int StockQueryOrdersReqt::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockQueryOrdersReqt::StockQueryOrdersReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockQueryOrdersReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.StockQueryOrdersReqt)
}
StockQueryOrdersReqt::StockQueryOrdersReqt(const StockQueryOrdersReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_group()) {
    order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  fund_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fund_id()) {
    fund_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fund_id_);
  }
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_session_id()) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  ::memcpy(&request_time_, &from.request_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_interval_) -
    reinterpret_cast<char*>(&request_time_)) + sizeof(active_interval_));
  // @@protoc_insertion_point(copy_constructor:autotrade.StockQueryOrdersReqt)
}

void StockQueryOrdersReqt::SharedCtor() {
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fund_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_time_ = GOOGLE_LONGLONG(0);
  funcid_ = 11002003;
  active_interval_ = GOOGLE_LONGLONG(1000);
}

StockQueryOrdersReqt::~StockQueryOrdersReqt() {
  // @@protoc_insertion_point(destructor:autotrade.StockQueryOrdersReqt)
  SharedDtor();
}

void StockQueryOrdersReqt::SharedDtor() {
  order_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fund_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StockQueryOrdersReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StockQueryOrdersReqt::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StockQueryOrdersReqt& StockQueryOrdersReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockQueryOrdersReqt.base);
  return *internal_default_instance();
}


void StockQueryOrdersReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.StockQueryOrdersReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      order_group_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      fund_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      session_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 112u) {
    request_time_ = GOOGLE_LONGLONG(0);
    funcid_ = 11002003;
    active_interval_ = GOOGLE_LONGLONG(1000);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StockQueryOrdersReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.StockQueryOrdersReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 11002003];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_group = 2 [default = ""];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_group().data(), static_cast<int>(this->order_group().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockQueryOrdersReqt.order_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockQueryOrdersReqt.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 request_time = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_request_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 active_interval = 5 [default = 1000];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_active_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &active_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fund_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fund_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fund_id().data(), static_cast<int>(this->fund_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockQueryOrdersReqt.fund_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string session_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockQueryOrdersReqt.session_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.StockQueryOrdersReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.StockQueryOrdersReqt)
  return false;
#undef DO_
}

void StockQueryOrdersReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.StockQueryOrdersReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11002003];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional string order_group = 2 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrdersReqt.order_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->order_group(), output);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrdersReqt.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->request_id(), output);
  }

  // optional int64 request_time = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->request_time(), output);
  }

  // optional int64 active_interval = 5 [default = 1000];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->active_interval(), output);
  }

  // optional string fund_id = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fund_id().data(), static_cast<int>(this->fund_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrdersReqt.fund_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->fund_id(), output);
  }

  // optional string session_id = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrdersReqt.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->session_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.StockQueryOrdersReqt)
}

::google::protobuf::uint8* StockQueryOrdersReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.StockQueryOrdersReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11002003];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional string order_group = 2 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrdersReqt.order_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->order_group(), target);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrdersReqt.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->request_id(), target);
  }

  // optional int64 request_time = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->request_time(), target);
  }

  // optional int64 active_interval = 5 [default = 1000];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->active_interval(), target);
  }

  // optional string fund_id = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fund_id().data(), static_cast<int>(this->fund_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrdersReqt.fund_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->fund_id(), target);
  }

  // optional string session_id = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrdersReqt.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->session_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.StockQueryOrdersReqt)
  return target;
}

size_t StockQueryOrdersReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.StockQueryOrdersReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string order_group = 2 [default = ""];
    if (has_order_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_group());
    }

    // optional string request_id = 3;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional string fund_id = 6;
    if (has_fund_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fund_id());
    }

    // optional string session_id = 7;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }

    // optional int64 request_time = 4 [default = 0];
    if (has_request_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->request_time());
    }

    // optional int32 funcid = 1 [default = 11002003];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

    // optional int64 active_interval = 5 [default = 1000];
    if (has_active_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->active_interval());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StockQueryOrdersReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.StockQueryOrdersReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const StockQueryOrdersReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StockQueryOrdersReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.StockQueryOrdersReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.StockQueryOrdersReqt)
    MergeFrom(*source);
  }
}

void StockQueryOrdersReqt::MergeFrom(const StockQueryOrdersReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.StockQueryOrdersReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_order_group();
      order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_fund_id();
      fund_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fund_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_session_id();
      session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      request_time_ = from.request_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      funcid_ = from.funcid_;
    }
    if (cached_has_bits & 0x00000040u) {
      active_interval_ = from.active_interval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StockQueryOrdersReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.StockQueryOrdersReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockQueryOrdersReqt::CopyFrom(const StockQueryOrdersReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.StockQueryOrdersReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockQueryOrdersReqt::IsInitialized() const {
  return true;
}

void StockQueryOrdersReqt::Swap(StockQueryOrdersReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockQueryOrdersReqt::InternalSwap(StockQueryOrdersReqt* other) {
  using std::swap;
  order_group_.Swap(&other->order_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fund_id_.Swap(&other->fund_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  session_id_.Swap(&other->session_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(request_time_, other->request_time_);
  swap(funcid_, other->funcid_);
  swap(active_interval_, other->active_interval_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StockQueryOrdersReqt::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StockQueryOrdersResp_OrderDetail::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockQueryOrdersResp_OrderDetail::kMatchTimeFieldNumber;
const int StockQueryOrdersResp_OrderDetail::kOrdernoFieldNumber;
const int StockQueryOrdersResp_OrderDetail::kOrderGroupFieldNumber;
const int StockQueryOrdersResp_OrderDetail::kBsflagFieldNumber;
const int StockQueryOrdersResp_OrderDetail::kSubmitTimeFieldNumber;
const int StockQueryOrdersResp_OrderDetail::kOrderTimeFieldNumber;
const int StockQueryOrdersResp_OrderDetail::kMarketFieldNumber;
const int StockQueryOrdersResp_OrderDetail::kCodeFieldNumber;
const int StockQueryOrdersResp_OrderDetail::kOrderPriceFieldNumber;
const int StockQueryOrdersResp_OrderDetail::kOrderQtyFieldNumber;
const int StockQueryOrdersResp_OrderDetail::kOrderFrzAmtFieldNumber;
const int StockQueryOrdersResp_OrderDetail::kMatchAmtFieldNumber;
const int StockQueryOrdersResp_OrderDetail::kMatchQtyFieldNumber;
const int StockQueryOrdersResp_OrderDetail::kCancelQtyFieldNumber;
const int StockQueryOrdersResp_OrderDetail::kOrderStatusFieldNumber;
const int StockQueryOrdersResp_OrderDetail::kCodeNameFieldNumber;
const int StockQueryOrdersResp_OrderDetail::kClearAmtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockQueryOrdersResp_OrderDetail::StockQueryOrdersResp_OrderDetail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockQueryOrdersResp_OrderDetail.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.StockQueryOrdersResp.OrderDetail)
}
StockQueryOrdersResp_OrderDetail::StockQueryOrdersResp_OrderDetail(const StockQueryOrdersResp_OrderDetail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  orderno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_orderno()) {
    orderno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderno_);
  }
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_group()) {
    order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
  }
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  order_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_status()) {
    order_status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_status_);
  }
  code_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code_name()) {
    code_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_name_);
  }
  ::memcpy(&match_time_, &from.match_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&cancel_qty_) -
    reinterpret_cast<char*>(&match_time_)) + sizeof(cancel_qty_));
  // @@protoc_insertion_point(copy_constructor:autotrade.StockQueryOrdersResp.OrderDetail)
}

void StockQueryOrdersResp_OrderDetail::SharedCtor() {
  orderno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&match_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cancel_qty_) -
      reinterpret_cast<char*>(&match_time_)) + sizeof(cancel_qty_));
}

StockQueryOrdersResp_OrderDetail::~StockQueryOrdersResp_OrderDetail() {
  // @@protoc_insertion_point(destructor:autotrade.StockQueryOrdersResp.OrderDetail)
  SharedDtor();
}

void StockQueryOrdersResp_OrderDetail::SharedDtor() {
  orderno_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StockQueryOrdersResp_OrderDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StockQueryOrdersResp_OrderDetail::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StockQueryOrdersResp_OrderDetail& StockQueryOrdersResp_OrderDetail::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockQueryOrdersResp_OrderDetail.base);
  return *internal_default_instance();
}


void StockQueryOrdersResp_OrderDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.StockQueryOrdersResp.OrderDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      orderno_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      order_group_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      order_status_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      code_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&match_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bsflag_) -
        reinterpret_cast<char*>(&match_time_)) + sizeof(bsflag_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&market_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clear_amt_) -
        reinterpret_cast<char*>(&market_)) + sizeof(clear_amt_));
  }
  cancel_qty_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StockQueryOrdersResp_OrderDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.StockQueryOrdersResp.OrderDetail)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_match_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string orderno = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orderno().data(), static_cast<int>(this->orderno().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockQueryOrdersResp.OrderDetail.orderno");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string order_group = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_group().data(), static_cast<int>(this->order_group().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockQueryOrdersResp.OrderDetail.order_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 bsflag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_bsflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bsflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 submit_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_submit_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &submit_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 order_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_order_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &order_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 market = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_market();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &market_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string code = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockQueryOrdersResp.OrderDetail.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 order_price = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_order_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &order_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 order_qty = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_order_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double order_frz_amt = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_order_frz_amt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &order_frz_amt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double match_amt = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_match_amt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &match_amt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 match_qty = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_match_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 cancel_qty = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_cancel_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cancel_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string order_status = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_status().data(), static_cast<int>(this->order_status().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockQueryOrdersResp.OrderDetail.order_status");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string code_name = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code_name().data(), static_cast<int>(this->code_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockQueryOrdersResp.OrderDetail.code_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double clear_amt = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {
          set_has_clear_amt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &clear_amt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.StockQueryOrdersResp.OrderDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.StockQueryOrdersResp.OrderDetail)
  return false;
#undef DO_
}

void StockQueryOrdersResp_OrderDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.StockQueryOrdersResp.OrderDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_time = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_time(), output);
  }

  // required string orderno = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderno().data(), static_cast<int>(this->orderno().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrdersResp.OrderDetail.orderno");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->orderno(), output);
  }

  // required string order_group = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrdersResp.OrderDetail.order_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->order_group(), output);
  }

  // required uint32 bsflag = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bsflag(), output);
  }

  // optional uint64 submit_time = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->submit_time(), output);
  }

  // optional uint64 order_time = 6;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->order_time(), output);
  }

  // required uint32 market = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->market(), output);
  }

  // required string code = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrdersResp.OrderDetail.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->code(), output);
  }

  // required int64 order_price = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->order_price(), output);
  }

  // required uint32 order_qty = 10;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->order_qty(), output);
  }

  // optional double order_frz_amt = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->order_frz_amt(), output);
  }

  // optional double match_amt = 12;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->match_amt(), output);
  }

  // required uint32 match_qty = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->match_qty(), output);
  }

  // required uint32 cancel_qty = 14;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->cancel_qty(), output);
  }

  // required string order_status = 15;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_status().data(), static_cast<int>(this->order_status().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrdersResp.OrderDetail.order_status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->order_status(), output);
  }

  // required string code_name = 16;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code_name().data(), static_cast<int>(this->code_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrdersResp.OrderDetail.code_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->code_name(), output);
  }

  // optional double clear_amt = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->clear_amt(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.StockQueryOrdersResp.OrderDetail)
}

::google::protobuf::uint8* StockQueryOrdersResp_OrderDetail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.StockQueryOrdersResp.OrderDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_time = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_time(), target);
  }

  // required string orderno = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderno().data(), static_cast<int>(this->orderno().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrdersResp.OrderDetail.orderno");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->orderno(), target);
  }

  // required string order_group = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrdersResp.OrderDetail.order_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->order_group(), target);
  }

  // required uint32 bsflag = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bsflag(), target);
  }

  // optional uint64 submit_time = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->submit_time(), target);
  }

  // optional uint64 order_time = 6;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->order_time(), target);
  }

  // required uint32 market = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->market(), target);
  }

  // required string code = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrdersResp.OrderDetail.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->code(), target);
  }

  // required int64 order_price = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->order_price(), target);
  }

  // required uint32 order_qty = 10;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->order_qty(), target);
  }

  // optional double order_frz_amt = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->order_frz_amt(), target);
  }

  // optional double match_amt = 12;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->match_amt(), target);
  }

  // required uint32 match_qty = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->match_qty(), target);
  }

  // required uint32 cancel_qty = 14;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->cancel_qty(), target);
  }

  // required string order_status = 15;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_status().data(), static_cast<int>(this->order_status().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrdersResp.OrderDetail.order_status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->order_status(), target);
  }

  // required string code_name = 16;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code_name().data(), static_cast<int>(this->code_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrdersResp.OrderDetail.code_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->code_name(), target);
  }

  // optional double clear_amt = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->clear_amt(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.StockQueryOrdersResp.OrderDetail)
  return target;
}

size_t StockQueryOrdersResp_OrderDetail::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autotrade.StockQueryOrdersResp.OrderDetail)
  size_t total_size = 0;

  if (has_orderno()) {
    // required string orderno = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderno());
  }

  if (has_order_group()) {
    // required string order_group = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_group());
  }

  if (has_code()) {
    // required string code = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_order_status()) {
    // required string order_status = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_status());
  }

  if (has_code_name()) {
    // required string code_name = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code_name());
  }

  if (has_bsflag()) {
    // required uint32 bsflag = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bsflag());
  }

  if (has_market()) {
    // required uint32 market = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->market());
  }

  if (has_order_price()) {
    // required int64 order_price = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->order_price());
  }

  if (has_order_qty()) {
    // required uint32 order_qty = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->order_qty());
  }

  if (has_match_qty()) {
    // required uint32 match_qty = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->match_qty());
  }

  if (has_cancel_qty()) {
    // required uint32 cancel_qty = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cancel_qty());
  }

  return total_size;
}
size_t StockQueryOrdersResp_OrderDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.StockQueryOrdersResp.OrderDetail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0001359f) ^ 0x0001359f) == 0) {  // All required fields are present.
    // required string orderno = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderno());

    // required string order_group = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_group());

    // required string code = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required string order_status = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_status());

    // required string code_name = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code_name());

    // required uint32 bsflag = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bsflag());

    // required uint32 market = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->market());

    // required int64 order_price = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->order_price());

    // required uint32 order_qty = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->order_qty());

    // required uint32 match_qty = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->match_qty());

    // required uint32 cancel_qty = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cancel_qty());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 96u) {
    // optional uint64 match_time = 1;
    if (has_match_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_time());
    }

    // optional uint64 submit_time = 5;
    if (has_submit_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->submit_time());
    }

  }
  // optional uint64 order_time = 6;
  if (has_order_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->order_time());
  }

  // optional double order_frz_amt = 11;
  if (has_order_frz_amt()) {
    total_size += 1 + 8;
  }

  if (_has_bits_[8 / 32] & 49152u) {
    // optional double match_amt = 12;
    if (has_match_amt()) {
      total_size += 1 + 8;
    }

    // optional double clear_amt = 17;
    if (has_clear_amt()) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StockQueryOrdersResp_OrderDetail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.StockQueryOrdersResp.OrderDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const StockQueryOrdersResp_OrderDetail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StockQueryOrdersResp_OrderDetail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.StockQueryOrdersResp.OrderDetail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.StockQueryOrdersResp.OrderDetail)
    MergeFrom(*source);
  }
}

void StockQueryOrdersResp_OrderDetail::MergeFrom(const StockQueryOrdersResp_OrderDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.StockQueryOrdersResp.OrderDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_orderno();
      orderno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderno_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_order_group();
      order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_order_status();
      order_status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_status_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_code_name();
      code_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_name_);
    }
    if (cached_has_bits & 0x00000020u) {
      match_time_ = from.match_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      submit_time_ = from.submit_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      bsflag_ = from.bsflag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      market_ = from.market_;
    }
    if (cached_has_bits & 0x00000200u) {
      order_time_ = from.order_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      order_price_ = from.order_price_;
    }
    if (cached_has_bits & 0x00000800u) {
      order_frz_amt_ = from.order_frz_amt_;
    }
    if (cached_has_bits & 0x00001000u) {
      order_qty_ = from.order_qty_;
    }
    if (cached_has_bits & 0x00002000u) {
      match_qty_ = from.match_qty_;
    }
    if (cached_has_bits & 0x00004000u) {
      match_amt_ = from.match_amt_;
    }
    if (cached_has_bits & 0x00008000u) {
      clear_amt_ = from.clear_amt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_cancel_qty(from.cancel_qty());
  }
}

void StockQueryOrdersResp_OrderDetail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.StockQueryOrdersResp.OrderDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockQueryOrdersResp_OrderDetail::CopyFrom(const StockQueryOrdersResp_OrderDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.StockQueryOrdersResp.OrderDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockQueryOrdersResp_OrderDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x0001359f) != 0x0001359f) return false;
  return true;
}

void StockQueryOrdersResp_OrderDetail::Swap(StockQueryOrdersResp_OrderDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockQueryOrdersResp_OrderDetail::InternalSwap(StockQueryOrdersResp_OrderDetail* other) {
  using std::swap;
  orderno_.Swap(&other->orderno_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_group_.Swap(&other->order_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_status_.Swap(&other->order_status_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  code_name_.Swap(&other->code_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(match_time_, other->match_time_);
  swap(submit_time_, other->submit_time_);
  swap(bsflag_, other->bsflag_);
  swap(market_, other->market_);
  swap(order_time_, other->order_time_);
  swap(order_price_, other->order_price_);
  swap(order_frz_amt_, other->order_frz_amt_);
  swap(order_qty_, other->order_qty_);
  swap(match_qty_, other->match_qty_);
  swap(match_amt_, other->match_amt_);
  swap(clear_amt_, other->clear_amt_);
  swap(cancel_qty_, other->cancel_qty_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StockQueryOrdersResp_OrderDetail::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StockQueryOrdersResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockQueryOrdersResp::kFuncidFieldNumber;
const int StockQueryOrdersResp::kDetailListFieldNumber;
const int StockQueryOrdersResp::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockQueryOrdersResp::StockQueryOrdersResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockQueryOrdersResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.StockQueryOrdersResp)
}
StockQueryOrdersResp::StockQueryOrdersResp(const StockQueryOrdersResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      detail_list_(from.detail_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:autotrade.StockQueryOrdersResp)
}

void StockQueryOrdersResp::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  funcid_ = 11102003;
}

StockQueryOrdersResp::~StockQueryOrdersResp() {
  // @@protoc_insertion_point(destructor:autotrade.StockQueryOrdersResp)
  SharedDtor();
}

void StockQueryOrdersResp::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StockQueryOrdersResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StockQueryOrdersResp::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StockQueryOrdersResp& StockQueryOrdersResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockQueryOrdersResp.base);
  return *internal_default_instance();
}


void StockQueryOrdersResp::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.StockQueryOrdersResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detail_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    funcid_ = 11102003;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StockQueryOrdersResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.StockQueryOrdersResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 11102003];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autotrade.StockQueryOrdersResp.OrderDetail detail_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_detail_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockQueryOrdersResp.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.StockQueryOrdersResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.StockQueryOrdersResp)
  return false;
#undef DO_
}

void StockQueryOrdersResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.StockQueryOrdersResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11102003];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // repeated .autotrade.StockQueryOrdersResp.OrderDetail detail_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detail_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->detail_list(static_cast<int>(i)),
      output);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrdersResp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.StockQueryOrdersResp)
}

::google::protobuf::uint8* StockQueryOrdersResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.StockQueryOrdersResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11102003];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // repeated .autotrade.StockQueryOrdersResp.OrderDetail detail_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detail_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->detail_list(static_cast<int>(i)), deterministic, target);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryOrdersResp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.StockQueryOrdersResp)
  return target;
}

size_t StockQueryOrdersResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.StockQueryOrdersResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .autotrade.StockQueryOrdersResp.OrderDetail detail_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->detail_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->detail_list(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string request_id = 3;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional int32 funcid = 1 [default = 11102003];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StockQueryOrdersResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.StockQueryOrdersResp)
  GOOGLE_DCHECK_NE(&from, this);
  const StockQueryOrdersResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StockQueryOrdersResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.StockQueryOrdersResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.StockQueryOrdersResp)
    MergeFrom(*source);
  }
}

void StockQueryOrdersResp::MergeFrom(const StockQueryOrdersResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.StockQueryOrdersResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detail_list_.MergeFrom(from.detail_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StockQueryOrdersResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.StockQueryOrdersResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockQueryOrdersResp::CopyFrom(const StockQueryOrdersResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.StockQueryOrdersResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockQueryOrdersResp::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->detail_list())) return false;
  return true;
}

void StockQueryOrdersResp::Swap(StockQueryOrdersResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockQueryOrdersResp::InternalSwap(StockQueryOrdersResp* other) {
  using std::swap;
  CastToBase(&detail_list_)->InternalSwap(CastToBase(&other->detail_list_));
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StockQueryOrdersResp::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ETFBasicInfoQueryReqt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ETFBasicInfoQueryReqt::kFuncidFieldNumber;
const int ETFBasicInfoQueryReqt::kCodeFieldNumber;
const int ETFBasicInfoQueryReqt::kRequestIdFieldNumber;
const int ETFBasicInfoQueryReqt::kRequestTimeFieldNumber;
const int ETFBasicInfoQueryReqt::kActiveIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ETFBasicInfoQueryReqt::ETFBasicInfoQueryReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_ETFBasicInfoQueryReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.ETFBasicInfoQueryReqt)
}
ETFBasicInfoQueryReqt::ETFBasicInfoQueryReqt(const ETFBasicInfoQueryReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  ::memcpy(&request_time_, &from.request_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_interval_) -
    reinterpret_cast<char*>(&request_time_)) + sizeof(active_interval_));
  // @@protoc_insertion_point(copy_constructor:autotrade.ETFBasicInfoQueryReqt)
}

void ETFBasicInfoQueryReqt::SharedCtor() {
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_time_ = GOOGLE_LONGLONG(0);
  funcid_ = 11002008;
  active_interval_ = GOOGLE_LONGLONG(1000);
}

ETFBasicInfoQueryReqt::~ETFBasicInfoQueryReqt() {
  // @@protoc_insertion_point(destructor:autotrade.ETFBasicInfoQueryReqt)
  SharedDtor();
}

void ETFBasicInfoQueryReqt::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ETFBasicInfoQueryReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ETFBasicInfoQueryReqt::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ETFBasicInfoQueryReqt& ETFBasicInfoQueryReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_ETFBasicInfoQueryReqt.base);
  return *internal_default_instance();
}


void ETFBasicInfoQueryReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.ETFBasicInfoQueryReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 28u) {
    request_time_ = GOOGLE_LONGLONG(0);
    funcid_ = 11002008;
    active_interval_ = GOOGLE_LONGLONG(1000);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ETFBasicInfoQueryReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.ETFBasicInfoQueryReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 11002008];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.ETFBasicInfoQueryReqt.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.ETFBasicInfoQueryReqt.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 request_time = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_request_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 active_interval = 5 [default = 1000];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_active_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &active_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.ETFBasicInfoQueryReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.ETFBasicInfoQueryReqt)
  return false;
#undef DO_
}

void ETFBasicInfoQueryReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.ETFBasicInfoQueryReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11002008];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // required string code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasicInfoQueryReqt.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->code(), output);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasicInfoQueryReqt.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->request_id(), output);
  }

  // optional int64 request_time = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->request_time(), output);
  }

  // optional int64 active_interval = 5 [default = 1000];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->active_interval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.ETFBasicInfoQueryReqt)
}

::google::protobuf::uint8* ETFBasicInfoQueryReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.ETFBasicInfoQueryReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11002008];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // required string code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasicInfoQueryReqt.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasicInfoQueryReqt.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->request_id(), target);
  }

  // optional int64 request_time = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->request_time(), target);
  }

  // optional int64 active_interval = 5 [default = 1000];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->active_interval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.ETFBasicInfoQueryReqt)
  return target;
}

size_t ETFBasicInfoQueryReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.ETFBasicInfoQueryReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string code = 2;
  if (has_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }
  if (_has_bits_[0 / 32] & 30u) {
    // optional string request_id = 3;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional int64 request_time = 4 [default = 0];
    if (has_request_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->request_time());
    }

    // optional int32 funcid = 1 [default = 11002008];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

    // optional int64 active_interval = 5 [default = 1000];
    if (has_active_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->active_interval());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ETFBasicInfoQueryReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.ETFBasicInfoQueryReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const ETFBasicInfoQueryReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ETFBasicInfoQueryReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.ETFBasicInfoQueryReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.ETFBasicInfoQueryReqt)
    MergeFrom(*source);
  }
}

void ETFBasicInfoQueryReqt::MergeFrom(const ETFBasicInfoQueryReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.ETFBasicInfoQueryReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      request_time_ = from.request_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      funcid_ = from.funcid_;
    }
    if (cached_has_bits & 0x00000010u) {
      active_interval_ = from.active_interval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ETFBasicInfoQueryReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.ETFBasicInfoQueryReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ETFBasicInfoQueryReqt::CopyFrom(const ETFBasicInfoQueryReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.ETFBasicInfoQueryReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ETFBasicInfoQueryReqt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ETFBasicInfoQueryReqt::Swap(ETFBasicInfoQueryReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ETFBasicInfoQueryReqt::InternalSwap(ETFBasicInfoQueryReqt* other) {
  using std::swap;
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(request_time_, other->request_time_);
  swap(funcid_, other->funcid_);
  swap(active_interval_, other->active_interval_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ETFBasicInfoQueryReqt::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ETFBasicInfoQueryResp_ETFBasicInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ETFBasicInfoQueryResp_ETFBasicInfo::kMarketFieldNumber;
const int ETFBasicInfoQueryResp_ETFBasicInfo::kCodeFieldNumber;
const int ETFBasicInfoQueryResp_ETFBasicInfo::kNameFieldNumber;
const int ETFBasicInfoQueryResp_ETFBasicInfo::kLevel1CodeFieldNumber;
const int ETFBasicInfoQueryResp_ETFBasicInfo::kLevel2CodeFieldNumber;
const int ETFBasicInfoQueryResp_ETFBasicInfo::kCapitalCodeFieldNumber;
const int ETFBasicInfoQueryResp_ETFBasicInfo::kTradeUnitFieldNumber;
const int ETFBasicInfoQueryResp_ETFBasicInfo::kEcashComponentFieldNumber;
const int ETFBasicInfoQueryResp_ETFBasicInfo::kPublishFlagFieldNumber;
const int ETFBasicInfoQueryResp_ETFBasicInfo::kTradeStatFieldNumber;
const int ETFBasicInfoQueryResp_ETFBasicInfo::kRecordNumFieldNumber;
const int ETFBasicInfoQueryResp_ETFBasicInfo::kTradingDayFieldNumber;
const int ETFBasicInfoQueryResp_ETFBasicInfo::kMaxcashratioFieldNumber;
const int ETFBasicInfoQueryResp_ETFBasicInfo::kPretradingDayFieldNumber;
const int ETFBasicInfoQueryResp_ETFBasicInfo::kCashComponentFieldNumber;
const int ETFBasicInfoQueryResp_ETFBasicInfo::kNavpercuFieldNumber;
const int ETFBasicInfoQueryResp_ETFBasicInfo::kNavFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ETFBasicInfoQueryResp_ETFBasicInfo::ETFBasicInfoQueryResp_ETFBasicInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_ETFBasicInfoQueryResp_ETFBasicInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo)
}
ETFBasicInfoQueryResp_ETFBasicInfo::ETFBasicInfoQueryResp_ETFBasicInfo(const ETFBasicInfoQueryResp_ETFBasicInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  level1_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_level1_code()) {
    level1_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.level1_code_);
  }
  level2_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_level2_code()) {
    level2_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.level2_code_);
  }
  capital_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_capital_code()) {
    capital_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.capital_code_);
  }
  publish_flag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_publish_flag()) {
    publish_flag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.publish_flag_);
  }
  trade_stat_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trade_stat()) {
    trade_stat_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trade_stat_);
  }
  trading_day_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trading_day()) {
    trading_day_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trading_day_);
  }
  pretrading_day_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pretrading_day()) {
    pretrading_day_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pretrading_day_);
  }
  ::memcpy(&market_, &from.market_,
    static_cast<size_t>(reinterpret_cast<char*>(&record_num_) -
    reinterpret_cast<char*>(&market_)) + sizeof(record_num_));
  // @@protoc_insertion_point(copy_constructor:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo)
}

void ETFBasicInfoQueryResp_ETFBasicInfo::SharedCtor() {
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level1_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level2_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  capital_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publish_flag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trade_stat_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trading_day_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pretrading_day_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&market_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&record_num_) -
      reinterpret_cast<char*>(&market_)) + sizeof(record_num_));
}

ETFBasicInfoQueryResp_ETFBasicInfo::~ETFBasicInfoQueryResp_ETFBasicInfo() {
  // @@protoc_insertion_point(destructor:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo)
  SharedDtor();
}

void ETFBasicInfoQueryResp_ETFBasicInfo::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level1_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level2_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  capital_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publish_flag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trade_stat_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trading_day_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pretrading_day_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ETFBasicInfoQueryResp_ETFBasicInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ETFBasicInfoQueryResp_ETFBasicInfo::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ETFBasicInfoQueryResp_ETFBasicInfo& ETFBasicInfoQueryResp_ETFBasicInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_ETFBasicInfoQueryResp_ETFBasicInfo.base);
  return *internal_default_instance();
}


void ETFBasicInfoQueryResp_ETFBasicInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      level1_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      level2_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      capital_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      publish_flag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      trade_stat_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      trading_day_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    pretrading_day_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 65024u) {
    ::memset(&market_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nav_) -
        reinterpret_cast<char*>(&market_)) + sizeof(nav_));
  }
  record_num_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ETFBasicInfoQueryResp_ETFBasicInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 market = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_market();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &market_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string level1_code = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_level1_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->level1_code().data(), static_cast<int>(this->level1_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.level1_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string level2_code = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_level2_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->level2_code().data(), static_cast<int>(this->level2_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.level2_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string capital_code = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_capital_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->capital_code().data(), static_cast<int>(this->capital_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.capital_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 trade_unit = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_trade_unit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trade_unit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ecash_component = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_ecash_component();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ecash_component_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string publish_flag = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_publish_flag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->publish_flag().data(), static_cast<int>(this->publish_flag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.publish_flag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string trade_stat = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trade_stat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trade_stat().data(), static_cast<int>(this->trade_stat().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.trade_stat");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 record_num = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_record_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &record_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string trading_day = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trading_day()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trading_day().data(), static_cast<int>(this->trading_day().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.trading_day");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double maxcashratio = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_maxcashratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxcashratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string pretrading_day = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pretrading_day()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pretrading_day().data(), static_cast<int>(this->pretrading_day().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.pretrading_day");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double cash_component = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {
          set_has_cash_component();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cash_component_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double navpercu = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {
          set_has_navpercu();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &navpercu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double nav = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {
          set_has_nav();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &nav_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo)
  return false;
#undef DO_
}

void ETFBasicInfoQueryResp_ETFBasicInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 market = 2;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->market(), output);
  }

  // required string code = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->code(), output);
  }

  // optional string name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // required string level1_code = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->level1_code().data(), static_cast<int>(this->level1_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.level1_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->level1_code(), output);
  }

  // required string level2_code = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->level2_code().data(), static_cast<int>(this->level2_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.level2_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->level2_code(), output);
  }

  // optional string capital_code = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->capital_code().data(), static_cast<int>(this->capital_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.capital_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->capital_code(), output);
  }

  // required uint32 trade_unit = 8;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->trade_unit(), output);
  }

  // optional double ecash_component = 9;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->ecash_component(), output);
  }

  // required string publish_flag = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->publish_flag().data(), static_cast<int>(this->publish_flag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.publish_flag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->publish_flag(), output);
  }

  // required string trade_stat = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trade_stat().data(), static_cast<int>(this->trade_stat().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.trade_stat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->trade_stat(), output);
  }

  // required uint32 record_num = 12;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->record_num(), output);
  }

  // required string trading_day = 13;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trading_day().data(), static_cast<int>(this->trading_day().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.trading_day");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->trading_day(), output);
  }

  // required double maxcashratio = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->maxcashratio(), output);
  }

  // required string pretrading_day = 15;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pretrading_day().data(), static_cast<int>(this->pretrading_day().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.pretrading_day");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->pretrading_day(), output);
  }

  // required double cash_component = 16;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->cash_component(), output);
  }

  // required double navpercu = 17;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->navpercu(), output);
  }

  // required double nav = 18;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->nav(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo)
}

::google::protobuf::uint8* ETFBasicInfoQueryResp_ETFBasicInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 market = 2;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->market(), target);
  }

  // required string code = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->code(), target);
  }

  // optional string name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // required string level1_code = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->level1_code().data(), static_cast<int>(this->level1_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.level1_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->level1_code(), target);
  }

  // required string level2_code = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->level2_code().data(), static_cast<int>(this->level2_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.level2_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->level2_code(), target);
  }

  // optional string capital_code = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->capital_code().data(), static_cast<int>(this->capital_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.capital_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->capital_code(), target);
  }

  // required uint32 trade_unit = 8;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->trade_unit(), target);
  }

  // optional double ecash_component = 9;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->ecash_component(), target);
  }

  // required string publish_flag = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->publish_flag().data(), static_cast<int>(this->publish_flag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.publish_flag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->publish_flag(), target);
  }

  // required string trade_stat = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trade_stat().data(), static_cast<int>(this->trade_stat().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.trade_stat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->trade_stat(), target);
  }

  // required uint32 record_num = 12;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->record_num(), target);
  }

  // required string trading_day = 13;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trading_day().data(), static_cast<int>(this->trading_day().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.trading_day");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->trading_day(), target);
  }

  // required double maxcashratio = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->maxcashratio(), target);
  }

  // required string pretrading_day = 15;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pretrading_day().data(), static_cast<int>(this->pretrading_day().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasicInfoQueryResp.ETFBasicInfo.pretrading_day");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->pretrading_day(), target);
  }

  // required double cash_component = 16;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->cash_component(), target);
  }

  // required double navpercu = 17;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->navpercu(), target);
  }

  // required double nav = 18;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->nav(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo)
  return target;
}

size_t ETFBasicInfoQueryResp_ETFBasicInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo)
  size_t total_size = 0;

  if (has_code()) {
    // required string code = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_level1_code()) {
    // required string level1_code = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->level1_code());
  }

  if (has_level2_code()) {
    // required string level2_code = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->level2_code());
  }

  if (has_publish_flag()) {
    // required string publish_flag = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->publish_flag());
  }

  if (has_trade_stat()) {
    // required string trade_stat = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trade_stat());
  }

  if (has_trading_day()) {
    // required string trading_day = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trading_day());
  }

  if (has_pretrading_day()) {
    // required string pretrading_day = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pretrading_day());
  }

  if (has_market()) {
    // required uint32 market = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->market());
  }

  if (has_trade_unit()) {
    // required uint32 trade_unit = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->trade_unit());
  }

  if (has_maxcashratio()) {
    // required double maxcashratio = 14;
    total_size += 1 + 8;
  }

  if (has_cash_component()) {
    // required double cash_component = 16;
    total_size += 2 + 8;
  }

  if (has_navpercu()) {
    // required double navpercu = 17;
    total_size += 2 + 8;
  }

  if (has_nav()) {
    // required double nav = 18;
    total_size += 2 + 8;
  }

  if (has_record_num()) {
    // required uint32 record_num = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->record_num());
  }

  return total_size;
}
size_t ETFBasicInfoQueryResp_ETFBasicInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0001f7ed) ^ 0x0001f7ed) == 0) {  // All required fields are present.
    // required string code = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required string level1_code = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->level1_code());

    // required string level2_code = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->level2_code());

    // required string publish_flag = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->publish_flag());

    // required string trade_stat = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trade_stat());

    // required string trading_day = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trading_day());

    // required string pretrading_day = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pretrading_day());

    // required uint32 market = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->market());

    // required uint32 trade_unit = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->trade_unit());

    // required double maxcashratio = 14;
    total_size += 1 + 8;

    // required double cash_component = 16;
    total_size += 2 + 8;

    // required double navpercu = 17;
    total_size += 2 + 8;

    // required double nav = 18;
    total_size += 2 + 8;

    // required uint32 record_num = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->record_num());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string name = 4;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string capital_code = 7;
  if (has_capital_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->capital_code());
  }

  // optional double ecash_component = 9;
  if (has_ecash_component()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ETFBasicInfoQueryResp_ETFBasicInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ETFBasicInfoQueryResp_ETFBasicInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ETFBasicInfoQueryResp_ETFBasicInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo)
    MergeFrom(*source);
  }
}

void ETFBasicInfoQueryResp_ETFBasicInfo::MergeFrom(const ETFBasicInfoQueryResp_ETFBasicInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_level1_code();
      level1_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.level1_code_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_level2_code();
      level2_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.level2_code_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_capital_code();
      capital_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.capital_code_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_publish_flag();
      publish_flag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.publish_flag_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_trade_stat();
      trade_stat_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trade_stat_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_trading_day();
      trading_day_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trading_day_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_pretrading_day();
      pretrading_day_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pretrading_day_);
    }
    if (cached_has_bits & 0x00000200u) {
      market_ = from.market_;
    }
    if (cached_has_bits & 0x00000400u) {
      trade_unit_ = from.trade_unit_;
    }
    if (cached_has_bits & 0x00000800u) {
      ecash_component_ = from.ecash_component_;
    }
    if (cached_has_bits & 0x00001000u) {
      maxcashratio_ = from.maxcashratio_;
    }
    if (cached_has_bits & 0x00002000u) {
      cash_component_ = from.cash_component_;
    }
    if (cached_has_bits & 0x00004000u) {
      navpercu_ = from.navpercu_;
    }
    if (cached_has_bits & 0x00008000u) {
      nav_ = from.nav_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_record_num(from.record_num());
  }
}

void ETFBasicInfoQueryResp_ETFBasicInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ETFBasicInfoQueryResp_ETFBasicInfo::CopyFrom(const ETFBasicInfoQueryResp_ETFBasicInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.ETFBasicInfoQueryResp.ETFBasicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ETFBasicInfoQueryResp_ETFBasicInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0001f7ed) != 0x0001f7ed) return false;
  return true;
}

void ETFBasicInfoQueryResp_ETFBasicInfo::Swap(ETFBasicInfoQueryResp_ETFBasicInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ETFBasicInfoQueryResp_ETFBasicInfo::InternalSwap(ETFBasicInfoQueryResp_ETFBasicInfo* other) {
  using std::swap;
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  level1_code_.Swap(&other->level1_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  level2_code_.Swap(&other->level2_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  capital_code_.Swap(&other->capital_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  publish_flag_.Swap(&other->publish_flag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trade_stat_.Swap(&other->trade_stat_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trading_day_.Swap(&other->trading_day_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pretrading_day_.Swap(&other->pretrading_day_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(market_, other->market_);
  swap(trade_unit_, other->trade_unit_);
  swap(ecash_component_, other->ecash_component_);
  swap(maxcashratio_, other->maxcashratio_);
  swap(cash_component_, other->cash_component_);
  swap(navpercu_, other->navpercu_);
  swap(nav_, other->nav_);
  swap(record_num_, other->record_num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ETFBasicInfoQueryResp_ETFBasicInfo::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ETFBasicInfoQueryResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ETFBasicInfoQueryResp::kFuncidFieldNumber;
const int ETFBasicInfoQueryResp::kInfosFieldNumber;
const int ETFBasicInfoQueryResp::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ETFBasicInfoQueryResp::ETFBasicInfoQueryResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_ETFBasicInfoQueryResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.ETFBasicInfoQueryResp)
}
ETFBasicInfoQueryResp::ETFBasicInfoQueryResp(const ETFBasicInfoQueryResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:autotrade.ETFBasicInfoQueryResp)
}

void ETFBasicInfoQueryResp::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  funcid_ = 11102008;
}

ETFBasicInfoQueryResp::~ETFBasicInfoQueryResp() {
  // @@protoc_insertion_point(destructor:autotrade.ETFBasicInfoQueryResp)
  SharedDtor();
}

void ETFBasicInfoQueryResp::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ETFBasicInfoQueryResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ETFBasicInfoQueryResp::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ETFBasicInfoQueryResp& ETFBasicInfoQueryResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_ETFBasicInfoQueryResp.base);
  return *internal_default_instance();
}


void ETFBasicInfoQueryResp::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.ETFBasicInfoQueryResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    funcid_ = 11102008;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ETFBasicInfoQueryResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.ETFBasicInfoQueryResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 11102008];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autotrade.ETFBasicInfoQueryResp.ETFBasicInfo infos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.ETFBasicInfoQueryResp.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.ETFBasicInfoQueryResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.ETFBasicInfoQueryResp)
  return false;
#undef DO_
}

void ETFBasicInfoQueryResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.ETFBasicInfoQueryResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11102008];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // repeated .autotrade.ETFBasicInfoQueryResp.ETFBasicInfo infos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->infos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->infos(static_cast<int>(i)),
      output);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasicInfoQueryResp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.ETFBasicInfoQueryResp)
}

::google::protobuf::uint8* ETFBasicInfoQueryResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.ETFBasicInfoQueryResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11102008];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // repeated .autotrade.ETFBasicInfoQueryResp.ETFBasicInfo infos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->infos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->infos(static_cast<int>(i)), deterministic, target);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasicInfoQueryResp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.ETFBasicInfoQueryResp)
  return target;
}

size_t ETFBasicInfoQueryResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.ETFBasicInfoQueryResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .autotrade.ETFBasicInfoQueryResp.ETFBasicInfo infos = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->infos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->infos(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string request_id = 3;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional int32 funcid = 1 [default = 11102008];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ETFBasicInfoQueryResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.ETFBasicInfoQueryResp)
  GOOGLE_DCHECK_NE(&from, this);
  const ETFBasicInfoQueryResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ETFBasicInfoQueryResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.ETFBasicInfoQueryResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.ETFBasicInfoQueryResp)
    MergeFrom(*source);
  }
}

void ETFBasicInfoQueryResp::MergeFrom(const ETFBasicInfoQueryResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.ETFBasicInfoQueryResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ETFBasicInfoQueryResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.ETFBasicInfoQueryResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ETFBasicInfoQueryResp::CopyFrom(const ETFBasicInfoQueryResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.ETFBasicInfoQueryResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ETFBasicInfoQueryResp::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->infos())) return false;
  return true;
}

void ETFBasicInfoQueryResp::Swap(ETFBasicInfoQueryResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ETFBasicInfoQueryResp::InternalSwap(ETFBasicInfoQueryResp* other) {
  using std::swap;
  CastToBase(&infos_)->InternalSwap(CastToBase(&other->infos_));
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ETFBasicInfoQueryResp::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ETFBasketListQueryReqt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ETFBasketListQueryReqt::kFuncidFieldNumber;
const int ETFBasketListQueryReqt::kCodeFieldNumber;
const int ETFBasketListQueryReqt::kRequestIdFieldNumber;
const int ETFBasketListQueryReqt::kRequestTimeFieldNumber;
const int ETFBasketListQueryReqt::kActiveIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ETFBasketListQueryReqt::ETFBasketListQueryReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_ETFBasketListQueryReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.ETFBasketListQueryReqt)
}
ETFBasketListQueryReqt::ETFBasketListQueryReqt(const ETFBasketListQueryReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  ::memcpy(&request_time_, &from.request_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_interval_) -
    reinterpret_cast<char*>(&request_time_)) + sizeof(active_interval_));
  // @@protoc_insertion_point(copy_constructor:autotrade.ETFBasketListQueryReqt)
}

void ETFBasketListQueryReqt::SharedCtor() {
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_time_ = GOOGLE_LONGLONG(0);
  funcid_ = 11002009;
  active_interval_ = GOOGLE_LONGLONG(1000);
}

ETFBasketListQueryReqt::~ETFBasketListQueryReqt() {
  // @@protoc_insertion_point(destructor:autotrade.ETFBasketListQueryReqt)
  SharedDtor();
}

void ETFBasketListQueryReqt::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ETFBasketListQueryReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ETFBasketListQueryReqt::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ETFBasketListQueryReqt& ETFBasketListQueryReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_ETFBasketListQueryReqt.base);
  return *internal_default_instance();
}


void ETFBasketListQueryReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.ETFBasketListQueryReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 28u) {
    request_time_ = GOOGLE_LONGLONG(0);
    funcid_ = 11002009;
    active_interval_ = GOOGLE_LONGLONG(1000);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ETFBasketListQueryReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.ETFBasketListQueryReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 11002009];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.ETFBasketListQueryReqt.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.ETFBasketListQueryReqt.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 request_time = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_request_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 active_interval = 5 [default = 1000];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_active_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &active_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.ETFBasketListQueryReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.ETFBasketListQueryReqt)
  return false;
#undef DO_
}

void ETFBasketListQueryReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.ETFBasketListQueryReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11002009];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // required string code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasketListQueryReqt.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->code(), output);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasketListQueryReqt.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->request_id(), output);
  }

  // optional int64 request_time = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->request_time(), output);
  }

  // optional int64 active_interval = 5 [default = 1000];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->active_interval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.ETFBasketListQueryReqt)
}

::google::protobuf::uint8* ETFBasketListQueryReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.ETFBasketListQueryReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11002009];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // required string code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasketListQueryReqt.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasketListQueryReqt.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->request_id(), target);
  }

  // optional int64 request_time = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->request_time(), target);
  }

  // optional int64 active_interval = 5 [default = 1000];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->active_interval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.ETFBasketListQueryReqt)
  return target;
}

size_t ETFBasketListQueryReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.ETFBasketListQueryReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string code = 2;
  if (has_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }
  if (_has_bits_[0 / 32] & 30u) {
    // optional string request_id = 3;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional int64 request_time = 4 [default = 0];
    if (has_request_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->request_time());
    }

    // optional int32 funcid = 1 [default = 11002009];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

    // optional int64 active_interval = 5 [default = 1000];
    if (has_active_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->active_interval());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ETFBasketListQueryReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.ETFBasketListQueryReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const ETFBasketListQueryReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ETFBasketListQueryReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.ETFBasketListQueryReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.ETFBasketListQueryReqt)
    MergeFrom(*source);
  }
}

void ETFBasketListQueryReqt::MergeFrom(const ETFBasketListQueryReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.ETFBasketListQueryReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      request_time_ = from.request_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      funcid_ = from.funcid_;
    }
    if (cached_has_bits & 0x00000010u) {
      active_interval_ = from.active_interval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ETFBasketListQueryReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.ETFBasketListQueryReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ETFBasketListQueryReqt::CopyFrom(const ETFBasketListQueryReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.ETFBasketListQueryReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ETFBasketListQueryReqt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ETFBasketListQueryReqt::Swap(ETFBasketListQueryReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ETFBasketListQueryReqt::InternalSwap(ETFBasketListQueryReqt* other) {
  using std::swap;
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(request_time_, other->request_time_);
  swap(funcid_, other->funcid_);
  swap(active_interval_, other->active_interval_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ETFBasketListQueryReqt::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ETFBasketListQueryResp_ConstituentStockInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ETFBasketListQueryResp_ConstituentStockInfo::kMarketFieldNumber;
const int ETFBasketListQueryResp_ConstituentStockInfo::kCodeFieldNumber;
const int ETFBasketListQueryResp_ConstituentStockInfo::kNameFieldNumber;
const int ETFBasketListQueryResp_ConstituentStockInfo::kQtyFieldNumber;
const int ETFBasketListQueryResp_ConstituentStockInfo::kReplaceflagFieldNumber;
const int ETFBasketListQueryResp_ConstituentStockInfo::kOverpricerateFieldNumber;
const int ETFBasketListQueryResp_ConstituentStockInfo::kReplaceamtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ETFBasketListQueryResp_ConstituentStockInfo::ETFBasketListQueryResp_ConstituentStockInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_ETFBasketListQueryResp_ConstituentStockInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.ETFBasketListQueryResp.ConstituentStockInfo)
}
ETFBasketListQueryResp_ConstituentStockInfo::ETFBasketListQueryResp_ConstituentStockInfo(const ETFBasketListQueryResp_ConstituentStockInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  replaceflag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_replaceflag()) {
    replaceflag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.replaceflag_);
  }
  ::memcpy(&market_, &from.market_,
    static_cast<size_t>(reinterpret_cast<char*>(&replaceamt_) -
    reinterpret_cast<char*>(&market_)) + sizeof(replaceamt_));
  // @@protoc_insertion_point(copy_constructor:autotrade.ETFBasketListQueryResp.ConstituentStockInfo)
}

void ETFBasketListQueryResp_ConstituentStockInfo::SharedCtor() {
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  replaceflag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&market_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&replaceamt_) -
      reinterpret_cast<char*>(&market_)) + sizeof(replaceamt_));
}

ETFBasketListQueryResp_ConstituentStockInfo::~ETFBasketListQueryResp_ConstituentStockInfo() {
  // @@protoc_insertion_point(destructor:autotrade.ETFBasketListQueryResp.ConstituentStockInfo)
  SharedDtor();
}

void ETFBasketListQueryResp_ConstituentStockInfo::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  replaceflag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ETFBasketListQueryResp_ConstituentStockInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ETFBasketListQueryResp_ConstituentStockInfo::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ETFBasketListQueryResp_ConstituentStockInfo& ETFBasketListQueryResp_ConstituentStockInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_ETFBasketListQueryResp_ConstituentStockInfo.base);
  return *internal_default_instance();
}


void ETFBasketListQueryResp_ConstituentStockInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.ETFBasketListQueryResp.ConstituentStockInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      replaceflag_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 120u) {
    ::memset(&market_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&replaceamt_) -
        reinterpret_cast<char*>(&market_)) + sizeof(replaceamt_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ETFBasketListQueryResp_ConstituentStockInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.ETFBasketListQueryResp.ConstituentStockInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 market = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_market();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &market_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.ETFBasketListQueryResp.ConstituentStockInfo.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.ETFBasketListQueryResp.ConstituentStockInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 qty = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string replaceflag = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_replaceflag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->replaceflag().data(), static_cast<int>(this->replaceflag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.ETFBasketListQueryResp.ConstituentStockInfo.replaceflag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double overpricerate = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_overpricerate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &overpricerate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double replaceamt = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_replaceamt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &replaceamt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.ETFBasketListQueryResp.ConstituentStockInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.ETFBasketListQueryResp.ConstituentStockInfo)
  return false;
#undef DO_
}

void ETFBasketListQueryResp_ConstituentStockInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.ETFBasketListQueryResp.ConstituentStockInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 market = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->market(), output);
  }

  // required string code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasketListQueryResp.ConstituentStockInfo.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->code(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasketListQueryResp.ConstituentStockInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // required int32 qty = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->qty(), output);
  }

  // required string replaceflag = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->replaceflag().data(), static_cast<int>(this->replaceflag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasketListQueryResp.ConstituentStockInfo.replaceflag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->replaceflag(), output);
  }

  // required double overpricerate = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->overpricerate(), output);
  }

  // required double replaceamt = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->replaceamt(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.ETFBasketListQueryResp.ConstituentStockInfo)
}

::google::protobuf::uint8* ETFBasketListQueryResp_ConstituentStockInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.ETFBasketListQueryResp.ConstituentStockInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 market = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->market(), target);
  }

  // required string code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasketListQueryResp.ConstituentStockInfo.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasketListQueryResp.ConstituentStockInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required int32 qty = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->qty(), target);
  }

  // required string replaceflag = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->replaceflag().data(), static_cast<int>(this->replaceflag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasketListQueryResp.ConstituentStockInfo.replaceflag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->replaceflag(), target);
  }

  // required double overpricerate = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->overpricerate(), target);
  }

  // required double replaceamt = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->replaceamt(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.ETFBasketListQueryResp.ConstituentStockInfo)
  return target;
}

size_t ETFBasketListQueryResp_ConstituentStockInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autotrade.ETFBasketListQueryResp.ConstituentStockInfo)
  size_t total_size = 0;

  if (has_code()) {
    // required string code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_replaceflag()) {
    // required string replaceflag = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->replaceflag());
  }

  if (has_market()) {
    // required uint32 market = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->market());
  }

  if (has_qty()) {
    // required int32 qty = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->qty());
  }

  if (has_overpricerate()) {
    // required double overpricerate = 6;
    total_size += 1 + 8;
  }

  if (has_replaceamt()) {
    // required double replaceamt = 7;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t ETFBasketListQueryResp_ConstituentStockInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.ETFBasketListQueryResp.ConstituentStockInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007d) ^ 0x0000007d) == 0) {  // All required fields are present.
    // required string code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required string replaceflag = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->replaceflag());

    // required uint32 market = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->market());

    // required int32 qty = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->qty());

    // required double overpricerate = 6;
    total_size += 1 + 8;

    // required double replaceamt = 7;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string name = 3;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ETFBasketListQueryResp_ConstituentStockInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.ETFBasketListQueryResp.ConstituentStockInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ETFBasketListQueryResp_ConstituentStockInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ETFBasketListQueryResp_ConstituentStockInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.ETFBasketListQueryResp.ConstituentStockInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.ETFBasketListQueryResp.ConstituentStockInfo)
    MergeFrom(*source);
  }
}

void ETFBasketListQueryResp_ConstituentStockInfo::MergeFrom(const ETFBasketListQueryResp_ConstituentStockInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.ETFBasketListQueryResp.ConstituentStockInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_replaceflag();
      replaceflag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.replaceflag_);
    }
    if (cached_has_bits & 0x00000008u) {
      market_ = from.market_;
    }
    if (cached_has_bits & 0x00000010u) {
      qty_ = from.qty_;
    }
    if (cached_has_bits & 0x00000020u) {
      overpricerate_ = from.overpricerate_;
    }
    if (cached_has_bits & 0x00000040u) {
      replaceamt_ = from.replaceamt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ETFBasketListQueryResp_ConstituentStockInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.ETFBasketListQueryResp.ConstituentStockInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ETFBasketListQueryResp_ConstituentStockInfo::CopyFrom(const ETFBasketListQueryResp_ConstituentStockInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.ETFBasketListQueryResp.ConstituentStockInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ETFBasketListQueryResp_ConstituentStockInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007d) != 0x0000007d) return false;
  return true;
}

void ETFBasketListQueryResp_ConstituentStockInfo::Swap(ETFBasketListQueryResp_ConstituentStockInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ETFBasketListQueryResp_ConstituentStockInfo::InternalSwap(ETFBasketListQueryResp_ConstituentStockInfo* other) {
  using std::swap;
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  replaceflag_.Swap(&other->replaceflag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(market_, other->market_);
  swap(qty_, other->qty_);
  swap(overpricerate_, other->overpricerate_);
  swap(replaceamt_, other->replaceamt_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ETFBasketListQueryResp_ConstituentStockInfo::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ETFBasketListQueryResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ETFBasketListQueryResp::kFuncidFieldNumber;
const int ETFBasketListQueryResp::kStockInfosFieldNumber;
const int ETFBasketListQueryResp::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ETFBasketListQueryResp::ETFBasketListQueryResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_ETFBasketListQueryResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.ETFBasketListQueryResp)
}
ETFBasketListQueryResp::ETFBasketListQueryResp(const ETFBasketListQueryResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      stock_infos_(from.stock_infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:autotrade.ETFBasketListQueryResp)
}

void ETFBasketListQueryResp::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  funcid_ = 11102009;
}

ETFBasketListQueryResp::~ETFBasketListQueryResp() {
  // @@protoc_insertion_point(destructor:autotrade.ETFBasketListQueryResp)
  SharedDtor();
}

void ETFBasketListQueryResp::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ETFBasketListQueryResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ETFBasketListQueryResp::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ETFBasketListQueryResp& ETFBasketListQueryResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_ETFBasketListQueryResp.base);
  return *internal_default_instance();
}


void ETFBasketListQueryResp::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.ETFBasketListQueryResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stock_infos_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    funcid_ = 11102009;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ETFBasketListQueryResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.ETFBasketListQueryResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 11102009];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autotrade.ETFBasketListQueryResp.ConstituentStockInfo stock_infos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stock_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.ETFBasketListQueryResp.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.ETFBasketListQueryResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.ETFBasketListQueryResp)
  return false;
#undef DO_
}

void ETFBasketListQueryResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.ETFBasketListQueryResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11102009];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // repeated .autotrade.ETFBasketListQueryResp.ConstituentStockInfo stock_infos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stock_infos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->stock_infos(static_cast<int>(i)),
      output);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasketListQueryResp.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.ETFBasketListQueryResp)
}

::google::protobuf::uint8* ETFBasketListQueryResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.ETFBasketListQueryResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11102009];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // repeated .autotrade.ETFBasketListQueryResp.ConstituentStockInfo stock_infos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stock_infos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->stock_infos(static_cast<int>(i)), deterministic, target);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasketListQueryResp.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.ETFBasketListQueryResp)
  return target;
}

size_t ETFBasketListQueryResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.ETFBasketListQueryResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .autotrade.ETFBasketListQueryResp.ConstituentStockInfo stock_infos = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->stock_infos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stock_infos(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string request_id = 3;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional int32 funcid = 1 [default = 11102009];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ETFBasketListQueryResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.ETFBasketListQueryResp)
  GOOGLE_DCHECK_NE(&from, this);
  const ETFBasketListQueryResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ETFBasketListQueryResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.ETFBasketListQueryResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.ETFBasketListQueryResp)
    MergeFrom(*source);
  }
}

void ETFBasketListQueryResp::MergeFrom(const ETFBasketListQueryResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.ETFBasketListQueryResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stock_infos_.MergeFrom(from.stock_infos_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ETFBasketListQueryResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.ETFBasketListQueryResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ETFBasketListQueryResp::CopyFrom(const ETFBasketListQueryResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.ETFBasketListQueryResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ETFBasketListQueryResp::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->stock_infos())) return false;
  return true;
}

void ETFBasketListQueryResp::Swap(ETFBasketListQueryResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ETFBasketListQueryResp::InternalSwap(ETFBasketListQueryResp* other) {
  using std::swap;
  CastToBase(&stock_infos_)->InternalSwap(CastToBase(&other->stock_infos_));
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ETFBasketListQueryResp::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StockQueryCaptialReqt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockQueryCaptialReqt::kFuncidFieldNumber;
const int StockQueryCaptialReqt::kMoneytypeFieldNumber;
const int StockQueryCaptialReqt::kRequestIdFieldNumber;
const int StockQueryCaptialReqt::kRequestTimeFieldNumber;
const int StockQueryCaptialReqt::kActiveIntervalFieldNumber;
const int StockQueryCaptialReqt::kFundIdFieldNumber;
const int StockQueryCaptialReqt::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockQueryCaptialReqt::StockQueryCaptialReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockQueryCaptialReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.StockQueryCaptialReqt)
}
StockQueryCaptialReqt::StockQueryCaptialReqt(const StockQueryCaptialReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  moneytype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_moneytype()) {
    moneytype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.moneytype_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  fund_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fund_id()) {
    fund_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fund_id_);
  }
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_session_id()) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  ::memcpy(&request_time_, &from.request_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_interval_) -
    reinterpret_cast<char*>(&request_time_)) + sizeof(active_interval_));
  // @@protoc_insertion_point(copy_constructor:autotrade.StockQueryCaptialReqt)
}

void StockQueryCaptialReqt::SharedCtor() {
  moneytype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fund_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_time_ = GOOGLE_LONGLONG(0);
  funcid_ = 11002010;
  active_interval_ = GOOGLE_LONGLONG(1000);
}

StockQueryCaptialReqt::~StockQueryCaptialReqt() {
  // @@protoc_insertion_point(destructor:autotrade.StockQueryCaptialReqt)
  SharedDtor();
}

void StockQueryCaptialReqt::SharedDtor() {
  moneytype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fund_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StockQueryCaptialReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StockQueryCaptialReqt::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StockQueryCaptialReqt& StockQueryCaptialReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockQueryCaptialReqt.base);
  return *internal_default_instance();
}


void StockQueryCaptialReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.StockQueryCaptialReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      moneytype_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      fund_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      session_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 112u) {
    request_time_ = GOOGLE_LONGLONG(0);
    funcid_ = 11002010;
    active_interval_ = GOOGLE_LONGLONG(1000);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StockQueryCaptialReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.StockQueryCaptialReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 11002010];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string moneytype = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_moneytype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->moneytype().data(), static_cast<int>(this->moneytype().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockQueryCaptialReqt.moneytype");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockQueryCaptialReqt.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 request_time = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_request_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 active_interval = 5 [default = 1000];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_active_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &active_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fund_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fund_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fund_id().data(), static_cast<int>(this->fund_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockQueryCaptialReqt.fund_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string session_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockQueryCaptialReqt.session_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.StockQueryCaptialReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.StockQueryCaptialReqt)
  return false;
#undef DO_
}

void StockQueryCaptialReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.StockQueryCaptialReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11002010];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional string moneytype = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->moneytype().data(), static_cast<int>(this->moneytype().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryCaptialReqt.moneytype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->moneytype(), output);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryCaptialReqt.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->request_id(), output);
  }

  // optional int64 request_time = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->request_time(), output);
  }

  // optional int64 active_interval = 5 [default = 1000];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->active_interval(), output);
  }

  // optional string fund_id = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fund_id().data(), static_cast<int>(this->fund_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryCaptialReqt.fund_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->fund_id(), output);
  }

  // optional string session_id = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryCaptialReqt.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->session_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.StockQueryCaptialReqt)
}

::google::protobuf::uint8* StockQueryCaptialReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.StockQueryCaptialReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11002010];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional string moneytype = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->moneytype().data(), static_cast<int>(this->moneytype().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryCaptialReqt.moneytype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->moneytype(), target);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryCaptialReqt.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->request_id(), target);
  }

  // optional int64 request_time = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->request_time(), target);
  }

  // optional int64 active_interval = 5 [default = 1000];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->active_interval(), target);
  }

  // optional string fund_id = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fund_id().data(), static_cast<int>(this->fund_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryCaptialReqt.fund_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->fund_id(), target);
  }

  // optional string session_id = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryCaptialReqt.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->session_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.StockQueryCaptialReqt)
  return target;
}

size_t StockQueryCaptialReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.StockQueryCaptialReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string moneytype = 2;
    if (has_moneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->moneytype());
    }

    // optional string request_id = 3;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional string fund_id = 6;
    if (has_fund_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fund_id());
    }

    // optional string session_id = 7;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }

    // optional int64 request_time = 4 [default = 0];
    if (has_request_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->request_time());
    }

    // optional int32 funcid = 1 [default = 11002010];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

    // optional int64 active_interval = 5 [default = 1000];
    if (has_active_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->active_interval());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StockQueryCaptialReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.StockQueryCaptialReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const StockQueryCaptialReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StockQueryCaptialReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.StockQueryCaptialReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.StockQueryCaptialReqt)
    MergeFrom(*source);
  }
}

void StockQueryCaptialReqt::MergeFrom(const StockQueryCaptialReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.StockQueryCaptialReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_moneytype();
      moneytype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.moneytype_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_fund_id();
      fund_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fund_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_session_id();
      session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      request_time_ = from.request_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      funcid_ = from.funcid_;
    }
    if (cached_has_bits & 0x00000040u) {
      active_interval_ = from.active_interval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StockQueryCaptialReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.StockQueryCaptialReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockQueryCaptialReqt::CopyFrom(const StockQueryCaptialReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.StockQueryCaptialReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockQueryCaptialReqt::IsInitialized() const {
  return true;
}

void StockQueryCaptialReqt::Swap(StockQueryCaptialReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockQueryCaptialReqt::InternalSwap(StockQueryCaptialReqt* other) {
  using std::swap;
  moneytype_.Swap(&other->moneytype_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fund_id_.Swap(&other->fund_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  session_id_.Swap(&other->session_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(request_time_, other->request_time_);
  swap(funcid_, other->funcid_);
  swap(active_interval_, other->active_interval_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StockQueryCaptialReqt::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StockQueryCapitalReqt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockQueryCapitalReqt::kFuncidFieldNumber;
const int StockQueryCapitalReqt::kMoneytypeFieldNumber;
const int StockQueryCapitalReqt::kRequestIdFieldNumber;
const int StockQueryCapitalReqt::kRequestTimeFieldNumber;
const int StockQueryCapitalReqt::kActiveIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockQueryCapitalReqt::StockQueryCapitalReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockQueryCapitalReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.StockQueryCapitalReqt)
}
StockQueryCapitalReqt::StockQueryCapitalReqt(const StockQueryCapitalReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  moneytype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_moneytype()) {
    moneytype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.moneytype_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  ::memcpy(&request_time_, &from.request_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_interval_) -
    reinterpret_cast<char*>(&request_time_)) + sizeof(active_interval_));
  // @@protoc_insertion_point(copy_constructor:autotrade.StockQueryCapitalReqt)
}

void StockQueryCapitalReqt::SharedCtor() {
  moneytype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_time_ = GOOGLE_LONGLONG(0);
  funcid_ = 11002010;
  active_interval_ = GOOGLE_LONGLONG(1000);
}

StockQueryCapitalReqt::~StockQueryCapitalReqt() {
  // @@protoc_insertion_point(destructor:autotrade.StockQueryCapitalReqt)
  SharedDtor();
}

void StockQueryCapitalReqt::SharedDtor() {
  moneytype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StockQueryCapitalReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StockQueryCapitalReqt::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StockQueryCapitalReqt& StockQueryCapitalReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockQueryCapitalReqt.base);
  return *internal_default_instance();
}


void StockQueryCapitalReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.StockQueryCapitalReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      moneytype_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 28u) {
    request_time_ = GOOGLE_LONGLONG(0);
    funcid_ = 11002010;
    active_interval_ = GOOGLE_LONGLONG(1000);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StockQueryCapitalReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.StockQueryCapitalReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 11002010];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string moneytype = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_moneytype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->moneytype().data(), static_cast<int>(this->moneytype().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockQueryCapitalReqt.moneytype");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockQueryCapitalReqt.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 request_time = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_request_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 active_interval = 5 [default = 1000];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_active_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &active_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.StockQueryCapitalReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.StockQueryCapitalReqt)
  return false;
#undef DO_
}

void StockQueryCapitalReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.StockQueryCapitalReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11002010];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional string moneytype = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->moneytype().data(), static_cast<int>(this->moneytype().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryCapitalReqt.moneytype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->moneytype(), output);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryCapitalReqt.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->request_id(), output);
  }

  // optional int64 request_time = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->request_time(), output);
  }

  // optional int64 active_interval = 5 [default = 1000];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->active_interval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.StockQueryCapitalReqt)
}

::google::protobuf::uint8* StockQueryCapitalReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.StockQueryCapitalReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11002010];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional string moneytype = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->moneytype().data(), static_cast<int>(this->moneytype().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryCapitalReqt.moneytype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->moneytype(), target);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryCapitalReqt.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->request_id(), target);
  }

  // optional int64 request_time = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->request_time(), target);
  }

  // optional int64 active_interval = 5 [default = 1000];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->active_interval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.StockQueryCapitalReqt)
  return target;
}

size_t StockQueryCapitalReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.StockQueryCapitalReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string moneytype = 2;
    if (has_moneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->moneytype());
    }

    // optional string request_id = 3;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional int64 request_time = 4 [default = 0];
    if (has_request_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->request_time());
    }

    // optional int32 funcid = 1 [default = 11002010];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

    // optional int64 active_interval = 5 [default = 1000];
    if (has_active_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->active_interval());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StockQueryCapitalReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.StockQueryCapitalReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const StockQueryCapitalReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StockQueryCapitalReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.StockQueryCapitalReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.StockQueryCapitalReqt)
    MergeFrom(*source);
  }
}

void StockQueryCapitalReqt::MergeFrom(const StockQueryCapitalReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.StockQueryCapitalReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_moneytype();
      moneytype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.moneytype_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      request_time_ = from.request_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      funcid_ = from.funcid_;
    }
    if (cached_has_bits & 0x00000010u) {
      active_interval_ = from.active_interval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StockQueryCapitalReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.StockQueryCapitalReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockQueryCapitalReqt::CopyFrom(const StockQueryCapitalReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.StockQueryCapitalReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockQueryCapitalReqt::IsInitialized() const {
  return true;
}

void StockQueryCapitalReqt::Swap(StockQueryCapitalReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockQueryCapitalReqt::InternalSwap(StockQueryCapitalReqt* other) {
  using std::swap;
  moneytype_.Swap(&other->moneytype_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(request_time_, other->request_time_);
  swap(funcid_, other->funcid_);
  swap(active_interval_, other->active_interval_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StockQueryCapitalReqt::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StockCapital::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockCapital::kFuncidFieldNumber;
const int StockCapital::kMoneytypeFieldNumber;
const int StockCapital::kFundBalFieldNumber;
const int StockCapital::kFundAvaFieldNumber;
const int StockCapital::kMarketValueFieldNumber;
const int StockCapital::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockCapital::StockCapital()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockCapital.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.StockCapital)
}
StockCapital::StockCapital(const StockCapital& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  moneytype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_moneytype()) {
    moneytype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.moneytype_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  ::memcpy(&fund_bal_, &from.fund_bal_,
    static_cast<size_t>(reinterpret_cast<char*>(&funcid_) -
    reinterpret_cast<char*>(&fund_bal_)) + sizeof(funcid_));
  // @@protoc_insertion_point(copy_constructor:autotrade.StockCapital)
}

void StockCapital::SharedCtor() {
  moneytype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fund_bal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&market_value_) -
      reinterpret_cast<char*>(&fund_bal_)) + sizeof(market_value_));
  funcid_ = 11102010;
}

StockCapital::~StockCapital() {
  // @@protoc_insertion_point(destructor:autotrade.StockCapital)
  SharedDtor();
}

void StockCapital::SharedDtor() {
  moneytype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StockCapital::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StockCapital::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StockCapital& StockCapital::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockCapital.base);
  return *internal_default_instance();
}


void StockCapital::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.StockCapital)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      moneytype_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&fund_bal_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&market_value_) -
        reinterpret_cast<char*>(&fund_bal_)) + sizeof(market_value_));
    funcid_ = 11102010;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StockCapital::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.StockCapital)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 11102010];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string moneytype = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_moneytype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->moneytype().data(), static_cast<int>(this->moneytype().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockCapital.moneytype");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double fund_bal = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_fund_bal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fund_bal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double fund_ava = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_fund_ava();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fund_ava_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double market_value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_market_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &market_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockCapital.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.StockCapital)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.StockCapital)
  return false;
#undef DO_
}

void StockCapital::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.StockCapital)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11102010];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional string moneytype = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->moneytype().data(), static_cast<int>(this->moneytype().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockCapital.moneytype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->moneytype(), output);
  }

  // required double fund_bal = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->fund_bal(), output);
  }

  // required double fund_ava = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->fund_ava(), output);
  }

  // required double market_value = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->market_value(), output);
  }

  // optional string request_id = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockCapital.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.StockCapital)
}

::google::protobuf::uint8* StockCapital::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.StockCapital)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11102010];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional string moneytype = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->moneytype().data(), static_cast<int>(this->moneytype().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockCapital.moneytype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->moneytype(), target);
  }

  // required double fund_bal = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->fund_bal(), target);
  }

  // required double fund_ava = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->fund_ava(), target);
  }

  // required double market_value = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->market_value(), target);
  }

  // optional string request_id = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockCapital.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.StockCapital)
  return target;
}

size_t StockCapital::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autotrade.StockCapital)
  size_t total_size = 0;

  if (has_fund_bal()) {
    // required double fund_bal = 3;
    total_size += 1 + 8;
  }

  if (has_fund_ava()) {
    // required double fund_ava = 4;
    total_size += 1 + 8;
  }

  if (has_market_value()) {
    // required double market_value = 5;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t StockCapital::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.StockCapital)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001c) ^ 0x0000001c) == 0) {  // All required fields are present.
    // required double fund_bal = 3;
    total_size += 1 + 8;

    // required double fund_ava = 4;
    total_size += 1 + 8;

    // required double market_value = 5;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string moneytype = 2;
    if (has_moneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->moneytype());
    }

    // optional string request_id = 6;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

  }
  // optional int32 funcid = 1 [default = 11102010];
  if (has_funcid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->funcid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StockCapital::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.StockCapital)
  GOOGLE_DCHECK_NE(&from, this);
  const StockCapital* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StockCapital>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.StockCapital)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.StockCapital)
    MergeFrom(*source);
  }
}

void StockCapital::MergeFrom(const StockCapital& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.StockCapital)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_moneytype();
      moneytype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.moneytype_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      fund_bal_ = from.fund_bal_;
    }
    if (cached_has_bits & 0x00000008u) {
      fund_ava_ = from.fund_ava_;
    }
    if (cached_has_bits & 0x00000010u) {
      market_value_ = from.market_value_;
    }
    if (cached_has_bits & 0x00000020u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StockCapital::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.StockCapital)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockCapital::CopyFrom(const StockCapital& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.StockCapital)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockCapital::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001c) != 0x0000001c) return false;
  return true;
}

void StockCapital::Swap(StockCapital* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockCapital::InternalSwap(StockCapital* other) {
  using std::swap;
  moneytype_.Swap(&other->moneytype_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(fund_bal_, other->fund_bal_);
  swap(fund_ava_, other->fund_ava_);
  swap(market_value_, other->market_value_);
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StockCapital::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StockQueryPositionReqt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockQueryPositionReqt::kFuncidFieldNumber;
const int StockQueryPositionReqt::kCodeFieldNumber;
const int StockQueryPositionReqt::kMarketFieldNumber;
const int StockQueryPositionReqt::kQueryCountFieldNumber;
const int StockQueryPositionReqt::kQueryTypeFieldNumber;
const int StockQueryPositionReqt::kStartPosFieldNumber;
const int StockQueryPositionReqt::kRequestIdFieldNumber;
const int StockQueryPositionReqt::kRequestTimeFieldNumber;
const int StockQueryPositionReqt::kActiveIntervalFieldNumber;
const int StockQueryPositionReqt::kFundIdFieldNumber;
const int StockQueryPositionReqt::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockQueryPositionReqt::StockQueryPositionReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockQueryPositionReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.StockQueryPositionReqt)
}
StockQueryPositionReqt::StockQueryPositionReqt(const StockQueryPositionReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  start_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_start_pos()) {
    start_pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_pos_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  fund_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fund_id()) {
    fund_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fund_id_);
  }
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_session_id()) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  ::memcpy(&market_, &from.market_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_interval_) -
    reinterpret_cast<char*>(&market_)) + sizeof(active_interval_));
  // @@protoc_insertion_point(copy_constructor:autotrade.StockQueryPositionReqt)
}

void StockQueryPositionReqt::SharedCtor() {
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fund_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&market_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_time_) -
      reinterpret_cast<char*>(&market_)) + sizeof(request_time_));
  funcid_ = 11002006;
  query_count_ = 500u;
  active_interval_ = GOOGLE_LONGLONG(1000);
}

StockQueryPositionReqt::~StockQueryPositionReqt() {
  // @@protoc_insertion_point(destructor:autotrade.StockQueryPositionReqt)
  SharedDtor();
}

void StockQueryPositionReqt::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_pos_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fund_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StockQueryPositionReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StockQueryPositionReqt::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StockQueryPositionReqt& StockQueryPositionReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockQueryPositionReqt.base);
  return *internal_default_instance();
}


void StockQueryPositionReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.StockQueryPositionReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      start_pos_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      fund_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      session_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&market_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&request_time_) -
        reinterpret_cast<char*>(&market_)) + sizeof(request_time_));
  }
  if (cached_has_bits & 1792u) {
    funcid_ = 11002006;
    query_count_ = 500u;
    active_interval_ = GOOGLE_LONGLONG(1000);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StockQueryPositionReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.StockQueryPositionReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 11002006];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockQueryPositionReqt.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 market = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_market();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &market_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 query_count = 4 [default = 500];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_query_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autotrade.StockQueryPositionReqt.QueryType query_type = 5 [default = Type_ONCE];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::autotrade::StockQueryPositionReqt_QueryType_IsValid(value)) {
            set_query_type(static_cast< ::autotrade::StockQueryPositionReqt_QueryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string start_pos = 6 [default = ""];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_pos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->start_pos().data(), static_cast<int>(this->start_pos().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockQueryPositionReqt.start_pos");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockQueryPositionReqt.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 request_time = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_request_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 active_interval = 9 [default = 1000];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_active_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &active_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fund_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fund_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fund_id().data(), static_cast<int>(this->fund_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockQueryPositionReqt.fund_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string session_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockQueryPositionReqt.session_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.StockQueryPositionReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.StockQueryPositionReqt)
  return false;
#undef DO_
}

void StockQueryPositionReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.StockQueryPositionReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11002006];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional string code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryPositionReqt.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->code(), output);
  }

  // optional uint32 market = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->market(), output);
  }

  // optional uint32 query_count = 4 [default = 500];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->query_count(), output);
  }

  // optional .autotrade.StockQueryPositionReqt.QueryType query_type = 5 [default = Type_ONCE];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->query_type(), output);
  }

  // optional string start_pos = 6 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_pos().data(), static_cast<int>(this->start_pos().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryPositionReqt.start_pos");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->start_pos(), output);
  }

  // optional string request_id = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryPositionReqt.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->request_id(), output);
  }

  // optional int64 request_time = 8 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->request_time(), output);
  }

  // optional int64 active_interval = 9 [default = 1000];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->active_interval(), output);
  }

  // optional string fund_id = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fund_id().data(), static_cast<int>(this->fund_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryPositionReqt.fund_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->fund_id(), output);
  }

  // optional string session_id = 11;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryPositionReqt.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->session_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.StockQueryPositionReqt)
}

::google::protobuf::uint8* StockQueryPositionReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.StockQueryPositionReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11002006];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional string code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryPositionReqt.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  // optional uint32 market = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->market(), target);
  }

  // optional uint32 query_count = 4 [default = 500];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->query_count(), target);
  }

  // optional .autotrade.StockQueryPositionReqt.QueryType query_type = 5 [default = Type_ONCE];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->query_type(), target);
  }

  // optional string start_pos = 6 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_pos().data(), static_cast<int>(this->start_pos().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryPositionReqt.start_pos");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->start_pos(), target);
  }

  // optional string request_id = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryPositionReqt.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->request_id(), target);
  }

  // optional int64 request_time = 8 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->request_time(), target);
  }

  // optional int64 active_interval = 9 [default = 1000];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->active_interval(), target);
  }

  // optional string fund_id = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fund_id().data(), static_cast<int>(this->fund_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryPositionReqt.fund_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->fund_id(), target);
  }

  // optional string session_id = 11;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryPositionReqt.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->session_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.StockQueryPositionReqt)
  return target;
}

size_t StockQueryPositionReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.StockQueryPositionReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional string start_pos = 6 [default = ""];
    if (has_start_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start_pos());
    }

    // optional string request_id = 7;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional string fund_id = 10;
    if (has_fund_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fund_id());
    }

    // optional string session_id = 11;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }

    // optional uint32 market = 3;
    if (has_market()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->market());
    }

    // optional .autotrade.StockQueryPositionReqt.QueryType query_type = 5 [default = Type_ONCE];
    if (has_query_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->query_type());
    }

    // optional int64 request_time = 8 [default = 0];
    if (has_request_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->request_time());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional int32 funcid = 1 [default = 11002006];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

    // optional uint32 query_count = 4 [default = 500];
    if (has_query_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->query_count());
    }

    // optional int64 active_interval = 9 [default = 1000];
    if (has_active_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->active_interval());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StockQueryPositionReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.StockQueryPositionReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const StockQueryPositionReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StockQueryPositionReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.StockQueryPositionReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.StockQueryPositionReqt)
    MergeFrom(*source);
  }
}

void StockQueryPositionReqt::MergeFrom(const StockQueryPositionReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.StockQueryPositionReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_start_pos();
      start_pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_pos_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_fund_id();
      fund_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fund_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_session_id();
      session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
    }
    if (cached_has_bits & 0x00000020u) {
      market_ = from.market_;
    }
    if (cached_has_bits & 0x00000040u) {
      query_type_ = from.query_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      request_time_ = from.request_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      funcid_ = from.funcid_;
    }
    if (cached_has_bits & 0x00000200u) {
      query_count_ = from.query_count_;
    }
    if (cached_has_bits & 0x00000400u) {
      active_interval_ = from.active_interval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StockQueryPositionReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.StockQueryPositionReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockQueryPositionReqt::CopyFrom(const StockQueryPositionReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.StockQueryPositionReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockQueryPositionReqt::IsInitialized() const {
  return true;
}

void StockQueryPositionReqt::Swap(StockQueryPositionReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockQueryPositionReqt::InternalSwap(StockQueryPositionReqt* other) {
  using std::swap;
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  start_pos_.Swap(&other->start_pos_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fund_id_.Swap(&other->fund_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  session_id_.Swap(&other->session_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(market_, other->market_);
  swap(query_type_, other->query_type_);
  swap(request_time_, other->request_time_);
  swap(funcid_, other->funcid_);
  swap(query_count_, other->query_count_);
  swap(active_interval_, other->active_interval_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StockQueryPositionReqt::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StockPosition_Position::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockPosition_Position::kMarketFieldNumber;
const int StockPosition_Position::kCodeFieldNumber;
const int StockPosition_Position::kNameFieldNumber;
const int StockPosition_Position::kBalFieldNumber;
const int StockPosition_Position::kCanSellQtyFieldNumber;
const int StockPosition_Position::kCanCreateQtyFieldNumber;
const int StockPosition_Position::kCanRedeemQtyFieldNumber;
const int StockPosition_Position::kBuyFrzQtyFieldNumber;
const int StockPosition_Position::kSellFrzQtyFieldNumber;
const int StockPosition_Position::kTdBuyQtyFieldNumber;
const int StockPosition_Position::kTdSellQtyFieldNumber;
const int StockPosition_Position::kYdQtyFieldNumber;
const int StockPosition_Position::kMarketValueFieldNumber;
const int StockPosition_Position::kCostPriceFieldNumber;
const int StockPosition_Position::kStartPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockPosition_Position::StockPosition_Position()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockPosition_Position.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.StockPosition.Position)
}
StockPosition_Position::StockPosition_Position(const StockPosition_Position& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  start_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_start_pos()) {
    start_pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_pos_);
  }
  ::memcpy(&bal_, &from.bal_,
    static_cast<size_t>(reinterpret_cast<char*>(&market_) -
    reinterpret_cast<char*>(&bal_)) + sizeof(market_));
  // @@protoc_insertion_point(copy_constructor:autotrade.StockPosition.Position)
}

void StockPosition_Position::SharedCtor() {
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&market_) -
      reinterpret_cast<char*>(&bal_)) + sizeof(market_));
}

StockPosition_Position::~StockPosition_Position() {
  // @@protoc_insertion_point(destructor:autotrade.StockPosition.Position)
  SharedDtor();
}

void StockPosition_Position::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_pos_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StockPosition_Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StockPosition_Position::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StockPosition_Position& StockPosition_Position::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockPosition_Position.base);
  return *internal_default_instance();
}


void StockPosition_Position::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.StockPosition.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      start_pos_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&bal_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&buy_frz_qty_) -
        reinterpret_cast<char*>(&bal_)) + sizeof(buy_frz_qty_));
  }
  if (cached_has_bits & 32512u) {
    ::memset(&sell_frz_qty_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&market_) -
        reinterpret_cast<char*>(&sell_frz_qty_)) + sizeof(market_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StockPosition_Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.StockPosition.Position)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 market = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_market();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &market_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockPosition.Position.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockPosition.Position.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 bal = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_bal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 can_sell_qty = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_can_sell_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &can_sell_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 can_create_qty = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_can_create_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &can_create_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 can_redeem_qty = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_can_redeem_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &can_redeem_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 buy_frz_qty = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_buy_frz_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buy_frz_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sell_frz_qty = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_sell_frz_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sell_frz_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 td_buy_qty = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_td_buy_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &td_buy_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 td_sell_qty = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_td_sell_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &td_sell_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 yd_qty = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_yd_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &yd_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double market_value = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_market_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &market_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double cost_price = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_cost_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cost_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string start_pos = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_pos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->start_pos().data(), static_cast<int>(this->start_pos().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockPosition.Position.start_pos");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.StockPosition.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.StockPosition.Position)
  return false;
#undef DO_
}

void StockPosition_Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.StockPosition.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 market = 1;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->market(), output);
  }

  // required string code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockPosition.Position.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->code(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockPosition.Position.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // required int64 bal = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->bal(), output);
  }

  // required int64 can_sell_qty = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->can_sell_qty(), output);
  }

  // optional int64 can_create_qty = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->can_create_qty(), output);
  }

  // optional int64 can_redeem_qty = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->can_redeem_qty(), output);
  }

  // optional int64 buy_frz_qty = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->buy_frz_qty(), output);
  }

  // optional int64 sell_frz_qty = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->sell_frz_qty(), output);
  }

  // optional int64 td_buy_qty = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->td_buy_qty(), output);
  }

  // optional int64 td_sell_qty = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->td_sell_qty(), output);
  }

  // optional int64 yd_qty = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->yd_qty(), output);
  }

  // required double market_value = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->market_value(), output);
  }

  // required double cost_price = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->cost_price(), output);
  }

  // optional string start_pos = 15;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_pos().data(), static_cast<int>(this->start_pos().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockPosition.Position.start_pos");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->start_pos(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.StockPosition.Position)
}

::google::protobuf::uint8* StockPosition_Position::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.StockPosition.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 market = 1;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->market(), target);
  }

  // required string code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockPosition.Position.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockPosition.Position.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required int64 bal = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->bal(), target);
  }

  // required int64 can_sell_qty = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->can_sell_qty(), target);
  }

  // optional int64 can_create_qty = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->can_create_qty(), target);
  }

  // optional int64 can_redeem_qty = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->can_redeem_qty(), target);
  }

  // optional int64 buy_frz_qty = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->buy_frz_qty(), target);
  }

  // optional int64 sell_frz_qty = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->sell_frz_qty(), target);
  }

  // optional int64 td_buy_qty = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->td_buy_qty(), target);
  }

  // optional int64 td_sell_qty = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->td_sell_qty(), target);
  }

  // optional int64 yd_qty = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->yd_qty(), target);
  }

  // required double market_value = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->market_value(), target);
  }

  // required double cost_price = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->cost_price(), target);
  }

  // optional string start_pos = 15;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_pos().data(), static_cast<int>(this->start_pos().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockPosition.Position.start_pos");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->start_pos(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.StockPosition.Position)
  return target;
}

size_t StockPosition_Position::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autotrade.StockPosition.Position)
  size_t total_size = 0;

  if (has_code()) {
    // required string code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_bal()) {
    // required int64 bal = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bal());
  }

  if (has_can_sell_qty()) {
    // required int64 can_sell_qty = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->can_sell_qty());
  }

  if (has_market_value()) {
    // required double market_value = 13;
    total_size += 1 + 8;
  }

  if (has_cost_price()) {
    // required double cost_price = 14;
    total_size += 1 + 8;
  }

  if (has_market()) {
    // required uint32 market = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->market());
  }

  return total_size;
}
size_t StockPosition_Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.StockPosition.Position)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00007019) ^ 0x00007019) == 0) {  // All required fields are present.
    // required string code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required int64 bal = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bal());

    // required int64 can_sell_qty = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->can_sell_qty());

    // required double market_value = 13;
    total_size += 1 + 8;

    // required double cost_price = 14;
    total_size += 1 + 8;

    // required uint32 market = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->market());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string start_pos = 15;
    if (has_start_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start_pos());
    }

  }
  if (_has_bits_[0 / 32] & 224u) {
    // optional int64 can_create_qty = 6;
    if (has_can_create_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->can_create_qty());
    }

    // optional int64 can_redeem_qty = 7;
    if (has_can_redeem_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->can_redeem_qty());
    }

    // optional int64 buy_frz_qty = 8;
    if (has_buy_frz_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->buy_frz_qty());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional int64 sell_frz_qty = 9;
    if (has_sell_frz_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sell_frz_qty());
    }

    // optional int64 td_buy_qty = 10;
    if (has_td_buy_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->td_buy_qty());
    }

    // optional int64 td_sell_qty = 11;
    if (has_td_sell_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->td_sell_qty());
    }

    // optional int64 yd_qty = 12;
    if (has_yd_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->yd_qty());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StockPosition_Position::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.StockPosition.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const StockPosition_Position* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StockPosition_Position>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.StockPosition.Position)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.StockPosition.Position)
    MergeFrom(*source);
  }
}

void StockPosition_Position::MergeFrom(const StockPosition_Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.StockPosition.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_start_pos();
      start_pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_pos_);
    }
    if (cached_has_bits & 0x00000008u) {
      bal_ = from.bal_;
    }
    if (cached_has_bits & 0x00000010u) {
      can_sell_qty_ = from.can_sell_qty_;
    }
    if (cached_has_bits & 0x00000020u) {
      can_create_qty_ = from.can_create_qty_;
    }
    if (cached_has_bits & 0x00000040u) {
      can_redeem_qty_ = from.can_redeem_qty_;
    }
    if (cached_has_bits & 0x00000080u) {
      buy_frz_qty_ = from.buy_frz_qty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      sell_frz_qty_ = from.sell_frz_qty_;
    }
    if (cached_has_bits & 0x00000200u) {
      td_buy_qty_ = from.td_buy_qty_;
    }
    if (cached_has_bits & 0x00000400u) {
      td_sell_qty_ = from.td_sell_qty_;
    }
    if (cached_has_bits & 0x00000800u) {
      yd_qty_ = from.yd_qty_;
    }
    if (cached_has_bits & 0x00001000u) {
      market_value_ = from.market_value_;
    }
    if (cached_has_bits & 0x00002000u) {
      cost_price_ = from.cost_price_;
    }
    if (cached_has_bits & 0x00004000u) {
      market_ = from.market_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StockPosition_Position::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.StockPosition.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockPosition_Position::CopyFrom(const StockPosition_Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.StockPosition.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockPosition_Position::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007019) != 0x00007019) return false;
  return true;
}

void StockPosition_Position::Swap(StockPosition_Position* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockPosition_Position::InternalSwap(StockPosition_Position* other) {
  using std::swap;
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  start_pos_.Swap(&other->start_pos_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bal_, other->bal_);
  swap(can_sell_qty_, other->can_sell_qty_);
  swap(can_create_qty_, other->can_create_qty_);
  swap(can_redeem_qty_, other->can_redeem_qty_);
  swap(buy_frz_qty_, other->buy_frz_qty_);
  swap(sell_frz_qty_, other->sell_frz_qty_);
  swap(td_buy_qty_, other->td_buy_qty_);
  swap(td_sell_qty_, other->td_sell_qty_);
  swap(yd_qty_, other->yd_qty_);
  swap(market_value_, other->market_value_);
  swap(cost_price_, other->cost_price_);
  swap(market_, other->market_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StockPosition_Position::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StockPosition::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockPosition::kFuncidFieldNumber;
const int StockPosition::kPositionsFieldNumber;
const int StockPosition::kLastPosFieldNumber;
const int StockPosition::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockPosition::StockPosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockPosition.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.StockPosition)
}
StockPosition::StockPosition(const StockPosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      positions_(from.positions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  last_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_last_pos()) {
    last_pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_pos_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:autotrade.StockPosition)
}

void StockPosition::SharedCtor() {
  last_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  funcid_ = 11102006;
}

StockPosition::~StockPosition() {
  // @@protoc_insertion_point(destructor:autotrade.StockPosition)
  SharedDtor();
}

void StockPosition::SharedDtor() {
  last_pos_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StockPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StockPosition::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StockPosition& StockPosition::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockPosition.base);
  return *internal_default_instance();
}


void StockPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.StockPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  positions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      last_pos_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    funcid_ = 11102006;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StockPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.StockPosition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 11102006];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autotrade.StockPosition.Position positions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_positions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string last_pos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_pos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->last_pos().data(), static_cast<int>(this->last_pos().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockPosition.last_pos");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockPosition.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.StockPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.StockPosition)
  return false;
#undef DO_
}

void StockPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.StockPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11102006];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // repeated .autotrade.StockPosition.Position positions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->positions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->positions(static_cast<int>(i)),
      output);
  }

  // optional string last_pos = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_pos().data(), static_cast<int>(this->last_pos().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockPosition.last_pos");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->last_pos(), output);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockPosition.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.StockPosition)
}

::google::protobuf::uint8* StockPosition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.StockPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11102006];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // repeated .autotrade.StockPosition.Position positions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->positions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->positions(static_cast<int>(i)), deterministic, target);
  }

  // optional string last_pos = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_pos().data(), static_cast<int>(this->last_pos().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockPosition.last_pos");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->last_pos(), target);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockPosition.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.StockPosition)
  return target;
}

size_t StockPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.StockPosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .autotrade.StockPosition.Position positions = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->positions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->positions(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string last_pos = 3;
    if (has_last_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_pos());
    }

    // optional string request_id = 4;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional int32 funcid = 1 [default = 11102006];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StockPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.StockPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const StockPosition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StockPosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.StockPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.StockPosition)
    MergeFrom(*source);
  }
}

void StockPosition::MergeFrom(const StockPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.StockPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  positions_.MergeFrom(from.positions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_last_pos();
      last_pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_pos_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StockPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.StockPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockPosition::CopyFrom(const StockPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.StockPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockPosition::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->positions())) return false;
  return true;
}

void StockPosition::Swap(StockPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockPosition::InternalSwap(StockPosition* other) {
  using std::swap;
  CastToBase(&positions_)->InternalSwap(CastToBase(&other->positions_));
  last_pos_.Swap(&other->last_pos_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StockPosition::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StockQueryDealDetailReqt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockQueryDealDetailReqt::kFuncidFieldNumber;
const int StockQueryDealDetailReqt::kOrdernoFieldNumber;
const int StockQueryDealDetailReqt::kQueryCountFieldNumber;
const int StockQueryDealDetailReqt::kQueryTypeFieldNumber;
const int StockQueryDealDetailReqt::kStartPosFieldNumber;
const int StockQueryDealDetailReqt::kRequestIdFieldNumber;
const int StockQueryDealDetailReqt::kRequestTimeFieldNumber;
const int StockQueryDealDetailReqt::kActiveIntervalFieldNumber;
const int StockQueryDealDetailReqt::kFundIdFieldNumber;
const int StockQueryDealDetailReqt::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockQueryDealDetailReqt::StockQueryDealDetailReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockQueryDealDetailReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.StockQueryDealDetailReqt)
}
StockQueryDealDetailReqt::StockQueryDealDetailReqt(const StockQueryDealDetailReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  orderno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_orderno()) {
    orderno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderno_);
  }
  start_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_start_pos()) {
    start_pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_pos_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  fund_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fund_id()) {
    fund_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fund_id_);
  }
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_session_id()) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  ::memcpy(&request_time_, &from.request_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_interval_) -
    reinterpret_cast<char*>(&request_time_)) + sizeof(active_interval_));
  // @@protoc_insertion_point(copy_constructor:autotrade.StockQueryDealDetailReqt)
}

void StockQueryDealDetailReqt::SharedCtor() {
  orderno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fund_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&request_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&query_type_) -
      reinterpret_cast<char*>(&request_time_)) + sizeof(query_type_));
  funcid_ = 11002004;
  query_count_ = 500u;
  active_interval_ = GOOGLE_LONGLONG(1000);
}

StockQueryDealDetailReqt::~StockQueryDealDetailReqt() {
  // @@protoc_insertion_point(destructor:autotrade.StockQueryDealDetailReqt)
  SharedDtor();
}

void StockQueryDealDetailReqt::SharedDtor() {
  orderno_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_pos_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fund_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StockQueryDealDetailReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StockQueryDealDetailReqt::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StockQueryDealDetailReqt& StockQueryDealDetailReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockQueryDealDetailReqt.base);
  return *internal_default_instance();
}


void StockQueryDealDetailReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.StockQueryDealDetailReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      orderno_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      start_pos_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      fund_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      session_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&request_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&query_type_) -
        reinterpret_cast<char*>(&request_time_)) + sizeof(query_type_));
    funcid_ = 11002004;
  }
  if (cached_has_bits & 768u) {
    query_count_ = 500u;
    active_interval_ = GOOGLE_LONGLONG(1000);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StockQueryDealDetailReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.StockQueryDealDetailReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 11002004];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string orderno = 2 [default = ""];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orderno().data(), static_cast<int>(this->orderno().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockQueryDealDetailReqt.orderno");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 query_count = 3 [default = 500];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_query_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autotrade.StockQueryDealDetailReqt.QueryType query_type = 4 [default = Type_ONCE];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::autotrade::StockQueryDealDetailReqt_QueryType_IsValid(value)) {
            set_query_type(static_cast< ::autotrade::StockQueryDealDetailReqt_QueryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string start_pos = 5 [default = ""];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_pos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->start_pos().data(), static_cast<int>(this->start_pos().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockQueryDealDetailReqt.start_pos");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockQueryDealDetailReqt.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 request_time = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_request_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 active_interval = 8 [default = 1000];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_active_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &active_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fund_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fund_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fund_id().data(), static_cast<int>(this->fund_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockQueryDealDetailReqt.fund_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string session_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockQueryDealDetailReqt.session_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.StockQueryDealDetailReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.StockQueryDealDetailReqt)
  return false;
#undef DO_
}

void StockQueryDealDetailReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.StockQueryDealDetailReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11002004];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional string orderno = 2 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderno().data(), static_cast<int>(this->orderno().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryDealDetailReqt.orderno");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->orderno(), output);
  }

  // optional uint32 query_count = 3 [default = 500];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->query_count(), output);
  }

  // optional .autotrade.StockQueryDealDetailReqt.QueryType query_type = 4 [default = Type_ONCE];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->query_type(), output);
  }

  // optional string start_pos = 5 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_pos().data(), static_cast<int>(this->start_pos().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryDealDetailReqt.start_pos");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->start_pos(), output);
  }

  // optional string request_id = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryDealDetailReqt.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->request_id(), output);
  }

  // optional int64 request_time = 7 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->request_time(), output);
  }

  // optional int64 active_interval = 8 [default = 1000];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->active_interval(), output);
  }

  // optional string fund_id = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fund_id().data(), static_cast<int>(this->fund_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryDealDetailReqt.fund_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->fund_id(), output);
  }

  // optional string session_id = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryDealDetailReqt.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->session_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.StockQueryDealDetailReqt)
}

::google::protobuf::uint8* StockQueryDealDetailReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.StockQueryDealDetailReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11002004];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional string orderno = 2 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderno().data(), static_cast<int>(this->orderno().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryDealDetailReqt.orderno");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->orderno(), target);
  }

  // optional uint32 query_count = 3 [default = 500];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->query_count(), target);
  }

  // optional .autotrade.StockQueryDealDetailReqt.QueryType query_type = 4 [default = Type_ONCE];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->query_type(), target);
  }

  // optional string start_pos = 5 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_pos().data(), static_cast<int>(this->start_pos().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryDealDetailReqt.start_pos");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->start_pos(), target);
  }

  // optional string request_id = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryDealDetailReqt.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->request_id(), target);
  }

  // optional int64 request_time = 7 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->request_time(), target);
  }

  // optional int64 active_interval = 8 [default = 1000];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->active_interval(), target);
  }

  // optional string fund_id = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fund_id().data(), static_cast<int>(this->fund_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryDealDetailReqt.fund_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->fund_id(), target);
  }

  // optional string session_id = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockQueryDealDetailReqt.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->session_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.StockQueryDealDetailReqt)
  return target;
}

size_t StockQueryDealDetailReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.StockQueryDealDetailReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string orderno = 2 [default = ""];
    if (has_orderno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderno());
    }

    // optional string start_pos = 5 [default = ""];
    if (has_start_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start_pos());
    }

    // optional string request_id = 6;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional string fund_id = 9;
    if (has_fund_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fund_id());
    }

    // optional string session_id = 10;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }

    // optional int64 request_time = 7 [default = 0];
    if (has_request_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->request_time());
    }

    // optional .autotrade.StockQueryDealDetailReqt.QueryType query_type = 4 [default = Type_ONCE];
    if (has_query_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->query_type());
    }

    // optional int32 funcid = 1 [default = 11002004];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional uint32 query_count = 3 [default = 500];
    if (has_query_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->query_count());
    }

    // optional int64 active_interval = 8 [default = 1000];
    if (has_active_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->active_interval());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StockQueryDealDetailReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.StockQueryDealDetailReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const StockQueryDealDetailReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StockQueryDealDetailReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.StockQueryDealDetailReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.StockQueryDealDetailReqt)
    MergeFrom(*source);
  }
}

void StockQueryDealDetailReqt::MergeFrom(const StockQueryDealDetailReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.StockQueryDealDetailReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_orderno();
      orderno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderno_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_start_pos();
      start_pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_pos_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_fund_id();
      fund_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fund_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_session_id();
      session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
    }
    if (cached_has_bits & 0x00000020u) {
      request_time_ = from.request_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      query_type_ = from.query_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      query_count_ = from.query_count_;
    }
    if (cached_has_bits & 0x00000200u) {
      active_interval_ = from.active_interval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StockQueryDealDetailReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.StockQueryDealDetailReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockQueryDealDetailReqt::CopyFrom(const StockQueryDealDetailReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.StockQueryDealDetailReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockQueryDealDetailReqt::IsInitialized() const {
  return true;
}

void StockQueryDealDetailReqt::Swap(StockQueryDealDetailReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockQueryDealDetailReqt::InternalSwap(StockQueryDealDetailReqt* other) {
  using std::swap;
  orderno_.Swap(&other->orderno_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  start_pos_.Swap(&other->start_pos_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fund_id_.Swap(&other->fund_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  session_id_.Swap(&other->session_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(request_time_, other->request_time_);
  swap(query_type_, other->query_type_);
  swap(funcid_, other->funcid_);
  swap(query_count_, other->query_count_);
  swap(active_interval_, other->active_interval_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StockQueryDealDetailReqt::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StockDealDetail::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockDealDetail::kFuncidFieldNumber;
const int StockDealDetail::kKnocksFieldNumber;
const int StockDealDetail::kLastPosFieldNumber;
const int StockDealDetail::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockDealDetail::StockDealDetail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockDealDetail.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.StockDealDetail)
}
StockDealDetail::StockDealDetail(const StockDealDetail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      knocks_(from.knocks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  last_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_last_pos()) {
    last_pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_pos_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:autotrade.StockDealDetail)
}

void StockDealDetail::SharedCtor() {
  last_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  funcid_ = 11102004;
}

StockDealDetail::~StockDealDetail() {
  // @@protoc_insertion_point(destructor:autotrade.StockDealDetail)
  SharedDtor();
}

void StockDealDetail::SharedDtor() {
  last_pos_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StockDealDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StockDealDetail::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StockDealDetail& StockDealDetail::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_StockDealDetail.base);
  return *internal_default_instance();
}


void StockDealDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.StockDealDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  knocks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      last_pos_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    funcid_ = 11102004;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StockDealDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.StockDealDetail)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 11102004];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autotrade.RawStockKnock knocks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_knocks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string last_pos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_pos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->last_pos().data(), static_cast<int>(this->last_pos().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockDealDetail.last_pos");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.StockDealDetail.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.StockDealDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.StockDealDetail)
  return false;
#undef DO_
}

void StockDealDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.StockDealDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11102004];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // repeated .autotrade.RawStockKnock knocks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->knocks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->knocks(static_cast<int>(i)),
      output);
  }

  // optional string last_pos = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_pos().data(), static_cast<int>(this->last_pos().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockDealDetail.last_pos");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->last_pos(), output);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockDealDetail.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.StockDealDetail)
}

::google::protobuf::uint8* StockDealDetail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.StockDealDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11102004];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // repeated .autotrade.RawStockKnock knocks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->knocks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->knocks(static_cast<int>(i)), deterministic, target);
  }

  // optional string last_pos = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_pos().data(), static_cast<int>(this->last_pos().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockDealDetail.last_pos");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->last_pos(), target);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.StockDealDetail.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.StockDealDetail)
  return target;
}

size_t StockDealDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.StockDealDetail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .autotrade.RawStockKnock knocks = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->knocks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->knocks(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string last_pos = 3;
    if (has_last_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_pos());
    }

    // optional string request_id = 4;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional int32 funcid = 1 [default = 11102004];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StockDealDetail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.StockDealDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const StockDealDetail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StockDealDetail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.StockDealDetail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.StockDealDetail)
    MergeFrom(*source);
  }
}

void StockDealDetail::MergeFrom(const StockDealDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.StockDealDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  knocks_.MergeFrom(from.knocks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_last_pos();
      last_pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_pos_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StockDealDetail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.StockDealDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockDealDetail::CopyFrom(const StockDealDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.StockDealDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockDealDetail::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->knocks())) return false;
  return true;
}

void StockDealDetail::Swap(StockDealDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockDealDetail::InternalSwap(StockDealDetail* other) {
  using std::swap;
  CastToBase(&knocks_)->InternalSwap(CastToBase(&other->knocks_));
  last_pos_.Swap(&other->last_pos_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StockDealDetail::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ETFBasketDynamicInfoReqt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ETFBasketDynamicInfoReqt::kFuncidFieldNumber;
const int ETFBasketDynamicInfoReqt::kCodeFieldNumber;
const int ETFBasketDynamicInfoReqt::kMarketFieldNumber;
const int ETFBasketDynamicInfoReqt::kRequestIdFieldNumber;
const int ETFBasketDynamicInfoReqt::kRequestTimeFieldNumber;
const int ETFBasketDynamicInfoReqt::kActiveIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ETFBasketDynamicInfoReqt::ETFBasketDynamicInfoReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_ETFBasketDynamicInfoReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.ETFBasketDynamicInfoReqt)
}
ETFBasketDynamicInfoReqt::ETFBasketDynamicInfoReqt(const ETFBasketDynamicInfoReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  ::memcpy(&request_time_, &from.request_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_interval_) -
    reinterpret_cast<char*>(&request_time_)) + sizeof(active_interval_));
  // @@protoc_insertion_point(copy_constructor:autotrade.ETFBasketDynamicInfoReqt)
}

void ETFBasketDynamicInfoReqt::SharedCtor() {
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&request_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&market_) -
      reinterpret_cast<char*>(&request_time_)) + sizeof(market_));
  funcid_ = 11002011;
  active_interval_ = GOOGLE_LONGLONG(1000);
}

ETFBasketDynamicInfoReqt::~ETFBasketDynamicInfoReqt() {
  // @@protoc_insertion_point(destructor:autotrade.ETFBasketDynamicInfoReqt)
  SharedDtor();
}

void ETFBasketDynamicInfoReqt::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ETFBasketDynamicInfoReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ETFBasketDynamicInfoReqt::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ETFBasketDynamicInfoReqt& ETFBasketDynamicInfoReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_ETFBasketDynamicInfoReqt.base);
  return *internal_default_instance();
}


void ETFBasketDynamicInfoReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.ETFBasketDynamicInfoReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&request_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&market_) -
        reinterpret_cast<char*>(&request_time_)) + sizeof(market_));
    funcid_ = 11002011;
    active_interval_ = GOOGLE_LONGLONG(1000);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ETFBasketDynamicInfoReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.ETFBasketDynamicInfoReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 11002011];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.ETFBasketDynamicInfoReqt.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 market = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_market();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &market_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.ETFBasketDynamicInfoReqt.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 request_time = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_request_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 active_interval = 6 [default = 1000];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_active_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &active_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.ETFBasketDynamicInfoReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.ETFBasketDynamicInfoReqt)
  return false;
#undef DO_
}

void ETFBasketDynamicInfoReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.ETFBasketDynamicInfoReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11002011];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // required string code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasketDynamicInfoReqt.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->code(), output);
  }

  // required uint32 market = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->market(), output);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasketDynamicInfoReqt.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->request_id(), output);
  }

  // optional int64 request_time = 5 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->request_time(), output);
  }

  // optional int64 active_interval = 6 [default = 1000];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->active_interval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.ETFBasketDynamicInfoReqt)
}

::google::protobuf::uint8* ETFBasketDynamicInfoReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.ETFBasketDynamicInfoReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11002011];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // required string code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasketDynamicInfoReqt.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  // required uint32 market = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->market(), target);
  }

  // optional string request_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasketDynamicInfoReqt.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->request_id(), target);
  }

  // optional int64 request_time = 5 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->request_time(), target);
  }

  // optional int64 active_interval = 6 [default = 1000];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->active_interval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.ETFBasketDynamicInfoReqt)
  return target;
}

size_t ETFBasketDynamicInfoReqt::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autotrade.ETFBasketDynamicInfoReqt)
  size_t total_size = 0;

  if (has_code()) {
    // required string code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_market()) {
    // required uint32 market = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->market());
  }

  return total_size;
}
size_t ETFBasketDynamicInfoReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.ETFBasketDynamicInfoReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required string code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required uint32 market = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->market());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional string request_id = 4;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional int64 request_time = 5 [default = 0];
    if (has_request_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->request_time());
    }

  }
  if (_has_bits_[0 / 32] & 48u) {
    // optional int32 funcid = 1 [default = 11002011];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

    // optional int64 active_interval = 6 [default = 1000];
    if (has_active_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->active_interval());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ETFBasketDynamicInfoReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.ETFBasketDynamicInfoReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const ETFBasketDynamicInfoReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ETFBasketDynamicInfoReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.ETFBasketDynamicInfoReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.ETFBasketDynamicInfoReqt)
    MergeFrom(*source);
  }
}

void ETFBasketDynamicInfoReqt::MergeFrom(const ETFBasketDynamicInfoReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.ETFBasketDynamicInfoReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      request_time_ = from.request_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      market_ = from.market_;
    }
    if (cached_has_bits & 0x00000010u) {
      funcid_ = from.funcid_;
    }
    if (cached_has_bits & 0x00000020u) {
      active_interval_ = from.active_interval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ETFBasketDynamicInfoReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.ETFBasketDynamicInfoReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ETFBasketDynamicInfoReqt::CopyFrom(const ETFBasketDynamicInfoReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.ETFBasketDynamicInfoReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ETFBasketDynamicInfoReqt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;
  return true;
}

void ETFBasketDynamicInfoReqt::Swap(ETFBasketDynamicInfoReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ETFBasketDynamicInfoReqt::InternalSwap(ETFBasketDynamicInfoReqt* other) {
  using std::swap;
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(request_time_, other->request_time_);
  swap(market_, other->market_);
  swap(funcid_, other->funcid_);
  swap(active_interval_, other->active_interval_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ETFBasketDynamicInfoReqt::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ETFBasketDynamicInfo_DynamicInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ETFBasketDynamicInfo_DynamicInfo::kMarketFieldNumber;
const int ETFBasketDynamicInfo_DynamicInfo::kCodeFieldNumber;
const int ETFBasketDynamicInfo_DynamicInfo::kCreatableQtyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ETFBasketDynamicInfo_DynamicInfo::ETFBasketDynamicInfo_DynamicInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_ETFBasketDynamicInfo_DynamicInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.ETFBasketDynamicInfo.DynamicInfo)
}
ETFBasketDynamicInfo_DynamicInfo::ETFBasketDynamicInfo_DynamicInfo(const ETFBasketDynamicInfo_DynamicInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  ::memcpy(&market_, &from.market_,
    static_cast<size_t>(reinterpret_cast<char*>(&creatable_qty_) -
    reinterpret_cast<char*>(&market_)) + sizeof(creatable_qty_));
  // @@protoc_insertion_point(copy_constructor:autotrade.ETFBasketDynamicInfo.DynamicInfo)
}

void ETFBasketDynamicInfo_DynamicInfo::SharedCtor() {
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&market_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&creatable_qty_) -
      reinterpret_cast<char*>(&market_)) + sizeof(creatable_qty_));
}

ETFBasketDynamicInfo_DynamicInfo::~ETFBasketDynamicInfo_DynamicInfo() {
  // @@protoc_insertion_point(destructor:autotrade.ETFBasketDynamicInfo.DynamicInfo)
  SharedDtor();
}

void ETFBasketDynamicInfo_DynamicInfo::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ETFBasketDynamicInfo_DynamicInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ETFBasketDynamicInfo_DynamicInfo::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ETFBasketDynamicInfo_DynamicInfo& ETFBasketDynamicInfo_DynamicInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_ETFBasketDynamicInfo_DynamicInfo.base);
  return *internal_default_instance();
}


void ETFBasketDynamicInfo_DynamicInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.ETFBasketDynamicInfo.DynamicInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    code_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&market_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&creatable_qty_) -
        reinterpret_cast<char*>(&market_)) + sizeof(creatable_qty_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ETFBasketDynamicInfo_DynamicInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.ETFBasketDynamicInfo.DynamicInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 market = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_market();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &market_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.ETFBasketDynamicInfo.DynamicInfo.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 creatable_qty = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_creatable_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creatable_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.ETFBasketDynamicInfo.DynamicInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.ETFBasketDynamicInfo.DynamicInfo)
  return false;
#undef DO_
}

void ETFBasketDynamicInfo_DynamicInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.ETFBasketDynamicInfo.DynamicInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 market = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->market(), output);
  }

  // required string code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasketDynamicInfo.DynamicInfo.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->code(), output);
  }

  // required uint32 creatable_qty = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->creatable_qty(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.ETFBasketDynamicInfo.DynamicInfo)
}

::google::protobuf::uint8* ETFBasketDynamicInfo_DynamicInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.ETFBasketDynamicInfo.DynamicInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 market = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->market(), target);
  }

  // required string code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasketDynamicInfo.DynamicInfo.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  // required uint32 creatable_qty = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->creatable_qty(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.ETFBasketDynamicInfo.DynamicInfo)
  return target;
}

size_t ETFBasketDynamicInfo_DynamicInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autotrade.ETFBasketDynamicInfo.DynamicInfo)
  size_t total_size = 0;

  if (has_code()) {
    // required string code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_creatable_qty()) {
    // required uint32 creatable_qty = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->creatable_qty());
  }

  return total_size;
}
size_t ETFBasketDynamicInfo_DynamicInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.ETFBasketDynamicInfo.DynamicInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required uint32 creatable_qty = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->creatable_qty());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 market = 1;
  if (has_market()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->market());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ETFBasketDynamicInfo_DynamicInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.ETFBasketDynamicInfo.DynamicInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ETFBasketDynamicInfo_DynamicInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ETFBasketDynamicInfo_DynamicInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.ETFBasketDynamicInfo.DynamicInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.ETFBasketDynamicInfo.DynamicInfo)
    MergeFrom(*source);
  }
}

void ETFBasketDynamicInfo_DynamicInfo::MergeFrom(const ETFBasketDynamicInfo_DynamicInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.ETFBasketDynamicInfo.DynamicInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000002u) {
      market_ = from.market_;
    }
    if (cached_has_bits & 0x00000004u) {
      creatable_qty_ = from.creatable_qty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ETFBasketDynamicInfo_DynamicInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.ETFBasketDynamicInfo.DynamicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ETFBasketDynamicInfo_DynamicInfo::CopyFrom(const ETFBasketDynamicInfo_DynamicInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.ETFBasketDynamicInfo.DynamicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ETFBasketDynamicInfo_DynamicInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void ETFBasketDynamicInfo_DynamicInfo::Swap(ETFBasketDynamicInfo_DynamicInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ETFBasketDynamicInfo_DynamicInfo::InternalSwap(ETFBasketDynamicInfo_DynamicInfo* other) {
  using std::swap;
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(market_, other->market_);
  swap(creatable_qty_, other->creatable_qty_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ETFBasketDynamicInfo_DynamicInfo::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ETFBasketDynamicInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ETFBasketDynamicInfo::kFuncidFieldNumber;
const int ETFBasketDynamicInfo::kDynamicInfoFieldNumber;
const int ETFBasketDynamicInfo::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ETFBasketDynamicInfo::ETFBasketDynamicInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_ETFBasketDynamicInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.ETFBasketDynamicInfo)
}
ETFBasketDynamicInfo::ETFBasketDynamicInfo(const ETFBasketDynamicInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      dynamic_info_(from.dynamic_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:autotrade.ETFBasketDynamicInfo)
}

void ETFBasketDynamicInfo::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  funcid_ = 11102011;
}

ETFBasketDynamicInfo::~ETFBasketDynamicInfo() {
  // @@protoc_insertion_point(destructor:autotrade.ETFBasketDynamicInfo)
  SharedDtor();
}

void ETFBasketDynamicInfo::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ETFBasketDynamicInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ETFBasketDynamicInfo::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ETFBasketDynamicInfo& ETFBasketDynamicInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_ETFBasketDynamicInfo.base);
  return *internal_default_instance();
}


void ETFBasketDynamicInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.ETFBasketDynamicInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dynamic_info_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    funcid_ = 11102011;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ETFBasketDynamicInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.ETFBasketDynamicInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 11102011];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autotrade.ETFBasketDynamicInfo.DynamicInfo dynamic_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_dynamic_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.ETFBasketDynamicInfo.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.ETFBasketDynamicInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.ETFBasketDynamicInfo)
  return false;
#undef DO_
}

void ETFBasketDynamicInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.ETFBasketDynamicInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11102011];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // repeated .autotrade.ETFBasketDynamicInfo.DynamicInfo dynamic_info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dynamic_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->dynamic_info(static_cast<int>(i)),
      output);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasketDynamicInfo.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.ETFBasketDynamicInfo)
}

::google::protobuf::uint8* ETFBasketDynamicInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.ETFBasketDynamicInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11102011];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // repeated .autotrade.ETFBasketDynamicInfo.DynamicInfo dynamic_info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dynamic_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->dynamic_info(static_cast<int>(i)), deterministic, target);
  }

  // optional string request_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.ETFBasketDynamicInfo.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.ETFBasketDynamicInfo)
  return target;
}

size_t ETFBasketDynamicInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.ETFBasketDynamicInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .autotrade.ETFBasketDynamicInfo.DynamicInfo dynamic_info = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->dynamic_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->dynamic_info(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string request_id = 3;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional int32 funcid = 1 [default = 11102011];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ETFBasketDynamicInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.ETFBasketDynamicInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ETFBasketDynamicInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ETFBasketDynamicInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.ETFBasketDynamicInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.ETFBasketDynamicInfo)
    MergeFrom(*source);
  }
}

void ETFBasketDynamicInfo::MergeFrom(const ETFBasketDynamicInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.ETFBasketDynamicInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dynamic_info_.MergeFrom(from.dynamic_info_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ETFBasketDynamicInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.ETFBasketDynamicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ETFBasketDynamicInfo::CopyFrom(const ETFBasketDynamicInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.ETFBasketDynamicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ETFBasketDynamicInfo::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->dynamic_info())) return false;
  return true;
}

void ETFBasketDynamicInfo::Swap(ETFBasketDynamicInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ETFBasketDynamicInfo::InternalSwap(ETFBasketDynamicInfo* other) {
  using std::swap;
  CastToBase(&dynamic_info_)->InternalSwap(CastToBase(&other->dynamic_info_));
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ETFBasketDynamicInfo::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RawStockKnock::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawStockKnock::kFuncidFieldNumber;
const int RawStockKnock::kStampFieldNumber;
const int RawStockKnock::kOrderGroupFieldNumber;
const int RawStockKnock::kOrdernoFieldNumber;
const int RawStockKnock::kMarketFieldNumber;
const int RawStockKnock::kCodeFieldNumber;
const int RawStockKnock::kOrderPriceFieldNumber;
const int RawStockKnock::kMatchQtyFieldNumber;
const int RawStockKnock::kOrderQtyFieldNumber;
const int RawStockKnock::kBsflagFieldNumber;
const int RawStockKnock::kMatchTypeFieldNumber;
const int RawStockKnock::kClearAmtFieldNumber;
const int RawStockKnock::kMatchAmtFieldNumber;
const int RawStockKnock::kMatchPriceFieldNumber;
const int RawStockKnock::kOrderTypeFieldNumber;
const int RawStockKnock::kMatchIdFieldNumber;
const int RawStockKnock::kStockAccountFieldNumber;
const int RawStockKnock::kOppoAccountFieldNumber;
const int RawStockKnock::kNameFieldNumber;
const int RawStockKnock::kStartPosFieldNumber;
const int RawStockKnock::kFundIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawStockKnock::RawStockKnock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_RawStockKnock.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.RawStockKnock)
}
RawStockKnock::RawStockKnock(const RawStockKnock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_group()) {
    order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
  }
  orderno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_orderno()) {
    orderno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderno_);
  }
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  match_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_match_id()) {
    match_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_id_);
  }
  stock_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_stock_account()) {
    stock_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stock_account_);
  }
  oppo_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_oppo_account()) {
    oppo_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.oppo_account_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  start_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_start_pos()) {
    start_pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_pos_);
  }
  fund_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fund_id()) {
    fund_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fund_id_);
  }
  ::memcpy(&stamp_, &from.stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&funcid_) -
    reinterpret_cast<char*>(&stamp_)) + sizeof(funcid_));
  // @@protoc_insertion_point(copy_constructor:autotrade.RawStockKnock)
}

void RawStockKnock::SharedCtor() {
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  match_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stock_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oppo_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fund_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&order_type_) -
      reinterpret_cast<char*>(&stamp_)) + sizeof(order_type_));
  funcid_ = 11003001;
}

RawStockKnock::~RawStockKnock() {
  // @@protoc_insertion_point(destructor:autotrade.RawStockKnock)
  SharedDtor();
}

void RawStockKnock::SharedDtor() {
  order_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderno_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  match_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stock_account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oppo_account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_pos_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fund_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RawStockKnock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RawStockKnock::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RawStockKnock& RawStockKnock::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_RawStockKnock.base);
  return *internal_default_instance();
}


void RawStockKnock::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.RawStockKnock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      order_group_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      orderno_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      match_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      stock_account_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      oppo_account_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      start_pos_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    fund_id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 65024u) {
    ::memset(&stamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_type_) -
        reinterpret_cast<char*>(&stamp_)) + sizeof(match_type_));
  }
  if (cached_has_bits & 2031616u) {
    ::memset(&clear_amt_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&order_type_) -
        reinterpret_cast<char*>(&clear_amt_)) + sizeof(order_type_));
    funcid_ = 11003001;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RawStockKnock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.RawStockKnock)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 11003001];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 stamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_stamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string order_group = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_group().data(), static_cast<int>(this->order_group().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.RawStockKnock.order_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string orderno = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orderno().data(), static_cast<int>(this->orderno().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.RawStockKnock.orderno");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 market = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_market();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &market_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string code = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.RawStockKnock.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 order_price = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_order_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &order_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 match_qty = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_match_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &match_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 order_qty = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_order_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 bsflag = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_bsflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bsflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 match_type = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_match_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double clear_amt = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_clear_amt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &clear_amt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double match_amt = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_match_amt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &match_amt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 match_price = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_match_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &match_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 order_type = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_order_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string match_id = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_match_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->match_id().data(), static_cast<int>(this->match_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.RawStockKnock.match_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string stock_account = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stock_account().data(), static_cast<int>(this->stock_account().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.RawStockKnock.stock_account");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string oppo_account = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oppo_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->oppo_account().data(), static_cast<int>(this->oppo_account().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.RawStockKnock.oppo_account");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.RawStockKnock.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string start_pos = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_pos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->start_pos().data(), static_cast<int>(this->start_pos().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.RawStockKnock.start_pos");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fund_id = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fund_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fund_id().data(), static_cast<int>(this->fund_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.RawStockKnock.fund_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.RawStockKnock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.RawStockKnock)
  return false;
#undef DO_
}

void RawStockKnock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.RawStockKnock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11003001];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // required uint64 stamp = 2;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->stamp(), output);
  }

  // required string order_group = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.RawStockKnock.order_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->order_group(), output);
  }

  // required string orderno = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderno().data(), static_cast<int>(this->orderno().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.RawStockKnock.orderno");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->orderno(), output);
  }

  // optional uint32 market = 5;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->market(), output);
  }

  // required string code = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.RawStockKnock.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->code(), output);
  }

  // optional int64 order_price = 7;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->order_price(), output);
  }

  // required int64 match_qty = 8;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->match_qty(), output);
  }

  // required uint32 order_qty = 9;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->order_qty(), output);
  }

  // required uint32 bsflag = 10;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->bsflag(), output);
  }

  // required int32 match_type = 11;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->match_type(), output);
  }

  // optional double clear_amt = 12;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->clear_amt(), output);
  }

  // required double match_amt = 13;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->match_amt(), output);
  }

  // required int64 match_price = 14;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->match_price(), output);
  }

  // optional int32 order_type = 15;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->order_type(), output);
  }

  // required string match_id = 16;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_id().data(), static_cast<int>(this->match_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.RawStockKnock.match_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->match_id(), output);
  }

  // required string stock_account = 17;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stock_account().data(), static_cast<int>(this->stock_account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.RawStockKnock.stock_account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->stock_account(), output);
  }

  // optional string oppo_account = 18;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oppo_account().data(), static_cast<int>(this->oppo_account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.RawStockKnock.oppo_account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->oppo_account(), output);
  }

  // optional string name = 19;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.RawStockKnock.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->name(), output);
  }

  // optional string start_pos = 20;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_pos().data(), static_cast<int>(this->start_pos().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.RawStockKnock.start_pos");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->start_pos(), output);
  }

  // optional string fund_id = 21;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fund_id().data(), static_cast<int>(this->fund_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.RawStockKnock.fund_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->fund_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.RawStockKnock)
}

::google::protobuf::uint8* RawStockKnock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.RawStockKnock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11003001];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // required uint64 stamp = 2;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->stamp(), target);
  }

  // required string order_group = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.RawStockKnock.order_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->order_group(), target);
  }

  // required string orderno = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderno().data(), static_cast<int>(this->orderno().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.RawStockKnock.orderno");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->orderno(), target);
  }

  // optional uint32 market = 5;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->market(), target);
  }

  // required string code = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.RawStockKnock.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->code(), target);
  }

  // optional int64 order_price = 7;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->order_price(), target);
  }

  // required int64 match_qty = 8;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->match_qty(), target);
  }

  // required uint32 order_qty = 9;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->order_qty(), target);
  }

  // required uint32 bsflag = 10;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->bsflag(), target);
  }

  // required int32 match_type = 11;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->match_type(), target);
  }

  // optional double clear_amt = 12;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->clear_amt(), target);
  }

  // required double match_amt = 13;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->match_amt(), target);
  }

  // required int64 match_price = 14;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->match_price(), target);
  }

  // optional int32 order_type = 15;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->order_type(), target);
  }

  // required string match_id = 16;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_id().data(), static_cast<int>(this->match_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.RawStockKnock.match_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->match_id(), target);
  }

  // required string stock_account = 17;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stock_account().data(), static_cast<int>(this->stock_account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.RawStockKnock.stock_account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->stock_account(), target);
  }

  // optional string oppo_account = 18;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oppo_account().data(), static_cast<int>(this->oppo_account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.RawStockKnock.oppo_account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->oppo_account(), target);
  }

  // optional string name = 19;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.RawStockKnock.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->name(), target);
  }

  // optional string start_pos = 20;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_pos().data(), static_cast<int>(this->start_pos().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.RawStockKnock.start_pos");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->start_pos(), target);
  }

  // optional string fund_id = 21;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fund_id().data(), static_cast<int>(this->fund_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.RawStockKnock.fund_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->fund_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.RawStockKnock)
  return target;
}

size_t RawStockKnock::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autotrade.RawStockKnock)
  size_t total_size = 0;

  if (has_order_group()) {
    // required string order_group = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_group());
  }

  if (has_orderno()) {
    // required string orderno = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderno());
  }

  if (has_code()) {
    // required string code = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_match_id()) {
    // required string match_id = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->match_id());
  }

  if (has_stock_account()) {
    // required string stock_account = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stock_account());
  }

  if (has_stamp()) {
    // required uint64 stamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->stamp());
  }

  if (has_order_qty()) {
    // required uint32 order_qty = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->order_qty());
  }

  if (has_match_qty()) {
    // required int64 match_qty = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->match_qty());
  }

  if (has_bsflag()) {
    // required uint32 bsflag = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bsflag());
  }

  if (has_match_type()) {
    // required int32 match_type = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->match_type());
  }

  if (has_match_amt()) {
    // required double match_amt = 13;
    total_size += 1 + 8;
  }

  if (has_match_price()) {
    // required int64 match_price = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->match_price());
  }

  return total_size;
}
size_t RawStockKnock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.RawStockKnock)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0006f21f) ^ 0x0006f21f) == 0) {  // All required fields are present.
    // required string order_group = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_group());

    // required string orderno = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderno());

    // required string code = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required string match_id = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->match_id());

    // required string stock_account = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stock_account());

    // required uint64 stamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->stamp());

    // required uint32 order_qty = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->order_qty());

    // required int64 match_qty = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->match_qty());

    // required uint32 bsflag = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bsflag());

    // required int32 match_type = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->match_type());

    // required double match_amt = 13;
    total_size += 1 + 8;

    // required int64 match_price = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->match_price());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 224u) {
    // optional string oppo_account = 18;
    if (has_oppo_account()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oppo_account());
    }

    // optional string name = 19;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string start_pos = 20;
    if (has_start_pos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start_pos());
    }

  }
  // optional string fund_id = 21;
  if (has_fund_id()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fund_id());
  }

  if (_has_bits_[8 / 32] & 3072u) {
    // optional int64 order_price = 7;
    if (has_order_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->order_price());
    }

    // optional uint32 market = 5;
    if (has_market()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->market());
    }

  }
  // optional double clear_amt = 12;
  if (has_clear_amt()) {
    total_size += 1 + 8;
  }

  if (_has_bits_[16 / 32] & 1572864u) {
    // optional int32 order_type = 15;
    if (has_order_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order_type());
    }

    // optional int32 funcid = 1 [default = 11003001];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawStockKnock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.RawStockKnock)
  GOOGLE_DCHECK_NE(&from, this);
  const RawStockKnock* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RawStockKnock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.RawStockKnock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.RawStockKnock)
    MergeFrom(*source);
  }
}

void RawStockKnock::MergeFrom(const RawStockKnock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.RawStockKnock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_order_group();
      order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_orderno();
      orderno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderno_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_match_id();
      match_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_stock_account();
      stock_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stock_account_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_oppo_account();
      oppo_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.oppo_account_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_start_pos();
      start_pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_pos_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_fund_id();
      fund_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fund_id_);
    }
    if (cached_has_bits & 0x00000200u) {
      stamp_ = from.stamp_;
    }
    if (cached_has_bits & 0x00000400u) {
      order_price_ = from.order_price_;
    }
    if (cached_has_bits & 0x00000800u) {
      market_ = from.market_;
    }
    if (cached_has_bits & 0x00001000u) {
      order_qty_ = from.order_qty_;
    }
    if (cached_has_bits & 0x00002000u) {
      match_qty_ = from.match_qty_;
    }
    if (cached_has_bits & 0x00004000u) {
      bsflag_ = from.bsflag_;
    }
    if (cached_has_bits & 0x00008000u) {
      match_type_ = from.match_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 2031616u) {
    if (cached_has_bits & 0x00010000u) {
      clear_amt_ = from.clear_amt_;
    }
    if (cached_has_bits & 0x00020000u) {
      match_amt_ = from.match_amt_;
    }
    if (cached_has_bits & 0x00040000u) {
      match_price_ = from.match_price_;
    }
    if (cached_has_bits & 0x00080000u) {
      order_type_ = from.order_type_;
    }
    if (cached_has_bits & 0x00100000u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RawStockKnock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.RawStockKnock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawStockKnock::CopyFrom(const RawStockKnock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.RawStockKnock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawStockKnock::IsInitialized() const {
  if ((_has_bits_[0] & 0x0006f21f) != 0x0006f21f) return false;
  return true;
}

void RawStockKnock::Swap(RawStockKnock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawStockKnock::InternalSwap(RawStockKnock* other) {
  using std::swap;
  order_group_.Swap(&other->order_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  orderno_.Swap(&other->orderno_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  match_id_.Swap(&other->match_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  stock_account_.Swap(&other->stock_account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  oppo_account_.Swap(&other->oppo_account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  start_pos_.Swap(&other->start_pos_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fund_id_.Swap(&other->fund_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(stamp_, other->stamp_);
  swap(order_price_, other->order_price_);
  swap(market_, other->market_);
  swap(order_qty_, other->order_qty_);
  swap(match_qty_, other->match_qty_);
  swap(bsflag_, other->bsflag_);
  swap(match_type_, other->match_type_);
  swap(clear_amt_, other->clear_amt_);
  swap(match_amt_, other->match_amt_);
  swap(match_price_, other->match_price_);
  swap(order_type_, other->order_type_);
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RawStockKnock::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OneStockKnock::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OneStockKnock::kFuncidFieldNumber;
const int OneStockKnock::kStampFieldNumber;
const int OneStockKnock::kCodeFieldNumber;
const int OneStockKnock::kOrderGroupFieldNumber;
const int OneStockKnock::kOrdernoFieldNumber;
const int OneStockKnock::kMatchIdFieldNumber;
const int OneStockKnock::kOrderQtyFieldNumber;
const int OneStockKnock::kMatchQtyFieldNumber;
const int OneStockKnock::kOrderPriceFieldNumber;
const int OneStockKnock::kMatchPriceFieldNumber;
const int OneStockKnock::kMatchAmtFieldNumber;
const int OneStockKnock::kBsflagFieldNumber;
const int OneStockKnock::kFundIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OneStockKnock::OneStockKnock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_OneStockKnock.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.OneStockKnock)
}
OneStockKnock::OneStockKnock(const OneStockKnock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_group()) {
    order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
  }
  orderno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_orderno()) {
    orderno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderno_);
  }
  match_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_match_id()) {
    match_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_id_);
  }
  fund_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fund_id()) {
    fund_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fund_id_);
  }
  ::memcpy(&stamp_, &from.stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&funcid_) -
    reinterpret_cast<char*>(&stamp_)) + sizeof(funcid_));
  // @@protoc_insertion_point(copy_constructor:autotrade.OneStockKnock)
}

void OneStockKnock::SharedCtor() {
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  match_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fund_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bsflag_) -
      reinterpret_cast<char*>(&stamp_)) + sizeof(bsflag_));
  funcid_ = 11003002;
}

OneStockKnock::~OneStockKnock() {
  // @@protoc_insertion_point(destructor:autotrade.OneStockKnock)
  SharedDtor();
}

void OneStockKnock::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderno_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  match_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fund_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OneStockKnock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OneStockKnock::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OneStockKnock& OneStockKnock::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_OneStockKnock.base);
  return *internal_default_instance();
}


void OneStockKnock::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.OneStockKnock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      order_group_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      orderno_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      match_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      fund_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&stamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_qty_) -
        reinterpret_cast<char*>(&stamp_)) + sizeof(match_qty_));
  }
  if (cached_has_bits & 7936u) {
    ::memset(&order_price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bsflag_) -
        reinterpret_cast<char*>(&order_price_)) + sizeof(bsflag_));
    funcid_ = 11003002;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OneStockKnock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.OneStockKnock)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 11003002];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 stamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_stamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OneStockKnock.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string order_group = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_group().data(), static_cast<int>(this->order_group().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OneStockKnock.order_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string orderno = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orderno().data(), static_cast<int>(this->orderno().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OneStockKnock.orderno");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string match_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_match_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->match_id().data(), static_cast<int>(this->match_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OneStockKnock.match_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 order_qty = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_order_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 match_qty = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_match_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 order_price = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_order_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &order_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double match_price = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_match_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &match_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double match_amt = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_match_amt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &match_amt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 bsflag = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_bsflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bsflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fund_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fund_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fund_id().data(), static_cast<int>(this->fund_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.OneStockKnock.fund_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.OneStockKnock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.OneStockKnock)
  return false;
#undef DO_
}

void OneStockKnock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.OneStockKnock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11003002];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // required uint64 stamp = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->stamp(), output);
  }

  // required string code = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OneStockKnock.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->code(), output);
  }

  // required string order_group = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OneStockKnock.order_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->order_group(), output);
  }

  // required string orderno = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderno().data(), static_cast<int>(this->orderno().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OneStockKnock.orderno");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->orderno(), output);
  }

  // required string match_id = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_id().data(), static_cast<int>(this->match_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OneStockKnock.match_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->match_id(), output);
  }

  // required uint32 order_qty = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->order_qty(), output);
  }

  // required uint32 match_qty = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->match_qty(), output);
  }

  // optional int64 order_price = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->order_price(), output);
  }

  // required double match_price = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->match_price(), output);
  }

  // required double match_amt = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->match_amt(), output);
  }

  // required uint32 bsflag = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->bsflag(), output);
  }

  // optional string fund_id = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fund_id().data(), static_cast<int>(this->fund_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OneStockKnock.fund_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->fund_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.OneStockKnock)
}

::google::protobuf::uint8* OneStockKnock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.OneStockKnock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11003002];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // required uint64 stamp = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->stamp(), target);
  }

  // required string code = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OneStockKnock.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->code(), target);
  }

  // required string order_group = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OneStockKnock.order_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->order_group(), target);
  }

  // required string orderno = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderno().data(), static_cast<int>(this->orderno().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OneStockKnock.orderno");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->orderno(), target);
  }

  // required string match_id = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_id().data(), static_cast<int>(this->match_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OneStockKnock.match_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->match_id(), target);
  }

  // required uint32 order_qty = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->order_qty(), target);
  }

  // required uint32 match_qty = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->match_qty(), target);
  }

  // optional int64 order_price = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->order_price(), target);
  }

  // required double match_price = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->match_price(), target);
  }

  // required double match_amt = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->match_amt(), target);
  }

  // required uint32 bsflag = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->bsflag(), target);
  }

  // optional string fund_id = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fund_id().data(), static_cast<int>(this->fund_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.OneStockKnock.fund_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->fund_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.OneStockKnock)
  return target;
}

size_t OneStockKnock::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autotrade.OneStockKnock)
  size_t total_size = 0;

  if (has_code()) {
    // required string code = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_order_group()) {
    // required string order_group = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_group());
  }

  if (has_orderno()) {
    // required string orderno = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderno());
  }

  if (has_match_id()) {
    // required string match_id = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->match_id());
  }

  if (has_stamp()) {
    // required uint64 stamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->stamp());
  }

  if (has_order_qty()) {
    // required uint32 order_qty = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->order_qty());
  }

  if (has_match_qty()) {
    // required uint32 match_qty = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->match_qty());
  }

  if (has_match_price()) {
    // required double match_price = 10;
    total_size += 1 + 8;
  }

  if (has_match_amt()) {
    // required double match_amt = 11;
    total_size += 1 + 8;
  }

  if (has_bsflag()) {
    // required uint32 bsflag = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bsflag());
  }

  return total_size;
}
size_t OneStockKnock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.OneStockKnock)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000eef) ^ 0x00000eef) == 0) {  // All required fields are present.
    // required string code = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required string order_group = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_group());

    // required string orderno = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderno());

    // required string match_id = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->match_id());

    // required uint64 stamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->stamp());

    // required uint32 order_qty = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->order_qty());

    // required uint32 match_qty = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->match_qty());

    // required double match_price = 10;
    total_size += 1 + 8;

    // required double match_amt = 11;
    total_size += 1 + 8;

    // required uint32 bsflag = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bsflag());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string fund_id = 13;
  if (has_fund_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fund_id());
  }

  // optional int64 order_price = 9;
  if (has_order_price()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->order_price());
  }

  // optional int32 funcid = 1 [default = 11003002];
  if (has_funcid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->funcid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OneStockKnock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.OneStockKnock)
  GOOGLE_DCHECK_NE(&from, this);
  const OneStockKnock* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OneStockKnock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.OneStockKnock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.OneStockKnock)
    MergeFrom(*source);
  }
}

void OneStockKnock::MergeFrom(const OneStockKnock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.OneStockKnock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_order_group();
      order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_orderno();
      orderno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderno_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_match_id();
      match_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_fund_id();
      fund_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fund_id_);
    }
    if (cached_has_bits & 0x00000020u) {
      stamp_ = from.stamp_;
    }
    if (cached_has_bits & 0x00000040u) {
      order_qty_ = from.order_qty_;
    }
    if (cached_has_bits & 0x00000080u) {
      match_qty_ = from.match_qty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      order_price_ = from.order_price_;
    }
    if (cached_has_bits & 0x00000200u) {
      match_price_ = from.match_price_;
    }
    if (cached_has_bits & 0x00000400u) {
      match_amt_ = from.match_amt_;
    }
    if (cached_has_bits & 0x00000800u) {
      bsflag_ = from.bsflag_;
    }
    if (cached_has_bits & 0x00001000u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OneStockKnock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.OneStockKnock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneStockKnock::CopyFrom(const OneStockKnock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.OneStockKnock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneStockKnock::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000eef) != 0x00000eef) return false;
  return true;
}

void OneStockKnock::Swap(OneStockKnock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OneStockKnock::InternalSwap(OneStockKnock* other) {
  using std::swap;
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_group_.Swap(&other->order_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  orderno_.Swap(&other->orderno_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  match_id_.Swap(&other->match_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fund_id_.Swap(&other->fund_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(stamp_, other->stamp_);
  swap(order_qty_, other->order_qty_);
  swap(match_qty_, other->match_qty_);
  swap(order_price_, other->order_price_);
  swap(match_price_, other->match_price_);
  swap(match_amt_, other->match_amt_);
  swap(bsflag_, other->bsflag_);
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OneStockKnock::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SumStockKnock::InitAsDefaultInstance() {
}
::google::protobuf::internal::ExplicitlyConstructed<::std::string> SumStockKnock::_i_give_permission_to_break_this_code_default_type_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SumStockKnock::kFuncidFieldNumber;
const int SumStockKnock::kStampFieldNumber;
const int SumStockKnock::kTypeFieldNumber;
const int SumStockKnock::kOrderGroupFieldNumber;
const int SumStockKnock::kOrderQtyFieldNumber;
const int SumStockKnock::kMatchQtyFieldNumber;
const int SumStockKnock::kMatchAmtFieldNumber;
const int SumStockKnock::kCancelQtyFieldNumber;
const int SumStockKnock::kFinishedFieldNumber;
const int SumStockKnock::kOrderIdFieldNumber;
const int SumStockKnock::kOneKnocksFieldNumber;
const int SumStockKnock::kAccountNameFieldNumber;
const int SumStockKnock::kFundIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SumStockKnock::SumStockKnock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_SumStockKnock.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.SumStockKnock)
}
SumStockKnock::SumStockKnock(const SumStockKnock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      one_knocks_(from.one_knocks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::autotrade::SumStockKnock::_i_give_permission_to_break_this_code_default_type_.get());
  if (from.has_type()) {
    type_.AssignWithDefault(&::autotrade::SumStockKnock::_i_give_permission_to_break_this_code_default_type_.get(), from.type_);
  }
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_group()) {
    order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
  }
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_id()) {
    order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
  }
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account_name()) {
    account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
  }
  fund_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fund_id()) {
    fund_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fund_id_);
  }
  ::memcpy(&stamp_, &from.stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&funcid_) -
    reinterpret_cast<char*>(&stamp_)) + sizeof(funcid_));
  // @@protoc_insertion_point(copy_constructor:autotrade.SumStockKnock)
}

void SumStockKnock::SharedCtor() {
  type_.UnsafeSetDefault(&::autotrade::SumStockKnock::_i_give_permission_to_break_this_code_default_type_.get());
  order_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fund_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finished_) -
      reinterpret_cast<char*>(&stamp_)) + sizeof(finished_));
  funcid_ = 11003003;
}

SumStockKnock::~SumStockKnock() {
  // @@protoc_insertion_point(destructor:autotrade.SumStockKnock)
  SharedDtor();
}

void SumStockKnock::SharedDtor() {
  type_.DestroyNoArena(&::autotrade::SumStockKnock::_i_give_permission_to_break_this_code_default_type_.get());
  order_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fund_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SumStockKnock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SumStockKnock::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SumStockKnock& SumStockKnock::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_SumStockKnock.base);
  return *internal_default_instance();
}


void SumStockKnock::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.SumStockKnock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  one_knocks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      type_.UnsafeMutablePointer()->assign(*&::autotrade::SumStockKnock::_i_give_permission_to_break_this_code_default_type_.get());
    }
    if (cached_has_bits & 0x00000002u) {
      order_group_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      order_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      account_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      fund_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&stamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_qty_) -
        reinterpret_cast<char*>(&stamp_)) + sizeof(match_qty_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&match_amt_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&finished_) -
        reinterpret_cast<char*>(&match_amt_)) + sizeof(finished_));
    funcid_ = 11003003;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SumStockKnock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.SumStockKnock)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 11003003];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 stamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_stamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string type = 3 [default = "S"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.SumStockKnock.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string order_group = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_group().data(), static_cast<int>(this->order_group().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.SumStockKnock.order_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 order_qty = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_order_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &order_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 match_qty = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_match_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double match_amt = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_match_amt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &match_amt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 cancel_qty = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_cancel_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cancel_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool finished = 9 [default = false];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_finished();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finished_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string order_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_id().data(), static_cast<int>(this->order_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.SumStockKnock.order_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autotrade.OneStockKnock one_knocks = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_one_knocks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string account_name = 12 [default = ""];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account_name().data(), static_cast<int>(this->account_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.SumStockKnock.account_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fund_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fund_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fund_id().data(), static_cast<int>(this->fund_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.SumStockKnock.fund_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.SumStockKnock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.SumStockKnock)
  return false;
#undef DO_
}

void SumStockKnock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.SumStockKnock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11003003];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // required uint64 stamp = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->stamp(), output);
  }

  // optional string type = 3 [default = "S"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.SumStockKnock.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type(), output);
  }

  // required string order_group = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.SumStockKnock.order_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->order_group(), output);
  }

  // required uint64 order_qty = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->order_qty(), output);
  }

  // required uint64 match_qty = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->match_qty(), output);
  }

  // optional double match_amt = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->match_amt(), output);
  }

  // required uint64 cancel_qty = 8 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->cancel_qty(), output);
  }

  // required bool finished = 9 [default = false];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->finished(), output);
  }

  // required string order_id = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.SumStockKnock.order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->order_id(), output);
  }

  // repeated .autotrade.OneStockKnock one_knocks = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->one_knocks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->one_knocks(static_cast<int>(i)),
      output);
  }

  // optional string account_name = 12 [default = ""];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.SumStockKnock.account_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->account_name(), output);
  }

  // optional string fund_id = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fund_id().data(), static_cast<int>(this->fund_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.SumStockKnock.fund_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->fund_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.SumStockKnock)
}

::google::protobuf::uint8* SumStockKnock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.SumStockKnock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11003003];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // required uint64 stamp = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->stamp(), target);
  }

  // optional string type = 3 [default = "S"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.SumStockKnock.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }

  // required string order_group = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_group().data(), static_cast<int>(this->order_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.SumStockKnock.order_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->order_group(), target);
  }

  // required uint64 order_qty = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->order_qty(), target);
  }

  // required uint64 match_qty = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->match_qty(), target);
  }

  // optional double match_amt = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->match_amt(), target);
  }

  // required uint64 cancel_qty = 8 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->cancel_qty(), target);
  }

  // required bool finished = 9 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->finished(), target);
  }

  // required string order_id = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.SumStockKnock.order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->order_id(), target);
  }

  // repeated .autotrade.OneStockKnock one_knocks = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->one_knocks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->one_knocks(static_cast<int>(i)), deterministic, target);
  }

  // optional string account_name = 12 [default = ""];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.SumStockKnock.account_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->account_name(), target);
  }

  // optional string fund_id = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fund_id().data(), static_cast<int>(this->fund_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.SumStockKnock.fund_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->fund_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.SumStockKnock)
  return target;
}

size_t SumStockKnock::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autotrade.SumStockKnock)
  size_t total_size = 0;

  if (has_order_group()) {
    // required string order_group = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_group());
  }

  if (has_order_id()) {
    // required string order_id = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_id());
  }

  if (has_stamp()) {
    // required uint64 stamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->stamp());
  }

  if (has_order_qty()) {
    // required uint64 order_qty = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->order_qty());
  }

  if (has_match_qty()) {
    // required uint64 match_qty = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->match_qty());
  }

  if (has_cancel_qty()) {
    // required uint64 cancel_qty = 8 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cancel_qty());
  }

  if (has_finished()) {
    // required bool finished = 9 [default = false];
    total_size += 1 + 1;
  }

  return total_size;
}
size_t SumStockKnock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.SumStockKnock)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000006e6) ^ 0x000006e6) == 0) {  // All required fields are present.
    // required string order_group = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_group());

    // required string order_id = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_id());

    // required uint64 stamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->stamp());

    // required uint64 order_qty = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->order_qty());

    // required uint64 match_qty = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->match_qty());

    // required uint64 cancel_qty = 8 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cancel_qty());

    // required bool finished = 9 [default = false];
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .autotrade.OneStockKnock one_knocks = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->one_knocks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->one_knocks(static_cast<int>(i)));
    }
  }

  // optional string type = 3 [default = "S"];
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  if (_has_bits_[0 / 32] & 24u) {
    // optional string account_name = 12 [default = ""];
    if (has_account_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name());
    }

    // optional string fund_id = 13;
    if (has_fund_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fund_id());
    }

  }
  // optional double match_amt = 7;
  if (has_match_amt()) {
    total_size += 1 + 8;
  }

  // optional int32 funcid = 1 [default = 11003003];
  if (has_funcid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->funcid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SumStockKnock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.SumStockKnock)
  GOOGLE_DCHECK_NE(&from, this);
  const SumStockKnock* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SumStockKnock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.SumStockKnock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.SumStockKnock)
    MergeFrom(*source);
  }
}

void SumStockKnock::MergeFrom(const SumStockKnock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.SumStockKnock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  one_knocks_.MergeFrom(from.one_knocks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_type();
      type_.AssignWithDefault(&::autotrade::SumStockKnock::_i_give_permission_to_break_this_code_default_type_.get(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_order_group();
      order_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_group_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_order_id();
      order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_account_name();
      account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_fund_id();
      fund_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fund_id_);
    }
    if (cached_has_bits & 0x00000020u) {
      stamp_ = from.stamp_;
    }
    if (cached_has_bits & 0x00000040u) {
      order_qty_ = from.order_qty_;
    }
    if (cached_has_bits & 0x00000080u) {
      match_qty_ = from.match_qty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      match_amt_ = from.match_amt_;
    }
    if (cached_has_bits & 0x00000200u) {
      cancel_qty_ = from.cancel_qty_;
    }
    if (cached_has_bits & 0x00000400u) {
      finished_ = from.finished_;
    }
    if (cached_has_bits & 0x00000800u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SumStockKnock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.SumStockKnock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SumStockKnock::CopyFrom(const SumStockKnock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.SumStockKnock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SumStockKnock::IsInitialized() const {
  if ((_has_bits_[0] & 0x000006e6) != 0x000006e6) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->one_knocks())) return false;
  return true;
}

void SumStockKnock::Swap(SumStockKnock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SumStockKnock::InternalSwap(SumStockKnock* other) {
  using std::swap;
  CastToBase(&one_knocks_)->InternalSwap(CastToBase(&other->one_knocks_));
  type_.Swap(&other->type_, &::autotrade::SumStockKnock::_i_give_permission_to_break_this_code_default_type_.get(),
    GetArenaNoVirtual());
  order_group_.Swap(&other->order_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_id_.Swap(&other->order_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_name_.Swap(&other->account_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fund_id_.Swap(&other->fund_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(stamp_, other->stamp_);
  swap(order_qty_, other->order_qty_);
  swap(match_qty_, other->match_qty_);
  swap(match_amt_, other->match_amt_);
  swap(cancel_qty_, other->cancel_qty_);
  swap(finished_, other->finished_);
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SumStockKnock::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CStockAvailableBalanceQueryReqt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CStockAvailableBalanceQueryReqt::kFuncidFieldNumber;
const int CStockAvailableBalanceQueryReqt::kFundIdFieldNumber;
const int CStockAvailableBalanceQueryReqt::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CStockAvailableBalanceQueryReqt::CStockAvailableBalanceQueryReqt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_CStockAvailableBalanceQueryReqt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.CStockAvailableBalanceQueryReqt)
}
CStockAvailableBalanceQueryReqt::CStockAvailableBalanceQueryReqt(const CStockAvailableBalanceQueryReqt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fund_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fund_id()) {
    fund_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fund_id_);
  }
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_session_id()) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:autotrade.CStockAvailableBalanceQueryReqt)
}

void CStockAvailableBalanceQueryReqt::SharedCtor() {
  fund_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  funcid_ = 11003004;
}

CStockAvailableBalanceQueryReqt::~CStockAvailableBalanceQueryReqt() {
  // @@protoc_insertion_point(destructor:autotrade.CStockAvailableBalanceQueryReqt)
  SharedDtor();
}

void CStockAvailableBalanceQueryReqt::SharedDtor() {
  fund_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CStockAvailableBalanceQueryReqt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CStockAvailableBalanceQueryReqt::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CStockAvailableBalanceQueryReqt& CStockAvailableBalanceQueryReqt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_CStockAvailableBalanceQueryReqt.base);
  return *internal_default_instance();
}


void CStockAvailableBalanceQueryReqt::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.CStockAvailableBalanceQueryReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      fund_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      session_id_.ClearNonDefaultToEmptyNoArena();
    }
    funcid_ = 11003004;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CStockAvailableBalanceQueryReqt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.CStockAvailableBalanceQueryReqt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 11003004];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fund_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fund_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fund_id().data(), static_cast<int>(this->fund_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.CStockAvailableBalanceQueryReqt.fund_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string session_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "autotrade.CStockAvailableBalanceQueryReqt.session_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.CStockAvailableBalanceQueryReqt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.CStockAvailableBalanceQueryReqt)
  return false;
#undef DO_
}

void CStockAvailableBalanceQueryReqt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.CStockAvailableBalanceQueryReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11003004];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  // optional string fund_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fund_id().data(), static_cast<int>(this->fund_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.CStockAvailableBalanceQueryReqt.fund_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fund_id(), output);
  }

  // optional string session_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.CStockAvailableBalanceQueryReqt.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->session_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.CStockAvailableBalanceQueryReqt)
}

::google::protobuf::uint8* CStockAvailableBalanceQueryReqt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.CStockAvailableBalanceQueryReqt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11003004];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  // optional string fund_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fund_id().data(), static_cast<int>(this->fund_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.CStockAvailableBalanceQueryReqt.fund_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fund_id(), target);
  }

  // optional string session_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "autotrade.CStockAvailableBalanceQueryReqt.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->session_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.CStockAvailableBalanceQueryReqt)
  return target;
}

size_t CStockAvailableBalanceQueryReqt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.CStockAvailableBalanceQueryReqt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string fund_id = 2;
    if (has_fund_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fund_id());
    }

    // optional string session_id = 3;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }

    // optional int32 funcid = 1 [default = 11003004];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStockAvailableBalanceQueryReqt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.CStockAvailableBalanceQueryReqt)
  GOOGLE_DCHECK_NE(&from, this);
  const CStockAvailableBalanceQueryReqt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CStockAvailableBalanceQueryReqt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.CStockAvailableBalanceQueryReqt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.CStockAvailableBalanceQueryReqt)
    MergeFrom(*source);
  }
}

void CStockAvailableBalanceQueryReqt::MergeFrom(const CStockAvailableBalanceQueryReqt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.CStockAvailableBalanceQueryReqt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_fund_id();
      fund_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fund_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_session_id();
      session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      funcid_ = from.funcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CStockAvailableBalanceQueryReqt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.CStockAvailableBalanceQueryReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStockAvailableBalanceQueryReqt::CopyFrom(const CStockAvailableBalanceQueryReqt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.CStockAvailableBalanceQueryReqt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStockAvailableBalanceQueryReqt::IsInitialized() const {
  return true;
}

void CStockAvailableBalanceQueryReqt::Swap(CStockAvailableBalanceQueryReqt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CStockAvailableBalanceQueryReqt::InternalSwap(CStockAvailableBalanceQueryReqt* other) {
  using std::swap;
  fund_id_.Swap(&other->fund_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  session_id_.Swap(&other->session_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CStockAvailableBalanceQueryReqt::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CStockAvailableBalanceQueryResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CStockAvailableBalanceQueryResp::kFuncidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CStockAvailableBalanceQueryResp::CStockAvailableBalanceQueryResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_CStockAvailableBalanceQueryResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:autotrade.CStockAvailableBalanceQueryResp)
}
CStockAvailableBalanceQueryResp::CStockAvailableBalanceQueryResp(const CStockAvailableBalanceQueryResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:autotrade.CStockAvailableBalanceQueryResp)
}

void CStockAvailableBalanceQueryResp::SharedCtor() {
  funcid_ = 11103004;
}

CStockAvailableBalanceQueryResp::~CStockAvailableBalanceQueryResp() {
  // @@protoc_insertion_point(destructor:autotrade.CStockAvailableBalanceQueryResp)
  SharedDtor();
}

void CStockAvailableBalanceQueryResp::SharedDtor() {
}

void CStockAvailableBalanceQueryResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CStockAvailableBalanceQueryResp::descriptor() {
  ::protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CStockAvailableBalanceQueryResp& CStockAvailableBalanceQueryResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fqstock_5fprotocol_2eproto::scc_info_CStockAvailableBalanceQueryResp.base);
  return *internal_default_instance();
}


void CStockAvailableBalanceQueryResp::Clear() {
// @@protoc_insertion_point(message_clear_start:autotrade.CStockAvailableBalanceQueryResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  funcid_ = 11103004;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CStockAvailableBalanceQueryResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autotrade.CStockAvailableBalanceQueryResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 funcid = 1 [default = 11103004];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_funcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autotrade.CStockAvailableBalanceQueryResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autotrade.CStockAvailableBalanceQueryResp)
  return false;
#undef DO_
}

void CStockAvailableBalanceQueryResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autotrade.CStockAvailableBalanceQueryResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11103004];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autotrade.CStockAvailableBalanceQueryResp)
}

::google::protobuf::uint8* CStockAvailableBalanceQueryResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autotrade.CStockAvailableBalanceQueryResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 funcid = 1 [default = 11103004];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autotrade.CStockAvailableBalanceQueryResp)
  return target;
}

size_t CStockAvailableBalanceQueryResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autotrade.CStockAvailableBalanceQueryResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 funcid = 1 [default = 11103004];
  if (has_funcid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->funcid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStockAvailableBalanceQueryResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autotrade.CStockAvailableBalanceQueryResp)
  GOOGLE_DCHECK_NE(&from, this);
  const CStockAvailableBalanceQueryResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CStockAvailableBalanceQueryResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autotrade.CStockAvailableBalanceQueryResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autotrade.CStockAvailableBalanceQueryResp)
    MergeFrom(*source);
  }
}

void CStockAvailableBalanceQueryResp::MergeFrom(const CStockAvailableBalanceQueryResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autotrade.CStockAvailableBalanceQueryResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_funcid()) {
    set_funcid(from.funcid());
  }
}

void CStockAvailableBalanceQueryResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autotrade.CStockAvailableBalanceQueryResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStockAvailableBalanceQueryResp::CopyFrom(const CStockAvailableBalanceQueryResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autotrade.CStockAvailableBalanceQueryResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStockAvailableBalanceQueryResp::IsInitialized() const {
  return true;
}

void CStockAvailableBalanceQueryResp::Swap(CStockAvailableBalanceQueryResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CStockAvailableBalanceQueryResp::InternalSwap(CStockAvailableBalanceQueryResp* other) {
  using std::swap;
  swap(funcid_, other->funcid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CStockAvailableBalanceQueryResp::GetMetadata() const {
  protobuf_protos_2fqstock_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fqstock_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace autotrade
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::StockLoginReqt* Arena::CreateMaybeMessage< ::autotrade::StockLoginReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::StockLoginReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::StockLoginResp* Arena::CreateMaybeMessage< ::autotrade::StockLoginResp >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::StockLoginResp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::StockOrderReqt* Arena::CreateMaybeMessage< ::autotrade::StockOrderReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::StockOrderReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::StockOrderResp* Arena::CreateMaybeMessage< ::autotrade::StockOrderResp >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::StockOrderResp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::StockOrdersReqt_SingleOrder* Arena::CreateMaybeMessage< ::autotrade::StockOrdersReqt_SingleOrder >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::StockOrdersReqt_SingleOrder >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::StockOrdersReqt* Arena::CreateMaybeMessage< ::autotrade::StockOrdersReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::StockOrdersReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::StockOrdersResp_OrderResult* Arena::CreateMaybeMessage< ::autotrade::StockOrdersResp_OrderResult >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::StockOrdersResp_OrderResult >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::StockOrdersResp* Arena::CreateMaybeMessage< ::autotrade::StockOrdersResp >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::StockOrdersResp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::StockOrdersRecieved* Arena::CreateMaybeMessage< ::autotrade::StockOrdersRecieved >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::StockOrdersRecieved >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::StockOrdersCreateResp_OrderList* Arena::CreateMaybeMessage< ::autotrade::StockOrdersCreateResp_OrderList >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::StockOrdersCreateResp_OrderList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::StockOrdersCreateResp* Arena::CreateMaybeMessage< ::autotrade::StockOrdersCreateResp >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::StockOrdersCreateResp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::StockDeleteReqt* Arena::CreateMaybeMessage< ::autotrade::StockDeleteReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::StockDeleteReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::StockDeleteResp* Arena::CreateMaybeMessage< ::autotrade::StockDeleteResp >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::StockDeleteResp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::StockDeletesReqt* Arena::CreateMaybeMessage< ::autotrade::StockDeletesReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::StockDeletesReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::StockDeletesResp* Arena::CreateMaybeMessage< ::autotrade::StockDeletesResp >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::StockDeletesResp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::StockCreateRedeemReqt* Arena::CreateMaybeMessage< ::autotrade::StockCreateRedeemReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::StockCreateRedeemReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::StockCreateRedeemResp* Arena::CreateMaybeMessage< ::autotrade::StockCreateRedeemResp >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::StockCreateRedeemResp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::StockQueryOrderReqt* Arena::CreateMaybeMessage< ::autotrade::StockQueryOrderReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::StockQueryOrderReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::StockQueryOrderResp_OrderDetail* Arena::CreateMaybeMessage< ::autotrade::StockQueryOrderResp_OrderDetail >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::StockQueryOrderResp_OrderDetail >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::StockQueryOrderResp* Arena::CreateMaybeMessage< ::autotrade::StockQueryOrderResp >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::StockQueryOrderResp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::StockQueryOrdersReqt* Arena::CreateMaybeMessage< ::autotrade::StockQueryOrdersReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::StockQueryOrdersReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::StockQueryOrdersResp_OrderDetail* Arena::CreateMaybeMessage< ::autotrade::StockQueryOrdersResp_OrderDetail >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::StockQueryOrdersResp_OrderDetail >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::StockQueryOrdersResp* Arena::CreateMaybeMessage< ::autotrade::StockQueryOrdersResp >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::StockQueryOrdersResp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::ETFBasicInfoQueryReqt* Arena::CreateMaybeMessage< ::autotrade::ETFBasicInfoQueryReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::ETFBasicInfoQueryReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::ETFBasicInfoQueryResp_ETFBasicInfo* Arena::CreateMaybeMessage< ::autotrade::ETFBasicInfoQueryResp_ETFBasicInfo >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::ETFBasicInfoQueryResp_ETFBasicInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::ETFBasicInfoQueryResp* Arena::CreateMaybeMessage< ::autotrade::ETFBasicInfoQueryResp >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::ETFBasicInfoQueryResp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::ETFBasketListQueryReqt* Arena::CreateMaybeMessage< ::autotrade::ETFBasketListQueryReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::ETFBasketListQueryReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::ETFBasketListQueryResp_ConstituentStockInfo* Arena::CreateMaybeMessage< ::autotrade::ETFBasketListQueryResp_ConstituentStockInfo >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::ETFBasketListQueryResp_ConstituentStockInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::ETFBasketListQueryResp* Arena::CreateMaybeMessage< ::autotrade::ETFBasketListQueryResp >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::ETFBasketListQueryResp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::StockQueryCaptialReqt* Arena::CreateMaybeMessage< ::autotrade::StockQueryCaptialReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::StockQueryCaptialReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::StockQueryCapitalReqt* Arena::CreateMaybeMessage< ::autotrade::StockQueryCapitalReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::StockQueryCapitalReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::StockCapital* Arena::CreateMaybeMessage< ::autotrade::StockCapital >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::StockCapital >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::StockQueryPositionReqt* Arena::CreateMaybeMessage< ::autotrade::StockQueryPositionReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::StockQueryPositionReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::StockPosition_Position* Arena::CreateMaybeMessage< ::autotrade::StockPosition_Position >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::StockPosition_Position >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::StockPosition* Arena::CreateMaybeMessage< ::autotrade::StockPosition >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::StockPosition >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::StockQueryDealDetailReqt* Arena::CreateMaybeMessage< ::autotrade::StockQueryDealDetailReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::StockQueryDealDetailReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::StockDealDetail* Arena::CreateMaybeMessage< ::autotrade::StockDealDetail >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::StockDealDetail >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::ETFBasketDynamicInfoReqt* Arena::CreateMaybeMessage< ::autotrade::ETFBasketDynamicInfoReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::ETFBasketDynamicInfoReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::ETFBasketDynamicInfo_DynamicInfo* Arena::CreateMaybeMessage< ::autotrade::ETFBasketDynamicInfo_DynamicInfo >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::ETFBasketDynamicInfo_DynamicInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::ETFBasketDynamicInfo* Arena::CreateMaybeMessage< ::autotrade::ETFBasketDynamicInfo >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::ETFBasketDynamicInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::RawStockKnock* Arena::CreateMaybeMessage< ::autotrade::RawStockKnock >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::RawStockKnock >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::OneStockKnock* Arena::CreateMaybeMessage< ::autotrade::OneStockKnock >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::OneStockKnock >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::SumStockKnock* Arena::CreateMaybeMessage< ::autotrade::SumStockKnock >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::SumStockKnock >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::CStockAvailableBalanceQueryReqt* Arena::CreateMaybeMessage< ::autotrade::CStockAvailableBalanceQueryReqt >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::CStockAvailableBalanceQueryReqt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::autotrade::CStockAvailableBalanceQueryResp* Arena::CreateMaybeMessage< ::autotrade::CStockAvailableBalanceQueryResp >(Arena* arena) {
  return Arena::CreateInternal< ::autotrade::CStockAvailableBalanceQueryResp >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
