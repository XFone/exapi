{
  "swagger": "2.0",
  "info": {
    "title": "API",
    "description": "Auto generated by EIS Message Header Parser",
    "termsOfService": "https://www.zerone.io/app/terms",
    "contact": {
      "email": "support@zerone.io"
    },
    "version": "1.0"
  },
  "definitions": {
    "QueryFilterParams": {
      "description": "",
      "properties": {
        "symbol": {
          "type": "string"
        },
        "filter": {
          "type": "string"
        },
        "columns": {
          "type": "string"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "start": {
          "type": "integer",
          "format": "int32"
        },
        "reverse": {
          "type": "boolean"
        },
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "format": "date-time"
        },
        "_bufsiz": {
          "type": "integer",
          "format": "int32"
        },
        "required": [],
        "type": "object",
        "decoder": "int from_json(JsonUtils::Json &json, QueryFilterParams &v)",
        "encoder": "std::string to_json(const QueryFilterParams &v)"
    },
    "OrderParams": {
      "description": "",
      "properties": {
        "symbol": {
          "type": "string"
        },
        "side": {
          "type": "string"
        },
        "simpleOrderQty": {
          "type": "number",
          "format": "double"
        },
        "orderQty": {
          "type": "integer",
          "format": "int32"
        },
        "price": {
          "type": "number",
          "format": "double"
        },
        "displayQty": {
          "type": "integer",
          "format": "int32"
        },
        "stopPx": {
          "type": "number",
          "format": "double"
        },
        "clOrdID": {
          "type": "string"
        },
        "clOrdLinkID": {
          "type": "string"
        },
        "pegOffsetValue": {
          "type": "number",
          "format": "double"
        },
        "pegPriceType": {
          "type": "string"
        },
        "ordType": {
          "type": "string"
        },
        "timeInForce": {
          "type": "string"
        },
        "execInst": {
          "type": "string"
        },
        "contingencyType": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "_bufsiz": {
          "type": "integer",
          "format": "int32"
        },
        "required": [],
        "type": "object",
        "decoder": "int from_json(JsonUtils::Json &json, OrderParams &v)",
        "encoder": "std::string to_json(const OrderParams &v)"
    },
    "OrderAmendParams": {
      "description": "",
      "properties": {
        "orderId": {
          "type": "string"
        },
        "origClOrdID": {
          "type": "string"
        },
        "clOrdID": {
          "type": "string"
        },
        "simpleOrderQty": {
          "type": "number",
          "format": "double"
        },
        "orderQty": {
          "type": "integer",
          "format": "int32"
        },
        "simpleLeavesQty": {
          "type": "number",
          "format": "double"
        },
        "leavesQty": {
          "type": "integer",
          "format": "int32"
        },
        "price": {
          "type": "number",
          "format": "double"
        },
        "stopPx": {
          "type": "number",
          "format": "double"
        },
        "pegOffsetValue": {
          "type": "number",
          "format": "double"
        },
        "text": {
          "type": "string"
        },
        "_bufsiz": {
          "type": "integer",
          "format": "int32"
        },
        "required": [],
        "type": "object",
        "decoder": "int from_json(JsonUtils::Json &json, OrderAmendParams &v)",
        "encoder": "std::string to_json(const OrderAmendParams &v)"
    },
    "QueryPositionParams": {
      "description": "",
      "properties": {
        "filter": {
          "type": "string"
        },
        "columns": {
          "type": "string"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "required": [],
        "type": "object",
        "decoder": "int from_json(JsonUtils::Json &json, QueryPositionParams &v)",
        "encoder": "std::string to_json(const QueryPositionParams &v)"
    }
  },
  "securityDefinitions": {},
  "security": {} 
}
